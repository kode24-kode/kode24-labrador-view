<div class="piano-dropdown hidden[[ #settings.classes ]] [[.]][[ /settings.classes ]]" data-id="pageElements-[[ id ]]">

    <div class="positionRelative">
        <button class="piano-dropdown-btn piano-dropdown-expander" aria-label="[[ #settings.label ]][[ settings.label]][[ /settings.label ]][[ ^settings.label ]]Open my account menu[[ /settings.label ]]" aria-expanded="false" aria-controls="piano-dropdown-container" aria-haspopup="menu">
            [[ #settings.icon.first ]]
                <i class="[[ ^settings.icon.type ]]fi-torso[[ /settings.icon.type ]][[ settings.icon.type ]]"></i>
            [[ /settings.icon.first ]]
            <span class="piano-dropdown-text"></span>
            [[ #settings.icon.last ]]
                <i class="[[ ^settings.icon.type ]]fi-torso[[ /settings.icon.type ]][[ settings.icon.type ]]"></i>
            [[ /settings.icon.last ]]
        </button>
        [[ ^settings.positionContainerAbsolute ]]
            <div class="piano-dropdown-container">        
                [[& children ]]
            </div>
        [[ /settings.positionContainerAbsolute ]]
    </div>

    [[ #settings.positionContainerAbsolute ]]
        <div class="piano-dropdown-container">
        [[ ^settings.noRow ]]
            <div class="row">
        [[ /settings.noRow ]]
                [[& children ]]
        [[ ^settings.noRow ]]
            </div>
        [[ /settings.noRow ]]
        </div>
    [[ /settings.positionContainerAbsolute ]]
    
</div>

<script>
    window.addEventListener('load', (event) => {
        const pianoDropdown = document.querySelector('[data-id="pageElements-[[ id ]]"].piano-dropdown');
        const pianoDropdownButton = pianoDropdown.querySelector('.piano-dropdown-btn');

        function toggleDropdown() {
            pianoDropdown.classList.toggle('expanded');
            pianoDropdownButton.setAttribute('aria-expanded', pianoDropdownButton.getAttribute('aria-expanded') === 'true' ? 'false' : 'true');
        }

        function closeDropdown(e) {
            if(e.key === 'Escape') {
                toggleDropdown();
                pianoDropdownButton.focus();
                window.removeEventListener('keydown', closeDropdown);
            }
        }

        if(pianoDropdownButton) {
            pianoDropdownButton.addEventListener('click', function(e) {
                e.preventDefault();
                toggleDropdown();

                // If the menu gets expanded, add the eventlistener that will close it on pressing Escape
                // else, remove the eventlistener otherwise it will continue to listen for escape even if the menu is closed.
                if(pianoDropdownButton.getAttribute('aria-expanded') === 'true') {
                    window.addEventListener('keydown', closeDropdown);
                } else {
                    window.removeEventListener('keydown', closeDropdown);
                }
            })
        }

        document.querySelectorAll('.piano-dropdown .piano-dropdown-expander, .piano-dropdown .piano-dropdown-container, .stop-propagation').forEach(function (element) {
            element.addEventListener('click', function (e) {
                e.stopPropagation();
            });
        });

        tp = window.tp || [];
        if (!tp.pianoId) {
            return;
        }

        const isLoggedIn = tp.pianoId.isUserValid();
        if (isLoggedIn) {
            pianoDropdown.classList.remove('hidden');
            const userInfo = tp.pianoId.getUser();
            if (userInfo) {
                const pianoDropdownTextStrings = {
                    prefix: '[[ settings.text.prefix ]]',
                    postfix: '[[ settings.text.postfix ]]',
                    firstName: userInfo.firstName || '',
                    lastName: userInfo.lastName || '',
                    initials: userInfo.firstName.charAt(0) + userInfo.lastName.charAt(0),
                }
                const pianoDropdownTextSettings = {
                    showFirstName: [[ #settings.text.firstname ]]true[[ /settings.text.firstname ]][[ ^settings.text.firstname ]]false[[ /settings.text.firstname ]],
                    showLastName: [[ #settings.text.lastname ]]true[[ /settings.text.lastname ]][[ ^settings.text.lastname ]]false[[ /settings.text.lastname ]],
                    showInitials: [[ #settings.text.initials ]]true[[ /settings.text.initials ]][[ ^settings.text.initials ]]false[[ /settings.text.initials ]],
                    showPrefix: [[ #settings.text.prefix ]]true[[ /settings.text.prefix ]][[ ^settings.text.prefix ]]false[[ /settings.text.prefix ]],
                    showPostfix: [[ #settings.text.postfix ]]true[[ /settings.text.postfix ]][[ ^settings.text.postfix ]]false[[ /settings.text.postfix ]],
                }
                let pianoDropdownText = '';
                if (pianoDropdownTextSettings.showPrefix) { pianoDropdownText += pianoDropdownTextStrings.prefix; }
                if (pianoDropdownTextSettings.showFirstName) { pianoDropdownText += pianoDropdownTextStrings.firstName; }
                if (pianoDropdownTextSettings.showLastName) { pianoDropdownText += ' ' + pianoDropdownTextStrings.lastName; }
                if (pianoDropdownTextSettings.showInitials) { pianoDropdownText += pianoDropdownTextStrings.initials; }
                if (pianoDropdownTextSettings.showPostfix) { pianoDropdownText += pianoDropdownTextStrings.postfix; }

                if (pianoDropdownText) {
                    pianoDropdown.querySelector('.piano-dropdown-text').textContent = pianoDropdownText;
                } else {
                    pianoDropdown.querySelector('.piano-dropdown-text').textContent = '';
                }
            }
        }

        
    });
</script>