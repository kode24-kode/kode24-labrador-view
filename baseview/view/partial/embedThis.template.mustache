<div class="dac-embed-this">
    <form action="">
        <input type="button" class="dac_embed_toggle" value="{{ #lang }}embed.embed_label{{ /lang }}" {{ #app.isEditor }}disabled title="Disabled in the editor" style="pointer-events: none;"{{ /app.isEditor }}>
        <div class="dac-embed-this-popup">
            <div class="dac-embed-this-content">
                <p class="dac-embed-close"><a href="#">{{ #lang }}embed.close{{ /lang }}</a></p>
                <div class="dac-embed-aside">
                    <h3>{{ #lang }}embed.heading{{ /lang }}</h3>
                    <p>{{ #lang }}embed.description{{ /lang }}</p>
                    <p style="margin-top:1.2rem;"><strong>{{ #lang }}embed.title_customize{{ /lang }}</strong></p>
                    <p>
                        <label for="dac-embed-type-teaser"><input type="radio" data-key="type" name="dac-embed-content-type" id="dac-embed-type-teaser" value="teaser" checked> {{ #lang }}embed.label_teaser{{ /lang }}</label>
                        <label for="dac-embed-type-full"><input type="radio" data-key="type" name="dac-embed-content-type" id="dac-embed-type-full" value="full"> {{ #lang }}embed.label_full{{ /lang }}</label>
                    </p>
                    <p>
                        <label for="dac-embed-content-title"><input type="checkbox" data-key="title" name="dac-embed-content-title" id="dac-embed-content-title" value="1" checked> {{ #lang }}embed.label_content_title{{ /lang }}</label><br>
                        <label for="dac-embed-content-subtitle"><input type="checkbox" data-key="subtitle" name="dac-embed-content-subtitle" id="dac-embed-content-subtitle" value="1" checked> {{ #lang }}embed.label_content_subtitle{{ /lang }}</label><br>
                        <label for="dac-embed-content-image"><input type="checkbox" data-key="image" name="dac-embed-content-image" id="dac-embed-content-image" value="1" checked> {{ #lang }}embed.label_content_image{{ /lang }}</label><br>
                        <label for="dac-embed-content-padding"><input type="checkbox" data-key="padding" name="dac-embed-content-padding" id="dac-embed-content-padding" value="1" checked> {{ #lang }}embed.label_content_padding{{ /lang }}</label><br>
                        <label for="dac-embed-content-sitelink"><input type="checkbox" data-key="sitelink" name="dac-embed-content-sitelink" id="dac-embed-content-sitelink" value="1" checked> {{ #lang }}embed.label_content_sitelink{{ /lang }}</label><br>
                        <label for="dac-embed-content-sitelinkLogo"><input type="checkbox" data-key="sitelinkLogo" name="dac-embed-content-sitelinkLogo" id="dac-embed-content-sitelinkLogo" value="1" checked> {{ #lang }}embed.label_content_sitelinkLogo{{ /lang }}</label><br>
                        <label for="dac-embed-content-poweredby"><input type="checkbox" data-key="poweredby" name="dac-embed-content-poweredby" id="dac-embed-content-poweredby" value="1" checked> {{ #lang }}embed.label_content_poweredby{{ /lang }}</label>
                    </p>
                    <textarea readonly class="dac-embed-textarea"></textarea>
                    <p>
                        <input type="button" class="dac_embed_copy" value="{{ #lang }}embed.label_copy{{ /lang }}">
                    </p>
                </div>
                <div class="dac-embed-preview">
                    <div class="dac-embed-frame"></div>
                </div>
            </div>
        </div>
    </form>
<script type="module">
(function () {
    if (window.embedScriptLoaded) return; // Check if the script has already been run
    window.embedScriptLoaded = true; // Set flag to prevent future runs

    const embedContainers = document.querySelectorAll('.dac-embed-this');
    const embedConfig = {
        type: ('{{ getConfig.embeddable.config.type }}' === 'full') ? 'full' : 'teaser',
        title: ('{{ getConfig.embeddable.config.displayTitle }}' === 'false') ? false : '1',
        subtitle: ('{{ getConfig.embeddable.config.displaySubtitle }}' === 'false') ? false : '1',
        image: ('{{ getConfig.embeddable.config.displayMainImage }}' === 'false') ? false : '1',
        padding: ('{{ getConfig.embeddable.config.padding }}' === 'false') ? false : '1',
        sitelink: ('{{ getConfig.embeddable.config.displayLinkToSite }}' === 'false') ? false : '1',
        sitelinkLogo: ('{{ getConfig.embeddable.config.displayLogoInLinkToSite }}' === 'false') ? false : '1',
        poweredby: ('{{ getConfig.embeddable.config.displayPoweredByLink }}' === 'false') ? false : '1'
    };

    embedContainers.forEach((container) => {
        const toggleBtn = container.querySelector('input.dac_embed_toggle');
        const element = container.querySelector('.dac-embed-this-popup');
        const textarea = container.querySelector('.dac-embed-textarea');
        if (!toggleBtn || !element || !textarea) { return; }
        
        let hasRun = false;    
        const run = () => {
            document.body.classList.toggle('dac-popup-open');
            element.classList.toggle('dac-open');
            if (hasRun) { return; }
            hasRun = true;

            const data = {
                id: '{{ get.root.id }}',
                sitedomain: '{{{ get.root.filtered.site.domain }}}',
                sitealias: '{{{ get.root.filtered.site.domain_no_protocol }}}',
                version: '{{ getConfig.view_build.baseview.version }}',
                type: embedConfig.type,
                title: embedConfig.title,
                subtitle: embedConfig.subtitle,
                image: embedConfig.image,
                padding: embedConfig.padding,
                sitelink: embedConfig.sitelink,
                sitelinkLogo: embedConfig.sitelinkLogo,
                poweredby: embedConfig.poweredby
            };

            const cache = {
                embedStart: '',
                embedEnd: '',
                embedSrc: `${data.sitedomain}/embed.js?v=${data.version}`,
                msgEl: null
            };

            const inputs = [...element.querySelectorAll('input[data-key]')];

            const updatePreview = () => {
                const container = element.querySelector('.dac-embed-frame');
                if (!container) { return; }
                container.innerHTML = cache.embedStart + cache.embedEnd;
                const script = document.createElement('script');
                script.setAttribute('src', cache.embedSrc);
                script.setAttribute('async', '');
                script.setAttribute('defer', '');
                container.appendChild(script);
            };

            const updateEmbedCode = () => {
                const style = [];
                if (!data.title) { style.push('dac-no-title'); }
                if (!data.subtitle) { style.push('dac-no-subtitle'); }
                if (!data.image) { style.push('dac-no-image'); }
                if (data.padding) { style.push('dac-padding'); }
                if (!data.sitelink) { style.push('dac-no-sitelink'); }
                if (!data.sitelinkLogo) { style.push('dac-no-sitelink-logo'); }
                if (!data.poweredby) { style.push('dac-no-poweredby'); }
                if (data.type === 'full') { style.push('dac-embed-full'); }
                if (data.type === 'teaser') { style.push('dac-embed-teaser'); }

                const current = cache.embedStart;
                cache.embedStart = `<div class="labrador-cms-embed" data-lab-style="${style.join(' ')}" data-lab-content="${data.type}" data-lab-id="${data.id}" data-lab-site="${data.sitealias}">`;
                cache.embedEnd = '</div>';

                textarea.value = `${cache.embedStart}\x3Cscript async defer src="${cache.embedSrc}">\x3C/script>${cache.embedEnd}`;

                if (current !== cache.embedStart) {
                    updatePreview();
                }
            };

            const handleChange = (event) => {
                const key = event.target.getAttribute('data-key');
                if (event.target.type === 'radio') {
                    data.type = event.target.value;
                } else if (event.target.type === 'checkbox') {
                    data[key] = event.target.checked ? '1' : '';
                }
                updateEmbedCode();
            };

            const updateMarkup = (input) => {
                const key = input.getAttribute('data-key');
                const type = input.type;
                if (type === 'radio') {
                    input.checked = data[key] === input.value;
                } else if (type === 'checkbox') {
                    input.checked = data[key] === '1';
                }
            };

            inputs.forEach(input => {
                input.addEventListener('change', handleChange, false);
                updateMarkup(input);
            });

            updateEmbedCode();

            const copyBtn = element.querySelector('input.dac_embed_copy');
            if (copyBtn) {
                const copyContent = async () => {
                    try {
                        if (cache.msgEl) { return; }
                        await navigator.clipboard.writeText(textarea.value);
                        cache.msgEl = document.createElement('span');
                        cache.msgEl.classList.add('dac-embed-copied');
                        cache.msgEl.textContent = '{{ #lang }}embed.text_code_copied{{ /lang }}';
                        copyBtn.after(cache.msgEl);
                        setTimeout(() => {
                            if (cache.msgEl) {
                                cache.msgEl.remove();
                            }
                            cache.msgEl = null;
                        }, 2500);
                    } catch (err) {
                        console.error('Failed to copy: ', err);
                    }
                };

                copyBtn.addEventListener('click', (event) => {
                    copyContent();
                }, false);
            }

            const closeBtn = element.querySelector('a');
            if (closeBtn) {
                closeBtn.addEventListener('click', (event) => { 
                    event.preventDefault();
                    document.body.classList.toggle('dac-popup-open');
                    element.classList.toggle('dac-open');
                }, false);
            }
        };

        toggleBtn.addEventListener('click', run, false);
    });
})();
</script>
</div>
