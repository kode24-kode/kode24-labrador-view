{{! This partial should be included in a page-context. Uses data from page. }}
<script>
    window.dachserData.handlers = {
        parallax: function(item) {
            if (window.Dac && window.Dac.Parallax) {
                new Dac.Parallax(item);
            } else {
                console.warn('parallax: Missing required class Dac.Parallax. Content will not animate.');
            }
        },
        swipehelper: function(item) {
            if (window.Dac && window.Dac.SwipeHelper) {
                var element = document.querySelector(item.selector);
                if (!element) {
                    console.warn('SwipeHelper: Missing element for selector: "' + item.selector + '".');
                    return null;
                }
                return new Dac.SwipeHelper(element, item);
            } else {
                console.warn('SwipeHelper: Missing required function Dac.SwipeHelper.');
                return null;
            } 
        },
        readprogress: function(item) {
            if (window.Dac && window.Dac.ReadProgress) {
                var element = document.querySelector(item.selector);
                if (!element) {
                    console.warn('ReadProgress: Missing element for selector: "' + item.selector + '".');
                    return;
                }
                new Dac.ReadProgress(element, item);
            } else {
                console.warn('ReadProgress: Missing required function Dac.ReadProgress.');
            } 
        },
        tabnavigation: function(item) {
            if (window.Dac && window.Dac.TabNavigation) {
                new Dac.TabNavigation(item);
            } else {
                console.warn('TabNavigation: Missing required function Dac.Tabnavigation.');
            } 
        },
        elementattributetoggler: function(item) {
            if (window.Dac && window.Dac.ElementAttributeToggler) {
                new Dac.ElementAttributeToggler(item);
            } else {
                console.warn('ElementAttributeToggler: Missing required class Dac.ElementAttributeToggler.');
            } 
        },
        articlelists: (item) => {
            if (window.Dac && window.Dac.ArticleLists) {
                new Dac.ArticleLists(item);
            } else {
                console.warn('ElementAttributeToggler: Missing required class Dac.ArticleLists.');
            }
        }
    };

    window.dachserData.execute = () => {
    
        // Parallax
        // Register each element requiering js-animations
        const parallaxQueue = window.dachserData.get('parallax') || [];
        parallaxQueue.forEach(item => {
            window.dachserData.handlers.parallax(item);
        });
    
        // SwipeHelper, used by several components like ArticleScroller etc.
        // Register each element using SwipeHelper:
        const swipehelperQueue = window.dachserData.get('swipehelper') || [];
        swipehelperQueue.forEach(item => {
            window.dachserData.setInstance(
                'swipehelper',
                item.selector,
                window.dachserData.handlers.swipehelper(item)
            );
        });

        // ReadProgress
        const readprogressQueue = window.dachserData.get('readprogress') || [];
        readprogressQueue.forEach(item => {
            window.dachserData.handlers.readprogress(item);
        });
    
        // Tab-navigation
        const tabnavigationQueue = window.dachserData.get('tabnavigation') || [];
        tabnavigationQueue.forEach(item => {
            window.dachserData.handlers.tabnavigation(item);
        });

        // ElementAttributeToggler
        const elementAttributeTogglerQueue = window.dachserData.get('elementattributetoggler') || [];
        elementAttributeTogglerQueue.forEach(item => {
            window.dachserData.handlers.elementattributetoggler(item);
        });

        const articlelistsQueue = window.dachserData.get('articlelists') || [];
        articlelistsQueue.forEach(item => {
            window.dachserData.handlers.articlelists(item);
        });
    };

    (function () {

        window.dachserData.execute();
    
        {{ #app.isEditor }}
        // Editor: Can be used to redraw items added using window.dachserData.push.
        window.dachserData.reflow = (key, identifierKey, identifierValue) => {
            const keyArray = window.dachserData.get(key);
            if (!Array.isArray(keyArray)) {
                return;
            }
            // Each redraw will add to the key. Use last.
            var last = keyArray.filter(item => item[identifierKey] === identifierValue).pop();
            if (last && typeof window.dachserData.handlers[key] === 'function') {
                window.dachserData.handlers[key](last);
            }
        };
        {{ /app.isEditor }}
    }());
</script>
