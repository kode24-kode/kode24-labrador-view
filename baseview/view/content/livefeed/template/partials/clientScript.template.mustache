<script type="module">
    import { Core } from '/labrador/Core.js';
    import { behaviours, Entry } from '/view-resources/build/modules/client_modules.js';
    import * as baseview from '/view-resources/build/modules/client_package.js';

    const timestamp = new Date();
    let timeSinceContent = 0; // Seconds since last new content
    let pauseUpdates = false;
    let timeoutId = null;
    const updateFrequency = {{{ get.current.filtered.updateFrequency }}};
    
    timestamp.setTime({{ get.current.filtered.initialRenderTime }});
    
    const resources = {
        behaviours: {},
        entries: [Entry]
    };
    
    window.Sys = {
        logger: console
    };
    
    for (const name of Object.keys(behaviours)) {
        resources.behaviours[name] = [behaviours[name]];
    }
    
    const modifiedConfig = { ... baseview.config };
    modifiedConfig.contentLanguage = '{{ getConfig.contentLanguage }}';
    
    const site = {{{ get.root.filtered.siteJSON }}};
    const configObject = { localisation: { lang: { } } };
    configObject.localisation.lang[site.alias] = {};
    configObject.localisation.lang[site.alias]['{{ getConfig.contentLanguage }}'] = {
        dates: {{{ get.current.filtered.dateStrings }}}
    };
    
    const labrador = new Core({
        logger: console,
        settings: {
            siteAlias: `${ site.alias }`,
            device: '{{ getCmsConfig.device}}',
            debug: true,
            transform: false
        },
        resources: {
            config: {
                site,
                image_server: '{{{ getCmsConfig.image_server }}}',
                customer: modifiedConfig,
                ConfigObject: configObject
            },
            templates: {
                view: baseview.templates
            },
            properties: baseview.properties,
            views: ['baseview_client']
        },
        globals: window,
        callbacks: {},
        entries: resources.entries,
        behaviours: resources.behaviours
    });
    
    const container = document.querySelector('#livefeed-{{ get.current.id }}');

    {{ > content/livefeed/template/partials/timeUpdate }}

    function render(data = []) {
        let insertedItemsCounter = 0;
        let adsIdentifiers = [];
        data.forEach(notice => {
            const element = container.querySelector(`#notice-${ notice.contentdata.id }`);
            if (notice.remove) {
                if (element) {
                    element.parentElement.remove();
                }
                return;
            }
            labrador.setData([notice]);
            const markup = labrador.draw();
            const tmp = document.createElement('div');
            tmp.innerHTML = `<li class="inserted livefeed-item scroll-item snap-element {{ get.current.metadata.item_color }}"><span class="timeline-marker {{ get.current.metadata.ui_color }}"></span>${ markup }</li>`;
            if (element != null) {
                const el = tmp.querySelector('.notice');
                element.replaceWith(el);
                highlightElement(el.parentElement);
            } else {
                // Insert after pinned items
                if (container.firstChild.querySelector('.pinned')) {
                    for (const child of container.childNodes) {
                        if (!child.querySelector('.pinned')) {
                            container.insertBefore(tmp.firstChild, child);
                            break;
                        }
                    }
                } else {
                    const needScroll = container.scrollLeft === 0;
                    const el = tmp.firstChild;
                    container.prepend(el);
                    if (needScroll) {
                        container.scrollLeft = 0;
                    }
                    highlightElement(el);
                }
                adsIdentifiers.push(notice.contentdata.id);
                insertedItemsCounter++;
            }
        });
        if (window.onClientAdsUpdate) {
            setTimeout(() => {
                window.onClientAdsUpdate(insertedItemsCounter, adsIdentifiers.join('-'));
            }, 100);
        }
    }

    function highlightElement(element) {
        if (element) {
            element.classList.add('highlight');
            setTimeout(() => {
                element.classList.remove('highlight');
            }, 10000);
        }
    }
    
    function updateSwipeHelper() {
        const helper = window.dachserData.getInstance('swipehelper', '#livefeed_{{ get.current.id }}');
        if (!helper) { return; }
        helper.reflow();
    }
    
    // Transform from API-format to internal format
    function getImageData(apiImage, meta) {
        return labrador.getApi().v1.model.serialize.apiToInternal({ type: 'image', data: apiImage, meta });
    }

    function getStructure(items, imageId) {
        for (const item of items) {
            // Note: Use == instead of === to allow for type conversion
            if (item.type === 'image' && item.node_id == imageId) {
                return item;
            }
        }
        return null;
    }

    function updateTimeSinceContent() {
        timeSinceContent = Math.ceil((new Date().getTime() - timestamp.getTime()) / 1000); // Seconds
    }
    
    function update() {
        updateTimeSinceContent();
        const timestampString = timestamp.toISOString();
        const query = `{{^get.current.filtered.clientQuery}}&query={{/get.current.filtered.clientQuery}}{{ #get.current.filtered.clientQuery }}{{{ get.current.filtered.clientQuery }}} AND {{/get.current.filtered.clientQuery}}(published:[${ timestampString } *] OR modified:[${ timestampString } *])`;
        const url = `{{{ get.current.filtered.url }}}${ query }`;
        fetch(url)
            .then(response => response.json())
            .then(response => {
                if (response.result) {
                    const updatedData = [];
                    response.result.forEach(data => {
                        const {
                            attribute = {},
                            field = {}
                        } = data.notice;
                        const children = [];
                        if (data.notice.children && data.notice.children.image) {
                            const images = Array.isArray(data.notice.children.image) ? data.notice.children.image : [data.notice.children.image];
                            for (const image of images) {
                                // Try to read the structure data and use metadata for the image:
                                let metadata = null;
                                if (field.structure_json && image.attribute.id) {
                                    try {
                                        const structureData = JSON.parse(field.structure_json);
                                        for (const item of structureData) {
                                            if (item.type === 'bodytext') {
                                                const structure = getStructure(item.children || [], image.attribute.id);
                                                console.log('structure:', structure);
                                                metadata = structure ? structure.metadata : null;
                                                break
                                            }
                                        }
                                    } catch (e) {
                                        console.error('Failed to parse structure data', e);
                                    }
                                }
                                // Disable fullwidth inside the feed
                                metadata.hasFullWidth = {
                                    desktop: false,
                                    mobile: false
                                };
                                children.push(getImageData(image, metadata));
                            }
                        }
    
                        // The API may return empty strings as objects, so we need to check for that
                        if (typeof field.bodytext === 'object') {
                            field.bodytext = '';
                        }
    
                        updatedData.push({
                            path: 'livefeed', // Simulate context
                            type: 'notice',
                            contentdata: {
                                id: attribute.id,
                                tags: data.notice.tag && Array.isArray(data.notice.tag.tag) ? data.notice.tag.tag : [],
                                fields: {
                                    title: {
                                        value: field.title
                                    },
                                    bodytext: {
                                        value: field.bodytext
                                    },
                                    published: {
                                        value: field.published
                                    },
                                    modified: {
                                        value: field.modified
                                    },
                                    published_url: {
                                        value: field.published_url
                                    },
                                    userName: {
                                        value: field.userName
                                    },
                                    displayCaption: {
                                        value: true
                                    }
                                }
                            },
                            remove: field.visibility_status === 'H',
                            children
                        });
                    });
                    if (response.totalCount > 0) {
                        render(updatedData.reverse());
                        itemList = [];
    
                        const latest = response.result[0];
                        const lastTimestamp = (latest.notice.field.modified < latest.notice.field.published
                                ? latest.notice.field.published
                                : latest.notice.field.modified) * 1000;
    
                        if (timestamp.getTime() < lastTimestamp) {
                            timestamp.setTime(lastTimestamp + 1000);
                            updateTimeSinceContent();
                            runUpdate();
                        }
                        updateSwipeHelper();
                    }
                }
            });
    }

    function runUpdate() {
        if (pauseUpdates) {
            return;
        }
        const runInterval = (interval) => {
            const validatedInterval = Math.max(interval, 5);
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                update();
                runUpdate();
            }, validatedInterval * 1000);
        };
        for (const item of updateFrequency) {
            if (timeSinceContent >= item.range[0] && (!item.range[1] || timeSinceContent < item.range[1])) {
                runInterval(item.interval);
                return;
            }
        }
        console.warn('[Livefeed] No interval found for elapsed time:', timeSinceContent);
    }

    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            console.info('[Livefeed] Updates resumed');
            pauseUpdates = false;
            update();
            runUpdate();
        } else {
            console.info('[Livefeed] Updates paused');
            pauseUpdates = true;
        }
    });

    runUpdate();

</script>