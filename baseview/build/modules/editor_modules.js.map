{"version":3,"file":"editor_modules.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,UAAU,+DAA+D,uBAAuB,EAAE,0DAA0D,4FAA4F,eAAe,wCAAwC,SAAS,GAAG,MAAM,OAAO,gBAAgB,EAAE,SAAS,cAAc,2HAA2H,EAAE,QAAQ,6BAA6B,6CAA6C,EAAE,MAAM,8CAA8C,6BAA6B,0BAA0B,EAAE,OAAO,yCAAyC,mCAAmC,aAAa,UAAU,mDAAmD,OAAO,EAAE,gEAAgE,aAAa,6BAA6B,8EAA8E,EAAE,YAAY,8CAA8C,UAAU,2BAA2B,EAAE,OAAO,8CAA8C,iCAAiC,2DAA2D,UAAU,mDAAmD,OAAO,EAAE,iGAAiG,SAAS,kCAAkC,gGAAgG,8CAA8C,UAAU,SAAS,gCAAgC,KAAK,8CAA8C,8GAA8G,iCAAiC,oEAAoE,+CAA+C,oDAAoD,yDAAyD,EAAE,gCAAgC,aAAa,IAAI,kBAAkB,qDAAqD,EAAE,WAAW,EAAE,GAAG,4HAA4H,EAAE,SAAS,EAAE,oBAAoB,EAAE,gBAAgB,uEAAuE,EAAE,kBAAkB,UAAU,cAAc,QAAQ,eAAe,0DAA0D,YAAY,OAAO,6CAA6C,0CAA0C,sBAAsB,2DAA2D,kBAAkB,mCAAmC,uBAAuB,8DAA8D,OAAO,gCAAgC,gDAAgD,kBAAkB,mCAAmC,8DAA8D,wDAAwD,0BAA0B,mCAAmC,mCAAmC,YAAY,OAAO,MAAM,2BAA2B,GAAG,MAAM,UAAU,oDAAoD,EAAE,0BAA0B,YAAY,eAAe,+LAA+L,IAAI,sBAAsB,eAAe,2BAA2B,MAAM,uDAAuD,cAAc,WAAW,SAAS,gBAAgB,SAAS,oDAAoD,kEAAkE,GAAG,2FAA2F,0BAA0B,sEAAsE,mCAAmC,oHAAoH,oDAAoD,IAAI,QAAQ,kEAAkE,SAAS,MAAM,gFAAgF,GAAG,2DAA2D,kFAAkF,SAAS,6ZAA6Z,qBAAqB,+GAA+G,kBAAkB,6DAA6D,SAAS,kCAAkC,eAAe,WAAW,iBAAiB,mCAAmC,MAAM,mDAAmD,MAAM,gDAAgD,MAAM,2BAA2B,qDAAqD,EAAE,MAAM,6FAA6F,MAAM,0DAA0D,SAAS,IAAI,iCAAiC,GAAG,qDAAqD,qBAAqB,OAAO,mCAAmC,OAAO,uBAAuB,eAAe,OAAO,SAAS,IAAI,gDAAgD,WAAW,qBAAqB,gPAAgP,4FAA4F,gDAAgD,WAAW,mBAAmB,2CAA2C,WAAW,mEAAmE,2GAA2G,IAAI,OAAO,6BAA6B,SAAS,4HAA4H,SAAS,qBAAqB,QAAQ,8BAA8B,wFAAwF,oEAAoE,iBAAiB,0BAA0B,EAAE,0CAA0C,SAAS,OAAO,yCAAyC,SAAS,8CAA8C,OAAO,kCAAkC,QAAQ,qCAAqC,wBAAwB,+BAA+B,aAAa,oFAAoF,GAAG,GAAG,SAAS,wDAAwD,2CAA2C,gCAAgC,OAAO,0BAA0B,4BAA4B,EAAE,cAAc,GAAG,kCAAkC,QAAQ,mCAAmC,YAAY,EAAE,eAAe,EAAE,iBAAiB,2BAA2B,GAAG,YAAY,GAAG,wBAAwB,WAAW,sBAAsB,aAAa,cAAc,EAAE,4BAA4B,mEAAmE,uBAAuB,KAAK,wEAAwE,oBAAoB,2EAA2E,UAAU,4HAA4H,MAAM,IAAI,UAAU,QAAQ,MAAM,KAAK,QAAQ,GAAG,QAAQ,MAAM,IAAI,UAAU,EAAE,QAAQ,2CAA2C,cAAc,aAAa,uBAAuB,IAAI,0BAA0B,IAAI,UAAU,aAAa,KAAK,yBAAyB,QAAQ,6EAA6E,OAAO,MAAM,EAAE,6EAA6E,OAAO,MAAM,EAAE,6FAA6F,OAAO,MAAM,EAAE,qEAAqE,OAAO,MAAM,EAAE,iEAAiE,OAAO,MAAM,EAAE,uEAAuE,OAAO,MAAM,EAAE,0BAA0B,mDAAmD,IAAI,qCAAqC,0EAA0E,wBAAwB,QAAQ,EAAE,UAAU,SAAS,QAAQ,wEAAwE,SAAS,iFAAiF,UAAU,mFAAmF,YAAY,sFAAsF,WAAW,wFAAwF,SAAS,kFAAkF,WAAW,oFAAoF,UAAU,qFAAqF,WAAW,oFAAoF,OAAO,gEAAgE,QAAQ,oEAAoE,MAAM,yDAAyD,OAAO,6DAA6D,OAAO,6DAA6D,SAAS,4EAA4E,YAAY,2FAA2F,UAAU,+EAA+E,WAAW,qFAAqF,WAAW,qFAAqF,MAAM,0EAA0E,MAAM,qDAAqD,MAAM,SAAS,UAAU,gFAAgF,OAAO,gEAAgE,QAAQ,sEAAsE,MAAM,wDAAwD,OAAO,gEAAgE,eAAe,MAAM,SAAS,IAAI,IAAI,MAAM,QAAQ,IAAI,GAAG,OAAO,MAAM,QAAQ,IAAI,GAAG,OAAO,MAAM,QAAQ,IAAI,GAAG,OAAO,MAAM,QAAQ,IAAI,GAAG,OAAO,MAAM,EAAE,aAAa,MAAM,IAAI,GAAG,IAAI,IAAI,QAAQ,2BAA2B,yFAAyF,cAAc,0CAA0C,iFAAiF,OAAO,IAAI,WAAW,MAAM,qHAAqH,YAAY,0BAA0B,mCAAmC,gBAAgB,+gBAA+gB,EAAE,eAAe,4BAA4B,0BAA0B,sCAAsC,mBAAmB,4jBAA4jB,EAAE,6BAA6B,YAAY,+cAA+c,gCAAgC,4BAA4B,YAAY,6eAA6e,eAAe,iFAAiF,WAAW,mFAAmF,mBAAmB,uBAAuB,eAAe,mCAAmC,aAAa,kIAAkI,gCAAgC,oBAAoB,mMAAmM,uBAAuB,+RAA+R,wBAAwB,mEAAmE,2BAA2B,oBAAoB,mEAAmE,kCAAkC,0BAA0B,4BAA4B,SAAS,gOAAgO,kFAAkF,gCAAgC,UAAU,EAAE,MAAM,KAAK,GAAG,EAAE,WAAW,EAAE,MAAM,mCAAmC,QAAQ,EAAE,MAAM,KAAK,mBAAmB,EAAE,SAAS,EAAE,MAAM,qDAAqD,OAAO,EAAE,MAAM,KAAK,qBAAqB,EAAE,QAAQ,EAAE,MAAM,gEAAgE,gBAAgB,gBAAgB,6EAA6E,sEAAsE,2CAA2C,cAAc,6BAA6B,uEAAuE,oBAAoB,yCAAyC,sBAAsB,0CAA0C,QAAQ,iDAAiD,uEAAuE,cAAc,gBAAgB,SAAS,wGAAwG,6CAA6C,8GAA8G,8CAA8C,GAAG,gBAAgB,gFAAgF,kBAAkB,gEAAgE,iLAAiL,kBAAkB,0DAA0D,kBAAkB,iDAAiD,IAAI,IAAI,OAAO,GAAG,OAAO,yRAAyR,UAAU,mYAAmY,cAAc,8CAA8C,gBAAgB,MAAM,WAAW,GAAG,OAAO,qBAAqB,cAAc,QAAQ,GAAG,SAAS,gBAAgB,4BAA4B,+HAA+H,qCAAqC,wCAAwC,8CAA8C,GAAG,gBAAgB,6EAA6E,kBAAkB,gEAAgE,iLAAiL,kBAAkB,0DAA0D,kBAAkB,OAAO,6XAA6X,QAAQ,aAAa,8FAA8F,GAAG,EAAE,eAAe,0EAA0E,aAAa,cAAc,qBAAqB,mOAAmO,oBAAoB,OAAO,uJAAuJ,qBAAqB,2BAA2B,OAAO,0FAA0F,uBAAuB,8BAA8B,4IAA4I,4CAA4C,6HAA6H,yBAAyB,SAAS,yBAAyB,uFAAuF,gCAAgC,gCAAgC,+BAA+B,+BAA+B,SAAS,yBAAyB,GAAG,EAAE,EAAE,EAAE,8BAA8B,aAAa,0DAA0D,aAAa,6BAA6B,yBAAyB,YAAY,EAAE,qCAAqC,wBAAwB,cAAc,iFAAiF,uEAAuE,wSAAwS,6EAA6E,IAAI,cAAc,gDAAgD,UAAU,oVAAoV,KAAK,mEAAmE,uJAAuJ,oCAAoC,2CAA2C,OAAO,EAAE,iGAAiG,4EAA4E,2BAA2B,oEAAoE,qBAAqB,QAAQ,iCAAiC,SAAS,MAAM,2BAA2B,SAAS,sDAAsD,QAAQ,2BAA2B,OAAO,4BAA4B,iEAAiE,ieAAie,wBAAwB,0BAA0B,cAAc,wCAAwC,4CAA4C,0CAA0C,sCAAsC,gCAAgC,+BAA+B,uDAAuD,QAAQ,0BAA0B,iDAAiD,MAAM,IAAI,iBAAiB,EAAE,IAAI,EAAE,gDAAgD,qBAAqB,yBAAyB,oBAAoB,EAAE,EAAE,MAAM,EAAE,EAAE,gCAAgC,wBAAwB,eAAe,mCAAmC,GAAG,0BAA0B,iBAAiB,mCAAmC,GAAG,wCAAwC,YAAY,wBAAwB,eAAe,mCAAmC,GAAG,yBAAyB,gBAAgB,mCAAmC,GAAG,wCAAwC,WAAW,QAAQ,sBAAsB,OAAO,YAAY,QAAQ,UAAU,SAAS,iDAAiD,QAAQ,mFAAmF,QAAQ,iBAAiB,uBAAuB,SAAS,yBAAyB,oDAAoD,YAAY,UAAU,0cAA0c,2iCAA2iC,iDAAiD,qFAAqF,SAAS,2DAA2D,iFAAiF,eAAe,0EAA0E,mDAAmD,+BAA+B,wBAAwB,2GAA2G,sFAAsF,sDAAsD,kGAAkG,wEAAwE,KAAK,mCAAmC,4DAA4D,oBAAoB,MAAM,qBAAqB,kCAAkC,iCAAiC,EAAE,GAAG,EAAE,gJAAgJ,aAAa,kDAAkD,EAAE,kDAAkD,EAAE,0BAA0B,6EAA6E,QAAQ,gFAAgF,KAAK,EAAE,kEAAkE,EAAE,kDAAkD,EAAE,6CAA6C,EAAE,GAAG,2CAA2C,EAAE,2CAA2C,kDAAkD,sBAAsB,YAAY,KAAK,EAAE,EAAE,EAAE,gBAAgB,6MAA6M,6CAA6C,SAAS,GAAG,0BAA0B,SAAS,mBAAmB,OAAO,mBAAmB,2BAA2B,gCAAgC,iEAAiE,MAAM,sBAAsB,2BAA2B,EAAE,yBAAyB,gBAAgB,iCAAiC,0WAA0W,YAAY,MAAM,4BAA4B,2QAA2Q,6BAA6B,6BAA6B,gCAAgC,qHAAqH,0CAA0C,gEAAgE,YAAY,uJAAuJ,2EAA2E,mEAAmE,0HAA0H,qEAAqE,GAAG,mDAAmD,2HAA2H,mCAAmC,8DAA8D,SAAS,+DAA+D,aAAa,GAAG,gCAAgC,2DAA2D,SAAS,4DAA4D,aAAa,IAAI,yLAAyL,uDAAuD,iBAAiB,yHAAyH,6EAA6E,qCAAqC,yDAAyD,oEAAoE,gBAAgB,mFAAmF,EAAE,MAAM,uBAAuB,uDAAuD,8HAA8H,cAAc,6DAA6D,uBAAuB,6DAA6D,0BAA0B,sJAAsJ,uBAAuB,yDAAyD,mBAAmB,qCAAqC,SAAS,4EAA4E,4FAA4F,8DAA8D,kBAAkB,4EAA4E,EAAE,EAAE,wBAAwB,6BAA6B,mFAAmF,mLAAmL,mGAAmG,wGAAwG,0TAA0T,gDAAgD,2BAA2B,yBAAyB,8CAA8C,qCAAqC,sFAAsF,MAAM,iBAAiB,GAAG,mBAAmB,yBAAyB,qOAAqO,mEAAmE,qBAAqB,kCAAkC,MAAM,oCAAoC,mCAAmC,uBAAuB,mGAAmG,8DAA8D,uBAAuB,6KAA6K,wCAAwC,YAAY,4BAA4B,4CAA4C,wBAAwB,yBAAyB,sCAAsC,cAAc,gBAAgB,iCAAiC,cAAc,EAAE,GAAG,iBAAiB,EAAE,SAAS,gCAAgC,EAAE,sBAAsB,gBAAgB,oEAAoE,cAAc,EAAE,EAAE,EAAE,EAAE,iCAAiC,YAAY,EAAE,GAAG,iBAAiB,KAAK,gCAAgC,EAAE,SAAS,yCAAyC,KAAK,EAAE,EAAE,oBAAoB,6GAA6G,kBAAkB,iCAAiC,iBAAiB,IAAI,UAAU,qCAAqC,SAAS,oBAAoB,6HAA6H,qCAAqC,mHAAmH,MAAM,2CAA2C,wGAAwG,qFAAqF,EAAE,OAAO,OAAO,shBAAshB,QAAQ,yCAAyC,iBAAiB,iCAAiC,oCAAoC,yEAAyE,0BAA0B,oDAAoD,iCAAiC,gCAAgC,iBAAiB,IAAI,0BAA0B,0CAA0C,iCAAiC,WAAW,+DAA+D,oBAAoB,IAAI,SAAS,oCAAoC,iCAAiC,EAAE,wBAAwB,iCAAiC,SAAS,WAAW,gFAAgF,2BAA2B,EAAE,UAAU,QAAQ,eAAe,yDAAyD,aAAa,oLAAoL,QAAQ,eAAe,yDAAyD,aAAa,wBAAwB,QAAQ,yBAAyB,SAAS,wCAAwC,qBAAqB,cAAc,0xBAA0xB,MAAM,+BAA+B,yBAAyB,kCAAkC,qFAAqF,iRAAiR,QAAQ,0BAA0B,SAAS,4GAA4G,QAAQ,yBAAyB,SAAS,wIAAwI,8BAA8B,MAAM,sEAAsE,6BAA6B,kCAAkC,gDAAgD,wCAAwC,IAAI,GAAG,SAAS,GAAG,KAAK,mEAAmE,eAAe,mEAAmE,GAAG,SAAS,mEAAmE,kBAAkB,iCAAiC,kFAAkF,mBAAmB,uBAAuB,qDAAqD,4CAA4C,yBAAyB,oBAAoB,8BAA8B,yBAAyB,wEAAwE,gRAAgR,iCAAiC,QAAQ,KAAK,sBAAsB,oDAAoD,EAAE,MAAM,KAAK,sBAAsB,qDAAqD,EAAE,MAAM,0BAA0B,QAAQ,KAAK,gBAAgB,qDAAqD,EAAE,MAAM,4BAA4B,MAAM,SAAS,iHAAiH,iDAAiD,sBAAsB,OAAO,iBAAiB,8BAA8B,SAAS,kCAAkC,wCAAwC,gFAAgF,MAAM,SAAS,yBAAyB,QAAQ,WAAW,8DAA8D,uCAAuC,gBAAgB,kBAAkB,0BAA0B,iBAAiB,KAAK,uCAAuC,mDAAmD,SAAS,sBAAsB,oDAAoD,kFAAkF,KAAK,4BAA4B,mBAAmB,iIAAiI,IAAI,2BAA2B,sBAAsB,WAAW,QAAQ,KAAK,WAAW,2CAA2C,+BAA+B,kCAAkC,uDAAuD,yDAAyD,8DAA8D,mEAAmE,qFAAqF,EAAE,EAAE,SAAS,4BAA4B,WAAW,YAAY,WAAW,KAAK,kBAAkB,kCAAkC,OAAO,iBAAiB,eAAe,sBAAsB,gCAAgC,EAAE,WAAW,UAAU,QAAQ,eAAe,snBAAsnB,cAAc,0DAA0D,uCAAuC,UAAU,EAAE,kBAAkB,oFAAoF,UAAU,0CAA0C,UAAU,wCAAwC,UAAU,IAAI,qDAAqD,aAAa,0EAA0E,wCAAwC,iIAAiI,IAAI,cAAc,kyBAAkyB,2PAA2P,wVAAwV,sBAAsB,KAAK,EAAE,gGAAgG,oCAAoC,qOAAqO,uIAAuI,wBAAwB,MAAM,wCAAwC,uCAAuC,MAAM,SAAS,OAAO,MAAM,sBAAsB,8EAA8E,yBAAyB,2FAA2F,MAAM,uPAAuP,4GAA4G,WAAW,yBAAyB,IAAI,0BAA0B,uDAAuD,EAAE,yBAAyB,+DAA+D,EAAE,sBAAsB,iCAAiC,gGAAgG,YAAY,EAAE,qHAAqH,4CAA4C,sDAAsD,iCAAiC,8CAA8C,4EAA4E,qCAAqC,SAAS,6EAA6E,kHAAkH,MAAM,4EAA4E,OAAO,iFAAiF,iCAAiC,UAAU,uBAAuB,+GAA+G,4BAA4B,oDAAoD,2IAA2I,iCAAiC,wCAAwC,2BAA2B,qDAAqD,kHAAkH,uDAAuD,4iBAA4iB,gBAAgB,qEAAqE,aAAa,iDAAiD,qDAAqD,4HAA4H,yCAAyC,+HAA+H,6FAA6F,uCAAuC,UAAU,yBAAyB,UAAU,wCAAwC,UAAU,4BAA4B,aAAa,6GAA6G,UAAU,EAAE,iBAAiB,eAAe,wCAAwC,qBAAqB,eAAe,uDAAuD,QAAQ,eAAe,qMAAqM,WAAW,gEAAgE,wDAAwD,uDAAuD,QAAQ,eAAe,0eAA0e,kBAAkB,aAAa,8BAA8B,wBAAwB,sEAAsE,8BAA8B,uBAAuB,EAAE,KAAK,4BAA4B,EAAE,QAAQ,8DAA8D,cAAc,oIAAoI,8BAA8B,+CAA+C,gBAAgB,iEAAiE,0CAA0C,kDAAkD,sBAAsB,wDAAwD,+BAA+B,wcAAwc,gCAAgC,EAAE,gCAAgC,EAAE,iCAAiC,EAAE,mCAAmC,EAAE,iCAAiC,EAAE,OAAO,mBAAmB,qBAAqB,aAAa,OAAO,mBAAmB,uCAAuC,yJAAyJ,iFAAiF,mCAAmC,wBAAwB,mCAAmC,sRAAsR,aAAa,WAAW,4FAA4F,SAAS,gBAAgB,uDAAuD,yBAAyB,uEAAuE,MAAM,iBAAiB,yBAAyB,cAAc,kBAAkB,gHAAgH,mGAAmG,4EAA4E,mCAAmC,8FAA8F,SAAS,+DAA+D,kCAAkC,yBAAyB,sDAAsD,qEAAqE,uEAAuE,SAAS,YAAY,6BAA6B,kBAAkB,aAAa,eAAe,GAAG,EAAE,0EAA0E,OAAO,kBAAkB,GAAG,EAAE,sCAAsC,EAAE,GAAG,kBAAkB,EAAE,4BAA4B,uFAAuF,6DAA6D,MAAM,wGAAwG,EAAE,WAAW,0BAA0B,iCAAiC,MAAM,kFAAkF,EAAE,2BAA2B,4BAA4B,iCAAiC,MAAM,gFAAgF,EAAE,oEAAoE,YAAY,IAAI,QAAQ,eAAe,qCAAqC,cAAc,4DAA4D,YAAY,wBAAwB,sIAAsI,6CAA6C,YAAY,GAAG,EAAE,2CAA2C,YAAY,EAAE,+CAA+C,QAAQ,eAAe,mNAAmN,yBAAyB,2PAA2P,gBAAgB,+BAA+B,EAAE,SAAS,EAAE,EAAE,+EAA+E,aAAa,oJAAoJ,UAAU,4BAA4B,+CAA+C,eAAe,oCAAoC,qEAAqE,mDAAmD,8BAA8B,MAAM,cAAc,YAAY,UAAU,kFAAkF,MAAM,0DAA0D,6CAA6C,MAAM,qEAAqE,QAAQ,+CAA+C,iGAAiG,kBAAkB,SAAS,wCAAwC,qCAAqC,yCAAyC,yDAAyD,kBAAkB,OAAO,SAAS,mDAAmD,aAAa,GAAG,gBAAgB,qBAAqB,iCAAiC,IAAI,iCAAiC,iCAAiC,2BAA2B,gBAAgB,6FAA6F,uCAAuC,QAAQ,wCAAwC,YAAY,UAAU,2CAA2C,EAAE,qMAAqM,kFAAkF,0BAA0B,EAAE,6BAA6B,EAAE,yBAAyB,EAAE,mDAAmD,cAAc,oCAAoC,kFAAkF,YAAY,uGAAuG,wCAAwC,YAAY,4DAA4D,YAAY,wDAAwD,YAAY,8DAA8D,YAAY,gDAAgD,YAAY,kDAAkD,YAAY,4CAA4C,YAAY,8CAA8C,YAAY,0CAA0C,YAAY,4CAA4C,YAAY,0CAA0C,YAAY,EAAE,GAAG,kBAAkB,0CAA0C,kCAAkC,yGAAyG,oBAAoB,QAAQ,oEAAoE,2CAA2C,qBAAqB,mFAAmF,8BAA8B,eAAe,cAAc,oCAAoC,EAAE,eAAe,kBAAkB,eAAe,iCAAiC,EAAE,WAAW,EAAE,EAAE,GAAG,kBAAkB,8CAA8C,2BAA2B,EAAE,uBAAuB,SAAS,4BAA4B,OAAO,YAAY,yCAAyC,IAAI,qJAAqJ,wGAAwG,GAAG,UAAU,yCAAyC,IAAI,6DAA6D,kBAAkB,kBAAkB,2CAA2C,eAAe,wCAAwC,gJAAgJ,aAAa,QAAQ,eAAe,WAAW,cAAc,4IAA4I,mKAAmK,6GAA6G,gCAAgC,oCAAoC,kEAAkE,eAAe,qGAAqG,SAAS,MAAM,wBAAwB,eAAe,uCAAuC,8GAA8G,gHAAgH,mDAAmD,gBAAgB,0EAA0E,GAAG,EAAE,gCAAgC,QAAQ,eAAe,WAAW,cAAc,0LAA0L,IAAI,2JAA2J,6BAA6B,iBAAiB,YAAY,WAAW,8BAA8B,SAAS,SAAS,OAAO,0JAA0J,aAAa,kEAAkE,SAAS,QAAQ,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,IAAI,GAAG,4CAA4C,IAAI,GAAG,kKAAkK,2GAA2G,8DAA8D,iHAAiH,gCAAgC,oCAAoC,+CAA+C,eAAe,8FAA8F,uCAAuC,mDAAmD,gBAAgB,uEAAuE,GAAG,EAAE,gCAAgC,QAAQ,aAAa,qCAAqC,cAAc,GAAG,EAAE,sDAAsD,kCAAkC,eAAe,QAAQ,QAAQ,aAAa,uEAAuE,UAAU,+IAA+I,IAAI,GAAG,EAAE,wFAAwF,0HAA0H,QAAQ,aAAa,mEAAmE,6BAA6B,GAAG,EAAE,iEAAiE,KAAK,eAAe,WAAW,6CAA6C,8CAA8C,+BAA+B,QAAQ,eAAe,oQAAoQ,0FAA0F,sBAAsB,8HAA8H,iBAAiB,eAAe,oBAAoB,cAAc,GAAG,EAAE,kBAAkB,cAAc,GAAG,EAAE,EAAE,SAAS,gJAAgJ,uBAAuB,kCAAkC,cAAc,qGAAqG,aAAa,iIAAiI,qDAAqD,SAAS,uCAAuC,oBAAoB,SAAS,GAAG,oBAAoB,uBAAuB,MAAM,+BAA+B,cAAc,kCAAkC,aAAa,uCAAuC,4DAA4D,iEAAiE,kDAAkD,2CAA2C,0CAA0C,EAAE,SAAS,sBAAsB,qBAAqB,wIAAwI,OAAO,wCAAwC,oBAAoB,MAAM,aAAa,GAAG,kBAAkB,MAAM,8BAA8B,oCAAoC,wBAAwB,4GAA4G,OAAO,oBAAoB,EAAE,eAAe,EAAE,aAAa,EAAE,kBAAkB,EAAE,QAAQ,MAAM,+GAA+G,OAAO,oBAAoB,EAAE,eAAe,EAAE,aAAa,EAAE,kBAAkB,EAAE,QAAQ,MAAM,uHAAuH,OAAO,oBAAoB,EAAE,eAAe,EAAE,aAAa,EAAE,kBAAkB,EAAE,QAAQ,MAAM,yHAAyH,OAAO,oBAAoB,EAAE,eAAe,EAAE,aAAa,EAAE,kBAAkB,EAAE,QAAQ,MAAM,oEAAoE,EAAE,qFAAqF,oFAAoF,OAAO,8BAA8B,EAAE,kBAAkB,gEAAgE,SAAS,gCAAgC,OAAO,8BAA8B,oGAAoG,OAAO,qBAAqB,GAAG,oCAAoC,WAAW,kBAAkB,qBAAqB,MAAM,yBAAyB,mCAAmC,6BAA6B,6FAA6F,oDAAoD,OAAO,0BAA0B,EAAE,WAAW,gBAAgB,IAAI,2EAA2E,gBAAgB,IAAI,SAAS,0BAA0B,mBAAmB,2BAA2B,uBAAuB,yFAAyF,kBAAkB,iDAAiD,iBAAiB,WAAW,QAAQ,oBAAoB,UAAU,6CAA6C,EAAE,SAAS,mCAAmC,IAAI,OAAO,iCAAiC,uEAAuE,gBAAgB,uCAAuC,8LAA8L,oCAAoC,MAAM,sCAAsC,oBAAoB,iBAAiB,6BAA6B,oBAAoB,KAAK,EAAE,EAAE,4BAA4B,6BAA6B,mBAAmB,kJAAkJ,mGAAmG,oDAAoD,YAAY,eAAe,kDAAkD,kBAAkB,cAAc,4CAA4C,GAAG,YAAY,cAAc,eAAe,gCAAgC,kDAAkD,gBAAgB,EAAE,eAAe,qBAAqB,4BAA4B,uEAAuE,qUAAqU,gBAAgB,oBAAoB,UAAU,iEAAiE,qBAAqB,qBAAqB,EAAE,EAAE,qLAAqL,QAAQ,eAAe,iDAAiD,SAAS,SAAS,gKAAgK,qDAAqD,2EAA2E,sEAAsE,sBAAsB,UAAU,YAAY,iGAAiG,GAAG,kBAAkB,2EAA2E,EAAE,+CAA+C,oBAAoB,oEAAoE,EAAE,KAAK,6CAA6C,qBAAqB,6DAA6D,yDAAyD,kBAAkB,aAAa,2BAA2B,QAAQ,eAAe,uBAAuB,2XAA2X,yOAAyO,WAAW,WAAW,+JAA+J,YAAY,+DAA+D,6CAA6C,cAAc,OAAO,oFAAoF,UAAU,mHAAmH,gEAAgE,yeAAye,YAAY,mBAAmB,0CAA0C,6BAA6B,cAAc,mCAAmC,EAAE,iBAAiB,cAAc,2DAA2D,2GAA2G,aAAa,6CAA6C,6BAA6B,uCAAuC,iGAAiG,oHAAoH,6CAA6C,uDAAuD,4CAA4C,cAAc,qCAAqC,cAAc,aAAa,EAAE,WAAW,wCAAwC,WAAW,sIAAsI,+BAA+B,uMAAuM,sFAAsF,2FAA2F,kGAAkG,0GAA0G,yCAAyC,wEAAwE,iDAAiD,6BAA6B,EAAE,2BAA2B,yEAAyE,iEAAiE,4BAA4B,sBAAsB,gFAAgF,uCAAuC,0DAA0D,MAAM,gCAAgC,kBAAkB,aAAa,EAAE,qBAAqB,EAAE,6DAA6D,EAAE,SAAS,aAAa,+DAA+D,QAAQ,eAAe,uDAAuD,QAAQ,eAAe,WAAW,cAAc,oJAAoJ,2FAA2F,iDAAiD,gBAAgB,0BAA0B,kLAAkL,sGAAsG,gBAAgB,+BAA+B,aAAa,iCAAiC,+BAA+B,aAAa,gDAAgD,EAAE,iBAAiB,aAAa,yBAAyB,+DAA+D,kBAAkB,iDAAiD,EAAE,GAAG,KAAK,GAAG,wBAAwB,kDAAkD,kHAAkH,EAAE,uBAAuB,YAAY,EAAE,YAAY,iBAAiB,oEAAoE,EAAE,WAAW,EAAE,sCAAsC,uBAAuB,mCAAmC,QAAQ,oBAAoB,QAAQ,oBAAoB,UAAU,6BAA6B,4DAA4D,EAAE,GAAG,kBAAkB,0BAA0B,MAAM,kHAAkH,EAAE,OAAO,iCAAiC,4FAA4F,YAAY,oBAAoB,2CAA2C,sDAAsD,kGAAkG,EAAE,SAAS,EAAE,sCAAsC,+BAA+B,YAAY,0EAA0E,iGAAiG,EAAE,mBAAmB,0BAA0B,aAAa,sFAAsF,kBAAkB,oHAAoH,EAAE,GAAG,cAAc,+FAA+F,EAAE,WAAW,EAAE,GAAG,IAAI,IAAI,QAAQ,qBAAqB,2DAA2D,oBAAoB,wHAAwH,EAAE,oCAAoC,YAAY,aAAa,0BAA0B,4CAA4C,oBAAoB,QAAQ,EAAE,KAAK,EAAE,MAAM,GAAG,qBAAqB,aAAa,WAAW,cAAc,cAAc,wEAAwE,WAAW,mEAAmE,uCAAuC,UAAU,sDAAsD,uHAAuH,wBAAwB,qHAAqH,yHAAyH,wBAAwB,mHAAmH,kDAAkD,kBAAkB,+CAA+C,4OAA4O,+DAA+D,mJAAmJ,cAAc,YAAY,QAAQ,UAAU,qBAAqB,yEAAyE,qEAAqE,8DAA8D,uIAAuI,IAAI,qrBAAqrB,cAAc,4DAA4D,6DAA6D,GAAG,aAAa,oDAAoD,gDAAgD,SAAS,MAAM,gLAAgL,WAAW,0EAA0E,WAAW,sPAAsP;;;;;;;;;;;;;;;;ACAtxkF;AACA;AACO,gBAAgB,sFAAsF,YAAY,iEAAiE,cAAc,UAAU,kBAAkB,YAAY,oBAAoB,oBAAoB,8CAA8C,eAAe,SAAS,yDAAyD,SAAS,qCAAqC,qCAAqC,oBAAoB,8CAA8C,UAAU,eAAe,aAAa,0DAA0D,+BAA+B,EAAE,iBAAiB,yCAAyC,yBAAyB,EAAE,cAAc,gDAAgD,2DAA2D,EAAE,kCAAkC,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,gBAAgB,kDAAkD,yDAAyD,EAAE,uEAAuE,EAAE,SAAS,2CAA2C,yBAAyB,EAAE,0BAA0B,4DAA4D,yDAAyD,EAAE,4GAA4G,EAAE,6BAA6B,+DAA+D,yDAAyD,EAAE,4GAA4G,EAAE,iCAAiC,mEAAmE,oDAAoD,EAAE,EAAE,sBAAsB,wDAAwD,yCAAyC,EAAE,EAAE,uBAAuB,yDAAyD,wBAAwB,EAAE,eAAe,iDAAiD,yDAAyD,EAAE,kFAAkF,EAAE,eAAe,iDAAiD,2EAA2E,EAAE,6FAA6F,EAAE,aAAa,+CAA+C,iBAAiB,EAAE,WAAW,6CAA6C,iFAAiF,EAAE,+FAA+F,EAAE,cAAc,gDAAgD,yBAAyB,EAAE,kBAAkB,oDAAoD,yBAAyB,EAAE,kBAAkB,oDAAoD,yBAAyB,EAAE,gBAAgB,kDAAkD,yBAAyB,EAAE,YAAY,8CAA8C,yBAAyB,EAAE,qBAAqB,iEAAiE,kFAAkF,EAAE,yHAAyH,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,uBAAuB,oEAAoE,kFAAkF,EAAE,+FAA+F,EAAE,wBAAwB,yDAAyD,yDAAyD,EAAE,kFAAkF,EAAE,iBAAiB,6DAA6D,yDAAyD,EAAE,0GAA0G,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,gBAAgB,4DAA4D,yDAAyD,EAAE,yGAAyG,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,iBAAiB,6DAA6D,gHAAgH,EAAE,uHAAuH,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,WAAW,uDAAuD,yDAAyD,EAAE,mFAAmF,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,eAAe,2DAA2D,yDAAyD,EAAE,uFAAuF,iBAAiB,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,WAAW,uDAAuD,yDAAyD,EAAE,mFAAmF,EAAE,wBAAwB,2DAA2D,yDAAyD,EAAE,wFAAwF,EAAE,qBAAqB,iEAAiE,yDAAyD,EAAE,8FAA8F,EAAE,mBAAmB,+DAA+D,yDAAyD,EAAE,4FAA4F,EAAE,uBAAuB,mEAAmE,yDAAyD,EAAE,gGAAgG,EAAE,kBAAkB,8DAA8D,yDAAyD,EAAE,kFAAkF,EAAE,0BAA0B,sEAAsE,yDAAyD,EAAE,kFAAkF,EAAE,mBAAmB,+DAA+D,yDAAyD,EAAE,kFAAkF,EAAE,2BAA2B,uEAAuE,yDAAyD,EAAE,kFAAkF,EAAE,UAAU,sDAAsD,6EAA6E,EAAE,4EAA4E,EAAE,YAAY,sDAAsD,0CAA0C,EAAE,sBAAsB,kEAAkE,6EAA6E,EAAE,EAAE,wBAAwB,oEAAoE,+EAA+E,EAAE,EAAE,yBAAyB,qEAAqE,gFAAgF,EAAE,EAAE,uBAAuB,mEAAmE,8EAA8E,EAAE,EAAE,sBAAsB,kEAAkE,8EAA8E,EAAE,EAAE,wBAAwB,oEAAoE,gFAAgF,EAAE,EAAE,yBAAyB,qEAAqE,iFAAiF,EAAE,EAAE,uBAAuB,mEAAmE,+EAA+E,EAAE,EAAE,YAAY,wDAAwD,4CAA4C,EAAE,2CAA2C,EAAE,uBAAuB,2DAA2D,2EAA2E,EAAE,6FAA6F,EAAE,gCAAgC,oEAAoE,yFAAyF,EAAE,gGAAgG,EAAE,mBAAmB,+DAA+D,2EAA2E,EAAE,6FAA6F,EAAE,mBAAmB,+DAA+D,8EAA8E,EAAE,qFAAqF,EAAE,2BAA2B,uEAAuE,gFAAgF,EAAE,uFAAuF,EAAE,4BAA4B,wEAAwE,yCAAyC,EAAE,EAAE,+BAA+B,sEAAsE,yCAAyC,EAAE,EAAE,wBAAwB,oEAAoE,gDAAgD,EAAE,EAAE,qBAAqB,6BAA6B,wEAAwE,EAAE,sEAAsE,EAAE,mBAAmB,6BAA6B,sEAAsE,EAAE,oEAAoE,EAAE,qBAAqB,6BAA6B,wEAAwE,EAAE,sEAAsE,EAAE,eAAe,6BAA6B,oEAAoE,EAAE,kEAAkE,EAAE,gBAAgB,6BAA6B,mBAAmB,EAAE,+BAA+B,gEAAgE,8FAA8F,EAAE,6FAA6F,EAAE,kCAAkC,mEAAmE,iGAAiG,EAAE,gGAAgG,EAAE,8BAA8B,+DAA+D,6FAA6F,EAAE,4FAA4F,EAAE,iCAAiC,kEAAkE,gGAAgG,EAAE,+FAA+F,EAAE,cAAc,6DAA6D,uGAAuG,EAAE,+GAA+G,EAAE,mBAAmB,kDAAkD,2GAA2G,EAAE,mHAAmH,EAAE,kBAAkB,0CAA0C,kFAAkF,EAAE,gFAAgF,EAAE,WAAW,6CAA6C,uDAAuD,EAAE,oBAAoB,6BAA6B,yCAAyC,EAAE,mBAAmB,2CAA2C,yBAAyB,EAAE,sBAAsB,kEAAkE,+EAA+E,EAAE,sFAAsF,EAAE,iBAAiB,6DAA6D,0EAA0E,EAAE,iFAAiF,EAAE,mBAAmB,4DAA4D,kFAAkF,EAAE,yFAAyF,EAAE,yBAAyB,mEAAmE,yBAAyB,EAAE,gCAAgC,EAAE,sBAAsB,6CAA6C,qFAAqF,EAAE,4FAA4F,EAAE,4BAA4B,oDAAoD,4BAA4B,EAAE,mCAAmC,EAAE,cAAc,gDAAgD,mCAAmC,GAAG,gBAAgB,mBAAmB,gSAAgS,iCAAiC,8HAA8H,uBAAuB,wHAAwH,mBAAmB,wRAAwR,kBAAkB,oEAAoE,uBAAuB,6SAA6S,yBAAyB,2HAA2H,2BAA2B,4NAA4N,aAAa,sEAAsE,qBAAqB,kCAAkC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,oCAAoC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,8CAA8C,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,iDAAiD,sBAAsB,EAAE,EAAE,mCAAmC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,mCAAmC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,iCAAiC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,+BAA+B,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,kCAAkC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,sCAAsC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,sCAAsC,qBAAqB,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,gCAAgC,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,EAAE,2CAA2C,gCAAgC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,sCAAsC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,gCAAgC,oBAAoB,EAAE,oCAAoC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,uCAAuC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,EAAE,oCAAoC,gCAAgC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,sCAAsC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,gCAAgC,oBAAoB,EAAE,oCAAoC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,uCAAuC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,EAAE,0CAA0C,gCAAgC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,sCAAsC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,gCAAgC,oBAAoB,EAAE,oCAAoC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,uCAAuC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,EAAE,qDAAqD,gCAAgC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,sCAAsC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,gCAAgC,oBAAoB,EAAE,oCAAoC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,uCAAuC,oBAAoB,EAAE,iCAAiC,oBAAoB,EAAE,EAAE,yBAAyB,EAAE,4BAA4B,EAAE,gCAAgC,EAAE,uCAAuC,EAAE,kCAAkC,EAAE,mCAAmC,EAAE,8BAA8B,EAAE,4BAA4B,EAAE,2BAA2B,EAAE,4BAA4B,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,0BAA0B,EAAE,mCAAmC,EAAE,8BAA8B,EAAE,gCAAgC,EAAE,kCAAkC,EAAE,6BAA6B,EAAE,qCAAqC,EAAE,sCAAsC,EAAE,qBAAqB,EAAE,uBAAuB,EAAE,kCAAkC,EAAE,2CAA2C,EAAE,8BAA8B,EAAE,0CAA0C,EAAE,6CAA6C,EAAE,yCAAyC,EAAE,4CAA4C,EAAE,0CAA0C,UAAU,iDAAiD,EAAE,EAAE,4CAA4C,UAAU,iDAAiD,EAAE,EAAE,6CAA6C,UAAU,iDAAiD,EAAE,EAAE,2CAA2C,UAAU,iDAAiD,EAAE,EAAE,0CAA0C,UAAU,iDAAiD,EAAE,EAAE,4CAA4C,UAAU,iDAAiD,EAAE,EAAE,6CAA6C,UAAU,iDAAiD,EAAE,EAAE,2CAA2C,UAAU,iDAAiD,EAAE,EAAE,+CAA+C,qDAAqD,iDAAiD,EAAE,EAAE,6BAA6B,kCAAkC,iDAAiD,EAAE,kCAAkC,iDAAiD,EAAE,gCAAgC,iDAAiD,EAAE,iCAAiC,iDAAiD,EAAE,yCAAyC,oBAAoB,EAAE,4CAA4C,oBAAoB,EAAE,0CAA0C,oBAAoB,EAAE,EAAE,+BAA+B,wCAAwC,iDAAiD,EAAE,wCAAwC,iDAAiD,EAAE,6CAA6C,oBAAoB,EAAE,qCAAqC,iDAAiD,EAAE,yCAAyC,oBAAoB,EAAE,EAAE,+CAA+C,uCAAuC,iDAAiD,EAAE,6CAA6C,iDAAiD,EAAE,6CAA6C,iDAAiD,EAAE,2CAA2C,iDAAiD,EAAE,sCAAsC,iDAAiD,EAAE,4CAA4C,iDAAiD,EAAE,0CAA0C,iDAAiD,EAAE,yCAAyC,iDAAiD,EAAE,6CAA6C,iDAAiD,EAAE,sCAAsC,iDAAiD,EAAE,yCAAyC,iDAAiD,EAAE,kDAAkD,iDAAiD,EAAE,2CAA2C,oBAAoB,EAAE,0CAA0C,oBAAoB,EAAE,0CAA0C,oBAAoB,EAAE,6CAA6C,oBAAoB,EAAE,EAAE,2BAA2B,wCAAwC,oBAAoB,EAAE,mDAAmD,oBAAoB,EAAE,sCAAsC,iDAAiD,EAAE,kDAAkD,iDAAiD,EAAE,uCAAuC,iDAAiD,EAAE,EAAE,+CAA+C,qCAAqC,oBAAoB,EAAE,0CAA0C,oBAAoB,EAAE,EAAE,kCAAkC,yBAAyB,iDAAiD,EAAE,EAAE,4BAA4B,sCAAsC,oBAAoB,EAAE,mCAAmC,oBAAoB,EAAE,kCAAkC,oBAAoB,EAAE,EAAE,uCAAuC,sBAAsB,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,qBAAqB,EAAE,EAAE,iCAAiC,EAAE,yBAAyB,eAAe,SAAS,gDAAgD,eAAe,wBAAwB,aAAa,mBAAmB,gBAAgB,eAAe,UAAU,sBAAsB,kBAAkB,UAAU,8HAA8H,iBAAiB,eAAe,UAAU,uBAAuB,aAAa,oBAAoB,gBAAgB,gBAAgB,eAAe,UAAU,0BAA0B,iBAAiB,UAAU,eAAe,aAAa,UAAU,eAAe,gBAAgB,UAAU,eAAe,kBAAkB,UAAU,eAAe,mBAAmB,gBAAgB,eAAe,UAAU,yaAAya,aAAa,4BAA4B,aAAa,gBAAgB,YAAY,oDAAoD,aAAa,gBAAgB,YAAY,wBAAwB,gBAAgB,UAAU,uCAAuC,WAAW,UAAU,kBAAkB,WAAW,UAAU,uBAAuB,UAAU,gBAAgB,YAAY,uCAAuC,wBAAwB,YAAY,gBAAgB,YAAY,qBAAqB,wBAAwB,kBAAkB,gBAAgB,eAAe,UAAU,+BAA+B,uCAAuC,eAAe,gBAAgB,eAAe,UAAU,iBAAiB,wBAAwB,eAAe,gBAAgB,YAAY,mFAAmF,gBAAgB,gBAAgB,eAAe,UAAU,0MAA0M,YAAY,gBAAgB,YAAY,iBAAiB,kBAAkB,YAAY,gBAAgB,eAAe,UAAU,kCAAkC,gBAAgB,gBAAgB,eAAe,UAAU,2CAA2C,YAAY,gBAAgB,YAAY,2BAA2B,aAAa,oBAAoB;AAClg/B,oBAAoB,uCAAuC,eAAe,WAAW,WAAW,YAAY,eAAe,aAAa,uCAAuC,yDAAyD,0BAA0B,cAAc,eAAe,YAAY,eAAe,aAAa,qBAAqB,cAAc,YAAY,gBAAgB,eAAe,YAAY,eAAe,aAAa,qBAAqB,0BAA0B,YAAY,eAAe,aAAa,qBAAqB,eAAe,YAAY,eAAe,aAAa,qBAAqB,WAAW,YAAY,eAAe,aAAa,uBAAuB,2BAA2B,cAAc,iBAAiB,YAAY,eAAe,aAAa,wCAAwC,eAAe,YAAY,eAAe,aAAa,qBAAqB,cAAc,YAAY,eAAe,aAAa,qBAAqB,oBAAoB,YAAY,eAAe,aAAa,qBAAqB,kBAAkB,YAAY,eAAe,aAAa,qBAAqB,qBAAqB,YAAY,eAAe,aAAa,qBAAqB,uBAAuB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,qBAAqB,YAAY,eAAe,aAAa,qBAAqB,qBAAqB,YAAY,eAAe,aAAa,qBAAqB,mBAAmB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,0BAA0B,YAAY,eAAe,aAAa,qBAAqB,qBAAqB,YAAY,eAAe,aAAa,qBAAqB,aAAa,YAAY,eAAe,aAAa,qBAAqB,kBAAkB,YAAY,eAAe,aAAa,qBAAqB,0BAA0B,YAAY,eAAe,aAAa,qBAAqB,mBAAmB,YAAY,eAAe,aAAa,qBAAqB,2BAA2B,YAAY,eAAe,aAAa,qBAAqB,6BAA6B,YAAY,eAAe,aAAa,qBAAqB,wBAAwB,YAAY,eAAe,aAAa,qBAAqB,cAAc,YAAY,eAAe,aAAa,qBAAqB,sBAAsB,YAAY,gBAAgB,wBAAwB,YAAY,gBAAgB,yBAAyB,YAAY,gBAAgB,uBAAuB,YAAY,gBAAgB,sBAAsB,YAAY,gBAAgB,wBAAwB,YAAY,gBAAgB,yBAAyB,YAAY,gBAAgB,uBAAuB,YAAY,gBAAgB,YAAY,YAAY,gBAAgB,UAAU,YAAY,gBAAgB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,gBAAgB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,gBAAgB,YAAY,eAAe,aAAa,qBAAqB,gBAAgB,YAAY,eAAe,aAAa,qBAAqB,aAAa,YAAY,eAAe,aAAa,qBAAqB,eAAe,YAAY,eAAe,aAAa,qBAAqB,mBAAmB,YAAY,gBAAgB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,kBAAkB,YAAY,gBAAgB,sBAAsB,YAAY,eAAe,aAAa,wCAAwC,mBAAmB,YAAY,eAAe,aAAa,2CAA2C,UAAU,YAAY,eAAe,aAAa,sBAAsB,8CAA8C,mCAAmC,eAAe,YAAY,cAAc,iBAAiB,YAAY,eAAe,aAAa,wCAAwC,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,0BAA0B,YAAY,eAAe,aAAa,qBAAqB,qBAAqB,YAAY,eAAe,aAAa,qBAAqB,wBAAwB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,gBAAgB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,mBAAmB,YAAY,gBAAgB,cAAc,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,oBAAoB,YAAY,eAAe,aAAa,qBAAqB,uBAAuB,YAAY,eAAe,aAAa,qBAAqB,mBAAmB,YAAY,eAAe,aAAa,qBAAqB,sBAAsB,YAAY,eAAe,aAAa,qBAAqB,UAAU,YAAY,eAAe,aAAa,wCAAwC,cAAc,YAAY,eAAe,aAAa,wCAAwC,eAAe,YAAY,eAAe,aAAa,wCAAwC,0BAA0B,YAAY,eAAe,aAAa,wCAAwC,mBAAmB,YAAY,eAAe,aAAa,qBAAqB,qBAAqB,YAAY,eAAe,aAAa,qBAAqB,oBAAoB,YAAY,eAAe,aAAa,yBAAyB,wCAAwC,6CAA6C,aAAa,WAAW,4BAA4B,UAAU,eAAe,aAAa,6BAA6B,UAAU,iBAAiB,uCAAuC,eAAe,UAAU,mMAAmM,qCAAqC,uIAAuI,UAAU,KAAK,YAAY,eAAe,aAAa,qBAAqB,MAAM,YAAY,eAAe,aAAa,qBAAqB,UAAU,YAAY,eAAe,aAAa,qBAAqB,UAAU,YAAY,eAAe,aAAa,qBAAqB,UAAU,YAAY,gBAAgB,WAAW,YAAY,eAAe,aAAa,qBAAqB,YAAY,YAAY,gBAAgB,YAAY,YAAY,gBAAgB,YAAY,YAAY,eAAe,aAAa,qBAAqB,WAAW,YAAY,eAAe,aAAa,qBAAqB,UAAU,YAAY,iBAAiB,aAAa,cAAc,SAAS,YAAY,eAAe,aAAa,wCAAwC,kBAAkB,YAAY,eAAe,aAAa,wCAAwC,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,qBAAqB,aAAa,YAAY,eAAe,aAAa,iDAAiD,aAAa,YAAY,eAAe,aAAa,qBAAqB,sBAAsB,YAAY,eAAe,aAAa,qBAAqB,iBAAiB,YAAY,eAAe,aAAa,yBAAyB,sCAAsC,qBAAqB,aAAa,4CAA4C,qBAAqB,aAAa,sCAAsC,kHAAkH,UAAU,0CAA0C,gCAAgC,gBAAgB,SAAS,eAAe,YAAY,yCAAyC,eAAe,uFAAuF,oCAAoC,gBAAgB,SAAS,eAAe,cAAc,4FAA4F,aAAa,iDAAiD,oCAAoC,gBAAgB,SAAS,eAAe,cAAc,kIAAkI,aAAa,gOAAgO,kCAAkC,gBAAgB,SAAS,eAAe,YAAY,iQAAiQ,eAAe,gDAAgD,YAAY,YAAY,4CAA4C,UAAU,cAAc,kGAAkG,WAAW,YAAY,4CAA4C,mCAAmC,gBAAgB,SAAS,eAAe,cAAc,iIAAiI,aAAa,gDAAgD,wCAAwC,gBAAgB,SAAS,eAAe,cAAc,uDAAuD,aAAa,qDAAqD,qCAAqC,gBAAgB,SAAS,eAAe,cAAc,uDAAuD,aAAa;AACj2U,mBAAmB,mCAAmC,kCAAkC,8BAA8B,mBAAmB,cAAc,eAAe,mBAAmB,oBAAoB,qBAAqB,oBAAoB,KAAK,oBAAoB,qBAAqB,oBAAoB,KAAK,oBAAoB,2CAA2C,oBAAoB,KAAK,oBAAoB,yCAAyC,oBAAoB,KAAK,oBAAoB,6CAA6C,oBAAoB,KAAK,eAAe,cAAc,oBAAoB,uBAAuB,oBAAoB,QAAQ,kCAAkC,UAAU,kCAAkC,uBAAuB,mBAAmB,MAAM,kCAAkC,WAAW,eAAe,kBAAkB,gBAAgB,SAAS,yCAAyC,mBAAmB,yCAAyC,SAAS,oBAAoB,iBAAiB,oBAAoB,SAAS,oBAAoB,qBAAqB,oBAAoB,SAAS,oBAAoB,2CAA2C,oBAAoB,SAAS,oBAAoB,yCAAyC,oBAAoB,SAAS,oBAAoB,6CAA6C,oBAAoB,SAAS,oCAAoC,iBAAiB,oCAAoC,SAAS,+BAA+B,sBAAsB,+BAA+B,SAAS,eAAe,cAAc,oBAAoB,uBAAuB,oBAAoB,KAAK,mCAAmC,QAAQ,iCAAiC,KAAK,kCAAkC,IAAI,oCAAoC,SAAS,oCAAoC,UAAU,oCAAoC,6CAA6C,oBAAoB,2BAA2B,wBAAwB,oBAAoB,iBAAiB,oBAAoB,OAAO,iCAAiC,KAAK,mCAAmC,UAAU,oCAAoC,SAAS,oCAAoC,uDAAuD,oBAAoB,2BAA2B,wBAAwB,oBAAoB,iBAAiB,oBAAoB,OAAO,iCAAiC,cAAc,oCAAoC,SAAS,uCAAuC,2CAA2C,wCAAwC,2CAA2C,gBAAgB,WAAW,kCAAkC,aAAa,kCAAkC,oEAAoE,mBAAmB,sBAAsB,oBAAoB,mBAAmB,OAAO,gBAAgB,wDAAwD,eAAe,6BAA6B,mBAAmB,mCAAmC,oBAAoB,iBAAiB,oBAAoB,aAAa,gCAAgC,UAAU,gCAAgC,aAAa,gBAAgB,aAAa,mBAAmB,aAAa,oCAAoC,WAAW,gDAAgD,MAAM,MAAM,QAAQ,KAAK,6CAA6C,2BAA2B,kCAAkC,2BAA2B,+BAA+B,4BAA4B,6BAA6B,8BAA8B,oBAAoB,2BAA2B,YAAY,gCAAgC,sBAAsB,+BAA+B,KAAK,gCAAgC,mEAAmE,eAAe,WAAW,oCAAoC,sBAAsB,eAAe,8BAA8B,oBAAoB,qBAAqB,oBAAoB,aAAa,iDAAiD,kBAAkB,mDAAmD,kDAAkD,aAAa,oBAAoB,gBAAgB,oBAAoB,aAAa,eAAe,cAAc,oBAAoB,uBAAuB,oBAAoB,yBAAyB,mCAAmC,sBAAsB,0CAA0C,oBAAoB,0CAA0C,sBAAsB,oCAAoC,sBAAsB,sCAAsC,YAAY,kCAAkC,OAAO,qCAAqC,wCAAwC,aAAa,2CAA2C,uCAAuC,WAAW,uCAAuC,KAAK,mCAAmC,eAAe,mCAAmC,aAAa,mBAAmB,qCAAqC,OAAO,mBAAmB,aAAa,mCAAmC,iCAAiC,4CAA4C,qBAAqB,+CAA+C,oBAAoB,sCAAsC,oBAAoB,mBAAmB,iCAAiC,sBAAsB,wBAAwB,wBAAwB,eAAe,sBAAsB,iBAAiB,sBAAsB,mBAAmB,sBAAsB,iBAAiB,sBAAsB,sBAAsB,sBAAsB,gBAAgB,sBAAsB,kBAAkB,sBAAsB,cAAc,8BAA8B,iCAAiC,+DAA+D,wCAAwC,qBAAqB,mBAAmB,qCAAqC,OAAO,mBAAmB,qBAAqB,wCAAwC,mEAAmE,+CAA+C,+DAA+D,MAAM,yBAAyB,QAAQ,kCAAkC,QAAQ,sCAAsC,+CAA+C,yBAAyB,kDAAkD,6BAA6B,oCAAoC,iCAAiC,gCAAgC,wDAAwD,+BAA+B,MAAM,+BAA+B,OAAO,gCAAgC,6BAA6B,oCAAoC,yBAAyB,kDAAkD,6DAA6D,uCAAuC,mBAAmB,0CAA0C,sBAAsB,oCAAoC,iBAAiB,uCAAuC,qCAAqC,qCAAqC,6BAA6B,qCAAqC,sCAAsC,eAAe,qBAAqB,gBAAgB,WAAW,gBAAgB,qBAAqB,sCAAsC,WAAW,sCAAsC,qBAAqB,sCAAsC,yBAAyB,0CAA0C,WAAW,0CAA0C,qBAAqB,sCAAsC,qBAAqB,eAAe,sBAAsB,QAAQ,8BAA8B,QAAQ,KAAK,uDAAuD,+CAA+C,QAAQ,iCAAiC,QAAQ,yBAAyB,QAAQ,iCAAiC,QAAQ,KAAK,sDAAsD,+DAA+D,oBAAoB,kDAAkD,oBAAoB,MAAM,wBAAwB,4CAA4C,2CAA2C,2CAA2C,4CAA4C,0CAA0C,2CAA2C,qBAAqB,0EAA0E,oBAAoB,4CAA4C,oBAAoB,4BAA4B,qCAAqC,MAAM,yBAAyB,oCAAoC,qBAAqB,8CAA8C,qCAAqC,eAAe,4CAA4C,kEAAkE,4CAA4C,mBAAmB,oDAAoD,qBAAqB,oCAAoC,yBAAyB,gCAAgC,wDAAwD,+BAA+B,MAAM,+BAA+B,OAAO,gCAAgC,qBAAqB,oCAAoC,iBAAiB,oDAAoD,2BAA2B,gDAAgD,qBAAqB,iCAAiC,0DAA0D,4BAA4B,yEAAyE,IAAI,KAAK,GAAG,2BAA2B,4BAA4B,2BAA2B,iCAAiC,iBAAiB,gDAAgD,iBAAiB,sCAAsC,iBAAiB,mBAAmB,qCAAqC,OAAO,mBAAmB,iBAAiB,sCAAsC,mBAAmB,mDAAmD,qBAAqB,oCAAoC,yBAAyB,gCAAgC,wDAAwD,+BAA+B,MAAM,+BAA+B,OAAO,gCAAgC,qBAAqB,oCAAoC,iBAAiB,mDAAmD,2BAA2B,+CAA+C,qBAAqB,iCAAiC,qEAAqE,4BAA4B,yEAAyE,IAAI,KAAK,GAAG,2BAA2B,4BAA4B,2BAA2B,iCAAiC,iBAAiB,+CAA+C,eAAe,4CAA4C,iCAAiC,4CAA4C,eAAe,sCAAsC,oCAAoC,gCAAgC,kKAAkK,WAAW,0FAA0F,WAAW,2DAA2D,WAAW,kDAAkD,kBAAkB,YAAY,mEAAmE,gCAAgC,aAAa,6CAA6C,iHAAiH,sCAAsC,qCAAqC,6CAA6C,6BAA6B,qCAAqC,eAAe,qCAAqC,iBAAiB,6CAA6C,yHAAyH,sCAAsC,6CAA6C,6CAA6C,aAAa,qCAAqC,cAAc,mCAAmC,MAAM,mCAAmC,eAAe,oCAAoC,kDAAkD,oBAAoB,0CAA0C,oBAAoB,6BAA6B,OAAO,uCAAuC,mDAAmD,uBAAuB,kBAAkB,KAAK,iBAAiB,uBAAuB,kBAAkB,oCAAoC,yDAAyD,iCAAiC,wFAAwF,sCAAsC,kBAAkB,6BAA6B,kCAAkC,yBAAyB,KAAK,sCAAsC,aAAa,oBAAoB,6CAA6C,oBAAoB,sBAAsB,mDAAmD,oBAAoB,gCAAgC,oBAAoB,SAAS,+BAA+B,8GAA8G,oBAAoB,kCAAkC,uBAAuB,4CAA4C,qBAAqB,2CAA2C,mBAAmB,oBAAoB,+CAA+C,oBAAoB,WAAW,sCAAsC,kBAAkB,6BAA6B,kCAAkC,yBAAyB,KAAK,sCAAsC,WAAW,iCAAiC,yGAAyG,oBAAoB,+BAA+B,oBAAoB,mBAAmB,oBAAoB,4CAA4C,oBAAoB,WAAW,qCAAqC,kBAAkB,6BAA6B,iCAAiC,yBAAyB,KAAK,qCAAqC,KAAK,8BAA8B,sEAAsE,mBAAmB,WAAW,sBAAsB,+CAA+C,iDAAiD,kBAAkB,6CAA6C,MAAM,sDAAsD,gBAAgB,iBAAiB,eAAe,aAAa,mBAAmB,sDAAsD,sDAAsD,kBAAkB,mDAAmD,2EAA2E,mBAAmB,aAAa,cAAc,SAAS,oBAAoB,iBAAiB,oBAAoB,SAAS,oCAAoC,oBAAoB,iCAAiC,uBAAuB,iCAAiC,SAAS,oBAAoB,4BAA4B,oBAAoB,SAAS,oBAAoB,0BAA0B,oBAAoB,SAAS,yCAAyC,QAAQ,cAAc,MAAM,oCAAoC,8BAA8B,iBAAiB,kCAAkC,GAAG,KAAK,iCAAiC,iCAAiC,0BAA0B,wCAAwC,kBAAkB,2CAA2C,oBAAoB,qBAAqB,oBAAoB,gBAAgB,wCAAwC,aAAa,2CAA2C,qBAAqB,2CAA2C,+CAA+C,SAAS,4CAA4C,SAAS,mDAAmD,uCAAuC,gFAAgF,mBAAmB,aAAa,cAAc,SAAS,oBAAoB,iBAAiB,oBAAoB,SAAS,oCAAoC,oBAAoB,iCAAiC,uBAAuB,iCAAiC,SAAS,oBAAoB,4BAA4B,oBAAoB,SAAS,oBAAoB,0BAA0B,oBAAoB,SAAS,yCAAyC,QAAQ,cAAc,MAAM,oCAAoC,8BAA8B,iBAAiB,kCAAkC,GAAG,KAAK,iCAAiC,iCAAiC,uDAAuD,wCAAwC,aAAa,2CAA2C,qBAAqB,qCAAqC,6BAA6B,wCAAwC,4CAA4C,YAAY,qCAAqC,SAAS,0CAA0C,wFAAwF,eAAe,SAAS,gBAAgB,WAAW,gBAAgB,SAAS,qCAAqC,WAAW,qCAAqC,SAAS,qCAAqC,aAAa,sCAAsC,WAAW,sCAAsC,SAAS,qCAAqC,SAAS,eAAe,sBAAsB,QAAQ,8BAA8B,QAAQ,KAAK,mDAAmD,+CAA+C,QAAQ,iCAAiC,QAAQ,yBAAyB,QAAQ,iCAAiC,QAAQ,KAAK,kDAAkD,mDAAmD,oBAAoB,sCAAsC,oBAAoB,OAAO,mCAAmC,8DAA8D,oBAAoB,gCAAgC,oBAAoB,4BAA4B,qCAAqC,OAAO,6BAA6B,0FAA0F,eAAe,SAAS,gBAAgB,WAAW,gBAAgB,SAAS,qCAAqC,WAAW,qCAAqC,SAAS,qCAAqC,aAAa,sCAAsC,WAAW,sCAAsC,SAAS,qCAAqC,SAAS,eAAe,sBAAsB,QAAQ,8BAA8B,QAAQ,KAAK,mDAAmD,+CAA+C,QAAQ,iCAAiC,QAAQ,yBAAyB,QAAQ,iCAAiC,QAAQ,KAAK,kDAAkD,mDAAmD,oBAAoB,sCAAsC,oBAAoB,MAAM,uCAAuC,sCAAsC,sCAAsC,uCAAuC,sCAAsC,mCAAmC,8DAA8D,oBAAoB,gCAAgC,oBAAoB,4BAA4B,qCAAqC,OAAO,6BAA6B,gFAAgF,sDAAsD,2BAA2B,kDAAkD,WAAW,SAAS,yBAAyB,oDAAoD,yBAAyB,qDAAqD,6DAA6D,QAAQ,gBAAgB,sDAAsD,SAAS,qDAAqD,2BAA2B,iDAAiD,WAAW,SAAS,yBAAyB,mDAAmD,yBAAyB,oDAAoD,6DAA6D,QAAQ,gBAAgB,qDAAqD,qBAAqB,iDAAiD,mCAAmC,mDAAmD,yBAAyB,oDAAoD,uBAAuB,yBAAyB,aAAa,yCAAyC,gCAAgC,qCAAqC,aAAa,yCAAyC,gDAAgD,qCAAqC,aAAa,yBAAyB,qBAAqB,4BAA4B,kCAAkC,iCAAiC,iCAAiC,yBAAyB,gBAAgB,uCAAuC,mBAAmB,uCAAuC,aAAa,gBAAgB,qBAAqB,mCAAmC,gCAAgC,uBAAuB,mCAAmC,qCAAqC,gCAAgC,mBAAmB,gBAAgB,aAAa,gBAAgB,sBAAsB,gCAAgC,mBAAmB,gBAAgB,2DAA2D,iCAAiC,SAAS,gBAAgB,oCAAoC,oBAAoB,WAAW,oBAAoB,OAAO,gBAAgB,eAAe,gBAAgB,SAAS,kBAAkB,mBAAmB,oCAAoC,oBAAoB,WAAW,oBAAoB,OAAO,gBAAgB,eAAe,sBAAsB,eAAe,KAAK,iCAAiC,kEAAkE,mBAAmB,KAAK,kCAAkC,sBAAsB,kCAAkC,UAAU,cAAc,qBAAqB,oBAAoB,iBAAiB,oBAAoB,SAAS,oBAAoB,gBAAgB,oBAAoB,SAAS,gBAAgB,SAAS,mBAAmB,SAAS,mCAAmC,SAAS,yCAAyC,QAAQ,cAAc,aAAa,oCAAoC,8BAA8B,oBAAoB,qBAAqB,oBAAoB,cAAc,oBAAoB,uBAAuB,oBAAoB,eAAe,0BAA0B,qBAAqB,uCAAuC,YAAY,0BAA0B,YAAY,0BAA0B,gEAAgE,wCAAwC,iBAAiB,2CAA2C,6BAA6B,sDAAsD,aAAa,kDAAkD,aAAa,sDAAsD,YAAY,0BAA0B,+FAA+F,oBAAoB,iBAAiB,oBAAoB,kBAAkB,iBAAiB,mBAAmB,oBAAoB,iCAAiC,oBAAoB,qBAAqB,oBAAoB,eAAe,4BAA4B,sCAAsC,iBAAiB,OAAO,4BAA4B,4FAA4F,+BAA+B,cAAc,qCAAqC,MAAM,gCAAgC,wBAAwB,+BAA+B,qCAAqC,+BAA+B,UAAU,+BAA+B,iBAAiB,gCAAgC,oCAAoC,qCAAqC,QAAQ,qBAAqB,QAAQ,UAAU,sCAAsC,6BAA6B,2DAA2D,iCAAiC,uEAAuE,qCAAqC,oBAAoB,eAAe,uCAAuC,yBAAyB,SAAS,mCAAmC,SAAS,gBAAgB,SAAS,mCAAmC,SAAS,2BAA2B,SAAS,gCAAgC,qBAAqB,gCAAgC,SAAS,eAAe,MAAM,gCAAgC,qBAAqB,6BAA6B,qBAAqB,oCAAoC,IAAI,qCAAqC,KAAK,gCAAgC,UAAU,oCAAoC,mCAAmC,iCAAiC,8BAA8B,0BAA0B,mBAAmB,YAAY,gBAAgB,6EAA6E,oCAAoC,IAAI,UAAU,qCAAqC,GAAG,cAAc,4BAA4B,+DAA+D,4BAA4B,wCAAwC,oCAAoC,IAAI,qCAAqC,8BAA8B,gBAAgB,SAAS,gBAAgB,wBAAwB,oCAAoC,MAAM,sCAAsC,sBAAsB,SAAS,oCAAoC,GAAG,KAAK,yCAAyC,sCAAsC,qBAAqB,KAAK,uCAAuC,qEAAqE,6BAA6B,4BAA4B,gBAAgB,eAAe,qCAAqC,4CAA4C,qCAAqC,8BAA8B,mBAAmB,cAAc,eAAe,oCAAoC,oBAAoB,iBAAiB,oBAAoB,SAAS,mCAAmC,SAAS,gBAAgB,SAAS,mBAAmB,SAAS,mCAAmC,SAAS,yBAAyB,SAAS,2BAA2B,SAAS,gCAAgC,qBAAqB,gCAAgC,SAAS,eAAe,MAAM,gCAAgC,qBAAqB,6BAA6B,KAAK,iCAAiC,UAAU,oCAAoC,mCAAmC,iCAAiC,8BAA8B,cAAc,gBAAgB,kDAAkD,4BAA4B,4DAA4D,4BAA4B,8BAA8B,gBAAgB,SAAS,gBAAgB,SAAS,kDAAkD,aAAa,wDAAwD,0CAA0C,6BAA6B,wBAAwB,mBAAmB,6BAA6B,yDAAyD,mBAAmB,aAAa,wDAAwD,SAAS,kDAAkD,SAAS,kDAAkD,sCAAsC,6BAA6B,gDAAgD,oCAAoC,MAAM,sCAAsC,sBAAsB,qCAAqC,GAAG,KAAK,sCAAsC,sEAAsE,yCAAyC,oCAAoC,GAAG,eAAe,EAAE,4BAA4B,kDAAkD,SAAS,gBAAgB,aAAa,qCAAqC;;;;;;;;;;;;;;;ACJx97B,aAAa,kBAAkB,SAAS,6BAA6B,6BAA6B,YAAY,4BAA4B,sBAAsB,mBAAmB,SAAS,kCAAkC,+BAA+B,eAAe,WAAW,IAAI,mBAAmB,6CAA6C,iBAAiB,oBAAoB,kBAAkB,wBAAwB,cAAc,cAAc,aAAa,eAAe,OAAO,iBAAiB,eAAe,kBAAkB,8CAA8C,gBAAgB,sBAAsB,iBAAiB,gBAAgB,iBAAiB,gBAAgB,kBAAkB,kBAAkB,0BAA0B,WAAW,oDAAoD,aAAa,gCAAgC,qFAAqF,EAAE,gBAAgB,cAAc,2DAA2D,iCAAiC,0BAA0B,mBAAmB,QAAQ,KAAK,eAAe,QAAQ,eAAe,QAAQ,sBAAsB,UAAU,wBAAwB,QAAQ,KAAK,eAAe,QAAQ,eAAe,QAAQ,sBAAsB,UAAU,gBAAgB,QAAQ,KAAK,eAAe,QAAQ,eAAe,QAAQ,sBAAsB,UAAU,+BAA+B,SAAS,cAAc,kCAAkC,WAAW,QAAQ,iBAAiB,yGAAyG,MAAM,KAAK,WAAW,WAAW,UAAU,iCAAiC,yBAAyB,oBAAoB,mBAAmB,WAAW,sFAAsF,mBAAmB,qBAAqB,qBAAqB,cAAc,WAAW,QAAQ,eAAe,QAAQ,eAAe,QAAQ,sBAAsB,2BAA2B,gBAAgB,iBAAiB,WAAW,oDAAoD,iBAAiB,qBAAqB,eAAe,qCAAqC,WAAW,QAAQ,eAAe,QAAQ,eAAe,QAAQ,kEAAkE,uGAAuG,cAAc,sBAAsB,qBAAqB,mGAAmG,cAAc,iBAAiB,kBAAkB,qBAAqB,EAAE,oBAAoB,mCAAmC,eAAe,EAAE,iBAAiB,0BAA0B,iBAAiB,0BAA0B,WAAW,yDAAyD,uBAAuB,qBAAqB,gCAAgC,WAAW,wKAAwK,SAAS,oBAAoB,kBAAkB,qBAAqB,qDAAqD,EAAE,iBAAiB,6CAA6C,8BAA8B,0DAA0D,EAAE,uBAAuB,kCAAkC,kBAAkB,0BAA0B,6BAA6B,8CAA8C,IAAI,IAAI,sBAAsB,EAAE,oBAAoB,wCAAwC,6BAA6B,uFAAuF,uBAAuB,4BAA4B,2CAA2C,EAAE,gBAAgB,yBAAyB,IAAI,EAAE,eAAe,gBAAgB,wBAAwB,2BAA2B,aAAa,6BAA6B,oBAAoB,qBAAqB,8BAA8B,iEAAiE,EAAE,SAAS,iBAAiB,OAAO,gBAAgB,SAAS,iBAAiB,WAAW,0BAA0B,wOAAwO,oCAAoC,8DAA8D,mBAAmB,mCAAmC,oDAAoD,wCAAwC,kBAAkB,+BAA+B,oCAAoC,6HAA6H,iCAAiC,UAAU,uDAAuD,wBAAwB,EAAE,uBAAuB,+BAA+B,+BAA+B,IAAI,4GAA4G,SAAS,uEAAuE,0BAA0B,6CAA6C,2CAA2C,qCAAqC,0BAA0B,UAAU,UAAU,wCAAwC,yBAAyB,oEAAoE,qBAAqB,oCAAoC,WAAW,2BAA2B,WAAW,mCAAmC,kCAAkC,kBAAkB,aAAa,UAAU,2CAA2C,WAAW,gCAAgC,oCAAoC,qCAAqC,0BAA0B,aAAa,UAAU,GAAwB;;;;;;;;;;;;;;;;;;;;;ACA5kM;AACuB;AACK;AACM;AACF;AACgB;;AAE/E,iEAAe,cAAc,iDAAK;;AAElC;AACA;AACA,QAAQ,sEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B,wEAAS;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,uCAAuC,wFAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,oGAAwC;;AAE3E;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,yBAAyB,iFAAwB;AACjD;AACA;AACA;AACA;AACA,wFAAwF,WAAW;AACnG;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,oBAAoB,gLAA8C;AAClE;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,sDAAsD;;AAEtD;AACA,+DAA+D;;AAE/D;AACA,gEAAgE;;AAEhE;AACA;AACA,gCAAgC;;AAEhC;AACA,8FAA8F;;AAE9F;AACA,2BAA2B;AAC3B,wGAAwG;;AAExG,mEAAmE,iBAAiB;AACpF;AACA,0EAA0E,iBAAiB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA,SAAS;;AAET;;AAEA,CAAC;;;;;;;;;;;;;;;;;;;;AC1K8E;AACd;AACR;AACM;AACZ;;AAEnD,iEAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8DAA8D,wCAAwC,WAAW,uDAAuD;;AAExK;AACA;AACA;AACA;AACA,yCAAyC,kEAAU;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,kEAAU;AACnD;AACA;AACA;;AAEA,mCAAmC,0EAAc;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,wFAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH;AAChH;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;;AAEA,8BAA8B,wEAAS;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,wEAAmB;AAChE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,gEAAgE;AAChE;AACA,cAAc;AACd,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;ACjID,4CAA4C,YAAY;;AAEjD;;AAEP,uBAAuB,gCAAgC,IAAI;AAC3D;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kCAAkC,4CAA4C,aAAa,mBAAmB;AAC9G,iBAAiB;AACjB;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,iBAAiB;;AAEjB,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,4DAA4D;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+EAA+E,gCAAgC;AAC/G;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iFAAiF,gCAAgC;AACjH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mEAAmE,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mEAAmE,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,SAAS;AACT;;AAEA;AACA;AACA,oFAAoF,+BAA+B,IAAI;AACvH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,4CAA4C,IAAI,kBAAkB,iBAAiB,kBAAkB;;AAEhI;AACA;AACA;AACA;AACA,iCAAiC,OAAO,IAAI,oBAAoB;AAChE;AACA;;AAEA,+BAA+B,OAAO,WAAW,QAAQ;AACzD;AACA;;AAEA;;;;;;;;;;;;;;;AC5YO;;AAEP;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AChDmG;;AAE5F;;AAEP,uBAAuB,WAAW,IAAI;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sDAAsD,YAAY,oBAAoB;AACtF;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,+EAA+E;AACrI,4DAA4D,sEAAsE;AAClI,oEAAoE,0EAA0E;AAC9I;AACA;AACA,mCAAmC,4BAA4B;AAC/D,sCAAsC,+BAA+B;AACrE,0CAA0C,gCAAgC;;AAE1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,yDAAyD,gEAAgE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0GAA0G;;AAE1G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uCAAuC,iBAAiB;AACxD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,kBAAkB;AAC1E,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,YAAY;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,YAAY;AAC5D;;AAEA;AACA;AACA;AACA;AACA,qGAAqG,MAAM;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;;AAET,oEAAoE,+BAA+B;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA,yDAAyD,yBAAyB;AAClF,iGAAiG,qBAAqB;AACtH,0CAA0C,kCAAkC,oBAAoB,iBAAiB,0BAA0B,iBAAiB,YAAY,cAAc,MAAM,6BAA6B,OAAO;AAChO,0CAA0C,iCAAiC,2BAA2B,2BAA2B,SAAS,uCAAuC,IAAI,UAAU,wCAAwC,IAAI,YAAY,eAAe,mBAAmB,mBAAmB,YAAY;AACxT,0CAA0C,iCAAiC,uBAAuB,iBAAiB,yBAAyB,iBAAiB,YAAY,cAAc,MAAM,4BAA4B,QAAQ;AACjO,0CAA0C,oCAAoC,sBAAsB,iBAAiB,4BAA4B,iBAAiB,YAAY,cAAc,MAAM,+BAA+B,OAAO;AACxO;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,YAAY,YAAY,YAAY,SAAS;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC9Y0D;AACD;;AAElD;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,mEAAU;AACzC;AACA;AACA,kCAAkC,qBAAqB,eAAe;AACtE;AACA;AACA;AACA;AACA;AACA,2EAA2E,mBAAmB,gCAAgC,cAAc,2BAA2B,eAAe,oBAAoB,uBAAuB,oBAAoB,kBAAkB;AACvQ;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yEAAkB;AACxD,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,UAAU,KAAK,UAAU,KAAK,UAAU;AACxG;AACA;AACA;AACA;AACA,8DAA8D,UAAU,KAAK,UAAU,KAAK,UAAU;AACtG;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wDAAwD,+BAA+B;AACvF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,gDAAgD,+EAAwB;AACxE;AACA,gDAAgD,aAAa,KAAK,aAAa,KAAK,aAAa;AACjG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;;;;;;;;;;;;;;ACpKO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,yBAAyB;AACzB,wBAAwB;AACxB,2BAA2B;AAC3B,0BAA0B;AAC1B,yBAAyB;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,IAAI;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW,IAAI,KAAK;AAC7D;AACA;AACA;AACA,4EAA4E,WAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA,gFAAgF,WAAW;AAC3F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qCAAqC,WAAW;AAChD;AACA;AACA,gFAAgF,WAAW;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,0CAA0C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5fA;AACA,uCAAuC,kCAAkC,MAAM;AAC/E;AACA,uCAAuC,sBAAsB,MAAM;;AAE5D;;AAEP,uBAAuB,gCAAgC,IAAI;AAC3D;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kCAAkC,4CAA4C,aAAa,mBAAmB;AAC9G,iBAAiB;AACjB;AACA;AACA,yCAAyC;AACzC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,4DAA4D;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+EAA+E,gCAAgC;AAC/G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iFAAiF,gCAAgC;AACjH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mEAAmE,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mEAAmE,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,oFAAoF,+BAA+B,IAAI;AACvH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,4CAA4C,IAAI,kBAAkB,iBAAiB,kBAAkB,MAAM,eAAe,MAAM,eAAe,UAAU,mBAAmB,UAAU,mBAAmB;AAC5N;;AAEA;;;;;;;;;;;;;;;ACpVO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8CAA8C,QAAQ,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACzG,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,gIAAgI,uCAAuC;AACvK;AACA;AACA;AACA,kGAAkG,uBAAuB;AACzH;AACA,mBAAmB;AACnB;AACA;AACA,gIAAgI,qCAAqC;AACrK;AACA;AACA;AACA,oIAAoI,uCAAuC;AAC3K;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb,sCAAsC,8BAA8B;AACpE,oDAAoD,4CAA4C;AAChG,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA,kFAAkF,gFAAgF;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClGO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA,6FAA6F,mBAAmB,UAAU,mBAAmB;AAC7I;AACA;AACA;AACA,2GAA2G,0BAA0B,UAAU,0BAA0B;AACzK;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA,mBAAmB;AACnB;AACA;AACA,iDAAiD,qBAAqB,iGAAiG,uBAAuB,WAAW,sBAAsB;AAC/N;AACA;AACA;AACA,iDAAiD,uBAAuB,qGAAqG,uBAAuB,WAAW,sBAAsB;AACrO;AACA;AACA;AACA,iDAAiD,uBAAuB,qGAAqG,uBAAuB,WAAW,sBAAsB;AACrO;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,wCAAwC;AACzE,wCAAwC,+CAA+C;AACvF,sCAAsC,8BAA8B;AACpE,yCAAyC,4DAA4D;AACrG,qCAAqC,wDAAwD;AAC7F,uCAAuC,0DAA0D;AACjG,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;ACtFO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,2DAA2D,gBAAgB;AAC3E;AACA,uBAAuB,wBAAwB,MAAM,uBAAuB,OAAO;AACnF;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,mBAAmB;AACnB,iFAAiF,0BAA0B;AAC3G;AACA,uBAAuB,kCAAkC,MAAM,iCAAiC,OAAO;AACvG;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,mBAAmB;AACnB,iFAAiF,iBAAiB;AAClG;AACA,uBAAuB,yBAAyB,MAAM,wBAAwB,OAAO;AACrF;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,mBAAmB;AACnB,iFAAiF,eAAe;AAChG;AACA,uBAAuB,uBAAuB,MAAM,sBAAsB,OAAO;AACjF;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yEAAyE,wBAAwB;AACjG,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4CAA4C,4CAA4C,iBAAiB,YAAY;AACrH;AACA,kEAAkE,QAAQ,GAAG,aAAa,0CAA0C,QAAQ,GAAG,aAAa;AAC5J,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAyC;AAC1E;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAyC;AAC1E;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA,oCAAoC,QAAQ,2CAA2C,QAAQ;AAC/F,mCAAmC,QAAQ,0CAA0C,QAAQ;AAC7F,mCAAmC,QAAQ,6CAA6C,QAAQ;AAChG;;AAEA;AACA,oCAAoC,QAAQ;AAC5C,mCAAmC,QAAQ;AAC3C,mCAAmC,QAAQ;AAC3C,oCAAoC,QAAQ;AAC5C;AACA,aAAa;AACb,mCAAmC,QAAQ;AAC3C;AACA,aAAa;;AAEb;AACA,wCAAwC,QAAQ;AAChD,uCAAuC,QAAQ;AAC/C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;;AAET;AACA;;AAEA;AACA;AACA,oFAAoF,sBAAsB;AAC1G;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,YAAY;AAChC;AACA;;AAEA,4CAA4C,QAAQ;AACpD,4CAA4C,QAAQ;AACpD,2CAA2C,QAAQ;AACnD,2CAA2C,QAAQ;AACnD;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB,gBAAgB,oCAAoC;AAC3F;AACA;AACA,mBAAmB,gBAAgB,cAAc,oCAAoC,iBAAiB,sDAAsD,OAAO,oBAAoB;AACvL;;AAEA;;;;;;;;;;;;;;;ACxQO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,+EAA+E,sBAAsB,WAAW,uBAAuB,gCAAgC,YAAY;AACnL,kFAAkF,sBAAsB,WAAW,uBAAuB;AAC1I;AACA;AACA;AACA,uBAAuB;AACvB;AACA,6EAA6E,cAAc;AAC3F,mFAAmF,gBAAgB;AACnG,2EAA2E,iBAAiB;AAC5F;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AChKO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6EAA6E,8BAA8B;AAC3G;AACA;AACA,oGAAoG;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,4EAA4E;;AAE5E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA,6EAA6E,OAAO,mBAAmB,cAAc,+CAA+C,gBAAgB;AACpL,+DAA+D,UAAU,KAAK,+CAA+C;AAC7H,0DAA0D,KAAK,uCAAuC;AACtG;AACA,uEAAuE,OAAO;AAC9E,yEAAyE,OAAO;AAChF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AClSO;;AAEP,6CAA6C,iBAAiB;;AAE9D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mNAAmN,uBAAuB;AAC1O;AACA;AACA;AACA,4LAA4L,yBAAyB;AACrN;AACA;AACA;AACA,mDAAmD,oLAAoL,sBAAsB;AAC7P,iCAAiC,4BAA4B;;AAE7D;AACA;AACA;;AAEA;AACA;AACA,uFAAuF;;AAEvF,wBAAwB,+BAA+B,sBAAsB,kCAAkC;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sIAAsI;AACtI,oHAAoH;AACpH,kGAAkG;AAClG,sIAAsI;AACtI,qHAAqH;AACrH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA,mDAAmD;AACnD,8DAA8D;AAC9D,mDAAmD;AACnD,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,iCAAiC;AACjC;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACpOO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2FAA2F,kBAAkB,UAAU,kBAAkB;AACzI;AACA,mBAAmB;AACnB;AACA;AACA,6GAA6G,2BAA2B,UAAU,2BAA2B;AAC7K;AACA,mBAAmB;AACnB;AACA;AACA,2FAA2F,kBAAkB,UAAU,kBAAkB;AACzI;AACA;AACA;AACA,+GAA+G,4BAA4B,UAAU,4BAA4B;AACjL;AACA;AACA;AACA,2GAA2G,0BAA0B,UAAU,0BAA0B;AACzK;AACA;AACA;AACA,+FAA+F,oBAAoB,UAAU,oBAAoB;AACjJ;AACA;AACA;AACA,2GAA2G,0BAA0B,UAAU,0BAA0B;AACzK;AACA;AACA;AACA,yGAAyG,yBAAyB,UAAU,yBAAyB;AACrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,uCAAuC;AACvE,yCAAyC,gDAAgD;AACzF,gCAAgC,4DAA4D;AAC5F,0CAA0C,iDAAiD;AAC3F,wCAAwC,+CAA+C;AACvF,kCAAkC,yCAAyC;AAC3E,wCAAwC,+CAA+C;AACvF,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;ACnGO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4FAA4F,uBAAuB;AACnH;AACA;AACA;AACA,4FAA4F,uBAAuB;AACnH;AACA;;AAEA;AACA;AACA;AACA;AACA,wGAAwG,oBAAoB;AAC5H;AACA;AACA;AACA,wGAAwG,oBAAoB;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iHAAiH,4BAA4B;AAC7I;AACA;AACA;AACA,iHAAiH,4BAA4B;AAC7I;AACA;AACA;AACA,6GAA6G,0BAA0B;AACvI;AACA;AACA;AACA,6GAA6G,0BAA0B;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ,qDAAqD;AAC7D,QAAQ;AACR,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB,aAAa,MAAM,IAAI,iBAAiB,gCAAgC;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kEAAkE;AAClE,8EAA8E;AAC9E,sFAAsF;AACtF,kFAAkF;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B,OAAO,KAAK,kBAAkB;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA,iCAAiC,KAAK;AACtC;AACA,mCAAmC,MAAM;AACzC;AACA,uCAAuC,QAAQ;;AAE/C;AACA,sBAAsB,qBAAqB,KAAK,QAAQ,KAAK,KAAK;AAClE,sBAAsB,OAAO,KAAK,QAAQ;AAC1C;AACA;;AAEA;;;;;;;;;;;;;;;AC5MO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,uBAAuB,kBAAkB,yCAAyC;AAClL;AACA;AACA;AACA,mFAAmF;AACnF,4JAA4J,sBAAsB;AAClL;AACA;AACA;AACA,sFAAsF;AACtF,qKAAqK,yBAAyB;AAC9L;AACA;AACA;AACA;AACA;;AAEA;AACA,kKAAkK,mBAAmB,gBAAgB;AACrM;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,0CAA0C,OAAO,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACpG,2BAA2B;AAC3B;AACA,6CAA6C,WAAW,6BAA6B,UAAU,YAAY,cAAc,WAAW,sBAAsB,WAAW;AACrK;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,sFAAsF,oEAAoE;AAC1J;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT,wDAAwD,OAAO;AAC/D,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA,4CAA4C;AAC5C,uCAAuC;AACvC,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,2CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA,wCAAwC;AACxC;AACA,0DAA0D,uBAAuB;AACjF;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,gDAAgD;AAChD,gDAAgD,mEAAmE;AACnH,8CAA8C,6CAA6C,sCAAsC;AACjI;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;;AAEA;AACA,8BAA8B;AAC9B;AACA,oDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,2BAA2B;AAC3B,6BAA6B;;AAE7B;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yEAAyE,6BAA6B;AACtG;AACA;AACA,6EAA6E,6BAA6B;AAC1G;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qGAAqG,0BAA0B,IAAI,WAAW,0BAA0B,IAAI,kBAAkB;AAC9L;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,4BAA4B,IAAI,WAAW,4BAA4B,IAAI,kBAAkB;AAClM;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe,aAAa,IAAI,qCAAqC,iBAAiB,qCAAqC,UAAU,0BAA0B,WAAW,0BAA0B,IAAI,mCAAmC,KAAK,IAAI,WAAW,cAAc;AAC/T;AACA;AACA,kDAAkD,eAAe,aAAa,IAAI,uCAAuC,iBAAiB,uCAAuC,UAAU,4BAA4B,WAAW,4BAA4B,IAAI,qCAAqC,KAAK,IAAI,aAAa,cAAc;AAC3U;AACA,mBAAmB;AACnB;AACA,yDAAyD,iCAAiC;AAC1F;AACA,2DAA2D,oCAAoC;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,4CAA4C,aAAa,0BAA0B;AAC7G,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;;;;;;;;;;;;;;ACtzBO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iGAAiG,0EAA0E,uBAAuB;AAClM;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;ACzCO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yCAAyC,OAAO,IAAI,WAAW,UAAU,WAAW,GAAG,MAAM;AAC7F,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,mEAAmE,uEAAuE;AAC1I,4EAA4E,OAAO;AACnF;AACA;;AAEA;;;;;;;;;;;;;;;ACzCO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,0CAA0C,QAAQ,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACrG,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2CAA2C,QAAQ,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACtG,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8CAA8C,QAAQ,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACzG,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8CAA8C,QAAQ,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACzG,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8CAA8C,QAAQ,IAAI,aAAa,WAAW,YAAY,IAAI,OAAO;AACzG,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA,+GAA+G,4BAA4B,UAAU,4BAA4B;AACjL;;AAEA;AACA;AACA,qGAAqG,uBAAuB,UAAU,uBAAuB;AAC7J;;AAEA;AACA;AACA,yGAAyG,yBAAyB,UAAU,yBAAyB;AACrK;;AAEA;AACA;AACA,uGAAuG,wBAAwB,UAAU,wBAAwB;AACjK;;AAEA;AACA;AACA,uGAAuG,wBAAwB,UAAU,wBAAwB;AACjK;;AAEA;AACA;AACA,iHAAiH,6BAA6B,UAAU,6BAA6B;AACrL;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA,mHAAmH,8BAA8B,UAAU,kCAAkC,oCAAoC,WAAW,oCAAoC;AAChR;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA,2GAA2G,0BAA0B,UAAU,0BAA0B;AACzK;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mIAAmI,sCAAsC,UAAU,sCAAsC;AACzN;AACA;AACA;AACA,iIAAiI,qCAAqC,UAAU,qCAAqC;AACrN;AACA;AACA;AACA,iHAAiH,6BAA6B,UAAU,6BAA6B;AACrL;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iHAAiH,6BAA6B,UAAU,6BAA6B;AACrL;AACA;AACA;AACA,2IAA2I,0CAA0C,UAAU,0CAA0C;AACzO;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,6CAA6C;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,eAAe;AACpH;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,eAAe;AACxH;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,mDAAmD,0DAA0D;AAC7G,wDAAwD,+DAA+D;AACvH,iDAAiD,wDAAwD;AACzG,sCAAsC,6CAA6C;AACnF,sCAAsC,kEAAkE;AACxG,0CAA0C,iDAAiD;AAC3F,qCAAqC,4CAA4C;AACjF,uCAAuC,8CAA8C;AACrF,2CAA2C,kDAAkD;AAC7F,4CAA4C,mDAAmD;AAC/F,wCAAwC,+CAA+C;AACvF,mDAAmD,0DAA0D;AAC7G,oDAAoD,2DAA2D;AAC/G,2CAA2C,kDAAkD;AAC7F,2CAA2C,uEAAuE;AAClH,wDAAwD;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,kBAAkB,2BAA2B,kBAAkB;AAChI;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+FAA+F,kFAAkF;AACjL;AACA,yGAAyG,uFAAuF;AAChM;AACA,yGAAyG,mFAAmF;AAC5L;AACA,yGAAyG,uFAAuF;AAChM;AACA,6FAA6F,kFAAkF;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;;;;;;;;;;;;;;;AC5WqE;;AAE9D;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;AAC3B,0CAA0C,OAAO,IAAI,aAAa,WAAW,YAAY,IAAI,QAAQ,IAAI,OAAO;AAChH,2BAA2B;AAC3B;AACA;AACA,iHAAiH,YAAY;AAC7H;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;;AAEA;AACA,iDAAiD,aAAa,aAAa,gBAAgB;AAC3F;AACA,+EAA+E,WAAW,aAAa,kCAAkC,cAAc,iBAAiB,aAAa,cAAc,oBAAoB,mBAAmB,oBAAoB,gBAAgB;AAC9Q,mEAAmE,0BAA0B,QAAQ,wBAAwB,IAAI,yBAAyB;AAC1J;AACA,4GAA4G,YAAY;AACxH;AACA;AACA;AACA,2BAA2B;AAC3B,0CAA0C,OAAO,IAAI,aAAa,WAAW,YAAY,IAAI,QAAQ,IAAI,OAAO;AAChH,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,6CAA6C,OAAO,IAAI,WAAW,UAAU,WAAW,GAAG,MAAM;AACjG,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,6CAA6C,OAAO,IAAI,WAAW,UAAU,WAAW,GAAG,MAAM;AACjG,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,aAAa,aAAa,gBAAgB;AAC3F;AACA,8CAA8C,WAAW,SAAS,QAAQ;;AAE1E,sIAAsI,UAAU;AAChJ,2IAA2I,QAAQ;;AAEnJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,4EAAoB,kBAAkB,6FAA6F;AAC5J;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,sBAAsB,qBAAqB;;AAE7F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,6BAA6B;AACnF;AACA;AACA;AACA;AACA;AACA,kEAAkE,6BAA6B;;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA;AACA;AACA;AACA;AACA,sEAAsE,gBAAgB;;AAEtF;AACA,4EAA4E,WAAW;;AAEvF,6BAA6B;AAC7B,qBAAqB;AACrB,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,yBAAyB,6EAAqB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,0DAA0D,gBAAgB;AAC1E;;AAEA;AACA;AACA;AACA,wCAAwC,WAAW,SAAS,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,6CAA6C,WAAW;AACxD,SAAS;;AAET;AACA;AACA,+DAA+D,eAAe;AAC9E;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gBAAgB,IAAI,IAAI;AACvE,+CAA+C,gBAAgB,IAAI,IAAI;;AAEvE,cAAc;AACd,+CAA+C,gBAAgB,IAAI,IAAI;AACvE,+CAA+C,gBAAgB,IAAI,IAAI;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,0DAA0D,+EAA+E;AACzI;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,4CAA4C,gBAAgB;AAC5D;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sBAAsB,oBAAoB;AAChG;AACA;AACA,8DAA8D,6BAA6B;;AAE3F;AACA;AACA,sCAAsC;AACtC;AACA;AACA,8DAA8D,6BAA6B;;AAE3F;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;;AAE9E;AACA,qBAAqB;AACrB,iBAAiB;AACjB,cAAc;AACd;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,sBAAsB,qBAAqB;;AAE7F;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0DAA0D,6BAA6B;;AAEvF;AACA;AACA,kCAAkC;AAClC;AACA;AACA,0DAA0D,6BAA6B;;AAEvF;AACA;AACA;AACA,8DAA8D,6BAA6B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,6BAA6B;;AAEnG;AACA;AACA;AACA,0EAA0E,6BAA6B;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,6BAA6B;;AAE3G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kFAAkF,gBAAgB;AAClG;AACA,yCAAyC;;AAEzC,qCAAqC;AACrC,6BAA6B;AAC7B,qBAAqB;;AAErB,iBAAiB;AACjB,cAAc;AACd;;AAEA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA;AACA,iCAAiC,MAAM,IAAI,IAAI;AAC/C;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA,oCAAoC,IAAI;AACxC,cAAc;AACd,gCAAgC,IAAI;AACpC;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,IAAI;AACtD,cAAc;AACd,8CAA8C,IAAI;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD,cAAc;AACd,gCAAgC,kBAAkB;AAClD;AACA;;AAEA,4CAA4C,OAAO;AACnD;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA,qEAAqE,mBAAmB,cAAc,aAAa;AACnH;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,yDAAyD,gCAAgC;AACzF;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,sDAAsD,IAAI;AAC1D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,aAAa;AAChC,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,sEAAsE,0DAA0D;AAChI;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,iCAAiC,OAAO,IAAI,WAAW,UAAU,WAAW,GAAG,MAAM;AACrF,kBAAkB;AAClB;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe,GAAG,yBAAyB;AAChG;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,2CAA2C;AAC/E,kEAAkE,GAAG;;AAErE;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,SAAS;AACT;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,wCAAwC,MAAM,IAAI,IAAI;AACtD,uCAAuC,MAAM,IAAI,IAAI,OAAO;AAC5D;AACA,mCAAmC,MAAM,IAAI,IAAI;AACjD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,iCAAiC,YAAY,IAAI,UAAU;AAC3D;AACA,wCAAwC,UAAU,IAAI,OAAO;AAC7D;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc,eAAe,UAAU,iBAAiB,eAAe;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;ACpoC8E;;AAEvE;;AAEP;AACA;AACA;AACA;AACA;AACA,kCAAkC,mFAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,wFAAwF,kCAAkC;;AAE1H;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;AACA,oGAAoG,yBAAyB;AAC7H;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oFAAoF,wBAAwB,KAAK,kBAAkB;AACnI,mCAAmC;AACnC;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,4CAA4C,SAAS,YAAY;AACvK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,oBAAoB;AACrH;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC9NqE;;AAE9D;;AAEP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;;AAEA,iDAAiD,4DAA4D,cAAc,yBAAyB;AACpJ;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC;;AAExC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;;AAExC,wCAAwC;AACxC,wCAAwC;;AAExC;AACA;AACA;AACA;;AAEA;AACA,qFAAqF,cAAc,oFAAoF,eAAe;AACtM;AACA,uFAAuF,mBAAmB,iBAAiB,sBAAsB,mCAAmC,yBAAyB;AAC7M;AACA;AACA;AACA,iGAAiG;AACjG;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G;AAC9G;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,0CAA0C,OAAO,IAAI,aAAa,WAAW,YAAY,IAAI,QAAQ,IAAI,OAAO;AAChH,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sLAAsL;AACtL,wKAAwK;AACxK,mKAAmK;AACnK,4KAA4K;AAC5K,4KAA4K;AAC5K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0BAA0B,4EAAoB,kBAAkB,6FAA6F;AAC7J;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,8CAA8C,0CAA0C;;AAExF;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6CAA6C;;AAE/F,qBAAqB;AACrB;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD;;AAErD;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;;AAEA,qBAAqB;;AAErB;AACA,iDAAiD;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,wBAAwB;AACzG,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB;;AAErB;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA,UAAU;AACV;AACA,6CAA6C;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,IAAI,KAAK,iCAAiC;AACrF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;;AAEA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C,uCAAuC,QAAQ;AAC/C,uCAAuC,QAAQ;AAC/C,uCAAuC,QAAQ;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,yBAAyB,oBAAoB;AACtH;AACA;;AAEA;AACA;AACA,iCAAiC;;AAEjC,4DAA4D;AAC5D,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B,sBAAsB;AACtB;AACA;;AAEA,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C,sBAAsB;AACtB,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,cAAc;AACd;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,6CAA6C;AACvF;AACA;;AAEA;AACA,oGAAoG,iDAAiD;;AAErJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,MAAM;AACnE;;AAEA,sBAAsB;AACtB,kDAAkD,6CAA6C;AAC/F,iEAAiE,OAAO;AACxE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,2BAA2B;AAC7D,mEAAmE;AACnE;;AAEA,mCAAmC;AACnC,2BAA2B,IAAI,YAAY;AAC3C;;AAEA,mCAAmC;AACnC,8BAA8B,aAAa;AAC3C;;AAEA,wCAAwC,YAAY;AACpD,+BAA+B;AAC/B,2DAA2D;AAC3D;;AAEA,kCAAkC,2BAA2B;AAC7D,sEAAsE;AACtE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,wEAAgB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACt3BO;;AAEP,gCAAgC;AAChC;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,MAAM;AACzE;AACA,cAAc;AACd,8EAA8E,MAAM;AACpF;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,iDAAiD,sBAAsB,qBAAqB;AAC7H,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd,iHAAiH,cAAc;AAC/H;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D,mBAAmB,qFAAqF,aAAa,KAAK,YAAY;AACtI;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA,kEAAkE,QAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,QAAQ;AAC1F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,QAAQ;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,iFAAiF,MAAM;AACvF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;;ACvYoF;AAC/C;;AAE9B;;AAEP;AACA,+DAA+D;AAC/D,MAAM,IAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yFAAiB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sGAAsG,yDAAa;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,QAAQ;AACxB;AACA,wDAAwD,SAAS,cAAc,YAAY,UAAU,OAAO,WAAW,QAAQ;AAC/H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4EAA4E,mBAAmB;AAC/F;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,0EAA0E,gBAAgB;AAC1F,wEAAwE,gBAAgB;AACxF,mBAAmB,+CAA+C,GAAG,8CAA8C;AACnH;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACxQA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;ACjBgE;AACR;;AAEnD;;AAEP;AACA;AACA;AACA;AACA,qEAAqE;AACrE,0CAA0C,0EAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,sCAAsC,kEAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC9FO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+FAA+F,mBAAmB,UAAU,kBAAkB;AAC9I;;AAEA;AACA;AACA,6FAA6F,kBAAkB,UAAU,iBAAiB;AAC1I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kFAAkF,YAAY;AAC9F;AACA;AACA;AACA,0GAA0G,uBAAuB,UAAU,sBAAsB;AACjK;AACA;AACA;AACA,wFAAwF,eAAe;AACvG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8EAA8E,iBAAiB;AAC/F;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AChI4D;;AAErD;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;;AAEA;AACA,sDAAsD,OAAO;AAC7D;AACA,2BAA2B,OAAO;AAClC,kDAAkD,WAAW,OAAO,GAAG,SAAS,OAAO,aAAa,2FAA2F;AAC/L;;AAEA;AACA,sCAAsC,OAAO;AAC7C,+BAA+B,OAAO,YAAY,OAAO;AACzD,8CAA8C,OAAO,WAAW,WAAW,OAAO,GAAG,SAAS,OAAO,KAAK,oCAAoC;AAC9I;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA,yCAAyC,+EAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yGAAyG,yEAAkB;AAC3H,wFAAwF,+EAAwB;AAChH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC9NO;;AAEP;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA,uKAAuK,KAAK,kCAAkC;AAC9M;AACA;AACA;AACA,uLAAuL,KAAK,0CAA0C;AACtO;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;ACrDO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;;AAExC,oBAAoB,eAAe;;AAEnC;AACA;AACA;AACA;;AAEA,4BAA4B,sEAAsE;AAClG;AACA,6BAA6B,uEAAuE;AACpG;AACA,iCAAiC,2EAA2E;AAC5G;AACA,+BAA+B,yEAAyE;AACxG;;AAEA;AACA;AACA;AACA,iCAAiC,cAAc,4BAA4B,WAAW;;AAEtF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,sGAAsG;AACtG;AACA;AACA;AACA;AACA,aAAa;AACb,kGAAkG;AAClG;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,+CAA+C,cAAc;AAC7D;;AAEA;AACA,sHAAsH,gCAAgC;AACtJ;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA,+CAA+C,kBAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,6CAA6C,kCAAkC;AAC/E;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,oBAAoB,QAAQ;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,8EAA8E,kBAAkB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,wBAAwB,oCAAoC,mCAAmC,kCAAkC;AACjI;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,oDAAoD;AACpD,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACjRO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uKAAuK,YAAY;AACnL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mGAAmG,UAAU,qBAAqB,UAAU;AAC5I,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;AC5FO;;AAEP;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,cAAc;AACzG;AACA;AACA;AACA,mGAAmG,kBAAkB;AACrH;AACA;AACA;AACA,8GAA8G,wBAAwB;AACtI;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA,+GAA+G,wBAAwB;AACvI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;ACjFiE;;AAE1D;;AAEP;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,qBAAqB,UAAU,oBAAoB;AAC9J;AACA;AACA;AACA,uGAAuG,mBAAmB,UAAU,kBAAkB;AACtJ;AACA;AACA;AACA,mGAAmG,wBAAwB,UAAU,wBAAwB;AAC7J;AACA;AACA;AACA,kHAAkH,uBAAuB,UAAU,uBAAuB;AAC1K;AACA;AACA;AACA,gCAAgC,qBAAqB,sBAAsB,qBAAqB;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,0DAA0D,mBAAmB;AAC7E;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;ACpLqE;;AAE9D;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,mJAAmJ,kBAAkB;AACrK;AACA;AACA;AACA,qKAAqK,wBAAwB;AAC7L;;AAEA;AACA;AACA,6FAA6F,mBAAmB,UAAU,mBAAmB;AAC7I;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,0CAA0C,OAAO,IAAI,aAAa,WAAW,YAAY,IAAI,QAAQ,KAAK,OAAO;AACjH,2BAA2B;AAC3B;AACA,8CAA8C,sBAAsB,8BAA8B,qBAAqB,YAAY,yBAAyB,sBAAsB,uBAAuB,sBAAsB;AAC/N,wEAAwE,kBAAkB;AAC1F;AACA;;AAEA;AACA;;AAEA,mBAAmB;AACnB,sDAAsD,qBAAqB,OAAO,uBAAuB,oBAAoB,MAAM,sBAAsB,aAAa,mBAAmB,qBAAqB,0BAA0B,UAAU,aAAa,GAAG,kBAAkB;;AAEpR;AACA;AACA;AACA;;AAEA;AACA,qEAAqE;AACrE,6IAA6I,mBAAmB;AAChK;AACA;AACA;AACA,+JAA+J,yBAAyB;AACxL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,4EAAoB,kBAAkB,wFAAwF;;AAExJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA,+IAA+I,kBAAkB;AACjK,iJAAiJ,kBAAkB;AACnK;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,MAAM;AACpE;AACA,wFAAwF,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC,kCAAkC;;AAElC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,+CAA+C;AAC/C,0EAA0E,4BAA4B;AACtG;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,4CAA4C,IAAI,YAAY,6BAA6B;AAClI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AClRA;;AAEO;;AAEP,gCAAgC;AAChC;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,iDAAiD,sBAAsB,qBAAqB;AAC7H,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd,+GAA+G,cAAc;AAC7H;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D,mBAAmB,qFAAqF,aAAa,KAAK,YAAY;AACtI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,+EAA+E,MAAM;AACrF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,QAAQ;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA,mHAAmH,kCAAkC;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,MAAM;AACvE;AACA,cAAc;AACd,4EAA4E,MAAM;AAClF;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA,gEAAgE,QAAQ;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,QAAQ;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;;;;;;;;;;;;;;ACjTO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,WAAW,KAAK,WAAW;AACnE,oDAAoD,WAAW,gCAAgC,WAAW,IAAI,aAAa,UAAU,eAAe,aAAa,WAAW,YAAY;AACxL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oDAAoD;AACpD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0DAA0D,eAAe;AACzE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;ACvFO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,WAAW,KAAK,WAAW;AACvE,2DAA2D,WAAW,cAAc,aAAa,UAAU,eAAe,aAAa,WAAW,YAAY;AAC9J;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;;AAEiD;AACY;AACR;AACA;AACc;AACd;AACY;AACN;AACA;AAChB;;AAEU;AACY;AACR;AACQ;AACQ;AAChB;AACA;AAC0B;AACJ;AAChB;;AAEZ;AACuB;;AAEX;AACF;AACN;AACA;AACE;;AAEJ;AACJ;AACA;AACc;AACR;;AAEE;AACV;;AAEQ;;AAEvD,iEAAe;AACf,iBAAiB;AACjB,mBAAmB;AACnB,eAAe;AACf,eAAe;AACf,sBAAsB;AACtB,eAAe;AACf,qBAAqB;AACrB,kBAAkB;AAClB,kBAAkB;AAClB,UAAU;AACV,mBAAmB;AACnB,gBAAgB;AAChB,oBAAoB;AACpB,wBAAwB;AACxB,gBAAgB;AAChB,gBAAgB;AAChB,6BAA6B;AAC7B,2BAA2B;AAC3B,mBAAmB;AACnB,mBAAmB;AACnB,kBAAkB;AAClB,eAAe;AACf,oBAAoB;AACpB,eAAe;AACf,gBAAgB;AAChB,kBAAkB;AAClB,gBAAgB;AAChB,gBAAgB;AAChB,uBAAuB;AACvB,mBAAmB;AACnB,gBAAgB;AAChB,eAAe;AACf,gBAAgB;AAChB,kBAAkB;AAClB,yBAAyB;AACzB,CAAC,EAAC;;;;;;;;;;;;;;;ACnFK;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,iDAAiD,8BAA8B;AAC/E,iCAAiC,eAAe,MAAM,8BAA8B;AACpF;AACA,mBAAmB;AACnB;AACA,mBAAmB;AACnB;AACA;AACA,8FAA8F,kBAAkB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,6FAA6F,mBAAmB,UAAU,mBAAmB;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,kBAAkB,UAAU,kBAAkB;AACzI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,uFAAuF,QAAQ,cAAc,aAAa,KAAK,kBAAkB;AACjJ;AACA;AACA;AACA,sEAAsE,mCAAmC,MAAM,WAAW;AAC1H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,WAAW;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,yIAAyI,WAAW,kBAAkB,WAAW;AACjL,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yEAAyE,WAAW;AACpF,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;ACxMO;;AAEP,gCAAgC;AAChC;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,MAAM;AACxE;AACA,cAAc;AACd,6EAA6E,MAAM;AACnF;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,iDAAiD,sBAAsB,qBAAqB;AAC7H,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd,gHAAgH,cAAc;AAC9H;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D,mBAAmB,qFAAqF,aAAa,KAAK,YAAY;AACtI;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA,iEAAiE,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,QAAQ;AACzF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,QAAQ;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,gFAAgF,MAAM;AACtF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AC/Ve;;AAEf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+EAA+E;AAC/E;AACA;AACA,6CAA6C,YAAY,GAAG;AAC5D;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACpDe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;ACbiE;AACI;AACA;AACJ;AACa;;AAE/D;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mFAAc;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,eAAe;AAC/E;AACA;AACA,yEAAyE,eAAe;AACxF,sBAAsB;AACtB,wEAAwE,eAAe;AACvF,wEAAwE,eAAe;AACvF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,mFAAyB;;AAE7D;AACA;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4BAA4B,MAAM,WAAW;AAC5F;AACA,4CAA4C,0FAA8B;AAC1E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iBAAiB;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iEAAiE,aAAa;AAC9E,iBAAiB;AACjB;AACA;AACA;AACA,qDAAqD,aAAa;AAClE;AACA;AACA;;AAEA;AACA;AACA,0EAA0E,gBAAgB;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,QAAQ,sBAAsB,UAAU;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAA0C,mFAAuB;AACjE,kDAAkD,mFAAuB;AACzE,iDAAiD,0FAA8B;AAC/E,6CAA6C,0FAA8B;;AAE3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qFAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yCAAyC,mFAAyB;AAClE,yEAAyE,eAAe;AACxF,6DAA6D,eAAe;AAC5E,uEAAuE,eAAe;AACtF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8DAA8D,eAAe;AAC7E;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA,oBAAoB;AACpB,sCAAsC;AACtC;AACA;AACA;;;;;;;;;;;;;;;;AC3R8E;;AAE/D;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,mFAAc;AAC7C,8BAA8B,mDAAmD;AACjF;AACA,yBAAyB,8CAA8C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,KAAK,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM,KAAK,4BAA4B;AAC/E;AACA;AACA,kCAAkC,kCAAkC;AACpE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC,wBAAwB,sCAAsC;AAC9D,uBAAuB,6CAA6C;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,aAAa,IAAI,sBAAsB,IAAI,mBAAmB;AAClH;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5Ge;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACxBiE;;AAElD;;AAEf;AACA;AACA;;AAEA;AACA;AACA,wDAAwD,aAAa;AACrE,sDAAsD,aAAa;AACnE;AACA;;AAEA;AACA,uBAAuB,mFAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,2EAA2E,gBAAgB;AAC3F,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0BAA0B;AACtE;AACA,SAAS;AACT,2EAA2E,gBAAgB;AAC3F,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;ACtEe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC3DoF;;AAErE;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,IAAI,IAAI,SAAS,OAAO,IAAI,IAAI,GAAG,IAAI;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,qCAAqC;AAC/G;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,yFAAiB;AACjD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;;AAElE;;AAEA;AACA,gBAAgB,gBAAgB;AAChC,qEAAqE,WAAW;AAChF;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACrJqE;AACS;;AAE/D;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB,uHAAuH,eAAe,UAAU,oBAAoB;AACrN;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qEAAqE;AACrE,iEAAiE;AACjE,mCAAmC,mFAAc;AACjD;AACA;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA,8DAA8D,cAAc;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,MAAM;AACzF;AACA,UAAU;AACV,+EAA+E,QAAQ;AACvF;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,oBAAoB,oBAAoB;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF,gFAAgF;AAChF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA,qEAAqE;AACrE,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,KAAK;AAC9B,sBAAsB,KAAK;AAC3B,8BAA8B,EAAE,KAAK,EAAE,mCAAmC,EAAE,KAAK,EAAE;AACnF;;AAEA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qEAAqE,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB,MAAM,iBAAiB;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,wBAAwB,iBAAiB;AACzC;AACA;AACA,6BAA6B,kGAAsC;AACnE;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,uBAAuB,GAAG,iDAAiD,GAAG,mBAAmB;AAC/L;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC,wBAAwB,iBAAiB;AACzC;;AAEA;AACA,oCAAoC,2BAA2B;AAC/D;;AAEA;AACA,qGAAqG,gBAAgB;AACrH,yGAAyG,mBAAmB;AAC5H,gCAAgC,mFAAc;;AAE9C;AACA,6BAA6B,kGAAsC;AACnE;AACA,4DAA4D,sBAAsB,GAAG,eAAe;AACpG;AACA;AACA;AACA;AACA;AACA,2EAA2E,uBAAuB,KAAK,uBAAuB,KAAK,mBAAmB;AACtJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,wBAAwB,iBAAiB;AACzC;;AAEA;AACA;AACA;AACA,+BAA+B,uBAAuB,eAAe,wBAAwB,KAAK,mBAAmB;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;;AC/e8E;;AAE/D;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,KAAK,IAAI,OAAO;AACzE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC,uBAAuB,sCAAsC;AAC7D;AACA;AACA,oCAAoC,2BAA2B;AAC/D;;AAEA;AACA,wEAAwE;AACxE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,OAAO,yCAAyC,IAAI,wCAAwC,IAAI;AAClJ;AACA,cAAc;AACd,+DAA+D,kCAAkC,0CAA0C,IAAI,wCAAwC,IAAI;AAC3L;AACA;;AAEA;AACA,qDAAqD,aAAa;AAClE;AACA,0DAA0D,aAAa;AACvE;;AAEA;AACA;AACA,0DAA0D,aAAa;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6GAA6G,gBAAgB;AAC7H;AACA,+BAA+B,mFAAc;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AClOuD;;AAExC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,WAAW;AACjF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2EAAsB;AACxE;AACA;AACA;AACA;AACA,8CAA8C,2EAAsB;AACpE,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0EAAqB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,oBAAoB;AACjF;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5Ge;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,MAAM;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qDAAqD;AACzF;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5Ie;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;;AAEA;;;;;;;;;;;;;;;AChDe;;AAEf,oCAAoC,4DAA4D;AAChG;AACA,wCAAwC;AACxC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qGAAqG,oBAAoB;AACzH;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,oGAAoG,kBAAkB;AACtH,kCAAkC;AAClC;AACA,uIAAuI,2BAA2B,kBAAkB;AACpL;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA,aAAa;AACb;;AAEA,wBAAwB,kBAAkB;AAC1C;AACA;;AAEA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACxI8E;;AAE/D;;AAEf;AACA;AACA,kCAAkC,mFAAc;AAChD;AACA;AACA;AACA,yBAAyB,8CAA8C,sBAAsB,yCAAyC;AACtI;AACA;AACA,aAAa;AACb;AACA;AACA,yBAAyB,8CAA8C,qBAAqB,yCAAyC;AACrI;AACA;AACA,aAAa;AACb;AACA;AACA,yBAAyB,8CAA8C,qBAAqB,yCAAyC;AACrI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6HAA6H,sCAAsC;AACnK;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B,uCAAuC,OAAO;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;;AAEnE;AACA;AACA,wEAAwE,kBAAkB;AAC1F,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC,GAAG,yCAAyC;AACrG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe,kBAAkB,SAAS;AAC5E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,sDAAsD,0BAA0B,0CAA0C,yBAAyB;AACnJ;AACA,qCAAqC,MAAM;AAC3C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,6DAA6D;AAClH;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;ACvL2E;;AAE5D;;AAEf;AACA;AACA;;AAEA;AACA,qCAAqC,oFAAqB;AAC1D;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACjBe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,KAAK;AACvD;AACA;AACA,wCAAwC,+CAA+C;AACvF;;AAEA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA,qCAAqC,KAAK,8BAA8B,KAAK;AAC7E,SAAS;AACT;AACA,mDAAmD;AACnD,+BAA+B,4EAA4E;AAC3G;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,iDAAiD;AACjD,8CAA8C;AAC9C,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kDAAkD,mBAAmB,kHAAkH;AACvL,qDAAqD,mBAAmB,wHAAwH;AAChM,mDAAmD,mBAAmB,oHAAoH;AAC1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,qCAAqC,UAAU,sCAAsC;AACxH;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACxHe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B,IAAI,uCAAuC;AACzG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,sEAAsE;AACtE;AACA;AACA;AACA;AACA,6EAA6E,sEAAsE,+BAA+B,IAAI,uCAAuC,GAAG;AAChO;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5Ce;;AAEf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;;AAEA;;;;;;;;;;;;;;ACrGe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,2BAA2B;AAC3D;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM;AACvG;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;;AAEA,+EAA+E;AAC/E;AACA;AACA,6CAA6C,YAAY,GAAG;AAC5D;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClFe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACVqE;;AAEtD;;AAEf;AACA;AACA;AACA,kCAAkC,0EAAc;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACfe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0CAA0C,8BAA8B;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;;;;;;;;;;;;;;;AClIqE;;AAEtD;;AAEf;AACA;AACA;AACA,kCAAkC,0EAAc;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU;AACtD,cAAc;AACd,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,MAAM,4BAA4B;AACrF,8BAA8B,uBAAuB,OAAO,yBAAyB;AACrF,iCAAiC,0BAA0B,UAAU,gBAAgB;AACrF,mCAAmC,4BAA4B,YAAY,UAAU;AACrF,iCAAiC,0BAA0B,UAAU,gBAAgB;AACrF;AACA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC1Le;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,sCAAsC;AAC7G,uEAAuE,kCAAkC;AACzG;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACxCA,yCAAyC,gBAAgB;;AAE1C;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,8EAA8E,4DAA4D;AAC1I;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACpFe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB,gCAAgC,MAAM,UAAU,iBAAiB;AAC1G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,cAAc,eAAe;AACrD;AACA,uDAAuD,eAAe;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,oFAAoF,cAAc;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,6GAA6G,gBAAgB;AAC7H;AACA;AACA,uDAAuD,gBAAgB;AACvE,yEAAyE,gBAAgB;AACzF,qEAAqE,gBAAgB;AACrF,2EAA2E,gBAAgB;AAC3F,6DAA6D,gBAAgB;AAC7E,+DAA+D,gBAAgB;AAC/E,yDAAyD,gBAAgB;AACzE,2DAA2D,gBAAgB;AAC3E,uDAAuD,gBAAgB;AACvE,yDAAyD,gBAAgB;AACzE,uDAAuD,gBAAgB;AACvE,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD;;AAEA,0BAA0B,yCAAyC;AACnE;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA,2BAA2B,aAAa;AACxC,SAAS;AACT;;AAEA;AACA;AACA,uDAAuD,qCAAqC;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC3QuD;AACe;;AAEvD;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,wEAAmB;AACjE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2EAA2E,uBAAuB;AACnK,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4CAA4C,2EAAe;AAC3D;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACtGe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC,oCAAoC,qDAAqD;AACzF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD;AACrD,sCAAsC,QAAQ;AAC9C,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+DAA+D,MAAM;AACrE,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;ACnN8E;;AAE/D;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mFAAc;AACjD;AACA;AACA;AACA;AACA,4HAA4H,2FAA2F;AACvN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,uCAAuC;AAClK,2HAA2H,kBAAkB;AAC7I,uBAAuB;AACvB,0BAA0B,gCAAgC;AAC1D;AACA,aAAa;AACb;AACA;AACA,8JAA8J,8BAA8B;AAC5L;AACA;AACA,gJAAgJ,oBAAoB;AACpK;AACA;AACA,8IAA8I,sCAAsC;AACpL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,+BAA+B,oCAAoC,2BAA2B;AACpM;AACA,qBAAqB;;AAErB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AChMe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDoF;;AAErE;;AAEf;AACA;AACA,kCAAkC,yFAAiB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,uFAAuF,+CAA+C,gBAAgB,IAAI,GAAG,6CAA6C,gBAAgB,GAAG;AAC7N;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACnBe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,KAAK;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AC5Ie;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qGAAqG;AACrG;AACA;;AAEA;;;;;;;;;;;;;;;ACtFe;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,sCAAsC;AAC7G,uEAAuE,kCAAkC;AACzG;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACxCuD;;AAExC;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,YAAY,6BAA6B,2BAA2B;AACnK;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wEAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA,gDAAgD;AAChD,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B,8BAA8B,0CAA0C;AACxJ,UAAU;AACV;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA;;AAEA;;;;;;;;;;;;;;;ACrHe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uDAAuD;AACvD;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACtDe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA,iCAAiC,qCAAqC,0BAA0B,gBAAgB,mDAAmD,cAAc,yEAAyE,WAAW,gBAAgB,0CAA0C,cAAc,cAAc,YAAY,kBAAkB,2DAA2D,WAAW,gBAAgB,wBAAwB,mBAAmB,6DAA6D,WAAW,mBAAmB,6DAA6D,gFAAgF,cAAc,WAAW,gCAAgC,ghGAAghG,2BAA2B,qCAAqC,2EAA2E,uCAAuC,gDAAgD,uCAAuC,gDAAgD,uCAAuC,2CAA2C,uCAAuC,8CAA8C,0BAA0B,mCAAmC,6DAA6D,yBAAyB;;AAE95I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,MAAM,GAAG,QAAQ,GAAG,eAAe;AAC9D;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AC9Be;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACbqE;;AAEtD;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2FAA+B;AACrD,+BAA+B,8FAAkC,SAAS;AAC1E;AACA,uCAAuC,2FAA+B,UAAU;AAChF,6CAA6C,oGAAwC;AACrF;AACA;;AAEA;;;;;;;;;;;;;;;ACxBe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,gCAAgC,YAAY;AAC5C,8CAA8C,OAAO;AACrD;AACA,yDAAyD,OAAO;AAChE,yEAAyE,OAAO;AAChF,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA,qCAAqC,KAAK,8BAA8B,KAAK;AAC7E,SAAS;AACT;AACA,mDAAmD;AACnD,+BAA+B,4EAA4E;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,iDAAiD;AACjD,8CAA8C;AAC9C,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kDAAkD,mBAAmB,kHAAkH;AACvL,qDAAqD,mBAAmB,wHAAwH;AAChM,mDAAmD,mBAAmB,oHAAoH;AAC1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;AClJe;;AAEf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACZe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAA+C,IAAI,mDAAmD;AACpI;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;AC7Be;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,iCAAiC;AACjC;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;AC1C8E;;AAE/D;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6GAA6G,gBAAgB;AAC7H;;AAEA;AACA;;AAEA,gCAAgC,mFAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB,UAAU,eAAe,WAAW,gBAAgB;AAChH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,wCAAwC,cAAc,KAAK,oBAAoB,WAAW,gBAAgB,YAAY,gBAAgB;AACtI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;ACxEoF;;AAErE;;AAEf;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA,6GAA6G,gBAAgB;AAC7H;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,qBAAqB;AACrB;;AAEA;AACA,wBAAwB;AACxB,wBAAwB,mCAAmC,GAAG,+BAA+B;AAC7F;;AAEA;AACA,sHAAsH;AACtH,+BAA+B,yFAAiB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACnG8E;;AAE/D;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mFAAc;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,qBAAqB,GAAG,OAAO,qBAAqB,eAAe,GAAG,OAAO,gBAAgB,cAAc;AACzI;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;ACtFe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACXe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACde;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,sCAAsC;AAC7G,uEAAuE,kCAAkC;AACzG;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACvCe;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE,2CAA2C,sBAAsB;AACjE;AACA,6CAA6C,kBAAkB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,sCAAsC;AAC7G,uEAAuE,kCAAkC;AACzG;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChD4D;AACJ;AACE;;AAES;AACC;AACT;AACgB;AACJ;AACA;AACJ;AACA;AACI;AACI;AACd;AACJ;AACM;AACF;AACF;AACM;AACI;AACM;AACd;AACE;AACR;AACI;AACc;AAChB;AACQ;AACA;AACc;AAClB;AACQ;AACN;AACF;AACA;AACW;AACX;AACF;AACA;AACA;AACU;AACV;AACE;AACgB;AACV;AACJ;AACZ;AACU;AACJ;AACI;AACQ;AACd;AACF;AACI;;;;;;;;;;;;;;;;;;ACtDN;AACF;AACoB;;AAEtD;;AAEf;AACA;AACA,4BAA4B,sDAAQ,eAAe,wDAAO;AAC1D;;AAEA;AACA;;AAEA;AACA,0CAA0C,mFAAuB;AACjE,iDAAiD,0FAA8B;AAC/E,6CAA6C,0FAA8B;AAC3E;;AAEA;;;;;;;;;;;;;;;;;ACpBmD;AACF;;AAElC;;AAEf;AACA;AACA,4BAA4B,sDAAQ,eAAe,wDAAO;AAC1D;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACdmD;AACF;AACmC;;AAErE;;AAEf;AACA;AACA,4BAA4B,sDAAQ,eAAe,wDAAO;AAC1D,kCAAkC,yFAAiB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,+CAA+C,gBAAgB,IAAI,GAAG,6CAA6C,gBAAgB,GAAG;AAC7N;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;;;;;;;;;;;;;;ACxGA,iEAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B,sBAAsB,aAAa;AACnC,sBAAsB,aAAa;AACnC;AACA,6CAA6C,gBAAgB;AAC7D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,QAAQ,4BAA4B;AACpH,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AC3MD,iEAAe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;AClE0E;;AAE3E,iEAAe;;AAEf;AACA;AACA;AACA;AACA,kCAAkC,mFAAc;AAChD,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,QAAQ;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;;AAEA;AACA,4FAA4F;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA,4FAA4F;;AAE5F;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,iDAAiD,gBAAgB;AACjE;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D,wBAAwB,eAAe;AACvC,sBAAsB,aAAa;AACnC,yBAAyB,kFAAkF;AAC3G,sBAAsB,aAAa;AACnC;AACA;AACA,oCAAoC,gBAAgB;AACpD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA,0DAA0D,mBAAmB;AAC7E,kDAAkD,mCAAmC;AACrF;AACA,4BAA4B,oCAAoC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,OAAO,GAAG,IAAI;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wEAAwE,OAAO;AAC/E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,sGAAsG,MAAM;AAC5G;AACA;AACA,sCAAsC,gCAAgC;AACtE;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,IAAI;AACvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,0CAA0C,GAAG,uCAAuC;AACxI;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD,SAAS;AACT;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;AC3jB0E;;AAE3E,iEAAe;;AAEf;AACA;AACA,kCAAkC,mFAAc;AAChD,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;;AAEA;AACA,4FAA4F;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA,4FAA4F;;AAE5F;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,iDAAiD,gBAAgB;AACjE;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D,wBAAwB,eAAe;AACvC,sBAAsB,aAAa;AACnC,wBAAwB,eAAe;AACvC,sBAAsB,aAAa;AACnC;AACA;AACA,gDAAgD,gBAAgB;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA,kDAAkD,mCAAmC;AACrF;AACA,4BAA4B,oCAAoC;AAChE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,IAAI;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,0CAA0C,GAAG,uCAAuC;AACxI;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD,SAAS;AACT;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AC/bD,iEAAe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA,iDAAiD,aAAa;AAC9D;;AAEA,CAAC;;;;;;;;;;;;;;;AC7DD,iEAAe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,KAAK;AACxD;AACA,4CAA4C,aAAa,cAAc,iBAAiB,aAAa,gBAAgB,oBAAoB,uBAAuB,aAAa,gBAAgB;AAC7L;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8BAA8B,wBAAwB,GAAG,sBAAsB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;ACzND,iEAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,sFAAsF;AACtF;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,6DAA6D,wCAAwC,SAAS,YAAY,WAAW,aAAa;AAClJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;ACvID,iEAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,sFAAsF;;AAEtF;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,qBAAqB,WAAW;AAChC;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA,sEAAsE,gBAAgB;AACtF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;;AAErD;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AC1JD,iEAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,8FAA8F;;AAE9F;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,qBAAqB,WAAW;AAChC;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA,+EAA+E,gBAAgB;AAC/F;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;;AAErD;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AC7JD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA,gGAAgG,gBAAgB;AAChH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iEAAe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB;AACzB,wBAAwB;AACxB,sBAAsB;AACtB,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,4FAA4F,oCAAoC;AAChI,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yDAAyD,YAAY,UAAU,cAAc,4BAA4B,aAAa;AACtI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAkE;AAChG;AACA;AACA;AACA;AACA,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAkE;AAChG;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AClOD,iEAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,aAAa,SAAS,YAAY,wBAAwB,cAAc;AAC/F;AACA,mBAAmB,aAAa,SAAS,YAAY;AACrD;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AC3GD,iEAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,oFAAoF;;AAEpF;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,qBAAqB,WAAW;AAChC;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA,oEAAoE,gBAAgB;AACpF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;;AAErD;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;AC7JD,iEAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,qFAAqF;;AAErF;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,qBAAqB,WAAW;AAChC;AACA;AACA,6BAA6B,UAAU;AACvC,UAAU;AACV;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA,kCAAkC,kBAAkB;AACpD,cAAc;AACd,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA,qEAAqE,gBAAgB;AACrF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;;AAErD;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7M+D;AACJ;AACI;AACd;AACE;AACgB;AAClB;AACF;AACY;AACR;AACN;AACkB;AAChB;;;;;;;;;;;;;;;;;;;;;ACZa;AACN;AACvD,YAAY,iBAAiB;AACsB;AACA;AACE;AACI;;AAElD;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iFAA6B;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,4DAAS;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,8CAA8C,4CAA4C;AAC1F;AACA,UAAU;AACV;AACA;AACA,wCAAwC,cAAc,IAAI,WAAW;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,iEAAiE,aAAa;AAC9E,+DAA+D,aAAa;AAC5E;AACA,uCAAuC,kFAAkF,UAAU,qFAAqF,OAAO,aAAa;AAC5O,8EAA8E,aAAa;AAC3F,8DAA8D,aAAa;AAC3E,yDAAyD,KAAK,GAAG;AACjE,uDAAuD,aAAa;AACpE,sDAAsD;AACtD,8DAA8D,uBAAuB,mBAAmB,MAAM,GAAG,aAAa;AAC9H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,iDAAiD,wBAAwB;AACzE;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,0CAA0C,iCAAiC,GAAG,+BAA+B;AAC7G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;;AAE/C;;AAEA;AACA;AACA;;AAEA,qCAAqC,gGAAwC;AAC7E,uDAAuD,oCAAoC,8BAA8B,uCAAuC;;AAEhK;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,iFAA8B;AACtE,kBAAkB;AAClB,oFAAoF,kBAAkB;AACtG;AACA;AACA;AACA;AACA,wCAAwC,8EAA2B;AACnE,kBAAkB;AAClB,iFAAiF,kBAAkB;AACnG;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,SAAS;AAC/F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,IAAI,IAAI,SAAS,MAAM;;AAErF;AACA;AACA;AACA,SAAS;;AAET,oCAAoC,oFAA+B;AACnE,4BAA4B,6EAAwB;AACpD,gCAAgC,gFAA2B;AAC3D;;AAEA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,2CAA2C,0BAA0B,sEAAsE;AAClM;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,8EAAwB;;AAE1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,IAAI,sCAAsC;AAC/E;AACA;AACA,mBAAmB,8CAA8C;AACjE;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,GAAG,eAAe;AACvD;;AAEA;AACA;AACA,2BAA2B,UAAU,IAAI,sCAAsC;AAC/E;AACA,uBAAuB,8CAA8C;AACrE;AACA,oBAAoB,0CAA0C,MAAM,QAAQ;AAC5E;;AAEA;AACA,yBAAyB,4BAA4B;AACrD,kCAAkC,4BAA4B,IAAI,4BAA4B;AAC9F;AACA,YAAY,4BAA4B,IAAI,6BAA6B,OAAO,4BAA4B,IAAI,6BAA6B;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qEAAqE,uCAAuC;AAC5G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,KAAK;AAChG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACvhB8D;;AAEvD;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,6FAA6F,uBAAuB;AACpH,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA,yDAAyD,4DAA4D,uBAAuB,8CAA8C;AAC1L,iEAAiE,oEAAoE,+BAA+B,8CAA8C;;AAElN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,0BAA0B,IAAI;AAClD;AACA,iFAAiF;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,oCAAoC,iGAAyC;AAC7E,sCAAsC,uFAA+B;;AAErE;;AAEA;AACA,wBAAwB,kGAA0C;AAClE,yBAAyB,kGAA0C;AACnE;AACA,aAAa;AACb;AACA;AACA,uBAAuB,uFAA+B;AACtD;AACA;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+DAA+D;AAC3G;AACA;AACA;AACA;AACA;AACA,mFAAmF,aAAa;AAChG;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B,+EAA+E,iBAAiB;;AAEhG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mFAAmF,iBAAiB;AACpG,iFAAiF,iBAAiB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACjPO;;AAEP;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA,6CAA6C,YAAY;;AAElD;;AAEP,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,2DAA2D,KAAK;AAChE,qCAAqC,cAAc,aAAa,KAAK,UAAU,QAAQ,0DAA0D,kBAAkB,gBAAgB,eAAe;AAClM;AACA;AACA,0EAA0E,WAAW;AACrF,oEAAoE,KAAK;AACzE,4FAA4F,KAAK,KAAK,cAAc,WAAW,4CAA4C,WAAW;AACtL,0FAA0F,KAAK,KAAK,aAAa,UAAU,2CAA2C,UAAU;AAChL,iGAAiG,KAAK;AACtG;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kFAAkF,iBAAiB;AACnG;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yDAAyD,gCAAgC,gBAAgB;AACzG,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,KAAK,IAAI,IAAI;AAC1F,8BAA8B;AAC9B;AACA,uDAAuD,YAAY;AACnE;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,KAAK;AACvD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AC3HO;;AAEP;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC7BO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,qDAAqD,8BAA8B;AACnF,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,KAAK,KAAK,uBAAuB;AAC3G;AACA,uDAAuD,0CAA0C;AACjG,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,+EAA+E;AAC/E,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC7T8D;;AAEvD;;AAEP;AACA;AACA,2GAA2G;;AAE3G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,kDAAkD,IAAI,oBAAoB;AAC1I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,uEAAc;AAC7C,mFAAmF,IAAI,IAAI,OAAO;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA,mCAAmC,yBAAyB,YAAY,IAAI,aAAa,gBAAgB;AACzG;AACA;AACA;;AAEA;AACA,qFAAqF;AACrF,gEAAgE,kDAAkD,IAAI,oBAAoB;AAC1I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClHA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,oCAAoC;AACpC;AACA,yEAAyE,4DAA4D,KAAK,OAAO,WAAW;AAC5J,aAAa;AACb,UAAU;AACV;AACA;AACA,qCAAqC;AACrC;AACA,2EAA2E,OAAO,WAAW;AAC7F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,gEAAgE,aAAa;AAC7E;AACA;AACA;AACA,gEAAgE,aAAa;AAC7E;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,gEAAgE,aAAa;AAC7E;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;;AAEA;AACA,oCAAoC,cAAc;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;AC3WO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,oCAAoC;AAClD,cAAc;AACd;;AAEA;AACA,oBAAoB,sBAAsB,MAAM,KAAK,QAAQ,IAAI,kBAAkB;;AAEnF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6DAA6D,2BAA2B;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,0BAA0B,MAAM,KAAK,QAAQ;AAC7C,WAAW;AACX;AACA;AACA,WAAW;AACX,0BAA0B,MAAM,KAAK,QAAQ;AAC7C,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,6CAA6C;AACtH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA,sDAAsD,MAAM,uBAAuB,QAAQ,+BAA+B,QAAQ;AAClI;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACrNA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACxBA;AACA,MAAM,+BAA+B;AACrC,MAAM,sCAAsC;AAC5C,MAAM,oCAAoC;AAC1C,MAAM,sCAAsC;AAC5C,MAAM,0CAA0C;AAChD,MAAM,wCAAwC;AAC9C,MAAM,2CAA2C;AACjD,MAAM,mDAAmD;AACzD,MAAM,sCAAsC;AAC5C,MAAM,6CAA6C;AACnD,MAAM,qCAAqC;AAC3C,MAAM,wCAAwC;AAC9C,MAAM,wCAAwC;AAC9C,MAAM,2CAA2C;AACjD,MAAM,sCAAsC;AAC5C,MAAM,gEAAgE;AACtE,MAAM,kCAAkC;AACxC,MAAM,qDAAqD;AAC3D,MAAM,sDAAsD;AAC5D,MAAM,uDAAuD;AAC7D,MAAM,8BAA8B;AACpC,MAAM,yCAAyC;AAC/C,MAAM,qCAAqC;AAC3C,MAAM,uCAAuC;AAC7C,MAAM,2CAA2C;AACjD,MAAM,wCAAwC;AAC9C,MAAM,4CAA4C;AAClD,MAAM,yCAAyC;AAC/C,MAAM,wCAAwC;AAC9C,MAAM,8CAA8C;AACpD,MAAM,+CAA+C;AACrD,MAAM,iDAAiD;AACvD,MAAM,gDAAgD;AACtD,MAAM,2CAA2C;AACjD,MAAM,sCAAsC;AAC5C,MAAM,wCAAwC;AAC9C,MAAM,+BAA+B;AACrC,MAAM,wCAAwC;AAC9C,MAAM,4DAA4D;AAClE,MAAM,4DAA4D;AAClE,MAAM,iEAAiE;AACvE,MAAM,uCAAuC;AAC7C,MAAM,wCAAwC;AAC9C,MAAM,gEAAgE;AACtE,MAAM,iEAAiE;AACvE,MAAM,yEAAyE;AAC/E,MAAM,iEAAiE;AACvE,MAAM,sCAAsC;AAC5C,MAAM,kDAAkD;AACxD,MAAM,6CAA6C;AACnD,MAAM,6BAA6B;AACnC,MAAM,wCAAwC;AAC9C,MAAM,2BAA2B;AACjC,MAAM,gDAAgD;AACtD,MAAM,oCAAoC;AAC1C,MAAM,oCAAoC;AAC1C,MAAM,wCAAwC;AAC9C,MAAM,0CAA0C;AAChD,MAAM,4CAA4C;AAClD,MAAM,iCAAiC;AACvC,MAAM,qCAAqC;AAC3C,MAAM,wCAAwC;AAC9C,MAAM,4DAA4D;AAClE,MAAM,oEAAoE;AAC1E,MAAM,uCAAuC;AAC7C,MAAM,qCAAqC;AAC3C,MAAM,yCAAyC;AAC/C,MAAM,mCAAmC;AACzC,MAAM,kCAAkC;AACxC,MAAM,qCAAqC;AAC3C,MAAM,uCAAuC;AAC7C,MAAM,+BAA+B;AACrC,MAAM,2BAA2B;AACjC,MAAM,wCAAwC;AAC9C,MAAM,uCAAuC;AAC7C,MAAM,2CAA2C;AACjD,MAAM,6CAA6C;AACnD,MAAM,2CAA2C;AACjD,MAAM,wCAAwC;AAC9C,MAAM,qCAAqC;AAC3C,MAAM,qCAAqC;AAC3C,MAAM,wCAAwC;AAC9C,MAAM,qCAAqC;AAC3C,MAAM,wDAAwD;AAC9D,MAAM,oDAAoD;AAC1D,MAAM,6BAA6B;AACnC,MAAM,mCAAmC;AACzC,MAAM,oCAAoC;AAC1C,MAAM,mCAAmC;AACzC,MAAM,qCAAqC;AAC3C,MAAM,wCAAwC;AAC9C,MAAM,4CAA4C;AAClD,MAAM,iEAAiE;AACvE,MAAM,qEAAqE;AAC3E,MAAM,sCAAsC;AAC5C,MAAM,6BAA6B;AACnC,MAAM,uCAAuC;AAC7C,MAAM,2DAA2D;AACjE,MAAM,yCAAyC;AAC/C,MAAM,uCAAuC;AAC7C,MAAM,uCAAuC;AAC7C,MAAM,sCAAsC;AAC5C,MAAM,sCAAsC;AAC5C,MAAM,qCAAqC;AAC3C,MAAM,sCAAsC;AAC5C,MAAM,sCAAsC;AAC5C,MAAM,sCAAsC;AAC5C,MAAM,4BAA4B;AAClC,MAAM,qCAAqC;AAC3C,MAAM,yCAAyC;AAC/C,MAAM,6CAA6C;AACnD,MAAM,uCAAuC;AAC7C,MAAM,oCAAoC;AAC1C,MAAM,uCAAuC;AAC7C,MAAM,kEAAkE;AACxE,MAAM,2EAA2E;AACjF,MAAM,4DAA4D;AAClE,MAAM,2DAA2D;AACjE,MAAM,2EAA2E;AACjF,MAAM,+BAA+B;AACrC,MAAM,yCAAyC;AAC/C,MAAM,0CAA0C;AAChD,MAAM,oCAAoC;AAC1C,MAAM,mCAAmC;AACzC,MAAM,2BAA2B;AACjC,MAAM,qCAAqC;AAC3C,MAAM,gCAAgC;AACtC,MAAM,qCAAqC;AAC3C,MAAM,4CAA4C;AAClD,MAAM,sCAAsC;AAC5C,MAAM,6BAA6B;AACnC,MAAM,yBAAyB;AAC/B,MAAM,4CAA4C;AAClD,MAAM,iCAAiC;AACvC,MAAM,4BAA4B;AAClC,MAAM,oCAAoC;AAC1C,MAAM,6CAA6C;AACnD,MAAM,kCAAkC;AACxC,MAAM,qCAAqC;AAC3C,MAAM,qCAAqC;AAC3C,MAAM,2BAA2B;AACjC,MAAM,6BAA6B;AACnC,MAAM,yCAAyC;AAC/C,MAAM;AACN;;AAEA,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;ACnJzB;;AAEP;AACA;AACA;AACA;AACA;AACA,eAAe,6CAA6C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB,KAAK;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,+DAA+D;AACvG;;AAEA;AACA,8FAA8F,UAAU,KAAK,oBAAoB,EAAE,IAAI,EAAE,2DAA2D;AACpM;AACA;;AAEA;AACA,gCAAgC,EAAE,EAAE,MAAM,EAAE,EAAE;AAC9C;;AAEA;AACA;AACA,yBAAyB,uCAAuC;AAChE;;AAEA;AACA;AACA,2BAA2B,uCAAuC,IAAI,mDAAmD;AACzH;;AAEA;AACA;AACA,yBAAyB,uCAAuC;AAChE;;AAEA,qBAAqB,8BAA8B;AACnD;AACA,0BAA0B,uCAAuC,IAAI,mDAAmD;AACxH;;AAEA;;;;;;;;;;;;;;;ACrGO;;AAEP;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA,SAAS;;AAET;AACA,uCAAuC,eAAe;AACtD;AACA;AACA,gDAAgD,IAAI;AACpD;AACA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,2BAA2B,WAAW,iBAAiB;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,6EAA6E,MAAM;AACnF;AACA;;AAEA;AACA;AACA,6EAA6E,MAAM;AACnF;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACvEqD;;AAErD;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;;AAEA;AACA,wFAAwF,2BAA2B;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iEAAiE,sBAAsB;AACvF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,4FAA4F,oBAAoB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,oBAAoB,IAAI,MAAM;;AAEhH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C,mBAAmB;AAC7D;;AAEA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA,+EAA+E,gBAAgB;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,cAAc;AACd,kBAAkB;AAClB;AACA,0CAA0C,KAAK,OAAO,OAAO;AAC7D,4CAA4C,KAAK,iCAAiC,KAAK,iBAAiB,aAAa,uBAAuB,IAAI,cAAc;AAC9J;AACA,kBAAkB;;AAElB,kBAAkB;AAClB;;AAEA,kCAAkC,KAAK,OAAO,OAAO;AACrD,kCAAkC,KAAK,UAAU,KAAK;AACtD,0BAA0B;AAC1B,yCAAyC,OAAO,IAAI,aAAa,UAAU,aAAa,GAAG,OAAO;AAClG,0BAA0B;AAC1B;AACA;AACA,kBAAkB;;AAElB,kBAAkB;AAClB;;AAEA,kCAAkC,KAAK,OAAO,OAAO;AACrD,sBAAsB;AACtB,iDAAiD,KAAK,UAAU,KAAK,2BAA2B,eAAe,SAAS,eAAe;AACvI,sBAAsB;;AAEtB,sBAAsB;AACtB,mCAAmC,aAAa,QAAQ,KAAK,UAAU,KAAK,wCAAwC,aAAa,WAAW,cAAc;AAC1J,sBAAsB;AACtB;AACA,kBAAkB;AAClB,cAAc;AACd,UAAU;;AAEV;AACA;AACA,cAAc;AACd;AACA,kBAAkB;AAClB,sBAAsB;AACtB,kCAAkC,KAAK,OAAO,OAAO;AACrD,kCAAkC,KAAK,UAAU,KAAK;AACtD,0BAA0B;AAC1B,yCAAyC,OAAO,IAAI,aAAa,UAAU,aAAa,GAAG,OAAO;AAClG,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB,kCAAkC,KAAK,OAAO,OAAO;AACrD,0BAA0B;AAC1B,qDAAqD,KAAK,UAAU,KAAK,2BAA2B,eAAe,SAAS,eAAe;AAC3I,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B,uCAAuC,aAAa,QAAQ,KAAK,UAAU,KAAK,wCAAwC,aAAa,WAAW,cAAc;AAC9J,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA,gBAAgB,cAAc;;AAE9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4EAA4E,aAAa,IAAI,MAAM;AACnG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4EAA4E,aAAa,IAAI,MAAM;;AAEnG;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,gEAAoB,kBAAkB,yFAAyF;AAC7J;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA,gGAAgG,oBAAoB;AACpH;AACA;AACA;AACA;;AAEA;AACA,uEAAuE,4BAA4B;AACnG;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,2BAA2B;AACvD,kCAAkC,gCAAgC;AAClE,2DAA2D,0BAA0B;AACrF,yCAAyC,QAAQ;AACjD,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA,wDAAwD,iBAAiB;AACzE;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA,iCAAiC,OAAO;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA,4CAA4C,oBAAoB;AAChE;AACA,gDAAgD,mCAAmC;AACnF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;;AAEhE;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA,4CAA4C,oBAAoB;;AAEhE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,sCAAsC;AACtF;AACA,4CAA4C,oBAAoB;AAChE;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA,kCAAkC,2BAA2B;AAC7D,mEAAmE;AACnE;;AAEA,mCAAmC;AACnC,2BAA2B,GAAG,YAAY;AAC1C;;AAEA,mCAAmC;AACnC,6BAA6B,aAAa;AAC1C;;AAEA,wCAAwC,YAAY;AACpD,+BAA+B;AAC/B,2DAA2D;AAC3D;;AAEA,kCAAkC,2BAA2B;AAC7D,sEAAsE;AACtE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc,gEAAgE,iBAAiB;AAChI;;AAEA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,4DAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE,MAAM;AAC1E;AACA;AACA;;AAEA;AACA,sCAAsC,4DAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,4DAAgB;AACtD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,4DAAgB;AAC/B;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,gCAAgC;AAC5F,qBAAqB;AACrB;AACA;AACA;AACA,4DAA4D,iCAAiC;AAC7F,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,oBAAoB,IAAI,KAAK;AAC1F,cAAc;AACd,6DAA6D,oBAAoB,IAAI,KAAK;AAC1F,cAAc;AACd,6DAA6D,oBAAoB,IAAI,KAAK;AAC1F;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACp8BO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACpBO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;ACzFO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACrBA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sFAAsF,KAAK;AAC3F;AACA,sCAAsC,2BAA2B,GAAG,oBAAoB,wBAAwB,UAAU,OAAO,UAAU,QAAQ;AACnJ;AACA;AACA,0BAA0B,kBAAkB;AAC5C;;AAEA;;;;;;;;;;;;;;;ACrBA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iLAAiL,qBAAqB,oBAAoB,mDAAmD,8BAA8B,eAAe;AAC1T;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,sBAAsB,GAAG,oBAAoB;AAC7F,2EAA2E;AAC3E;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gCAAgC,mCAAmC,GAAG,iCAAiC;AACvG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,KAAK;AAClC,8BAA8B,KAAK;AACnC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,4EAA4E;AAC5E;;AAEA;AACA,oBAAoB;AACpB,sCAAsC;AACtC;AACA;;AAEA;;;;;;;;;;;;;;;ACtLO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClDO;;AAEP;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA,4DAA4D,WAAW;AACvE,gDAAgD,0CAA0C,2BAA2B,WAAW;AAChI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA,8EAA8E,iBAAiB;AAC/F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,eAAe;AAChC;AACA;AACA,6FAA6F,WAAW;AACxG,gDAAgD,eAAe,4BAA4B,WAAW;AACtG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,iBAAiB;AAC/F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,gDAAgD,eAAe,UAAU,4CAA4C;AACrH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,kEAAkE,UAAU,iCAAiC,2BAA2B;AACxI;AACA,yEAAyE,MAAM,YAAY,UAAU;AACrG;AACA;AACA;AACA,iFAAiF,UAAU,UAAU,MAAM,qBAAqB,MAAM;AACtI;AACA;AACA;AACA;AACA;AACA,yEAAyE,UAAU,mBAAmB,gBAAgB;AACtH;AACA;;AAEA;;;;;;;;;;;;;;;ACrIO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,6BAA6B,WAAW,6BAA6B;AACzJ,aAAa;AACb;AACA;AACA,yDAAyD;AACzD;AACA,uDAAuD;AACvD;AACA;AACA,8BAA8B,YAAY,GAAG,UAAU;AACvD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,8BAA8B;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACrMO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B,GAAG,aAAa,GAAG,aAAa;AACrG;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;;AAEA;;;;;;;;;;;;;;;ACvBO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,+BAA+B;AACtE;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW,iBAAiB,MAAM;AAC5D;AACA;AACA,2BAA2B,kBAAkB;AAC7C,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA,qDAAqD,iCAAiC,KAAK;AAC3F;AACA,kBAAkB;AAClB;AACA,4DAA4D,4BAA4B;AACxF;AACA,kBAAkB;AAClB;AACA,uDAAuD,iBAAiB;AACxE;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,0CAA0C,aAAa,KAAK,iBAAiB;AAC7E,sBAAsB;AACtB,0CAA0C,aAAa,MAAM,eAAe,GAAG;AAC/E;AACA,kBAAkB;AAClB,sCAAsC,aAAa,KAAK,iBAAiB;AACzE;AACA,aAAa;AACb,4BAA4B;AAC5B;AACA,2DAA2D,eAAe,iBAAiB;AAC3F;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA,mDAAmD,oBAAoB;AACvE;AACA,kCAAkC;AAClC;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,0EAA0E,MAAM;AAChF,aAAa;AACb;AACA;AACA,0EAA0E,MAAM;AAChF,aAAa;AACb;AACA;AACA,kFAAkF,MAAM;AACxF,aAAa;AACb;AACA;AACA,sEAAsE,MAAM;AAC5E,aAAa;AACb;AACA;AACA,oEAAoE,MAAM;AAC1E,aAAa;AACb;AACA;AACA,uEAAuE,MAAM;AAC7E;AACA;AACA;;AAEA,yBAAyB,0BAA0B,iCAAiC;AACpF;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,wCAAwC,sDAAsD,SAAS;AACvG;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACrKO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,+EAA+E,aAAa,uBAAuB,IAAI;;AAE/I,0BAA0B,aAAa,mBAAmB,IAAI;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,6IAA6I;AAC7I;AACA;AACA;;AAEA,6DAA6D;AAC7D;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qCAAqC;AACtE,yIAAyI;AACzI,gIAAgI;AAChI;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACrE+B;;AAExB;;AAEP;AACA;AACA;AACA,qBAAqB,iDAAK;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6DAA6D,OAAO,YAAY,KAAK,UAAU,KAAK;AACpG;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,6DAA6D,OAAO,YAAY,KAAK,UAAU,KAAK;AACpG;AACA;AACA;AACA;AACA,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4EAA4E;;AAE5E,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB,GAAG,YAAY;AAC5D;AACA,uBAAuB,WAAW,GAAG,iBAAiB,GAAG,YAAY;AACrE;;AAEA,+BAA+B;AAC/B;AACA,6BAA6B,cAAc,GAAG,YAAY;AAC1D;AACA,uBAAuB,iCAAiC,GAAG,eAAe,GAAG,YAAY;AACzF;;AAEA,uDAAuD;AACvD,2DAA2D;AAC3D,6BAA6B,aAAa,GAAG,YAAY;AACzD;AACA,uBAAuB,qCAAqC,GAAG,cAAc,GAAG,YAAY;AAC5F;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACrRA;AACA;AACA;;AAEqD;;AAE9C,gCAAgC,8DAAc;;AAErD;AACA,kBAAkB,eAAe,IAAI;AACrC;AACA;AACA;;AAEA,eAAe,iBAAiB,IAAI;AACpC,+CAA+C,KAAK,KAAK,gBAAgB;AACzE;;AAEA;AACA,+BAA+B,UAAU,WAAW,KAAK;AACzD,6BAA6B,QAAQ,UAAU,QAAQ;AACvD;AACA;AACA;AACA,4EAA4E;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;;AAEA;;;;;;;;;;;;;;;ACxEA,iEAAe;AACfeAAe,SAAS,IAAI,IAAI,MAAM;AACtC,eAAe,IAAI,GAAG,OAAO,MAAM;AACnC,eAAe,IAAI,GAAG,OAAO,MAAM;AACnC,eAAe,IAAI,GAAG,OAAO,MAAM;AACnC,eAAe,IAAI,GAAG,OAAO,MAAM;AACnC,KAAK;AACL;AACA,eAAe,IAAI,GAAG,IAAI;AAC1B;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;AC9N2C;AACF;AACF;;AAElC;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,8CAA8C,eAAe,IAAI,UAAU;AAC3E,8CAA8C,eAAe,IAAI,UAAU;;AAE3E;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,wEAAwE,eAAe;AACvF;AACA;AACA;AACA,6EAA6E,oDAAS;AACtF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+EAA+E,WAAW;AAC1F;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA,wGAAwG,WAAW,+BAA+B,OAAO;AACzJ;AACA;AACA;AACA;AACA;AACA,gHAAgH,WAAW,qBAAqB,OAAO,gBAAgB,UAAU,cAAc,OAAO,mBAAmB,WAAW;AACpO;AACA;AACA;AACA;AACA;AACA,gHAAgH,WAAW,qBAAqB,OAAO,gBAAgB,UAAU,cAAc,OAAO,mBAAmB,WAAW;AACpO;AACA;AACA;AACA;AACA;AACA,gHAAgH,WAAW,qBAAqB,OAAO,gBAAgB,UAAU,cAAc,OAAO,mBAAmB,WAAW;AACpO;AACA;AACA;AACA;AACA;AACA,gHAAgH,WAAW,qBAAqB,OAAO,gBAAgB,UAAU,cAAc,OAAO,mBAAmB,WAAW;AACpO;AACA;AACA;AACA;AACA;AACA,kFAAkF,UAAU;AAC5F;AACA;AACA;AACA;AACA,0EAA0E,mBAAmB,iCAAiC,WAAW;AACzI;AACA;AACA;AACA,0GAA0G,WAAW;AACrH;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA,qDAAqD,KAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,oEAAoE,gBAAgB,2BAA2B,YAAY,YAAY,oBAAoB;AAC3J;AACA,cAAc;AACd,uFAAuF,oBAAoB;AAC3G;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA,2BAA2B,sDAAU;AACrC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,kDAAQ;;AAE/B;AACA;AACA;AACA;AACA,kDAAkD,oBAAoB,GAAG,wBAAwB;AACjG;AACA;;AAEA;AACA,uBAAuB,kDAAQ;AAC/B;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,MAAM;AACxC;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACzYO;;AAEP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,KAAK;AACxF;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,sCAAsC,MAAM,IAAI,cAAc;AAC9D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe,wBAAwB,wBAAwB;AACtF;AACA;AACA;;AAEA;AACA,6EAA6E,UAAU,YAAY,KAAK;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA,sGAAsG,YAAY;AAClH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,UAAU,UAAU,KAAK;AACpI,mDAAmD,mCAAmC;AACtF;AACA;AACA;AACA;AACA,qGAAqG,UAAU,oBAAoB,8BAA8B;AACjK;AACA,wIAAwI,UAAU;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,oHAAoH,UAAU,YAAY,KAAK;AAC/I,iBAAiB;AACjB,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;ACnLO;;AAEP;AACA;AACA;AACA,iBAAiB;AACjB;AACA,MAAM,IAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACpBO;;AAEP;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,MAAM,IAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClCO;;AAEP;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,MAAM,IAAI;AACV;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACzB8E;;AAE9E;AACA,aAAa;AACb,UAAU;AACV;AACO;AACP;AACA;AACA;;AAEO;;AAEP;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,gBAAgB,eAAe;AAC/B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,mBAAmB;AAClC,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mFAAc;AAChD;AACA;;AAEA;AACA;AACA,cAAc,8EAA8E;AAC5F,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C,kBAAkB;AAClB;AACA;AACA,4BAA4B,6EAA6E;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qGAAqG;AAC3H,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iCAAiC,4GAA4G;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;AC1JO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,mCAAmC,yCAAyC;AAC7G;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;AChEA;AACuD;;AAEhD,iCAAiC,gEAAe;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0DAA0D,OAAO;AACjE,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4EAA4E,2CAA2C;AACvH,4EAA4E,wCAAwC;AACpH,mBAAmB;AACnB;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa,IAAI,0BAA0B,iBAAiB,0BAA0B,UAAU,QAAQ,WAAW,QAAQ,IAAI,uCAAuC,KAAK,IAAI,eAAe,cAAc;AACjP;AACA,aAAa;AACb;AACA;AACA,4DAA4D,qCAAqC;AACjG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,4CAA4C,aAAa,0BAA0B;AAC7G,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,2DAA2D,WAAW;AACtE,sDAAsD,WAAW;AACjE;AACA;AACA,UAAU;AACV,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B;AAC1E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AC5WuC;AACY;AACkB;;AAErE;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,gBAAgB;AAC9B,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,qBAAqB;AACnC,eAAe,kBAAkB;AACjC,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEO;;AAEP;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA,mCAAmC,8EAAsC;;AAEzE;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,wDAAY;AAC5E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,0DAA0D,wCAAwC;;AAElG;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;AACA,SAAS;AACT;;AAEA;AACA,4DAA4D,aAAa;AACzE;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,kCAAkC,2BAA2B;AAC7D,mEAAmE;AACnE;;AAEA,mCAAmC;AACnC,2BAA2B,IAAI,YAAY;AAC3C;;AAEA,mCAAmC;AACnC,8BAA8B,aAAa;AAC3C;;AAEA,wCAAwC,YAAY;AACpD,+BAA+B;AAC/B,2DAA2D;AAC3D;;AAEA,kCAAkC,2BAA2B;AAC7D,sEAAsE;AACtE;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;;AAEzB;AACA;AACA;AACA,0CAA0C,wEAAgB;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,wEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sFAAsF,mBAAmB;AACzG;AACA,yFAAyF,mBAAmB;AAC5G;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,SAAS,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,iFAAiF,MAAM;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yFAAyF,aAAa;AACtG;;AAEA;AACA,gGAAgG,oBAAoB;AACpH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA,4GAA4G,mBAAmB;AAC/H,4EAA4E,gHAAgH;AAC5L,cAAc;AACd,6EAA6E,yBAAyB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8CAAM,GAAG,2FAA2F;AAChI;AACA;AACA,2EAA2E,yBAAyB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,6DAAqB;AACtD;AACA,+CAA+C,gBAAgB,KAAK,UAAU,IAAI,wBAAwB;AAC1G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA,wBAAwB,8CAAM,GAAG,qDAAqD;AACtF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,uBAAuB,SAAS,gBAAgB;AACjF,2DAA2D,sBAAsB,6FAA6F,sBAAsB;AACpM,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sFAAsF,6DAA6D,kBAAkB,yBAAyB;AAC9L,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;;AAEA,qBAAqB,qBAAqB,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB,yEAAyE,aAAa;AACtF;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uFAAuF,SAAS,kDAAkD;AAClJ;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,mBAAmB;AACvG,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,sBAAsB;AACnG,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,uCAAuC;AAClH;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,UAAU;AACV;AACA;AACA;AACA,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY,UAAU,aAAa;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,4DAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8DAA8D,cAAc;AAC5E;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAM;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wCAAwC;AACnG;;AAEA;;;;;;;;;;;;;;;;;AC7pDuD;AAClB;;AAE9B,+BAA+B,gEAAe;;AAErD;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8CAAM;AAC3C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AChEyC;AACY;AACQ;AACJ;AACpB;;AAErC,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,eAAe;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sEAAkB;AAC1D;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yFAAyF,cAAc;AACvG,4CAA4C,kEAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B,qBAAqB;AAClD;AACA,iBAAiB;AACjB;AACA;AACA,6CAA6C,8DAAc;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,mBAAmB,aAAa;AAChC,oBAAoB;AACpB;AACA;AACA;AACA,oCAAoC,kEAAgB;AACpD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yCAAyC,8CAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kEAAgB;AACpD,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;;AAEA;AACA;AACA,oEAAoE,gCAAgC,IAAI,iBAAiB,gBAAgB,QAAQ;AACjJ;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,aAAa;AACvG;AACA;AACA,iEAAiE,cAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,4EAA4E,eAAe;AAC3F;AACA;;AAEA,KAAK;AACL,cAAc,sDAAU;AACxB,CAAC,EAAC;;;;;;;;;;;;;;;AC/KF,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iKAA+B;AAC3E;AACA;AACA;AACA;AACA;AACA,oEAAoE,uBAAuB;AAC3F;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,6CAA6C;AAC7C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AC7CF,iEAAe;AACf,+FAA+F,uBAAuB,iBAAiB,sBAAsB,wBAAwB,KAAK;AAC1L;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,eAAe;AACf;;AAEA,oDAAoD,cAAc;AAClE;AACA,2CAA2C,QAAQ,IAAI,eAAe;AACtE,+CAA+C,SAAS;AACxD,6CAA6C,SAAS,MAAM,eAAe,0BAA0B,eAAe,UAAU,cAAc,QAAQ,cAAc,+CAA+C,eAAe,8BAA8B;AAC9P;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;;AAGA,oDAAoD,2BAA2B;AAC/E;AACA,qFAAqF,OAAO;AAC5F,mBAAmB;AACnB;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,yDAAyD,kBAAkB,iBAAiB,kBAAkB,eAAe,kBAAkB,eAAe;AAC9J;AACA;AACA;AACA;AACA;AACA,8GAA8G,4BAA4B,iBAAiB,4BAA4B,uEAAuE;AAC9P;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAAwH,aAAa;AACrI;AACA;AACA;AACA,oHAAoH,WAAW;AAC/H;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,mBAAmB;AACnB;AACA,yEAAyE;AACzE;AACA,mBAAmB;AACnB;;AAEA;;AAEA,oDAAoD,2BAA2B;;AAE/E;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oDAAoD,2BAA2B;;AAE/E,wDAAwD,iBAAiB;AACzE;AACA,qDAAqD,OAAO;;AAE5D;;AAEA,gFAAgF;AAChF;AACA,uBAAuB,sBAAsB,sJAAsJ,cAAc;AACjN,mJAAmJ;AACnJ,yGAAyG,oBAAoB;AAC7H;;AAEA,mBAAmB,sBAAsB,gKAAgK;AACzM;;AAEA,wDAAwD,yBAAyB;;AAEjF,wFAAwF,sBAAsB,6EAA6E,sBAAsB;;AAEjN,mBAAmB;AACnB,2IAA2I,kBAAkB;AAC7J,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,8EAA8E,sBAAsB,IAAI,yBAAyB,sBAAsB,KAAK,uBAAuB;AACnL;AACA,+IAA+I,gBAAgB;AAC/J;;AAEA,yFAAyF,sBAAsB,IAAI,yBAAyB,sBAAsB,KAAK,sBAAsB;AAC7L;AACA;AACA,uGAAuG;AACvG;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,8CAA8C,aAAa,qBAAqB,aAAa,YAAY,iBAAiB;AAC1H,sBAAsB,eAAe,oBAAoB,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,uBAAuB,OAAO;AAC9B,8BAA8B,QAAQ,KAAK,YAAY;AACvD,uBAAuB,QAAQ;AAC/B,uBAAuB,SAAS;AAChC;AACA,WAAW;AACX;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACtKF,iEAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAgD,UAAU,kBAAkB,QAAQ,gBAAgB;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AClHuC;;AAEvC,iEAAe;AACf;AACA;AACA;AACA;AACA,WAAW,qDAAS;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACpBF,iEAAe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,6CAA6C;AAC7I;AACA;AACA;AACA,+EAA+E,kDAAkD;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,mDAAmD;AAC5H;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,uDAAuD;AACvD;AACA;;AAEA;AACA,0EAA0E,wBAAwB,oCAAoC,mBAAmB;;AAEzJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,+CAA+C;;AAErG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,oCAAoC,eAAe;AACnD,sCAAsC,0DAA0D;AAChG,sCAAsC,gBAAgB;AACtD,gCAAgC,6BAA6B;AAC7D,kCAAkC,+BAA+B;AACjE,qCAAqC,iCAAiC;AACtE,8BAA8B,2BAA2B;AACzD;;AAEA;AACA,aAAa;AACb;AACA;AACA,mEAAmE,eAAe;;AAElF;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;;;;;;;;;;;;;;;;ACvNwC;;AAEzC,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,qIAAqI;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8EAA8E,eAAe;AAC7F;AACA,qCAAqC,SAAS,iBAAiB;AAC/D;AACA;AACA,6EAA6E,eAAe;AAC5F,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA,6CAA6C,sDAAU;AACvD;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDsD;AACc;AACR;AACV;AACgB;AACd;AACgB;AACd;AACM;AACN;;;;;;;;;;;;;;;ACTzC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,cAAc;AAC9E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC5FiD;;AAEjD,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,eAAe;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,4CAA4C,0DAAc;AAC1D;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AC5EK;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,QAAQ,IAAI,SAAS,QAAQ,aAAa,UAAU,SAAS,oDAAoD,OAAO,OAAO,KAAK,uCAAuC,mBAAmB,WAAW,OAAO;AAC1P;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,0DAA0D,WAAW,oBAAoB,cAAc,WAAW,mBAAmB,WAAW,KAAK,WAAW,UAAU,cAAc,WAAW,SAAS,WAAW;AACvN,mCAAmC,OAAO;AAC1C,mCAAmC,OAAO;AAC1C,mCAAmC,qBAAqB,gBAAgB;AACxE,mDAAmD,gBAAgB,KAAK,gBAAgB;AACxF;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kEAAkE,SAAS,KAAK,kBAAkB;;AAElG;AACA;AACA;AACA,iFAAiF,SAAS;AAC1F;AACA;AACA;AACA;;AAEA,+EAA+E,mBAAmB;AAClG;AACA;AACA,aAAa;AACb;AACA,aAAa;;AAEb,SAAS;AACT;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB,KAAK,wBAAwB;AAC7E;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AChGqD;;AAErD,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,8DAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;;AAEL,CAAC,EAAC;;;;;;;;;;;;;;;;ACjCuC;;AAEzC,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACZmC;;AAErC,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACvCF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB,iCAAiC,QAAQ;AAC/D,aAAa;AACb;AACA,sBAAsB,kCAAkC,QAAQ;AAChE,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gDAAgD,SAAS,aAAa,OAAO,WAAW;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gDAAgD,SAAS,wCAAwC,OAAO,eAAe;AAC3J;AACA,qCAAqC,gDAAgD;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iEAAiE,gBAAgB;AACjF;AACA;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,cAAc;AAC/B;AACA;AACA,uCAAuC,iBAAiB,IAAI,WAAW;AACvE,oDAAoD,MAAM;AAC1D;AACA;AACA,oCAAoC,UAAU,wBAAwB,WAAW,mBAAmB,gBAAgB,WAAW,WAAW,gBAAgB,gBAAgB,iBAAiB,iBAAiB;AAC5M,cAAc;AACd,+BAA+B,8CAA8C,eAAe,cAAc,kBAAkB,iBAAiB,WAAW,WAAW,iBAAiB,iBAAiB;AACrM,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qDAAqD,YAAY;AACjE;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;ACtOA;AACA;AACA;AACA;;AAEyC;;AAEzC,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,kDAAQ;AACxC;;AAEA;;AAEA,CAAC,EAAC;;;;;;;;;;;;;;;;ACrBiC;;AAEnC,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,+HAA+H;AAC/H;AACA;AACA;;AAEA;AACA,0CAA0C,mDAAO;AACjD;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AC5BF,iEAAe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,8CAA8C;AAC3I;AACA;AACA;AACA,4EAA4E,kDAAkD;AAC9H;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4DAA4D;;AAE3G;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,mEAAmE,eAAe;;AAElF;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;;;;;;;;;;;;;;;ACrLD,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,2HAA2H;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS,iBAAiB;AAC/D;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,0IAAoB;AACpC;AACA;AACA;AACA,iBAAiB;AACjB,2EAA2E,OAAO;AAClF,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AC7HK;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mDAAmD,QAAQ,eAAe,IAAI,SAAS,WAAW,IAAI,SAAS;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kBAAkB,sBAAsB,sBAAsB;AAC3F;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;;;;;;;;;;;;;;;AChGO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;;AAEmC;;AAE5B;;AAEP;AACA;AACA;AACA;AACA,qLAAqL,QAAQ,mBAAmB,OAAO,kFAAkF,mNAAmN;AAC5f;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,4CAAK;AAClE;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;ACvCmC;AACkC;;AAE9B;;AAEhC;AACP;AACA;AACA;;AAEO;;AAEP,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;;AAEzB;AACA;AACA;AACA,0CAA0C,wEAAgB;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,wEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,cAAc,IAAI,iBAAiB;AAC3D;AACA,oBAAoB,eAAe;AACnC;AACA,4EAA4E,MAAM;AAClF;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA,wBAAwB,cAAc,IAAI,iBAAiB;AAC3D;AACA;;AAEA;AACA,qEAAqE,MAAM;AAC3E;AACA;AACA,qDAAqD,aAAa;AAClE;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA,0CAA0C,iBAAiB,cAAc;AACzE;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA,qEAAqE,MAAM;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gEAAgE;AAC/F;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA,kCAAkC,cAAc,IAAI,iBAAiB,iBAAiB;AACtF;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;;AAErB,cAAc;AACd;;AAEA,mCAAmC;AACnC;AACA,iBAAiB,GAAG;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,2DAA2D,aAAa;AACxE,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,SAAS;AACT;;AAEA,oDAAoD,iBAAiB;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA,SAAS,GAAG;;AAEZ;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,4CAA4C,KAAK,8BAA8B;AAChH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,aAAa;AAC5D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA,uCAAuC,4CAAK;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY,iEAAiE,aAAa,0BAA0B,kBAAkB;AAC3K,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA,4GAA4G,OAAO;AACnH;AACA,4EAA4E,iBAAiB;AAC7F;AACA;AACA,iGAAiG,sBAAsB;AACvH;AACA;AACA,6GAA6G,kBAAkB;AAC/H,gFAAgF,cAAc;AAC9F;AACA,kDAAkD,YAAY,QAAQ,aAAa;AACnF,mCAAmC,YAAY,KAAK,aAAa;AACjE;AACA,mBAAmB;;AAEnB,6FAA6F,cAAc,2CAA2C,YAAY,WAAW,YAAY,2BAA2B,KAAK,mCAAmC,kBAAkB;AAC9Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,oCAAoC,YAAY;AAChD,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,KAAK,oCAAoC,KAAK;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kCAAkC,2BAA2B;AAC7D,mEAAmE;AACnE;;AAEA,mCAAmC;AACnC,2BAA2B,GAAG,YAAY;AAC1C;;AAEA,mCAAmC;AACnC,6BAA6B,aAAa;AAC1C;;AAEA,wCAAwC,YAAY;AACpD,+BAA+B;AAC/B,2DAA2D;AAC3D;;AAEA,kCAAkC,2BAA2B;AAC7D,sEAAsE;AACtE;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kCAAkC;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,wEAAgB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qCAAqC,YAAY,GAAG;AAC7F,qEAAqE,YAAY;AACjF,wCAAwC,iEAAiE,YAAY,GAAG;AACxH,wCAAwC,+DAA+D,YAAY,GAAG;AACtH;AACA,6DAA6D,YAAY;AACzE,oCAAoC,6DAA6D,YAAY,GAAG;AAChH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,kDAAkD,iBAAiB,GAAG,YAAY;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;ACjyBA,iEAAe;AACf,OAAO;AACP;AACA;AACA,WAAW;AACX,wBAAwB,eAAe;AACvC,WAAW;AACX;AACA;AACA;AACA;AACA,wJAAwJ;AACxJ,8DAA8D,eAAe,qGAAqG;;AAElL;AACA;AACA;AACA,eAAe;AACf,8BAA8B,OAAO,IAAI,aAAa,WAAW,YAAY,IAAI,QAAQ,IAAI,OAAO;AACpG,eAAe;AACf;AACA;;AAEA,OAAO;AACP,OAAO,EAAC;;;;;;;;;;;;;;;;;ACxBR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuC;AACsB;;AAE7D,iEAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gDAAO;AACtC,kCAAkC,kEAAU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,oBAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,4EAA4E,OAAO;AACnF,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,+EAA+E,oEAAoE;AACnJ;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,gEAAgE,iBAAiB;AACjF,iBAAiB;;AAEjB;;AAEA,0FAA0F,mBAAmB;AAC7G;;AAEA,0FAA0F,mBAAmB;AAC7G;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,8GAA8G,KAAK;AACnH;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,6EAA6E,MAAM;AACnF;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACvIK;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,uBAAuB;AACtD,+BAA+B,8BAA8B;;AAE7D,4BAA4B,SAAS,IAAI,SAAS;;AAElD;AACA,iCAAiC,qCAAqC;AACtE,4BAA4B,OAAO,IAAI,WAAW;AAClD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA8C,UAAU,KAAK,KAAK;AAClE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,+CAA+C,QAAQ,KAAK,KAAK;;AAEjE,0CAA0C,mCAAmC;AAC7E,wCAAwC,iCAAiC;AACzE;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACnOqC;AACc;;AAEnD,iEAAe;AACf,YAAY,cAAc;;AAE1B,uBAAuB,4DAAa;;AAEpC;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB,oDAAQ;AAC5B,SAAS;AACT;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,EAAC;;;;;;;;;;;;;;;ACxBF,iEAAe;AACf,0DAA0D,aAAa,oBAAoB,iBAAiB;AAC5G,8FAA8F,oBAAoB,QAAQ,SAAS,UAAU,WAAW,aAAa,aAAa;AAClL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACpCuC;;AAEzC,iEAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA,sBAAsB;AACtB;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACpByC;;AAE3C,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AChBF;AACA;AACA;AACA;AACO;;AAEP;AACA,8BAA8B;AAC9B,8BAA8B;AAC9B,8BAA8B;AAC9B,8BAA8B;AAC9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC9BA;AACA,OAAO,UAAU,+DAA+D,uBAAuB,EAAE,0DAA0D,4FAA4F,eAAe,wCAAwC,SAAS,GAAG,MAAM,OAAO,QAAQ,EAAE,SAAS,cAAc,oHAAoH,EAAE,SAAS,gCAAgC,yEAAyE,UAAU,cAAc,IAAI,gIAAgI,uDAAuD,OAAO,uBAAuB,iCAAiC,uDAAuD,YAAY,KAAK,2HAA2H,+CAA+C,4CAA4C,IAAI,iJAAiJ,SAAS,mBAAmB,SAAS,EAAE,SAAS,yBAAyB,4BAA4B,2BAA2B,eAAe,eAAe,MAAM,uCAAuC,KAAK,2BAA2B,6GAA6G,SAAS,0BAA0B,WAAW,+CAA+C,gCAAgC,IAAI,2KAA2K,+BAA+B,EAAE,IAAI,+BAA+B,6BAA6B,sCAAsC,KAAK,IAAI,sOAAsO,mDAAmD,UAAU,sBAAsB,6GAA6G,IAAI,+HAA+H,8HAA8H,SAAS,yBAAyB,qBAAqB,YAAY,qBAAqB,KAAK,IAAI,YAAY,2BAA2B,6HAA6H,EAAE,kBAAkB,EAAE,OAAO,KAAK,QAAQ,iBAAiB,+LAA+L,eAAe,iCAAiC,mBAAmB,oBAAoB,uHAAuH,iCAAiC,EAAE,gHAAgH,EAAE,yNAAyN,iCAAiC,EAAE,iKAAiK,iCAAiC,EAAE,wIAAwI,EAAE,kJAAkJ,wBAAwB,aAAa,MAAM,QAAQ,SAAS,UAAU,UAAU,gBAAgB,uBAAuB,6BAA6B,KAAK,EAAE,SAAS,eAAe,MAAM,gDAAgD,6HAA6H,oHAAoH,yBAAyB,EAAE,SAAS,OAAO,OAAO,oDAAoD,yCAAyC,EAAE,yBAAyB,qBAAqB,wBAAwB,2CAA2C,EAAE,wiBAAwiB,cAAc,8CAA8C,4BAA4B,sDAAsD,yEAAyE,EAAE,WAAW,wCAAwC,qBAAqB,0DAA0D,qBAAqB,wDAAwD,qBAAqB,sCAAsC,gDAAgD,eAAe,4EAA4E,2BAA2B,4EAA4E,OAAO,kBAAkB,UAAU,SAAS,6BAA6B,kCAAkC,aAAa,mDAAmD,SAAS,qBAAqB,SAAS,UAAU,4CAA4C,0BAA0B,oCAAoC,qBAAqB,OAAO,YAAY,KAAK,WAAW,MAAM,wBAAwB,gNAAgN,WAAW,WAAW,mBAAmB,kCAAkC,sNAAsN,cAAc,oDAAoD,EAAE,2CAA2C,EAAE,IAAI,iBAAiB,4DAA4D,wBAAwB,yDAAyD,kCAAkC,EAAE,YAAY,kBAAkB,oBAAoB,sBAAsB,8CAA8C,gCAAgC,EAAE,gFAAgF,iDAAiD,gBAAgB,oCAAoC,gBAAgB,mBAAmB,EAAE,uBAAuB,4BAA4B,iCAAiC,2BAA2B,EAAE,GAAG,aAAa,8BAA8B,EAAE,GAAG,aAAa,8BAA8B,EAAE,GAAG,aAAa,OAAO,2GAA2G,4KAA4K,GAAG,wBAAwB,+HAA+H,qBAAqB,EAAE,4CAA4C,wEAAwE,mBAAmB,YAAY,6FAA6F,mDAAmD,cAAc,oBAAoB,cAAc,2DAA2D,EAAE,2IAA2I,EAAE,MAAM,EAAE,+BAA+B,+CAA+C,qDAAqD,wBAAwB,2BAA2B,eAAe,UAAU,gCAAgC,yCAAyC,mBAAmB,4CAA4C,EAAE,iCAAiC,eAAe,0FAA0F,8DAA8D,kBAAkB,sCAAsC,kCAAkC,kBAAkB,mBAAmB,wFAAwF,kBAAkB,kCAAkC,oBAAoB,2DAA2D,EAAE,SAAS,gBAAgB,8GAA8G,cAAc,sBAAsB,QAAQ,iCAAiC,oBAAoB,qCAAqC,6BAA6B,0EAA0E,oDAAoD,YAAY,wCAAwC,QAAQ,gBAAgB,kBAAkB,qCAAqC,cAAc,yEAAyE,OAAO,gCAAgC,oBAAoB,oCAAoC,SAAS,0CAA0C,iEAAiE,sBAAsB,6CAA6C,eAAe,iFAAiF,EAAE,SAAS,0LAA0L,sCAAsC,8DAA8D,EAAE,iDAAiD,qCAAqC,0BAA0B,uCAAuC,iDAAiD,iCAAiC,yCAAyC,6DAA6D,wBAAwB,eAAe,SAAS,0BAA0B,gBAAgB,oCAAoC,OAAO,0FAA0F,GAAG,EAAE,uBAAuB,oCAAoC,EAAE,gCAAgC,GAAG,gDAAgD,EAAE,aAAa,qEAAqE,GAAG,EAAE,uBAAuB,gCAAgC,GAAG,gCAAgC,EAAE,UAAU,sBAAsB,GAAG,EAAE,uBAAuB,iBAAiB,GAAG,gBAAgB,EAAE,WAAW,qEAAqE,GAAG,EAAE,uBAAuB,oCAAoC,GAAG,gCAAgC,EAAE,mBAAmB,qEAAqE,GAAG,EAAE,uBAAuB,sCAAsC,GAAG,+CAA+C,EAAE,cAAc,SAAS,GAAG,EAAE,uBAAuB,eAAe,GAAG,MAAM,EAAE,YAAY,qEAAqE,GAAG,EAAE,uBAAuB,sCAAsC,GAAG,+CAA+C,EAAE,yBAAyB,oHAAoH,EAAE,WAAW,8BAA8B,yHAAyH,EAAE,WAAW,QAAQ,yBAAyB,QAAQ,gCAAgC,0RAA0R,aAAa,mBAAmB,cAAc,qBAAqB,eAAe,uBAAuB,6FAA6F,qBAAqB,kBAAkB,0BAA0B,uGAAuG,cAAc,qBAAqB,mBAAmB,0BAA0B,iBAAiB,0BAA0B,iBAAiB,8CAA8C,+BAA+B,iDAAiD,kBAAkB,0BAA0B,uBAAuB,+BAA+B,yDAAyD,yBAAyB,+BAA+B,kCAAkC,2BAA2B,gCAAgC,EAAE,EAAE,uBAAuB,iDAAiD,IAAI,mEAAmE,oBAAoB,yBAAyB,kCAAkC,2CAA2C,EAAE,eAAe,6BAA6B,sCAAsC,2CAA2C,EAAE,qDAAqD,EAAE,eAAe,6BAA6B,gBAAgB,UAAU,cAAc,EAAE,EAAE,uBAAuB,MAAM,6FAA6F,6BAA6B,sDAAsD,yBAAyB,eAAe,kBAAkB,uBAAuB,EAAE,EAAE,uBAAuB,uBAAuB,0FAA0F,mCAAmC,yBAAyB,WAAW,mBAAmB,oGAAoG,aAAa,qBAAqB,mHAAmH,qBAAqB,qBAAqB,aAAa,qBAAqB,yBAAyB,2IAA2I,EAAE,uHAAuH,0BAA0B,sFAAsF,QAAQ,eAAe,wDAAwD,UAAU,iBAAiB,YAAY,aAAa,SAAS,gBAAgB,gBAAgB,+BAA+B,SAAS,aAAa,eAAe,6BAA6B,SAAS,qBAAqB,kCAAkC,OAAO,yDAAyD,eAAe,0BAA0B,QAAQ,aAAa,4BAA4B,YAAY,GAAG,EAAE,4DAA4D,aAAa,0CAA0C,UAAU,wCAAwC,YAAY,mCAAmC,QAAQ,qEAAqE,SAAS,6GAA6G,kBAAkB,kGAAkG,uCAAuC,wBAAwB,qCAAqC,0BAA0B,6GAA6G,uCAAuC,kCAAkC,qCAAqC,gEAAgE,kBAAkB,uDAAuD,qBAAqB,mEAAmE,qBAAqB,qBAAqB,QAAQ,SAAS,4EAA4E,EAAE,+DAA+D,wBAAwB,WAAW,qBAAqB,gBAAgB,sBAAsB,SAAS,4EAA4E,EAAE,8DAA8D,SAAS,wBAAwB,WAAW,qBAAqB,gBAAgB,uBAAuB,oBAAoB,SAAS,6CAA6C,GAAG,MAAM,OAAO,8DAA8D,SAAS,iBAAiB,2DAA2D,uBAAuB,qHAAqH,QAAQ,oBAAoB,MAAM,gCAAgC,UAAU,WAAW,yCAAyC,uBAAuB,mCAAmC,EAAE,GAAG,EAAE,YAAY,iBAAiB,iCAAiC,kBAAkB,GAAG,kBAAkB,EAAE,yEAAyE,UAAU,+BAA+B,OAAO,QAAQ,qCAAqC,iBAAiB,kBAAkB,iBAAiB,oBAAoB,6BAA6B,EAAE,+HAA+H,kBAAkB,8BAA8B,OAAO,qBAAqB,mHAAmH,0DAA0D,uLAAuL,0CAA0C,uDAAuD,2BAA2B,+BAA+B,MAAM,kCAAkC,2BAA2B,GAAG,sBAAsB,aAAa,EAAE,GAAG,yJAAyJ,YAAY,KAAK,0BAA0B,6DAA6D,YAAY,GAAG,4BAA4B,EAAE,mEAAmE,sGAAsG,OAAO,GAAG,SAAS,4FAA4F,WAAW,sEAAsE,0BAA0B,OAAO,SAAS,oBAAoB,wFAAwF,OAAO,oCAAoC,4CAA4C,WAAW,eAAe,GAAG,EAAE,iCAAiC,+HAA+H,OAAO,YAAY,EAAE,KAAK,MAAM,8CAA8C,KAAK,EAAE,wCAAwC,EAAE,qGAAqG,sBAAsB,gBAAgB,kDAAkD,gBAAgB,SAAS,2BAA2B,8CAA8C,mCAAmC,gCAAgC,8BAA8B,4CAA4C,qIAAqI,oDAAoD,KAAK,iEAAiE,GAAG,MAAM,OAAO,kBAAkB,yBAAyB,UAAU,OAAO,KAAK,yBAAyB,6CAA6C,2BAA2B,YAAY,oBAAoB,uHAAuH,gBAAgB,oHAAoH,uDAAuD,YAAY,QAAQ,mIAAmI,mBAAmB,+CAA+C,6BAA6B,uCAAuC,WAAW,wBAAwB,EAAE,SAAS,iCAAiC,gBAAgB,EAAE,GAAG,OAAO,WAAW,mBAAmB,uBAAuB,OAAO,uBAAuB,YAAY,qBAAqB,OAAO,8BAA8B,uBAAuB,EAAE,OAAO,qHAAqH,wBAAwB,4BAA4B,QAAQ,qEAAqE,mCAAmC,6BAA6B,mDAAmD,6BAA6B,SAAS,mBAAmB,+BAA+B,2BAA2B,8BAA8B,iBAAiB,mCAAmC,cAAc,4DAA4D,gCAAgC,sBAAsB,uBAAuB,yDAAyD,0BAA0B,wBAAwB,iBAAiB,qBAAqB,kKAAkK,mBAAmB,SAAS,aAAa,GAAG,EAAE,GAAG,EAAE,EAAE,kBAAkB,mMAAmM,iCAAiC,8DAA8D,EAAE,+LAA+L,qBAAqB,yDAAyD,sDAAsD,2HAA2H,gCAAgC,0EAA0E,OAAO,oCAAoC,6FAA6F,kBAAkB,mDAAmD,6BAA6B,iIAAiI,uBAAuB,wEAAwE,OAAO,GAAG,sCAAsC,qCAAqC,oPAAoP,OAAO,UAAU,oDAAoD,gCAAgC,wEAAwE,SAAS,yBAAyB,sDAAsD,yMAAyM,EAAE,cAAc,EAAE,UAAU,OAAO,4GAA4G,sBAAsB,sCAAsC,gBAAgB,aAAa,gBAAgB,EAAE,6BAA6B,6DAA6D,2BAA2B,4IAA4I,qBAAqB,WAAW,4DAA4D,6EAA6E,gBAAgB,gEAAgE,SAAS,8BAA8B,WAAW,yDAAyD,8BAA8B,SAAS,iBAAiB,GAAG,EAAE,GAAG,YAAY,GAAG,EAAE,EAAE,EAAE,GAAG,QAAQ,mBAAmB,sNAAsN,kFAAkF,mBAAmB,oBAAoB,yBAAyB,EAAE,iEAAiE,sBAAsB,6BAA6B,obAAob,wBAAwB,qCAAqC,kCAAkC,GAAG,qBAAqB,OAAO,8EAA8E,aAAa,SAAS,qBAAqB,mBAAmB,oBAAoB,YAAY,YAAY,kBAAkB,6BAA6B,WAAW,iBAAiB,UAAU,sBAAsB,kBAAkB,wBAAwB,gBAAgB,4CAA4C,iBAAiB,6BAA6B,gBAAgB,sBAAsB,eAAe,2BAA2B,uBAAuB,2EAA2E,yBAAyB,0BAA0B,wBAAwB,+BAA+B,gBAAgB,4BAA4B,iBAAiB,uBAAuB,WAAW,yBAAyB,iBAAiB,sBAAsB,WAAW,YAAY,UAAU,iBAAiB,WAAW,4BAA4B,YAAY,uBAAuB,mBAAmB,6BAA6B,oBAAoB,wBAAwB,gBAAgB,0BAA0B,iBAAiB,qBAAqB,sBAAsB,gCAAgC,uBAAuB,2BAA2B,yBAAyB,mCAAmC,0BAA0B,8BAA8B,iBAAiB,2GAA2G,eAAe,YAAY,EAAE,kDAAkD,eAAe,gBAAgB,cAAc,qBAAqB,mBAAmB,oBAAoB,kBAAkB,yBAAyB,sBAAsB,sDAAsD,gBAAgB,uBAAuB,iBAAiB,kCAAkC,cAAc,qBAAqB,2CAA2C,wEAAwE,sBAAsB,SAAS,EAAE,GAAG,MAAM,GAAG,EAAE,EAAE,4BAA4B,yEAAyE,gCAAgC,6CAA6C,+EAA+E,cAAc,qCAAqC,0BAA0B,kBAAkB,mCAAmC,wCAAwC,sCAAsC,cAAc,wFAAwF,6EAA6E,+BAA+B,sBAAsB,EAAE,eAAe,6CAA6C,kDAAkD,yBAAyB,+HAA+H,oBAAoB,6GAA6G,IAAI,OAAO,GAAG,4CAA4C,OAAO,cAAc,YAAY,KAAK,OAAO,GAAG,YAAY,gCAAgC,GAAG,cAAc,4CAA4C,YAAY,0BAA0B,sDAAsD,KAAK,GAAG,mCAAmC,8BAA8B,mDAAmD,gBAAgB,EAAE,oBAAoB,EAAE,yBAAyB,IAAI,QAAQ,2BAA2B,eAAe,sBAAsB,SAAS,0CAA0C,SAAS,wBAAwB,wCAAwC,mBAAmB,UAAU,qBAAqB,kDAAkD,0BAA0B,mBAAmB,IAAI,EAAE,oBAAoB,IAAI,EAAE,iBAAiB,IAAI,EAAE,kBAAkB,IAAI,EAAE,0BAA0B,cAAc,GAAG,0BAA0B,eAAe,0BAA0B,eAAe,2BAA2B,8BAA8B,wBAAwB,6BAA6B,EAAE,wBAAwB,OAAO,qDAAqD,oBAAoB,OAAO,mDAAmD,QAAQ,iBAAiB,6rBAA6rB,wOAAwO,0BAA0B,IAAI,8BAA8B,EAAE,kBAAkB,aAAa,gBAAgB,OAAO,yJAAyJ,SAAS,yFAAyF,sBAAsB,uCAAuC,gVAAgV,6MAA6M,0CAA0C,gCAAgC,UAAU,+BAA+B,0GAA0G,8DAA8D,kLAAkL,+BAA+B,SAAS,yJAAyJ,aAAa,+BAA+B,wBAAwB,EAAE,UAAU,8BAA8B,SAAS,0IAA0I,IAAI,oCAAoC,sDAAsD,4BAA4B,kBAAkB,sCAAsC,mBAAmB,wBAAwB,gCAAgC,EAAE,6EAA6E,EAAE,kDAAkD,SAAS,+BAA+B,kHAAkH,uBAAuB,8BAA8B,kCAAkC,+DAA+D,oCAAoC,mCAAmC,8DAA8D,4BAA4B,wFAAwF,6CAA6C,MAAM,4GAA4G,cAAc,yBAAyB,gZAAgZ,kBAAkB,EAAE,cAAc,2DAA2D,IAAI,4PAA4P,uDAAuD,EAAE,GAAG,KAAK,GAAG,6BAA6B,yHAAyH,2BAA2B,EAAE,aAAa,SAAS,iCAAiC,sGAAsG,WAAW,iCAAiC,mBAAmB,WAAW,6EAA6E,UAAU,SAAS,eAAe,aAAa,iBAAiB,EAAE,oDAAoD,uBAAuB,8EAA8E,uFAAuF,WAAW,0BAA0B,wDAAwD,YAAY,WAAW,0JAA0J,gBAAgB,+PAA+P,uBAAuB,kGAAkG,cAAc,4CAA4C,iBAAiB,qDAAqD,kBAAkB,SAAS,yBAAyB,aAAa,0DAA0D,QAAQ,UAAU,GAAG,uTAAuT,eAAe,UAAU,sBAAsB,qDAAqD,mCAAmC,+BAA+B,iCAAiC,qCAAqC,qCAAqC,uCAAuC,+CAA+C,kBAAkB,EAAE,qDAAqD,0EAA0E,EAAE,qBAAqB,qBAAqB,SAAS,EAAE,EAAE,qBAAqB,YAAY,SAAS,KAAK,WAAW,MAAM,EAAE,EAAE,YAAY,EAAE,EAAE,kBAAkB,mDAAmD,QAAQ,6BAA6B,WAAW,+KAA+K,YAAY,mCAAmC,6BAA6B,SAAS,qCAAqC,uFAAuF,6BAA6B,2EAA2E,iBAAiB,MAAM,SAAS,6BAA6B,qCAAqC,8CAA8C,qBAAqB,mEAAmE,0BAA0B,8BAA8B,kDAAkD,6DAA6D,kDAAkD,mCAAmC,MAAM,QAAQ,iBAAiB,mTAAmT,6BAA6B,IAAI,SAAS,wBAAwB,mBAAmB,SAAS,uDAAuD,QAAQ,2DAA2D,2BAA2B,2IAA2I,2EAA2E,sGAAsG,iFAAiF,KAAK,gEAAgE,uDAAuD,IAAI,WAAW,GAAG,gCAAgC,yCAAyC,qEAAqE,wBAAwB,wFAAwF,mFAAmF,wBAAwB,gDAAgD,+DAA+D,yBAAyB,wCAAwC,sBAAsB,iCAAiC,oCAAoC,wEAAwE,sCAAsC,oCAAoC,uEAAuE,wDAAwD,GAAG,KAAK,mBAAmB,qBAAqB,kBAAkB,iBAAiB,uBAAuB,4DAA4D,oBAAoB,aAAa,KAAK,SAAS,EAAE,kBAAkB,qDAAqD,OAAO,4CAA4C,gBAAgB,MAAM,gBAAgB,oDAAoD,mCAAmC,oBAAoB,kIAAkI,uBAAuB,+BAA+B,QAAQ,iBAAiB,kMAAkM,aAAa,sCAAsC,kCAAkC,oKAAoK,sBAAsB,yCAAyC,SAAS,sCAAsC,kCAAkC,qKAAqK,sBAAsB,yCAAyC,yBAAyB,+BAA+B,MAAM,4BAA4B,MAAM,uEAAuE,2GAA2G,kDAAkD,mCAAmC,kDAAkD,IAAI,uCAAuC,MAAM,sDAAsD,iCAAiC,UAAU,sBAAsB,IAAI,QAAQ,iCAAiC,gBAAgB,SAAS,4EAA4E,sBAAsB,SAAS,gCAAgC,oBAAoB,GAAG,yCAAyC,MAAM,kBAAkB,0CAA0C,2BAA2B,sHAAsH,8BAA8B,IAAI,0DAA0D,EAAE,aAAa,kBAAkB,sBAAsB,gBAAgB,wEAAwE,0EAA0E,sBAAsB,QAAQ,4FAA4F,sBAAsB,KAAK,EAAE,IAAI,iDAAiD,cAAc,GAAG,cAAc,WAAW,2EAA2E,kBAAkB,sCAAsC,GAAG,8BAA8B,kBAAkB,kCAAkC,YAAY,oCAAoC,SAAS,EAAE,EAAE,MAAM,EAAE,KAAK,yBAAyB,YAAY,yBAAyB,wBAAwB,SAAS,0CAA0C,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,KAAK,YAAY,iBAAiB,UAAU,GAAG,wBAAwB,GAAG,EAAE,EAAE,MAAM,EAAE,KAAK,GAAG,QAAQ,eAAe,+DAA+D,UAAU,2BAA2B,qBAAqB,OAAO,8CAA8C,QAAQ,sEAAsE,oBAAoB,SAAS,mCAAmC,sIAAsI,SAAS,kBAAkB,uEAAuE,OAAO,eAAe,SAAS,eAAe,uEAAuE,OAAO,eAAe,WAAW,iCAAiC,kIAAkI,OAAO,qJAAqJ,SAAS,kRAAkR,QAAQ,kEAAkE,GAAG,0BAA0B,EAAE,mBAAmB,EAAE,KAAK,YAAY,+CAA+C,kBAAkB,YAAY,IAAI,KAAK,qCAAqC,oBAAoB,UAAU,UAAU,WAAW,KAAK,cAAc,EAAE,gBAAgB,0BAA0B,cAAc,4HAA4H,EAAE,QAAQ,UAAU,SAAS,IAAI,wBAAwB,4CAA4C,wEAAwE,SAAS,oBAAoB,UAAU,iCAAiC,4CAA4C,oEAAoE,gDAAgD,2BAA2B,WAAW,sCAAsC,WAAW,iFAAiF,SAAS,kCAAkC,+BAA+B,wCAAwC,yCAAyC,gCAAgC,sCAAsC,gCAAgC,qIAAqI,iBAAiB,qBAAqB,KAAK,KAAK,oDAAoD,oDAAoD,mEAAmE,6DAA6D,WAAW,YAAY,IAAI,oCAAoC,kDAAkD,OAAO,WAAW,wCAAwC,gCAAgC,YAAY,WAAW,wCAAwC,WAAW,QAAQ,gBAAgB,EAAE,sDAAsD,OAAO,UAAU,WAAW,WAAW,gCAAgC,WAAW,UAAU,WAAW,WAAW,+BAA+B,aAAa,KAAK,UAAU,WAAW,WAAW,oCAAoC,aAAa,mBAAmB,oBAAoB,kCAAkC,uBAAuB,mCAAmC,EAAE,GAAG,+FAA+F,EAAE,oFAAoF,aAAa,8CAA8C,yBAAyB,mBAAmB,eAAe,qEAAqE,SAAS,WAAW,YAAY,2CAA2C,sBAAsB,6DAA6D,mBAAmB,eAAe,+BAA+B,oFAAoF,qCAAqC,sBAAsB,mBAAmB,cAAc,2CAA2C,+CAA+C,2BAA2B,mBAAmB,cAAc,iDAAiD,SAAS,qBAAqB,2BAA2B,SAAS,cAAc,qBAAqB,qDAAqD,MAAM,IAAI,oBAAoB,SAAS,OAAO,2CAA2C,+IAA+I,QAAQ,cAAc,eAAe,mBAAmB,kCAAkC,+BAA+B,oCAAoC,kDAAkD,sDAAsD,eAAe,WAAW,EAAE,IAAI,EAAE,EAAE,wEAAwE,WAAW,gGAAgG,gBAAgB,8FAA8F,EAAE,IAAI,mBAAmB,4FAA4F,4BAA4B,kBAAkB,8BAA8B,6JAA6J,6BAA6B,6CAA6C,qCAAqC,OAAO,yBAAyB,EAAE,SAAS,gBAAgB,oCAAoC,+EAA+E,kBAAkB,yCAAyC,gFAAgF,0FAA0F,kBAAkB,oCAAoC,iCAAiC,gCAAgC,kGAAkG,SAAS,oCAAoC,oIAAoI,SAAS,oCAAoC,eAAe,SAAS,6BAA6B,qBAAqB,kIAAkI,EAAE,uCAAuC,MAAM,mCAAmC,8DAA8D,KAAK,gDAAgD,yDAAyD,KAAK,iEAAiE,UAAU,QAAQ,eAAe,2LAA2L,kFAAkF,mFAAmF,aAAa,oGAAoG,eAAe,SAAS,oBAAoB,6BAA6B,+BAA+B,wBAAwB,qBAAqB,8BAA8B,oEAAoE,iBAAiB,gBAAgB,0BAA0B,uBAAuB,EAAE,GAAG,OAAO,GAAG,OAAO,YAAY,EAAE,GAAG,OAAO,GAAG,eAAe,EAAE,oDAAoD,gBAAgB,EAAE,6BAA6B,EAAE,kCAAkC,EAAE,GAAG,gBAAgB,EAAE,6BAA6B,EAAE,kCAAkC,EAAE,GAAG,EAAE,mBAAmB,EAAE,2FAA2F,EAAE,eAAe,4JAA4J,oBAAoB,oBAAoB,2IAA2I,wEAAwE,oDAAoD,sBAAsB,4DAA4D,EAAE,YAAY,aAAa,oDAAoD,oFAAoF,sCAAsC,eAAe,wBAAwB,mBAAmB,sDAAsD,EAAE,YAAY,aAAa,oDAAoD,qBAAqB,mEAAmE,qDAAqD,+CAA+C,+DAA+D,qDAAqD,eAAe,qBAAqB,wBAAwB,wBAAwB,WAAW,iBAAiB,iBAAiB,qCAAqC,mBAAmB,gDAAgD,EAAE,EAAE,0BAA0B,mBAAmB,oGAAoG,sBAAsB,mBAAmB,EAAE,wCAAwC,EAAE,4BAA4B,wEAAwE,EAAE,YAAY,aAAa,oDAAoD,uBAAuB,wDAAwD,oFAAoF,wFAAwF,eAAe,8BAA8B,yBAAyB,kEAAkE,EAAE,YAAY,aAAa,oDAAoD,kBAAkB,sDAAsD,+DAA+D,iHAAiH,eAAe,2BAA2B,mBAAmB,2BAA2B,SAAS,YAAY,qDAAqD,oDAAoD,gBAAgB,kCAAkC,IAAI,6BAA6B,iBAAiB,yBAAyB,SAAS,mDAAmD,gCAAgC,IAAI,2BAA2B,oBAAoB,4BAA4B,SAAS,sDAAsD,mCAAmC,IAAI,8BAA8B,uBAAuB,iGAAiG,iBAAiB,6BAA6B,4BAA4B,qCAAqC,iBAAiB,kBAAkB,eAAe,OAAO,iEAAiE,mCAAmC,YAAY,6FAA6F,WAAW,gMAAgM,uJAAuJ,qKAAqK,qBAAqB,6BAA6B,oBAAoB,+BAA+B,8CAA8C,oMAAoM,kBAAkB,0MAA0M,qBAAqB,2RAA2R,gGAAgG,EAAE,GAAG,eAAe,SAAS,wBAAwB,GAAG,EAAE,KAAK,qBAAqB,kCAAkC,kCAAkC,YAAY,kBAAkB,+HAA+H,kBAAkB,8CAA8C,8JAA8J,uCAAuC,sBAAsB,OAAO,qHAAqH,iBAAiB,sDAAsD,yBAAyB,2CAA2C,iBAAiB,4CAA4C,6DAA6D,kBAAkB,4GAA4G,mBAAmB,IAAI,kCAAkC,mCAAmC,mEAAmE,mBAAmB,mBAAmB,mDAAmD,aAAa,UAAU,MAAM,SAAS,kBAAkB,wBAAwB,4BAA4B,oCAAoC,kLAAkL,uBAAuB,0DAA0D,kBAAkB,qKAAqK,uBAAuB,6BAA6B,mBAAmB,IAAI,wBAAwB,+BAA+B,oCAAoC,oEAAoE,uBAAuB,kBAAkB,wJAAwJ,sBAAsB,kBAAkB,mBAAmB,mHAAmH,EAAE,iBAAiB,YAAY,aAAa,sBAAsB,eAAe,mBAAmB,qCAAqC,0BAA0B,wEAAwE,4BAA4B,wBAAwB,gEAAgE,4BAA4B,oBAAoB,8DAA8D,+OAA+O,oBAAoB,kBAAkB,iEAAiE,iCAAiC,sOAAsO,uBAAuB,2BAA2B,+BAA+B,4DAA4D,mBAAmB,gDAAgD,wBAAwB,qDAAqD,6BAA6B,kFAAkF,sBAAsB,sEAAsE,oBAAoB,gDAAgD,cAAc,oBAAoB,4FAA4F,mBAAmB,sDAAsD,WAAW,yDAAyD,WAAW,6BAA6B,iBAAiB,+KAA+K,iBAAiB,6DAA6D,mBAAmB,oEAAoE,oBAAoB,uBAAuB,uBAAuB,uBAAuB,oCAAoC,aAAa,8BAA8B,MAAM,cAAc,yEAAyE,8CAA8C,kEAAkE,GAAG,YAAY,sBAAsB,IAAI,mBAAmB,uBAAuB,oCAAoC,aAAa,8BAA8B,MAAM,6BAA6B,qEAAqE,yCAAyC,kEAAkE,GAAG,YAAY,sBAAsB,IAAI,sBAAsB,uGAAuG,sBAAsB,kGAAkG,sBAAsB,uCAAuC,uBAAuB,8BAA8B,sBAAsB,eAAe,wBAAwB,OAAO,8KAA8K,iBAAiB,8GAA8G,OAAO,KAAK,kQAAkQ,MAAM,8CAA8C,6IAA6I,wHAAwH,+DAA+D,+GAA+G,qFAAqF,QAAQ,oIAAoI,MAAM,UAAU,sGAAsG,2DAA2D,SAAS,0KAA0K,SAAS,qSAAqS,aAAa,gBAAgB,kCAAkC,mCAAmC,sBAAsB,kCAAkC,mCAAmC,oBAAoB,kCAAkC,mCAAmC,sBAAsB,kCAAkC,oCAAoC,gBAAgB,SAAS,0FAA0F,oBAAoB,KAAK,oCAAoC,oCAAoC,eAAe,mCAAmC,uBAAuB,SAAS,wGAAwG,gDAAgD,gDAAgD,2BAA2B,kBAAkB,2BAA2B,cAAc,wIAAwI,+HAA+H,EAAE,cAAc,yDAAyD,6HAA6H,oBAAoB,cAAc,qGAAqG,EAAE,GAAG,2CAA2C,oDAAoD,oKAAoK,eAAe,yCAAyC,kCAAkC,QAAQ,EAAE,MAAM,6BAA6B,oBAAoB,sJAAsJ,gCAAgC,MAAM,0BAA0B,oBAAoB,KAAK,oDAAoD,OAAO,GAAG,MAAM,UAAU,+CAA+C,aAAa,sEAAsE,OAAO,0BAA0B,MAAM,OAAO,UAAU,0BAA0B,2BAA2B,oCAAoC,EAAE,yBAAyB,YAAY,qBAAqB,cAAc,oBAAoB,gHAAgH,EAAE,SAAS,oBAAoB,wDAAwD,gBAAgB,2DAA2D,kCAAkC,4CAA4C,EAAE,KAAK,2CAA2C,2FAA2F,EAAE,GAAG,EAAE,KAAK,OAAO,UAAU,qDAAqD,8EAA8E,EAAE,KAAK,SAAS,oBAAoB,2BAA2B,cAAc,+DAA+D,oEAAoE,oBAAoB,+EAA+E,SAAS,uBAAuB,kEAAkE,2CAA2C,oDAAoD,uDAAuD,+CAA+C,gEAAgE,iCAAiC,uBAAuB,+DAA+D,SAAS,aAAa,+BAA+B,4CAA4C,WAAW,gHAAgH,SAAS,2BAA2B,iCAAiC,wBAAwB,yCAAyC,kCAAkC,gHAAgH,uBAAuB,oCAAoC,8MAA8M,6BAA6B,qFAAqF,2BAA2B,4DAA4D,sBAAsB,qBAAqB,2BAA2B,kBAAkB,SAAS,aAAa,oCAAoC,SAAS,SAAS,4EAA4E,2BAA2B,kEAAkE,kCAAkC,yDAAyD,KAAK,QAAQ,kBAAkB,EAAE,8DAA8D,0IAA0I,2CAA2C,+BAA+B,oBAAoB,YAAY,sEAAsE,aAAa,uCAAuC,oEAAoE,mCAAmC,aAAa,SAAS,iBAAiB,mDAAmD,6BAA6B,+BAA+B,iCAAiC,sBAAsB,8DAA8D,4BAA4B,OAAO,kBAAkB,mBAAmB,2BAA2B,oBAAoB,wBAAwB,qBAAqB,eAAe,QAAQ,6DAA6D,UAAU,sBAAsB,kBAAkB,uDAAuD,WAAW,2BAA2B,YAAY,0BAA0B,kBAAkB,kCAAkC,+DAA+D,SAAS,iBAAiB,yBAAyB,oBAAoB,uCAAuC,mBAAmB,6DAA6D,mBAAmB,2BAA2B,gBAAgB,+BAA+B,qCAAqC,qBAAqB,KAAK,SAAS,EAAE,mDAAmD,QAAQ,SAAS,kBAAkB,iEAAiE,SAAS,eAAe,oCAAoC,aAAa,cAAc,YAAY,mBAAmB,gBAAgB,oDAAoD,cAAc,qBAAqB,wBAAwB,uDAAuD,2BAA2B,sDAAsD,wBAAwB,4DAA4D,mBAAmB,mDAAmD,+BAA+B,kMAAkM,cAAc,+DAA+D,sBAAsB,oDAAoD,mBAAmB,mDAAmD,wBAAwB,kFAAkF,8BAA8B,gDAAgD,mCAAmC,sDAAsD,gBAAgB,0CAA0C,6BAA6B,GAAG,EAAE,GAAG,4CAA4C,iCAAiC,mDAAmD,mCAAmC,yDAAyD,gBAAgB,6CAA6C,6BAA6B,GAAG,EAAE,GAAG,+CAA+C,YAAY,gDAAgD,oCAAoC,2CAA2C,UAAU,0DAA0D,oBAAoB,yBAAyB,iFAAiF,0BAA0B,yBAAyB,uBAAuB,SAAS,2HAA2H,SAAS,UAAU,sBAAsB,YAAY,gEAAgE,oBAAoB,mCAAmC,eAAe,qBAAqB,cAAc,0BAA0B,aAAa,gEAAgE,4BAA4B,6BAA6B,iDAAiD,yCAAyC,wBAAwB,oBAAoB,kGAAkG,mDAAmD,uCAAuC,sDAAsD,0EAA0E,cAAc,iCAAiC,EAAE,oDAAoD,YAAY,wCAAwC,cAAc,2BAA2B,qFAAqF,EAAE,oBAAoB,SAAS,MAAM,kBAAkB,uBAAuB,iBAAiB,+BAA+B,2BAA2B,EAAE,sDAAsD,gBAAgB,EAAE,qCAAqC,gBAAgB,EAAE,mCAAmC,uBAAuB,2BAA2B,uBAAuB,mEAAmE,gBAAgB,wBAAwB,0GAA0G,qHAAqH,+QAA+Q,uFAAuF,2BAA2B,MAAM,EAAE,EAAE,gBAAgB,YAAY,KAAK,KAAK,2BAA2B,QAAQ,gBAAgB,YAAY,KAAK,6DAA6D,OAAO,QAAQ,mBAAmB,EAAE,qBAAqB,+CAA+C,OAAO,GAAG,mCAAmC,EAAE,YAAY,8BAA8B,EAAE,eAAe,aAAa,2DAA2D,gDAAgD,yDAAyD,gCAAgC,+EAA+E,EAAE,kCAAkC,mDAAmD,kCAAkC,gKAAgK,iBAAiB,iCAAiC,sDAAsD,KAAK,GAAG,iCAAiC,SAAS,EAAE,GAAG,MAAM,GAAG,cAAc,EAAE,sBAAsB,2BAA2B,0BAA0B,iEAAiE,kBAAkB,yCAAyC,sDAAsD,6BAA6B,GAAG,SAAS,mHAAmH,GAAG,EAAE,0EAA0E,QAAQ,gCAAgC,+FAA+F,EAAE,OAAO,mDAAmD,4GAA4G,EAAE,kBAAkB,eAAe,QAAQ,oCAAoC,kBAAkB,sJAAsJ,8GAA8G,GAAG,WAAW,eAAe,OAAO,8HAA8H,6EAA6E,GAAG,+KAA+K,iBAAiB,iEAAiE,iBAAiB,4BAA4B,EAAE,KAAK,sCAAsC,EAAE,qBAAqB,6BAA6B,sBAAsB,wBAAwB,mBAAmB,SAAS,kBAAkB,sBAAsB,SAAS,0BAA0B,SAAS,MAAM,4KAA4K,SAAS,mBAAmB,uCAAuC,GAAG,kBAAkB,kCAAkC,QAAQ,qCAAqC,oBAAoB,gCAAgC,uDAAuD,kFAAkF,yDAAyD,aAAa,+BAA+B,2DAA2D,kBAAkB,4BAA4B,OAAO,mBAAmB,4JAA4J,4CAA4C,yNAAyN,gBAAgB,uBAAuB,kBAAkB,gBAAgB,MAAM,gIAAgI,sEAAsE,OAAO,yCAAyC,kFAAkF,kBAAkB,UAAU,IAAI,eAAe,EAAE,iBAAiB,GAAG,gDAAgD,kHAAkH,SAAS,+BAA+B,SAAS,iEAAiE,aAAa,GAAG,OAAO,+GAA+G,sBAAsB,qDAAqD,oCAAoC,0BAA0B,SAAS,KAAK,MAAM,yJAAyJ,2CAA2C,mDAAmD,gCAAgC,oCAAoC,gCAAgC,uCAAuC,uDAAuD,MAAM,oEAAoE,2BAA2B,EAAE,iBAAiB,sBAAsB,EAAE,uCAAuC,kBAAkB,EAAE,uBAAuB,EAAE,0CAA0C,qFAAqF,EAAE,kEAAkE,EAAE,4DAA4D,EAAE,yDAAyD,iBAAiB,gEAAgE,EAAE,kBAAkB,oBAAoB,iCAAiC,uEAAuE,IAAI,oFAAoF,qEAAqE,cAAc,iCAAiC,qCAAqC,WAAW,uCAAuC,iBAAiB,4DAA4D,wCAAwC,8DAA8D,yBAAyB,SAAS,mCAAmC,WAAW,+BAA+B,aAAa,SAAS,mCAAmC,qBAAqB,kBAAkB,oCAAoC,SAAS,qBAAqB,WAAW,8BAA8B,yIAAyI,SAAS,+BAA+B,aAAa,UAAU,aAAa,mCAAmC,wCAAwC,6CAA6C,UAAU,wCAAwC,iBAAiB,WAAW,EAAE,aAAa,0CAA0C,+CAA+C,iCAAiC,iDAAiD,wCAAwC,6CAA6C,UAAU,kEAAkE,2DAA2D,4BAA4B,SAAS,UAAU,wDAAwD,6CAA6C,uCAAuC,0CAA0C,mDAAmD,WAAW,kBAAkB,0BAA0B,OAAO,+BAA+B,wEAAwE,wBAAwB,iBAAiB,8EAA8E,wBAAwB,6BAA6B,OAAO,8CAA8C,GAAG,EAAE,sCAAsC,uBAAuB,4BAA4B,SAAS,MAAM,kBAAkB,iBAAiB,qVAAqV,4OAA4O,iBAAiB,qEAAqE,iBAAiB,KAAK,mBAAmB,oBAAoB,qBAAqB,4CAA4C,kBAAkB,iBAAiB,+BAA+B,WAAW,cAAc,YAAY,mBAAmB,gBAAgB,kCAAkC,kBAAkB,oCAAoC,sBAAsB,yEAAyE,YAAY,iBAAiB,kIAAkI,qCAAqC,eAAe,sBAAsB,mBAAmB,0FAA0F,4BAA4B,4BAA4B,4CAA4C,6CAA6C,YAAY,yBAAyB,+BAA+B,8DAA8D,kBAAkB,2BAA2B,oCAAoC,cAAc,YAAY,iCAAiC,oCAAoC,sFAAsF,eAAe,2BAA2B,yCAAyC,gBAAgB,SAAS,sDAAsD,kCAAkC,oCAAoC,SAAS,iCAAiC,gBAAgB,gDAAgD,cAAc,QAAQ,+DAA+D,WAAW,YAAY,WAAW,0EAA0E,+HAA+H,aAAa,SAAS,YAAY,WAAW,4FAA4F,SAAS,SAAS,mCAAmC,sCAAsC,0BAA0B,iDAAiD,+BAA+B,8DAA8D,sCAAsC,WAAW,sBAAsB,8EAA8E,KAAK,uBAAuB,8BAA8B,MAAM,qCAAqC,cAAc,2EAA2E,0BAA0B,sBAAsB,oEAAoE,kBAAkB,8BAA8B,4BAA4B,qBAAqB,wDAAwD,mBAAmB,8BAA8B,oEAAoE,0BAA0B,yBAAyB,mCAAmC,0BAA0B,wDAAwD,SAAS,cAAc,+BAA+B,2BAA2B,yBAAyB,+BAA+B,SAAS,0BAA0B,oCAAoC,2BAA2B,kCAAkC,yDAAyD,SAAS,eAAe,sEAAsE,yBAAyB,SAAS,iEAAiE,SAAS,iBAAiB,iCAAiC,gBAAgB,2BAA2B,qBAAqB,8BAA8B,aAAa,8CAA8C,mBAAmB,uBAAuB,kFAAkF,kBAAkB,0BAA0B,mBAAmB,mDAAmD,qBAAqB,WAAW,kBAAkB,yBAAyB,aAAa,SAAS,oBAAoB,+BAA+B,gBAAgB,mBAAmB,gBAAgB,iBAAiB,0BAA0B,oHAAoH,iCAAiC,yCAAyC,2BAA2B,mBAAmB,8BAA8B,aAAa,sIAAsI,UAAU,SAAS,cAAc,qBAAqB,IAAI,+CAA+C,OAAO,gBAAgB,OAAO,wFAAwF,cAAc,GAAG,oBAAoB,WAAW,GAAG,+CAA+C,iBAAiB,2CAA2C,cAAc,uJAAuJ,gBAAgB,wCAAwC,eAAe,EAAE,0IAA0I,+DAA+D,aAAa,UAAU,OAAO,IAAI,8FAA8F,2EAA2E,OAAO,oDAAoD,gDAAgD,qEAAqE,OAAO,UAAU,YAAY,UAAU,sBAAsB,MAAM,oBAAoB,4CAA4C,eAAe,EAAE,kJAAkJ,+DAA+D,aAAa,cAAc,WAAW,IAAI,4CAA4C,+EAA+E,WAAW,0BAA0B,gDAAgD,yEAAyE,WAAW,UAAU,YAAY,UAAU,sBAAsB,MAAM,uBAAuB,EAAE,WAAW,4CAA4C,mBAAmB,EAAE,6CAA6C,kCAAkC,IAAI,QAAQ,GAAG,uBAAuB,2KAA2K,mBAAmB,uBAAuB,gCAAgC,0DAA0D,wCAAwC,cAAc,WAAW,sDAAsD,mBAAmB,EAAE,gGAAgG,4KAA4K,iBAAiB,SAAS,2YAA2Y,OAAO,8DAA8D,UAAU,sHAAsH,4BAA4B,qDAAqD,cAAc,gBAAgB,uBAAuB,KAAK,SAAS,EAAE,kBAAkB,oBAAoB,mBAAmB,aAAa,WAAW,EAAE,EAAE,OAAO,GAAG,EAAE,GAAG,KAAK,KAAK,EAAE,gEAAgE,WAAW,KAAK,IAAI,cAAc,4BAA4B,8LAA8L,QAAQ,UAAU,sBAAsB,IAAI,IAAI,MAAM,OAAO,+CAA+C,SAAS,wBAAwB,MAAM,sFAAsF,4DAA4D,iEAAiE,cAAc,2BAA2B,YAAY,0BAA0B,kDAAkD,mEAAmE,gCAAgC,IAAI,QAAQ,eAAe,wEAAwE,2FAA2F,sBAAsB,KAAK,EAAE,sGAAsG,OAAO,IAAI,qBAAqB,6BAA6B,6BAA6B,iEAAiE,mDAAmD,aAAa,OAAO,GAAG,aAAa,yIAAyI,OAAO,KAAK,KAAK,qEAAqE,IAAI,sEAAsE,qCAAqC,uBAAuB,8CAA8C,GAAG,EAAE,mDAAmD,yCAAyC,0BAA0B,SAAS,8JAA8J,MAAM,cAAc,sEAAsE,SAAS,uBAAuB,MAAM,+BAA+B,+KAA+K,2CAA2C,GAAG,sWAAsW,KAAK,yBAAyB,cAAc,0FAA0F,SAAS,eAAe,gBAAgB,UAAU,YAAY,aAAa,GAAG,EAAE,gCAAgC,mBAAmB,mBAAmB,yBAAyB,EAAE,OAAO,8CAA8C,WAAW,gBAAgB,UAAU,YAAY,aAAa,GAAG,EAAE,oDAAoD,OAAO,oDAAoD,6BAA6B,2CAA2C,uFAAuF,wEAAwE,SAAS,yBAAyB,iCAAiC,4BAA4B,qBAAqB,yCAAyC,iCAAiC,WAAW,gGAAgG,iCAAiC,OAAO,uGAAuG,oBAAoB,oDAAoD,gCAAgC,iCAAiC,oBAAoB,sEAAsE,oBAAoB,0CAA0C,0BAA0B,sEAAsE,kCAAkC,2KAA2K,8EAA8E,gCAAgC,kCAAkC,yFAAyF,kGAAkG,4EAA4E,KAAK,wBAAwB,4EAA4E,2BAA2B,iGAAiG,sBAAsB,WAAW,6CAA6C,SAAS,4BAA4B,EAAE,uBAAuB,iEAAiE,gEAAgE,OAAO,iEAAiE,2BAA2B,sCAAsC,uBAAuB,qEAAqE,OAAO,eAAe,YAAY,6BAA6B,wEAAwE,OAAO,gHAAgH,OAAO,sCAAsC,uDAAuD,qNAAqN,OAAO,eAAe,EAAE,WAAW,cAAc,iBAAiB,mDAAmD,2FAA2F,gBAAgB,oFAAoF,cAAc,qFAAqF,iCAAiC,qBAAqB,sBAAsB,8FAA8F,OAAO,QAAQ,EAAE,KAAK,2BAA2B,wCAAwC,sBAAsB,UAAU,QAAQ,mBAAmB,wCAAwC,wCAAwC,uCAAuC,qBAAqB,8BAA8B,YAAY,YAAY,WAAW,cAAc,SAAS,EAAE,yBAAyB,EAAE,SAAS,cAAc,iBAAiB,4CAA4C,GAAG,8CAA8C,wBAAwB,kFAAkF,EAAE,kBAAkB,+BAA+B,yBAAyB,SAAS,6BAA6B,EAAE,wDAAwD,SAAS,uGAAuG,wBAAwB,yBAAyB,mBAAmB,SAAS,uBAAuB,EAAE,gDAAgD,uDAAuD,mKAAmK,4BAA4B,yEAAyE,wCAAwC,WAAW,yEAAyE,KAAK,+BAA+B,aAAa,OAAO,sBAAsB,gBAAgB,EAAE,0FAA0F,+EAA+E,wDAAwD,8BAA8B,kBAAkB,8BAA8B,eAAe,mCAAmC,0CAA0C,MAAM,4CAA4C,uDAAuD,8DAA8D,0CAA0C,8BAA8B,yGAAyG,EAAE,gCAAgC,qBAAqB,0CAA0C,MAAM,4CAA4C,uDAAuD,sEAAsE,EAAE,mCAAmC,sBAAsB,MAAM,8BAA8B,0EAA0E,EAAE,+BAA+B,WAAW,kBAAkB,6CAA6C,aAAa,0BAA0B,iBAAiB,sCAAsC,iBAAiB,sCAAsC,wBAAwB,0BAA0B,qCAAqC,2DAA2D,gBAAgB,8DAA8D,qEAAqE,SAAS,qBAAqB,2EAA2E,8CAA8C,gEAAgE,+DAA+D,4DAA4D,gCAAgC,qBAAqB,YAAY,kBAAkB,iDAAiD,OAAO,mDAAmD,qBAAqB,WAAW,gGAAgG,sBAAsB,6BAA6B,QAAQ,wHAAwH,EAAE,+BAA+B,WAAW,4FAA4F,EAAE,QAAQ,2BAA2B,wBAAwB,gEAAgE,yBAAyB,aAAa,EAAE,sBAAsB,2DAA2D,QAAQ,kEAAkE,wCAAwC,yDAAyD,wDAAwD,SAAS,MAAM,+BAA+B,kBAAkB,EAAE,2BAA2B,aAAa,qCAAqC,eAAe,wBAAwB,OAAO,WAAW,GAAG,gEAAgE,WAAW,KAAK,eAAe,qBAAqB,wFAAwF,QAAQ,eAAe,0BAA0B,wFAAwF,oBAAoB,UAAU,gBAAgB,kBAAkB,qBAAqB,6BAA6B,SAAS,aAAa,oBAAoB,aAAa,6BAA6B,iBAAiB,wBAAwB,iBAAiB,sBAAsB,iBAAiB,sCAAsC,mBAAmB,0DAA0D,QAAQ,iBAAiB,uDAAuD,eAAe,sCAAsC,gBAAgB,WAAW,wCAAwC,qBAAqB,kBAAkB,qBAAqB,iCAAiC,GAAG,eAAe,kCAAkC,gBAAgB,+GAA+G,qCAAqC,qBAAqB,sBAAsB,sEAAsE,uEAAuE,YAAY,YAAY,yEAAyE,cAAc,mDAAmD,EAAE,0CAA0C,EAAE,KAAK,QAAQ,mBAAmB,gFAAgF,uBAAuB,4DAA4D,wBAAwB,sCAAsC,6BAA6B,cAAc,kBAAkB,sEAAsE,gDAAgD,QAAQ,cAAc,WAAW,WAAW,EAAE,OAAO,KAAK,KAAK,QAAQ,YAAY,eAAe,IAAI,8CAA8C,aAAa,GAAG,mBAAmB,MAAM,+CAA+C,aAAa,GAAG,OAAO,gVAAgV,+EAA+E,SAAS,kiBAAkiB,OAAO,4DAA4D,QAAQ,0FAA0F,SAAS,kIAAkI,QAAQ,wJAAwJ,oIAAoI,8IAA8I,o/DAAo/D,OAAO,6FAA6F,YAAY,gVAAgV,KAAK,2DAA2D,UAAU,4GAA4G,aAAa,6GAA6G,YAAY,8DAA8D,OAAO,wLAAwL,QAAQ,4MAA4M,OAAO,wCAAwC,gGAAgG,iBAAiB,sGAAsG,mBAAmB,4aAA4a,6BAA6B,OAAO,8EAA8E,6RAA6R,+CAA+C,GAAG,IAAI,6CAA6C,yDAAyD,cAAc,uHAAuH,2CAA2C,WAAW,mpBAAmpB,OAAO,uFAAuF,QAAQ,kBAAkB,wGAAwG,uDAAuD,GAAG,mBAAmB,oBAAoB,gBAAgB,iEAAiE,6BAA6B,uHAAuH,gBAAgB,EAAE,oBAAoB,cAAc,6BAA6B,GAAG,0BAA0B,6DAA6D,QAAQ,sBAAsB,uEAAuE,aAAa,sCAAsC,UAAU,kBAAkB,SAAS,kBAAkB,aAAa,mBAAmB,mBAAmB,+BAA+B,qEAAqE,4DAA4D,mBAAmB,kBAAkB,aAAa,gDAAgD,QAAQ,eAAe,YAAY,UAAU,iDAAiD,8CAA8C,aAAa,sCAAsC,aAAa,MAAM,0BAA0B,gCAAgC,aAAa,kBAAkB,aAAa,gEAAgE,EAAE,qVAAqV,oBAAoB,wFAAwF,OAAO,gCAAgC,+BAA+B,GAAG,EAAE,8BAA8B,yBAAyB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,oBAAoB,EAAE,GAAG,UAAU,EAAE,uFAAuF,oBAAoB,qCAAqC,mDAAmD,+BAA+B,wRAAwR,2BAA2B,SAAS,eAAe,qCAAqC,mDAAmD,EAAE,aAAa,gBAAgB,0DAA0D,gEAAgE,kBAAkB,uCAAuC,kBAAkB,EAAE,EAAE,GAAG,EAAE,GAAG,OAAO,EAAE,kCAAkC,wBAAwB,kFAAkF,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,mCAAmC,kBAAkB,aAAa,WAAW,WAAW,wFAAwF,WAAW,+DAA+D,YAAY,WAAW,cAAc,OAAO,WAAW,gBAAgB,yBAAyB,iBAAiB,YAAY,aAAa,eAAe,8BAA8B,GAAG,EAAE,OAAO,wEAAwE,mCAAmC,KAAK,UAAU,iBAAiB,+HAA+H,iBAAiB,yCAAyC,eAAe,8FAA8F,EAAE,qXAAqX,yCAAyC,UAAU,+CAA+C,WAAW,aAAa,iLAAiL,wDAAwD,ugBAAugB,kUAAkU,YAAY,oBAAoB,uIAAuI,SAAS,gBAAgB,YAAY,uDAAuD,iBAAiB,kdAAkd,mBAAmB,aAAa,OAAO,mIAAmI,WAAW,gFAAgF,WAAW,oCAAoC,YAAY,mJAAmJ,WAAW,4BAA4B,WAAW,sOAAsO,UAAU,UAAU,iCAAiC,0EAA0E,sEAAsE,IAAI,WAAW,wCAAwC,gaAAga,6CAA6C,4CAA4C,uDAAuD,4DAA4D,GAAG,EAAE,mDAAmD,iCAAiC,EAAE,UAAU,YAAY,GAAG,EAAE,4BAA4B,yEAAyE,GAAG,QAAQ,8DAA8D,QAAQ,GAAG,aAAa,uFAAuF,oCAAoC,sFAAsF,sBAAsB,mCAAmC,UAA4B;AAChi9H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAC6C;AACsB;AACA;AACM;;AAElE;;AAEP;AACA,iDAAiD,eAAe;AAChE,MAAM,IAAI;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,sDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,aAAa;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4EAAW;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4EAAW;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,kFAAc;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;;AAEO;;AAEP,kBAAkB,oBAAoB,IAAI;AAC1C;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;;AAEiC;AACkE;AACV;;AAElF;;AAEP;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,yBAAyB,mEAAK;;AAE9B,sCAAsC,wEAAkB;AACxD;AACA,+BAA+B,wEAAkB;AACjD;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB;;AAEvB,4BAA4B,0CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,gCAAgC,GAAG,oEAAM,mBAAmB;AAC5D,oCAAoC;AACpC,iBAAiB;AACjB;AACA,0BAA0B,uEAAS;AACnC,iBAAiB;AACjB,0BAA0B;AAC1B;AACA,aAAa;AACb;AACA,yBAAyB;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA,yDAAyD,4EAA4E;AACrI,qDAAqD;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,uDAAuD,MAAM;AAC7D,yDAAyD,MAAM;AAC/D,oCAAoC,MAAM;AAC1C,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4CAA4C,WAAW,oBAAoB,GAAG;AAC9E,yCAAyC,MAAM,4BAA4B;AAC3E,2CAA2C,MAAM;AACjD;AACA,yBAAyB;AACzB,iCAAiC,MAAM,yCAAyC;AAChF;AACA,4CAA4C;AAC5C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;;AAEsC;AACA;AACI;AACmB;AACC;AACJ;AACQ;AACJ;AACY;AACR;;AAE3D;;AAEP;AACA,qBAAqB,WAAW;AAChC,MAAM,IAAI;AACV;AACA,qBAAqB,8CAAM,GAAG,yEAAyE,uGAAuG;AAC9M,0BAA0B,sEAAkB;AAC5C,wBAAwB,sEAAM,GAAG,kCAAkC;AACnE,sBAAsB,kEAAI,GAAG,oDAAoD;AACjF,wBAAwB,sEAAM,GAAG,sBAAsB;AACvD,gEAAgE,kFAAc,GAAG,yBAAyB,QAAQ,0EAAU,GAAG,yBAAyB;AACxJ,uBAAuB,0EAAQ;AAC/B;;AAEA,0BAA0B,8CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,4BAA4B,kDAAQ;AACpC;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACjGO;;AAEP;;AAEA;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,oBAAoB,SAAS;AAC7B,wCAAwC,KAAK,QAAQ;AACrD,oBAAoB,eAAe;AACnC;AACA,mCAAmC;AACnC;AACA;AACA,SAAS;;AAET;AACA;AACA,oDAAoD,KAAK,YAAY,QAAQ,UAAU;AACvF,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,wEAAwE,QAAQ;AAChF;AACA,oDAAoD,oBAAoB;AACxE,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;AC5EoC;;AAE7B;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,wDAAiB;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC9DoC;;AAE7B;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,+DAAwB;AAC7C;AACA,YAAY,wDAAiB;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AChC0C;;AAE1C;AACO;;AAEP;AACA;AACA,6DAA6D,gCAAgC,IAAI,uDAAuD;AACxJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6DAAmB;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;;AAE0C;;AAEnC;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,oEAA0B;AACpF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oEAAoE;AACpE,oEAAoE;AACpE,mEAAmE;AACnE;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6DAAmB,gBAAgB,+BAA+B;AAC9E;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC/H0C;AAC1C;AACO;;AAEP;AACA;AACA,6DAA6D,iDAAiD;AAC9G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC7BA;AACO;;AAEP,kBAAkB,+BAA+B,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,uBAAuB;AAClF,iEAAiE,6BAA6B;AAC9F,6DAA6D,wBAAwB;AACrF,qCAAqC;AACrC,iBAAiB;AACjB;AACA,aAAa;AACb,4CAA4C;AAC5C;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AChGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAA2D;AACxF,gCAAgC,6DAA6D;AAC7F,qCAAqC,4CAA4C;AACjF,+BAA+B;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU,MAAM,QAAQ;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAA6C;AAC1E,mCAAmC,iCAAiC;AACpE,gCAAgC,mDAAmD;AACnF,sCAAsC,oCAAoC;AAC1E,8BAA8B,iDAAiD;AAC/E,oCAAoC,kCAAkC;AACtE,qCAAqC,6CAA6C;AAClF,8BAA8B,0BAA0B;AACxD,mCAAmC,uFAAuF;AAC1H,gCAAgC,sBAAsB;AACtD,sCAAsC,4BAA4B;AAClE,+BAA+B,qBAAqB;AACpD,gCAAgC,sBAAsB;AACtD,+BAA+B,qBAAqB;AACpD,iCAAiC,uBAAuB;AACxD,gCAAgC,sBAAsB;AACtD,+BAA+B;AAC/B,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC1GO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,qEAAqE,iBAAiB,2BAA2B,UAAU,oBAAoB,OAAO;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH,OAAO,SAAS,gBAAgB;AACpJ;AACA;AACA;;AAEA;;;;;;;SCvFA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;;;;;;;;;;ACNA;;AAEoD;AACL;AACO;AACR;AACW","sources":["webpack://baseview/./build/modules/client_modules.js","webpack://baseview/./build/modules/client_package.js","webpack://baseview/./lib/editor/color-thief.mjs","webpack://baseview/./modules/Editor.js","webpack://baseview/./modules/Front.js","webpack://baseview/./modules/apps/BylineEditor.js","webpack://baseview/./modules/apps/CustomElements.js","webpack://baseview/./modules/apps/FrontContentSupport.js","webpack://baseview/./modules/apps/ImageColors.js","webpack://baseview/./modules/apps/ParallaxSupport.js","webpack://baseview/./modules/apps/TeaserEditor.js","webpack://baseview/./modules/apps/article/AptomaExport.js","webpack://baseview/./modules/apps/article/ArticleAdvancedSettings.js","webpack://baseview/./modules/apps/article/ArticleApproval.js","webpack://baseview/./modules/apps/article/ArticleAudio.js","webpack://baseview/./modules/apps/article/ArticleChangelog.js","webpack://baseview/./modules/apps/article/ArticleCitation.js","webpack://baseview/./modules/apps/article/ArticleCommercialSettings.js","webpack://baseview/./modules/apps/article/ArticleDates.js","webpack://baseview/./modules/apps/article/ArticleGeneralTeaser.js","webpack://baseview/./modules/apps/article/ArticleNotes.js","webpack://baseview/./modules/apps/article/ArticleSite.js","webpack://baseview/./modules/apps/article/ArticleStyling.js","webpack://baseview/./modules/apps/article/ArticleTranslate.js","webpack://baseview/./modules/apps/article/RoxenExport.js","webpack://baseview/./modules/apps/article/TopicSummary.js","webpack://baseview/./modules/apps/article/index.js","webpack://baseview/./modules/apps/fieldversion/index.js","webpack://baseview/./modules/apps/fieldversion/template.js","webpack://baseview/./modules/apps/front/AdvancedViewports.js","webpack://baseview/./modules/apps/front/AutomationSettings.js","webpack://baseview/./modules/apps/front/Colors.js","webpack://baseview/./modules/apps/front/ConfigOverride.js","webpack://baseview/./modules/apps/front/ExportMailmojo.js","webpack://baseview/./modules/apps/front/FrontSaveAs.js","webpack://baseview/./modules/apps/front/GeneralPage.js","webpack://baseview/./modules/apps/front/GeneralSettings.js","webpack://baseview/./modules/apps/front/SeoSettings.js","webpack://baseview/./modules/apps/front/index.js","webpack://baseview/./modules/apps/helpers/MainViewport.js","webpack://baseview/./modules/apps/helpers/RequiredVieworts.js","webpack://baseview/./modules/apps/index.js","webpack://baseview/./modules/apps/notice/NoticeGeneralSettings.js","webpack://baseview/./modules/apps/notice/index.js","webpack://baseview/./modules/behaviours/elements/AdnuntiusAd.js","webpack://baseview/./modules/behaviours/elements/ApsisSubmit.js","webpack://baseview/./modules/behaviours/elements/Article.js","webpack://baseview/./modules/behaviours/elements/ArticleCalendar.js","webpack://baseview/./modules/behaviours/elements/ArticleFooter.js","webpack://baseview/./modules/behaviours/elements/ArticleHeader.js","webpack://baseview/./modules/behaviours/elements/ArticleList.js","webpack://baseview/./modules/behaviours/elements/ArticleMeta.js","webpack://baseview/./modules/behaviours/elements/ArticleScroller.js","webpack://baseview/./modules/behaviours/elements/ArticlesByTag.js","webpack://baseview/./modules/behaviours/elements/Bodytext.js","webpack://baseview/./modules/behaviours/elements/Byline.js","webpack://baseview/./modules/behaviours/elements/Changelog.js","webpack://baseview/./modules/behaviours/elements/Chart.js","webpack://baseview/./modules/behaviours/elements/Comments.js","webpack://baseview/./modules/behaviours/elements/Factbox.js","webpack://baseview/./modules/behaviours/elements/FrontContent.js","webpack://baseview/./modules/behaviours/elements/Front_rows.js","webpack://baseview/./modules/behaviours/elements/GlobalChangelog.js","webpack://baseview/./modules/behaviours/elements/GoogleAd.js","webpack://baseview/./modules/behaviours/elements/GoogleCSE.js","webpack://baseview/./modules/behaviours/elements/Graphic.js","webpack://baseview/./modules/behaviours/elements/Grid.js","webpack://baseview/./modules/behaviours/elements/Image.js","webpack://baseview/./modules/behaviours/elements/JWPlayer.js","webpack://baseview/./modules/behaviours/elements/LabradorSearch.js","webpack://baseview/./modules/behaviours/elements/LiveFeed.js","webpack://baseview/./modules/behaviours/elements/Markup.js","webpack://baseview/./modules/behaviours/elements/Mobiltests.js","webpack://baseview/./modules/behaviours/elements/Motortests.js","webpack://baseview/./modules/behaviours/elements/Newsletter_submit.js","webpack://baseview/./modules/behaviours/elements/Notice.js","webpack://baseview/./modules/behaviours/elements/NoticeHeader.js","webpack://baseview/./modules/behaviours/elements/Parallax.js","webpack://baseview/./modules/behaviours/elements/RemoteProduction.js","webpack://baseview/./modules/behaviours/elements/Row.js","webpack://baseview/./modules/behaviours/elements/Scrollbox.js","webpack://baseview/./modules/behaviours/elements/Simplestream.js","webpack://baseview/./modules/behaviours/elements/Slideshow.js","webpack://baseview/./modules/behaviours/elements/Tablebox.js","webpack://baseview/./modules/behaviours/elements/Tagboard.js","webpack://baseview/./modules/behaviours/elements/TextMultiline.js","webpack://baseview/./modules/behaviours/elements/Timeline.js","webpack://baseview/./modules/behaviours/elements/Tips_box.js","webpack://baseview/./modules/behaviours/elements/Topcomments.js","webpack://baseview/./modules/behaviours/elements/Toplist.js","webpack://baseview/./modules/behaviours/elements/Tvguide.js","webpack://baseview/./modules/behaviours/elements/Twitter.js","webpack://baseview/./modules/behaviours/elements/UserFeedback.js","webpack://baseview/./modules/behaviours/elements/Vimond.js","webpack://baseview/./modules/behaviours/elements/YouTube.js","webpack://baseview/./modules/behaviours/index.js","webpack://baseview/./modules/behaviours/page/Article.js","webpack://baseview/./modules/behaviours/page/Front.js","webpack://baseview/./modules/behaviours/page/Notice.js","webpack://baseview/./modules/collections/ArticleTeasers.js","webpack://baseview/./modules/collections/ArticlesAuto.js","webpack://baseview/./modules/collections/ArticlesLatest.js","webpack://baseview/./modules/collections/ArticlesNotice.js","webpack://baseview/./modules/collections/Audio.js","webpack://baseview/./modules/collections/Bylines.js","webpack://baseview/./modules/collections/Graphics.js","webpack://baseview/./modules/collections/JWPlayer.js","webpack://baseview/./modules/collections/RemoteProduction.js","webpack://baseview/./modules/collections/Search.js","webpack://baseview/./modules/collections/Simplestream.js","webpack://baseview/./modules/collections/Vimond.js","webpack://baseview/./modules/collections/YouTube.js","webpack://baseview/./modules/collections/index.js","webpack://baseview/./modules/lib/PageData.js","webpack://baseview/./modules/lib/api/PageAPI.js","webpack://baseview/./modules/lib/editor/ColorUtils.js","webpack://baseview/./modules/lib/editor/ImageUploadProcessor.js","webpack://baseview/./modules/lib/editor/MarkupValidator.js","webpack://baseview/./modules/lib/editor/Namespace.js","webpack://baseview/./modules/lib/helpers/AdsHelper.js","webpack://baseview/./modules/lib/helpers/AutoFontSize.js","webpack://baseview/./modules/lib/helpers/AutodataHelper.js","webpack://baseview/./modules/lib/helpers/ClientConfig.js","webpack://baseview/./modules/lib/helpers/ContentLanguages.js","webpack://baseview/./modules/lib/helpers/CustomTags.js","webpack://baseview/./modules/lib/helpers/ExpandableOptions.js","webpack://baseview/./modules/lib/helpers/FragmentHelper.js","webpack://baseview/./modules/lib/helpers/LabradorAi.js","webpack://baseview/./modules/lib/helpers/LanguageHelper.js","webpack://baseview/./modules/lib/helpers/LayoutHelper.js","webpack://baseview/./modules/lib/helpers/LazyloadHelper.js","webpack://baseview/./modules/lib/helpers/Movable.js","webpack://baseview/./modules/lib/helpers/PageExport.js","webpack://baseview/./modules/lib/helpers/Paywall.js","webpack://baseview/./modules/lib/helpers/ResourceHelper.js","webpack://baseview/./modules/lib/helpers/SEOHelper.js","webpack://baseview/./modules/lib/helpers/Spacing.js","webpack://baseview/./modules/lib/helpers/StyleHelper.js","webpack://baseview/./modules/lib/helpers/TableFormatter.js","webpack://baseview/./modules/lib/helpers/datetime/DateTimeHelper.js","webpack://baseview/./modules/lib/helpers/datetime/DateTimeHelperInt.js","webpack://baseview/./modules/lib/helpers/datetime/words.js","webpack://baseview/./modules/lib/helpers/dynamic/DynamicDataHelper.js","webpack://baseview/./modules/lib/helpers/dynamic/EsiHelper.js","webpack://baseview/./modules/lib/helpers/dynamic/Insertable.js","webpack://baseview/./modules/lib/helpers/dynamic/Placement.js","webpack://baseview/./modules/lib/helpers/dynamic/ViewData.js","webpack://baseview/./modules/plugins/abtest/AbTest.js","webpack://baseview/./modules/plugins/abtest/PublishUpdater.js","webpack://baseview/./modules/plugins/abtest/TestManagerArticle.js","webpack://baseview/./modules/plugins/abtest/TestManagerBase.js","webpack://baseview/./modules/plugins/abtest/TestManagerFront.js","webpack://baseview/./modules/plugins/abtest/index.js","webpack://baseview/./modules/plugins/abtest/properties.js","webpack://baseview/./modules/plugins/abtest/templates.js","webpack://baseview/./modules/plugins/app_pusher/AppPusher.js","webpack://baseview/./modules/plugins/app_pusher/index.js","webpack://baseview/./modules/plugins/buyandread/buyandread.js","webpack://baseview/./modules/plugins/buyandread/index.js","webpack://baseview/./modules/plugins/index.js","webpack://baseview/./modules/plugins/paywall/PaywallManager.js","webpack://baseview/./modules/plugins/paywall/index.js","webpack://baseview/./modules/plugins/publishhistory/PublishHistory.js","webpack://baseview/./modules/plugins/publishhistory/callback.js","webpack://baseview/./modules/plugins/publishhistory/index.js","webpack://baseview/./modules/plugins/publishhistory/properties.js","webpack://baseview/./modules/plugins/slack_notifier/Notifier.js","webpack://baseview/./modules/plugins/slack_notifier/index.js","webpack://baseview/./modules/plugins/subrite/index.js","webpack://baseview/./modules/plugins/subrite/subrite.js","webpack://baseview/./modules/plugins/tansa/index.js","webpack://baseview/./modules/plugins/tansa/tansa.js","webpack://baseview/./modules/plugins/textassistant/Field.js","webpack://baseview/./modules/plugins/textassistant/Group.js","webpack://baseview/./modules/plugins/textassistant/Manager.js","webpack://baseview/./modules/plugins/textassistant/aside.js","webpack://baseview/./modules/plugins/textassistant/index.js","webpack://baseview/./modules/plugins/youtube/callback/YouTubeEditor.js","webpack://baseview/./modules/plugins/youtube/callback/index.js","webpack://baseview/./modules/plugins/youtube/callback/template.js","webpack://baseview/./modules/plugins/youtube/index.js","webpack://baseview/./modules/plugins/youtube/properties.js","webpack://baseview/./public/common/labrador/ClientData.js","webpack://baseview/./public/common/labrador/Core.js","webpack://baseview/./public/common/labrador/Mapper.js","webpack://baseview/./public/common/labrador/Reader.js","webpack://baseview/./public/common/labrador/Renderer.js","webpack://baseview/./public/common/labrador/source/FrontContentMapper.js","webpack://baseview/./public/common/labrador/source/FrontContentRenderer.js","webpack://baseview/./public/common/labrador/transformers/datatype.js","webpack://baseview/./public/common/labrador/transformers/layout/RandomRows.js","webpack://baseview/./public/common/labrador/transformers/layout/RowsAndColumns.js","webpack://baseview/./public/common/labrador/transformers/prosessors/Filter.js","webpack://baseview/./public/common/labrador/transformers/prosessors/RowLines.js","webpack://baseview/./public/common/labrador/transformers/prosessors/Setter.js","webpack://baseview/./public/common/labrador/transformers/prosessors/Tags.js","webpack://baseview/./public/common/labrador/transformers/source/DachserJson.js","webpack://baseview/./public/common/labrador/transformers/source/KilkayaStreams.js","webpack://baseview/./public/common/labrador/transformers/source/LabradorApi.js","webpack://baseview/./public/common/labrador/transformers/utils.js","webpack://baseview/webpack/bootstrap","webpack://baseview/webpack/runtime/define property getters","webpack://baseview/webpack/runtime/hasOwnProperty shorthand","webpack://baseview/webpack/runtime/make namespace object","webpack://baseview/./modules/index_editor.js"],"sourcesContent":["var e={d:(t,i)=>{for(var s in i)e.o(i,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},t={};e.d(t,{k:()=>A,B:()=>i});var i={};e.r(i),e.d(i,{adnuntiusAd:()=>F,article:()=>v,googleAd:()=>$,image:()=>k,livefeed:()=>T,notice:()=>w,page_article:()=>h,page_front:()=>f});class s{static getSiteStyles(e,t=[]){const i=lab_api.v1.config.get(`site_styles.${e}`)||t;return Sys.logger.debug(`ViewSupport: Found ${Array.isArray(i)?i.length:0} stylesheet(s) for site \"${e}\".`),i}static getSiteStylesWithFallback(e,t=[]){const i=this.getSiteStyles(e,null);if(null===i){t.push(e);const i=lab_api.v1.config.get(\"lab_fallback_site\",{site:e});if(i&&!t.includes(i))return this.getSiteStylesWithFallback(i,t)}return i||[]}static getSiteScripts(e,t,i){const s=this.filterScriptListByPageType(lab_api.v1.config.get(`site_scripts.${e}`)||[],t,i);return Sys.logger.debug(`ViewSupport: Found ${s.length} script-path(s) for site \"${e}\".`),s}static getSiteScriptsWithFallback(e,t,i,s=[]){let a=this.getSiteScripts(e,t,i);if(s.length&&(a=this.removeWithInheritFalse(a)),!a.length){s.push(e);const a=lab_api.v1.config.get(\"lab_fallback_site\",{site:e});if(a&&!s.includes(a))return this.getSiteScriptsWithFallback(a,t,i,s).filter((e=>!1!==e.inherit))}return a}static getCommonScripts(e,t,i=!1){const s=this.filterScriptListByPageType(lab_api.v1.config.get(\"site_scripts_common\")||[],e,t,i);return Sys.logger.debug(`ViewSupport: Found ${s.length} common ${i?\"script-path(s)\":\"JS modules\"}`),s}static filterScriptListByPageType(e,t,i,s=!1){return e.filter((e=>(!e.isModule&&!s||e.isModule&&s)&&(!e.pageType||e.pageType===t)&&(!i||i&&!e.skipEditor)))}static removeWithInheritFalse(e){return Array.isArray(e)&&e.length>0?e.filter((e=>!1!==e.inherit)):e}static getSiteFilesForContentboxes(e,t,i,s=[]){const a=[],n=lab_api.v1.model.query.getModelTypes();Sys.logger.debug(`ViewSupport sitefiles: Will register ${i}-file(s) for contentbox-types ${n.join(\", \")}.`);for(const e of n){const t=lab_api.v1.config.get(`contentbox_settings.${e}.require.${i}`);if(Array.isArray(t))for(const n of t)a.includes(n)||s.includes(n)||(Sys.logger.debug(`ViewSupport sitefiles: Will include ${i}-file \"${n}\" for contentbox \"${e}\".`),a.push(n))}return Sys.logger.debug(`ViewSupport sitefiles: Finished registering ${i}-file(s). Found ${a.length} file(s).`),a}}class a{constructor(e){this.api=e,this.pageType=this.api.v1.model.root.getType()}get media(){return{getLogo:(e=this.api.v1.viewport.getName())=>{const t=this.api.v1.config.get(\"logo\")||{},i=t.uploadedFileUrl?{src:t.uploadedFileUrl,href:t.default.href,type:\"img\",size:{width:t.logoWidth},title:t.default.title,isCustom:!0}:t[e]||t.default||null;i&&(\"img\"===i.type?i.is_img=!0:\"svg\"===i.type&&(i.is_svg=!0));return{current:i,sm:t.uploadedFileUrl?{src:t.uploadedFileUrl,href:t.default.href,size:{width:t.logoWidth},title:t.default.title,isCustom:!0}:t.standalone||t.mailmojo||null,mm:t.uploadedMailmojoFileUrl?{src:t.uploadedMailmojoFileUrl,href:t.default.href,size:{width:t.mailmojoLogoWidth},title:t.default.title,isCustom:!0}:t.mailmojo||t.standalone||null}}}}get menus(){return{get:({section:e,defaultSection:t}={},i)=>{const s={},a=Object.values(this.api.v1.config.get(\"menus\")||{});if(a.length<1)return null;const n=i=>{i.forEach((i=>{i.selected=i.section===e||i.section===t,\"target\"in i||(i.target=\"_self\"),\"selector\"in i||(i.selector=\"\"),\"children\"in i||(i.children=[]),i.children.length>0&&(i.hasChildren=!0,n(i.children))}))};return a.forEach((e=>{n(e.menuItems);const t=e.type||e.menuName;s[t]={items:e.menuItems,type:e.type,selector:e.selector||\"\"}})),i?s[i]:s}}}get misc(){return{}}get resources(){const e={required:[],getProgressReader:()=>(e.required.push({url:\"/view-resources/public/common/ReadProgress.js\",requireDom:!1}),{active:!0,minElementCount:lab_api.v1.config.get(\"displayReadProgress.minElementCount\")||25}),getSiteFiles(t,i,a,n,o){const r=s.getSiteScriptsWithFallback(a,n,o),l=s.getCommonScripts(n,o);return e.required.push(...r,...l),{js:s.getSiteFilesForContentboxes(t,i,\"js\",e.required.map((e=>e.url))),css:s.getSiteFilesForContentboxes(t,i,\"css\")}},getModules:(e,t,i,a,n)=>s.getCommonScripts(a,n,!0)},t={get:e=>{const i=(lab_api.v1.config.get(\"analytics.kilkaya\")||[]).map((e=>{const t={...e};return t.id&&\"string\"==typeof t.id&&t.id.trim().endsWith(\".js\")&&(t.url=t.id),t}));let s=this.api.v1.config.get(\"analytics.adnuntiusConnect\");s&&\"object\"==typeof s&&!Array.isArray(s)&&Object.keys(s).length&&(s=new Array(s));const a={google:this.api.v1.config.get(\"analytics.google.tracking_id\"),google_gtm:this.api.v1.config.get(\"analytics.google.gtm\"),comscore:this.api.v1.config.get(\"analytics.comscore.comscore_id\"),adnuntiusConnect:s,adnuntiusConnectCMP:this.api.v1.config.get(\"analytics.adnuntiusConnectCMP\"),kilkaya:i,kilkayaSettings:this.api.v1.config.get(\"analytics.kilkayaSettings\"),io:this.api.v1.config.get(\"analytics.io.tracking_id\")},n=t.getDataLayer(e);return n.dataLayer&&(a.dataLayer=n.dataLayer),n.usesJWTCookieData&&(a.usesJWTCookieData=n.usesJWTCookieData),a},getDataLayer:e=>{const t=this.api.v1.config.get(\"analytics.google.dataLayer\");let i=!1;if(t&&Array.isArray(t)&&t.length){t.forEach((t=>{let s=null;switch(t.source){case\"fixed\":s=(t.value||\"\").trim();break;case\"config\":s=this.api.v1.properties.get(t.value);break;case\"jwtcookie\":t.isJWTCookie=!0,s=t.value,i=!0;break;case\"article_authors\":s=`${(e.bylinesStringCommaSeparated||\"\").replace(/\"/g,\"\")}`;break;case this.pageType.replace(\"page_\",\"\"):s=this.api.v1.model.query.getRootModel().get(t.value);break;default:Sys.logger.warn(`Unsupported dataLayer source: \"${t.source}\"`)}t.value=null===s?\"\":s.toString()}));const s=t.map((e=>e.value.length>0)).lastIndexOf(!0);t[s]&&(t[s].last=!0)}return{dataLayer:t,usesJWTCookieData:i}}};return{scripts:e,analytics:t}}get settings(){return{get:(e={})=>{const t=this.api.v1.config.get(`page_settings.${e.pageType}.social.display`)||{},i=this.api.v1.model.query.getRootModel().get(\"fields.show_social_bodytext_before\"),s=this.api.v1.model.query.getRootModel().get(\"fields.show_social_bodytext_after\"),a=this.api.v1.model.query.getRootModel().get(\"fields.show_social_header\");null!==i&&(t.bodytext_before=!!i),null!==s&&(t.bodytext_after=!!s),null!==a&&(t.header=!!a);const n=this.api.v1.config.get(`page_settings.${e.pageType}.social.items`)||{},o=this.api.v1.config.get(`page_settings.${e.pageType}.showTags`),r=Object.keys(n).filter((e=>!!n[e].display)).map((t=>({name:t,icon:n[t].icon||\"\",url:e.socialLinks[t]||\"\",shareText:n[t].shareText||\"\",isButton:n[t].isButton||!1})));return{page_type:e.pageType,social:{display:{bodytext_before:r.length>0&&!!t.bodytext_before,bodytext_after:r.length>0&&!!t.bodytext_after,header:r.length>0&&!!t.header},items:r},showTags:!1!==o}}}}}class n{static getStyleDefinitions(e){const t=e.v1.properties.get(\"site.alias\"),i=e.v1.config.get(\"style_definitions\",t),s=[];(i.rules||[]).forEach((e=>s.push(e))),(i.fontface||[]).forEach((e=>{const t=`.font-${e.family.replace(/ /g,\"\")}`;s.push(n.getFamilyDefinition(t,e.family));const i={light:{keys:[\"light\",\"200\",\"100\",\"300\"],used:!1},normal:{keys:[\"regular\",\"normal\",\"400\",\"500\"],used:!1},bold:{keys:[\"bold\",\"600\",\"700\"],used:!1},black:{keys:[\"black\",\"800\",\"900\"],used:!1}};e.variants.forEach((e=>{for(const a of Object.keys(i)){const o=i[a];o&&!o.used&&o.keys.indexOf(e)>-1&&(s.push(n.getWeightDefinition(t,e,a)),o.used=!0)}}))}));const a={fontface:i.fontface||[],parsedRules:n.CSSRuleParser(s)};return a.hasRules=!!a.parsedRules.length,a}static getFamilyDefinition(e,t){return{selector:e,declarations:[{key:\"font-family\",value:`\"${t}\" !important`}]}}static getWeightDefinition(e,t,i){let s=t;return\"regular\"===t&&(s=\"normal\"),{selector:`${e}.font-weight-${i}`,declarations:[{key:\"font-weight\",value:`${s} !important`}]}}static CSSRuleParser(e){const t=[];return e.forEach((e=>{let i,s,a=`${e.selector} { `;e.declarations.forEach((e=>{\"font-size-desktop\"===e.key?\"default\"!==e.value&&(a+=`font-size: ${e.value.slice(0,-2)/16}rem; `):\"font-size-mobile\"===e.key?\"default\"!==e.value&&(i=`calc(0.262vw * ${e.value.slice(0,-2)})`):\"line-height-desktop\"===e.key?\"default\"!==e.value&&(a+=`line-height: ${e.value}; `):\"line-height-mobile\"===e.key?\"default\"!==e.value&&(s=e.value):\"font-family\"===e.key?e.value.includes(\"!important\")?a+=`${e.key}: ${e.value}; `:a+=`${e.key}: \"${e.value}\"; `:a+=`${e.key}: ${e.value}; `})),a+=\"}\",(i||s)&&(a+=`@media (max-width: 767px) { .resp_fonts ${e.selector} {`,i&&(a+=`font-size: ${i}; `),s&&(a+=`line-height: ${s}; `),a+=\"} }\"),t.push(a)})),t}static getInlineCSS(e,t){return[{key:\"custom_properties\",value:e.v1.config.get(\"css_build.custom_properties\",{site:t})||\"\"},{key:\"background_colors\",value:e.v1.config.get(\"css_build.background_colors\",{site:t})||\"\"},{key:\"background_colors_opacity\",value:e.v1.config.get(\"css_build.background_colors_opacity\",{site:t})||\"\"},{key:\"border_colors\",value:e.v1.config.get(\"css_build.border_colors\",{site:t})||\"\"},{key:\"font_colors\",value:e.v1.config.get(\"css_build.font_colors\",{site:t})||\"\"},{key:\"image_gradient\",value:e.v1.config.get(\"css_build.image_gradient\",{site:t})||\"\"}]}static getCssVariables(e){const t=e.v1.config.get(\"custom_css_variables\")||{},i={no_viewport:[],desktop:[],mobile:[]};for(const e of Object.keys(t))for(const s of Object.keys(t[e]))i[s].push({key:e,value:(t[e][s]||{}).value});return i}}const o={sunday:{en:\"sunday\",sv:\"söndag\",dk:\"søndag\",no:\"søndag\",nl:\"zondag\",kl:\"sapaat\"},monday:{en:\"monday\",sv:\"måndag\",dk:\"mandag\",no:\"mandag\",nl:\"maandag\",kl:\"ataasinngorneq\"},tuesday:{en:\"tuesday\",sv:\"tisdag\",dk:\"tirsdag\",no:\"tirsdag\",nl:\"dinsdag\",kl:\"marlunngorneq\"},wednesday:{en:\"wednesday\",sv:\"onsdag\",dk:\"onsdag\",no:\"onsdag\",nl:\"woensdag\",kl:\"pingasunngorneq\"},thursday:{en:\"thursday\",sv:\"torsdag\",dk:\"torsdag\",no:\"torsdag\",nl:\"donderdag\",kl:\"sisamanngorneq\"},friday:{en:\"friday\",sv:\"fredag\",dk:\"fredag\",no:\"fredag\",nl:\"vrijdag\",kl:\"tallimanngorneq\"},saturday:{en:\"saturday\",sv:\"lördag\",dk:\"lørdag\",no:\"lørdag\",nl:\"zaterdag\",kl:\"arfininngorneq\"},january:{en:\"January\",sv:\"januari\",dk:\"januar\",no:\"januar\",nl:\"januari\",kl:\"ukiortaarsiorneq\"},february:{en:\"February\",sv:\"februari\",dk:\"februar\",no:\"februar\",nl:\"februari\",kl:\"ukiortaami\"},mars:{en:\"March\",sv:\"mars\",dk:\"marts\",no:\"mars\",nl:\"maart\",kl:\"marsi\"},april:{en:\"April\",sv:\"april\",dk:\"april\",no:\"april\",nl:\"april\",kl:\"apriili\"},may:{en:\"May\",sv:\"maj\",dk:\"maj\",no:\"mai\",nl:\"mei\",kl:\"maajii\"},june:{en:\"June\",sv:\"juni\",dk:\"juni\",no:\"juni\",nl:\"juni\",kl:\"juuni\"},july:{en:\"July\",sv:\"juli\",dk:\"juli\",no:\"juli\",nl:\"juli\",kl:\"juuli\"},august:{en:\"August\",sv:\"augusti\",dk:\"august\",no:\"august\",nl:\"augustus\",kl:\"aggusti\"},september:{en:\"September\",sv:\"september\",dk:\"september\",no:\"september\",nl:\"september\",kl:\"septembari\"},october:{en:\"October\",sv:\"oktober\",dk:\"oktober\",no:\"oktober\",nl:\"oktober\",kl:\"oktobari\"},november:{en:\"November\",sv:\"november\",dk:\"november\",no:\"november\",nl:\"november\",kl:\"novembari\"},december:{en:\"December\",sv:\"december\",dk:\"december\",no:\"desember\",nl:\"december\",kl:\"decembari\"},ago:{en:\"ago\",sv:\"sedan\",dk:\"siden\",no:\"siden\",nl:\"geleden\",kl:\"matuma siorna\"},now:{en:\"now\",sv:\"nu\",dk:\"nu\",no:\"nå\",nl:\"nu\",kl:\"maanna\"},min:{en:\"min\"},minutes:{en:\"minutes\",sv:\"minuter\",dk:\"minutter\",no:\"minutter\",nl:\"minuten\",kl:\"minutsi\"},hour:{en:\"hour\",sv:\"timme\",dk:\"time\",no:\"time\",nl:\"uur\",kl:\"akunnera\"},hours:{en:\"hours\",sv:\"timmar\",dk:\"timer\",no:\"timer\",nl:\"uren\",kl:\"akunnerit\"},day:{en:\"day\",sv:\"dag\",dk:\"dag\",no:\"dag\",nl:\"dag\",kl:\"ulloq\"},days:{en:\"days\",sv:\"dagar\",dk:\"dage\",no:\"dager\",nl:\"dagen\",kl:\"ullut\"},monthdayyear:{en:\"{{MMMM}} {{DD}}. {{YYYY}}\",sv:\"{{DD}}/{{MM}} {{YYYY}}\",dk:\"{{DD}}/{{MM}} {{YYYY}}\",no:\"{{DD}}/{{MM}} {{YYYY}}\",nl:\"{{DD}}/{{MM}} {{YYYY}}\"},hourminute:{en:\"{{HH}}:{{mm}}\"}};class r{constructor(e=\"en\",t=\"en\"){this.fallbackLanguage=t,this.language=e||t,this.words=o,this.timezone=this.getTimezone()}getTimezone(){const e=lab_api.v1.config.get(\"timezone\");return void 0===e||Number.isNaN(e)||Number.isNaN(parseFloat(e))?1:parseInt(e,10)}str(e){let{language:t}=this;return e in this.words?(t in this.words[e]||(t=this.fallbackLanguage),t in this.words[e]?this.words[e][t]:null):null}format(e,t){return Mustache.render(t,{YYYY:()=>e.getFullYear(),YY:()=>`${e.getFullYear()}`.slice(-2),MM:()=>(e.getMonth()<9?\"0\":\"\")+(e.getMonth()+1),M:()=>e.getMonth()+1,D:()=>e.getDate(),DD:()=>(e.getDate()<10?\"0\":\"\")+e.getDate(),H:()=>e.getHours(),HH:()=>(e.getHours()<10?\"0\":\"\")+e.getHours(),m:()=>e.getMinutes(),mm:()=>(e.getMinutes()<10?\"0\":\"\")+e.getMinutes(),s:()=>e.getSeconds(),ss:()=>(e.getSeconds()<10?\"0\":\"\")+e.getSeconds(),dddd:()=>this.weekday(e,!1),ddd:()=>this.weekday(e,!1,3),MMMM:()=>this.monthName(e,!1),MMM:()=>this.monthName(e,!1,3),W:()=>this.weekNumber(e,!0,!0),WW:()=>this.weekNumber(e,!0,!1)})}utcFormat(e,t){const i=this.correctDate(e);return Mustache.render(t,{YYYY:()=>i.getUTCFullYear(),YY:()=>`${i.getUTCFullYear()}`.slice(-2),MM:()=>(i.getUTCMonth()<9?\"0\":\"\")+(i.getUTCMonth()+1),M:()=>i.getUTCMonth()+1,D:()=>i.getUTCDate(),DD:()=>(i.getUTCDate()<10?\"0\":\"\")+i.getUTCDate(),H:()=>i.getUTCHours(),HH:()=>(i.getUTCHours()<10?\"0\":\"\")+i.getUTCHours(),m:()=>i.getUTCMinutes(),mm:()=>(i.getUTCMinutes()<10?\"0\":\"\")+i.getUTCMinutes(),s:()=>i.getUTCSeconds(),ss:()=>(i.getUTCSeconds()<10?\"0\":\"\")+i.getUTCSeconds(),dddd:()=>this.weekday(i,!0),ddd:()=>this.weekday(i,!0,3),MMMM:()=>this.monthName(i,!0),MMM:()=>this.monthName(i,!0,3),W:()=>this.weekNumber(i,!0,!0),WW:()=>this.weekNumber(i,!0,!1)})}formattedDate(e,t,i=!0,s=!0){let a=t||\"\";return a=a.replace(\"Y\",e.getFullYear()),a=a.replace(\"m\",(i&&e.getMonth()<9?\"0\":\"\")+(e.getMonth()+1)),a=a.replace(\"d\",(i&&e.getDate()<10?\"0\":\"\")+e.getDate()),a=a.replace(\"H\",(s&&e.getHours()<10?\"0\":\"\")+e.getHours()),a=a.replace(\"i\",(s&&e.getMinutes()<10?\"0\":\"\")+e.getMinutes()),a=a.replace(\"s\",e.getSeconds()),a=a.replace(\"l\",this.weekday(e,!1)),a=a.replace(\"D\",this.weekday(e,!1,3)),a=a.replace(\"F\",this.monthName(e,!1)),a=a.replace(\"M\",this.monthName(e,!1,3)),a}formattedUtcDate(e,t,i=!0,s=!0){const a=this.correctDate(e);let n=t||\"\";return n=n.replace(\"Y\",a.getUTCFullYear()),n=n.replace(\"m\",(i&&a.getUTCMonth()<9?\"0\":\"\")+(a.getUTCMonth()+1)),n=n.replace(\"d\",(i&&a.getUTCDate()<10?\"0\":\"\")+a.getUTCDate()),n=n.replace(\"H\",(s&&a.getUTCHours()<10?\"0\":\"\")+a.getUTCHours()),n=n.replace(\"i\",(s&&a.getUTCMinutes()<10?\"0\":\"\")+a.getUTCMinutes()),n=n.replace(\"s\",a.getUTCSeconds()),n=n.replace(\"l\",this.weekday(a,!0)),n=n.replace(\"D\",this.weekday(a,!0,3)),n=n.replace(\"F\",this.monthName(a,!0)),n=n.replace(\"M\",this.monthName(a,!0,3)),n}correctDate(e){return this.manipulateTime(e,this.isSummerTime(e)?this.timezone+1:this.timezone)}utcDate(e){return this.unmanipulateTime(e,this.isSummerTime(e)?this.timezone+1:this.timezone)}timestampToDate(e){return new Date(1e3*e)}toTimestamp(e){return Math.round(e.getTime()/1e3)}parseDate(e){const t=e.substr(0,4),i=e.substr(4,2)-1,s=e.substr(6,2),a=new Date(t,i,s),n=a.getFullYear()==t,o=a.getMonth()==i,r=a.getDate()==s;return n&&o&&r?a:\"invalid date\"}weekday(e,t=!1,i=9){return([this.str(\"sunday\"),this.str(\"monday\"),this.str(\"tuesday\"),this.str(\"wednesday\"),this.str(\"thursday\"),this.str(\"friday\"),this.str(\"saturday\")][t?e.getUTCDay():e.getDay()]||\"\").substr(0,i)}monthName(e,t=!1,i=10){return([this.str(\"january\"),this.str(\"february\"),this.str(\"mars\"),this.str(\"april\"),this.str(\"may\"),this.str(\"june\"),this.str(\"july\"),this.str(\"august\"),this.str(\"september\"),this.str(\"october\"),this.str(\"november\"),this.str(\"december\")][t?e.getUTCMonth():e.getMonth()]||\"\").substr(0,i)}weekNumber(e,t=!1,i=!0){const s=new Date(e.valueOf()),a=((t?e.getUTCDay():e.getDay())+6)%7;s.setDate(s.getDate()-a+3);const n=s.valueOf();s.setMonth(0,1),4!==s.getDay()&&s.setMonth(0,1+(4-s.getDay()+7)%7);const o=1+Math.ceil((n-s)/6048e5);return(!i&&o<10?\"0\":\"\")+o}timestampToNiceDate(e,t=!1){const i={ago:t?\"\":this.str(\"ago\"),now:this.str(\"now\"),minute:t?this.str(\"min\"):this.str(\"minutes\"),minutes:t?this.str(\"min\"):this.str(\"minutes\"),hour:this.str(\"hour\"),hours:this.str(\"hours\"),day:this.str(\"day\"),days:this.str(\"days\")},s=(new Date).getTime(),a=new Date(1e3*e).getTime()-0,n=parseInt((s-a)/1e3/60,10);return n<60?n<1?i.now:1==n?`1 ${i.minute} ${i.ago}`:`${n} ${i.minutes} ${i.ago}`:n<1440?1==parseInt(n/60,10)?`1 ${i.hour} ${i.ago}`:`${parseInt(n/60,10)} ${i.hours} ${i.ago}`:parseInt(n/1440,10)<30?1==parseInt(n/1440,10)?`1 ${i.day} ${i.ago}`:`${parseInt(n/1440,10)} ${i.days} ${i.ago}`:this.format(this.timestampToDate(e),this.str(\"monthdayyear\"))}isSummerTime(e){function t(e,t){const i=new Date,s=new Date(Date.UTC(t||i.getFullYear(),e+1,0)),a=s.getDay();return new Date(Date.UTC(s.getFullYear(),s.getMonth(),s.getDate()-a))}const i=e||new Date,s=t(2,i.getFullYear());s.setHours(1);const a=t(9,i.getFullYear());return s.setHours(1),i.getTime()>=s.getTime()&&i.getTime()<a.getTime()}manipulateTime(e,t){return new Date(e.getTime()+60*t*60*1e3)}unmanipulateTime(e,t){return new Date(e.getTime()-60*t*60*1e3)}}class l{static getAdnuntiusSettings(e,t,i,s,a,n=!1,o=!1){const l=(e.v1.config.get(\"contentbox_settings.adnuntiusAd.bidding\")||{}).enabled||!1;function d(e,t){let i=\"\";return l&&e.prebidConfig&&(i=JSON.parse(e.prebidConfig),Array.isArray(i)&&([i]=i),i=JSON.stringify(i)),{...e,prebidConfig:i,metadata:t.metadata||[]}}const g=e.v1.config.get(\"contentbox_settings.adnuntiusAd.formats\")||[],c=e.v1.config.getView(`insertDynamic.${e.v1.model.root.getType().replace(\"page_\",\"\")}.${i.getViewport()}`,a.alias)||[],p=e.v1.model.query.getChildrenOfType(t,\"adnuntiusAd\",!0,!0),u=[];for(const e of c){const[t]=g.filter((t=>e.content_data.fields.format===t.format));t&&(!1===e.placement.key.includes(\"skyscraper_\")&&\"topbanner\"!==e.placement.key||e.placement.key.includes(\"skyscraper_\")&&!n||\"topbanner\"===e.placement.key&&!o)&&u.push(d(t,e))}for(const e of p){const[t]=g.filter((t=>e.get(\"fields.format\")===t.format));t&&u.push(d(t,e))}const h=(new r).utcFormat(new Date,\"&tag=week_{{ W }}_{{ YYYY }}\");return{enabled:g.length>0,lazyload:e.v1.config.get(\"contentbox_settings.adnuntiusAd.lazyload\")||!1,adUnits:u,spacingTop:e.v1.config.get(\"contentbox_settings.adnuntiusAd.spacingTop\")||120,fetchMarginPercent:s.fetchMarginPercent||150,renderMarginPercent:s.renderMarginPercent||150,bidding:{enabled:l},hideOnTabletWidth:s.hideOnTabletWidth||1316,refreshdelay:e.v1.config.get(\"contentbox_settings.adnuntiusAd.refreshdelay\")||5,refreshcount:e.v1.config.get(\"contentbox_settings.adnuntiusAd.refreshcount\")||1,connectLoading:e.v1.config.get(\"contentbox_settings.adnuntiusAd.connectLoading\")||!1,contkitEnabled:e.v1.config.get(\"contentbox_settings.adnuntiusAd.contkitEnabled\")||!1,newsletter:{targeting:h}}}static getGoogleSettings(e,t,i,s,a,n=!1,o=!1){function r(e,t){const{sizes:i=[]}=e;return{...e,sizesString:`[${i.map((e=>`[${e.width},${e.height}]`)).join(\", \")}]`,metadata:t.metadata||[]}}const l=e.v1.config.get(\"contentbox_settings.googleAd.formats\")||[],d=e.v1.config.get(\"contentbox_settings.googleAd.anchor\")||{enabled:!1,code:\"\",type:\"TOP_ANCHOR\"},g=e.v1.config.getView(`insertDynamic.${e.v1.model.root.getType().replace(\"page_\",\"\")}.${i.getViewport()}`,a.alias)||[],c=e.v1.model.query.getChildrenOfType(t,\"googleAd\",!0,!0),p=[];for(const e of g){const[t]=l.filter((t=>e.content_data.fields.format===t.format));t&&(!1===e.placement.key.includes(\"skyscraper_\")&&\"topbanner\"!==e.placement.key||e.placement.key.includes(\"skyscraper_\")&&!n||\"topbanner\"===e.placement.key&&!o)&&p.push(r(t,e))}for(const e of c){const[t]=l.filter((t=>e.get(\"fields.format\")===t.format));t&&p.push(r(t,e))}return{enabled:l.length>0,lazyload:s.lazyload||!1,spacingTop:e.v1.config.get(\"contentbox_settings.googleAd.spacingTop\")||120,fetchMarginPercent:s.fetchMarginPercent||150,renderMarginPercent:s.renderMarginPercent||150,adUnits:p,anchor:d,dfpid:s.dfpid||!1,debugmode:s.debugmode||!1,disableInitialLoad:s.disableInitialLoad||!1,bidding:s.bidding,hideOnTabletWidth:s.hideOnTabletWidth||1316}}}class d{constructor({pageType:e=\"\",canonical:t=\"\",isTagpage:i=!1,isTagpageWithFrontpage:s=!1,tagpagePath:a=\"/tag/\"}={}){this.settings={pageType:e,canonical:t,isTagpage:i,isTagpageWithFrontpage:s,tagpagePath:a},this.cache={seoData:null}}getStructuredData(e){return e.get(\"fields.jsonld_json\")?e.get(\"fields.custom_jsonld\"):\"front\"===this.settings.pageType?this.generateFrontData(e):\"article\"===this.settings.pageType||\"notice\"===this.settings.pageType?this.generateArticleData(e):null}generateSiteData(e){return{\"@context\":\"http://schema.org\",\"@type\":\"WebSite\",name:lab_api.v1.properties.get(\"site.display_name\"),url:lab_api.v1.properties.get(\"site.domain\")||\"\"}}generateFrontData(e){const t=this.getSEOData(e);return{\"@context\":\"https://schema.org\",\"@type\":\"WebPage\",name:t.title,description:t.description}}generateArticleData(e){const t=this.getSEOData(e),i={\"@context\":\"https://schema.org\",\"@type\":\"NewsArticle\",headline:t.title||e.get(\"fields.title\"),description:t.description,availableLanguage:[{\"@type\":\"Language\",alternateName:t.language}],images:lab_api.v1.model.query.getChildrenOfType(e,\"image\",!0).map((e=>(e.get(\"fields.imageurl\")||\"\").includes(\"width=\")?`${e.get(\"fields.imageurl\")}1200`:`${e.get(\"fields.imageurl\")}&width=1200`)),author:lab_api.v1.model.query.getChildrenOfType(e,\"byline\",!0).map((e=>{let t=e.get(\"fields.firstname\");\"Byline first name\"===t&&(t=\"\");let i=e.get(\"fields.lastname\");\"Byline last name\"===i&&(i=\"\");const s={\"@type\":\"Person\",name:`${t} ${i}`},a=e.get(\"fields.public_url\");a&&(s.url=a);const n=(e.children||[]).filter((e=>\"image\"===e.type))[0];n&&(s.image={\"@type\":\"ImageObject\",url:`${n.get(\"fields.imageurl\")}&width=250`});const o=e.get(\"fields.public_email\");return o&&(s.email=o),s})),publisher:{\"@type\":\"Organization\",name:lab_api.v1.properties.get(\"site.display_name\"),logo:{\"@type\":\"ImageObject\",url:lab_api.v1.config.get(\"logo.default.src\")}}};return e.get(\"fields.published\")&&(i.datePublished=new Date(1e3*parseInt(e.get(\"fields.published\"),10)).toISOString()),e.get(\"fields.modified\")&&(i.dateModified=new Date(1e3*parseInt(e.get(\"fields.modified\"),10)).toISOString()),\"1\"===e.get(\"fields.paywall\")&&(i.isAccessibleForFree=!0,i.hasPart={\"@type\":\"WebPageElement\",isAccessibleForFree:!1,cssSelector:\".teaserContent\"}),i}getSEOData(e){if(this.cache.seoData)return this.cache.seoData;let t,i,s;if(\"article\"===this.settings.pageType||\"notice\"===this.settings.pageType)i=lab_api.v1.util.string.sanitizeString(e.get(\"fields.seotitle\")||e.get(\"fields.title\")||\"\"),s=lab_api.v1.util.string.sanitizeString(e.get(\"fields.seodescription\")||e.get(\"fields.subtitle\")||\"\"),t=e.get(\"fields.seolanguage\")||lab_api.v1.config.get(\"contentLanguage\");else{if(this.settings.isTagpage&&!this.settings.isTagpageWithFrontpage){const e=this.settings.tagpagePath.replace(/\\//g,\"\"),t=(this.settings.canonical.split(this.settings.tagpagePath)[1]||\"\").split(\"/\").filter((e=>!!e)),s={tag:t[t.length-1],tags:t,tagPath:e};i=lab_api.v1.locale.get(\"tags.title_text\",{data:s})}else i=lab_api.v1.util.string.sanitizeString(e.get(\"fields.seotitle\")||e.get(\"fields.name\")||\"\");s=lab_api.v1.util.string.sanitizeString(e.get(\"fields.seodescription\")||\"\")}return this.cache.seoData={title:i.charAt(0).toUpperCase()+i.slice(1),description:s,language:t},this.cache.seoData}}class g{static prepareForTemplate(e,t,i){const s={meta:{head_top:[],head_bottom:[]},script:{head_top:[],head_bottom:[],body_top:[],body_bottom:[]},style:{head_top:[],head_bottom:[]},link:{head_top:[],head_bottom:[]}},a=e.filter((e=>!(e.pageType&&e.pageType!==t||e.skipEditor&&i)));for(const e of Object.keys(s))for(const t of Object.keys(s[e]))s.meta[t]=a.filter((e=>\"meta\"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e))),s.script[t]=a.filter((e=>\"script\"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e))),s.style[t]=a.filter((e=>\"style\"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e))),s.link[t]=a.filter((e=>\"link\"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e)));return console.log(s),s}static createCustomTag(e){switch(e.tag){case\"link\":return this.createLinkTag(e);case\"script\":return this.createScriptTag(e);case\"style\":return this.createStyleTag(e);default:return this.createMetaTag(e)}}static fetchDynamicAttribute(e){return lab_api.v1.view.render({model:lab_api.v1.model.query.getRootModel(),template:e})||null}static parseAttributes(e){return e.filter((e=>!!e.key)).map((e=>e.value?`${e.key}=\"${e.value.match(/\\{\\{.*\\}\\}/g)?this.fetchDynamicAttribute(e.value):e.value}\"`:e.key)).join(\" \")}static parseVariables(e){return e.replace(/\\{\\{\\{?.*?\\}\\}\\}?/g,this.fetchDynamicAttribute)}static createLinkTag(e){return`<link ${this.parseAttributes(e.attributes)}>`}static createScriptTag(e){return`<script ${this.parseAttributes(e.attributes)}>${e.value?this.parseVariables(e.value):\"\"}<\\/script>`}static createMetaTag(e){return`<meta ${this.parseAttributes(e.attributes)}>`}static createStyleTag(e){return`<style ${this.parseAttributes(e.attributes)}>${e.value?this.parseVariables(e.value):\"\"}</style>`}}class c{static buildConfig(e){return{viewConfig:{config:{customer:{paywall:{label:lab_api.v1.config.get(\"paywall.label\")||{}},image:{defaultAspectRatio:lab_api.v1.config.get(\"image.defaultAspectRatio\")||void 0}}}}}}}class p{constructor(e,t){this.api=e,this.page=t}set(e,t){const i=this.export(e,t);for(const t of Object.keys(i))e.setFiltered(t,i[t])}export(e,t){const i={},a=new Date,o=t.get(\"type\").replace(\"page_\",\"\"),r=t.get(\"id\"),p=this.api.v1.site.getSite().domain||this.api.v1.properties.get(\"customer_front_url\"),u=p+t.get(\"fields.published_url\"),h=encodeURIComponent(u),f=this.api.v1.properties.get(\"image_server\"),m=this.api.v1.app.mode.isEditor(),y=this.getCanonicalUrl(e,o,r,p),b=this.api.v1.config.get(\"tagPagePath\")||\"/tag/\",v=\"front\"===o&&(u.endsWith(b.slice(0,-1))||u.indexOf(b)>-1),_=v&&!u.endsWith(b.slice(0,-1));i.customer_front_url=p,i.isEditMode=m,i.url=u,i.urlEncoded=h,i.specificUrl=y,i.image_server=f,i.pageType=o,i.pageId=r,i.is_article=\"article\"===o,i.is_notice=\"notice\"===o,i.is_front=\"front\"===o,i.section=t.get(\"primaryTags.section\")||t.get(\"fields.defaultsection\"),i.device=this.api.v1.viewport.getName(),i.cmsVersion=this.api.v1.properties.get(\"app.version\"),i.front_api_url=this.api.v1.properties.get(\"front_api_url\"),i.xUaDevice=this.api.v1.properties.get(\"xUaDevice\"),i.favicons=this.api.v1.config.get(\"favicons\"),i.faviconList=this.api.v1.config.get(\"faviconList\"),i.skipDefaultFont=this.api.v1.config.get(\"skipDefaultFont\"),i.isDebug=this.api.v1.util.request.hasQueryParam(\"debug\"),i.staticUrl=this.getStaticUrl(e,o,r,p),i.customMetatags=this.getCustomMetatags(),i.customTags=g.prepareForTemplate(this.api.v1.config.get(\"customTags\")||[],o,m),i.footerSettings=this.api.v1.config.get(\"page_settings.footer\"),i.rssDescriptionPrefix=this.api.v1.config.get(\"viewports.rss.descriptionPrefix\"),i.is_tagpage=v,i.contentLanguage=lab_api.v1.config.get(\"contentLanguage\");const k=this.page.media.getLogo(t.getViewport());i.logo=k.current,i.logo_sm=k.sm,i.logo_mm=k.mm,i.misc=this.api.v1.config.get(\"misc\");const S={active:!1,lang:this.api.v1.config.get(\"google_translate\")};S.lang&&Array.isArray(S.lang)&&S.lang.length&&(S.active=!0),i.google_translate=S;const w=new d({pageType:o,canonical:y,isTagpage:v,isTagpageWithFrontpage:_,tagpagePath:b}),T=w.generateSiteData(e),F=w.getStructuredData(e);i.jsonld=JSON.stringify([T,F]);const $=w.getSEOData(e);if(i.seotitle=$.title,i.seodescription=$.description,i.seolanguage=$.language,\"article\"===o||\"notice\"===o){const t=e.get(\"fields.sometitle\")||e.get(\"fields.teaserTitle\")||e.get(\"fields.title\");t&&(i.sometitle=this.api.v1.util.string.stripTags(t));const s=e.get(\"fields.somedescription\")||e.get(\"fields.teaserSubtitle\")||e.get(\"fields.subtitle\");if(s&&s.length>0)i.somedescription=this.api.v1.util.string.stripTags(s);else{let t=e.get(\"fields.bodytext\")||\"\";t=this.api.v1.util.string.stripTags(t),i.somedescription=`${t.substring(0,100)} ...`}}else if(\"front\"===o){const t=e.get(\"fields.someimage\");null!=t&&\"\"!==t&&(i.someimage=`${f}/${t}.webp?width=1200&height=630`),i.sometitle=e.get(\"fields.sometitle\")||e.get(\"fields.name\"),i.somedescription=e.get(\"fields.somedescription\")||\"\"}if(i.social={facebook:`https://www.facebook.com/sharer.php?u=${h}`,twitter:`https://twitter.com/intent/tweet?url=${h}`,mail:`mailto:?subject=${encodeURIComponent(this.api.v1.util.string.stripTags(t.get(\"fields.title\")))}&body=${encodeURIComponent(this.api.v1.util.string.stripTags(t.get(\"fields.subtitle\")))}%0D${h}`,linkedin:`https://www.linkedin.com/sharing/share-offsite/?url=${h}`,threads:`https://threads.net/intent/post?text=${h}`,copyLink:`navigator.clipboard.writeText(\"${u}\");`,glimta:`https://glimta.com/unlock?link=${h}`,talandeWebb:\"ReachDeck.panel.toggleBar();\",bluesky:`https://bsky.app/intent/compose?text=${encodeURIComponent(`${i.sometitle}\\n`)}${h}`},\"article\"===o){const t=this.api.v1.config.get(\"page_settings.article.ignoredTags\")||[],s=this.api.v1.config.get(\"page_settings.article.ignoredTagPrefix\")||[],a=(e.get(\"tags\")||[]).filter((e=>!t.includes(e))).filter((e=>{for(const t of s)if(e.startsWith(t))return!1;return!0}));i.tagsString=a.toString();let n=\"\";a.forEach(((e,t)=>{n+=`\"${e.replace('\"',\"'\")}\"`,t<a.length-1&&(n+=\", \")})),i.tagsStringCommaSeparated=n;const o=this.api.v1.model.query.getChildrenOfType(e,\"byline\",!0);if(o){const e=o.map((e=>`\"${e.get(\"fields.firstname\")} ${e.get(\"fields.lastname\")}\"`)).join(\", \");i.bylinesStringCommaSeparated=e}}\"article\"===o&&e.get(\"fields.published\")&&(i.published=new Date(1e3*parseInt(e.get(\"fields.published\"),10)).toISOString(),i.publishedTimestamp=e.get(\"fields.published\")),i.site=this.api.v1.site.getSite(),i.siteJSON=JSON.stringify(i.site),i[\"site.domain_no_protocol\"]=i.site.domain.split(\"://\").pop(),i.siteAlias=i.site.alias,i.fullUrl=i.site.domain,i[`site_is_${i.siteAlias}`]=!0;const D=this.page.resources;if(!m&&i.is_article&&this.api.v1.config.get(\"displayReadProgress.active\")&&t.get(\"fields.displayReadProgress\")&&(i.readProgress=D.scripts.getProgressReader()),i.siteStylesheetList=s.getSiteStylesWithFallback(i.siteAlias),Sys.logger.debug(`ViewSupport: Will include ${i.siteStylesheetList.length} configured stylesheet(s): \"${i.siteStylesheetList.join(\", \")}\".`),i.siteFiles=D.scripts.getSiteFiles(e,t,i.siteAlias,o,m),i.modules=D.scripts.getModules(e,t,i.siteAlias,o,m),!m){i.analytics=D.analytics.get(i),i.widgets={strossle:this.api.v1.config.get(\"widgets.strossle.strossle_id\")},i.consent={cookieconsent:this.api.v1.config.get(\"consent.cookieconsent.show\"),cookieconsent_culture:this.api.v1.config.get(\"consent.cookieconsent.culture\")||\"NB\"},this.api.v1.config.get(\"cookieConsent.enabled\")&&D.scripts.required.push({url:\"/view-resources/public/common/cookieConsent.js\",requireDom:!1}),\"desktop\"===this.api.v1.viewport.getName()&&t.get(\"fields.style_slidein\")&&(i.style_slidein=!0,D.scripts.required.push({url:\"/view-resources/public/common/SlideIn/SlideIn.js\",requireDom:!1}));const s=this.api.v1.config.get(\"adEnvironment\")||{},a=\"1\"===t.get(\"fields.hideAds\"),n=\"1\"===t.get(\"fields.hideSkyscraperAds\")||!1,o=\"1\"===t.get(\"fields.hideTopBannerAd\")||!1;if(!a&&s&&\"adnuntius\"===s.name)try{i.adnuntius=l.getAdnuntiusSettings(this.api,e,t,s,i.site,n,o)}catch(e){Sys.logger.warn(`[PageData] Failed to prepare Adnuntius ads: ${e.toString()}`)}if(!a&&s&&\"google\"===s.name)try{i.googleAds=l.getGoogleSettings(this.api,e,t,s,i.site,n,o)}catch(e){Sys.logger.warn(`[PageData] Failed to prepare Google ads: ${e.toString()}`)}}if(this.api.v1.util.request.hasQueryParam(\"fontpreview\")&&(i.fontpreview=this.api.v1.util.request.getQueryParam(\"fontpreview\"),i.analytics=null),i.page_settings=this.page.settings.get({pageType:\"notice\"===o?\"article\":o,socialLinks:i.social}),\"article\"===o){const s=this.api.v1.config.get(\"comments_provider.hideCommentsIfPaywall\")||!1,a=this.api.v1.properties.get(\"paywall\")||{},n=lab_api.v1.app.mode.isFront()&&a.active&&!a.hasAccess&&s,l=!1===m&&!1===n;if(t.get(\"fields.showcomments\")&&!n){if(this.api.v1.config.get(\"comments_provider.facebook\")){const e=this.api.v1.config.get(\"comments_provider.facebook.app_id\");e&&(i.facebook={display:l,displayPlaceholder:m,appId:e,pageId:r,url:i.fullUrl+(\"article\"===o?`/a/${r}`:\"\")},i.displayComments=!0)}if(this.api.v1.config.get(\"comments_provider.disqus\")){const e=this.api.v1.config.get(\"comments_provider.disqus.enable\"),t=this.api.v1.config.get(\"comments_provider.disqus.script\");e&&(i.disqus={display:l,displayPlaceholder:m,canonical:y,pageId:r,script:t},i.displayComments=!0)}const t=this.api.v1.config.get(\"comments_provider.commento\");t&&t.enable&&(i.commento={display:l,displayPlaceholder:m,canonical:y,usePageId:t.usePageId,pageId:r,script:t.script,cssOverride:t.cssOverride,descriptionText:t.descriptionText},i.displayComments=!0);const s=lab_api.v1.config.get(\"comments_provider.hyvor\");if(s&&s.websiteId){const t=e.get(\"fields.published\")||0;i.hyvor={display:l,displayPlaceholder:m,websiteId:s.websiteId,pageId:t>1646908200&&r},s.hidePageIdBeforeDate&&t<s.hidePageIdBeforeDate&&(i.hyvor.pageId=\"\"),i.displayComments=!0}const a=lab_api.v1.config.get(\"comments_provider.ifragasatt\");a&&(i.ifragasatt={display:l,displayPlaceholder:m,customerId:a.customer_id,articleId:`article${r}`},i.displayComments=!0)}}i.menus=this.page.menus.get({defaultSection:t.get(\"fields.defaultsection\"),section:t.get(\"primaryTags.section\")}),i.style_definitions=n.getStyleDefinitions(this.api),i.css_build=n.getInlineCSS(this.api),i.css_variables=n.getCssVariables(this.api),i.contact=this.api.v1.config.get(\"contact\");const x=!!t.get(\"fields.norobots\"),M=t.get(\"fields.hidefromfp_time\"),C=Math.round(a.getTime()/1e3);if(i.norobots=x||M&&M<=C||!1,\"article\"===o&&this.api.v1.config.get(\"embeddable.active\")&&(i.embeddable={active:!0,display:!!t.get(\"fields.displayEmbedButton\")&&\"embed\"!==i.device,aboveBodytext:!!t.get(\"fields.displayEmbedButtonAboveBodytext\")&&\"embed\"!==i.device,isFullContent:this.api.v1.util.request.getQueryString().indexOf(\"lab_content=full\")>-1,hasParallax:this.api.v1.model.query.hasChildOfType(e,\"parallax\",!0)}),Sys.logger.debug(`ViewSupport: Will include ${D.scripts.required.length} configured script(s): \"${D.scripts.required.map((e=>e.url)).join(\", \")}\".`),D.scripts.required.forEach((e=>{if(!e.placeholderKey&&e.requireDom&&(e.placeholderKey=\"requireDom\"),e.placeholderKey){const{placeholderKey:t}=e;e.placeholderKey={},e.placeholderKey[t]=!0}})),i.siteScriptList=D.scripts.required,i.paywall=this.getPaywallInfo(e,m),i.simplestreamEnabled=lab_api.v1.config.get(\"contentbox_settings.simplestream\")||!1,\"mailmojo\"===i.device&&this.setDefaultMailmojoData(e,t),\"article\"===o){const t=lab_api.v1.config.get(\"page_settings.article.ageWarnings\");if(Array.isArray(t)){const i=e.get(\"fields.published\");if(i){const s=this.getAgeWarningItem(i,t);s&&e.setFiltered(\"ageWarning\",s)}}}return i.featureFlags={responsive_mobile_fonts:!lab_api.v1.util.featureFlags.enabled(\"Disable responsive mobile fonts\",o)},i.clientSideConfig=JSON.stringify(c.buildConfig(this.api)),i}getAgeWarningItem(e,t){const i=Object.values(t).filter((e=>!!e.years&&!!e.label)).sort(((e,t)=>t.years-e.years)),s=new Date(1e3*e),a=Date.now()-s,n=new Date(a),o=Math.abs(n.getUTCFullYear()-1970);for(const e of i)if(o>=e.years)return e;return null}setDefaultMailmojoData(e,t){const i=lab_api.v1.config.get(\"lang\")||\"no\";e.setFiltered(\"lang\",i)}getCanonicalUrl(e,t,i,s){const a=e.get(\"fields.lab_canonical\");if(a)return a;if(\"front\"===t){const t=e.get(\"fields.hostpath\");if(t)return`${s}/${\"index\"===t?\"\":t}`}return`${s+e.get(\"fields.published_url\")}`}getStaticUrl(e,t,i,s){if(\"front\"===t){const t=lab_api.v1.util.request.getHeader(\"X-Labrador-404-Referer\");if(t)return`${s}${t}`;const i=e.get(\"fields.hostpath\");return i?`${s}/${\"index\"===i?\"\":i}`:`${s+e.get(\"fields.published_url\")}`}return`${lab_api.v1.properties.get(\"site\").domain}/a/${i}`}getCustomMetatags(){const e=lab_api.v1.config.get(\"customMetatags\")||[],t=lab_api.v1.config.get(\"customMetatagsKeyVal\")||[],i=[];for(const t of e){const e=Object.keys(t).map((e=>({key:e,value:t[e]})));i.push(e)}for(const e of t)e.length&&i.push(e);return i}getPaywallInfo(e,t){const i=lab_api.v1.properties.get(\"paywall\"),s=!t&&\"1\"===e.get(\"fields.paywall\"),a=lab_api.v1.config.get(\"paywall.provider\",{site:lab_api.v1.site.getSite().alias})||\"internal\",n=(!t&&e.get(\"fields.paywallSalesImage\"),!t&&s&&i.hasAccess&&\"1\"===e.get(\"fields.paywallShareable\"));let o;if(\"1\"===e.get(\"fields.paywallShareable\")){o=lab_api.v1.config.getConfig(\"pages.localisation.data.items.paywall.items.shareableArticle.items\")||{};for(const e of Object.keys(o))o[e]=lab_api.v1.locale.get(`paywall.shareableArticle.${e}`)||\"\"}return{enabled:s,settings:i,provider:a,shareable:n,shareableArticle:o,hasAccess:!s||!i.active||i.hasAccess,hidePaywallOffers:this.api.v1.util.request.hasQueryValue(\"lab_opts\",\"paywall_loginonly\"),paywallSalesImage:e.get(\"fields.paywallSalesImage\"),paywallSalesPitchContent:e.get(\"fields.paywallSalesPitchContent\"),paywallSalesPitchTitle:e.get(\"fields.paywallSalesPitchTitle\"),paywallLayoutType:e.get(\"fields.paywallPreview.paywallLayoutType\"),requiredProducts:JSON.stringify(this.api.v1.properties.get(\"app.paywall.requiredProducts\")||[])}}}class u{static parseCss(e,t=\"filtered.autodata\"){const i=e.get(t);if(!i||\"object\"!=typeof i)return;return[Object.values(i.cssObject||{}).join(\" \"),i.cssString||\"\",(i.cssArray||[]).join(\" \")].join(\" \").trim()}static parseAttributes(e){const t=e.get(\"filtered.autodata.attributesObject\");if(!t||\"object\"!=typeof t)return;return Object.keys(t).map((e=>({key:e,value:t[e]})))}static parseCustomData(e){const t=e.get(\"filtered.autodata.custom\");if(!t||\"object\"!=typeof t)return;const i={};for(const e of Object.keys(t))i[e]=Object.keys(t[e]).map((i=>({key:i,value:t[e][i]})));return i}static parseCustomDataFromFeed(e,t){const i=lab_api.v1.config.get(`${t}.autodata.mapping`)||{};if(!i||\"object\"!=typeof i)return;const s={labels:[]};if(i.labels)for(const t of Object.keys(i.labels))e[i.labels[t]]&&s.labels.push({key:t,value:e[i.labels[t]]});return s}}class h{constructor(e){this.api=e,this.pageData=new p(this.api,new a(this.api))}onReady(e,t){this.pageData.set(e,t),e.setFiltered(\"autodata_css\",u.parseCss(e)),e.setFiltered(\"autodata_attributes\",u.parseAttributes(e)),e.setFiltered(\"autodata_custom\",u.parseCustomData(e))}}class f{constructor(e){this.api=e,this.pageData=new p(this.api,new a(this.api))}onReady(e,t){this.pageData.set(e,t)}}class m{static textElements(e,t){const i={top:[],floating:[],bottom:[],positions:{kicker:\"\",title:\"\"}};let s=\"\",a=\"\";if(e.get(\"metadata.showKicker\")&&(t||e.get(\"fields.kicker\")||e.get(\"fields.origin_data_json.teaserKicker\")||e.get(\"fields.origin_data_json.kicker\"))&&(e.get(\"metadata.floatingKicker\")?(i.floating.push(\"kicker\"),i.positions.kicker=\"floating\",s=\"floating\"):e.get(\"metadata.kickerBelowImage\")?(i.bottom.push(\"kicker\"),i.positions.kicker=\"below\",s=\"bottom\"):(i.top.push(\"kicker\"),i.positions.kicker=\"above\",s=\"top\")),e.get(\"metadata.hideTitle\")||!t&&!e.get(\"fields.title\")||(e.get(\"metadata.floatingTitle\")?(i.floating.push(\"title\"),i.positions.title=\"floating\",a=\"floating\"):e.get(\"metadata.titleAboveImage\")?(i.top.push(\"title\"),i.positions.title=\"above\",a=\"top\"):(i.bottom.push(\"title\"),i.positions.title=\"below\",a=\"bottom\")),e.get(\"metadata.kickerBelowTitle\")&&e.get(\"metadata.showKicker\")&&a){if(s){const e=i[s].indexOf(\"kicker\");-1!==e&&i[s].splice(e,1)}const e=i[a],t=e.indexOf(\"title\");-1!==t?e.splice(t+1,0,\"kicker\"):e.push(\"kicker\"),i.positions.kicker=\"belowTitle\",s=a}return!e.get(\"metadata.hidesubtitle\")&&(t||e.get(\"fields.subtitle\")||e.get(\"fields.origin_data_json.teaserSubtitle\"))&&(e.get(\"metadata.floatingSubtitle\")?i.floating.push(\"subtitle\"):e.get(\"metadata.subtitleAboveImage\")?i.top.push(\"subtitle\"):i.bottom.push(\"subtitle\")),i}}class y{static convertToIso639(e){let t=\"\";return e&&(t=3===e.length?e.toLowerCase():e.includes(\"-\")?e.split(\"-\")[0].toLowerCase():e.toLowerCase()),t}}class b{static autoSizeText(e,t){const i={1:100,2:70,3:50,4:45,5:40,6:35,7:30,8:26,9:22,10:20,11:18,12:17,13:16,14:15,15:14,16:13,17:12,18:11,19:10,20:9,21:8,22:7,23:6,24:5,25:4},s=e.innerHTML.replace(/&nbsp;/,\"\");if(e.querySelector(\"br\")||e.querySelector(\".auto-font-size-line-br\")){const t=this.handleBreaks(s);e.innerHTML=\"\",t.forEach(((i,s)=>{e.innerHTML+=`<span class=\"auto-font-size-line${s<t.length?\" auto-font-size-line-br\":\"\"}\">${i} </span>`}))}else{const i=this.removeHTMLTags(s),a=this.splitSentence(i,t,\"default\");e.innerHTML=\"\";for(const t of a)e.innerHTML+=`<span class=\"auto-font-size-line\">${t} </span>`}const a=e.querySelectorAll(\".auto-font-size-line\"),n=e.clientWidth;for(const e of a){const t=i[e.innerText.length]||5;e.clientWidth<n?this.enlargeTitle(e,n,t):e.clientWidth>n&&this.shrinkTitle(e,n,t)}return e.innerHTML}static handleBreaks(e){let t=this.removeHTMLTags(e).split(/<br\\s*[^>]*>/gi);return t=t.filter((e=>e.trim().length>0)),t}static removeFontSize(e){const t=e.innerHTML;return this.removeHTMLTags(t)}static removeHTMLTags(e){let t=e.replace(/<span class=\"auto-font-size-hyphen\">-<\\/span>\\s?/g,\"\");return t=t.replace(/<span class=\"[^\"]*\\bauto-font-size-line-br\\b[^\"]*\"[^>]*>(.*?)<\\/span>/g,\"$1<br>\"),t=t.replace(/<span class=\"[^\"]*\\bauto-font-size-line\\b[^\"]*\"[^>]*>(.*?)<\\/span>/g,\"$1\"),t=t.replace(/<span[^>]*>([^<]*)<\\/span>/g,\"$1\"),t=t.replace(/(\\r\\n|\\n|\\r)/g,\"\"),t}static enlargeTitle(e,t,i,s=100){let a=i;for(;e.clientWidth<t&&a<=s;)a+=1,e.style.setProperty(\"--lab-auto-font-size\",`${a}cqi`);for(;e.clientWidth>=t||a>s;)a-=.1,e.style.setProperty(\"--lab-auto-font-size\",`${a}cqi`)}static shrinkTitle(e,t,i){let s=i;for(;e.clientWidth>t;)s-=.1,e.style.setProperty(\"--lab-auto-font-size\",`${s}cqi`)}static splitSentence(e,t,i){const{length:s}=e,a=this.findRules(t,i),n=this.findNumberOfLines(a.ranges,s)||1,o=a.maxWordLength||null,r=a.minLineLength||null;return this.splitTextEvenly(e,n,o,r,t.regex)||[]}static findRules(e,t){return{...e.formats[t]}}static findNumberOfLines(e,t){const i={maxLineLength:20,numberOfLines:1};for(const s of e)if(t<=s.maxCharacters){i.numberOfLines=s.numberOfLines,i.maxLineLength=s.maxCharacters/s.numberOfLines;break}return i}static checkRegex(e,t,i){let s=t;const a=[];return Array.from(Object.entries(e),(([,e])=>e)).forEach((e=>{const t=new RegExp(e,\"g\"),i=s.match(t);i&&a.push(...i)})),a.forEach((e=>{const t=e.replace(/ /g,i);s=s.replace(e,t)})),s}static splitStringIntoParts(e,t,i,s,a){const n=this.checkRegex(i,e,\"___\").split(\" \"),o=[];let r=\"\";return n.forEach((e=>{const i=e.trim().replace(new RegExp(\"___\",\"g\"),\" \");if(i.includes(\"-\"))r.length+i.length+1>t?(o.push(r),r=i):r+=(r.length>0?\" \":\"\")+i;else{const e=this.splitWord(i,s);e.forEach(((i,s)=>{r.length+i.length+1>t?(o.push(r),r=i):r+=(r.length>0?\" \":\"\")+i,s<e.length-1&&(r+='<span class=\"auto-font-size-hyphen\">-</span>')}))}})),r.length>0&&o.push(r),o}static splitWord(e,t){const i=[];let s=e;for(;s.length>t;)i.push(s.substring(0,t)),s=s.substring(t);return s.length>0&&i.push(s),i}static splitTextEvenly(e,t,i,s,a){const n=e.trim(),o=Math.ceil(n.length/t.numberOfLines);let r=this.splitStringIntoParts(n,o,a,i,t.numberOfLines);if(s&&(r=this.mergeShortLines(r,s)),r.length>t.numberOfLines){const e=/<span class=\"auto-font-size-hyphen\">-<\\/span>$/,t=r.pop();e.test(r[r.length-1])?r[r.length-1]=r[r.length-1].replace(e,\"\")+t:r[r.length-1]+=` ${t}`}return r}static mergeShortLines(e,t){const i=[];for(let s=0;s<e.length;s++){let a=e[s].trim();a.length<t&&s<e.length-1&&(a+=` ${e[s+1]}`,s++),i.push(a)}if(i.length>1){const e=i[i.length-1];e.length<t&&(i[i.length-2]+=` ${e}`,i.pop())}return i}}class v{constructor(e){this.api=e,this.imageServer=this.api.v1.properties.get(\"image_server\"),this.rootModel=this.api.v1.model.query.getRootModel(),this.domain=this.api.v1.site.getSite().domain||this.api.v1.properties.get(\"customer_front_url\"),this.fallbackLanguage=this.api.v1.config.get(\"contentLanguage\")||\"\",this.autoFontSizeConfig=this.api.v1.config.get(\"autoFontSize\")||[],this.autoFontSizePageSettings=Boolean(!!this.rootModel&&this.rootModel.get(\"fields.autoFontSize\")),this.hasAutoFontSize=this.autoFontSizePageSettings&&this.autoFontSizeConfig.enabled,this.autoFontSizeDone=!1,this.dateTimeHelper=new r(this.api.v1.config.get(\"lang\")||void 0)}onInserted(e){if(this.api.v1.app.mode.isEditor()&&this.hasAutoFontSize){e.set(\"state.autoFontSizeReRender\",!0,{notify:!1});const t=(e,t,i)=>{e.get(\"fields.title\")===e.get(\"state.title\")?e.set(\"state.autoFontSizeReRender\",!1,{notify:!1}):(e.set(\"state.autoFontSizeReRender\",!0,{notify:!1}),e.set(\"metadata.autoFontSizeDone\",!1,{notify:!1}))};this.api.v1.model.bindings.bind(e,\"fields.title\",t)}}onReady(e,t){e.setFiltered(\"layout\",m.textElements(t,this.api.v1.app.mode.isEditor()));let i=e.get(\"fields.published_url\")||\"\";!/^https?/.test(i)&&i&&(i=this.domain+i),e.setFiltered(\"published_url\",i),e.setFiltered(\"published_url_rss\",i.replace(/&/g,\"&amp;\"))}onRender(e,t){const i=e.get(\"instance_of\")||e.get(\"fields.origin_data_json.id\"),s=e.get(\"fields.published\")||e.get(\"fields.origin_data_json.published\"),a=e.get(\"fields.origin_data_json.teaserTitle\")||t.get(\"fields.title\")||\"\",n=e.get(\"fields.origin_data_json.teaserSubtitle\")||t.get(\"fields.subtitle\")||\"\",o=e.get(\"fields.origin_data_json.published\")||e.get(\"fields.published\"),r=e.get(\"fields.origin_data_json.teaserKicker\")||e.get(\"fields.origin_data_json.kicker\")||t.get(\"fields.kicker\"),l=e.get(\"fields.site_id\")||e.get(\"fields.origin_data_json.site_id\"),d=e.get(\"fields.origin_data_json.seolanguage\")||e.get(\"fields.seolanguage\")||this.fallbackLanguage,g=e.get(\"fields.origin_data_json.teaserAudio\")||e.get(\"fields.audio\"),c=e.get(\"fields.origin_data_json.teaserAudio_style_json\")||e.get(\"fields.audioInfo\")||{},p=e.get(\"fields.origin_data_json.addRelNoFollow\")||e.get(\"fields.addRelNoFollow\")||!1,h=e.get(\"fields.origin_data_json.addRelSponsored\")||e.get(\"fields.addRelSponsored\")||!1,f=e.get(\"fields.origin_data_json.addRelUgc\")||e.get(\"fields.addRelUgc\")||!1;e.setFiltered(\"published\",s),e.setFiltered(\"title\",a),e.setFiltered(\"kicker\",r),e.setFiltered(\"subtitle\",n),e.setFiltered(\"articleId\",i),e.setFiltered(\"section\",e.get(\"fields.origin_data_json.section_tag\")||e.get(\"fields.section\")||\"\"),e.setFiltered(\"base_url\",this.domain),e.setFiltered(\"published_sitemap\",o),e.setFiltered(\"canonical_url\",`${this.getSiteDomain(l)}/a/${i}`),e.setFiltered(\"tags\",e.get(\"tags\")||[]),e.setFiltered(\"languageIso639\",y.convertToIso639(d));const m=(new Date).getTime()-1728e5;if(e.setFiltered(\"articleOutOfDate_sitemap\",m>Math.floor(new Date(o).getTime())),e.setFiltered(\"addRelNoFollow\",p),e.setFiltered(\"addRelSponsored\",h),e.setFiltered(\"addRelUgc\",f),!this.api.v1.config.get(\"showHiddenTagsOnFront\")){const t=(this.api.v1.config.get(\"tagsToHide\")||\"\").split(\",\").map((e=>e.trim()))||[],i=(e.get(\"tags\")||[]).filter((e=>!t.includes(e)));e.setFiltered(\"tags\",i)}if(l){const t=this.api.v1.site.getSiteById(l);t&&e.setFiltered(\"site_alias\",t.alias)}if(g){const t={url:g};if(c){const e=JSON.parse(c);t.title=e.title||null,t.fileType=e.fileType||null,t.playTime=e.playTime||null}e.setFiltered(\"audio\",t)}const b=e.get(\"fields.origin_data_json.showbylineonfp\")||t.get(\"fields.displayByline\")||!1;if(b){const i=t.get(\"fields.byline\")||e.get(\"fields.origin_data_json.byline\"),s=t.get(\"fields.bylineImage\")||e.get(\"fields.origin_data_json.bylineImage\"),a=(e.get(\"fields.origin_data_json.full_bylines\")||e.get(\"fields.full_bylines_json\")||[]).map((e=>({firstname:e.firstname,lastname:e.lastname,description:e.description,imageUrl:e.imageUrl?this.getImageUrl(`${e.imageUrl}&width=90&height=90`):\"\"})));a.length||!i&&!s||a.push({firstname:i,lastname:\"\",imageUrl:s?this.getImageUrl(`${s}&width=90&height=90`):\"\"}),e.setFiltered(\"bylines\",a),s&&e.setFiltered(\"bylineImage\",`${s}&width=90&height=90`)}e.setFiltered(\"displayByline\",b);const v=t.get(\"fields.displayPublishedDate\")||!1,_=this.api.v1.locale.get(\"dates.monthdayyear\",{noRender:!0});if(e.setFiltered(\"displayPublishedDate\",v),v)if(this.api.v1.app.mode.isEditor()&&!s)e.setFiltered(\"publishedDate\",_);else if(this.api.v1.app.mode.isEditor()||s){const t=new Date(s),i=this.dateTimeHelper.format(t,_);e.setFiltered(\"publishedDate\",i)}else e.setFiltered(\"displayPublishedDate\",!1);let k=e.get(\"fields.origin_data_json.paywall\")||e.get(\"fields.paywall\")||!1;if(k=1===k||\"1\"===k||!0===k||null,k){const i={display:!0,displayInNewsletter:!0,...this.api.v1.config.get(\"paywall.label\")},s=this.api.v1.config.get(\"paywall.label.text.content\"),a=this.api.v1.config.get(\"paywall.label.icon.content\"),n={text:{content:null==s?\"Plus\":this.api.v1.config.get(\"paywall.label.text.content\")},icon:{content:null==a?\"fi-plus\":this.api.v1.config.get(\"paywall.label.icon.content\")}};if(Object.assign(i,n),i.display){i.layout={noImage:!0,float:null};const s=this.api.v1.model.query.getChildOfType(e,\"image\")||this.api.v1.model.query.getChildOfType(e,\"graphic\");if(s&&s.get(\"instance_of\")){const e=this.api.v1.view.getView(s,t.getViewport());i.layout.float=this.api.v1.config.get(\"paywall.label.labelPosition\")||e.get(\"fields.float\"),i.layout.noImage=!!t.get(\"metadata.hideimage\")}e.setFiltered(\"paywallLabel\",i)}}else e.setFiltered(\"paywallLabel\",null);e.setFiltered(\"paywall\",k);const S=e.get(\"metadata.tagPlacement\")||\"underImage\";e.setFiltered(\"tagPlacement.underImage\",\"underImage\"===S),e.setFiltered(\"tagPlacement.underText\",\"underText\"===S);const w=e.get(\"metadata.sectionPlacement\")||\"floating\";e.setFiltered(\"sectionPlacement.floating\",\"floating\"===w),e.setFiltered(\"sectionPlacement.underImage\",\"underImage\"===w),e.setFiltered(\"sectionPlacement.underText\",\"underText\"===w),e.setFiltered(\"articleWidth\",t.getPixelWidth()),e.setFiltered(\"autodata_css\",u.parseCss(e)),e.setFiltered(\"autodata_content_css\",u.parseCss(e,\"filtered.autodata_content\")),e.setFiltered(\"autodata_attributes\",u.parseAttributes(e)),e.setFiltered(\"autodata_custom\",u.parseCustomData(e)),this.autoFontSizeConfig.enabled&&(this.autoFontSizeDone=e.get(\"metadata.autoFontSizeDone\"))}onRendered(e,t){if(this.api.v1.app.mode.isEditor()&&this.autoFontSizeConfig.enabled){const i=()=>{const e=t.getMarkup().querySelector(\".headline\");b.removeFontSize(e),this.api.v1.tool.off(\"ended\",i)};if(\"desktop\"===t.viewport&&this.hasAutoFontSize&&e.get(\"metadata.autoFontSizeEnabled\")&&(this.api.v1.tool.on(\"started\",(t=>{\"fields.title\"===t.key&&t.model===e&&i()})),e.get(\"state.autoFontSizeReRender\")&&e.get(\"fields.title\")&&!this.autoFontSizeDone&&e.get(\"metadata.autoFontSizeEnabled\"))){const i=t.getMarkup().querySelector(\".headline\"),s=b.autoSizeText(i,this.autoFontSizeConfig);e.set(\"state.autoFontSizeReRender\",!1,{notify:!1}),e.set(\"state.title\",s,{notify:!1}),e.set(\"metadata.autoFontSizeDone\",!0,{notify:!1}),e.set(\"fields.title\",s)}}}onCreated(e){this.hasAutoFontSize&&null===e.get(\"metadata.autoFontSizeEnabled\")&&e.set(\"metadata.autoFontSizeEnabled\",!0,{notify:!1})}getSiteDomain(e){if(!e)return\"\";const t=this.api.v1.site.getSiteById(e);return t?t.domain:\"\"}getImageUrl(e){return e?e.startsWith(\"http\")?e:this.imageServer+e:\"\"}}class _{constructor(e){this.api=e,this.isEditor=this.api.v1.app.mode.isEditor(),this.isFragmentMode=this.api.v1.app.mode.isFragmentMode(),this.lazyloadImages=!this.isEditor&&!!this.api.v1.config.get(\"imageLoading.lazy\")}check(e,t){if(!this.lazyloadImages||t.getProperty(\"image.noLazy\"))return!1;const i=lab_api.v1.model.query.getParentOfType(e,\"row\");return!(i&&!this.isFragmentMode&&i.getModelIndex()<5)}}class k{constructor(e){this.api=e,this.lazyloadHelper=new _(e),this.api.v1.app.mode.isEditor()&&(this.cropIds=[],this.rootModel=this.api.v1.model.query.getRootModel(),this.frontcropBinding=this.frontCropChanged.bind(this),this.api.v1.model.bindings.bind(this.rootModel,\"frontCrop\",this.frontcropBinding),this.frontcropBinding(this.rootModel,\"frontCrop\",this.rootModel.get(\"frontCrop\")),this.api.v1.ns.set(\"imageFilter.preview\",this.prepareVisualFilters)),this.isFragmentMode=this.api.v1.app.mode.isFragmentMode()}onViewHelper(e,t){if(e.parent){this.prepareForSlideshow(e,t);const i=t.getViewport();if(this.api.v1.view.getView(e.parent,i).get(\"metadata.hasFullWidth\")){const t=\"mobile\"===i?600:1800;e.setFiltered(`width.${i}`,t)}else e.setFiltered(`width.${i}`,null);e.setFiltered(\"allowFullwidth\",\"image\"!==e.parent.getType())}}onRender(e,t){this.setVisualFilters(e,t),e.setFiltered(\"lazyloadImages\",this.lazyloadHelper.check(e,t)),this.setCaptionOptions(e.getParent(),e,t);const i=t.get(\"fields.float\");e.setFiltered(\"hasFloat\",!!i&&\"floatNone\"!==i)}onRendered(e,t){if(!this.api.v1.app.mode.isEditor()||!this.cropIds.length)return;const i=parseInt(e.get(\"instance_of\"),10);this.cropIds.includes(i)&&this.markFrontCrop(t,i)}setVisualFilters(e,t){e.setFiltered(\"filters\",this.prepareVisualFilters(e,t))}prepareVisualFilters(e,t,i=!1){const s=[],a=e.get(\"metadata.filter_blur_active\")?e.get(\"metadata.filter_blur_value\")||0:null,n=e.get(\"metadata.filter_sepia_active\")?e.get(\"metadata.filter_sepia_value\")||0:null,o=e.get(\"metadata.filter_saturate_active\")?e.get(\"metadata.filter_saturate_value\")||1:null,r=e.get(\"metadata.filter_brightness_active\")?e.get(\"metadata.filter_brightness_value\")||1:null,l=e.get(\"metadata.filter_contrast_active\")?e.get(\"metadata.filter_contrast_value\")||1:null;return null!==a&&s.push(`blur(${a}px)`),null!==n&&s.push(`sepia(${n})`),null!==o&&s.push(`saturate(${o})`),null!==r&&s.push(`brightness(${r})`),null!==l&&s.push(`contrast(${l})`),i?{filter:s.join(\" \")}:s.length?`filter: ${s.join(\" \")};`:null}markFrontCrop(e,t){const i=document.createElement(\"span\");i.classList.add(\"labicon-imgFrontCrop\",\"is-frontcrop\"),i.setAttribute(\"title\",\"Image used as front crop. Click to edit\"),i.addEventListener(\"click\",(e=>{e.stopPropagation(),e.preventDefault(),this.api.v1.apps.start(\"ArticleSettings\")}),!1),e.getMarkup().appendChild(i)}frontCropChanged(e,t,i){let s=this.getImages(this.cropIds);this.cropIds=[],this.updateImages(s),i&&(i.pano&&i.pano.instance_of&&this.cropIds.push(i.pano.instance_of),i.height&&i.height.instance_of&&!this.cropIds.includes(i.height.instance_of)&&this.cropIds.push(i.height.instance_of),s=this.getImages(this.cropIds),this.updateImages(s))}getImages(e){const t=[];for(const i of e)t.push(...this.api.v1.model.query.getModelsByKeyAndValue(\"instance_of\",i));return t}updateImages(e){for(const t of e)this.api.v1.model.addToRedrawQueue(t)}setCaptionOptions(e,t,i){const s=e?this.api.v1.view.getView(e,i.getViewport()):null,a=(e,t,i)=>{if(e){const t=e.get(i);if(!t&&null!==t)return!1;if(t)return!0}return!!t.get(i)};let n=a(s,i,\"fields.displayCaption\"),o=n||null===i.get(\"fields.displayCaption\")&&!i.get(\"metadata.hidecaption\");!this.api.v1.app.mode.isFront()||t.get(\"fields.imageCaption\")||t.get(\"fields.byline\")||(n=!1,o=!1);const r=a(s,i,\"fields.expandableCaption\"),l=a(s,i,\"fields.truncateCaption\");let d=t.get(\"fields.imageCaption\");!t.parent||i.getProperty(\"image.useCaptionForTitle\")&&d||(d=t.parent.get(\"fields.title\")||\"\");const g={title:d,display:n,displayDefault:o,truncate:l,expandable:r||l};t.setFiltered(\"captionOptions\",g)}prepareForSlideshow(e,t){if(!e.parent||\"slideshow\"!==e.parent.getType())return;if(t.get(\"fields.whRatio\"))return void e.setFiltered(\"whRatio\",null);const i=e.get(\"fields.originalWidth\"),s=e.get(\"fields.originalHeight\");if(s&&i){const t=s/i;e.setFiltered(\"whRatio\",t)}}}class S extends r{constructor({languageCode:e}={}){super(\"en\"),this.languageCode=e||lab_api.v1.config.get(\"contentLanguage\")}str(e,{data:t,noRender:i}={}){return lab_api.v1.locale.get(`dates.${e}`,{data:t,noRender:i})}timestampToNiceDate(e,t=!1){const i=(new Date).getTime(),s=new Date(1e3*e).getTime()-0,a=parseInt((i-s)/1e3/60,10);if(a<60)return a<1?this.str(\"now\"):this.str(\"durationSince\",{data:{count:a,period:t?this.str(\"min\"):1===a?this.str(\"minute\"):this.str(\"minutes\"),ago:t?\"\":this.str(\"ago\")}});if(a<1440){const e=parseInt(a/60,10);return this.str(\"durationSince\",{data:{count:e,period:1===e?this.str(\"hour\"):this.str(\"hours\"),ago:t?\"\":this.str(\"ago\")}})}if(parseInt(a/1440,10)<30){const e=parseInt(a/1440,10);return this.str(\"durationSince\",{data:{count:e,period:1===e?this.str(\"day\"):this.str(\"days\"),ago:t?\"\":this.str(\"ago\")}})}return this.format(this.timestampToDate(e),this.str(\"monthdayyear\",{noRender:!0}))}}class w{constructor(e){this.api=e,this.dateTimeHelper=new S}onRender(e,t){const i=e.get(\"fields.modified\")||e.get(\"fields.published\");if(null!=i){const t=new Date(1e3*i);e.setFiltered(\"niceDate\",this.dateTimeHelper.timestampToNiceDate(i)),e.setFiltered(\"publishedDate\",this.dateTimeHelper.utcFormat(t,`${this.api.v1.locale.get(\"dates.monthdayyear\",{noRender:!0})} ${this.api.v1.locale.get(\"dates.hourminute\",{noRender:!0})}`)),e.setFiltered(\"isoDate\",t.toISOString())}}}class T{constructor(e){this.api=e,this.baseApiUrl=this.api.v1.properties.get(\"front_api_url\"),this.siteId=this.api.v1.properties.get(\"site.id\"),this.cache=new Map,this.defaultMaxCount=100,this.isEditor=this.api.v1.app.mode.isEditor()}onPrepareViewHelper(e,t){const i=e.get(\"fields.site\")||this.siteId,s=t.get(\"fields.maxNoticesCount\")||this.defaultMaxCount,a=(e.get(\"fields.tags\")||\"\").toLowerCase().split(\",\").filter((e=>\"\"!==e)),n=this.prepareTags(a),o=this.prepareQuery(n,!1),r=this.prepareQuery(n,!0),l=`${this.baseApiUrl}/notice?content=full&site_id=${i}&limit=${s}`;e.setFiltered(\"query\",o),e.setFiltered(\"clientQuery\",r),e.setFiltered(\"url\",l)}onReady(e,t){const i=t.get(\"external\"),s=e.get(\"filtered.noFetch\")||!1,a=e.get(\"metadata.blacklist\")||[],n=t.get(\"fields.maxNoticesCount\")||this.defaultMaxCount;if(!s&&i){e.setFiltered(\"noFetch\",!0);const t=e.get(\"fields.pinnedNotices_json\")||[];let s=i.result;if(this.api.v1.app.mode.isEditor()){const t=this.api.v1.model.query.getModelsByType(\"notice\",e.children);for(const e of t)this.api.v1.model.delete(e,!0,!0)}s=s.slice(0,n),s.forEach((i=>{const{attribute:s={},field:n={}}=i.notice;if(a.includes(parseInt(s.id||0,10)))return void Sys.logger.warn(`Notice with id ${s.id} is blacklisted from Livefeed and will not be displayed.`);\"object\"==typeof n.bodytext&&(n.bodytext=\"\");const{title:o,bodytext:r,published:l,modified:d,published_url:g,userName:c}=n,p=[];if(i.notice.children&&i.notice.children.image){const e=Array.isArray(i.notice.children.image)?i.notice.children.image:[i.notice.children.image];for(const t of e){let e={};if(n.structure_json&&t.attribute.id)try{const i=JSON.parse(n.structure_json);for(const s of i)if(\"bodytext\"===s.type){const i=this.getStructure(s.children||[],t.attribute.id);e=i?i.metadata:{};break}}catch(e){Sys.logger.warn(`Failed to parse structure data: ${e.toString()}`)}e.hasFullWidth={desktop:!1,mobile:!1},p.push(this.getImageData(t,e||{}))}}this.api.v1.model.insert.atPath({path:e.getPositionedPath(),data:{type:\"notice\",contentdata:{id:s.id,fields:{title:o,bodytext:r,published:l,modified:d,published_url:g,userName:c,pinned:t.includes(s.id)},tags:i.notice.tag?i.notice.tag.tag:\"\"},state:{isNonPersistent:!0,editNonPersistent:!0},children:p},options:{silent:!0,index:t.includes(s.id)?0:void 0}})})),e.children.sort(((e,i)=>t.includes(e.getId())?-1:t.includes(i.getId())?1:i.getId()-e.getId())),this.api.v1.app.mode.isEditor()&&(this.api.v1.model.addToRedrawQueue(e,!0),this.api.v1.app.save())}const o=this.api.v1.config.get(\"contentbox_settings.livefeed.updateFrequency\")||[{range:[0,600],interval:10},{range:[600,1200],interval:30},{range:[1200],interval:60}];e.setFiltered(\"updateFrequency\",JSON.stringify(o))}onRender(e,t){const i=t.get(\"fields.placeholder\");e.setFiltered(\"placeholder\",i||this.api.v1.locale.get(\"emptyState.noContentText\",{noRender:!0})),e.setFiltered(\"initialRenderTime\",(new Date).getTime()),e.setFiltered(\"dateStrings\",JSON.stringify({now:this.api.v1.locale.get(\"dates.now\",{noRender:!0}),monthdayyear:this.api.v1.locale.get(\"dates.monthdayyear\",{noRender:!0}),hourminute:this.api.v1.locale.get(\"dates.hourminute\",{noRender:!0}),durationSince:this.api.v1.locale.get(\"dates.durationSince\",{noRender:!0}),minute:this.api.v1.locale.get(\"dates.minute\",{noRender:!0}),minutes:this.api.v1.locale.get(\"dates.minutes\",{noRender:!0}),hour:this.api.v1.locale.get(\"dates.hour\",{noRender:!0}),hours:this.api.v1.locale.get(\"dates.hours\",{noRender:!0}),day:this.api.v1.locale.get(\"dates.day\",{noRender:!0}),days:this.api.v1.locale.get(\"dates.days\",{noRender:!0}),ago:this.api.v1.locale.get(\"dates.ago\",{noRender:!0})}))}onChildAdded(e,t){if(this.isEditor&&\"notice\"!==t.getType()){if(e.children.indexOf(t)>0)return;const i=this.api.v1.model.query.getModelsByType(\"notice\",e.children).filter((e=>e.get(\"fields.pinned\")));if(!i.length)return;let s=0;for(const t of i)e.children.indexOf(t)>s&&(s=e.children.indexOf(t));s>0&&this.api.v1.model.addChild(e,t,s,!1)}}prepareQuery(e,t=!1){const i=t?[\"(visibility_status:P OR visibility_status:H)\"]:[\"visibility_status:P\"];return e.length>0&&i.push(`(${e.join(\" OR \")})`),`&query=${encodeURIComponent(i.join(\" AND \"))}`}prepareTags(e){return e.map((e=>{let t=e.trim();return t.indexOf(\" \")>-1&&(t=`\"${t}\"`),`tag:${t}`}))}getImageData(e,t){return this.api.v1.model.serialize.apiToView({type:\"image\",data:e,meta:t})}onSettingsPanel(e,t,i){const s={layout:null,container:null};return{onDisplay:({model:e,view:t,config:i,markup:a,modal:n})=>{s.layout=a.querySelector(\"#layout\"),s.container=a.querySelector(\".horizontalOptions\"),s.layout&&s.container&&s.layout.addEventListener(\"change\",(e=>{\"1\"===s.layout.value?s.container.classList.remove(\"lab-hidden\"):s.container.classList.add(\"lab-hidden\")}))},onHide:({model:e,view:t,config:i,markup:a,modal:n})=>{s.layout=null,s.container=null,e.setFiltered(\"noFetch\",!1)}}}getStructure(e,t){for(const i of e){if(\"image\"===i.type&&i.node_id==t)return i;if(i.children){const e=this.getStructure(i.children,t);if(e)return e.metadata&&!e.metadata.bodyTextIndex&&i.metadata&&i.metadata.bodyTextIndex&&(e.metadata.bodyTextIndex=i.metadata.bodyTextIndex),e}}return null}}class F{constructor(e){this.api=e}onRender(e,t){const i=this.api.v1.config.get(\"contentbox_settings.adnuntiusAd.formats\")||[],s=e.get(\"fields.format\"),a=i.filter((e=>e.format===s))[0]||{};if(e.setFiltered(\"adData\",a),e.setFiltered(\"isDebug\",this.api.v1.util.request.hasQueryParam(\"debug\")||e.get(\"metadata.isDebug\")),!this.api.v1.app.mode.isEditor()){const t=e.parent&&!0===e.parent.get(\"metadata.hideOnTablet\")&&\"tablet\"===this.api.v1.config.get(\"xUaDevice\");e.setFiltered(\"hideOnTablet\",t)}if(this.api.v1.app.mode.isEditor()){const t=this.api.v1.model.root.getType().replace(\"page_\",\"\"),a=[];i.forEach((e=>{if(e.selectable&&e.selectable.indexOf(t)>-1||e.selectableOn&&!0===e.selectableOn[t])if(e.format===s){const t={...e};t.selected=!0,a.push(t)}else a.push(e)})),e.setFiltered(\"formatConfigKeys\",a)}const n=this.api.v1.config.get(\"contentbox_settings.adnuntiusAd.label\")||\"Annonse\",o=e.get(\"fields.label\")||n;e.setFiltered(\"label\",o),e.setFiltered(\"displayLabel\",o&&(e.get(\"metadata.css\")||\"\").includes(\"display-label\"));if((e.get(\"metadata.css\")||\"\").includes(\"sticky\")){const t=`top: ${this.api.v1.config.get(\"contentbox_settings.adnuntiusAd.spacingTop\")||120}px;`;e.setFiltered(\"spacingTop\",t)}}}class ${constructor(e){this.api=e}onRender(e,t){const i=this.api.v1.model.query.getRootModel(),s=this.api.v1.config.get(\"contentbox_settings.googleAd.formats\")||[],a=e.get(\"fields.format\"),n=this.api.v1.config.get(\"adEnvironment\")||{},o={bidding:n.bidding,hideOnTabletWidth:n.hideOnTabletWidth||1316,fetchMarginPercent:n.fetchMarginPercent||150,renderMarginPercent:n.renderMarginPercent||150};e.setFiltered(\"googleAds\",o);const r=((e,t)=>{for(let i=0;i<t.length;i++)if(t[i].format===e)return{...t[i]};return{}})(a,s);if(r.key=e.get(\"metadata.key\")||\"row\",o.bidding&&o.bidding.enabled&&o.bidding.provider&&o.bidding.provider.name&&\"livewrapped\"===o.bidding.provider.name){const e=()=>{const e=()=>(65536*(1+Math.random())|0).toString(16).substring(1);return`${e()+e()}-${e()}-${e()}-${e()}-${e()}${e()}${e()}`};r.code&&r.code.endsWith(\"-1\")&&(r.code+=`_${e()}`)}\"mpu_top\"===r.code&&(r.isMpuTop=!0),e.setFiltered(\"adData\",r),e.setFiltered(\"isDebug\",this.api.v1.util.request.hasQueryParam(\"debug\")||e.get(\"metadata.isDebug\"));const l=this.api.v1.config.get(\"contentbox_settings.googleAd.label\")||\"Annonse\",d=e.get(\"fields.label\")||l;if(e.setFiltered(\"label\",d),!this.api.v1.app.mode.isEditor()){const t=e.parent&&!0===e.parent.get(\"metadata.hideOnTablet\")&&\"tablet\"===this.api.v1.properties.get(\"xUaDevice\");e.setFiltered(\"hideOnTablet\",t)}if(this.api.v1.app.mode.isEditor()){const t=i.get(\"type\").replace(\"page_\",\"\"),a=[];s.forEach((e=>{(e.selectable&&e.selectable.indexOf(t)>-1||e.selectableOn&&!0===e.selectableOn[t])&&a.push(e)})),e.setFiltered(\"formatConfigKeys\",a)}if((e.get(\"metadata.css\")||\"\").includes(\"sticky\")){const t=`top: ${this.api.v1.config.get(\"contentbox_settings.googleAd.spacingTop\")||120}px;`;e.setFiltered(\"spacingTop\",t)}}}class D{constructor({path:e=null,selector:t=null,data:i={},options:s={}}={}){this.path=e,this.selector=t,this.data=i,this.options={persistentTarget:!0,intermediate:{useExisting:!0},...s}}}class x{constructor({key:e=null,path:t=null,selector:i=null,placeholder:s=null,metadata:a={},options:{shouldInsert:n=!0,wrap:o=null,skipIfOutOfBounds:r=!1,useIndex:l=!1,useBodyTextIndex:d=!1,useBodyTextHeadingIndex:g=!1,lastBodyTextHeading:c=!1}={}}={}){this.key=e,this.path=t,this.selector=i,this.placeholder=s,this.metadata=a,this.options={shouldInsert:n,wrap:o,skipIfOutOfBounds:r,useIndex:l,useBodyTextIndex:d,useBodyTextHeadingIndex:g,lastBodyTextHeading:c}}}class M{constructor({type:e=null,contentdata:t=null,content_data:i=null,cssSettings:s={},children:a=[],metadata:n={}}={}){this.type=e,this.contentdata=t||i,this.children=a,this.metadata={...n},this.state={};const o=[];this.metadata.css&&o.push(this.metadata.css);for(const e of Object.keys(s))s[e]&&o.push(e);this.metadata.css=o.join(\" \")}}class C{constructor(e){this.api=e,this.page=this.api.v1.model.query.getRootModel(),this.pageType=this.api.v1.model.root.getType().replace(\"page_\",\"\"),this.viewports=this.api.v1.viewport.getActive(),this.isEditor=this.api.v1.app.mode.isEditor(),this.cache=new Map,this.pageElements={},this.hideAds=\"1\"===this.page.get(\"fields.hideAds\")||!0===this.page.get(\"fields.hideAds\")}hasRequiredElement(e){return void 0===this.pageElements[e]&&(this.pageElements[e]=!!this.api.v1.model.query.getModelByType(e)),this.pageElements[e]}insert(e,t=null){const i=[],s={},a=`insertDynamic.${this.pageType}.${e}`,n=`placements.${this.pageType}.${e}`;let o=!1;const r=(this.api.v1.config.get(n)||[]).filter((e=>!e.client||(e.requireElement&&!this.hasRequiredElement(e.requireElement)||(s[e.key]=e),!1)));if(!this.cache.has(a)){const e=`insertDynamicAdditions.${this.pageType}`,t=this.api.v1.config.get(a)||[],n=this.validateConditions(this.api.v1.config.get(e)||[]).reverse();o=n.length>0;const r=[...t,...n],l=(this.isEditor?r.filter((e=>!e.dynamicDataSettings||!e.dynamicDataSettings.hideInEditMode)):r).filter((e=>{if(e.placement&&e.placement.key&&s[e.placement.key]){const t={...e,placementData:s[e.placement.key]};return i.push(t),!1}return!0}));this.cache.set(a,l)}if(!this.cache.has(n)){if(o){const e=`placementsAdditions.${this.pageType}`,t=this.api.v1.config.get(e)||[];r.push(...t)}this.cache.set(n,r.map((e=>new x(e))))}const l=this.parse(this.cache.get(a),this.cache.get(n),e,t);for(const e of l)e.selector?this.api.v1.model.insert.bySelector({selector:e.selector,data:e.data,options:e.options}):e.path&&this.api.v1.model.insert.atPath({path:e.path,data:e.data,options:e.options});return i}validateConditions(e){return e.filter((e=>{if(e.excludeDuplicates&&this.api.v1.model.query.getModelByType(e.type))return Sys.logger.debug(`[DynamicDataHelper]: Element of type \"${e.type}\" already exist on page. Skipping.`),!1;if(e&&e.conditions){const{conditions:t}=e;for(const i of t){const{field:t,operator:s,value:a=\"\"}=i,n=this.page.get(t||\"\",void 0,!0);if(void 0!==n)switch(s){case\"equals\":if(n!==a)return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${e.type}\" failed. Field: \"${t}\", operator \"${s}\", value: \"${a}\", page value: \"${n}\".`),!1;break;case\"notEquals\":if(n===a)return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${e.type}\" failed. Field: \"${t}\", operator \"${s}\", value: \"${a}\", page value: \"${n}\".`),!1;break;case\"contains\":if(!n.includes(a))return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${e.type}\" failed. Field: \"${t}\", operator \"${s}\", value: \"${a}\", page value: \"${n}\".`),!1;break;case\"notContains\":if(n.includes(a))return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${e.type}\" failed. Field: \"${t}\", operator \"${s}\", value: \"${a}\", page value: \"${n}\".`),!1;break;default:return Sys.logger.warning(`[DynamicDataHelper]: Operator \"${s}\" is not valid. The condition fails and the item is not inserted onto the page.`),!1}else Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${e.type}\" ignored. Value of field: \"${t}\" is undefined.`)}return Sys.logger.debug(`[DynamicDataHelper]: All conditions (${t.length}) for inserting element type \"${e.type}\" accepted. Will insert.`),!0}return Sys.logger.debug(`[DynamicDataHelper]: No validation specified for inserting element type \"${e.type}\". Will insert.`),!0}))}parse(e=[],t=[],i=\"desktop\",s=null){const a=[];for(const n of e){const[o]=t.filter((({key:e})=>e===n.placement.key));if(o)if(this.acceptPath(o.path,s)){const t=this.create(n,o,e,i);null!==t&&(t.data.metadata.viewportBlacklist=this.viewports.filter((e=>e!==i)),a.unshift(t))}else Sys.logger.debug(`[DynamicDataHelper]: Path \"${o.path}\" not allowed. Filter: \"${s}\", key: \"${n.placement.key}\"`);else Sys.logger.debug(`[DynamicDataHelper]: No placement found with key \"${n.placement.key}\"`)}return a}create(e,t,i,s=\"desktop\"){if(this.filter(e)){const a=this.assemble(e,t);if(t.path&&t.selector){this.api.v1.model.query.getModelBySelector(t.selector)||this.api.v1.model.insert.atPath({path:t.path,data:{type:\"placeholder\",selector:t.selector,metadata:{...t.metadata||{},key:t.key},state:{isNonPersistent:!0}},options:{index:0,useExisting:!0,prepend:!0,silent:!0}})}const n={...e.options,prepend:!0,silent:!0};let{path:o}=t,r=e.placement.index||0,l=null;if(t.selector)l=this.api.v1.model.query.getModelBySelector(t.selector);else if(t.path){const e=this.getModelsByPath(t.path,s);e.length&&(l=t.options.useBodyTextIndex||t.options.useBodyTextHeadingIndex||t.options.lastBodyTextHeading?e.find((e=>\"bodytext\"===e.getType())):t.options.shouldInsert?e[0].children[r]:e[r])}if(l||!t.options.skipIfOutOfBounds){if(l){r=this.api.v1.model.query.getIndex(l);let e=l.getParent();if(\"mobile\"===s){if(r>0&&r<e.children.length){let t=e.children[r];for(;t;){const i=l.get(\"width\",s,!0);if(void 0===i||100===i)break;t=e.children[++r]}}e.get(\"metadata.hasRowTitle\")&&(0===r||r>=e.children.length)&&(l=e,e=l.getParent(),r=this.api.v1.model.query.getIndex(l),o=e.getPositionedPath())}if(t.options.useIndex&&r<e.children.length)if(e.children[r-1]&&e.children[r-1].getNoRenderState()){if(i[r+1]&&i[r+1].placement.index===r+1)return null;n.index=r+1}else n.index=r;t.options.shouldInsert||(o=e.getPositionedPath())}else n.prepend=!1;return new D({data:a,options:n,selector:t.selector,path:o})}}return null}assemble(e,t){let i=new M(e);return t.selector||(i.metadata={...i.metadata,...t.metadata,css:t.metadata.css?`${i.metadata.css} ${t.metadata.css}`:i.metadata.css||\"\"}),t.options.wrap&&(i=new M({type:t.options.wrap.type,metadata:t.options.wrap.metadata,children:[i]})),t.options.skipIfOutOfBounds&&(i.metadata.skipIfOutOfBounds=!0),t.options.useBodyTextIndex?i.metadata.bodyTextIndex=e.placement.index||0:t.options.useBodyTextHeadingIndex&&(i.metadata.bodyTextHeadingIndex=e.placement.index||0),t.options.lastBodyTextHeading&&(i.metadata.lastBodyTextHeading=!0),i.state.isNonPersistent=!0,i}acceptPath(e,t){return!e||!t||e===t}filter(e){return\"googleAd\"!==e.type&&\"adnuntiusAd\"!==e.type||!this.hideAds}getModelsByPath(e,t){const i=`getByPath-${e}`;return this.cache.has(i)||this.cache.set(i,(this.api.v1.model.query.getModelsByPath(e)||[]).filter((e=>!e.get(\"metadata.hideViewport\",t)&&!e.isNonPersistent()))),this.cache.get(i)}}class I{constructor(e){this.api=e,this.request=this.api.v1.util.request}listen(){const e={selector:this.request.getQueryParam(\"lab_selector\")||\"contentFromPath\",path:this.request.getQueryParam(\"lab_path\"),guid:this.request.getQueryParam(\"lab_guid\")};(e.guid||e.path)&&this.api.v1.model.on(\"insert\",(t=>{const i=e.guid?this.getModelByGuid(e.guid,t):this.getModelByPath(e.path,t);if(i)return Sys.logger.debug(`[FragmentHelper] Element found. Path: ${i.getPositionedPath()}, GUID: ${i.getGuid()}.`),i.setSelector(e.selector),\"embed\"===lab_api.v1.viewport.getName()?this.appendToRoot(t,i):[i]}))}getModelByGuid(e){return Sys.logger.debug(`[FragmentHelper] Will filter elements by guid: \"${e}\".`),this.api.v1.model.query.getModelByGuid(e)}getModelByPath(e,t){Sys.logger.debug(`[FragmentHelper] Will filter elements by path: \"${e}\".`);const i=this.api.v1.util.string.parsePath(e);if(!i[0])return null;const s=this.api.v1.model.query.getModelsByType(i[0].base,t);return this.api.v1.model.query.getModelByPath(e,!0,!1,s)}appendToRoot(e,t){const i=e[0];return i.children=[t],[i]}}class P{constructor(e){this.api=e,this.paths={main:[\"parent\",\"guid\",\"type\",\"tags\"],fields:[\"feedId\",\"byline\",\"bylineImage\",\"paywall\",\"published\",\"published_url\",\"site_alias\",\"site_id\",\"subtitle\",\"subtitleHTML\",\"teaserSubtitle\",\"somedescription\",\"title\",\"teaserTitle\",\"titleHTML\",\"seolanguage\",\"seotitle\",\"sometitle\",\"kicker\",\"teaserKicker\",\"showcomments\"],fieldsAuto:[\"section_tag\",\"tags\"],fieldsNative:[\"section\"],fieldMap:{subtitle:\"description\",subtitleHTML:\"descriptionHTML\",somedescription:\"someDescription\",teaserSubtitle:\"teaserDescription\",seolanguage:\"seolanguage\",seotitle:\"seoTitle\",sometitle:\"someTitle\",published_url:\"url\",section_tag:\"section\"},fallback:{url:\"url\"}},this.frontUrl=this.api.v1.site.getSite().domain||this.api.v1.properties.get(\"customer_front_url\"),this.imageServer=this.api.v1.properties.get(\"image_server\")}jsonData(e){Sys.logger.debug(\"[PageExport] Will export page as JSON-data\");const t=this.api.v1.model.serialize.model(e);delete t.guid;return{page:t,result:\"page_article\"===e.getType()?this.exportArticle():this.exportFront()}}oembed(e){return\"page_article\"!==e.getType()?(Sys.logger.warn(\"[PageExport] Will not export current page type as oEmbed.\"),{}):(Sys.logger.debug(\"[PageExport] Will export page as oEmbed\"),{version:\"1.0\",type:\"rich\",width:\"\",height:\"\",title:this.api.v1.util.string.sanitizeString(e.get(\"fields.title\")||\"\"),url:e.get(\"filtered.url\")||\"\",author_name:this.api.v1.site.getSite().display_name||this.api.v1.site.getSite().alias,author_url:this.frontUrl,provider_name:\"Labrador\",provider_url:\"http://www.labradorcms.com/\",html:`<div class=\"labrador-cms-embed\" data-lab-style=\"dac-no-sitelink dac-no-sitelink-logo dac-no-poweredby dac-embed-full\" data-lab-content=\"full\" data-lab-id=\"${e.get(\"id\")}\" data-lab-site=\"${e.get(\"filtered.site.domain_no_protocol\")}\"><script async defer src=\"${this.frontUrl}/embed.js?v=335\"><\\/script></div>`})}exportArticle(){}exportFront(){const e=this.api.v1.model.query.getModelByType(\"dropZone\");return this.api.v1.model.query.getModelsByType(\"article\",[e]).map((e=>this.serialize(e))).filter((e=>!!e))}serialize(e){const t=this.api.v1.model.serialize.model(e);if(!t||!t.fields)return null;const i=!!t.fields.origin_data_json,s={images:[],width:e.getWidth(\"desktop\"),metadata:t.metadata,isAutomatic:i,siteDomain:this.frontUrl},a=i?t.fields.origin_data_json:t.fields,n=[...this.paths.fields,...i?this.paths.fieldsAuto:this.paths.fieldsNative];for(const e of this.paths.main)s[e]=t[e]||\"\";for(const e of n)s[this.paths.fieldMap[e]||e]=a[e]||\"\";if(s.teaserSubtitle=a.teaserSubtitle||\"\",i){if(!s.byline){const e=(a.full_bylines||[]).shift();s.byline=e?`${e.firstname} ${e.lastname}`:\"\",s.bylineImage=s.bylineImage||(e||{}).imageUrl}\"string\"==typeof s.tags&&(s.tags=s.tags.split(\",\").map((e=>(e||\"\").trim()))),s.site_alias=(this.api.v1.site.getSiteById(a.site_id)||{}).alias,s.id=parseInt(a.id,10)}else s.titleHTML=s.title,s.title=this.cleanText(s.title),s.descriptionHTML=s.description,s.description=this.cleanText(s.description),s.kickerHTML=s.kicker,s.kicker=this.cleanText(s.kicker),s.id=t.id;s.section_tag=s.section,s.url&&!s.url.startsWith(\"http\")&&(s.url=this.frontUrl+s.url);for(const e of Object.keys(this.paths.fallback))s[e]||(s[e]=a[this.paths.fallback[e]]||\"\");s.full_bylines=(i?a.full_bylines:a.full_bylines_json)||[],s.full_bylines=s.full_bylines.map((e=>({firstname:e.firstname,lastname:e.lastname,description:e.description,imageUrl:this.getImageUrl(e.imageUrl)}))),i&&s.byline&&s.full_bylines.unshift({firstname:s.byline,lastname:\"\",imageUrl:this.getImageUrl(s.bylineImage)}),!s.byline&&s.full_bylines.length&&(s.byline=`${s.full_bylines[0].firstname} ${s.full_bylines[0].lastname}`,s.bylineImage=s.full_bylines[0].imageUrl.replace(this.imageServer,\"\"));const o=lab_api.v1.config.get(\"customAdapterFields.article\")||[];if(o)for(const e of o)if(e){let i=t.fields[e]||\"\";!i&&t.fields.origin_data_json&&(i=t.fields.origin_data_json[e]||\"\"),i&&(s[e]=i)}s.paywall=\"0\"!==s.paywall&&!!s.paywall;const r=this.api.v1.model.query.getChildOfType(e,\"image\");if(r){const e=r.get(\"filtered.image\");e&&s.images.push({url:e,jpg:`${e}&format=jpg`,webp:`${e}&format=webp`,url_size:e,default:\"1\",id:r.get(\"instance_of\")})}return s}cleanText(e){return this.api.v1.util.string.sanitizeString(e).replace(/&amp;/g,\"&\")}getImageUrl(e){return e?e.startsWith(\"http\")?e:this.imageServer+e:\"\"}}class j{constructor(e){this.api=e}register(e,t){if(this.api.v1.app.mode.isFragmentMode())return void Sys.logger.debug(\"[EsiHelper] Labrador is is fragment-mode. Will not register ESI. Skipping.\");if(!e)return void Sys.logger.debug(\"[EsiHelper] Missing model, cannot process. Skipping.\");const i=this.api.v1.config.get(\"footer.include\");if(i&&i.pageId){const t=this.getEsiUrl(i);t?\"client\"===i.render?e.setFiltered(\"renderFooter.url\",t):this.insertEsi(e,t,\"esi_footer\"):Sys.logger.warning(\"[EsiHelper] Cannot prepare url for footer-fragment. Missing url.\")}const s=this.api.v1.config.get(\"header.include\"),a=this.api.v1.config.get(\"header.includes\")||[],n=[];if(s&&s.pageId){const t=this.insertHeader(s,e);t&&n.push(t)}for(const t of a)if(t&&t.pageId){const i=this.insertHeader(t,e);i&&n.push(i)}e.setFiltered(\"renderHeader.urls\",n.map((e=>`'${e}'`)).join(\", \"))}getEsiUrl(e){if(!e.pageId)return null;const t=[\"pageId\",\"path\",\"structureType\",\"start\",\"count\"],i=[];if(t.forEach((t=>{void 0!==e[t]&&\"\"!==e[t]&&null!==e[t]&&i.push(`${t}=${e[t]}`)})),i.length===t.length){let e=this.api.v1.properties.get(\"front_api_url\");return this.api.v1.app.mode.isEditor()&&\"https:\"===document.location.protocol&&(e=e.replace(\"http:\",\"https:\")),`${e}/fragment/structure/?${i.join(\"&\")}`}return null}insertEsi(e,t,i){Sys.logger.debug(`[EsiHelper] Will insert fragment for selector: \"${i}\", url: \"${t}\".`),this.api.v1.model.insert.atPath({path:e.getPath(),data:{type:\"esi\",selector:i,contentdata:{fields:{url:t,identifier:i}},state:{isNonPersistent:!0}},options:{frontpage:!0,articlepage:!0}}),this.api.v1.app.mode.isEditor()&&this.fetchEditorEsi(t,`${i}`)}insertHeader(e,t){const i=this.getEsiUrl(e);if(i){if(\"client\"===e.render)return Sys.logger.debug(`[EsiHelper] Found url for header-fragment to render in client: \"${i}\".`),i;this.insertEsi(t,i,\"esi_header\")}else Sys.logger.warning(\"[EsiHelper] Cannot prepare url for header-fragment. Missing url.\");return null}fetchEditorEsi(e,t){this.api.v1.view.on(\"domRendered\",((i,s)=>{const a=this.api.v1.model.query.getModelBySelector(t);a&&(Sys.logger.debug(`EsiHelper.fetchEditorEsi: Will fetch esi-substitute for editor. Selector: ${t}, url: ${e}`),this.api.v1.util.httpClient.get(e,{credentials:\"omit\",type:\"text\"}).then((e=>{const i=lab_api.v1.view.getView(a,s),n=document.createElement(\"template\");if(n.innerHTML=e,Sys.logger.debug(`EsiHelper.fetchEditorEsi: Esi-substitute fetched. Selector: ${t}, element-count: ${n.content.children.length}`),i.markup){for(const e of[...n.content.children])i.markup.parentElement.insertBefore(e,i.markup);i.markup.remove()}else Sys.logger.warn(`EsiHelper.fetchEditorEsi: Element markup not found. Cannot insert dom-element(s). Selector: ${t}`)})).catch((e=>{Sys.logger.warning(`EsiHelper.fetchEditorEsi: Esi-substitute could not be fetched. Selector: ${t}, error: ${e}`)})))}))}}class E{static mediaQueries={desktop:\"(min-width:1024px)\",mobile:\"(max-width: 1023px)\"};static createStyle({model:e,view:t,viewports:i,styleCollection:s=\"content_inline_spacing\",mediaQueries:a=this.mediaQueries,returnArray:n=!1}){const o=[],r=`[data-element-guid=\"${e.getGuid()}\"] .content`;for(const n of i)if(a[n]){const i=lab_api.v1.style.getStyles(e,t,s,n);i&&o.push(`@media ${a[n]} { ${r} { ${i} } }`)}return n?o:`<style>${o.join(\"\\n\")}</style>`}}const A=class{constructor(){this.name=\"Baseview\",this.api=null,this.pageAPI=null,this.useSpacing=!1}onReady(e){if(this.api=e,Sys.logger.debug(`[Front] Running Baseview version ${this.api.v1.config.get(\"view_version\")}, build ${this.api.v1.config.get(\"view_build.baseview.version\")}`),\"json\"===this.api.v1.viewport.getName()&&\"PageExport.jsonData\"===this.api.v1.config.get(\"viewports.json.renderer\")){const e=new P(this.api);this.api.v1.view.on(\"rendered\",((t,i)=>[JSON.stringify(e.jsonData(this.api.v1.model.query.getRootModel()),null,4)]))}if(\"oembed\"===this.api.v1.viewport.getName()&&\"PageExport.oembed\"===this.api.v1.config.get(\"viewports.oembed.renderer\")){const e=new P(this.api);this.api.v1.view.on(\"rendered\",((t,i)=>[JSON.stringify(e.oembed(this.api.v1.model.query.getRootModel()),null,4)]))}new I(this.api,this.api.v1.util.request).listen()}onAcceptContent(){const e=this.api.v1.model.query.getRootModel();if(this.useSpacing=!(!e||!e.get(\"fields.style_spacing\")),\"editor\"===this.api.v1.app.mode.getSimulatedMode())return void Sys.logger.debug(\"[Front] Labrador is running in simulated editor-mode. Skipping DynamicDataHelper and EsiHelper.\");const t=new C(this.api).insert(this.api.v1.viewport.getName());t.length>0&&!e.get(\"fields.hideAds\")&&(e.setFiltered(\"clientSidePlacements\",JSON.stringify(t)),e.setFiltered(\"clientSideResources\",JSON.stringify({configObject:{viewConfig:{config:{customer:{contentbox_settings:{adnuntiusAd:this.api.v1.config.get(\"contentbox_settings.adnuntiusAd\")||{},googleAd:this.api.v1.config.get(\"contentbox_settings.googleAd\")||{}},adEnvironment:this.api.v1.config.get(\"adEnvironment\")||{}}}}},site:this.api.v1.site.getSite(),device:this.api.v1.properties.get(\"device\"),debug:this.api.v1.util.request.hasQueryParam(\"debug\")||!1})));new j(this.api).register(e,this.api.v1.site.getSite().alias),this.api.v1.util.request.hasQueryValue(\"lab_opts\",\"hideHeader\")&&(Sys.logger.debug(\"[Front] Hiding header and logo based on url param lab_opts=hideHeader ...\"),e.setFiltered(\"pageHeaderDisplay\",\"hideHeaderAndLogo\")),this.api.v1.util.request.hasQueryValue(\"lab_opts\",\"hideFooter\")&&(Sys.logger.debug(\"[Front] Hiding footer based on url param lab_opts=hideFooter ...\"),e.setFiltered(\"pageFooterDisplay\",\"hideFooter\")),this.api.v1.util.request.hasQueryValue(\"lab_opts\",\"hideComments\")&&(Sys.logger.debug(\"[Front] Hiding Hyvor comments based on url param lab_opts=hideComments ...\"),e.setFiltered(\"pageCommentsDisplay\",\"hideComments\"))}onRender(e,t){this.useSpacing&&e.setFiltered(\"styleSheets\",E.createStyle({model:e,view:t,viewports:[\"desktop\",\"mobile\"],returnArray:!1}))}onMapData(e){if(\"text_title\"===e.type||\"text_subtitle\"===e.type){if(!e.contentdata||!e.contentdata.fields)return;const t={...e};return t.type=\"text_singleline\",t.contentdata.fields.text=t.contentdata.fields.title||t.contentdata.fields.subtitle,\"text_subtitle\"===e.type?(t.contentdata.fields.elementType={value:\"h3\"},delete t.contentdata.fields.subtitle):(t.contentdata.fields.elementType={value:\"h2\"},lab_api.v1.util.object.set(\"attributes.text_size.vp.desktop\",lab_api.v1.util.object.get(\"attributes.text_size.vp.desktop\",t.contentdata.fields.text)||44,t.contentdata.fields.text),delete t.contentdata.fields.title),t.lab_internal_format=!0,t}}};var O=t.k,q=t.B;export{O as Entry,q as behaviours};","// View export from Baseview\n// Version: 1.4.9, build: 366\nexport const config = {\"view_version\":\"1.4.9\",\"view_version_number\":149,\"view_name\":\"Baseview\",\"view_build\":{\"baseview\":{\"releasenotes\":\"145:6\",\"userReleasenotes\":\"149:4\",\"version\":366}},\"viewports\":{\"mobile\":{\"deviceWidth\":480},\"desktop\":{\"deviceWidth\":1058}},\"imageUrlOptions\":{\"extension\":\".webp\",\"nameField\":\"instance_of\"},\"viewHelper\":{\"image\":{\"viewports\":[\"desktop\",\"mobile\"],\"pixelDensityFactor\":2}},\"grid\":{\"total_grid_spans\":12,\"grid_prefix\":{\"mobile\":\"small-\",\"desktop\":\"large-\"},\"abs_grid_prefix\":{\"mobile\":\"small-abs-\",\"desktop\":\"large-abs-\"}},\"style\":{\"definitions\":{\"css_style\":{\"requirePath\":false,\"path\":\"metadata.css_style\",\"items\":[{\"prefix\":\"style-\",\"postfix\":\"\"}]},\"style_preset\":{\"path\":\"metadata.style_preset\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"text_size\":{\"requirePath\":true,\"path\":\"text_size\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":\"no_viewport\",\"prefix\":\"t\"},{\"viewport\":\"mobile\",\"prefix\":\"tm\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"font_weight\":{\"requirePath\":true,\"path\":\"font_weight\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"m-\"}]},\"bold\":{\"requirePath\":true,\"path\":\"bold\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"text_background_color\":{\"requirePath\":true,\"path\":\"text_background_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\",\"nullValue\":\"no_bg_color\"}]},\"text_background_color_op\":{\"requirePath\":true,\"path\":\"text_background_color_op\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\",\"nullValue\":\"no_bg_color\"}]},\"custom_text_background_color\":{\"requirePath\":true,\"path\":\"custom_text_background_color\",\"items\":[{\"prefix\":\"background-color:\",\"postfix\":\" !important;\"}]},\"custom_text_color\":{\"requirePath\":true,\"path\":\"custom_text_color\",\"items\":[{\"prefix\":\"color:\",\"postfix\":\" !important;\"}]},\"custom_text_shadow\":{\"requirePath\":true,\"path\":\"custom_text_shadow\",\"items\":[{\"prefix\":\"text-shadow:\"}]},\"text_color\":{\"requirePath\":true,\"path\":\"text_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\"}]},\"text_align\":{\"requirePath\":true,\"path\":\"text_align\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"],\"prefix\":\"align-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_text_align_align-\"}]},\"fontface\":{\"requirePath\":true,\"path\":\"fontface\",\"items\":[{\"prefix\":\"font-\"}]},\"italic\":{\"requirePath\":true,\"path\":\"italic\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"],\"nullValue\":\"no_italic\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"m-\",\"nullValue\":\"no_italic\"}]},\"underline\":{\"requirePath\":true,\"path\":\"underline\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"texttransform\":{\"requirePath\":true,\"path\":\"texttransform\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"strikethrough\":{\"requirePath\":true,\"path\":\"strikethrough\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"text_shadow\":{\"requirePath\":true,\"path\":\"text_shadow\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"animate\":{\"requirePath\":true,\"path\":\"animate\",\"items\":[{\"viewport\":\"no_viewport\"}]},\"background_color\":{\"requirePath\":false,\"path\":\"metadata.background_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"\",\"postfix\":\"\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\",\"postfix\":\"\",\"nullValue\":\"no_bg_color\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"background_opacity\":{\"requirePath\":false,\"path\":\"metadata.background_color_op\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"\",\"postfix\":\"\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\",\"postfix\":\"\"}]},\"background_gradient\":{\"requirePath\":false,\"path\":\"metadata.gradient\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\"}]},\"border_color\":{\"requirePath\":false,\"path\":\"metadata.border_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_\",\"nullValue\":\"no_border_color\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"border_side\":{\"requirePath\":false,\"path\":\"metadata.border_side\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_\",\"nullValue\":\"no_border_side\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"border_width\":{\"requirePath\":false,\"path\":\"metadata.border_width\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"border_width_\",\"nullValue\":\"no_border_width\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"border_width_mobile_\",\"nullValue\":\"no_border_width\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"layout\":{\"requirePath\":false,\"path\":\"metadata.layout\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"layout_mobile_\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"fitContent\":{\"requirePath\":false,\"path\":\"metadata.fitContent\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"fitContent_mobile_\"}],\"template\":\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"},\"shadow\":{\"requirePath\":false,\"path\":\"metadata.shadow\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"shadow_mobile_\"}]},\"metadata_text_color\":{\"requirePath\":false,\"path\":\"metadata.text_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_text_color-_\"}]},\"hover_text_color\":{\"requirePath\":false,\"path\":\"metadata.hover_text_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_hover_text_color-_\"}]},\"hover_bg_color\":{\"requirePath\":false,\"path\":\"metadata.hover_bg_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_hover_bg_color-_\"}]},\"hover_border_color\":{\"requirePath\":false,\"path\":\"metadata.hover_border_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_hover_border_color-_\"}]},\"image_overlay\":{\"requirePath\":false,\"path\":\"metadata.image_overlay\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\"}]},\"image_overlay_opacity\":{\"requirePath\":false,\"path\":\"metadata.image_overlay_opacity\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\"}]},\"image_gradient\":{\"requirePath\":false,\"path\":\"metadata.image_gradient\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\"}]},\"image_gradient_opacity\":{\"requirePath\":false,\"path\":\"metadata.image_gradient_opacity\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"]},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"color_mobile_\"}]},\"float\":{\"requirePath\":false,\"path\":\"metadata.float\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"desktop-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-\"}]},\"spacing\":{\"requirePath\":false,\"path\":\"fields.spacing\",\"items\":[{\"prefix\":\"spacing-\",\"nullValue\":\"default\"}]},\"spacing_outer_top\":{\"requirePath\":false,\"path\":\"metadata.spacing_outer_top\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"margin-top:\",\"postfix\":\"% !important;\"}]},\"spacing_outer_right\":{\"requirePath\":false,\"path\":\"metadata.spacing_outer_right\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"margin-right:\",\"postfix\":\"% !important;\"}]},\"spacing_outer_bottom\":{\"requirePath\":false,\"path\":\"metadata.spacing_outer_bottom\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"margin-bottom:\",\"postfix\":\"% !important;\"}]},\"spacing_outer_left\":{\"requirePath\":false,\"path\":\"metadata.spacing_outer_left\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"margin-left:\",\"postfix\":\"% !important;\"}]},\"spacing_inner_top\":{\"requirePath\":false,\"path\":\"metadata.spacing_inner_top\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"padding-top:\",\"postfix\":\"% !important;\"}]},\"spacing_inner_right\":{\"requirePath\":false,\"path\":\"metadata.spacing_inner_right\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"padding-right:\",\"postfix\":\"% !important;\"}]},\"spacing_inner_bottom\":{\"requirePath\":false,\"path\":\"metadata.spacing_inner_bottom\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"padding-bottom:\",\"postfix\":\"% !important;\"}]},\"spacing_inner_left\":{\"requirePath\":false,\"path\":\"metadata.spacing_inner_left\",\"items\":[{\"viewport\":\"current_viewport\",\"prefix\":\"padding-left:\",\"postfix\":\"% !important;\"}]},\"pull_up\":{\"requirePath\":false,\"path\":\"metadata.pull_up\",\"items\":[{\"viewport\":\"desktop\",\"prefix\":\"large-pull-\"},{\"viewport\":\"mobile\",\"prefix\":\"small-pull-\"}]},\"content_text_align\":{\"requirePath\":false,\"path\":\"metadata.text_align\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"align-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_text_align_align-\"}]},\"content_vertical_text_align\":{\"requirePath\":false,\"path\":\"metadata.vertical_text_align\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"vertical-text-align-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-vertical-text-align-\"}]},\"text_align_row\":{\"requirePath\":false,\"path\":\"metadata.text_align_row\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"align-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile_text_align_align-\"}]},\"vertical_align\":{\"requirePath\":false,\"path\":\"metadata.vertical_align\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"grid-vas-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-grid-vas-\"}]},\"vertical_align_content\":{\"requirePath\":false,\"path\":\"metadata.vertical_align_content\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"grid-align-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-grid-align-\"}]},\"custom_background_color\":{\"requirePath\":false,\"path\":\"metadata.custom_background_color\",\"items\":[{\"prefix\":\"background-color:\",\"postfix\":\";\"}]},\"custom_background_color_L3\":{\"requirePath\":false,\"path\":\"metadata.box_custom_background\",\"items\":[{\"prefix\":\"background-color:\",\"postfix\":\";\"}]},\"custom_border_color\":{\"requirePath\":false,\"path\":\"metadata.custom_border_color\",\"items\":[{\"prefix\":\"border-color:\",\"postfix\":\" !important;\"}]},\"movableContainer\":{\"requirePath\":true,\"items\":[{\"viewport\":\"desktop\",\"value\":\"desktop-movable-container\",\"nullValue\":\"\"},{\"viewport\":\"mobile\",\"value\":\"mobile-movable-container\",\"nullValue\":\"\"}]},\"movableElement\":{\"requirePath\":true,\"items\":[{\"viewport\":\"desktop\",\"value\":\"desktop-movable-element\",\"nullValue\":\"\"},{\"viewport\":\"mobile\",\"value\":\"mobile-movable-element\",\"nullValue\":\"\"}]},\"collapsedContent\":{\"requirePath\":true,\"items\":[{\"viewport\":\"desktop\",\"value\":\"desktop-collapsed-element\",\"nullValue\":\"\"},{\"viewport\":\"mobile\",\"value\":\"mobile-collapsed-element\",\"nullValue\":\"\"}]},\"imageAlign\":{\"requirePath\":true,\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\"],\"prefix\":\"desktop-\"},{\"viewport\":\"mobile\",\"fallback\":[\"no_viewport\"],\"prefix\":\"mobile-\"}]},\"imageBorder\":{\"requirePath\":true,\"items\":[{\"value\":\"bordered\"}]},\"vertical_space_outside_top\":{\"requirePath\":false,\"path\":\"metadata.spaceOutsideTop\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"desktop-space-outsideTop-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-space-outsideTop-\"}]},\"vertical_space_outside_bottom\":{\"requirePath\":false,\"path\":\"metadata.spaceOutsideBottom\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"desktop-space-outsideBottom-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-space-outsideBottom-\"}]},\"vertical_space_inside_top\":{\"requirePath\":false,\"path\":\"metadata.spaceInsideTop\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"desktop-space-insideTop-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-space-insideTop-\"}]},\"vertical_space_inside_bottom\":{\"requirePath\":false,\"path\":\"metadata.spaceInsideBottom\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"desktop-space-insideBottom-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-space-insideBottom-\"}]},\"fullWidth\":{\"requirePath\":false,\"path\":\"metadata.hasFullWidth\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\"],\"prefix\":\"desktop-\",\"value\":\"fullWidth\",\"nullValue\":\"\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-\",\"value\":\"fullWidth\",\"nullValue\":\"\"}]},\"fullWidthLimit\":{\"path\":\"metadata.hasFullWidthWithLimit\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\"],\"prefix\":\"desktop-\",\"value\":\"fullWithLimit\",\"nullValue\":\"\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-\",\"value\":\"fullWithLimit\",\"nullValue\":\"\"}]},\"expandedState\":{\"path\":\"metadata.expandedState\",\"items\":[{\"viewport\":\"desktop\",\"postfix\":\"-desktop\",\"value\":\"state-expanded\",\"nullValue\":\"\"},{\"viewport\":\"mobile\",\"postfix\":\"-mobile\",\"value\":\"state-expanded\",\"nullValue\":\"\"}]},\"dacBtn\":{\"requirePath\":true,\"path\":\"dacBtn\",\"items\":[{\"viewport\":\"no_viewport\",\"value\":\"dacBtn bg-btn-color\"}]},\"responsive_size\":{\"requirePath\":true,\"items\":[{\"viewport\":\"mobile\",\"prefix\":\"small-vw-\"}]},\"compactDisplay\":{\"path\":\"metadata.compactDisplay\",\"items\":[{\"value\":\"compactDisplay\"}]},\"subimagePlacement\":{\"requirePath\":false,\"path\":\"metadata.subimagePlacement\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"placement-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-placement-\"}]},\"subimageSize\":{\"requirePath\":false,\"path\":\"metadata.subimageSize\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"prefix\":\"size-\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"prefix\":\"mobile-size-\"}]},\"hasTextPadding\":{\"requirePath\":true,\"path\":\"text_background_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"no_viewport\",\"mobile\"],\"value\":\"hasTextPadding\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"value\":\"mobile-hasTextPadding\"}]},\"hasTextPaddingCustom\":{\"requirePath\":true,\"path\":\"custom_text_background_color\",\"items\":[{\"value\":\"hasTextPadding\"},{\"value\":\"mobile-hasTextPadding\"}]},\"hasContentPadding\":{\"path\":\"metadata.background_color\",\"items\":[{\"viewport\":\"desktop\",\"fallback\":[\"mobile\",\"no_viewport\"],\"value\":\"hasContentPadding\"},{\"viewport\":\"mobile\",\"fallback\":[\"desktop\",\"no_viewport\"],\"value\":\"mobile-hasContentPadding\"}]},\"hasContentPaddingCustom\":{\"path\":\"metadata.custom_background_color\",\"items\":[{\"value\":\"hasContentPadding\"},{\"value\":\"mobile-hasContentPadding\"}]},\"hasBorder\":{\"path\":\"metadata.custom_border_color\",\"items\":[{\"value\":\"hasBorder\",\"nullValue\":\"\"}]}},\"collections\":{\"text_decoration\":{\"name\":\"text_decoration\",\"definitions\":[\"text_size\",\"font_weight\",\"bold\",\"text_background_color\",\"text_background_color_op\",\"text_color\",\"text_align\",\"fontface\",\"italic\",\"underline\",\"texttransform\",\"strikethrough\",\"text_shadow\",\"animate\",\"dacBtn\",\"hasTextPadding\",\"hasTextPaddingCustom\"]},\"text_decoration_inline_style\":{\"name\":\"text_decoration_inline_style\",\"definitions\":[\"custom_text_background_color\",\"custom_text_color\",\"custom_text_shadow\"]},\"section_decoration\":{\"name\":\"section_decoration\",\"definitions\":[\"style_preset\",\"vertical_space_outside_top\",\"vertical_space_outside_bottom\"]},\"box_decoration\":{\"name\":\"box_decoration\",\"definitions\":[\"float\",\"pull_up\",\"vertical_align\",\"vertical_align_content\",\"css_style\",\"style_preset\",\"vertical_space_outside_top\",\"vertical_space_outside_bottom\",\"vertical_space_inside_top\",\"vertical_space_inside_bottom\",\"expandedState\",\"compactDisplay\"]},\"box_fullWidth\":{\"name\":\"box_fullWidth\",\"definitions\":[\"fullWidth\",\"fullWidthLimit\"]},\"content_decoration\":{\"name\":\"content_decoration\",\"definitions\":[\"background_color\",\"background_opacity\",\"background_gradient\",\"border_color\",\"border_side\",\"border_width\",\"image_gradient\",\"image_gradient_opacity\",\"content_text_align\",\"content_vertical_text_align\",\"hasContentPadding\",\"hasContentPaddingCustom\",\"hasBorder\"]},\"content_inline_style\":{\"name\":\"content_inline_style\",\"definitions\":[\"custom_background_color\",\"custom_background_color_L3\",\"custom_border_color\"]},\"content_inline_spacing\":{\"name\":\"content_inline_spacing\",\"definitions\":[\"spacing_inner_top\",\"spacing_inner_right\",\"spacing_inner_bottom\",\"spacing_inner_left\",\"spacing_outer_top\",\"spacing_outer_right\",\"spacing_outer_bottom\",\"spacing_outer_left\"]},\"subimage\":{\"name\":\"subimage\",\"definitions\":[\"subimagePlacement\",\"subimageSize\"]}},\"copyDefinitions\":[{\"definition\":\"text_size\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"font_weight\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"text_background_color\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"text_background_color_op\",\"data\":[{\"path\":\"fields.title\"}]},{\"definition\":\"text_color\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"text_align\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"fontface\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"italic\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"underline\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"texttransform\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"strikethrough\",\"data\":[{\"path\":\"fields.text\"},{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"animate\",\"data\":[{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.description\"},{\"path\":\"fields.author\"},{\"path\":\"fields.quote\"},{\"path\":\"fields.firstname\"},{\"path\":\"fields.lastname\"},{\"path\":\"fields.imageCaption\"},{\"path\":\"fields.byline\"}]},{\"definition\":\"custom_text_shadow\",\"data\":[{\"path\":\"fields.title\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.subtitle\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.kicker\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.description\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.author\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.quote\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.firstname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.lastname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.imageCaption\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.byline\",\"values\":{\"no_viewport\":null}}]},{\"definition\":\"text_shadow\",\"data\":[{\"path\":\"fields.title\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.subtitle\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.kicker\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.description\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.author\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.quote\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.firstname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.lastname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.imageCaption\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.byline\",\"values\":{\"no_viewport\":null}}]},{\"definition\":\"custom_text_color\",\"data\":[{\"path\":\"fields.title\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.subtitle\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.kicker\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.description\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.author\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.quote\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.firstname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.lastname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.imageCaption\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.byline\",\"values\":{\"no_viewport\":null}}]},{\"definition\":\"custom_text_background_color\",\"data\":[{\"path\":\"fields.title\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.subtitle\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.kicker\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.description\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.author\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.quote\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.firstname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.lastname\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.imageCaption\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.byline\",\"values\":{\"no_viewport\":null}}]},{\"definition\":\"css_style\"},{\"definition\":\"style_preset\"},{\"definition\":\"background_color\"},{\"definition\":\"custom_background_color\"},{\"definition\":\"background_opacity\"},{\"definition\":\"background_gradient\"},{\"definition\":\"image_gradient\"},{\"definition\":\"border_color\"},{\"definition\":\"border_side\"},{\"definition\":\"border_width\"},{\"definition\":\"layout\"},{\"definition\":\"shadow\"},{\"definition\":\"fitContent\"},{\"definition\":\"metadata_text_color\"},{\"definition\":\"hover_bg_color\"},{\"definition\":\"hover_text_color\"},{\"definition\":\"hover_border_color\"},{\"definition\":\"image_overlay\"},{\"definition\":\"image_overlay_opacity\"},{\"definition\":\"image_gradient_opacity\"},{\"definition\":\"float\"},{\"definition\":\"pull_up\"},{\"definition\":\"content_text_align\"},{\"definition\":\"content_vertical_text_align\"},{\"definition\":\"vertical_align\"},{\"definition\":\"vertical_space_outside_top\"},{\"definition\":\"vertical_space_outside_bottom\"},{\"definition\":\"vertical_space_inside_top\"},{\"definition\":\"vertical_space_inside_bottom\"},{\"definition\":\"spacing_outer_top\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_outer_right\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_outer_bottom\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_outer_left\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_inner_top\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_inner_right\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_inner_bottom\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"definition\":\"spacing_inner_left\",\"data\":[{\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"targets\":[\"article\",\"articleHeader\"],\"data\":[{\"path\":\"metadata.image_gradient_direction\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"targets\":[\"image\"],\"data\":[{\"path\":\"fields.bbRatio\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"fields.whRatio\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"fields.float\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"fields.shapes\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"fields.displayCaption\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.expandableCaption\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.truncateCaption\",\"values\":{\"no_viewport\":null}}]},{\"targets\":[\"article\"],\"data\":[{\"path\":\"fields.displayByline\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.showSection\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.sectionPlacement\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.showTags\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.tagPlacement\",\"values\":{\"no_viewport\":null}}]},{\"targets\":[\"article\",\"articleHeader\"],\"data\":[{\"path\":\"metadata.showKicker\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.kickerBelowImage\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.kickerBelowTitle\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.floatingKicker\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.hideTitle\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.titleAboveImage\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.floatingTitle\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.hidesubtitle\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.floatingSubtitle\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.hideimage\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.hasFullWidth\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.hasFullWidthWithLimit\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.compactDisplay\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.sub_hideImage\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.sub_hideTitle\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.sub_hideSubtitle\",\"values\":{\"no_viewport\":null}}]},{\"targets\":[\"row\"],\"data\":[{\"path\":\"metadata.hasRowTitle\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.vertical_align_content\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.isSection\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.text_background_color\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}},{\"path\":\"metadata.text_color\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"targets\":[\"userFeedback\",\"timeline\"],\"data\":[{\"path\":\"metadata.ui_color\",\"values\":{\"no_viewport\":null}},{\"path\":\"metadata.ui_text_color\",\"values\":{\"no_viewport\":null}}]},{\"targetPath\":\"bodytext/\",\"data\":[{\"path\":\"width\",\"values\":{\"no_viewport\":null,\"desktop\":null,\"mobile\":null}}]},{\"targets\":[\"grid\"],\"data\":[{\"path\":\"fields.columnCount\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.rowCount\",\"values\":{\"no_viewport\":null}},{\"path\":\"fields.noSpace\",\"values\":{\"no_viewport\":null}}]},{\"definition\":\"hasTextPadding\",\"data\":[{\"path\":\"fields.title\"},{\"path\":\"fields.subtitle\"},{\"path\":\"fields.kicker\"},{\"path\":\"fields.text\"}]},{\"definition\":\"hasContentPadding\"},{\"definition\":\"hasBorder\"}],\"presets\":{}},\"data\":{\"blacklist\":[\"sub_content\"],\"blacklistOptions\":{\"sub_content\":{\"includeChildren\":true}},\"elements\":{\"text_singleline\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"elementType\":\"h2\"}}}},\"articleHeader\":{\"source\":{\"node\":\"page\",\"keys\":[\"fields.title\",\"fields.subtitle\",\"fields.kicker\",\"fields.published\",\"fields.modified\",\"fields.created\"]},\"fallbackData\":{\"contentdata\":{\"fields\":{\"displayCaption\":true}},\"metadata\":{\"showKicker\":true}}},\"page_notice\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"uiColor\":\"bg-primary\"}}}},\"noticeHeader\":{\"source\":{\"node\":\"page\"}},\"bodytext\":{\"source\":{\"node\":\"page\"}},\"articleMeta\":{\"source\":{\"node\":\"page\"}},\"articleFooter\":{\"source\":{\"node\":\"page\"}},\"labradorSearch\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"submitLabel\":\"Search\",\"navLabel\":\"Display more\",\"nohitsLabel\":\"No hits. Try modifying your search\",\"displayAdvanced\":false,\"displaySites\":true,\"searchPlaceholder\":\"Type your search here ...\",\"articleCount\":20,\"advancedOpenText\":\"Open settings\",\"advancedCloseText\":\"Close settings\",\"orderBy\":\"published\",\"fromDateLabel\":\"From date\",\"toDateLabel\":\"To date\",\"tagLabel\":\"Tag\",\"authorLabel\":\"Author\",\"allSitesLabel\":\"All sites\"}},\"metadata\":{\"ui_color\":\"bg-secondary\"}}},\"timeline\":{\"fallbackData\":{\"metadata\":{\"ui_color\":\"bg-primary\",\"ui_text_color\":\"primary\"}}},\"livefeed\":{\"fallbackData\":{\"metadata\":{\"ui_color\":\"bg-primary\"},\"contentdata\":{\"fields\":{\"maxNoticesCount\":20,\"viewports_json\":{\"desktop\":{\"fields\":{\"visibleCount\":3}},\"mobile\":{\"fields\":{\"visibleCount\":2}}}}}}},\"image\":{\"fallbackData\":{\"metadata\":{\"bodyTextIndex\":0,\"subimagePlacement\":{\"desktop\":\"topright\"}}}},\"graphic\":{\"fallbackData\":{\"metadata\":{\"subimagePlacement\":{\"desktop\":\"topright\"}}}},\"articlesByTag\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"title\":\"\",\"title_style_json\":{\"text_background_color\":\"bg-black\"}}}}},\"front_rows\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"fragment_json\":{\"start\":0,\"count\":1}}}}},\"buttonlink\":{\"fallbackData\":{\"metadata\":{\"background_color\":\"bg-primary\",\"text_color\":\"white\",\"border_color\":\"bg-primary\"}}},\"topcomments\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"titleLatest\":\"Recent articles\",\"titleMostRead\":\"Most read articles\",\"labelLatest\":\"Latest\",\"labelMostRead\":\"Most read\",\"iconLatest\":\"fi-clock\",\"iconMostRead\":\"fi-book\",\"articleCount\":\"5\",\"days\":\"7\"}}}},\"factbox\":{\"fallbackData\":{\"metadata\":{\"expandedState\":{\"desktop\":true}}}},\"toplist\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"days\":\"7\",\"layout\":\"vertical\"}}}},\"articleList\":{\"fallbackData\":{\"contentdata\":{\"fields\":{\"imageLayout\":\"left\",\"layout\":\"default\"}}}},\"article\":{\"fallbackData\":{\"metadata\":{\"sub_hideSubtitle\":true}}}},\"presets\":{},\"presetBlacklist\":{\"article\":[\"article/\"]}}};\nexport const properties = {\"content_settings/front/vp_data.json\":{\"viewportMap\":{\"presets\":{\"vp_data\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"},\"attributes\":\"presets.vp_content_attributes.attributes\"},\"vp_content_attributes\":{\"attributes\":{\"font_weight\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"text_size\":{\"viewport\":{\"default\":true}},\"text_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"text_background_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"text_align\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"italic\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}}}},\"vp_metadata_attributes\":{\"attributes\":{\"bodyTextIndex\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"showKicker\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hideTitle\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"titleAboveImage\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"floatingTitle\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"floatingSubtitle\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"subtitleAboveImage\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hidesubtitle\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"kickerBelowImage\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"kickerBelowTitle\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"floatingKicker\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hasFullWidth\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hasFullWidthWithLimit\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"background_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"gradient\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"image_overlay\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"image_overlay_opacity\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"image_gradient\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"image_gradient_opacity\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"image_gradient_direction\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"background_color_op\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hideimage\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"spacing_outer_top\":{\"viewport\":{\"default\":true}},\"spacing_outer_right\":{\"viewport\":{\"default\":true}},\"spacing_outer_bottom\":{\"viewport\":{\"default\":true}},\"spacing_outer_left\":{\"viewport\":{\"default\":true}},\"spacing_inner_top\":{\"viewport\":{\"default\":true}},\"spacing_inner_right\":{\"viewport\":{\"default\":true}},\"spacing_inner_bottom\":{\"viewport\":{\"default\":true}},\"spacing_inner_left\":{\"viewport\":{\"default\":true}},\"pull_up\":{\"viewport\":{\"default\":true}},\"float\":{\"viewport\":{\"default\":true}},\"border_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"border_side\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"border_width\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"subarticles\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"showSection\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"showTags\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"text_align\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"vertical_align\":{\"viewport\":{\"default\":true}},\"hideViewport\":{\"viewport\":{\"default\":true},\"fallback\":{\"no_viewport\":false}},\"expandedState\":{\"viewport\":{\"default\":true}},\"displayNavigation\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"displayPreview\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}}}}},\"width\":{\"viewport\":{\"default\":true},\"fallback\":{\"mailmojo\":\"desktop\"}},\"metadata\":\"presets.vp_metadata_attributes\"}},\"content/row/front/default.json\":{\"viewportMap\":{\"metadata\":{\"attributes\":{\"bodyTextIndex\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"hasFullWidth\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hasFullWidthWithLimit\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"background_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"background_color_op\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"border_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"border_side\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"border_width\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"vertical_align\":{\"viewport\":{\"default\":true}},\"isSection\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"hideViewport\":{\"viewport\":{\"default\":true},\"fallback\":{\"no_viewport\":false}},\"spaceOutsideTop\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"spaceOutsideBottom\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"spaceInsideTop\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"spaceInsideBottom\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"float\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"text_size\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"text_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"text_background_color\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"movableContent\":{\"viewport\":{\"default\":true},\"fallback\":{\"no_viewport\":false}},\"collapsedContent\":{\"viewport\":{\"default\":true},\"fallback\":{\"no_viewport\":false}},\"contentPosition\":{\"viewport\":{\"default\":true},\"fallback\":{\"no_viewport\":false}}}}}},\"content/columns/front/default.json\":{},\"content_settings/front/grid/default.json\":{\"gridRules\":{\"oddRule\":{\"condition\":\"odd\",\"values\":{\"mobile\":{\"default\":12}}},\"evenRule\":{\"condition\":\"even\",\"values\":{\"mobile\":{\"default\":12}}}}},\"content/article/front/default.json\":{\"viewportMap\":{\"fields\":{\"title\":\"presets.vp_content_attributes\",\"subtitle\":\"presets.vp_content_attributes\",\"kicker\":\"presets.vp_content_attributes\",\"displayByline\":\"presets.vp_data\",\"displayCaption\":\"presets.vp_data\"}}},\"content/image/front/default.json\":{\"boxTitle\":\"Media placeholder\",\"boxDescription\":\"Add placeholder for media (images, videos, etc.)\",\"viewHelper\":\"image\",\"viewportMap\":{\"fields\":{\"x\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"y\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"cropw\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"croph\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"float\":{\"viewport\":{\"default\":true}},\"shapes\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"bbRatio\":{\"viewport\":{\"default\":true}},\"vpWidth\":{\"viewport\":{\"default\":true}},\"whRatio\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"height\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"width\":{\"viewport\":{\"default\":true}}},\"metadata\":{\"attributes\":{\"float\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"bodyTextIndex\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\",\"desktop\":\"mobile\"}},\"hideViewport\":{\"viewport\":{\"default\":true},\"fallback\":{\"no_viewport\":false}},\"hasFullWidth\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"zoomable\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"no_viewport\",\"desktop\":\"no_viewport\"}},\"subimage\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"subimagePlacement\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}},\"subimageSize\":{\"viewport\":{\"default\":true},\"fallback\":{\"default\":\"desktop\"}}}}}},\"content/image/front/subImage.json\":{\"overrideImageSize\":{\"width\":320}},\"content/image/front/subImageMobile.json\":{\"overrideImageSize\":{\"width\":103}},\"content/notice/front/default.json\":{\"boxTitle\":\"Notice\",\"viewHelper\":\"bodytext\",\"bodytextElements\":[\"p\",\"h2\",\"h3\",\"h4\",\"ul\",\"ol\",\"li\"],\"viewportMap\":{\"fields\":{\"title\":\"presets.vp_content_attributes\"}}},\"content/row/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"template\":{\"default\":\"content/row/template/default\"},\"properties\":{\"default\":[\"content_settings/front/vp_data.json\",\"content/row/front/default.json\"]}}}}},\"content/columns/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"properties\":{\"default\":[\"content/columns/front/default.json\",\"content_settings/front/grid/default.json\"]},\"template\":{\"default\":\"content/columns/template/default\"}}}}},\"content/article/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"properties\":{\"default\":[\"content/article/front/default.json\",\"content_settings/front/grid/default.json\",\"content_settings/front/vp_data.json\"]},\"template\":{\"default\":\"content/article/template/default\",\"partials\":[\"content/article/template/partials/kicker\",\"content/article/template/partials/subtitle\",\"content/article/template/partials/title\",\"partial/elements/paywallLabel\"]}}}}},\"content/image/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"template\":{\"default\":\"content/image/template/default\",\"partials\":[\"content/image/template/article\",\"content/image/template/partials/caption_links\",\"content/image/template/partials/caption\",\"content/image/template/partials/img\",\"content/image/template/partials/child\"]},\"properties\":{\"default\":[\"content/image/front/default.json\"]}},\"article\":{\"template\":{\"default\":\"content/image/template/article\"}},\"image\":{\"properties\":{\"default\":\"content/image/front/subImage.json\",\"mobile\":\"content/image/front/subImageMobile.json\"}},\"notice\":{\"template\":{\"default\":\"content/image/template/grid\"}}}}},\"content/notice/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"properties\":{\"default\":[\"content_settings/front/grid/default.json\",\"content_settings/front/vp_data.json\",\"content/notice/front/default.json\"]},\"template\":{\"default\":\"content/notice/template/default\"}}}}},\"content/adnuntiusAd/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"properties\":{\"default\":[\"content_settings/front/grid/default.json\"]},\"template\":{\"default\":\"content/adnuntiusAd/template/default\"}}}}},\"content/googleAd/_resources.json\":{\"presentation\":{\"stage\":{\"lab-default\":{\"properties\":{\"default\":[\"content_settings/front/grid/default.json\"]},\"template\":{\"default\":\"content/googleAd/template/default\"}}}}}};\nexport const templates = {\"content/row/template/default\":\"{{ #get.current.metadata.isSection }}\\n<div data-element-guid=\\\"{{ get.current.guid }}\\\" class=\\\"{{ #helper.trim }}\\nrow-section \\n{{ #style.collection }}section_decoration{{ /style.collection }}\\n{{ #style.collection }}content_decoration{{ /style.collection }}\\n{{ #style.definition }}movableContainer metadata.movableContent{{ /style.definition }}\\n{{ #style.definition }}movableElement metadata.movableContent{{ /style.definition }}\\n{{ #style.definition }}collapsedContent metadata.collapsedContent{{ /style.definition }}\\n{{ /helper.trim }}\\\" style=\\\"{{ #style.collection }}content_inline_style{{ /style.collection }}\\\">\\n{{ /get.current.metadata.isSection }}\\n<div {{ ^get.current.metadata.isSection }}data-element-guid=\\\"{{ get.current.guid }}\\\" {{ /get.current.metadata.isSection }}class=\\\"{{ #helper.trim }}\\n    row\\n    {{ size.grid.css }}\\n    {{ #get.current.metadata.fullWidthContent }}fullWidthContent{{ /get.current.metadata.fullWidthContent }}\\n    {{ #style.collection }}box_decoration{{ /style.collection }}\\n    {{ #style.collection }}content_decoration{{ /style.collection }}\\n    {{ #style.definition }}movableContainer metadata.movableContent{{ /style.definition }}\\n    {{ #style.definition }}movableElement metadata.movableContent{{ /style.definition }}\\n    {{ #style.definition }}collapsedContent metadata.collapsedContent{{ /style.definition }}\\n    {{ #get.current.metadata.hasRowTitle }}has-row-header{{ /get.current.metadata.hasRowTitle }}\\n    {{ #get.children.mediaContainer }}has-media-container{{ /get.children.mediaContainer }}\\n    {{ /helper.trim }}\\\" style=\\\"{{ #style.collection }}content_inline_style{{ /style.collection }}\\\"{{ #get.current.metadata.sectionId }} id=\\\"{{ get.current.metadata.sectionId }}\\\"{{ /get.current.metadata.sectionId }}>{{ #get.current.metadata.hasRowTitle }}\\n    {{ #get.current.metadata.rowTitleTag }}\\n    <{{ get.current.metadata.rowTitleTag }} class=\\\"row_header_text large-12 small-12 {{ #style.collection }}text_decoration metadata{{ /style.collection }} {{ #style.definition }}text_align_row{{ /style.definition }}\\\">{{{ get.current.metadata.rowTitle }}}</{{ get.current.metadata.rowTitleTag }}>\\n    {{ /get.current.metadata.rowTitleTag }}\\n    {{ ^get.current.metadata.rowTitleTag }}\\n    <h5 class=\\\"row_header_text large-12 small-12 {{ #style.collection }}text_decoration metadata{{ /style.collection }} {{ #style.definition }}text_align_row{{ /style.definition }}\\\">{{{ get.current.metadata.rowTitle }}}</h5>\\n    {{ /get.current.metadata.rowTitleTag }}\\n    {{ /get.current.metadata.hasRowTitle }}{{ #get.current.metadata.movableContent }}{{{ get.current.filtered.movableStyle }}}{{ /get.current.metadata.movableContent }}{{{ children.all }}}</div>\\n{{ #get.current.metadata.isSection }}\\n</div>\\n{{ /get.current.metadata.isSection }}\\n\",\"content/columns/template/default\":\"<div data-element-guid=\\\"{{ get.current.guid }}\\\" class=\\\"columns {{ size.grid.css }} {{ size.grid.absCss }}\\\">{{{ children.all }}}</div>\",\"content/article/template/default\":\"<article {{ #helper.trim }}\\n    data-element-guid=\\\"{{ get.current.guid }}\\\"\\n    class=\\\"column\\n        {{ #style.collection }}box_decoration{{ /style.collection }}\\n        {{ #get.current.filtered.paywall }}paywall{{ /get.current.filtered.paywall }}\\n        {{ size.grid.css }}\\n        {{ size.grid.absCss }}\\n        {{ get.current.filtered.autodata_css }}\\\"\\n    {{ #get.current.filtered.autodata_attributes }} {{ key }}=\\\"{{ value }}\\\"{{ /get.current.filtered.autodata_attributes }} \\n    data-site-alias=\\\"{{ get.current.filtered.site_alias }}\\\" \\n    data-section=\\\"{{ get.current.filtered.section }}\\\" \\n    data-instance=\\\"{{ get.current.instance_of }}{{ ^get.current.instance_of }}{{ get.current.id }}{{ /get.current.instance_of }}\\\" \\n    {{ #get.child.image.fields.float }}data-image-float=\\\"{{ get.child.image.fields.float }}\\\"{{ /get.child.image.fields.float }}\\n    itemscope itemtype=\\\"http://schema.org/NewsArticle\\\"\\n    {{ /helper.trim }}>\\n    {{{ get.current.filtered.styleSheets }}}\\n    <div class=\\\"{{ #helper.trim }}\\n        content\\n        {{ #style.collection }}content_decoration{{ /style.collection }}\\n        {{ #get.current.metadata.image_gradient_direction }}image-gradient-{{ get.current.metadata.image_gradient_direction }}{{ /get.current.metadata.image_gradient_direction }} \\n        {{ #style.collection }}box_fullWidth{{ /style.collection }}\\n        {{ /helper.trim }}\\\" style=\\\"{{ #style.collection }}content_inline_style{{ /style.collection }}\\\">\\n        \\n        {{#get.current.fields.published_url}}<a itemprop=\\\"url\\\"{{ #get.current.fields.open_in_new_window }} target=\\\"_blank\\\"{{ /get.current.fields.open_in_new_window }} class=\\\"\\\" href=\\\"{{{ get.current.fields.published_url }}}\\\" data-k5a-url=\\\"{{{ get.current.filtered.canonical_url }}}\\\" rel=\\\"{{ #get.current.filtered.addRelUgc }}ugc {{ /get.current.filtered.addRelUgc }}{{ #get.current.filtered.addRelSponsored }}sponsored {{ /get.current.filtered.addRelSponsored }}{{ #get.current.filtered.addRelNoFollow }}nofollow{{ /get.current.filtered.addRelNoFollow }}\\\">{{/get.current.fields.published_url}}\\n\\n        {{ #get.current.filtered.layout.top }}\\n        {{ #render.template }}content/article/template/partials/{{ . }}{{ /render.template }}\\n        {{ /get.current.filtered.layout.top }}\\n\\n        <div class=\\\"media{{ #get.current.metadata.floatingTextSubset }} floatingTextSubset{{ /get.current.metadata.floatingTextSubset }} {{ #style.definition }}imageAlign child.image.fields.float{{ /style.definition }}\\\">\\n            {{^get.current.metadata.hideimage}}\\n                {{{ placeholder.no_media }}}\\n\\n                {{{ child.image }}}\\n                {{{ child.graphic }}}\\n                {{{ child.slideshow }}}\\n                {{{ child.youtube }}}\\n                {{{ child.simplestream }}}\\n                {{{ child.markup }}}\\n                {{{ child.parallax }}}\\n                {{{ child.grid }}}\\n            \\n            {{/get.current.metadata.hideimage}}\\n            <div class=\\\"floatingText\\\">\\n                {{ #get.current.filtered.layout.floating }}\\n                {{ #render.template }}content/article/template/partials/{{ . }}{{ /render.template }}\\n                {{ /get.current.filtered.layout.floating }}\\n\\n                <div class=\\\"labels\\\">\\n                    {{ #get.current.filtered.autodata_custom.labels }}\\n                    <div class=\\\"label\\\" data-label-key=\\\"{{ key }}\\\" data-label-value=\\\"{{ value }}\\\"><span class=\\\"label-value\\\">{{ value }}</span></div>\\n                    {{ /get.current.filtered.autodata_custom.labels }}\\n                    {{ #get.current.filtered.sectionPlacement.floating }}\\n                        {{ #get.current.metadata.showSection }}\\n                            {{ #get.current.filtered.section }}<p itemprop=\\\"section\\\" class=\\\"section\\\" data-tag=\\\"{{ get.current.filtered.section }}\\\">{{ get.current.filtered.section }}</p>{{ /get.current.filtered.section }}\\n                        {{ /get.current.metadata.showSection }}\\n                    {{ /get.current.filtered.sectionPlacement.floating }}\\n                </div>\\n            </div>\\n            {{ #get.current.metadata.enableAudio }}{{ #render.template }}content/article/template/partials/audio{{ /render.template }}{{ /get.current.metadata.enableAudio }}\\n            {{ #get.current.filtered.paywallLabel }}{{> partial/elements/paywallLabel }}{{ /get.current.filtered.paywallLabel }}\\n        </div>\\n        {{ #get.current.fields.displayCaption }}\\n            <div class=\\\"caption {{ #helper.trim }}\\n                {{ #app.isEditor }}expanded{{ /app.isEditor }}\\n                {{ #get.current.fields.truncateCaption }}truncate{{ /get.current.fields.truncateCaption }}\\n                {{ ^get.current.fields.truncateCaption }}\\n                    {{ #get.child.image.fields.truncateCaption }}truncate{{ /get.child.image.fields.truncateCaption }}\\n                {{ /get.current.fields.truncateCaption }}\\n                {{ /helper.trim }}\\\" data-showmore=\\\"{{ #lang }}image.caption.showMoreLabel{{ /lang }}\\\"{{ #get.child.image.filtered.captionOptions.expandable }} data-expandable=\\\"true\\\" data-showcaption=\\\"{{ #lang }}image.caption.showCaptionLabel{{ /lang }}\\\" data-hidecaption=\\\"{{ #lang }}image.caption.hideCaptionLabel{{ /lang }}\\\"{{ /get.child.image.filtered.captionOptions.expandable }}>\\n                <figcaption itemprop=\\\"caption\\\" class=\\\"{{ #style.collection }}text_decoration child.image.fields.imageCaption{{ /style.collection }}\\\">{{ #helper.stripLinks }}{{ #get.child.image.fields.globalCaption }}{{{ get.child.image.fields.globalCaption }}}{{ /get.child.image.fields.globalCaption }}{{ ^get.child.image.fields.globalCaption }}{{{ get.child.image.fields.imageCaption }}}{{ /get.child.image.fields.globalCaption }}{{ /helper.stripLinks }}</figcaption>\\n                <figcaption itemprop=\\\"author\\\" class=\\\"{{ #style.collection }}text_decoration child.image.fields.byline{{ /style.collection }}\\\" data-byline-prefix=\\\"{{{ getConfig.image.imageBylinePrefix }}}\\\">{{ #helper.stripLinks }}{{{ get.child.image.fields.byline }}}{{ /helper.stripLinks }}</figcaption>\\n            </div>\\n        {{ /get.current.fields.displayCaption }}\\n\\n        {{ #get.current.metadata.vertical_text_align }}\\n            <div class=\\\"vertically-aligned-text\\\">\\n        {{ /get.current.metadata.vertical_text_align }}\\n\\n            {{ #get.current.filtered.sectionPlacement.underImage }}\\n                {{ #get.current.metadata.showSection }}\\n                    {{ #get.current.filtered.section }}<p itemprop=\\\"section\\\" class=\\\"section\\\" data-tag=\\\"{{ get.current.filtered.section }}\\\">{{ get.current.filtered.section }}</p>{{ /get.current.filtered.section }}\\n                {{ /get.current.metadata.showSection }}\\n            {{ /get.current.filtered.sectionPlacement.underImage }}\\n        \\n            {{ #get.current.filtered.tagPlacement.underImage }}\\n                {{ #get.current.metadata.showTags }}\\n                <div itemprop=\\\"tags\\\" class=\\\"tags\\\">{{#get.current.filtered.tags}}\\n                    <span itemprop=\\\"tag\\\" class=\\\"tag\\\" data-tag=\\\"{{ . }}\\\">{{.}}</span>\\n                {{/get.current.filtered.tags}}</div>\\n                {{ /get.current.metadata.showTags }}\\n            {{ /get.current.filtered.tagPlacement.underImage }}\\n            {{ #get.current.filtered.layout.bottom }}\\n            {{ #render.template }}content/article/template/partials/{{ . }}{{ /render.template }}\\n            {{ /get.current.filtered.layout.bottom }}\\n\\n            {{ #get.current.filtered.sectionPlacement.underText }}\\n                {{ #get.current.metadata.showSection }}\\n                    {{ #get.current.filtered.section }}<p itemprop=\\\"section\\\" class=\\\"section\\\" data-tag=\\\"{{ get.current.filtered.section }}\\\">{{ get.current.filtered.section }}</p>{{ /get.current.filtered.section }}\\n                {{ /get.current.metadata.showSection }}\\n            {{ /get.current.filtered.sectionPlacement.underText }}\\n        \\n            {{ #get.current.filtered.tagPlacement.underText }}\\n                {{ #get.current.metadata.showTags }}\\n                <div itemprop=\\\"tags\\\" class=\\\"tags under-text\\\">{{#get.current.filtered.tags}}\\n                    <span itemprop=\\\"tag\\\" class=\\\"tag\\\" data-tag=\\\"{{ . }}\\\">{{.}}</span>\\n                {{/get.current.filtered.tags}}</div>\\n                {{ /get.current.metadata.showTags }}\\n            {{ /get.current.filtered.tagPlacement.underText }}\\n\\n        {{ #get.current.metadata.vertical_text_align }}\\n            </div>\\n        {{ /get.current.metadata.vertical_text_align }}\\n\\n        {{ #get.current.filtered.displayByline }}\\n        <div class=\\\"bylines\\\">{{ #get.current.filtered.bylines }}\\n            <div class=\\\"byline column\\\" itemscope=\\\"\\\" itemtype=\\\"http://schema.org/Person\\\">\\n                <div class=\\\"content\\\">\\n                    {{ #imageUrl}}\\n                    <figure>\\n                        <img itemprop=\\\"image\\\" src=\\\"{{{ imageUrl}}}\\\">\\n                    </figure>\\n                    {{ /imageUrl}}\\n                    <address class=\\\"name\\\">{{{ firstname }}} {{{ lastname }}}</address>\\n                </div>\\n            </div>\\n        {{ /get.current.filtered.bylines }}\\n        {{ #get.current.filtered.displayPublishedDate }}\\n            <div class=\\\"article-published-wrapper\\\">\\n                <p class=\\\"article-published-date\\\">{{{ get.current.filtered.publishedDate }}}</p>\\n            </div>\\n        {{ /get.current.filtered.displayPublishedDate }}\\n        </div>\\n        {{ /get.current.filtered.displayByline}}\\n\\n        {{ ^get.current.filtered.displayByline}}\\n            {{ #get.current.filtered.displayPublishedDate }}\\n                <div class=\\\"article-published-wrapper\\\">\\n                    <p class=\\\"article-published-date\\\">{{{ get.current.filtered.publishedDate }}}</p>\\n                </div>\\n            {{ /get.current.filtered.displayPublishedDate }}\\n        {{ /get.current.filtered.displayByline}}\\n\\n        {{#get.current.fields.published_url}}</a>{{/get.current.fields.published_url}}\\n\\n        {{ #get.current.metadata.subarticles }}\\n            <p class=\\\"subarticlesTitle bold {{ #style.collection }}text_decoration fields.subarticlesTitle{{ /style.collection }}\\\" style=\\\"margin: 0.6em 0 0;\\\">{{{ get.current.fields.subarticlesTitle }}}</p>\\n            <ul class=\\\"relatedArticles\\\">{{ #children.article[]+ }}\\n            {{{ . }}}\\n            {{ /children.article[]+ }}</ul>\\n        {{ /get.current.metadata.subarticles }}\\n        <time itemprop=\\\"datePublished\\\" datetime=\\\"{{ get.current.filtered.published }}\\\"></time>\\n    </div>\\n</article>\",\"content/article/template/partials/kicker\":\"<div {{ #get.current.fields.kicker[animate] }}data-content=\\\"{{ #helper.sanitizeString }}{{{ get.current.filtered.kicker }}}{{ /helper.sanitizeString }}\\\"{{ /get.current.fields.kicker[animate] }}\\nstyle=\\\"{{ #style.collection }}text_decoration_inline_style fields.kicker{{ /style.collection }}\\\"\\nclass=\\\"kicker {{ get.current.filtered.layout.positions.kicker }} {{ #style.collection }}text_decoration fields.kicker{{ /style.collection }}\\\">\\n{{{ get.current.filtered.kicker }}}\\n</div>\",\"content/article/template/partials/subtitle\":\"<p itemprop=\\\"description\\\" \\n    class=\\\"subtitle {{ #style.collection }}text_decoration fields.subtitle{{ /style.collection }}{{ #get.current.metadata.subtitleAboveImage }} subtitleAboveImage{{ /get.current.metadata.subtitleAboveImage }}\\\"\\n    style=\\\"{{ #style.collection }}text_decoration_inline_style fields.subtitle{{ /style.collection }}\\\"\\n    {{ #get.current.fields.kicker[animate] }}data-content=\\\"{{ #helper.sanitizeString }}{{{ get.current.filtered.kicker }}}{{ /helper.sanitizeString }}\\\"{{ /get.current.fields.kicker[animate] }}>\\n    {{{ get.current.filtered.subtitle }}}\\n</p>\\n\",\"content/article/template/partials/title\":\"<h2 itemprop=\\\"headline\\\" \\n    class=\\\"headline {{ #style.collection }}text_decoration fields.title{{ /style.collection }}\\\"\\n    style=\\\"{{ #style.collection }}text_decoration_inline_style fields.title{{ /style.collection }}\\\"\\n    {{ #get.current.fields.title[animate] }}data-content=\\\"{{ #helper.sanitizeString }}{{{ get.current.filtered.title }}}{{ /helper.sanitizeString }}\\\"{{ /get.current.fields.title[animate] }}>{{{ get.current.filtered.title }}}\\n</h2>\",\"partial/elements/paywallLabel\":\"<div class=\\\"paywallLabel{{ #layout.noImage }} no-image{{ /layout.noImage }} {{ get.current.metadata.paywallLabelPosition }}{{ ^get.current.metadata.paywallLabelPosition }} {{ layout.float }}{{ /get.current.metadata.paywallLabelPosition }}\\\">{{ ^get.current.filtered.paywallLabel.hideLabelIcon }}{{ #icon.content }}<span class=\\\"{{ icon.content }}\\\"></span> {{/icon.content }}{{ /get.current.filtered.paywallLabel.hideLabelIcon }}{{ ^get.current.filtered.paywallLabel.hideLabelText }}{{ text.content }}{{ /get.current.filtered.paywallLabel.hideLabelText }}</div>\\n\",\"content/image/template/default\":\"<figure data-element-guid=\\\"{{ get.current.guid }}\\\" class=\\\"{{#helper.trim}}\\n    {{ #style.collection }}box_decoration{{ /style.collection }}\\n    {{ #get.current.filtered.hasFloat }}{{ #style.definition }}responsive_size fields.vpWidth{{ /style.definition }}{{ /get.current.filtered.hasFloat }}\\n    {{ #style.definition }}imageBorder fields.border{{ /style.definition }}\\n    {{ #style.definition }}imageAlign fields.float{{ /style.definition }}\\n    {{ get.current.filtered.imageLoadingClass }}\\n    {{/helper.trim}}\\\" {{ #get.current.filtered.hasFloat }}{{ ^get.current.fields.vpWidth }}style=\\\"width:{{ get.current.filtered.imageWidth }}px;\\\"{{ /get.current.fields.vpWidth }}{{ /get.current.filtered.hasFloat }}>\\n    <div class=\\\"img{{ #get.current.filtered.allowFullwidth }} fullwidthTarget{{ /get.current.filtered.allowFullwidth }} {{ #style.collection }}content_decoration{{ /style.collection }}\\\">\\n        {{ > content/image/template/partials/img }}\\n        {{ > content/image/template/partials/shapes }}\\n    </div>\\n    {{ ^get.parent.filtered.layout.floating }} {{ #get.current.filtered.captionOptions.display }}\\n    {{ > content/image/template/partials/caption }}\\n    {{ /get.current.filtered.captionOptions.display }} {{ /get.parent.filtered.layout.floating }}\\n</figure>\\n\",\"content/image/template/article\":\"<figure data-element-guid=\\\"{{ get.current.guid }}\\\" class=\\\"{{#helper.trim}}\\n    {{ #style.collection }}box_decoration{{ /style.collection }}\\n    {{ #get.current.filtered.hasFloat }}{{ #style.definition }}responsive_size fields.vpWidth{{ /style.definition }}{{ /get.current.filtered.hasFloat }}\\n    {{ #style.definition }}imageBorder fields.border{{ /style.definition }}\\n    {{ #style.definition }}imageAlign fields.float{{ /style.definition }}\\n    {{ get.current.filtered.imageLoadingClass }}\\n    {{/helper.trim}}\\\" {{ #get.current.filtered.hasFloat }}{{ ^get.current.fields.vpWidth }}style=\\\"width:{{ get.current.filtered.imageWidth }}px;\\\"{{ /get.current.fields.vpWidth }}{{ /get.current.filtered.hasFloat }}>\\n    <div class=\\\"img fullwidthTarget\\\">\\n        {{ > content/image/template/partials/img }}\\n        {{ > content/image/template/partials/shapes }}\\n    </div>\\n    {{ #get.parent.metadata.image_overlay }}<div class=\\\"imageOverlay {{ get.parent.metadata.image_overlay }} {{ get.parent.metadata.image_overlay_opacity }}\\\"></div>{{ /get.parent.metadata.image_overlay }}\\n    {{ > content/image/template/partials/child }}\\n</figure>\\n\",\"content/image/template/partials/caption_links\":\"<div class=\\\"caption {{ #helper.trim }}\\n    {{ #app.isEditor }}expanded{{ /app.isEditor }}\\n    {{ #get.parent.fields.truncateCaption }}truncate{{ /get.parent.fields.truncateCaption }}\\n    {{ ^get.parent.fields.truncateCaption }}\\n        {{ #get.current.fields.truncateCaption }}truncate{{ /get.current.fields.truncateCaption }}\\n    {{ /get.parent.fields.truncateCaption }}\\n    {{ /helper.trim }}\\\" data-showmore=\\\"{{ #lang }}image.caption.showMoreLabel{{ /lang }}\\\"{{ #get.current.filtered.captionOptions.expandable }} data-expandable=\\\"true\\\" data-showcaption=\\\"{{ #lang }}image.caption.showCaptionLabel{{ /lang }}\\\" data-hidecaption=\\\"{{ #lang }}image.caption.hideCaptionLabel{{ /lang }}\\\"{{ /get.current.filtered.captionOptions.expandable }}>\\n    <figcaption itemprop=\\\"caption\\\" class=\\\"{{ #style.collection }}text_decoration fields.imageCaption{{ /style.collection }}\\\">{{{ get.current.fields.imageCaption }}}</figcaption>\\n    <figcaption itemprop=\\\"author\\\" class=\\\"{{ #style.collection }}text_decoration fields.byline{{ /style.collection }}\\\" data-byline-prefix=\\\"{{{ getConfig.image.imageBylinePrefix }}}\\\">{{{ get.current.fields.byline }}}</figcaption>\\n</div>\",\"content/image/template/partials/caption\":\"<div class=\\\"caption {{ #helper.trim }}\\n    {{ #app.isEditor }}expanded{{ /app.isEditor }}\\n    {{ #get.parent.fields.truncateCaption }}truncate{{ /get.parent.fields.truncateCaption }}\\n    {{ ^get.parent.fields.truncateCaption }}\\n        {{ #get.current.fields.truncateCaption }}truncate{{ /get.current.fields.truncateCaption }}\\n    {{ /get.parent.fields.truncateCaption }}\\n    {{ /helper.trim }}\\\" data-showmore=\\\"{{ #lang }}image.caption.showMoreLabel{{ /lang }}\\\"{{ #get.current.filtered.captionOptions.expandable }} data-expandable=\\\"true\\\" data-showcaption=\\\"{{ #lang }}image.caption.showCaptionLabel{{ /lang }}\\\" data-hidecaption=\\\"{{ #lang }}image.caption.hideCaptionLabel{{ /lang }}\\\"{{ /get.current.filtered.captionOptions.expandable }}>\\n    <figcaption itemprop=\\\"caption\\\" class=\\\"{{ #style.collection }}text_decoration fields.imageCaption{{ /style.collection }}\\\">{{ #get.parent.fields.globalCaption }}{{{ get.parent.fields.globalCaption }}}{{ /get.parent.fields.globalCaption }}{{ ^get.parent.fields.globalCaption }}{{{ get.current.fields.imageCaption }}}{{ /get.parent.fields.globalCaption }}</figcaption>\\n    <figcaption itemprop=\\\"author\\\" class=\\\"{{ #style.collection }}text_decoration fields.byline{{ /style.collection }}\\\" data-byline-prefix=\\\"{{{ getConfig.image.imageBylinePrefix }}}\\\">{{{ get.current.fields.byline }}}</figcaption>\\n</div>\",\"content/image/template/partials/img\":\"<picture>\\n    {{ #get.current.filtered.viewport_list.desktop.formats }}\\n    <source srcset=\\\"{{{ get.current.filtered.viewport_list.desktop.url }}}&format={{ format }}\\\" \\n        width=\\\"{{{ get.current.filtered.viewport_list.desktop.width }}}\\\"\\n        height=\\\"{{{ get.current.filtered.viewport_list.desktop.height }}}\\\"\\n        media=\\\"(min-width: 768px)\\\"\\n        type=\\\"{{{ type }}}\\\">    \\n    {{ /get.current.filtered.viewport_list.desktop.formats }}\\n    {{ #get.current.filtered.viewport_list.mobile.formats }}\\n    <source srcset=\\\"{{{ get.current.filtered.viewport_list.mobile.url }}}&format={{ format }}\\\" \\n        width=\\\"{{{ get.current.filtered.viewport_list.mobile.width }}}\\\"\\n        height=\\\"{{{ get.current.filtered.viewport_list.mobile.height }}}\\\"\\n        media=\\\"(max-width: 767px)\\\"\\n        type=\\\"{{{ type }}}\\\">    \\n    {{ /get.current.filtered.viewport_list.mobile.formats }}\\n    <img src=\\\"{{{ get.current.filtered.viewport_list.mobile.url }}}&format=jpg\\\"\\n        width=\\\"{{{ get.current.filtered.viewport_list.mobile.width }}}\\\"\\n        height=\\\"{{{ get.current.filtered.viewport_list.mobile.height }}}\\\"\\n        title=\\\"{{ #helper.sanitizeString }}\\n        {{ #getConfig.image.showBylineAsTitle }}{{{ get.current.fields.byline }}}{{ /getConfig.image.showBylineAsTitle }}\\n        {{ ^getConfig.image.showBylineAsTitle }}{{{ get.current.filtered.captionOptions.title }}}{{ /getConfig.image.showBylineAsTitle }}\\n        {{ /helper.sanitizeString }}\\\"\\n        alt=\\\"{{ #helper.sanitizeString }}{{ #get.current.fields.altText }}{{{ get.current.fields.altText }}}{{ /get.current.fields.altText }}{{ /helper.sanitizeString }}\\\" \\n        {{ #get.current.filtered.lazyloadImages }}loading=\\\"lazy\\\"{{ /get.current.filtered.lazyloadImages }}\\n        {{ #app.isEditor }}\\n        class=\\\"{{ #helper.getEditorLoadingClass }}{{ /helper.getEditorLoadingClass }}\\\"\\n        style=\\\"{{ #helper.getEditorLoadingStyle }}{{ /helper.getEditorLoadingStyle }} {{{ get.current.filtered.filters }}}\\\"    \\n        {{ /app.isEditor }}\\n        {{ ^app.isEditor }}\\n        style=\\\"{{{ get.current.filtered.filters }}}\\\"    \\n        {{ /app.isEditor }}>\\n</picture>\",\"content/image/template/partials/child\":\"{{ #get.current.metadata.subimage }}\\n    {{ #app.isEditor }}\\n    <div class=\\\"imageChildren {{ #style.collection }}subimage{{ /style.collection }}\\\">{{{ children.all }}}</div>\\n    {{ /app.isEditor }}\\n    {{ #app.isFront }}{{ #children.all[0] }}\\n    <div class=\\\"imageChildren {{ #style.collection }}subimage{{ /style.collection }}\\\">{{{ children.all }}}</div>\\n    {{ /children.all[0] }}{{ /app.isFront }}\\n{{ /get.current.metadata.subimage }}\\n\",\"content/image/template/grid\":\"<figure data-element-guid=\\\"{{ get.current.guid }}\\\"{{ #get.current.metadata.zoomable }} data-zoomable=\\\"1\\\"{{ /get.current.metadata.zoomable }} class=\\\"{{#helper.trim}}\\n    column\\n    {{ #style.collection }}box_decoration{{ /style.collection }}\\n    {{ #style.collection }}box_fullWidth{{ /style.collection }}\\n    {{ size.grid.css }}\\n    {{ size.grid.absCss }}\\n    {{ get.current.filtered.borderClass }}\\n    {{ get.current.filtered.imageLoadingClass }}\\n    {{/helper.trim}}\\\">\\n    {{{ get.current.filtered.styleSheets }}}\\n    <div class=\\\"content {{ #style.collection }}content_decoration{{ /style.collection }}\\\" style=\\\"{{ #style.collection }}content_inline_style{{ /style.collection }}\\\">\\n        {{^get.current.instance_of}}\\n                {{ > content/image/template/placeholder }}\\n        {{/get.current.instance_of}}\\n        {{#get.current.instance_of}}\\n\\n        <div class=\\\"img fullwidthTarget\\\">\\n            {{ > content/image/template/partials/img }}\\n            {{ > content/image/template/partials/shapes }}\\n        </div>\\n        {{ #get.current.filtered.captionOptions.displayDefault }}\\n        {{ > content/image/template/partials/caption_links }}\\n        {{ /get.current.filtered.captionOptions.displayDefault }}\\n        {{/get.current.instance_of}}\\n    </div>\\n</figure>\\n\",\"content/notice/template/default\":\"<div class=\\\"notice column\\n  {{ #style.collection }}box_decoration{{ /style.collection }}\\\" id=\\\"notice-{{ get.current.id }}\\\" data-tags=\\\"{{{ get.current.tags }}}\\\">\\n    <div class=\\\"content {{ #style.collection }}content_decoration{{ /style.collection }}\\\" title=\\\"{{{ get.current.fields.title }}}\\\">\\n        <h2><a href=\\\"/notice/{{ get.current.id }}\\\">{{{ get.current.fields.title }}}</a></h2>\\n        <div class=\\\"meta\\\">\\n            <time class=\\\"fi-clock\\\" datetime=\\\"{{ get.current.filtered.isoDate }}\\\" title=\\\"{{ get.current.filtered.publishedDate }}\\\">{{ get.current.filtered.niceDate }}</time>\\n            {{ #get.current.fields.userName }}<span class=\\\"author fi-torsos\\\">{{{ get.current.fields.userName }}}</span>{{ /get.current.fields.userName }}\\n            {{ #get.current.fields.pinned }}{{ ^get.parent.metadata.hidePinIcon }} <span class=\\\"pinned fi-marker\\\"> {{ #lang }}notice.pinnedLabel{{ /lang }}</span>{{ /get.parent.metadata.hidePinIcon }}{{ /get.current.fields.pinned }}\\n        </div>\\n        <div class=\\\"text bodytext\\\">{{{ get.current.filtered.bodytext }}}</div>\\n    </div>\\n</div>\",\"content/adnuntiusAd/template/default\":\"{{ ^get.current.filtered.hideOnTablet }}\\n\\n<div class=\\\"{{ #helper.trim }}\\n    column\\n    adnuntius-ad\\n    {{ get.current.fields.css }}\\n    {{ ^get.current.metadata.isBodytext }}\\n    {{ size.grid.css }}\\n    {{ /get.current.metadata.isBodytext }}\\n    {{ get.current.metadata.css }}\\n    {{ #get.current.filtered.isDebug }}adnuntius-ad-debug{{ /get.current.filtered.isDebug }}\\n    {{ /helper.trim }}\\\" {{ #get.current.filtered.isDebug }}data-ad-format=\\\"{{{ get.current.fields.format }}}\\\" data-ad-size=\\\"{{ get.current.filtered.adData.width }}x{{ get.current.filtered.adData.height }}\\\"{{ /get.current.filtered.isDebug }}style=\\\"{{get.current.filtered.spacingTop}}{{ #get.current.metadata.style }} {{{ get.current.metadata.style }}}{{ /get.current.metadata.style }}\\\" data-element-guid=\\\"{{ get.current.guid }}\\\">\\n    {{ #app.isEditor }}\\n    <div class=\\\"ad-editor-preview adnuntius-ad-content\\\" style=\\\"width:{{ get.current.filtered.adData.width }}px; height:{{ get.current.filtered.adData.height }}px;\\\" title=\\\"{{ get.current.fields.format }}\\\">\\n        <h4>Adnuntius-ad</h4>\\n        Format: <strong>{{ get.current.fields.format }}</strong><br>\\n        size: <strong>{{ get.current.filtered.adData.width }}x{{ get.current.filtered.adData.height }}</strong>\\n    </div>\\n    {{ /app.isEditor }}\\n    {{ ^app.isEditor }}\\n    <div id=\\\"adn-{{{ get.current.filtered.adData.auId }}}\\\" {{ #get.current.metadata.defaultHeight }}style=\\\"display:block;height:{{get.current.metadata.defaultHeight}}px;\\\"{{ /get.current.metadata.defaultHeight }}{{ ^get.current.metadata.defaultHeight }}style=\\\"display:none;\\\"{{ /get.current.metadata.defaultHeight }} class=\\\"adnuntius-ad-content\\\">\\n        <span class=\\\"ad-label\\\">{{ get.current.filtered.label }}</span>\\n    </div>\\n    {{ /app.isEditor }}\\n</div>\\n\\n{{ /get.current.filtered.hideOnTablet }}\\n\",\"content/googleAd/template/default\":\"{{ ^get.current.filtered.hideOnTablet }}\\n<div data-element-guid=\\\"{{ get.current.guid }}\\\" class=\\\"{{ #helper.trim }}\\n    column\\n    google-ad\\n    {{ #style.collection }}box_decoration{{ /style.collection }}\\n    {{ ^get.current.metadata.isBodytext }}\\n    {{ size.grid.css }}\\n    {{ size.grid.absCss }}\\n    {{ /get.current.metadata.isBodytext }}\\n    {{ get.current.fields.css }}\\n    {{ get.current.metadata.css }}\\n    {{ #get.current.filtered.isDebug }}adnuntius-ad-debug{{ /get.current.filtered.isDebug }}\\n    {{ /helper.trim }}\\\" {{ #get.current.filtered.isDebug }}data-ad-format=\\\"{{{ get.current.fields.format }}}\\\"{{ /get.current.filtered.isDebug }} style=\\\"{{get.current.filtered.spacingTop}}{{ #get.current.metadata.style }} {{{ get.current.metadata.style }}}{{ /get.current.metadata.style }}\\\">\\n\\n    {{ #app.isEditor }}\\n    <div class=\\\"ad-editor-preview\\\" title=\\\"{{ get.current.fields.format }}\\\">\\n        <h4>Google-ad</h4>\\n        Format: <strong>{{ get.current.fields.format }}</strong>\\n    </div>\\n    {{ /app.isEditor }}\\n    {{ ^app.isEditor }}\\n    {{ #get.current.filtered.googleAds.bidding.enabled }}\\n        {{ #get.current.filtered.googleAds.bidding.provider.name }}\\n            <span class=\\\"ad-label\\\">{{ get.current.filtered.label }}</span>\\n            {{ #render.template }}content/googleAd/template/{{ get.current.filtered.googleAds.bidding.provider.name}}{{ /render.template }}\\n        {{ /get.current.filtered.googleAds.bidding.provider.name }}\\n    {{ /get.current.filtered.googleAds.bidding.enabled }}\\n    {{ ^get.current.filtered.googleAds.bidding.enabled }}\\n        <span class=\\\"ad-label\\\">{{ get.current.filtered.label }}</span>\\n        <div class=\\\"adunit\\\" id=\\\"{{{ get.current.filtered.adData.code }}}\\\" {{ #get.current.metadata.defaultHeight }}style=\\\"min-height:{{ get.current.metadata.defaultHeight }}px;\\\"{{ /get.current.metadata.defaultHeight }}></div>\\n        <script>\\n            googletag.cmd.push(function() {\\n                googletag.display('{{{ get.current.filtered.adData.code }}}');\\n            });\\n        </script>\\n    {{ /get.current.filtered.googleAds.bidding.enabled }}\\n    {{ /app.isEditor }}\\n</div>\\n{{ /get.current.filtered.hideOnTablet }}\"};\n","if(!t)var t={map:function(t,r){var n={};return r?t.map(function(t,o){return n.index=o,r.call(n,t)}):t.slice()},naturalOrder:function(t,r){return t<r?-1:t>r?1:0},sum:function(t,r){var n={};return t.reduce(r?function(t,o,e){return n.index=e,t+r.call(n,o)}:function(t,r){return t+r},0)},max:function(r,n){return Math.max.apply(null,n?t.map(r,n):r)}};var r=function(){var r=5,n=8-r,o=1e3;function e(t,n,o){return(t<<2*r)+(n<<r)+o}function u(t){var r=[],n=!1;function o(){r.sort(t),n=!0}return{push:function(t){r.push(t),n=!1},peek:function(t){return n||o(),void 0===t&&(t=r.length-1),r[t]},pop:function(){return n||o(),r.pop()},size:function(){return r.length},map:function(t){return r.map(t)},debug:function(){return n||o(),r}}}function a(t,r,n,o,e,u,a){var i=this;i.r1=t,i.r2=r,i.g1=n,i.g2=o,i.b1=e,i.b2=u,i.histo=a}function i(){this.vboxes=new u(function(r,n){return t.naturalOrder(r.vbox.count()*r.vbox.volume(),n.vbox.count()*n.vbox.volume())})}function c(r,n){if(n.count()){var o=n.r2-n.r1+1,u=n.g2-n.g1+1,a=t.max([o,u,n.b2-n.b1+1]);if(1==n.count())return[n.copy()];var i,c,f,s,h=0,v=[],l=[];if(a==o)for(i=n.r1;i<=n.r2;i++){for(s=0,c=n.g1;c<=n.g2;c++)for(f=n.b1;f<=n.b2;f++)s+=r[e(i,c,f)]||0;v[i]=h+=s}else if(a==u)for(i=n.g1;i<=n.g2;i++){for(s=0,c=n.r1;c<=n.r2;c++)for(f=n.b1;f<=n.b2;f++)s+=r[e(c,i,f)]||0;v[i]=h+=s}else for(i=n.b1;i<=n.b2;i++){for(s=0,c=n.r1;c<=n.r2;c++)for(f=n.g1;f<=n.g2;f++)s+=r[e(c,f,i)]||0;v[i]=h+=s}return v.forEach(function(t,r){l[r]=h-t}),function(t){var r,o,e,u,a,c=t+\"1\",f=t+\"2\",s=0;for(i=n[c];i<=n[f];i++)if(v[i]>h/2){for(e=n.copy(),u=n.copy(),a=(r=i-n[c])<=(o=n[f]-i)?Math.min(n[f]-1,~~(i+o/2)):Math.max(n[c],~~(i-1-r/2));!v[a];)a++;for(s=l[a];!s&&v[a-1];)s=l[--a];return e[f]=a,u[c]=e[f]+1,[e,u]}}(a==o?\"r\":a==u?\"g\":\"b\")}}return a.prototype={volume:function(t){var r=this;return r._volume&&!t||(r._volume=(r.r2-r.r1+1)*(r.g2-r.g1+1)*(r.b2-r.b1+1)),r._volume},count:function(t){var r=this,n=r.histo;if(!r._count_set||t){var o,u,a,i=0;for(o=r.r1;o<=r.r2;o++)for(u=r.g1;u<=r.g2;u++)for(a=r.b1;a<=r.b2;a++)i+=n[e(o,u,a)]||0;r._count=i,r._count_set=!0}return r._count},copy:function(){var t=this;return new a(t.r1,t.r2,t.g1,t.g2,t.b1,t.b2,t.histo)},avg:function(t){var n=this,o=n.histo;if(!n._avg||t){var u,a,i,c,f=0,s=1<<8-r,h=0,v=0,l=0;for(a=n.r1;a<=n.r2;a++)for(i=n.g1;i<=n.g2;i++)for(c=n.b1;c<=n.b2;c++)f+=u=o[e(a,i,c)]||0,h+=u*(a+.5)*s,v+=u*(i+.5)*s,l+=u*(c+.5)*s;n._avg=f?[~~(h/f),~~(v/f),~~(l/f)]:[~~(s*(n.r1+n.r2+1)/2),~~(s*(n.g1+n.g2+1)/2),~~(s*(n.b1+n.b2+1)/2)]}return n._avg},contains:function(t){var r=this,o=t[0]>>n;return gval=t[1]>>n,bval=t[2]>>n,o>=r.r1&&o<=r.r2&&gval>=r.g1&&gval<=r.g2&&bval>=r.b1&&bval<=r.b2}},i.prototype={push:function(t){this.vboxes.push({vbox:t,color:t.avg()})},palette:function(){return this.vboxes.map(function(t){return t.color})},size:function(){return this.vboxes.size()},map:function(t){for(var r=this.vboxes,n=0;n<r.size();n++)if(r.peek(n).vbox.contains(t))return r.peek(n).color;return this.nearest(t)},nearest:function(t){for(var r,n,o,e=this.vboxes,u=0;u<e.size();u++)((n=Math.sqrt(Math.pow(t[0]-e.peek(u).color[0],2)+Math.pow(t[1]-e.peek(u).color[1],2)+Math.pow(t[2]-e.peek(u).color[2],2)))<r||void 0===r)&&(r=n,o=e.peek(u).color);return o},forcebw:function(){var r=this.vboxes;r.sort(function(r,n){return t.naturalOrder(t.sum(r.color),t.sum(n.color))});var n=r[0].color;n[0]<5&&n[1]<5&&n[2]<5&&(r[0].color=[0,0,0]);var o=r.length-1,e=r[o].color;e[0]>251&&e[1]>251&&e[2]>251&&(r[o].color=[255,255,255])}},{quantize:function(f,s){if(!f.length||s<2||s>256)return!1;var h=function(t){var o,u=new Array(1<<3*r);return t.forEach(function(t){o=e(t[0]>>n,t[1]>>n,t[2]>>n),u[o]=(u[o]||0)+1}),u}(f);h.forEach(function(){});var v=function(t,r){var o,e,u,i=1e6,c=0,f=1e6,s=0,h=1e6,v=0;return t.forEach(function(t){(o=t[0]>>n)<i?i=o:o>c&&(c=o),(e=t[1]>>n)<f?f=e:e>s&&(s=e),(u=t[2]>>n)<h?h=u:u>v&&(v=u)}),new a(i,c,f,s,h,v,r)}(f,h),l=new u(function(r,n){return t.naturalOrder(r.count(),n.count())});function g(t,r){for(var n,e=t.size(),u=0;u<o;){if(e>=r)return;if(u++>o)return;if((n=t.pop()).count()){var a=c(h,n),i=a[0],f=a[1];if(!i)return;t.push(i),f&&(t.push(f),e++)}else t.push(n),u++}}l.push(v),g(l,.75*s);for(var p=new u(function(r,n){return t.naturalOrder(r.count()*r.volume(),n.count()*n.volume())});l.size();)p.push(l.pop());g(p,s);for(var b=new i;p.size();)b.push(p.pop());return b}}}().quantize,n=function(t){this.canvas=document.createElement(\"canvas\"),this.context=this.canvas.getContext(\"2d\"),this.width=this.canvas.width=t.naturalWidth,this.height=this.canvas.height=t.naturalHeight,this.context.drawImage(t,0,0,this.width,this.height)};n.prototype.getImageData=function(){return this.context.getImageData(0,0,this.width,this.height)};var o=function(){};o.prototype.getColor=function(t,r){return void 0===r&&(r=10),this.getPalette(t,5,r)[0]},o.prototype.getPalette=function(t,o,e){var u=function(t){var r=t.colorCount,n=t.quality;if(void 0!==r&&Number.isInteger(r)){if(1===r)throw new Error(\"colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()\");r=Math.max(r,2),r=Math.min(r,20)}else r=10;return(void 0===n||!Number.isInteger(n)||n<1)&&(n=10),{colorCount:r,quality:n}}({colorCount:o,quality:e}),a=new n(t),i=function(t,r,n){for(var o,e,u,a,i,c=t,f=[],s=0;s<r;s+=n)e=c[0+(o=4*s)],u=c[o+1],a=c[o+2],(void 0===(i=c[o+3])||i>=125)&&(e>250&&u>250&&a>250||f.push([e,u,a]));return f}(a.getImageData().data,a.width*a.height,u.quality),c=r(i,u.colorCount);return c?c.palette():null},o.prototype.getColorFromUrl=function(t,r,n){var o=this,e=document.createElement(\"img\");e.addEventListener(\"load\",function(){var u=o.getPalette(e,5,n);r(u[0],t)}),e.src=t},o.prototype.getImageData=function(t,r){var n=new XMLHttpRequest;n.open(\"GET\",t,!0),n.responseType=\"arraybuffer\",n.onload=function(){if(200==this.status){var t=new Uint8Array(this.response);i=t.length;for(var n=new Array(i),o=0;o<t.length;o++)n[o]=String.fromCharCode(t[o]);var e=n.join(\"\"),u=window.btoa(e);r(\"data:image/png;base64,\"+u)}},n.send()},o.prototype.getColorAsync=function(t,r,n){var o=this;this.getImageData(t,function(t){var e=document.createElement(\"img\");e.addEventListener(\"load\",function(){var t=o.getPalette(e,5,n);r(t[0],this)}),e.src=t})};export{o as default};\n","import Front from './Front.js';\nimport { Namespace } from './lib/editor/Namespace.js';\nimport { StyleHelper } from './lib/helpers/StyleHelper.js';\nimport { ResourceHelper } from './lib/helpers/ResourceHelper.js';\nimport { EsiHelper } from './lib/helpers/dynamic/EsiHelper.js';\nimport { DynamicDataHelper } from './lib/helpers/dynamic/DynamicDataHelper.js';\n\nexport default class extends Front {\n\n    onReady(api) {\n        super.onReady(api);\n        Namespace.expose();\n        this.loadSiteStyles();\n        this.imageUploadProcessor = null;\n        this.registerImageUploads();\n        this.dynamicData = null;\n        this.wpm = this.api.v1.config.get('displayReadTime.wpm') || 250;\n    }\n\n    onAcceptContent() {\n        this.addDefaultByline();\n\n        const esiHelper = new EsiHelper(this.api);\n        esiHelper.register(this.api.v1.model.query.getRootModel(), this.api.v1.site.getSite().alias);\n\n        // Check if custom spacing is supported on this page\n        const rootModel = this.api.v1.model.query.getRootModel();\n        this.useSpacing = !!rootModel.get('fields.style_spacing');\n        this.api.v1.model.bindings.bind(rootModel, 'fields.style_spacing', (model, path, value) => {\n            this.useSpacing = !!value;\n        });\n\n        if (this.api.v1.model.getPageType() === 'article') {\n            const bodytextModel = this.api.v1.model.query.getModelByType('bodytext');\n            if (bodytextModel) {\n                this.dynamicData = new DynamicDataHelper(this.api);\n                this.updateBodytextAds(bodytextModel);\n                this.api.v1.model.bindings.bind(this.api.v1.model.query.getRootModel(), 'fields.bodytext', (model) => {\n                    if (this.api.v1.model.canRedraw(bodytextModel)) {\n                        this.updateBodytextAds(bodytextModel);\n                    }\n                    this.updateReadTime(bodytextModel);\n                });\n            }\n        }\n    }\n\n    updateBodytextAds(model) {\n        // Remove non-persistent elements from model\n        const children = [...model.getChildren()];\n        for (const child of children) {\n            if (child.isNonPersistent()) {\n                this.api.v1.model.delete(child, true, true);\n            }\n        }\n        // Insert ads\n        for (const view of this.api.v1.view.getViews(model)) {\n            this.dynamicData.insert(view.getViewport(), 'bodytext[0]');\n        }\n    }\n\n    updateReadTime(model) {\n        const bodytext = this.api.v1.bodytext.getText(model);\n        const readTime = this.api.v1.text.getReadTime(bodytext, this.wpm);\n        model.set('fields.readTime', readTime);\n    }\n\n    loadSiteStyles() {\n        const siteAlias = this.api.v1.properties.get('site.alias');\n        const siteStylesheetList = ResourceHelper.getSiteStylesWithFallback(siteAlias);\n\n        if (siteStylesheetList.length) {\n            siteStylesheetList.forEach((path) => {\n                this.api.v1.util.dom.addFile('css', path);\n            });\n        }\n\n        // Add inline css to main window:\n        const cssBuild = StyleHelper.getInlineCSS(this.api);\n        cssBuild.forEach((style) => {\n            const styleEl = window.parent.document.createElement('style');\n            styleEl.type = 'text/css';\n            styleEl.appendChild(document.createTextNode(style.value));\n            Sys.logger.debug(`ViewSupport: Insert inline css in main window for key: ${ style.key }`);\n            window.parent.document.head.appendChild(styleEl);\n        });\n    }\n\n    registerImageUploads() {\n        const skipInfoPanel = this.api.v1.config.get('image.skipImageInfoAfterUpload');\n        // Documentation: /support/docs/#js-api/v1/image/on.md\n        this.api.v1.image.on('imagesUploaded', (items) => {\n            if (!items.length) { return; }\n            if (!skipInfoPanel) {\n                if (!this.imageUploadProcessor) {\n                    import('./lib/editor/ImageUploadProcessor.js')\n                        .then((module) => {\n                            this.imageUploadProcessor = new module.ImageUploadProcessor(this.api);\n                            this.imageUploadProcessor.imagesUploaded(items);\n                            this.api.v1.file.hideImageUpload();\n                        }).catch((error) => {\n                            Sys.logger.warn(error);\n                        });\n                    return;\n                }\n                this.imageUploadProcessor.imagesUploaded(items);\n                this.api.v1.file.hideImageUpload();\n            }\n        });\n    }\n\n    addDefaultByline() {\n        const rootModel = this.api.v1.model.query.getRootModel();\n\n        // Only apply to article-pages:\n        if (rootModel.getType() !== 'page_article') { return; }\n\n        // Check if this is a prototype:\n        if (rootModel.get('fields.subtype') === 'prototype') { return; }\n\n        // Check if a byline already exist:\n        if (this.api.v1.model.query.getModelByType('byline')) { return; }\n\n        // Check if a default byline is set on user:\n        const defaultBylineId = this.api.v1.user.getField('defaultByline');\n        if (!defaultBylineId) { return; }\n\n        // Only add byline if article is created by current user:\n        if (this.api.v1.user.getUserId().toString() !== rootModel.get('fields.created_by')) { return; }\n\n        // Only add byline if article is new:\n        const maxAge = 60; // One minute\n        if ((parseInt(rootModel.get('fields.created'), 10)) + maxAge < (new Date().getTime() / 1000)) { return; }\n\n        this.api.v1.util.httpClient.get(`/ajax/node/get-node?id=${ defaultBylineId }`).then((resp) => {\n            if (!resp.data) {\n                console.log(`[addDefaultByline] No byline found for id ${ defaultBylineId }.`);\n                return;\n            }\n            const children = [];\n            if (resp.data.children && resp.data.children.length) {\n                children.push({\n                    type: 'image',\n                    contentdata: {\n                        type: 'image',\n                        instance_of: resp.data.children[0].instance_of,\n                        fields: resp.data.children[0].fields\n                    }\n                });\n            }\n            Sys.logger.debug(`Will insert user-byline`);\n            this.api.v1.model.insert.atPath({\n                path: 'page_article/articleHeader/articleMeta',\n                data: {\n                    type: 'byline',\n                    contentdata: {\n                        type: 'byline',\n                        instance_of: resp.data.id,\n                        fields: resp.data.fields\n                    },\n                    children\n                }\n            });\n\n        }).catch((error) => {\n            console.log('[addDefaultByline] Failed to fetch and insert default byline for user: ', error);\n        });\n\n    }\n\n}\n","import { DynamicDataHelper } from './lib/helpers/dynamic/DynamicDataHelper.js';\nimport { FragmentHelper } from './lib/helpers/FragmentHelper.js';\nimport { PageExport } from './lib/helpers/PageExport.js';\nimport { EsiHelper } from './lib/helpers/dynamic/EsiHelper.js';\nimport { Spacing } from './lib/helpers/Spacing.js';\n\nexport default class {\n\n    constructor() {\n        this.name = 'Baseview';\n        this.api = null;\n        this.pageAPI = null;\n        this.useSpacing = false;\n    }\n\n    onReady(api) {\n        this.api = api;\n\n        Sys.logger.debug(`[Front] Running Baseview version ${ this.api.v1.config.get('view_version') }, build ${ this.api.v1.config.get('view_build.baseview.version') }`);\n\n        // Display JSON Viewport data.\n        // Return an array with a serialized version of the root-model in a format equal to backend API-format\n        if (this.api.v1.viewport.getName() === 'json') {\n            if (this.api.v1.config.get('viewports.json.renderer') === 'PageExport.jsonData') {\n                const pageExporter = new PageExport(this.api);\n                this.api.v1.view.on('rendered', (markups, viewport) => [JSON.stringify(pageExporter.jsonData(this.api.v1.model.query.getRootModel()), null, 4)]);\n            }\n        }\n\n        // Display oEmbed of article. https://oembed.com\n        if (this.api.v1.viewport.getName() === 'oembed') {\n            if (this.api.v1.config.get('viewports.oembed.renderer') === 'PageExport.oembed') {\n                const pageExporter = new PageExport(this.api);\n                this.api.v1.view.on('rendered', (markups, viewport) => [JSON.stringify(pageExporter.oembed(this.api.v1.model.query.getRootModel()), null, 4)]);\n            }\n        }\n\n        const fragmentHelper = new FragmentHelper(this.api, this.api.v1.util.request);\n        fragmentHelper.listen();\n    }\n\n    onAcceptContent() {\n        const rootModel = this.api.v1.model.query.getRootModel();\n\n        // Check if custom spacing is supported on this page\n        this.useSpacing = !!(rootModel && rootModel.get('fields.style_spacing'));\n\n        if (this.api.v1.app.mode.getSimulatedMode() === 'editor') {\n            Sys.logger.debug('[Front] Labrador is running in simulated editor-mode. Skipping DynamicDataHelper and EsiHelper.');\n            return;\n        }\n        const dynamicData = new DynamicDataHelper(this.api);\n        const clientSidePlacements = dynamicData.insert(this.api.v1.viewport.getName());\n        if (clientSidePlacements.length > 0 && !rootModel.get('fields.hideAds')) {\n            // The head-template will use this data to render the placements client side using the script ClientAds.js.\n            rootModel.setFiltered('clientSidePlacements', JSON.stringify(clientSidePlacements));\n            rootModel.setFiltered('clientSideResources', JSON.stringify({\n                configObject: {\n                    viewConfig: {\n                        config: {\n                            customer: {\n                                contentbox_settings: {\n                                    adnuntiusAd: this.api.v1.config.get('contentbox_settings.adnuntiusAd') || {},\n                                    googleAd: this.api.v1.config.get('contentbox_settings.googleAd') || {}\n                                },\n                                adEnvironment: this.api.v1.config.get('adEnvironment') || {}\n                            }\n                        }\n                    }\n                },\n                site: this.api.v1.site.getSite(),\n                device: this.api.v1.properties.get('device'),\n                debug: this.api.v1.util.request.hasQueryParam('debug') || false\n            }));\n        }\n\n        const esiHelper = new EsiHelper(this.api);\n        esiHelper.register(rootModel, this.api.v1.site.getSite().alias);\n\n        // Allow url param lab_opts to hide header and footer\n        // Note: This method is also defined in Editor.js, so the method is never run in the editor.\n        if (this.api.v1.util.request.hasQueryValue('lab_opts', 'hideHeader')) {\n            Sys.logger.debug('[Front] Hiding header and logo based on url param lab_opts=hideHeader ...');\n            rootModel.setFiltered('pageHeaderDisplay', 'hideHeaderAndLogo');\n        }\n        if (this.api.v1.util.request.hasQueryValue('lab_opts', 'hideFooter')) {\n            Sys.logger.debug('[Front] Hiding footer based on url param lab_opts=hideFooter ...');\n            rootModel.setFiltered('pageFooterDisplay', 'hideFooter');\n        }\n        if (this.api.v1.util.request.hasQueryValue('lab_opts', 'hideComments')) {\n            Sys.logger.debug('[Front] Hiding Hyvor comments based on url param lab_opts=hideComments ...');\n            rootModel.setFiltered('pageCommentsDisplay', 'hideComments');\n        }\n    }\n\n    onRender(model, view) {\n        if (this.useSpacing) {\n            model.setFiltered('styleSheets', Spacing.createStyle({\n                model,\n                view,\n                viewports: ['desktop', 'mobile'],\n                returnArray: false\n            }));\n        }\n    }\n\n    onMapData(data) {\n        // Map text_title and text_subtitle to text_singleline\n        if (data.type === 'text_title' || data.type === 'text_subtitle') {\n            if (!data.contentdata || !data.contentdata.fields) {\n                return undefined;\n            }\n            const modifiedData = { ...data };\n            modifiedData.type = 'text_singleline';\n            modifiedData.contentdata.fields.text = modifiedData.contentdata.fields.title || modifiedData.contentdata.fields.subtitle;\n            if (data.type === 'text_subtitle') {\n                modifiedData.contentdata.fields.elementType = { value: 'h3' };\n                delete modifiedData.contentdata.fields.subtitle;\n            } else {\n                modifiedData.contentdata.fields.elementType = { value: 'h2' };\n                lab_api.v1.util.object.set('attributes.text_size.vp.desktop', lab_api.v1.util.object.get('attributes.text_size.vp.desktop', modifiedData.contentdata.fields.text) || 44, modifiedData.contentdata.fields.text);\n                delete modifiedData.contentdata.fields.title;\n            }\n            modifiedData.lab_internal_format = true;\n            return modifiedData;\n        }\n        return undefined;\n    }\n\n}\n","// this.api.v1.apps.start('BylineEditor', { id: 100652 })\n\nexport class BylineEditor {\n\n    constructor(api, { id = null, endcallback = null } = {}) {\n        this.api = api;\n        this.data = {\n            id: null,\n            fields: {},\n            children: []\n        };\n        this.isDefault = id && id === parseInt(lab_api.v1.user.getField('defaultByline'), 10);\n        this.endcallback = endcallback || null;\n        this.registered = false;\n        this.modal = null;\n        if (id && typeof id === 'number') {\n            fetch(`/ajax/node/get-node?id=${ id }`).then((resp) => resp.json()).then((resp) => {\n                this.data = resp.data;\n                if (!this.data.children) {\n                    this.data.children = [];\n                }\n                this.display();\n            }).catch((error) => {\n                console.log('error fetching byline: ', error);\n            });\n        } else {\n            this.display();\n        }\n    }\n\n    display() {\n        this.modal = this.api.v1.ui.modal.dialog({\n            defaultButtons: false,\n            container: {\n                width: 900\n            },\n            content: {\n                header: 'Byline editor',\n                markup: this.getMarkup(this.data)\n            },\n            aside: {\n                position: 'left',\n                expandable: false,\n                header: 'Image',\n                content: this.getAsideMarkup(this.data),\n                noPadding: true,\n                width: 270\n            },\n            callbacks: {\n                didDisplay: (modal) => {\n                    if (!this.registered) {\n                        this.registerEvents(modal.getMarkup());\n                        this.registered = true;\n                    }\n                },\n                submit: (formElements) => {\n                    this.save(formElements);\n                }\n            },\n            eventHandlers: [{\n                selector: '#byline-cancel',\n                event: 'click',\n                callback: (theModal, event) => {\n                    theModal.close();\n                }\n            }],\n            keyValidation: [{\n                key: 'firstname',\n                validator: 'notEmpty'\n            }, {\n                key: 'lastname',\n                validator: 'notEmpty'\n            }, {\n                key: 'email',\n                validator: 'lab_api.v1.util.valueTransformer.isEmailOrEmpty'\n            }, {\n                key: 'public_url',\n                validator: 'lab_api.v1.util.valueTransformer.isUrlOrEmpty'\n            }],\n            footer: {\n                buttons: [\n                    {\n                        value: 'Cancel',\n                        highlight: false,\n                        id: 'byline-cancel'\n                    },\n                    {\n                        value: this.data.id ? 'Update byline' : 'Create byline',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            }\n        });\n    }\n\n    registerEvents(markup) {\n        const imgEl = markup.querySelector('.lab-aside-settings img');\n        if (imgEl) {\n            imgEl.addEventListener('click', (event) => {\n                this.editImage(imgEl);\n            }, false);\n        }\n        const changeImgBtn = markup.querySelector('#btn-change-image');\n        if (changeImgBtn) {\n            changeImgBtn.addEventListener('click', (event) => {\n                this.changeImage(markup);\n            }, false);\n        }\n        \n        const removeImgBtn = markup.querySelector('#btn-remove-image');\n        if (removeImgBtn) {\n            removeImgBtn.addEventListener('click', (event) => {\n                if (!this.data.id) {\n                    this.deleteNewlyCreatedImage();\n                } else {\n                    this.deleteCurrentImage();\n                }\n            }, false);\n        }\n        const defaultBtn = markup.querySelector('#byline-default-byline');\n        if (defaultBtn) {\n            defaultBtn.addEventListener('change', (event) => {\n                this.api.v1.user.setField('defaultByline', defaultBtn.checked ? this.data.id : '');\n            }, false);\n        }\n    }\n\n    changeImage(markup) {\n        this.api.v1.collection.display({\n            name: 'MediaImages',\n            modal: true,\n            skipCache: true,\n            options: {\n                clickHandler: (model, element) => {\n                     // Add busy animation.\n                     const emptyEl = markup.querySelector('.lab-aside-settings .bylineimage-empty');\n                     if (emptyEl) {\n                         emptyEl.classList.add('lab-busy');\n                     }\n                     const imgEl = markup.querySelector('.lab-aside-settings img');\n                     if (imgEl) {\n                         imgEl.parentElement.classList.add('lab-busy');\n                     }\n                     const serialized = this.api.v1.model.serialize.model(model);\n                     this.setImageFromModel(model, serialized);\n                }\n            }\n        });\n    }\n\n    async setImageFromModel(model, serialized) {\n        this.validateImageModel(model).then((id) => {\n            const newImage = {\n                id: null,\n                type: 'image',\n                instance_of: id,\n                apiResult: serialized.apiResult,\n                fields: serialized.fields\n            };\n\n            if (this.data.id) {\n                this.deleteCurrentImage(newImage);\n            } else {\n                this.data.children = [newImage];\n                this.updateImage();\n            }\n        });\n    }\n\n    // If the image is external it will need to be downloaded by Labrador.\n    validateImageModel(model) {\n        return new Promise((resolve, reject) => {\n            if (model.get('instance_of')) {\n                resolve(model.get('instance_of'));\n            } else {\n                this.api.v1.app.create(model).then((m) => {\n                    resolve(model.get('instance_of'));\n                }).catch((error) => {\n                    reject(new Error('Cannot create instance_of-id.'));\n                });\n            }\n        });\n    }\n\n    editImage(element) {\n        import(/* webpackIgnore: true */ '/lib-js/modules/editor/Tools/image/Editor.js')\n            .then((module) => {\n                const offset = this.api.v1.viewport.getOffset();\n                const image = this.data.children[0];\n                const crop = image.fields;\n                const editor = new module.Editor({\n                    modal: false,\n                    container: {\n                        width: 300,\n                        height: 200,\n                        element: element.parentElement,\n                        cssList: ['lab-modal-overlay']\n                    },\n                    offset: {\n                        y: window.scrollY - offset.top\n                    },\n                    imageElement: {\n                        element\n                    },\n                    crop,\n                    tools: {\n                        resize: {\n                            active: false\n                        }\n                    },\n                    imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ image.instance_of }`\n                }, {\n                    end: () => {\n                        const serializedCrop = editor.end();\n                        image.fields = { ...image.fields, ...serializedCrop };\n                        element.setAttribute('src', this.getImageurl(image));\n                        // this.saveByline();\n                    }\n                });\n\n            });\n\n    }\n\n    save(formElements) {\n        for (const key of Object.keys(formElements)) {\n            this.data.fields[key] = formElements[key].trim();\n        }\n        if (this.data.id) {\n            this.saveByline();\n        } else {\n            this.createByline();\n        }\n    }\n\n    saveByline(newId) {\n        const formData = new FormData();\n        const payload = [{ type: 'byline', id: this.data.id, fields: this.data.fields }];\n        if (this.data.children && this.data.children.length) {\n            const image = this.data.children[0];\n            payload.push({\n                parent: this.data.id,\n                type: 'image',\n                id: image.id,\n                instance_of: image.instance_of,\n                fields: image.fields\n            });\n        }\n        formData.append('json[id]', this.data.id);\n        formData.append('json[type]', 'byline');\n        formData.append('json[structure]', null);\n        formData.append('json[node]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/save-node-and-data', { body: formData, method: 'POST' }).then((resp) => {\n            if (this.endcallback) {\n                this.endcallback(newId);\n            }\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    deleteNewlyCreatedImage() {\n        this.data.children = {};\n        this.updateImage();\n    }\n\n    deleteCurrentImage(newImage) {\n        if (!this.data.id) { return; }\n\n        if (!this.data.children || !this.data.children.length || !this.data.children[0].id) {\n            if (newImage) {\n                this.setCurrentImage(newImage);\n            }\n            return;\n        }\n\n        const formData = new FormData();\n        const image = this.data.children[0];\n        const payload = [{\n            parent: this.data.id,\n            type: 'image',\n            id: image.id,\n            instance_of: image.instance_of\n        }];\n        formData.append('json[id]', this.data.id);\n        formData.append('json[type]', 'byline');\n        formData.append('json[structure]', null);\n        formData.append('json[node]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/delete-node-and-data', { body: formData, method: 'POST' }).then((resp) => {\n            this.data.children = [];\n            if (newImage) {\n                this.setCurrentImage(newImage);\n            } else {\n                this.updateImage();\n            }\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    setCurrentImage(serialized, callback) {\n        this.data.children = [{\n            id: null,\n            type: 'image',\n            instance_of: serialized.instance_of,\n            apiResult: serialized.apiResult,\n            fields: serialized.fields\n        }];\n        const formData = new FormData();\n        const image = this.data.children[0];\n        const payload = [{\n            parent: this.data.id,\n            type: 'image',\n            fields: image.fields,\n            instance_of: image.instance_of,\n            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02771'\n        }];\n        if (this.data.id) {\n            formData.append('json[id]', this.data.id);\n        }\n        formData.append('json[nodeData]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {\n            image.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].id;\n            image.instance_of = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].instance_of;\n            this.updateImage();\n            if (callback) {\n                callback();\n            }\n        }).catch((error) => {\n            console.log('Error creating image: ', error);\n        });\n    }\n\n    createByline() {\n        const formData = new FormData();\n        const payload = [{\n            type: 'byline',\n            fields: this.data.fields,\n            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02772'\n        }];\n        formData.append('json[nodeData]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {\n            this.data.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02772'].id;\n            const image = this.data.children[0];\n            if (image && !image.id) {\n                this.setCurrentImage(image, () => {\n                    this.saveByline(this.data.id);\n                });\n            } else {\n                this.saveByline(this.data.id);\n            }\n        }).catch((error) => {\n            console.log('Error creating byline: ', error);\n        });\n    }\n\n    getMarkup(data) {\n        return this.api.v1.util.dom.renderView('apps/bylineeditor/editor', {\n            id: data.id,\n            fields: data.fields || {},\n            isDefault: this.isDefault\n        }, false);\n    }\n\n    getAsideMarkup(data, toDom = false) {\n        const child = data.children && data.children.length ? data.children[0] : null;\n        return this.api.v1.util.dom.renderView('apps/bylineeditor/aside', child ? { url: this.getImageurl(child) } : {}, toDom);\n    }\n\n    updateImage() {\n        const markup = this.modal.getMarkup();\n        const aside = markup.querySelector('.lab-aside-settings');\n        const newAside = this.getAsideMarkup(this.data, true);\n        this.registerEvents(newAside);\n        aside.parentNode.replaceChild(newAside, aside);\n    }\n\n    getImageurl(data, width = 412, height = 300) {\n        if (!data) {\n            Sys.logger.debug('[BylineEditor - getImageUrl] No image data provided.');\n        }\n        let imageUrl = `${ this.api.v1.properties.get('image_server') }/${ data.instance_of }.webp?imageId=${ data.instance_of }`;\n\n        // Add crop parameters if they exist\n        const fieldParameters = ['x', 'y', 'cropw', 'croph'];\n        for (const field of fieldParameters) {\n            if (data.fields[field]) {\n                imageUrl += `&${ field }=${ data.fields[field] }`;\n            }\n        }\n\n        imageUrl += `&width=${ width }&height=${ height }`;\n        return imageUrl;\n    }\n\n}\n","export class CustomElements {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true; // Sub-views may override and set to false to disable\n        this.elementsConfig = {};\n    }\n\n    setElementsConfig(config) {\n        this.elementsConfig.aside = config.aside || {};\n        this.elementsConfig.paths = config.paths || {};\n        this.elementsConfig.formgroups = config.formgroups || [];\n    }\n\n    onAside() {\n        return this.elementsConfig.aside;\n    }\n\n    onPaths() {\n        return this.elementsConfig.paths;\n    }\n\n    onMarkup() {\n        const container = document.createElement('div');\n        container.classList.add('lab-modal-form', 'lab-grid', 'lab-hidden');\n        for (const element of this.elementsConfig.formgroups) {\n            container.appendChild(lab_api.v1.util.dom.renderEditor('elements/form/formgroup', element, true));\n        }\n        // Input-elements are defined in config. Update value from data:\n        for (const path of Object.keys(this.elementsConfig.paths)) {\n            const pathInfo = this.elementsConfig.paths[path];\n            const nodePath = pathInfo.node;\n            const el = container.querySelector(`[name=\"${ nodePath }\"]`);\n            if (nodePath && el) {\n                const value = this.rootModel.get(nodePath);\n                if (pathInfo.boolean) {\n                    if (value) {\n                        el.checked = true;\n                    }\n                } else {\n                    el.value = value;\n                }\n            }\n        }\n        return container;\n    }\n\n}\n","import { FrontContentRenderer } from '../../public/common/labrador/source/FrontContentRenderer.js';\n\nexport class FrontContentSupport {\n\n    constructor(api, { confPath } = {}, menuItem = null) {\n        if (!menuItem || !menuItem.getModel) {\n            Sys.logger.warn('[FrontContentSupport] Missing required input \"menuItem\". Cannot run.');\n            return;\n        }\n        this.api = api;\n\n        // this.renderer = new FrontContentRenderer({\n        //     api: lab_api,\n        //     settings: {\n        //         layout: {}\n        //     }\n        // });\n        const model = menuItem.getModel();\n        const sourcesConfig = model.get('filtered.sourcesConfig') || [];\n        const configPath = confPath || 'contentbox_settings.frontContent';\n        const config = lab_api.v1.config.get(configPath) || {};\n        this.run(model, sourcesConfig, configPath, config);\n    }\n\n    run(model, sourcesConfig, configPath, config) {\n\n        const tagsOptions = lab_api.v1.config.get(`${ configPath }.tagsOptions`) || { displayTagsString: true, displayTagsGroups: false };\n        const sourceOptions = lab_api.v1.config.get('labclient') || {};\n        const source = model.get('fields.source'); // identifier\n        const organizer = model.get('fields.organizer');\n        const postprocessor = model.get('fields.postprocessor');\n        const layoutOptions = {\n            columnCount: parseFloat(model.get('fields.layout_columnCount') || 3),\n            rowCount: parseFloat(model.get('fields.layout_rowCount') || 10),\n            maxRowSize: parseFloat(model.get('fields.layout_maxRowSize') || 3),\n            minRowSize: parseFloat(model.get('fields.layout_minRowSize') || 1),\n            imageAspectRatio: parseFloat(model.get('fields.layout_imageAspectRatio') || 0.45),\n            gridsize: parseFloat(model.get('fields.layout_gridsize') || 12),\n            articleCount: model.get('fields.articleCount') || 24,\n            articleFetchCount: model.get('fields.articleFetchCount') || model.get('fields.articleCount')\n        };\n        const options = {\n            sources: sourcesConfig,\n            organizers: sourceOptions.organizers || [],\n            postprocessors: sourceOptions.postprocessors || []\n        };\n        const settings = {\n            sources: options.sources.map((item) => ({ name: item.name, value: item.identifier, selected: item.identifier === source })),\n            organizers: options.organizers.map((item) => ({ name: item.name, value: item.type, selected: item.type === organizer })),\n            postprocessors: options.postprocessors.map((item) => ({ name: item.name, value: item.type, selected: item.type === postprocessor })),\n            displayOverrideUrlByTagsCookie: !!config.overrideUrlByTagsCookie\n        };\n        settings.sources.unshift({ name: 'No source selected' });\n        settings.organizers.unshift({ name: 'No organizer selected' });\n        settings.postprocessors.unshift({ name: 'No autolayout selected' });\n\n        if (tagsOptions.displayTagsGroups) {\n            tagsOptions.tagGroups = model.get('filtered.tagGroupsObject');\n            tagsOptions.tagsGroupsDefaultVisible = model.get('filtered.tagsGroupsDefaultVisible');\n            tagsOptions.hideHitsPerTag = model.get('filtered.hideHitsPerTag');\n            tagsOptions.tagGroupInRows = model.get('filtered.tagGroupInRows');\n        }\n\n        const hide = {\n            image: !!model.get('fields.hide_image'),\n            title: !!model.get('fields.hide_title'),\n            subtitle: !!model.get('fields.hide_subtitle'),\n            kicker: !!model.get('fields.hide_kicker')\n        };\n        const templateData = {\n            section: {\n                source: {\n                    options: settings.sources,\n                    hide,\n                    filterExisting: !!model.get('fields.filterExisting'),\n                    displaySites: config.displaySites\n                },\n                organizer: {\n                    options: settings.organizers\n                },\n                postprocessor: {\n                    options: settings.postprocessors\n                },\n                layout: layoutOptions\n            },\n            cookie: {\n                displayOverrideUrlByTagsCookie: config.overrideUrlByTagsCookie,\n                options: model.get('filtered.cookieOptions')\n            },\n            tags: model.get('filtered.tagOptions'), // { allow: true, tags: ['tag1', 'tag2'], tags_string: 'tag1, tag2' },\n            tagsOptions,\n            typography: {\n                size_active: !!model.get('fields.size_active'),\n                size_title: model.get('fields.size_title') || 34,\n                size_subtitle: model.get('fields.size_subtitle') || 16,\n                size_kicker: model.get('fields.size_kicker') || 16,\n                hide_title: hide.title,\n                hide_subtitle: hide.subtitle,\n                hide_kicker: hide.kicker,\n                hide_image: hide.image,\n                alignImage: model.get('fields.alignImage'),\n                alignImage_left: model.get('fields.alignImage') === 'left',\n                alignImage_none: !model.get('fields.alignImage'),\n                alignImage_right: model.get('fields.alignImage') === 'right',\n                imageWidth: model.get('fields.imageWidth') || 100\n            }\n        };\n\n        const markup = this.api.v1.util.dom.renderView('content/frontContent/template/admin', templateData);\n        const asideMarkup = this.api.v1.util.dom.renderView('content/frontContent/template/adminAside', {});\n\n        const save = (theModel, element) => {\n            theModel.set(\n                element.getAttribute('name'),\n                this.api.v1.util.dom.getFormElementValue(element) || false\n            );\n        };\n\n        const placeholders = [];\n        if (config.displaySites) {\n            let siteId = model.get('fields.siteId');\n            if (siteId) {\n                siteId = parseInt(siteId, 10);\n            }\n            const siteSelector = lab_api.v1.ui.element.getSiteSelector({\n                value: siteId || '',\n                attributes: [\n                    {\n                        name: 'id',\n                        value: 'ii5_1'\n                    }\n                ]\n            });\n            siteSelector.setAttribute('name', 'fields.siteId');\n            placeholders.push({\n                selector: '#frontContent-site',\n                element: siteSelector\n            });\n        }\n\n        const dialog = this.api.v1.ui.modal.dialog({\n            container: {\n                width: 860,\n                nostyle: false\n            },\n            content: {\n                header: `Settings - ${ model.getType() }`,\n                markup\n            },\n            aside: {\n                expandable: true,\n                closed: false,\n                position: 'left',\n                header: 'Options',\n                content: asideMarkup,\n                noPadding: true,\n                width: '215px'\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'submit',\n                        highlight: true,\n                        value: 'OK'\n                    }\n                ],\n                informalText: '(<span style=\"color:red; font-weight: bold;\">*</span>) indicates a required field'\n            },\n            eventHandlers: [{\n                selector: '#cancelBtn',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }, {\n                selector: 'input, select',\n                event: 'change',\n                callback: (modal, event) => {\n                    // Store value immediately:\n                    save(model, event.currentTarget);\n                }\n            }],\n            placeholders,\n            callbacks: {\n                end: (theModal) => {\n                    // model.redraw();\n                },\n                didDisplay: (theModal) => {\n                    const valueElements = [\n                        theModal.markup.querySelector('[name=\"fields.source\"]'),\n                        theModal.markup.querySelector('[name=\"fields.organizer\"]'),\n                        theModal.markup.querySelector('[name=\"fields.postprocessor\"]')\n                    ];\n                    const optionsElements = theModal.markup.querySelectorAll(`[data-sources]`);\n                    const updateOptionsVisibility = () => {\n                        for (const optionsElement of optionsElements) {\n                            optionsElement.classList.add('lab-hidden');\n                        }\n                        for (const element of valueElements) {\n                            const sourceName = element.getAttribute('name');\n                            for (const optionsElement of optionsElements) {\n                                const sourceValue = optionsElement.getAttribute('data-sources');\n                                const sourceTypes = sourcesConfig.filter((feed) => feed.type === sourceValue).map((feed) => feed.identifier);\n                                if (element.value && (sourceValue.includes(element.value) || (sourceTypes.includes(element.value)))) {\n                                    optionsElement.classList.remove('lab-hidden');\n                                }\n                                if (!element.value && sourceValue.includes(`no-${ sourceName }`)) {\n                                    optionsElement.classList.remove('lab-hidden');\n                                }\n                            }\n                        }\n                    };\n                    for (const element of valueElements) {\n                        element.addEventListener('change', updateOptionsVisibility, false);\n                    }\n                    updateOptionsVisibility();\n\n                    const enblList = {};\n                    const triggerChanged = (path) => {\n                        const elements = enblList[path];\n                        if (!elements) {\n                            return;\n                        }\n                        const isChecked = elements.trigger.checked;\n                        for (const target of elements.targets) {\n                            if (isChecked) {\n                                target.removeAttribute('disabled');\n                            } else {\n                                target.setAttribute('disabled', '');\n                            }\n                        }\n                    };\n\n                    // const targetChanged = (key, value) => {\n                    //     console.log('tagteChanged: ', key, value);\n                    //     // setPreviewData([{ key, value }]);\n                    // };\n\n                    const enabledTriggerElements = theModal.markup.querySelectorAll('[data-enabled-trigger]');\n                    for (const el of enabledTriggerElements) {\n                        const path = el.getAttribute('data-enabled-trigger');\n                        if (path) {\n                            const targets = theModal.markup.querySelectorAll(`[data-enabled-path=\"${ path }\"]`);\n                            enblList[path] = {\n                                trigger: el,\n                                targets: [...targets]\n                            };\n                        }\n                    }\n                    for (const [path, elements] of Object.entries(enblList)) {\n                        elements.trigger.addEventListener('change', (event) => {\n                            triggerChanged(path);\n                        }, false);\n                        triggerChanged(path);\n\n                        // for (const target of elements.targets) {\n                        //     target.addEventListener('change', (event) => {\n                        //         const styleField = target.getAttribute('data-style-field');\n                        //         targetChanged(styleField, target.value);\n                        //     }, false);\n                        // }\n                    }\n\n                    // const previewTriggers = theModal.markup.querySelectorAll('[data-preview-check]');\n                    // for (const el of previewTriggers) {\n                    //     el.addEventListener('change', (event) => {\n                    //         const styleField = event.target.getAttribute('data-preview-check');\n                    //         targetChanged(styleField, event.target.checked);\n                    //     }, false);\n                    // }\n                }\n            }\n        });\n\n        // const previewStyle = 'font-family: Helvetica !important; margin: 0 0 0.5rem !important; padding: 0 !important';\n        // const preview = {\n        //     size: {\n        //         title: templateData.typography.size_title,\n        //         subtitle: templateData.typography.size_subtitle,\n        //         kicker: templateData.typography.size_kicker,\n        //         hide_title: templateData.typography.hide_title,\n        //         hide_subtitle: templateData.typography.hide_subtitle,\n        //         hide_kicker: templateData.typography.hide_kicker,\n        //         hide_image: templateData.typography.hide_image,\n        //         alignImage: templateData.typography.alignImage,\n        //         imageAspectRatio: layoutOptions.imageAspectRatio,\n        //         imagePreviewWidth: 100,\n        //         imagePreviewHeight: 100 * layoutOptions.imageAspectRatio\n        //     },\n        //     container: dialog.markup.querySelector('#typography-preview'),\n        //     engine: new window.LabClient({\n        //         renderOptions: {\n        //             selector: '#typography-preview',\n        //             renderer: Mustache.render,\n        //             createElements: true,\n        //             documentContext: parent.document,\n        //             contentReplacement: 'append'\n        //         },\n        //         resources: {\n        //             templates: {\n        //                 row: '<div class=\"lab-grid\">{{{ children.all }}}</div>',\n        //                 article: `\n        //                     <article class=\"column {{ size.current.cssString }}\">\n        //                         <div class=\"content\" style=\"box-shadow: 0 1px 12px -4px grey; padding: 0.8rem 1rem;\">\n        //                             {{ ^get.current.fields.hide_kicker }}<p class=\"kicker {{ #view.getStyle }}text_size fields.kicker{{ /view.getStyle }}\" style=\"${ previewStyle }\">{{{ get.current.fields.kicker }}}</p>{{ /get.current.fields.hide_kicker }}\n        //                             {{ ^get.current.fields.hide_image }}<span style=\"float: right; background-color: #9d9d9d; width:{{ get.current.fields.imagePreviewWidth }}px; height:{{ get.current.fields.imagePreviewHeight }}px; color: #fff;font-size: 2em;text-align: center;padding-top: 0.5em;\"></span>{{ /get.current.fields.hide_image }}\n        //                             {{ ^get.current.fields.hide_title }}<h2 class=\"headline {{ #view.getStyle }}text_size fields.title{{ /view.getStyle }}\" style=\"${ previewStyle }\">{{{ get.current.fields.title }}}</h2>{{ /get.current.fields.hide_title }}\n        //                             {{ ^get.current.fields.hide_subtitle }}<p class=\"subtitle {{ #view.getStyle }}text_size fields.subtitle{{ /view.getStyle }}\" style=\"${ previewStyle }\">{{{ get.current.fields.subtitle }}}</p>{{ /get.current.fields.hide_subtitle }}\n        //                         </div>\n        //                     </article>`\n        //             }\n        //         },\n        //         config: {\n        //             debug: true,\n        //             grid: {\n        //                 size: 12,\n        //                 prefix: {\n        //                     desktop: 'lab-grid-large-',\n        //                     mobile: 'lab-grid-small-'\n        //                 }\n        //             },\n        //             style: {\n        //                 definitions: [\n        //                     {\n        //                         name: 'text_size',\n        //                         requirePath: true,\n        //                         sources: [\n        //                             {\n        //                                 paths: [\n        //                                     {\n        //                                         path: '_style_size',\n        //                                         prefix: 't'\n        //                                     }\n        //                                 ],\n        //                                 template: '{{ #items }}{{ prefix }}{{ value }} {{ /items }}'\n        //                             }\n        //                         ]\n        //                     }\n        //                 ]\n        //             }\n        //         }\n        //     })\n        // };\n\n        // const setPreviewData = (items) => {\n        //     let hasChange = false;\n        //     for (const item of items) {\n        //         if (preview.size[item.key] !== item.value) {\n        //             preview.size[item.key] = item.value;\n        //             if (item.key === 'imageAspectRatio') {\n        //                 preview.size.imagePreviewHeight = 100 * item.value;\n        //             }\n        //             hasChange = true;\n        //         }\n        //     }\n        //     if (hasChange) {\n        //         runPreview();\n        //     }\n        // };\n\n        // const runPreview = () => {\n        //     const columns = 1;\n        //     const width = 100 / columns;\n        //     const article = {\n        //         type: 'article',\n        //         contentdata: {\n        //             fields: {\n        //                 title: 'Title preview ...',\n        //                 subtitle: 'Subtitle preview ...',\n        //                 kicker: 'Kicker preview ...',\n        //                 title_style_size: preview.size.title,\n        //                 subtitle_style_size: preview.size.subtitle,\n        //                 kicker_style_size: preview.size.kicker,\n        //                 hide_subtitle: preview.size.hide_subtitle,\n        //                 hide_kicker: preview.size.hide_kicker,\n        //                 hide_title: preview.size.hide_title,\n        //                 hide_image: preview.size.hide_image,\n        //                 alignImage: preview.size.alignImage,\n        //                 imageWidth: preview.size.imageWidth,\n        //                 imageAspectRatio: preview.size.imageAspectRatio,\n        //                 imagePreviewWidth: preview.size.imagePreviewWidth,\n        //                 imagePreviewHeight: preview.size.imagePreviewHeight\n        //             }\n        //         },\n        //         width\n        //     };\n        //     const data = [{\n        //         type: 'row',\n        //         children: new Array(columns).fill(article)\n        //     }];\n        //     preview.container.innerHTML = '';\n        //     preview.engine.setData(data);\n        //     preview.engine.draw();\n        // };\n\n        // runPreview();\n    }\n\n}\n","import ColorThief from '../../lib/editor/color-thief.mjs';\nimport { ColorUtils } from '../lib/editor/ColorUtils.js';\n\nexport class ImageColors {\n\n    constructor(api, options = {\n        image: null,\n        targetModel: null,\n        path: null,\n        pathDark: null,\n        resetPath: null,\n        callback: null\n    }) {\n        this.api = api;\n        if (options.image && options.targetModel && options.path) {\n            this.image = options.image;\n            this.targetModel = options.targetModel;\n            this.path = options.path;\n            this.pathDark = options.pathDark;\n            this.resetPath = options.resetPath;\n            this.callback = options.callback;\n            this.getColors();\n        } else {\n            Sys.logger.warn('ImageColors: Missing one or more required options (image, targetModel, path).');\n        }\n    }\n\n    // Get colors via ColorThief:\n    getColors() {\n        const colorThief = new ColorThief();\n        const img = new Image();\n        img.crossOrigin = 'Anonymous';\n        img.style = 'width: 100%; object-fit: contain; display: block;';\n        this.api.v1.ui.modal.dialog({\n            content: {\n                markup: `<div class=\"imageColors\">\n                    <div class=\"imageColorsImage\"></div>\n                    <h5 class=\"lab-title\">Click on a palette to set custom background color</h5>\n                    <div class=\"imageColorsPalettes\" style=\"display: flex; flex-wrap: nowrap; justify-content: space-between; height: 80px; background-color: #e6e6e6; padding: 15px; border-radius: 10px;\"><div style=\"flex: 1; text-align: center; padding-top: 10px;\">Loading palettes ...</div></div>\n                </div>`\n            },\n            footer: {\n                buttons: [{\n                    value: 'Use color picker',\n                    id: 'select_color_button',\n                    highlight: false\n                }, {\n                    value: 'Remove custom color',\n                    id: 'remove_color_button',\n                    highlight: false\n                }]\n            },\n            eventHandlers: [{\n                selector: '#select_color_button',\n                event: 'click',\n                callback: (modal, event) => {\n                    const eyeDropper = new window.EyeDropper();\n                    eyeDropper.open().then((result) => {\n                        this.setColor(ColorUtils.hex2rgb(result.sRGBHex));\n                    }).catch(() => {\n                        // User cancelled by clicking Escape-key etc.\n                    });\n                }\n            }, {\n                selector: '#remove_color_button',\n                event: 'click',\n                callback: (modal, event) => {\n                    this.resetColor();\n                    modal.close();\n                }\n            }],\n            callbacks: {\n                didDisplay: (modal) => {\n                    const container = modal.markup.querySelector('.imageColorsImage');\n                    container.classList.add('lab-busy');\n                    img.addEventListener('load', () => {\n                        const mainColor = colorThief.getColor(img);\n                        const palette = colorThief.getPalette(img, 8);\n                        const palettesContainer = modal.markup.querySelector('.imageColorsPalettes');\n                        palettesContainer.innerHTML = '';\n                        for (const color of [mainColor, ...palette]) {\n                            const div = document.createElement('div');\n                            div.style.backgroundColor = `rgb(${ color[0] }, ${ color[1] }, ${ color[2] })`;\n                            div.style.width = '50px';\n                            div.style.cursor = 'pointer';\n                            div.style.borderRadius = '6px';\n                            div.style.border = '1px solid #000';\n                            div.setAttribute('title', `rgb(${ color[0] }, ${ color[1] }, ${ color[2] })`);\n                            palettesContainer.appendChild(div);\n                            div.addEventListener('click', () => {\n                                this.setColor(color);\n                                modal.close();\n                            });\n                        }\n                        container.classList.remove('lab-busy');\n                    });\n                    img.src = this.image.currentSrc || this.image.src;\n                    const args = this.api.v1.util.request.parseQueryString(img.src);\n                    if (args.width && args.height) {\n                        const ratio = args.height / args.width;\n                        container.style.minHeight = `${ container.clientWidth * ratio }px`;\n                    }\n                    container.appendChild(img);\n                },\n                submit: (formValues, theModal) => {\n                    console.log('Submit:', formValues);\n                }\n            }\n        });\n    }\n\n    setColor(rgbArray) {\n        if (this.pathDark) {\n            this.targetModel.set(this.pathDark, ColorUtils.getBrightness(rgbArray) < 130 ? '1' : '');\n        }\n        this.targetModel.set(this.path, `rgb(${ rgbArray[0] }, ${ rgbArray[1] }, ${ rgbArray[2] })`);\n        this.colorsUpdated();\n    }\n\n    resetColor() {\n        if (this.pathDark) {\n            this.targetModel.set(this.pathDark, '');\n        }\n        this.targetModel.set(this.path, '');\n        this.colorsUpdated();\n    }\n\n    colorsUpdated() {\n        if (this.resetPath) {\n            const current = this.targetModel.get(this.resetPath);\n            this.targetModel.set(this.resetPath, '');\n            if (current) {\n                for (const view of this.api.v1.view.getViews(this.targetModel)) {\n                    view.getMarkup().classList.remove(current);\n                }\n            }\n        }\n        const value = this.targetModel.get(this.path);\n        const isDark = this.pathDark ? !!this.targetModel.get(this.pathDark) : false;\n        for (const view of this.api.v1.view.getViews(this.targetModel)) {\n            const body = view.getMarkup();\n            if (value) {\n                body.style.backgroundColor = value;\n                body.classList.add('custom-background-color', 'bg-baseview-custom');\n                body.querySelector('main > article').classList.add('bg-baseview-custom');\n            } else {\n                body.style.backgroundColor = '';\n                body.classList.remove('custom-background-color', 'bg-baseview-custom');\n                body.querySelector('main > article').classList.remove('bg-baseview-custom');\n            }\n            if (isDark && value) {\n                body.style.color = '#fff';\n            } else {\n                body.style.color = '';\n            }\n        }\n        if (this.callback) {\n            this.callback({\n                color: value,\n                isDark\n            });\n        }\n    }\n\n}\n","export class ParallaxSupport {\n\n    constructor(api, menuItem) {\n        this.api = api;\n        this.model = menuItem.getModel();\n        this.view = menuItem.getView();\n        this.data = {\n            ...{\n                brightness: {},\n                sepia: {},\n                blur: {},\n                opacity: {},\n                rotate: {},\n                scale: {},\n                horizontalAlign: {}\n            },\n            ...this.view.get('metadata.parallax') || {}\n        };\n        this.run();\n    }\n\n    run() {\n        const preferAsideOpen = true;\n        const templateData = this.getTemplateData();\n        const eventHandlers = [];\n        const updateLabel = (element, theModal) => {\n            const id = element.getAttribute('id');\n            const labelEl = theModal.markup.querySelector(`label[for=\"${ id }\"]`);\n            if (labelEl) {\n                labelEl.setAttribute('data-lab-label-value', element.value);\n            }\n        };\n        for (const item of templateData.ranges) {\n            for (const key of Object.keys(item.ranges)) {\n                eventHandlers.push({\n                    selector: `[name=\"${ item.name }.${ key }\"]`, // parallax.opacity.startValue\n                    event: 'input',\n                    callback: (theModal, event) => {\n                        updateLabel(event.currentTarget, theModal);\n                        const el = theModal.markup.querySelector(`[name=\"${ item.name }.active\"]`);\n                        if (el) {\n                            const needSave = !el.checked;\n                            if (needSave) {\n                                el.checked = true;\n                                this.save(el);\n                            }\n                        }\n                    }\n                });\n            }\n            eventHandlers.push({\n                selector: `[name=\"${ item.name }.startScrollPosition\"]`,\n                event: 'change',\n                callback: (theModal, event) => {\n                    const minElement = event.currentTarget;\n                    const maxElement = theModal.markup.querySelector(`[name=\"${ item.name }.endScrollPosition\"]`);\n                    if (parseInt(minElement.value, 10) > parseInt(maxElement.value, 10)) {\n                        minElement.value = maxElement.value;\n                        updateLabel(event.currentTarget, theModal);\n                    }\n                }\n            });\n            eventHandlers.push({\n                selector: `[name=\"${ item.name }.endScrollPosition\"]`,\n                event: 'change',\n                callback: (theModal, event) => {\n                    const minElement = theModal.markup.querySelector(`[name=\"${ item.name }.startScrollPosition\"]`);\n                    const maxElement = event.currentTarget;\n                    if (parseInt(maxElement.value, 10) < parseInt(minElement.value, 10)) {\n                        maxElement.value = minElement.value;\n                        updateLabel(event.currentTarget, theModal);\n                    }\n                }\n            });\n\n        }\n\n        const markup = lab_api.v1.util.dom.renderView('content/parallax/template/parallaxSupport', templateData);\n        const asideData = {\n            content: [{\n                title: 'General',\n                items: [{\n                    key: 'geometry',\n                    label: 'Geometry',\n                    css: 'lab-selected'\n                }]\n            }, {\n                title: 'Transitions',\n                items: [{\n                    key: 'parallax.scale',\n                    label: 'Scale'\n                }, {\n                    key: 'parallax.rotate',\n                    label: 'Rotate'\n                }, {\n                    key: 'parallax.opacity',\n                    label: 'Opacity'\n                }\n                ]\n            }, {\n                title: 'Filters',\n                items: [{\n                    key: 'parallax.blur',\n                    label: 'Blur'\n                }, {\n                    key: 'parallax.sepia',\n                    label: 'Sepia'\n                }, {\n                    key: 'parallax.brightness',\n                    label: 'Brightness'\n                }]\n            }]\n        };\n\n        const asideMarkup = lab_api.v1.util.dom.renderView('content/parallax/template/parallaxSupportAside', asideData);\n\n        lab_api.v1.ui.modal.dialog({\n            container: {\n                width: 860,\n                nostyle: false\n            },\n            content: {\n                header: 'Parallax settings',\n                markup\n            },\n            aside: {\n                expandable: true,\n                closed: !preferAsideOpen,\n                position: 'left',\n                header: 'Options',\n                content: asideMarkup,\n                noPadding: true,\n                width: '215px'\n            },\n            eventHandlers: eventHandlers.concat([{\n                selector: 'input, select',\n                event: 'change',\n                callback: (modal, event) => {\n                    // Store value immediately:\n                    this.save(event.currentTarget);\n                }\n            }])\n        });\n\n    }\n\n    save(element) {\n        const path = element.getAttribute('name');\n        const value = lab_api.v1.util.dom.getFormElementValue(element);\n        if (path.startsWith('width.')) {\n            this.model.setWidth(parseInt(value, 10), { viewport: path.split('.')[1], save: true });\n            return;\n        }\n        if (this.model.getType() === 'image' && path === 'fullwidth') {\n            this.view.set('fields.width', value ? 1800 : null);\n        }\n        lab_api.v1.util.object.set(path, value, this.data);\n        this.view.set(\n            'metadata.parallax',\n            { ...this.data }\n        );\n    }\n\n    getTemplateData() {\n        return {\n            booleans: [{\n                title: 'Geometry',\n                name: 'geometry',\n                hidden: false,\n                items: [{\n                    name: 'sticky',\n                    isCheckbox: true,\n                    title: 'Sticky',\n                    active: !!this.data.sticky,\n                    grid: 'lab-grid-large-2'\n                }, {\n                    name: 'fullwidth',\n                    isCheckbox: true,\n                    title: 'Full width',\n                    active: !!this.data.fullwidth,\n                    grid: 'lab-grid-large-10'\n                }, {\n                    name: 'height',\n                    isSelect: true,\n                    title: 'Height',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: '50% of viewport',\n                        value: '50',\n                        selected: this.data.height === '50'\n                    }, {\n                        title: '100% of viewport (default)',\n                        value: '',\n                        selected: !this.data.height\n                    }, {\n                        title: '150% of viewport',\n                        value: '150',\n                        selected: this.data.height === '150'\n                    }, {\n                        title: '200% of viewport',\n                        value: '200',\n                        selected: this.data.height === '200'\n                    }, {\n                        title: 'Auto (height of content)',\n                        value: 'auto',\n                        selected: this.data.height === 'auto'\n                    }]\n                }, {\n                    name: 'spaceBelow',\n                    isSelect: true,\n                    title: 'Space below',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: 'None (default)',\n                        value: '',\n                        selected: !this.data.spaceBelow\n                    }, {\n                        title: '50% of viewport',\n                        value: '50',\n                        selected: this.data.spaceBelow === '50'\n                    }, {\n                        title: '100% of viewport',\n                        value: '100',\n                        selected: this.data.spaceBelow === '100'\n                    }]\n                }, {\n                    name: 'width.desktop',\n                    isSelect: true,\n                    title: 'Width - Desktop',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: '100% (default)',\n                        value: '100',\n                        selected: this.model.get('width', 'desktop') === 100\n                    }, {\n                        title: '50%',\n                        value: '50',\n                        selected: this.model.get('width', 'desktop') === 50\n                    }, {\n                        title: '33.33%',\n                        value: '33.33',\n                        selected: this.model.get('width', 'desktop') === 33.33\n                    }]\n                }, {\n                    name: 'width.mobile',\n                    isSelect: true,\n                    title: 'Width - Mobile',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: '100% (default)',\n                        value: '100',\n                        selected: this.model.get('width', 'mobile') === 100\n                    }, {\n                        title: '50%',\n                        value: '50',\n                        selected: this.model.get('width', 'mobile') === 50\n                    }]\n                }, {\n                    name: 'horizontalAlign.desktop',\n                    isSelect: true,\n                    title: 'Horizontal positioning - Desktop',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: 'Left (default)',\n                        value: '',\n                        selected: !this.data.horizontalAlign.desktop\n                    }, {\n                        title: 'Centered',\n                        value: 'center',\n                        selected: this.data.horizontalAlign.desktop === 'center'\n                    }, {\n                        title: 'Right',\n                        value: 'right',\n                        selected: this.data.horizontalAlign.desktop === 'right'\n                    }]\n                }, {\n                    name: 'horizontalAlign.mobile',\n                    isSelect: true,\n                    title: 'Horizontal positioning - Mobile',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: 'Left (default)',\n                        value: '',\n                        selected: !this.data.horizontalAlign.mobile\n                    }, {\n                        title: 'Centered',\n                        value: 'center',\n                        selected: this.data.horizontalAlign.mobile === 'center'\n                    }, {\n                        title: 'Right',\n                        value: 'right',\n                        selected: this.data.horizontalAlign.mobile === 'right'\n                    }]\n                }, {\n                    name: 'verticalPosition',\n                    isSelect: true,\n                    title: 'Vertical positioning',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: 'Auto (default)',\n                        value: 'auto',\n                        selected: this.data.verticalPosition === 'auto' || !this.data.verticalPosition\n                    }, {\n                        title: 'Move up 50%',\n                        value: 'up50',\n                        selected: this.data.verticalPosition === 'up50'\n                    }, {\n                        title: 'Move up 100%',\n                        value: 'up100',\n                        selected: this.data.verticalPosition === 'up100'\n                    }, {\n                        title: 'Move down 50%',\n                        value: 'down50',\n                        selected: this.data.verticalPosition === 'down50'\n                    }, {\n                        title: 'Move down 100%',\n                        value: 'down100',\n                        selected: this.data.verticalPosition === 'down100'\n                    }]\n                }, {\n                    name: 'verticalAlign',\n                    isSelect: true,\n                    title: 'Vertical alignment',\n                    isBlock: true,\n                    grid: 'lab-grid-large-6',\n                    options: [{\n                        title: 'Top (default)',\n                        value: 'top',\n                        selected: this.data.verticalAlign === 'top' || !this.data.verticalAlign\n                    }, {\n                        title: 'Centered',\n                        value: 'center',\n                        selected: this.data.verticalAlign === 'center'\n                    }, {\n                        title: 'Bottom',\n                        value: 'bottom',\n                        selected: this.data.verticalAlign === 'bottom'\n                    }]\n                }]\n            }],\n            ranges: [\n                {\n                    name: 'scale',\n                    attributeName: 'parallax.scale',\n                    title: 'Scale content',\n                    hidden: true,\n                    min: 0,\n                    max: 100,\n                    active: !!this.data.scale.active,\n                    startValue: this.data.scale.startValue || 0,\n                    endValue: this.data.scale.endValue || 100,\n                    startScrollPosition: this.data.scale.startScrollPosition || 0,\n                    endScrollPosition: this.data.scale.endScrollPosition || 100,\n                    labels: {\n                        active: 'Active',\n                        startValue: 'Start size',\n                        endValue: 'End size',\n                        startScrollPosition: 'Start scroll position',\n                        endScrollPosition: 'End scroll position'\n                    },\n                    ranges: {\n                        startValue: [0, 200],\n                        endValue: [0, 200],\n                        startScrollPosition: [0, 100],\n                        endScrollPosition: [0, 100]\n                    }\n                },\n                {\n                    name: 'rotate',\n                    attributeName: 'parallax.rotate',\n                    title: 'rotate content',\n                    hidden: true,\n                    min: 0,\n                    max: 100,\n                    active: !!this.data.rotate.active,\n                    startValue: this.data.rotate.startValue || 0,\n                    endValue: this.data.rotate.endValue || 360,\n                    startScrollPosition: this.data.rotate.startScrollPosition || 0,\n                    endScrollPosition: this.data.rotate.endScrollPosition || 100,\n                    labels: {\n                        active: 'Active',\n                        startValue: 'Start angle',\n                        endValue: 'End angle',\n                        startScrollPosition: 'Start scroll position',\n                        endScrollPosition: 'End scroll position'\n                    },\n                    ranges: {\n                        startValue: [0, 360],\n                        endValue: [0, 360],\n                        startScrollPosition: [0, 100],\n                        endScrollPosition: [0, 100]\n                    }\n                },\n                {\n                    name: 'opacity',\n                    attributeName: 'parallax.opacity',\n                    title: 'Opacity',\n                    hidden: true,\n                    min: 0,\n                    max: 100,\n                    active: !!this.data.opacity.active,\n                    startValue: this.data.opacity.startValue || 0,\n                    endValue: this.data.opacity.endValue || 100,\n                    startScrollPosition: this.data.opacity.startScrollPosition || 0,\n                    endScrollPosition: this.data.opacity.endScrollPosition || 100,\n                    labels: {\n                        active: 'Active',\n                        startValue: 'Start opacity',\n                        endValue: 'End opacity',\n                        startScrollPosition: 'Start scroll position',\n                        endScrollPosition: 'End scroll position'\n                    },\n                    ranges: {\n                        startValue: [0, 100],\n                        endValue: [0, 100],\n                        startScrollPosition: [0, 100],\n                        endScrollPosition: [0, 100]\n                    }\n                },\n                {\n                    name: 'blur',\n                    attributeName: 'parallax.blur',\n                    title: 'Blur',\n                    hidden: true,\n                    min: 0,\n                    max: 100,\n                    active: !!this.data.blur.active,\n                    startValue: this.data.blur.startValue || 0,\n                    endValue: this.data.blur.endValue || 100,\n                    startScrollPosition: this.data.blur.startScrollPosition || 0,\n                    endScrollPosition: this.data.blur.endScrollPosition || 100,\n                    labels: {\n                        active: 'Active',\n                        startValue: 'Start blur',\n                        endValue: 'End blur',\n                        startScrollPosition: 'Start scroll position',\n                        endScrollPosition: 'End scroll position'\n                    },\n                    ranges: {\n                        startValue: [0, 100],\n                        endValue: [0, 100],\n                        startScrollPosition: [0, 100],\n                        endScrollPosition: [0, 100]\n                    }\n                },\n                {\n                    name: 'sepia',\n                    attributeName: 'parallax.sepia',\n                    title: 'Sepia',\n                    hidden: true,\n                    min: 0,\n                    max: 100,\n                    active: !!this.data.sepia.active,\n                    startValue: this.data.sepia.startValue || 0,\n                    endValue: this.data.sepia.endValue || 100,\n                    startScrollPosition: this.data.sepia.startScrollPosition || 0,\n                    endScrollPosition: this.data.sepia.endScrollPosition || 100,\n                    labels: {\n                        active: 'Active',\n                        startValue: 'Start sepia',\n                        endValue: 'End sepia',\n                        startScrollPosition: 'Start scroll position',\n                        endScrollPosition: 'End scroll position'\n                    },\n                    ranges: {\n                        startValue: [0, 100],\n                        endValue: [0, 100],\n                        startScrollPosition: [0, 100],\n                        endScrollPosition: [0, 100]\n                    }\n                },\n                {\n                    name: 'brightness',\n                    attributeName: 'parallax.brightness',\n                    title: 'Brightness',\n                    hidden: true,\n                    min: 0,\n                    max: 100,\n                    active: !!this.data.brightness.active,\n                    startValue: this.data.brightness.startValue || 100,\n                    endValue: this.data.brightness.endValue || 0,\n                    startScrollPosition: this.data.brightness.startScrollPosition || 0,\n                    endScrollPosition: this.data.brightness.endScrollPosition || 100,\n                    labels: {\n                        active: 'Active',\n                        startValue: 'Start brightness',\n                        endValue: 'End brightness',\n                        startScrollPosition: 'Start scroll position',\n                        endScrollPosition: 'End scroll position'\n                    },\n                    ranges: {\n                        startValue: [0, 100],\n                        endValue: [0, 100],\n                        startScrollPosition: [0, 100],\n                        endScrollPosition: [0, 100]\n                    }\n                }\n            ]\n        };\n    }\n\n}\n","// Edit a teaser:\n// api.v1.apps.start('TeaserEditor', { id: 123456, endcallback: (id) => {...} })\n// Create a teaser:\n// api.v1.apps.start('TeaserEditor', { endcallback: (id) => {...} })\n\nexport class TeaserEditor {\n\n    constructor(api, { id = null, endcallback = null } = {}) {\n        this.api = api;\n        this.data = {\n            id: null,\n            fields: {},\n            children: []\n        };\n        this.endcallback = endcallback || null;\n        this.registered = false;\n        this.saveInProgress = false;\n        this.modal = null;\n        if (id && typeof id === 'number') {\n            fetch(`/ajax/node/get-node?id=${ id }`).then((resp) => resp.json()).then((resp) => {\n                this.data = resp.data;\n                if (!this.data.children) {\n                    this.data.children = [];\n                }\n                this.display();\n            }).catch((error) => {\n                console.log('error fetching teasers: ', error);\n            });\n        } else {\n            this.display();\n        }\n    }\n\n    display() {\n        this.modal = this.api.v1.ui.modal.dialog({\n            defaultButtons: false,\n            container: {\n                width: 900\n            },\n            content: {\n                header: 'Teaser editor',\n                markup: this.getMarkup(this.data)\n            },\n            aside: {\n                position: 'left',\n                expandable: false,\n                header: 'Image',\n                content: this.getAsideMarkup(this.data),\n                noPadding: true,\n                width: 270\n            },\n            callbacks: {\n                didDisplay: (modal) => {\n                    if (!this.registered) {\n                        this.registerEvents(modal.getMarkup());\n                        this.registered = true;\n                    }\n                },\n                submit: (formElements) => {\n                    this.save(formElements);\n                },\n                end: () => {\n                    if (this.endcallback && !this.saveInProgress) {\n                        this.endcallback(this.data.id);\n                    }\n                }\n            },\n            eventHandlers: [{\n                selector: '#cancel-btn',\n                event: 'click',\n                callback: (theModal, event) => {\n                    theModal.close();\n                }\n            }],\n            keyValidation: [{\n                key: 'title',\n                validator: 'notEmpty'\n            }, {\n                key: 'subtitle',\n                validator: 'notEmpty'\n            }, {\n                key: 'published_url',\n                validator: 'lab_api.v1.util.valueTransformer.isUrl'\n            }],\n            footer: {\n                buttons: [\n                    {\n                        value: 'Cancel',\n                        highlight: false,\n                        id: 'cancel-btn'\n                    },\n                    {\n                        value: this.data.id ? 'Update teaser' : 'Create teaser',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            }\n        });\n    }\n\n    registerEvents(markup) {\n        const imgEl = markup.querySelector('.lab-aside-settings img');\n        if (imgEl) {\n            imgEl.addEventListener('click', (event) => {\n                this.editImage(imgEl);\n            }, false);\n        }\n        const changeImgBtn = markup.querySelector('#btn-change-image');\n        if (changeImgBtn) {\n            changeImgBtn.addEventListener('click', (event) => {\n                this.changeImage(markup);\n            }, false);\n        }\n        const removeImgBtn = markup.querySelector('#btn-remove-image');\n        if (removeImgBtn) {\n            removeImgBtn.addEventListener('click', (event) => {\n                this.deleteCurrentImage();\n            }, false);\n        }\n    }\n\n    changeImage(markup) {\n        const imgEl = markup.querySelector('.lab-aside-settings img');\n        if (imgEl) {\n            imgEl.parentElement.classList.add('lab-busy');\n        }\n        this.api.v1.collection.display({\n            name: 'MediaImages',\n            modal: true,\n            skipCache: true,\n            options: {\n                clickHandler: (model, element) => {\n                    const serialized = this.api.v1.model.serialize.model(model);\n                    if (this.data.id) {\n                        this.deleteCurrentImage(serialized);\n                    } else {\n                        this.data.children = [{\n                            id: null,\n                            type: 'image',\n                            instance_of: serialized.instance_of,\n                            apiResult: serialized.apiResult,\n                            fields: serialized.fields\n                        }];\n                        this.updateImage();\n                    }\n                }\n            }\n        });\n    }\n\n    editImage(element) {\n        import(/* webpackIgnore: true */ '/lib-js/modules/editor/Tools/image/Editor.js')\n            .then((module) => {\n                const offset = this.api.v1.viewport.getOffset();\n                const image = this.data.children[0];\n                const crop = image.fields;\n                const editor = new module.Editor({\n                    modal: false,\n                    container: {\n                        width: 300,\n                        height: 200,\n                        element: element.parentElement,\n                        cssList: ['lab-modal-overlay']\n                    },\n                    offset: {\n                        y: window.scrollY - offset.top\n                    },\n                    imageElement: {\n                        element\n                    },\n                    crop,\n                    tools: {\n                        resize: {\n                            active: false\n                        }\n                    },\n                    imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ image.instance_of }`\n                }, {\n                    end: () => {\n                        const serializedCrop = editor.end();\n                        image.fields = { ...image.fields, ...serializedCrop };\n                        element.setAttribute('src', this.getImageurl(image));\n                    }\n                });\n            });\n    }\n\n    save(formElements) {\n        for (const key of Object.keys(formElements)) {\n            this.data.fields[key] = formElements[key].trim();\n        }\n        if (this.data.id) {\n            this.saveTeaser();\n        } else {\n            this.createTeaser();\n        }\n    }\n\n    saveTeaser(newId) {\n        this.saveInProgress = true;\n        const formData = new FormData();\n        const payload = [{ type: 'teaser', id: this.data.id, fields: this.data.fields }];\n        if (this.data.children && this.data.children.length) {\n            const image = this.data.children[0];\n            payload.push({\n                parent: this.data.id,\n                type: 'image',\n                id: image.id,\n                instance_of: image.instance_of,\n                fields: image.fields\n            });\n        }\n        formData.append('json[id]', this.data.id);\n        formData.append('json[type]', 'teaser');\n        formData.append('json[structure]', null);\n        formData.append('json[node]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/save-node-and-data', { body: formData, method: 'POST' }).then((resp) => {\n            this.saveInProgress = false;\n            if (this.endcallback) {\n                this.endcallback(newId);\n            }\n        }).catch((error) => {\n            this.saveInProgress = false;\n            console.log('error: ', error);\n        });\n    }\n\n    deleteCurrentImage(newImage) {\n        if (!this.data.id) { return; }\n        if (!this.data.children || !this.data.children.length || !this.data.children[0].id) {\n            if (newImage) {\n                this.setCurrentImage(newImage);\n            }\n            return;\n        }\n        const formData = new FormData();\n        const image = this.data.children[0];\n        const payload = [{\n            parent: this.data.id,\n            type: 'image',\n            id: image.id,\n            instance_of: image.instance_of\n        }];\n        formData.append('json[id]', this.data.id);\n        formData.append('json[type]', 'teaser');\n        formData.append('json[structure]', null);\n        formData.append('json[node]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/delete-node-and-data', { body: formData, method: 'POST' }).then((resp) => {\n            this.data.children = [];\n            if (newImage) {\n                this.setCurrentImage(newImage);\n            } else {\n                this.updateImage();\n            }\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    setCurrentImage(serialized, callback) {\n        this.data.children = [{\n            id: null,\n            type: 'image',\n            instance_of: serialized.instance_of,\n            apiResult: serialized.apiResult,\n            fields: serialized.fields\n        }];\n        const formData = new FormData();\n        const image = this.data.children[0];\n        const payload = [{\n            parent: this.data.id,\n            type: 'image',\n            fields: image.fields,\n            instance_of: image.instance_of,\n            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02771'\n        }];\n        if (this.data.id) {\n            formData.append('json[id]', this.data.id);\n        }\n        formData.append('json[nodeData]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {\n            image.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].id;\n            image.instance_of = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].instance_of;\n            this.updateImage();\n            if (callback) {\n                callback();\n            }\n        }).catch((error) => {\n            console.log('Error creating image: ', error);\n        });\n    }\n\n    createTeaser() {\n        const formData = new FormData();\n        const payload = [{\n            type: 'teaser',\n            fields: this.data.fields,\n            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02773'\n        }];\n        formData.append('json[nodeData]', JSON.stringify(payload));\n        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {\n            this.data.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02773'].id;\n            const image = this.data.children[0];\n            if (image && !image.id) {\n                this.setCurrentImage(image, () => {\n                    this.saveTeaser(this.data.id);\n                });\n            } else {\n                this.saveTeaser(this.data.id);\n            }\n        }).catch((error) => {\n            console.log('Error creating teaser: ', error);\n        });\n    }\n\n    getMarkup(data) {\n        return this.api.v1.util.dom.renderView('apps/teasereditor/editor', {\n            id: data.id,\n            fields: data.fields || {}\n        }, false);\n    }\n\n    getAsideMarkup(data, toDom = false) {\n        const child = data.children && data.children.length ? data.children[0] : null;\n        return this.api.v1.util.dom.renderView('apps/teasereditor/aside', child ? { url: this.getImageurl(child) } : {}, toDom);\n    }\n\n    updateImage() {\n        const markup = this.modal.getMarkup();\n        const aside = markup.querySelector('.lab-aside-settings');\n        const newAside = this.getAsideMarkup(this.data, true);\n        this.registerEvents(newAside);\n        aside.parentNode.replaceChild(newAside, aside);\n    }\n\n    getImageurl(data) {\n        return `${ this.api.v1.properties.get('image_server') }/${ data.instance_of }.webp?imageId=${ data.instance_of }&x=${ data.fields.x }&y=${ data.fields.y }&cropw=${ data.fields.cropw }&croph=${ data.fields.croph }&width=412&height=300`;\n    }\n\n}\n","export class AptomaExport {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = this.api.v1.user.hasPermission('export_aptoma') && this.api.v1.config.get('aptoma.enabled');\n        this.customTopicSectionString = this.api.v1.config.get('aptoma.customTopicSectionString') || false;\n        this.printArticleTypes = this.api.v1.config.get('aptoma.printArticleTypes') || [];\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-medium lab-space-above-none\">Export article to Aptoma</h2>\n            </div>\n            <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"lab_printArticleTypeId\">Select article type</label>\n                    <select name=\"fields.lab_printArticleTypeId\" id=\"lab_printArticleTypeId\">\n                        <option value=\"\">Select article type</option>\n                        {{ #printArticleTypes }}\n                            <option value=\"{{ value }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /printArticleTypes }}\n                    </select>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"lab_printEditionDateFormatted\">Select print edition</label>\n                    <input type=\"date\" id=\"lab_printEditionDateFormatted\" name=\"fields.lab_printEditionDateFormatted\" value=\"{{ fields.lab_printEditionDateFormatted }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"lab_printPage\">Select print page</label>\n                    <input type=\"number\" id=\"lab_printPage\" name=\"fields.lab_printPage\" value=\"{{ fields.lab_printPage }}\">\n                </div>\n                {{ #customTopicSectionString }}\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                        <label for=\"lab_printArticleTopicString\">Topic</label>\n                        <input type=\"text\" id=\"lab_printArticleTopicString\" name=\"fields.lab_printArticleTopicString\" value=\"{{ fields.lab_printArticleTopicString }}\">\n                    </div>\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                        <label for=\"lab_printArticleSectionString\">Aptoma section (leave empty to use Labrador section)</label>\n                        <input type=\"text\" id=\"lab_printArticleSectionString\" name=\"fields.lab_printArticleSectionString\" value=\"{{ fields.lab_printArticleSectionString }}\">\n                    </div>\n                {{ /customTopicSectionString }}\n            </div>\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Export',\n            label: 'Aptoma'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.lab_printEditionDateFormatted': {\n                node: 'fields.lab_printEditionDateFormatted',\n                callback: (element) => {\n                    this.rootModel.set('fields.lab_printEditionDate', element.valueAsNumber);\n                }\n            },\n            'fields.lab_printArticleTypeId': {\n                node: 'fields.lab_printArticleTypeId',\n                callback: (element) => {\n                    if (element.value) {\n                        this.rootModel.set('fields.lab_printArticleType', this.printArticleTypes.find((item) => item.id === parseInt(element.value, 10)).type);\n                    } else {\n                        this.rootModel.set('fields.lab_printArticleType', null);\n                    }\n                }\n            },\n            'fields.lab_printPage': { node: 'fields.lab_printPage' },\n            'fields.lab_printArticleTopicString': { node: 'fields.lab_printArticleTopicString' },\n            'fields.lab_printArticleSectionString': { node: 'fields.lab_printArticleSectionString' }\n        };\n    }\n\n    onMarkup() {\n        const currentPrintArticleType = parseInt(this.rootModel.get('fields.lab_printArticleTypeId'), 10);\n        const printArticleTypes = (this.printArticleTypes || []).map((item) => ({ name: item.type, value: item.id, selected: item.id === currentPrintArticleType }));\n        const markupObject = {\n            printArticleTypes,\n            fields: {\n                lab_printArticleTypeId: this.rootModel.get('fields.lab_printArticleTypeId'),\n                lab_printArticleType: this.rootModel.get('fields.lab_printArticleType'),\n                lab_printEditionDate: this.rootModel.get('fields.lab_printEditionDate'),\n                lab_printEditionDateFormatted: this.rootModel.get('fields.lab_printEditionDateFormatted'),\n                lab_printPage: this.rootModel.get('fields.lab_printPage'),\n            },\n            customTopicSectionString: this.customTopicSectionString\n        }\n        if (this.customTopicSectionString) {\n            markupObject.fields.lab_printArticleTopicString = this.rootModel.get('fields.lab_printArticleTopicString');\n            markupObject.fields.lab_printArticleSectionString = this.rootModel.get('fields.lab_printArticleSectionString');\n        }\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, markupObject, true);\n        return markup;\n    }\n\n}\n","export class ArticleAdvancedSettings {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid lab-bordered\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-large\">Advanced settings</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"lab_canonical\">Canonical url</label>\n                    <input type=\"text\" value=\"{{ fields.lab_canonical}}\" name=\"fields.lab_canonical\" id=\"lab_canonical\" placeholder=\"Preferred URL ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"lab_redirect_url\">Redirect url</label>\n                    <input type=\"text\" value=\"{{ fields.lab_redirect_url}}\" name=\"fields.lab_redirect_url\" id=\"lab_redirect_url\" placeholder=\"301 redirect, use with caution ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"showonfp\">Show on front</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.showonfp\" id=\"showonfp\" {{ #fields.showonfp }}checked{{ /fields.showonfp }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"hideFromToplist\">Hide from toplist</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.hideFromToplist\" id=\"hideFromToplist\" {{ #fields.hideFromToplist }}checked{{ /fields.hideFromToplist }}>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-medium lab-space-above-none\">Original urls</h2>\n                {{ ^displayOriginalUrl }}\n                <p>Enable permission <em>admin_batchoperations</em> to edit original url's.</p>\n                {{ /displayOriginalUrl }}\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"original_url\">Original url #1</label>\n                    <input type=\"text\" value=\"{{ fields.original_url}}\" name=\"fields.original_url\" id=\"original_url\" placeholder=\"Original url for this article ...\"{{ ^displayOriginalUrl }} disabled{{ /displayOriginalUrl }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"original_url_2\">Original url #2</label>\n                    <input type=\"text\" value=\"{{ fields.original_url_2}}\" name=\"fields.original_url_2\" id=\"original_url_2\" placeholder=\"Original url for this article ...\"{{ ^displayOriginalUrl }} disabled{{ /displayOriginalUrl }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"original_url_3\">Original url #3</label>\n                    <input type=\"text\" value=\"{{ fields.original_url_3}}\" name=\"fields.original_url_3\" id=\"original_url_3\" placeholder=\"Original url for this article ...\"{{ ^displayOriginalUrl }} disabled{{ /displayOriginalUrl }}>\n                </div>\n\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Advanced',\n            label: 'Settings'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.showonfp': { node: 'fields.showonfp', boolean: true },\n            'fields.hideFromToplist': { node: 'fields.hideFromToplist', boolean: true },\n            'fields.lab_canonical': { node: 'fields.lab_canonical' },\n            'fields.lab_redirect_url': { node: 'fields.lab_redirect_url', validator: 'isUrlOrEmpty' },\n            'fields.original_url': { node: 'fields.original_url', validator: 'noWhiteSpace' },\n            'fields.original_url_2': { node: 'fields.original_url_2', validator: 'noWhiteSpace' },\n            'fields.original_url_3': { node: 'fields.original_url_3', validator: 'noWhiteSpace' }\n        };\n    }\n\n    onMarkup() {\n        const showonfp = this.rootModel.get('fields.showonfp');\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                showonfp: showonfp === null ? true : !!showonfp,\n                hideFromToplist: this.rootModel.get('fields.hideFromToplist'),\n                lab_canonical: this.rootModel.get('fields.lab_canonical'),\n                lab_redirect_url: this.rootModel.get('fields.lab_redirect_url'),\n                original_url: this.rootModel.get('fields.original_url'),\n                original_url_2: this.rootModel.get('fields.original_url_2'),\n                original_url_3: this.rootModel.get('fields.original_url_3')\n            },\n            displayOriginalUrl: this.api.v1.user.hasPermission('admin_batchoperations')\n        }, true);\n        return markup;\n    }\n\n}\n","export class ArticleApproval {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.log = params.log;\n        this.enabled = true;\n        this.hasPermission = this.api.v1.user.hasPermission('admin_status');\n        this.dom = {\n            btnApprove: null,\n            btnRevoke: null,\n            timestamp: null\n        };\n        this.approvalSettings = {\n            approval: {\n                name: 'Approved for publishing',\n                enable: true,\n                approvedData: {},\n                fieldName: 'lab_approved'\n            },\n            sentToDistribution: {\n                name: 'Sent to distribution',\n                enable: false,\n                approvedData: {},\n                fieldName: 'lab_sentToDistribution'\n\n            },\n            proofRead: {\n                name: 'Proof read',\n                enable: false,\n                approvedData: {},\n                fieldName: 'lab_proofRead'\n            },\n            typeset: {\n                name: 'Typeset',\n                enable: false,\n                approvedData: {},\n                fieldName: 'lab_typeset'\n            }\n        };\n        this.getState();\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid\">\n                {{ #approval.enable }}\n                <h2 class=\"lab-title lab-grid-large-12\">{{ approval.name }}</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12\">\n                    {{ #approval.description }}<p>{{ approval.description }}</p>{{ /approval.description }}\n                    <p id=\"lbl-timestamp-approval\">--</p>\n                    <input type=\"button\" id=\"btn-approve-approval\" value=\"Approve\">\n                    <input type=\"button\" id=\"btn-revoke-approval\" value=\"Revoke\">\n                </div>\n                {{ /approval.enable }}\n                \n                {{ #sentToDistribution.enable }}\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-above-large\">{{ sentToDistribution.name }}</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12\">\n                    {{ #sentToDistribution.description }}<p>{{ sentToDistribution.description }}</p>{{ /sentToDistribution.description }}\n                    <p id=\"lbl-timestamp-sentToDistribution\">--</p>\n                    <input type=\"button\" id=\"btn-approve-sentToDistribution\" value=\"Approve\">\n                    <input type=\"button\" id=\"btn-revoke-sentToDistribution\" value=\"Revoke\">\n                </div>\n                {{ /sentToDistribution.enable }}\n\n                {{ #proofRead.enable }}\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-above-large\">{{ proofRead.name }}</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12\">\n                    {{ #proofRead.description }}<p>{{ proofRead.description }}</p>{{ /proofRead.description }}\n                    <p id=\"lbl-timestamp-proofRead\">--</p>\n                    <input type=\"button\" id=\"btn-approve-proofRead\" value=\"Approve\">\n                    <input type=\"button\" id=\"btn-revoke-proofRead\" value=\"Revoke\">\n                </div>\n                {{ /proofRead.enable }}\n\n                {{ #typeset.enable }}\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-above-large\">{{ typeset.name }}</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12\">\n                    {{ #typeset.description }}<p>{{ typeset.description }}</p>{{ /typeset.description }}\n                    <p id=\"lbl-timestamp-typeset\">--</p>\n                    <input type=\"button\" id=\"btn-approve-typeset\" value=\"Approve\">\n                    <input type=\"button\" id=\"btn-revoke-typeset\" value=\"Revoke\">\n                </div>\n                {{ /typeset.enable }}\n\n                {{ ^proofRead.enable }}\n                {{ ^sentToDistribution.enable }}\n                {{ ^typeset.enable}}\n                <p><i>Go to <a href=\"/settings/cp?page=articleSettings\">article settings in Admin</a> to enable extra approval statuses</i></p>\n                {{ /typeset.enable}}\n                {{ /sentToDistribution.enable }}\n                {{ /proofRead.enable }}\n\n            </div>\n            <div class=\"lab-formgroup lab-grid\" id=\"article-sharing-token-access\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-large\">Article access link</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 sharing-link-container\">\n                    <p>Use this link to give access to the article without publishing it:</p>\n                    <span id=\"article-sharing-link\" style=\"line-break: anywhere;\"><i class=\"lab-spinner\"></i></span><br>\n                    <input type=\"button\" class=\"hidden\" id=\"btn-copy-sharing-link\" value=\"Copy link\">\n                    <span id=\"article-sharing-link-copied\"></span>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 sharing-link-publish-first-container lab-hidden\">\n                    <p>Publish the article as \"Hidden\", to generate a link that can be accessed by others.</p>\n                </div>\n            </div>\n        </div>`;\n    }\n\n    getArticleToken() {\n        return new Promise((resolve, reject) => {\n            const published_url = this.rootModel.get('fields.published_url');\n            if (published_url === null) {\n                this.dom.sharingLinkContainer.querySelector('.sharing-link-container').classList.add('lab-hidden');\n                this.dom.sharingLinkContainer.querySelector('.sharing-link-publish-first-container').classList.remove('lab-hidden');\n                resolve();\n                return;\n            }\n\n            const url = `/ajax/article/create-article-token?articleId=${ this.rootModel.getId() }`;\n            fetch(url, { mode: 'cors' })\n                .then((response) => {\n                    if (!response.ok) {\n                        reject(response.statusText);\n                    }\n                    return response.json();\n                }).then((json) => {\n                    const sharing_url = `${ this.rootModel.get('fields.published_url') }?articleToken=${ json.token }`;\n                    const domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n                    this.dom.sharingLink.innerHTML = `<a href=\"${ domain }${ sharing_url }\" target=\"_blank\" class=\"sharing-link\">${ domain }${ sharing_url }</a>`;\n                }).catch((err) => {\n                    console.warn(err);\n                    reject(err);\n                });\n        });\n    }\n\n    onAside() {\n        return {\n            section: 'Advanced',\n            label: 'Article status'\n        };\n    }\n\n    onPaths() {}\n\n    approve(status) {\n        this.api.v1.article.approval.approve(this.approvalSettings[status].fieldName).then(() => {\n            this.getState();\n            this.log({\n                type: 'data',\n                app: this.constructor.name,\n                path: `fields.${ this.approvalSettings[status].fieldName }`,\n                approved: '1'\n            });\n        });\n    }\n\n    revoke(status) {\n        this.api.v1.article.approval.revoke(this.approvalSettings[status].fieldName).then(() => {\n            this.getState();\n            this.log({\n                type: 'data',\n                app: this.constructor.name,\n                path: `fields.${ this.approvalSettings[status].fieldName }`,\n                approved: '0'\n            });\n        });\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, this.approvalSettings, true);\n        this.statuses = Object.keys(this.approvalSettings).filter((key) => this.approvalSettings[key].enable);\n\n        for (const status of this.statuses) {\n            this.dom[`btnApprove-${ status }`] = markup.querySelector(`#btn-approve-${ status }`);\n            this.dom[`btnRevoke-${ status }`] = markup.querySelector(`#btn-revoke-${ status }`);\n            this.dom[`timestamp-${ status }`] = markup.querySelector(`#lbl-timestamp-${ status }`);\n        }\n\n        for (const status of this.statuses) {\n            this.dom[`btnApprove-${ status }`].disabled = this.approvalSettings[status].approvedData.isApproved;\n            this.dom[`btnRevoke-${ status }`].disabled = !this.approvalSettings[status].approvedData.isApproved;\n            this.dom[`timestamp-${ status }`].innerHTML = this.getTimestampLabel(status);\n            this.dom[`btnApprove-${ status }`].addEventListener('click', (event) => {\n                this.approve(status);\n            }, false);\n            this.dom[`btnRevoke-${ status }`].addEventListener('click', (event) => {\n                this.revoke(status);\n            }, false);\n\n            if (!this.hasPermission) {\n                this.dom[`btnApprove-${ status }`].setAttribute('disabled', 'disabled');\n                this.dom[`btnRevoke-${ status }`].setAttribute('disabled', 'disabled');\n            }\n\n        }\n\n        // Article sharing link with article token\n        this.dom.sharingLinkContainer = markup.querySelector('#article-sharing-token-access');\n        this.dom.sharingLink = markup.querySelector('#article-sharing-link');\n        if (this.api.v1.properties.get('allow_publish_hidden_with_token') === '1') {\n            this.getArticleToken();\n        } else {\n            this.dom.sharingLinkContainer.classList.add('lab-hidden');\n        }\n        this.dom.btnCopyLink = markup.querySelector('#btn-copy-sharing-link');\n        this.dom.btnCopyLink.addEventListener('click', (event) => {\n            navigator.clipboard.writeText(this.dom.sharingLink.querySelector('a').getAttribute('href'))\n                .then(() => {\n                    document.getElementById('article-sharing-link-copied').innerHTML = 'Copied!';\n                });\n        });\n\n        return markup;\n    }\n\n    getState() {\n        const siteInfo = this.api.v1.site.getSite();\n        const siteApprovalSetup = this.api.v1.config.get('articleApprovalStatus', { site: siteInfo.alias });\n        for (const key of Object.keys(this.approvalSettings)) {\n            if (siteApprovalSetup && siteApprovalSetup[key]) {\n                if ('enable' in siteApprovalSetup[key]) {\n                    this.approvalSettings[key].enable = siteApprovalSetup[key].enable;\n                } else {\n                    this.approvalSettings[key].enable = false;\n                }\n\n                if ('name' in siteApprovalSetup[key] && typeof siteApprovalSetup[key].name === 'string' && siteApprovalSetup[key].name.length > 0) {\n                    this.approvalSettings[key].name = siteApprovalSetup[key].name;\n                }\n\n                if ('description' in siteApprovalSetup[key] && typeof siteApprovalSetup[key].description === 'string' && siteApprovalSetup[key].description.length > 0) {\n                    this.approvalSettings[key].description = siteApprovalSetup[key].description;\n                }\n            }\n        }\n\n        this.statuses = Object.keys(this.approvalSettings).filter((key) => this.approvalSettings[key].enable);\n\n        for (const status of this.statuses) {\n            const { fieldName } = this.approvalSettings[status];\n            this.api.v1.article.approval.getData(fieldName).then((data) => {\n                this.approvalSettings[status].approvedData = data;\n\n                if (this.dom[`btnApprove-${ status }`]) {\n                    this.dom[`btnApprove-${ status }`].disabled = this.approvalSettings[status].approvedData.isApproved;\n                    this.dom[`btnRevoke-${ status }`].disabled = !this.approvalSettings[status].approvedData.isApproved;\n                    this.dom[`timestamp-${ status }`].innerHTML = this.getTimestampLabel(status);\n                }\n            });\n        }\n    }\n\n    getTimestampLabel(status) {\n        let permissionInfo = '';\n        if (!this.hasPermission) {\n            permissionInfo = 'You do not have permission to accept/revoke this article.<br><br>';\n        }\n        if (!this.approvalSettings[status].approvedData.isApproved) {\n            return `${ permissionInfo }Unapproved: '${ this.approvalSettings[status].name }'`;\n        }\n        const date = new Date(this.approvalSettings[status].approvedData.date.timestamp * 1000);\n        return `${ permissionInfo }Approved: '${ this.approvalSettings[status].name }' approved by ${ this.approvalSettings[status].approvedData.user.name }<br>${ date.toISOString() }`;\n    }\n\n}\n","export class ArticleAudio {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.setter = params.setter;\n        this.log = params.log;\n        this.enabled = true;\n        this.dom = {\n            audioFields: {\n                url: null,\n                title: null,\n                playTime: null,\n                fileType: null,\n                disableField: null\n            }\n        };\n        this.bindingsHandler = this.onMarkup.bind(this);\n        this.hasAudioCollection = this.api.v1.config.get('drawerAdditions').some((item) => item.collection === 'Audio');\n\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup-item lab-grid-large-12\">\n                <div class=\"lab-grid lab-grid-gap\">\n                    <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none\">Audio</h2>\n                    <input class=\"lab-grid-large-8 lab-grid-gap\" type=\"url\" {{ #audio.disableField }}disabled{{ /audio.disableField }} id=\"teaser-audio-url\" value=\"{{ audio.url }}\" placeholder=\"Teaser Audio Url ...\">\n                    <input class=\"lab-grid-large-4 lab-grid-gap\" type=\"button\" {{ ^audio.disableField }}disabled{{ /audio.disableField }} id=\"btn-remove-teaser-audio-url\" value=\"Remove audio file\">\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                        <p class=\"lab-info\">Adding a file here allows for the audio clip to be played directly from the front page teaser.</p>\n                    </div>\n                    {{ #hasAudioCollection }}\n                        <div class=\"audio-file-info lab-grid-gap lab-grid-large-7 lab-space-above-small\">\n                                <div>Title: <strong id=\"audio-file-title\">{{ audio.title }}</strong></div>\n                                <div>Duration: <strong id=\"audio-file-duration\">{{ audio.playTime}}</strong></div>\n                                <div>Type: <strong id=\"audio-file-type\">{{ audio.fileType }}</strong></div>\n                        </div>\n                        <input class=\"lab-grid-gap lab-grid-large-5\" type=\"button\" id=\"btn-add-teaser-audio-url\" value=\"Add audio file from library\">\n                    {{ /hasAudioCollection }}\n                 </div>\n            </div>\n \n        </div>`;\n    }\n\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Audio'\n        };\n    }\n\n    onPaths() {\n        return {};\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                teaserAudio: this.rootModel.get('fields.teaserAudio')\n            },\n            hasAudioCollection: this.hasAudioCollection,\n            audio: {\n                disableField: this.rootModel.get('fields.teaserAudio.urlFieldDisabled') || Boolean(this.rootModel.get('fields.teaserAudio')),\n                title: this.rootModel.get('fields.teaserAudio.title'),\n                playTime: this.rootModel.get('fields.teaserAudio.playTime'),\n                fileType: this.rootModel.get('fields.teaserAudio.fileType'),\n                url: this.rootModel.get('fields.teaserAudio')\n            }\n        }, true);\n\n        this.dom.audioFields.url = markup.querySelector('#teaser-audio-url');\n        const audioField = markup.querySelector('#teaser-audio-url');\n        const btnAddAudioFile = markup.querySelector('#btn-add-teaser-audio-url');\n        const btnRemoveAudioFile = markup.querySelector('#btn-remove-teaser-audio-url');\n\n        btnRemoveAudioFile.addEventListener('click', (event) => {\n            this.removeAudioFile(btnAddAudioFile, btnRemoveAudioFile);\n        }, false);\n\n        audioField.addEventListener('change', (event) => {\n            this.rootModel.set('fields.teaserAudio', audioField.value);\n            this.rootModel.set('fields.teaserAudio.urlFieldDisabled', true);\n            this.log({\n                type: 'data',\n                app: this.constructor.name,\n                path: 'fields.teaserAudio'\n            });\n            this.dom.audioFields.url.disabled = true;\n            btnRemoveAudioFile.disabled = false;\n        });\n\n        if (this.hasAudioCollection) {\n            if (this.dom.audioFields.url.value) {\n                btnAddAudioFile.value = 'Change audio file';\n                btnRemoveAudioFile.disabled = false;\n                this.dom.audioFields.url.disabled = true;\n            }\n            this.dom.audioFields.title = markup.querySelector('#audio-file-title');\n            this.dom.audioFields.playTime = markup.querySelector('#audio-file-duration');\n            this.dom.audioFields.fileType = markup.querySelector('#audio-file-type');\n\n            btnAddAudioFile.addEventListener('click', (event) => {\n                this.addAudioFile(btnAddAudioFile, btnRemoveAudioFile);\n            }, false);\n\n        }\n\n        return markup;\n    }\n\n    addAudioFile(addBtn, removeBtn, urlField) {\n        this.api.v1.collection.display({\n            name: 'Audio',\n            modal: true,\n            skipCache: true,\n            options: {\n                label: 'Audio files',\n                clickHandler: (model, element) => {\n                    this.models.audio = model;\n                    this.rootModel.set('fields.teaserAudio', model.get('fields.url'));\n                    this.rootModel.set('fields.teaserAudio.title', model.get('fields.title'));\n                    this.rootModel.set('fields.teaserAudio.playTime', model.get('fields.playTime'));\n                    this.rootModel.set('fields.teaserAudio.fileType', model.get('fields.fileType'));\n                    this.rootModel.set('fields.teaserAudio.urlFieldDisabled', true);\n                    this.dom.audioFields.url.value = model.get('fields.url');\n                    this.dom.audioFields.title.innerHTML = model.get('fields.title');\n                    this.dom.audioFields.playTime.innerHTML = model.get('fields.playTime');\n                    this.dom.audioFields.fileType.innerHTML = model.get('fields.fileType');\n                    this.dom.audioFields.url.disabled = true;\n                    addBtn.value = 'Change audio file';\n                    removeBtn.disabled = false;\n                }\n            }\n        });\n    }\n\n    removeAudioFile(addBtn, removeBtn) {\n        this.rootModel.set('fields.teaserAudio', null);\n        this.dom.audioFields.url.value = null;\n        this.dom.audioFields.url.disabled = false;\n        this.rootModel.set('fields.teaserAudio.urlFieldDisabled', null);\n        removeBtn.disabled = true;\n\n        if (this.hasAudioCollection) {\n            this.rootModel.set('fields.teaserAudio.title', null);\n            this.rootModel.set('fields.teaserAudio.playTime', null);\n            this.rootModel.set('fields.teaserAudio.fileType', null);\n            this.dom.audioFields.title.innerHTML = null;\n            this.dom.audioFields.playTime.innerHTML = null;\n            this.dom.audioFields.fileType.innerHTML = null;\n            addBtn.value = 'Add audio file from library';\n        }\n\n        this.log({\n            type: 'data',\n            app: this.constructor.name,\n            path: 'fields.teaserAudio'\n        });\n    }\n\n}\n","export class ArticleChangelog {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.log = params.log;\n        this.enabled = true;\n        this.labels = {\n            btnUpdate: 'Update changelog entry',\n            btnAdd: 'Add changelog entry'\n        };\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12\">Changelog</h2>\n                <form id=\"changelogForm\" class=\"lab-formgroup-item lab-grid-large-12\">\n                    <label for=\"date\">Select a date</label>\n                    <input type=\"date\" required id=\"date\" name=\"date\" value=\"\">\n                    <input type=\"hidden\" id=\"userId\" name=\"userId\" value=\"${ this.api.v1.user.getUserId() }\">\n                    <input type=\"hidden\" id=\"index\" name=\"index\" value=\"\">\n                    <label for=\"changelog\">Changelog text</label>\n                    <textarea name=\"changelogText\" required id=\"changelogText\" style=\"height: 240px;\" placeholder=\"Changelog text...\"></textarea>\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right\">\n                        <input type=\"button\" id=\"changelogCancel\" value=\"Clear\">\n                        <input type=\"submit\" id=\"changelogSubmit\" class=\"lab-add\" value=\"Add changelog entry\">\n                    </div>\n                </form>\n                <h3>Changelog entries</h3>\n                <div id=\"changelogEntries\" class=\"lab-formgroup-item lab-grid-large-12\">\n                </div>\n            </div>            \n\n        </div>`;\n    }\n\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Changelog'\n        };\n    }\n\n    onPaths() {\n        return {};\n    }\n\n    onMarkup() {\n        const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];\n        let changelogEntries;\n        if (typeof changelogEntriesRaw === 'string') {\n            changelogEntries = JSON.parse(changelogEntriesRaw);\n        } else {\n            changelogEntries = [...changelogEntriesRaw];\n        }\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {}, true);\n\n        changelogEntries = this.sortEntries(changelogEntries);\n        markup.querySelector('#changelogEntries').innerHTML = this.entriesMarkup(changelogEntries);\n\n        markup.querySelector('#changelogCancel').addEventListener('click', (event) => {\n            event.preventDefault();\n            markup.querySelector('#changelogSubmit').value = this.labels.btnAdd;\n            markup.querySelector('#changelogCancel').value = 'Clear';\n            markup.querySelector('#changelogForm').reset();\n        });\n\n        this.addChangelogEntryEventListener(markup);\n        this.editChangelogEntryEventListener(markup, changelogEntries);\n        this.deleteChangelogEntryEventListener(markup);\n\n        return markup;\n    }\n\n    addEntryToChangelog(markup) {\n        const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];\n        let changelogEntries;\n        if (typeof changelogEntriesRaw === 'string') {\n            changelogEntries = JSON.parse(changelogEntriesRaw);\n        } else {\n            changelogEntries = [...changelogEntriesRaw];\n        }\n        markup.querySelector('#changelogEntries').innerHTML = this.entriesMarkup(changelogEntries);\n        this.editChangelogEntryEventListener(markup, changelogEntries);\n        this.deleteChangelogEntryEventListener(markup);\n    }\n\n    /**\n     * Generates the markup for displaying entries.\n     *\n     * @param {Array} entries - The array of entries.\n     * @returns {string} - The generated markup.\n     */\n    entriesMarkup(entries) {\n        return entries.map((entry, index) => `\n            <div class=\"lab-formgroup-item lab-grid-large-12\" data-index=\"${ index }\" data-user-id=\"${ entry.userId }\" style=\"border: 1px solid rgb(214, 214, 214); padding: 0.5rem;\">\n                <p class=\"entry-date\" style=\"font-weight:bold; margin: 0;\">${ this.formatTimestampToDate(entry.time * 1000) }</p>\n                <div clasee=\"entry-text\" style=\"margin: 0;\">${ this.convertNewLines(entry.changelog) }</div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right\">\n                    <button class=\"lab-btn edit-button\" data-index=\"${ index }\">Edit</button>\n                    <button class=\"lab-btn delete-button\" data-index=\"${ index }\">Delete</button>\n                </div>\n            </div>`).join('');\n    }\n\n    /**\n     * Converts newline characters in a given text to HTML paragraph and line break tags.\n     *\n     * - Double newlines (`\\n\\n`) are replaced with `</p><p>`.\n     * - Single newlines (`\\n`) are replaced with `<br>`.\n     * - The entire text is wrapped in `<p>` tags.\n     *\n     * @param {string} text - The input text containing newline characters.\n     * @returns {string} - The converted text with HTML tags.\n     */\n    convertNewLines(text) {\n        text = text.replace(/\\n\\n/g, '</p><p>');\n        text = text.replace(/\\n/g, '<br>');\n        text = `<p>${ text }</p>`;\n        return text;\n    }\n\n    /**\n     * Handles the submission of an article change log.\n     *\n     * @param {HTMLElement} markup - The markup containing the form elements.\n     * @returns {Object} - An object containing the user ID, time, and changelog.\n     */\n    handleSubmit(markup) {\n        const time = parseInt(markup.querySelector('#date').valueAsNumber / 1000, 10);\n        const userId = parseInt(markup.querySelector('#userId').value, 10);\n        const changelog = markup.querySelector('#changelogText').value;\n\n        return {\n            userId,\n            time,\n            changelog\n        };\n    }\n\n    /**\n     * Updates the changelog entry in the markup.\n     *\n     * @param {HTMLElement} markup - The markup element containing the changelog entry.\n     * @param {number} timestampValue - The timestamp value for the changelog entry.\n     * @param {string} userIdValue - The user ID value for the changelog entry.\n     * @param {string} changelogTextValue - The changelog text value for the entry.\n     * @param {number} index - The index of the changelog entry.\n     * @returns {void}\n     */\n    changeChangelogEntry(markup, timestampValue, userIdValue, changelogTextValue, index) {\n        markup.querySelector('#date').value = new Date(timestampValue * 1000).toISOString().split('T')[0] || '';\n        markup.querySelector('#userId').value = userIdValue || '';\n        markup.querySelector('#changelogText').value = changelogTextValue || '';\n        markup.querySelector('#changelogSubmit').value = this.labels.btnUpdate;\n        markup.querySelector('#changelogCancel').value = 'Cancel';\n        markup.querySelector('#index').value = index;\n        markup.querySelector('#changelogText').focus();\n    }\n\n    /**\n     * Converts a timestamp to a formatted date string.\n     *\n     * @param {number} timestamp - The timestamp to convert.\n     * @returns {string} The formatted date string.\n     */\n    formatTimestampToDate(timestamp) {\n        const date = new Date(timestamp);\n        return date.toLocaleDateString();\n    }\n\n    /**\n     * Returns the highest update date from the given entries.\n     *\n     * @param {Array<Object>} entries - The array of entries.\n     * @returns {number} The highest update date.\n     */\n    getHighestUpdateDate(entries) {\n        return entries.reduce((prev, current) => ((prev.time > current.time) ? prev : current)).time;\n    }\n\n    /**\n     * Sorts the given entries in descending order based on their time property.\n     *\n     * @param {Array} entries - The array of entries to be sorted.\n     * @returns {Array} - The sorted array of entries.\n     */\n    sortEntries(entries) {\n        return entries.slice().sort((a, b) => b.time - a.time);\n    }\n\n    /**\n     * Adds an event listener to the changelog form for submitting a changelog entry.\n     *\n     * @param {HTMLElement} markup - The markup element containing the changelog form.\n     */\n    addChangelogEntryEventListener(markup) {\n        markup.querySelector('#changelogForm').addEventListener('submit', (event) => {\n            const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];\n            let changelogEntries;\n            if (typeof changelogEntriesRaw === 'string') {\n                changelogEntries = JSON.parse(changelogEntriesRaw);\n            } else {\n                changelogEntries = [...changelogEntriesRaw];\n            }\n            event.preventDefault();\n            const changelog = markup.querySelector('#changelogSubmit').value === this.labels.btnAdd ? 'add' : 'update';\n            if (markup.querySelector('#index').value !== '') {\n                const index = parseInt(markup.querySelector('#index').value, 10);\n                changelogEntries[index] = this.handleSubmit(markup);\n                changelogEntries = this.sortEntries(changelogEntries);\n            } else {\n                changelogEntries.unshift(this.handleSubmit(markup));\n                changelogEntries = this.sortEntries(changelogEntries);\n            }\n            markup.querySelector('#changelogSubmit').value = this.labels.btnAdd;\n            markup.querySelector('#changelogCancel').value = 'Clear';\n            this.rootModel.set('fields.lab_changelog_json', changelogEntries);\n            this.rootModel.set('fields.lab_changelogUpdate_date', this.getHighestUpdateDate(changelogEntries));\n            this.addEntryToChangelog(markup);\n            event.target.reset();\n\n            this.log({\n                type: 'data',\n                app: this.constructor.name,\n                path: 'fields.lab_changelog_json',\n                changelog\n            });\n        });\n    }\n\n    /**\n     * Adds event listeners to the edit buttons in the markup.\n     *\n     * @param {Element} markup - The markup element containing the edit buttons.\n     * @param {Array} changelogEntries - An array of changelog entries.\n     * @returns {void}\n     */\n    editChangelogEntryEventListener(markup, changelogEntries) {\n        markup.querySelectorAll('.edit-button').forEach((button) => {\n            button.addEventListener('click', (event) => {\n                event.preventDefault();\n                const index = event.target.getAttribute('data-index');\n                const entry = changelogEntries[index];\n                this.changeChangelogEntry(markup, entry.time, entry.userId, entry.changelog, index);\n            });\n        });\n    }\n\n    /**\n     * Attaches event listeners to delete buttons within the given markup element.\n     * When a delete button is clicked, the corresponding changelog entry is removed from the changelogEntries array.\n     * The updated changelogEntries array is then serialized and stored in the 'fields.lab_changelog_json' property of the rootModel.\n     * The markup is updated to reflect the changes, and the event listeners for editing and deleting changelog entries are reattached.\n     *\n     * @param {Element} markup - The markup element containing the delete buttons.\n     * @param {Array} changelogEntries - The array of changelog entries.\n     */\n    deleteChangelogEntryEventListener(markup) {\n        markup.querySelectorAll('.delete-button').forEach((button) => {\n            button.addEventListener('click', (event) => {\n                const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];\n                let changelogEntries;\n                if (typeof changelogEntriesRaw === 'string') {\n                    changelogEntries = JSON.parse(changelogEntriesRaw);\n                } else {\n                    changelogEntries = [...changelogEntriesRaw];\n                }\n                event.preventDefault();\n                const index = event.target.getAttribute('data-index');\n                changelogEntries.splice(index, 1);\n                this.rootModel.set('fields.lab_changelog_json', changelogEntries);\n                if (changelogEntries.length === 0) {\n                    this.rootModel.set('fields.lab_changelogUpdate_date', null);\n                } else {\n                    this.rootModel.set('fields.lab_changelogUpdate_date', this.getHighestUpdateDate(changelogEntries));\n                }\n                markup.querySelector('#changelogEntries').innerHTML = this.entriesMarkup(changelogEntries);\n                this.editChangelogEntryEventListener(markup, changelogEntries);\n                this.deleteChangelogEntryEventListener(markup, changelogEntries);\n\n                this.log({\n                    type: 'data',\n                    app: this.constructor.name,\n                    path: 'fields.lab_changelog_json',\n                    changelog: 'delete'\n                });\n            });\n        });\n    }\n\n}\n","export class ArticleCitation {\n\n    constructor(api, menuItem, aiOptions = { model: 'gpt-4o' }) {\n\n        this.api = api;\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.menuItem = menuItem;\n        this.bodytext = this.setupBodytext();\n\n        this.enabled = false;\n        this.modal = null;\n        this.aiOptions = aiOptions;\n\n        this.template = `\n            <div class=\"lab-modal-form lab-grid\">\n                <div id=\"input-area\" class=\"lab-formgroup lab-grid\">\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                        <label for=\"citation_original_text\" class=\"lab-title\"><b>Copy of original text</b></label>\n                        <textarea data-sugegstion-name=\"original_text\" name=\"fields.original_text\" id=\"citation_original_text\" placeholder=\"Original content that you wish to generate a citation article from\">{{ fields.original_text }}</textarea>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small\">\n                        <label for=\"citation_original_source\"><b>Name of source</b></label>\n                        <input type=\"text\" data-sugegstion-name=\"original_source\" name=\"fields.original_source\" id=\"citation_original_source\" placeholder=\"Like 'The Guardian' or 'BBC'\">{{ fields.original_source }}</input>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small\">\n                        <label for=\"citation_original_url\"><b>Source url</b></label>\n                        <input style=\"float:right; position:relative width:auto\" type=\"text\" data-sugegstion-name=\"original_url\" name=\"fields.original_url\" id=\"citation_original_url\" placeholder=\"https://www.bbc.com/news/12345\">{{ fields.original_url }}</input>\n                        <div>{{{ buttons.generate_content }}}</div>\n\n                    </div>\n                    <p id=\"info_input\" class=\"lab-hidden\"><strong><em>You must provide data in all input fields</em></strong></p>\n                </div>\n\n                <div id=\"generated_text_area\" class=\"lab-hidden\">\n                    <h3>Generated text</h3>\n                    <textarea id=\"citation_generated_text\" rows=\"8\" style=\"height:auto;\"></textarea>\n\n                    {{{ buttons.reject_content }}} {{{ buttons.retry }}} {{{ buttons.overwrite_content }}} {{{ buttons.insert_content }}}\n                </div>\n            </div>\n        `;\n        this.display();\n        this.generatedContent = '';\n        this.temporaryContent = '<span class=\"temporaryGeneratedString\"> </span>';\n        this.contentRemove = '';\n        this.contentUpdate = '';\n\n    }\n\n    setupBodytext() {\n        this.menuItem.menu.tool.insertMarkup('<span class=\"temporaryGeneratedString\"> </span>');\n        return this.rootModel.get('fields.bodytext');\n\n    }\n\n    getMarkup() {\n        const buttons = {\n            generate_content: `<span type=\"button\" class=\"lab-btn lab-generate\" id=\"suggest-btn-generate_content\" style=\"float:right; position:relative\">Generate citation article</span>`,\n            reject_content: `<span type=\"button\" class=\"lab-btn\" id=\"suggest-btn-reject-content\" style=\"float:left; position:relative\">Cancel</span>`,\n            retry: `<span type=\"button\" class=\"lab-btn\" id=\"suggest-btn-retry\" style=\"float:left; position:relative\">Retry</span>`,\n            overwrite_content: `<span type=\"button\" class=\"lab-btn lab-hidden\" id=\"suggest-btn-overwrite-content\" style=\"float:right; position:relative\">Overwrite bodytext</span>`,\n            insert_content: `<span type=\"button\" class=\"lab-btn\" id=\"suggest-btn-insert-content\" style=\"float:right; position:relative\">Insert content</span>`\n        };\n\n        const citation_generated_text = `<p id=\"citation_generated_text\" class=\"lab-hidden\"></p>`;\n\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            buttons,\n            citation_generated_text,\n            fields: {\n                bodytext: this.rootModel.get('fields.bodytext'),\n                generatedContent: this.rootModel.get('fields.generatedContent'),\n                original_text: this.rootModel.get('fields.original_text')\n\n            }\n        }, true);\n\n        this.markup = markup;\n        return markup;\n\n    }\n\n    display() {\n\n        const markup = this.getMarkup();\n        this.api.v1.ui.modal.dialog({\n            content: {\n                header: 'Generate citation article',\n                markup: markup.innerHTML\n            },\n            footer: {\n                informalText: '<strong>This function in Labrador CMS is using advanced artificial intelligence developed by OpenAI API.</strong><br>Text from the article is not used to train or improve the public data models. Use generated text from these functions as suggestions, and be sure to manually verify them. Labrador CMS shall not be held liable for any use of the generated text. For now the use of these functions are covered by your Labrador CMS license. We might change this in the future, when we know more about our operational costs.',\n                buttons: [{\n                    type: 'submit',\n                    value: 'OK',\n                    class: 'lab-hidden',\n                    highlight: true\n                }]\n            },\n            callbacks: {\n                didDisplay: (modal) => {\n                    const modalMarkup = modal.getMarkup();\n\n                    // Initialise content generation\n                    const btnGenerate = modalMarkup.querySelector(`#suggest-btn-generate_content`);\n                    const info_input = modalMarkup.querySelector('#info_input');\n                    const generatedText = modalMarkup.querySelector(`#citation_generated_text`);\n                    const inputArea = modalMarkup.querySelector(`#input-area`);\n                    const generatedArea = modalMarkup.querySelector('#generated_text_area');\n\n                    // Button - generate data\n                    btnGenerate.addEventListener('click', (event) => {\n\n                        // Input fields\n                        const original_content = modalMarkup.querySelector('#citation_original_text').value;\n                        const original_source = modalMarkup.querySelector('#citation_original_source').value;\n                        const original_url = modalMarkup.querySelector('#citation_original_url').value;\n\n                        // Input for text assistant\n                        const style = 'Journalistic';\n                        const tone = 'Journalistic';\n\n                        if (original_content && original_source && original_url) {\n                            // Start fetch from textAssistant\n                            if (original_content.length < 400) {\n                                info_input.classList.remove('lab-hidden');\n                                info_input.textContent = 'The copied text must be at least 400 characters long.';\n                                Sys.logger.error('Error: The original article content must have at least 400 characters');\n\n                            } else {\n                                // State change - good input\n                                modal.setBusyState(true);\n                                info_input.classList.add('lab-hidden');\n                                btnGenerate.classList.add('lab-disabled');\n\n                                // Generate citation article\n                                this.api.v1.ns.get('textAssistant.fetchByGroupName')('article_citation', this.aiOptions, {\n                                    tone, style, original_content, original_source, original_url\n                                }).then((respons) => {\n                                    // Hide input area\n                                    inputArea.classList.add('lab-hidden');\n\n                                    // Clean up respons\n                                    let result = { article: '' };\n                                    if (!respons.startsWith('{')) {\n                                        result = { article: respons };\n                                    } else {\n                                        result = JSON.parse(respons);\n                                    }\n\n                                    // Show generated text\n                                    generatedText.textContent = result.article;\n                                    generatedArea.classList.remove('lab-hidden');\n\n                                    modal.setBusyState(false);\n\n                                });\n                            }\n                        } else {\n                            // State change - show bad input\n                            info_input.textContent = 'You need to add data to all fields and the article content must be at least 400 characters long.';\n                            info_input.classList.remove('lab-hidden');\n\n                            Sys.logger.error('Error: There is not enough input data to generate an citation article from');\n                        }\n\n                    });\n\n                    // Overwrite bodytext\n                    const btnOverwrite = modalMarkup.querySelector(`#suggest-btn-overwrite-content`);\n                    if (this.bodytext && this.bodytext.length > 0 && this.bodytext !== this.temporaryContent) {\n                        btnOverwrite.classList.remove('lab-hidden');\n                    }\n                    btnOverwrite.addEventListener('click', (event) => {\n                        this.contentUpdate = generatedText.textContent;\n                        this.contentRemove = this.bodytext;\n                        modal.close();\n                    });\n\n                    // Insert into bodytext\n                    const btnInsert = modalMarkup.querySelector(`#suggest-btn-insert-content`);\n                    btnInsert.addEventListener('click', (event) => {\n                        this.contentUpdate = generatedText.textContent;\n                        this.contentRemove = this.temporaryContent;\n                        modal.close();\n                    });\n\n                    // Retry\n                    const btnRety = modalMarkup.querySelector(`#suggest-btn-retry`);\n                    btnRety.addEventListener('click', (event) => {\n                        btnGenerate.classList.remove('lab-disabled');\n                        inputArea.classList.remove('lab-hidden');\n                        generatedArea.classList.add('lab-hidden');\n                    });\n\n                    // Reject\n                    const btnReject = modalMarkup.querySelector(`#suggest-btn-reject-content`);\n                    btnReject.addEventListener('click', (event) => {\n                        this.contentUpdate = '';\n                        this.contentRemove = this.temporaryContent;\n                        modal.close();\n                    });\n                },\n\n                end: () => {\n                    // Handle insert\n                    if (this.bodytext && (this.bodytext !== this.contentRemove)) {\n                        this.bodytext = this.rootModel.get('fields.bodytext');\n                        this.contentUpdate = this.bodytext.replace(this.contentRemove, this.contentUpdate);\n\n                    }\n                    // Clean up\n                    this.contentUpdate = this.contentUpdate.replaceAll(this.temporaryContent, '');\n\n                    // Update bodytext\n                    this.rootModel.set('fields.bodytext', this.contentUpdate);\n\n                }\n            }\n\n        });\n    }\n    /*\n    getMarkup() {\n        return this.modal;\n    }\n    */\n\n}\n","export class ArticleCommercialSettings {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.dom = {};\n        this.helpers = params.helpers;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12\">Commercial settings</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"paywall\">Paywall - Require subscription</label>\n                    <input type=\"checkbox\" name=\"fields.paywall\" id=\"paywall\" value=\"1\" {{ #fields.paywall }}checked{{ /fields.paywall }}>\n                </div>\n                {{ #enableShareableArticle }}\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"paywall\">Let paywalled article be shareable</label>\n                    <input type=\"checkbox\" name=\"fields.paywallShareable\" id=\"paywallShareable\" value=\"1\" {{ #fields.paywallShareable }}checked{{ /fields.paywallShareable }}>\n                </div>\n                {{ /enableShareableArticle }}\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"hideAds\">Hide ads</label>\n                    <input type=\"checkbox\" name=\"fields.hideAds\" id=\"hideAds\" value=\"1\" {{ #fields.hideAds }}checked{{ /fields.hideAds }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"hideSkyscraperAds\">Hide skyscraper ads</label>\n                    <input type=\"checkbox\" name=\"fields.hideSkyscraperAds\" id=\"hideSkyscraperAds\" value=\"1\" {{ #fields.hideSkyscraperAds }}checked{{ /fields.hideSkyscraperAds }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"hideTopBannerAd\">Hide top banner ad</label>\n                    <input type=\"checkbox\" name=\"fields.hideTopBannerAd\" id=\"hideTopBannerAd\" value=\"1\" {{ #fields.hideTopBannerAd }}checked{{ /fields.hideTopBannerAd }}>\n                </div>\n                <h3 class=\"lab-grid-large-12\">Link Relationship Attributes for this Article (Rel)</h3>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <input type=\"checkbox\" id=\"addRelUgc\" name=\"fields.addRelUgc\" value=\"1\" {{ #fields.addRelUgc }}checked{{ /fields.addRelUgc }}>\n                    <label for=\"addRelUgc\">User-generated content</label>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <input type=\"checkbox\" id=\"addRelSponsored\" name=\"fields.addRelSponsored\" value=\"1\" {{ #fields.addRelSponsored }}checked{{ /fields.addRelSponsored }}>\n                    <label for=\"addRelSponsored\">Sponsored</label>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <input type=\"checkbox\" id=\"addRelNoFollow\" name=\"fields.addRelNoFollow\" value=\"1\" {{ #fields.addRelNoFollow }}checked{{ /fields.addRelNoFollow }}>\n                    <label for=\"addRelNoFollow\">No-follow</label>\n                </div>\n                 <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <p class=\"lab-info\">Select the appropriate \"rel\" attributes to apply to this article teaser. These settings help with SEO and indicate the nature of a linked content (This article).</p>\n                </div>\n            </div>\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Commercial settings'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.paywall': { node: 'fields.paywall', boolean: true },\n            'fields.paywallShareable': { node: 'fields.paywallShareable', boolean: true },\n            'fields.hideAds': { node: 'fields.hideAds', boolean: true, suggestReload: true },\n            'fields.hideSkyscraperAds': { node: 'fields.hideSkyscraperAds', boolean: true },\n            'fields.hideTopBannerAd': { node: 'fields.hideTopBannerAd', boolean: true },\n            'fields.addRelUgc': { node: 'fields.addRelUgc', boolean: true },\n            'fields.addRelSponsored': { node: 'fields.addRelSponsored', boolean: true },\n            'fields.addRelNoFollow': { node: 'fields.addRelNoFollow', boolean: true }\n        };\n    }\n\n    onMarkup() {\n        // Shareable article is enabled in admin -> Article settings -> Commercial settings\n        let enableShareableArticle = false;\n        const enabledSettings = this.api.v1.config.get('commercial_settings');\n        if (enabledSettings && enabledSettings.shareableArticle && enabledSettings.shareableArticle === true) {\n            enableShareableArticle = true;\n        }\n\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                paywall: this.helpers.toBoolean(this.rootModel.get('fields.paywall')),\n                paywallShareable: this.helpers.toBoolean(this.rootModel.get('fields.paywallShareable')),\n                hideAds: this.helpers.toBoolean(this.rootModel.get('fields.hideAds')),\n                hideSkyscraperAds: this.helpers.toBoolean(this.rootModel.get('fields.hideSkyscraperAds')),\n                hideTopBannerAd: this.helpers.toBoolean(this.rootModel.get('fields.hideTopBannerAd')),\n                addRelUgc: this.helpers.toBoolean(this.rootModel.get('fields.addRelUgc')),\n                addRelSponsored: this.helpers.toBoolean(this.rootModel.get('fields.addRelSponsored')),\n                addRelNoFollow: this.helpers.toBoolean(this.rootModel.get('fields.addRelNoFollow'))\n            },\n            enableShareableArticle\n        }, true);\n        return markup;\n    }\n\n}\n","export class ArticleDates {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.dom = {\n            'fields.published': {\n                date: null,\n                time: null\n            },\n            'fields.hidefromfp_time': {\n                date: null,\n                time: null\n            },\n            'fields.calendar_start_date': {\n                date: null,\n                time: null\n            },\n            'fields.calendar_end_date': {\n                date: null,\n                time: null\n            }\n        };\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Published date</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium\">\n                    <label for=\"publishedDate\">Date</label>\n                    <input type=\"date\" id=\"publishedDate\" name=\"fields.published\" value=\"{{ datetime.publishDate }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium\">\n                    <label for=\"publishedTime\">Time</label>\n                    <input type=\"time\" id=\"publishedTime\" name=\"fields.published\" value=\"{{ datetime.publishTime }}\">\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Hide on front after</h4>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small\">\n                    <label for=\"hidefromfp_timeDate\">Date</label>\n                    <input type=\"date\" id=\"hidefromfp_timeDate\" name=\"fields.hidefromfp_time\" value=\"{{ datetime.hideDate }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small\">\n                    <label for=\"hidefromfp_timeTime\">Time</label>\n                    <input type=\"time\" id=\"hidefromfp_timeTime\" name=\"fields.hidefromfp_time\" value=\"{{ datetime.hideTime }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-medium\">\n                    <p class=\"lab-info\">\n                        This date affects automatic articles on front pages.\n                    </p>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Calendar dates</h4>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium\">\n                    <label for=\"calendar_start_date-date\">From Date</label>\n                    <input type=\"date\" id=\"calendar_start_date-date\" name=\"fields.calendar_start_date\" value=\"{{ datetime.calendarFromDate }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium\">\n                    <label for=\"calendar_start_date-time\">From Time</label>\n                    <input type=\"time\" id=\"calendar_start_date-time\" name=\"fields.calendar_start_date\" value=\"{{ datetime.calendarFromTime }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small\">\n                    <label for=\"calendar_end_date-date\">To Date</label>\n                    <input type=\"date\" id=\"calendar_end_date-date\" name=\"fields.calendar_end_date\" value=\"{{ datetime.calendarToDate }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small\">\n                    <label for=\"calendar_end_date-time\">To Time</label>\n                    <input type=\"time\" id=\"calendar_end_date-time\" name=\"fields.calendar_end_date\" value=\"{{ datetime.calendarToTime }}\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-medium\">\n                    <p class=\"lab-info\">\n                        The calendar dates are used by elements like <span class=\"lab-label\">Article Calendar</span> and <span class=\"lab-label\">Article Scroller</span> to limit visibility to a date range.\n                    </p>\n                </div>\n            </div>\n\n        </div>`;\n    }\n\n    // {\"published\":1638362580,\"hidefromfp_time\":1750153380}}]\n    // {\"calendar_start_date\":\"2022-03-01T03:00:00Z\"}\n    // {\"calendar_end_date\":\"2030-03-01T11:59:00Z\"}\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Dates'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.published': {\n                node: 'fields.published',\n                transformer: (value, pathInfo) => this.dateTransformer(pathInfo)\n            },\n            'fields.hidefromfp_time': {\n                node: 'fields.hidefromfp_time',\n                transformer: (value, pathInfo) => this.dateTransformer(pathInfo)\n            },\n            'fields.calendar_start_date': {\n                node: 'fields.calendar_start_date',\n                transformer: (value, pathInfo) => this.dateTransformer(pathInfo, false)\n            },\n            'fields.calendar_end_date': {\n                node: 'fields.calendar_end_date',\n                transformer: (value, pathInfo) => this.dateTransformer(pathInfo, false)\n            }\n        };\n    }\n\n    dateTransformer(pathInfo, toTimestamp = true) {\n        const date = this.dom[pathInfo.node].date.value;\n        const time = this.dom[pathInfo.node].time.value;\n        if (!date) { return ''; }\n        if (toTimestamp) {\n            return this.getTimestamp(date, time);\n        }\n        return `${ new Date(`${ date }T${ time || '00:00' }`).toISOString().split('.')[0] }Z`;\n    }\n\n    onMarkup() {\n        const datetime = {\n            publishDate: '',\n            publishTime: '',\n            hideDate: '',\n            hideTime: '',\n            calendarFromDate: '',\n            calendarFromTime: '',\n            calendarToDate: '',\n            calendarToTime: ''\n        };\n\n        const published = this.rootModel.get('fields.published'); // timestamp\n        const hidefromfp_time = this.rootModel.get('fields.hidefromfp_time'); // timestamp\n        const calendar_start_date = this.rootModel.get('fields.calendar_start_date'); // ISO-date\n        const calendar_end_date = this.rootModel.get('fields.calendar_end_date'); // ISO-date\n\n        if (published) {\n            const dt = this.getDateTime(published);\n            datetime.publishDate = dt.date;\n            datetime.publishTime = dt.time;\n        }\n        if (hidefromfp_time) {\n            const dt = this.getDateTime(hidefromfp_time);\n            datetime.hideDate = dt.date;\n            datetime.hideTime = dt.time;\n        }\n        if (calendar_start_date) {\n            const timestamp = new Date(calendar_start_date).valueOf() / 1000;\n            const dt = this.getDateTime(timestamp);\n            datetime.calendarFromDate = dt.date;\n            datetime.calendarFromTime = dt.time;\n        }\n        if (calendar_end_date) {\n            const timestamp = new Date(calendar_end_date).valueOf() / 1000;\n            const dt = this.getDateTime(timestamp);\n            datetime.calendarToDate = dt.date;\n            datetime.calendarToTime = dt.time;\n        }\n\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            datetime\n        }, true);\n        this.dom['fields.published'].date = markup.querySelector('#publishedDate');\n        this.dom['fields.published'].time = markup.querySelector('#publishedTime');\n        this.dom['fields.hidefromfp_time'].date = markup.querySelector('#hidefromfp_timeDate');\n        this.dom['fields.hidefromfp_time'].time = markup.querySelector('#hidefromfp_timeTime');\n        this.dom['fields.calendar_start_date'].date = markup.querySelector('#calendar_start_date-date');\n        this.dom['fields.calendar_start_date'].time = markup.querySelector('#calendar_start_date-time');\n        this.dom['fields.calendar_end_date'].date = markup.querySelector('#calendar_end_date-date');\n        this.dom['fields.calendar_end_date'].time = markup.querySelector('#calendar_end_date-time');\n\n        return markup;\n    }\n\n    getTimestamp(date, time) {\n        const d = new Date(`${ date  }T${  time || '00:00'  }Z`);\n        const localDate = new Date(d.valueOf() + d.getTimezoneOffset() * 60000);\n        return localDate.getTime() / 1000;\n    }\n\n    getDateTime(timestamp) {\n        const date = new Date(timestamp * 1000);\n        let month = date.getMonth() + 1;\n        if (month < 10) month = `0${ month }`;\n        let day = date.getDate();\n        if (day < 10) day = `0${ day }`;\n        let hour = date.getHours();\n        if (hour < 10) hour = `0${ hour }`;\n        let minute = date.getMinutes();\n        if (minute < 10) minute = `0${ minute }`;\n\n        return {\n            date: `${ date.getFullYear()  }-${  month  }-${  day }`, // yyyy-mm-dd\n            time: `${ hour  }:${  minute }` // hh:mm\n        };\n    }\n\n}\n","export class ArticleGeneralTeaser {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.setter = params.setter;\n        this.log = params.log;\n        this.enabled = true;\n        this.dom = {\n            crops: null,\n            teasers: {\n                kicker: null,\n                teaserTitle: null,\n                teaserSubtitle: null\n            },\n            tagHandlerContainer: null,\n            tagHandler: null,\n            sectionElement: null,\n            focusTagInput: false\n        };\n        this.models = {\n            pano: null,\n            height: null\n        };\n        const ar = this.api.v1.config.get('image.defaultAspectRatio') || 0.5;\n        this.cropContainer = {\n            panow: 270,\n            panoh: Math.round(ar * 270),\n            heightw: 130,\n            heighth: 210\n        };\n        if (this.cropContainer.panoh > 150) {\n            this.cropContainer.panoh = 150;\n            this.cropContainer.panow = Math.round(150 / ar);\n        }\n\n        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/view/css/apps/generalTags.css');\n        this.bindingsHandler = this.onMarkup.bind(this);\n\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-space-below-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none\">Front Crop & Teaser</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\" style=\"min-height: 220px;\">\n                    <div data-placeholder=\"lab-frontcrops\">\n                        <!-- Children replaced -->\n                    </div>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right\">\n                    <input type=\"button\" id=\"btn-remove-crops\" value=\"Remove image\">\n                    <label>\n                        <span class=\"lab-btn\">Upload image</span>\n                        <input type=\"file\" id=\"btn-upload-image\" value=\"Upload image\" class=\"lab-hidden\">\n                    </label>\n                    <input type=\"button\" id=\"btn-change-crops\" value=\"Change image\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-large\">\n                    <label for=\"teaser-kicker\">Kicker used on front pages</label>\n                    <input type=\"text\" name=\"fields.teaserKicker\" id=\"teaser-kicker\" value=\"{{{ fields.teaserKicker }}}\" placeholder=\"${ this.getPlaceholderText('teaserKicker') }\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label>Title used on front pages</label>\n                    <span class=\"lab-link\" id=\"copy-title-btn\" style=\"float: right;\">Copy title</span>\n                    <p class=\"lab-input-text\" id=\"teaser-title\" data-input-type-text data-input-key=\"fields.teaserTitle\" placeholder=\"Teaser Title ...\">{{{ fields.teaserTitle }}}</p>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label>Subtitle used on front pages</label>\n                    <span class=\"lab-link\" id=\"copy-subtitle-btn\" style=\"float: right;\">Copy subtitle</span>\n                    <p class=\"lab-input-text\" id=\"teaser-subtitle\" data-input-type-text data-input-key=\"fields.teaserSubtitle\" placeholder=\"Teaser Subtitle ...\">{{{ fields.teaserSubtitle }}}</p>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <p class=\"lab-info\">Front-page versions are used when the article is added to a page as a teaser.</p>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid lab-space-below-small\">\n                <h2 class=\"lab-title lab-grid-large-12\">Tags <span class=\"lab-btn lab-xsmall lab-generate lab-busy-top\" id=\"suggest-btn-tags\" style=\"float:right; position:relative; font-size: 1rem;\">Generate new tags</span></h2>\n                <div class=\"lab-grid lab-grid-large-12\" data-handler=\"tagHandler\"></div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid lab-space-below-large\">\n                <div class=\"lab-formgroup-item lab-grid-large-12\">\n                    <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none\">Section</h2>\n                    <select name=\"primaryTags.section\" id=\"sections\">\n                        <option value=\"\">Select Section</option>\n                        {{ #sections }}\n                        <option value=\"{{ name }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /sections }}\n                    </select>\n                    <p id=\"section-label\">{{ #section }}Selected section: <strong>{{ section }}</strong>{{ /section }}{{ ^section }}No section selected{{ /section }}</p>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid lab-space-below-large\">\n                <br><br><br><br>\n                <!-- space to allow tag-suggestions ... -->\n            </div>\n\n            \n \n        </div>`;\n\n        this.uploader = null;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Front Crop & Teaser'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.teaserKicker': {\n                node: 'fields.teaserKicker',\n                transformer: (value, pathInfo) => {\n                    const v = value.trim();\n                    return v === this.rootModel.get('fields.kicker') ? '' : v;\n                }\n            },\n            'fields.teaserSubtitle': {\n                node: 'fields.teaserSubtitle',\n                transformer: (value, pathInfo) => {\n                    const v = value.trim();\n                    return v === this.rootModel.get('fields.subtitle') ? '' : v;\n                }\n            },\n            'fields.teaserTitle': {\n                node: 'fields.teaserTitle',\n                transformer: (value, pathInfo) => {\n                    const v = value.trim();\n                    return v === this.rootModel.get('fields.title') ? '' : v;\n                }\n            }\n        };\n    }\n\n    getPlaceholderText(field) {\n        return `Click to add ${ field }`;\n    }\n\n    onMarkup() {\n        const section = (this.rootModel.get('primaryTags.section') || '').toLowerCase();\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                teaserKicker: this.api.v1.util.string.stripTags(this.rootModel.get('fields.teaserKicker') || this.rootModel.get('fields.kicker')),\n                teaserSubtitle: this.rootModel.get('fields.teaserSubtitle') || this.api.v1.util.string.stripTags(this.rootModel.get('fields.subtitle') || this.getPlaceholderText('teaserSubtitle')),\n                teaserTitle: this.rootModel.get('fields.teaserTitle') || this.api.v1.util.string.stripTags(this.rootModel.get('fields.title') || this.getPlaceholderText('teaserTitle'))\n            },\n            sections: (this.api.v1.config.get('tags.section') || []).map((name) => ({ name: name.toLowerCase(), selected: name.toLowerCase() === section })),\n            section,\n            tags: this.rootModel.get('tags')\n        }, true);\n        this.dom.crops = markup.querySelector('[data-placeholder=\"lab-frontcrops\"]');\n\n        this.api.v1.article.frontcrop.get().then((data) => {\n            this.setFrontCrops(data, true);\n        });\n\n        const btnChange = markup.querySelector('#btn-change-crops');\n        btnChange.addEventListener('click', (event) => {\n            this.changeCrops();\n        }, false);\n\n        const btnRemove = markup.querySelector('#btn-remove-crops');\n        btnRemove.addEventListener('click', (event) => {\n            this.removeCrops();\n        }, false);\n\n        const btnUpload = markup.querySelector('#btn-upload-image');\n        btnUpload.addEventListener('change', (event) => {\n            this.uploadFiles(event.target.files);\n        }, false);\n\n        this.dom.teasers.kicker = markup.querySelector('#teaser-kicker');\n        this.dom.teasers.kicker.addEventListener('input', (event) => {\n            const v = this.dom.teasers.kicker.value.trim();\n            const rootValue = this.rootModel.get('fields.kicker');\n            if (rootValue === v) {\n                this.dom.teasers.kicker.classList.add('lab-disabled');\n            } else {\n                this.dom.teasers.kicker.classList.remove('lab-disabled');\n            }\n        }, false);\n        this.dom.teasers.kicker.dispatchEvent(new Event('input'));\n\n        this.dom.teasers.teaserTitle = markup.querySelector('#teaser-title');\n        this.dom.teasers.teaserSubtitle = markup.querySelector('#teaser-subtitle');\n        this.updateDisabledState('teaserTitle', !!this.rootModel.get('fields.teaserTitle'), 'title');\n        this.updateDisabledState('teaserSubtitle', !!this.rootModel.get('fields.teaserSubtitle'), 'subtitle');\n\n        const btnCopyTitle = markup.querySelector('#copy-title-btn');\n        btnCopyTitle.addEventListener('click', (event) => {\n            // Copy title from article to teaser. Use innerText to remove rich text. If empty, add placeholder text.\n            this.dom.teasers.teaserTitle.innerHTML = this.rootModel.get('fields.title') || '';\n            this.dom.teasers.teaserTitle.innerHTML = this.dom.teasers.teaserTitle.innerText;\n            this.setter('fields.teaserTitle', this.dom.teasers.teaserTitle.innerHTML);\n            if (this.dom.teasers.teaserTitle.innerHTML === '') {\n                this.dom.teasers.teaserTitle.innerHTML = this.getPlaceholderText('teaserTitle');\n            }\n            this.updateDisabledState('teaserTitle', false, 'title');\n        }, false);\n        const btnCopySubtitle = markup.querySelector('#copy-subtitle-btn');\n        btnCopySubtitle.addEventListener('click', (event) => {\n            // Copy subtitle from article to teaser. Use innerText to remove rich text. If empty, add placeholder text.\n            this.dom.teasers.teaserSubtitle.innerHTML = this.rootModel.get('fields.subtitle') || '';\n            this.dom.teasers.teaserSubtitle.innerHTML = this.dom.teasers.teaserSubtitle.innerText;\n            this.setter('fields.teaserSubtitle', this.dom.teasers.teaserSubtitle.innerHTML);\n            if (this.dom.teasers.teaserSubtitle.innerHTML === '') {\n                this.dom.teasers.teaserSubtitle.innerHTML = this.getPlaceholderText('teaserSubtitle');\n            }\n            this.updateDisabledState('teaserSubtitle', false, 'subtitle');\n        }, false);\n\n        this.api.v1.apps.start('TextEdit').then((textTool) => {\n            this.setupRichTextEditing(textTool, markup);\n        }).catch((error) => {\n            console.log(`Error loading TextEdit-app: ${ error }`);\n        });\n\n        const method = lab_api.v1.ns.get('textAssistant.fetchByName');\n        const btnTags = markup.querySelector('#suggest-btn-tags');\n        if (method) {\n            btnTags.addEventListener('click', (event) => {\n                btnTags.classList.add('lab-busy');\n                method('tags').then((result) => {\n                    if (result.tags) {\n                        if (result && Array.isArray(result.tags)) {\n                            this.api.v1.util.tags.set(result.tags);\n                            this.log({\n                                type: 'data',\n                                app: this.constructor.name,\n                                path: 'tags'\n                            });\n                        } else {\n                            console.log('Error: No array returned ...');\n                        }\n                    }\n                    btnTags.classList.remove('lab-busy');\n                }).catch((error) => {\n                    btnTags.classList.remove('lab-busy');\n                    console.log('error: ', error);\n                });\n            }, false);\n        } else {\n            btnTags.classList.add('lab-disabled');\n        }\n\n        const tagHandlerContainer = markup.querySelector('[data-handler=\"tagHandler\"]');\n        const sectionElement = markup.querySelector('[name=\"primaryTags.section\"]');\n        const sectionLabel = markup.querySelector('#section-label');\n\n        if (this.dom.tagHandlerContainer) { this.dom.tagHandlerContainer.replaceWith(tagHandlerContainer); }\n        if (this.dom.sectionElement) { this.dom.sectionElement.replaceWith(sectionElement); }\n        if (this.dom.sectionLabel) { this.dom.sectionLabel.replaceWith(sectionLabel); }\n\n        this.dom.tagHandlerContainer = tagHandlerContainer;\n        this.dom.sectionElement = sectionElement;\n        this.dom.sectionLabel = sectionLabel;\n\n        this.setupSections();\n        this.setupTags();\n\n        return markup;\n    }\n\n    onDisplayed(element) {\n        this.addBindings();\n    }\n\n    onHidden(element) {\n        this.removeBindings();\n    }\n\n    addBindings() {\n        this.api.v1.model.bindings.bind(this.rootModel, 'tags', this.bindingsHandler);\n        this.api.v1.model.bindings.bind(this.rootModel, 'primaryTags.section', this.bindingsHandler);\n    }\n\n    removeBindings() {\n        this.api.v1.model.bindings.unbind(this.rootModel, 'tags', this.bindingsHandler);\n        this.api.v1.model.bindings.unbind(this.rootModel, 'primaryTags.section', this.bindingsHandler);\n    }\n\n    async setupTags() {\n        if (this.dom.tagHandler) {\n            this.dom.tagHandlerContainer.appendChild(this.dom.tagHandler);\n            return;\n        }\n\n        // Add UI to to add and remove tags from current article\n        const tagHandler = await this.api.v1.util.tags.ui({\n            callbacks: {\n\n                // (Promise) User has selected a tag. Add it to current article\n                add: (tag) => {\n                    const inputEl = this.dom.tagHandler.querySelector('input');\n                    if (inputEl) {\n                        setTimeout(() => { inputEl.focus(); }, 100);\n                    }\n                    this.log({\n                        type: 'data',\n                        app: this.constructor.name,\n                        path: 'tags'\n                    });\n                    return this.api.v1.util.tags.add(tag);\n                },\n\n                // (Promise) User has deleted a tag. Remove it from current article\n                remove: (tag) => {\n                    const inputEl = this.dom.tagHandler.querySelector('input');\n                    if (inputEl) {\n                        setTimeout(() => { inputEl.focus(); }, 100);\n                    }\n                    this.log({\n                        type: 'data',\n                        app: this.constructor.name,\n                        path: 'tags'\n                    });\n                    return this.api.v1.util.tags.remove(tag);\n                }\n            },\n\n            // If true, the tag-handler will return an object with the dom-element and a method to update the list of tags the UI will display\n            returnObject: true,\n\n            // Custom css classes\n            // css: {\n            //     container: 'container-css',\n            //     search: 'search-css',\n            //     suggestions: 'suggestions-css'\n            // },\n\n            // List of current tags\n            tags: this.rootModel.get('tags'),\n\n            // A value of true will display number of times this tag has been used ...\n            detailedSearch: true,\n\n            // Placeholder for the input field to search tags\n            placeholder: 'Add tag ...'\n        });\n        this.dom.tagHandler = tagHandler.element;\n        this.api.v1.model.bindings.bind(this.rootModel, 'tags', (target, path, value) => {\n            tagHandler.updateTags(value);\n        });\n        this.dom.tagHandlerContainer.appendChild(this.dom.tagHandler);\n    }\n\n    setupSections() {\n        this.dom.sectionElement.addEventListener('change', (event) => {\n            if (!this.dom.sectionElement.value) { return; }\n            const currentSection = (this.rootModel.get('primaryTags.section') || '').toLowerCase();\n            this.rootModel.set('primaryTags.section', this.dom.sectionElement.value);\n            if (currentSection && this.dom.sectionElement.value !== currentSection) {\n                this.api.v1.util.tags.remove(currentSection);\n            }\n            this.api.v1.util.tags.add(this.dom.sectionElement.value);\n            this.log({\n                type: 'data',\n                app: this.constructor.name,\n                path: 'primaryTags.section'\n            });\n        }, false);\n    }\n\n    updateDisabledState(field, forceClean = false, compareField = null) {\n        if (!this.dom.teasers[field]) { return; }\n        const placeholderValue = this.getPlaceholderText(field);\n        if (!forceClean && (this.rootModel.get(`fields.${ compareField || field }`) === this.dom.teasers[field].innerHTML || this.dom.teasers[field].innerHTML === placeholderValue)) {\n            this.dom.teasers[field].classList.add('lab-disabled');\n        } else {\n            this.dom.teasers[field].classList.remove('lab-disabled');\n        }\n    }\n\n    setupRichTextEditing(textTool, markup) {\n        for (const element of markup.querySelectorAll('.lab-input-text')) {\n            if (element && element instanceof HTMLElement) {\n                const key = element.getAttribute('data-input-key') || 'no-key';\n                this.setupRichTextEditingForElement(textTool, markup, element, key);\n            }\n        }\n    }\n\n    setupRichTextEditingForElement(textTool, markup, element, key) {\n        const contentdata = {};\n        lab_api.v1.util.object.set(key, this.rootModel.get(key), contentdata);\n        textTool.register({\n            element,\n            simulatedData: {\n                type: 'article',\n                path: '',\n                contentdata\n            },\n            toolSettings: {\n                key,\n                inlineOnly: true,\n                displayCharCount: false,\n                displaySelectionLength: false,\n                displayWordCount: false,\n                selectTextOnStart: true,\n                placeholder: this.getPlaceholderText(key.replace('fields.', '')),\n                attributes: {\n                    text_size: {\n                        active: false\n                    }\n                }\n            },\n            callbacks: {\n                ended: (theKey, theValue) => {\n                    this.setter(theKey, theValue);\n\n                    this.log({\n                        type: 'data',\n                        app: this.constructor.name,\n                        path: theKey\n                    });\n\n                    // Page-node needs 'fields.allowRichTextTeasers' for Labrador API to return rich text ...\n                    this.rootModel.set('fields.allowRichTextTeasers', '1');\n                    this.updateDisabledState(theKey.replace('fields.', ''), false, theKey.replace('fields.teaser', '').toLowerCase());\n                },\n                started: (tool, theKey) => {\n                    this.updateDisabledState(theKey.replace('fields.', ''), true);\n                }\n            },\n            menuSettings: {\n                container: markup,\n                items: {\n                    textColor: {\n                        group: 'g1',\n                        inheritPath: 'menu/buttons/textColor.json'\n                    },\n                    textBackgroundColor: {\n                        group: 'g1',\n                        inheritPath: 'menu/buttons/textBackgroundColor.json'\n                    },\n                    bold: {\n                        group: 'g2',\n                        icon: 'labicon-text_bold',\n                        callback: 'toggleAttribute',\n                        key: 'font_weight',\n                        attributes: {\n                            class: 'font-weight-bold'\n                        },\n                        value: false,\n                        onValue: 'font-weight-bold',\n                        offValue: false,\n                        bindToSelection: 'font_weight',\n                        title: 'Font weight - Bold',\n                        hotkeys: [{\n                            key: 'B',\n                            controlkeys: ['labCtrlKey'],\n                            preventDefault: true,\n                            overrideDisable: true\n                        }]\n                    },\n                    italic: {\n                        group: 'g2',\n                        icon: 'labicon-text_italic',\n                        callback: 'toggleAttribute',\n                        key: 'italic',\n                        attributes: {\n                            class: 'italic'\n                        },\n                        value: false,\n                        onValue: 'italic',\n                        offValue: false,\n                        bindToSelection: 'italic',\n                        title: 'Italic',\n                        hotkeys: [{\n                            key: 'i',\n                            controlkeys: ['labCtrlKey'],\n                            preventDefault: true,\n                            overrideDisable: true\n                        }]\n                    },\n                    reset: {\n                        group: 'g4',\n                        icon: 'labicon-reset_style',\n                        callback: 'reset',\n                        title: 'Remove textformatting in selection for viewport'\n                    }\n                }\n            }\n        });\n    }\n\n    uploadFiles(filelist) {\n        this.dom.crops.classList.add('lab-busy');\n        if (!this.uploader) {\n            this.uploader = new this.api.v1.tool.utils.ImageUploader({\n                callbacks: {\n                    uploadStart: (item) => {},\n                    uploadProgress: (item) => {},\n                    uploadFinished: (item) => { this.setFrontCropFromModel(null, item.result.file.success[0].id); },\n                    uploadFailed: (item) => { this.dom.crops.classList.remove('lab-busy'); console.log('uploadFailed: ', item); },\n                    uploadFinishedAll: (item) => {}\n                }\n            });\n        }\n        if (!this.hasValidFile(filelist)) {\n            this.dom.crops.classList.remove('lab-busy');\n            Sys.logger.warn('[uploadFiles] No valid image-file found. Upload cancelled.');\n            return;\n        }\n        this.uploader.upload({ files: filelist });\n    }\n\n    hasValidFile(filelist) {\n        if (!this.uploader) { return false; }\n        for (const file of [...filelist]) {\n            if (this.uploader.validateFile(file)) { return true; }\n        }\n        return false;\n    }\n\n    removeCrops() {\n        this.dom.crops.classList.add('lab-busy');\n        this.api.v1.article.frontcrop.clear();\n        this.api.v1.model.delete(this.models.pano);\n        this.api.v1.model.delete(this.models.height);\n        this.models.pano = null;\n        this.models.height = null;\n        this.setFrontCrops(null);\n    }\n\n    changeCrops() {\n        this.api.v1.collection.display({\n            name: 'MediaImagesThisPage',\n            modal: true,\n            skipCache: true,\n            options: {\n                label: 'Images from this page',\n                clickHandler: (model, element) => {\n                    this.setFrontCropFromModel(model);\n                },\n                navigation: [\n                    {\n                        label: 'Display All images',\n                        name: 'MediaImages',\n                        modal: true,\n                        skipCache: true,\n                        options: {\n                            label: 'All images',\n                            archiveActive: false,\n                            clickHandler: (model, element) => {\n                                this.setFrontCropFromModel(model);\n                            },\n                            navigation: [\n                                {\n                                    label: 'Display This page',\n                                    name: 'MediaImagesThisPage',\n                                    modal: true,\n                                    skipCache: true\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n\n    async setFrontCropFromModel(model, instance_of) {\n        this.dom.crops.classList.add('lab-busy');\n        const panoData = this.api.v1.util.object.merge(this.defaultCropData(), {\n            contentdata: {\n                instance_of: instance_of || model.get('instance_of'),\n                fields: {\n                    metadata_key: 'fcp'\n                }\n            }\n        });\n        const heightData = this.api.v1.util.object.merge(this.defaultCropData(), {\n            contentdata: {\n                instance_of: instance_of || model.get('instance_of'),\n                fields: {\n                    metadata_key: 'fch'\n                }\n            },\n            type: 'image'\n        });\n        if (!model) {\n            this.setFrontCropFromData(panoData, heightData);\n            return;\n        }\n\n        this.validateCropModel(model).then((id) => {\n            panoData.contentdata.instance_of = id;\n            heightData.contentdata.instance_of = id;\n            this.setFrontCropFromData(panoData, heightData);\n        });\n    }\n\n    // (Promise)\n    // If the image is external it will need to be downloaded by Labrador.\n    // The media-collection should set nessesary data on the model for Labrador to fetch the external image.\n    validateCropModel(model) {\n        return new Promise((resolve, reject) => {\n            if (model.get('instance_of')) {\n                resolve(model.get('instance_of'));\n            } else {\n                this.api.v1.app.create(model).then((m) => {\n                    resolve(model.get('instance_of'));\n                }).catch((error) => {\n                    reject(new Error('Cannot create instance_of-id.'));\n                });\n            }\n        });\n    }\n\n    async setFrontCropFromData(pano, height) {\n        await this.api.v1.article.frontcrop.set({\n            pano,\n            height\n        });\n        const panoData = { ...pano };\n        const heightData = { ...height };\n\n        this.models.pano = null;\n        this.models.height = null;\n\n        this.setFrontCrops({\n            pano: panoData,\n            height: heightData\n        });\n    }\n\n    defaultCropData() {\n        return {\n            type: 'image',\n            contentdata: {\n                fields: {\n                    croph: 100,\n                    cropw: 100,\n                    x: 0,\n                    y: 0\n                }\n            }\n        };\n    }\n\n    setFrontCrops(data, skipLog = false) {\n        const cropData = data || {};\n        const panoData = cropData.pano || this.defaultCropData();\n        const heightData = cropData.height || this.defaultCropData();\n        panoData.contentdata.fields.metadata_key = 'fcp';\n        heightData.contentdata.fields.metadata_key = 'fch';\n\n        if (!this.models.pano) {\n            this.models.pano = this.getCropModel(panoData.contentdata.id, 'fcp');\n        }\n        if (!this.models.height) {\n            this.models.height = this.getCropModel(heightData.contentdata.id, 'fch');\n        }\n\n        if (!this.models.pano && panoData.contentdata.instance_of) {\n            this.models.pano = this.api.v1.model.create.view(panoData, { parentModel: this.rootModel });\n        }\n        if (!this.models.height && heightData.contentdata.instance_of) {\n            this.models.height = this.api.v1.model.create.view(heightData, { parentModel: this.rootModel });\n        }\n\n        this.updateCropElements(!!panoData.contentdata.instance_of && !!heightData.contentdata.instance_of);\n\n        // Add to UI log:\n        if (!skipLog) {\n            this.log({\n                type: 'frontcrop',\n                app: this.constructor.name,\n                datatype: this.models.pano ? 'added' : 'removed'\n            });\n        }\n    }\n\n    getCropModel(id, type) {\n        let model = null;\n        if (id) {\n            model = this.api.v1.model.query.getModelById(id);\n        }\n        if (model) {\n            return model;\n        }\n        const models = this.api.v1.model.query.getModelsByType('image').filter((m) => m.get('fields.metadata_key') === type);\n        return models[0] || null;\n    }\n\n    updateCropElements(hasData) {\n        this.dom.crops.innerHTML = '';\n        this.dom.crops.appendChild(this.createCropElements(hasData));\n        this.dom.crops.classList.remove('lab-busy');\n    }\n\n    createCropElements(hasData) {\n        if (!hasData) {\n            return this.api.v1.util.dom.renderTemplate(`<div class=\"lab-grid lab-valign-center\">\n                <div class=\"crop-pano lab-grid-large-7 lab-grid lab-align-center\">\n                    <div class=\"lab-empty-placeholder lab-color-light lab-bordered\" style=\"width: ${ this.cropContainer.panow }px; height: ${ this.cropContainer.panoh }px; padding-top: 10px;\">\n                        <div class=\"lab-inner\">\n                            <div class=\"lab-icon-large labicon-images\"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"crop-height lab-grid-large-5 lab-grid lab-align-center\">\n                    <div class=\"lab-empty-placeholder lab-color-light lab-bordered\" style=\"width: ${ this.cropContainer.heightw }px; height: ${ this.cropContainer.heighth }px; padding-top: 50px;\">\n                        <div class=\"lab-inner\">\n                            <div class=\"lab-icon-large labicon-images\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>`, {}, true);\n        }\n        const imageServer = this.api.v1.properties.get('image_server');\n        const pano = {\n            cropw: this.models.pano.get('fields.cropw') || 100,\n            croph: this.models.pano.get('fields.croph') || 100,\n            x: this.models.pano.get('fields.x') || 0,\n            y: this.models.pano.get('fields.y') || 0\n        };\n        const height = {\n            cropw: this.models.height.get('fields.cropw') || 100,\n            croph: this.models.height.get('fields.croph') || 100,\n            x: this.models.height.get('fields.x') || 0,\n            y: this.models.height.get('fields.y') || 0\n        };\n        const el = this.api.v1.util.dom.renderTemplate(`<div class=\"lab-grid lab-valign-center\">\n            <div class=\"crop-pano lab-grid-large-7 lab-grid lab-align-center\">\n                <span style=\"display:inline-block;\"><img src=\"${ imageServer }/${ this.models.pano.get('instance_of') }.webp?imageId=${ this.models.pano.get('instance_of') }&width=${ this.cropContainer.panow }&height=${ this.cropContainer.panoh }&${ Object.keys(pano).map((key) => `${ key }=${ pano[key] }`).join('&') }\"></span>\n            </div>\n            <div class=\"crop-height lab-grid-large-5 lab-align-center lab-grid\">\n                <span style=\"display:inline-block;\"><img src=\"${ imageServer }/${ this.models.height.get('instance_of') }.webp?imageId=${ this.models.height.get('instance_of') }&width=${ this.cropContainer.heightw }&height=${ this.cropContainer.heighth }&${ Object.keys(height).map((key) => `${ key }=${ height[key] }`).join('&') }\"></span>\n            </div>\n        </div>`, {}, true);\n        const panoImage = el.querySelector('.crop-pano img');\n        panoImage.addEventListener('click', (event) => { this.editCrop(panoImage, true); }, false);\n        const heightImage = el.querySelector('.crop-height img');\n        heightImage.addEventListener('click', (event) => { this.editCrop(heightImage, false); }, false);\n        return el;\n    }\n\n    editCrop(element, isPano) {\n        const model = isPano ? this.models.pano : this.models.height;\n        const offset = this.api.v1.viewport.getOffset();\n        const crop = {\n            x: model.get('fields.x') || 0,\n            y: model.get('fields.y') || 0,\n            cropw: model.get('fields.cropw') || 100,\n            croph: model.get('fields.croph') || 100\n        };\n        const keyEventsIds = [];\n        const endCallback = (theEditor) => {\n            while (keyEventsIds.length > 0) {\n                this.api.v1.util.keyEventHandler.remove(keyEventsIds.pop());\n            }\n\n            if (theEditor) {\n                const serializedCrop = theEditor.end();\n                model.set('fields.x', serializedCrop.x);\n                model.set('fields.y', serializedCrop.y);\n                model.set('fields.cropw', serializedCrop.cropw);\n                model.set('fields.croph', serializedCrop.croph);\n                this.log({\n                    type: 'frontcrop',\n                    app: this.constructor.name,\n                    datatype: 'modified'\n                });\n            }\n            this.updateCropElements(true);\n        };\n        const editor = new this.api.v1.tool.utils.ImageEditor({\n            modal: false,\n            container: {\n                width: isPano ? 270 : 130,\n                height: isPano ? 129 : 210,\n                element: element.parentElement,\n                cssList: ['lab-modal-overlay']\n            },\n            offset: {\n                y: window.scrollY - offset.top\n            },\n            imageElement: {\n                element\n            },\n            crop,\n            tools: {\n                resize: {\n                    active: false\n                }\n            },\n            imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ model.get('instance_of') }`\n        }, {\n            end: () => {\n                endCallback(editor);\n            }\n        });\n        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({\n            key: 'Escape',\n            callback: (event) => {\n                editor.end();\n                endCallback();\n            },\n            stopPropagation: true,\n            preventDefault: true,\n            overrideDisable: true\n        }));\n        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({\n            key: 'S',\n            controlkeys: ['labCtrlKey'],\n            callback: (event) => {\n                endCallback(editor);\n            },\n            stopPropagation: true,\n            preventDefault: true,\n            overrideDisable: true\n        }));\n\n    }\n\n}\n","export class ArticleNotes {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12\">Notes</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12\">\n                    <label for=\"article_notes\">Notes for this article. Only visible in the editor</label>\n                    <textarea id=\"article_notes\" name=\"fields.articleNotes\" style=\"height: 480px;\" placeholder=\"Info for editors, front-desk or other journalists ...\">{{{ fields.articleNotes }}}</textarea>\n                </div>\n            </div>            \n\n        </div>`;\n    }\n\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Notes'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.articleNotes': { node: 'fields.articleNotes' }\n        };\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                articleNotes: this.rootModel.get('fields.articleNotes')\n            }\n        }, true);\n        return markup;\n    }\n\n}\n","export class ArticleSite {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-large\">Site for this article</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"site_id\">Select site</label>\n                    <select name=\"site_id\" id=\"site_id\">\n                        {{#sites}}\n                        <option value=\"{{value}}\" {{#selected}}selected{{/selected}}>{{name}}</option>\n                        {{/sites}}\n                    </select>\n                </div>\n            </div>\n        </div>`;\n    }\n\n    onAside() {\n        return {\n            section: 'Advanced',\n            label: 'Site'\n        };\n    }\n\n    onPaths() {\n        return {\n            site_id: { node: 'site_id', validator: 'notEmpty', suggestReload: true }\n        };\n    }\n\n    onMarkup() {\n        const siteId = lab_api.v1.site.getSite().id;\n        const sites = this.api.v1.user.getSites().map((site) => ({ value: site.id, name: site.display_name, selected: site.id === siteId }));\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, { sites }, true);\n        return markup;\n    }\n\n}\n","export class ArticleStyling {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.dom = {};\n        this.embeddable = this.api.v1.config.get('embeddable.active');\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-large\">Styling</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-large\">\n                    <label for=\"article_style\">Select style for this article</label>\n                    <select name=\"fields.articleStyle\" id=\"article_style\">\n                        <option value=\"\">Default style</option>\n                        {{ #articleStyles }}\n                        <option value=\"{{ value }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /articleStyles }}\n                    </select>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-large\">\n                    <label for=\"pageHeaderDisplay\">Page header display</label>\n                    <select name=\"fields.pageHeaderDisplay\" id=\"pageHeaderDisplay\">\n                        <option value=\"\">Default display</option>\n                        {{ #pageHeaderDisplays }}\n                         <option value=\"{{ value }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /pageHeaderDisplays }}\n                    </select>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-large\">\n                    <label for=\"bodytext_width\">Select width for this article's body text</label>\n                    <select name=\"fields.bodytextWidth\" id=\"bodytext_width\">\n                        <option value=\"\">Default style</option>\n                        {{ #bodytextWidths }}\n                            <option value=\"{{ value }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /bodytextWidths }}\n                    </select>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-large\">\n                    <label for=\"bodytext_alignment\">Select alignment for this article's body text</label>\n                    <select name=\"fields.bodytextAlignment\" id=\"bodytext_alignment\">\n                        <option value=\"\">Default style</option>\n                        {{ #bodytextAlignments }}\n                            <option value=\"{{ value }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /bodytextAlignments }}\n                    </select>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-large\">\n                    <label for=\"header_width\">Select width of header elements</label>\n                    <select name=\"fields.articleHeaderWidthSetup\" id=\"header_width\">\n                        <option value=\"\">Default style</option>\n                        {{ #headerWidths }}\n                            <option value=\"{{ value }}\"{{ #selected }} selected{{ /selected }}>{{ name }}</option>\n                        {{ /headerWidths }}\n                    </select>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"hidePublishedDate\">Hide published date</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.hidePublishedDate\" id=\"hidePublishedDate\" {{ #fields.hidePublishedDate }}checked{{ /fields.hidePublishedDate }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"showcomments\">Show comments</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.showcomments\" id=\"showcomments\" {{ #fields.showcomments }}checked{{ /fields.showcomments }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"showbylineonfp\">Show byline on front</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.showbylineonfp\" id=\"showbylineonfp\" {{ #fields.showbylineonfp }}checked{{ /fields.showbylineonfp }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"style_slidein\">Slide-in effect</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.style_slidein\" id=\"style_slidein\" {{ #fields.style_slidein }}checked{{ /fields.style_slidein }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"style_spacing\">Enable custom space editing</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.style_spacing\" id=\"style_spacing\" {{ #fields.style_spacing }}checked{{ /fields.style_spacing }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"showMetaAboveImage\">Show dateline/bylines above image</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.showMetaAboveImage\" id=\"showMetaAboveImage\" {{ #fields.showMetaAboveImage }}checked{{ /fields.showMetaAboveImage }}>\n                </div>\n\n                {{ #displayReadProgressOption }}\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"displayReadProgress\">\n                    Display read progress\n                    {{ #displayReadProgressOptionWarning }}\n                        (article is too short)\n                    {{ /displayReadProgressOptionWarning }}\n                    </label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.displayReadProgress\" id=\"displayReadProgress\" {{ #fields.displayReadProgress }}checked{{ /fields.displayReadProgress }} {{ #displayReadProgressOptionWarning }}disabled{{ /displayReadProgressOptionWarning }}>\n                </div>\n                {{ /displayReadProgressOption }}\n                {{ #displayReadTimeOption }}\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"displayReadTime\">Display read-time</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.displayReadTime\" id=\"displayReadTime\" {{ #fields.displayReadTime }}checked{{ /fields.displayReadTime }}>\n                </div>\n                {{ /displayReadTimeOption }}\n                <h3 class=\"lab-title lab-grid-large-12 lab-space-above-large\">Display Social Media Icons</h3>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"show_social_bodytext_before\">Display icons above body text</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.show_social_bodytext_before\" id=\"show_social_bodytext_before\" {{ #fields.show_social_bodytext_before }}checked{{ /fields.show_social_bodytext_before }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"show_social_bodytext_after\">Display icons below body text</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.show_social_bodytext_after\" id=\"show_social_bodytext_after\" {{ #fields.show_social_bodytext_after }}checked{{ /fields.show_social_bodytext_after }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"show_social_header\">Display icons in header</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.show_social_header\" id=\"show_social_header\" {{ #fields.show_social_header }}checked{{ /fields.show_social_header }}>\n                </div>\n                ${ this.embeddable ? `\n                <h3 class=\"lab-title lab-grid-large-12 lab-space-above-large\">Embed options</h3>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"displayEmbedButton\">Display embed button below body text</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.displayEmbedButton\" id=\"displayEmbedButton\" {{ #fields.displayEmbedButton }}checked{{ /fields.displayEmbedButton }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-6 lab-inline\">\n                    <label for=\"displayEmbedButtonAboveBodytext\">Display embed button above body text</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.displayEmbedButtonAboveBodytext\" id=\"displayEmbedButtonAboveBodytext\" {{ #fields.displayEmbedButtonAboveBodytext }}checked{{ /fields.displayEmbedButtonAboveBodytext }}>\n                </div>\n                ` : '' }\n            </div>\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Styling'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.articleStyle': {\n                node: 'fields.articleStyle',\n                callback: (element) => {\n                    // Update selector on body-element for all viewports in the editor\n                    // to allow preview without a reload.\n                    // Assumes value of 'fields.articleStyle' is set on the body-element in template(s).\n                    const docs = lab_api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.articleStyle');\n                    for (const doc of docs) {\n                        if (current) { doc.body.classList.remove(current); }\n                        if (element.value) { doc.body.classList.add(element.value); }\n                    }\n                }\n            },\n            'fields.pageHeaderDisplay': {\n                node: 'fields.pageHeaderDisplay',\n                callback: (element) => {\n                    const docs = lab_api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.pageHeaderDisplay');\n                    for (const doc of docs) {\n                        if (current) {\n                            doc.body.classList.remove(current);\n                        }\n                        if (element.value) {\n                            doc.body.classList.add(element.value);\n                        }\n                    }\n                }\n            },\n            'fields.bodytextWidth': {\n                node: 'fields.bodytextWidth',\n                callback: (element) => {\n                    // Update selector on body-element for all viewports in the editor\n                    // to allow preview without a reload.\n                    // Assumes value of 'fields.articleStyle' is set on the body-element in template(s).\n                    const docs = lab_api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.bodytextWidth');\n                    for (const doc of docs) {\n                        if (current) {\n                            doc.body.classList.remove('custom-bodytext-width');\n                            doc.querySelector(':root').style.setProperty('--bodytext-width', 'var(--bodytext-width-default)');\n                        }\n                        if (element.value) {\n                            doc.body.classList.add('custom-bodytext-width');\n                            doc.querySelector(':root').style.setProperty('--bodytext-width', `var(${ element.value })`);\n                        }\n                    }\n                }\n            },\n            'fields.bodytextAlignment': {\n                node: 'fields.bodytextAlignment',\n                callback: (element) => {\n                    // Update selector on body-element for all viewports in the editor\n                    // to allow preview without a reload.\n                    // Assumes value of 'fields.bodytextAlignment' is set on the body-element in template(s).\n                    const docs = lab_api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.bodytextAlignment');\n                    for (const doc of docs) {\n                        if (current) {\n                            doc.body.classList.remove('custom-bodytext-alignment');\n                            doc.querySelector(':root').style.setProperty('--bodytext-alignment', 'var(--bodytext-alignment-default)');\n                        }\n                        if (element.value) {\n                            doc.body.classList.add('custom-bodytext-alignment');\n                            doc.querySelector(':root').style.setProperty('--bodytext-alignment', `var(${ element.value })`);\n                        }\n                    }\n                }\n            },\n            'fields.articleHeaderWidthSetup': {\n                node: 'fields.articleHeaderWidthSetup',\n                callback: (element) => {\n                    const docs = lab_api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.articleHeaderWidthSetup');\n                    for (const doc of docs) {\n                        if (current) {\n                            doc.body.classList.remove('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width', 'articleHeader-meta-bodytext-width');\n                            this.rootModel.set('fields.articleHeaderBodytextWidth', false);\n                            this.rootModel.set('fields.articleHeaderImageBodytextWidth', false);\n                            this.rootModel.set('fields.articleMetaBodytextWidth', false);\n                        }\n                        switch (element.value) {\n                            case 'everything':\n                                doc.body.classList.add('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width', 'articleHeader-meta-bodytext-width');\n                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);\n                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', true);\n                                this.rootModel.set('fields.articleMetaBodytextWidth', true);\n                                break;\n                            case 'everything-except-image':\n                                doc.body.classList.add('articleHeader-bodytext-width', 'articleHeader-meta-bodytext-width');\n                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);\n                                this.rootModel.set('fields.articleMetaBodytextWidth', true);\n                                break;\n                            case 'everything-except-meta':\n                                doc.body.classList.add('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width');\n                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);\n                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', true);\n                                break;\n                            case 'only-image':\n                                doc.body.classList.add('articleHeader-image-bodytext-width');\n                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', true);\n                                break;\n                            case 'only-meta':\n                                doc.body.classList.add('articleHeader-meta-bodytext-width');\n                                this.rootModel.set('fields.articleMetaBodytextWidth', true);\n                                break;\n                            case 'only-text':\n                                doc.body.classList.add('articleHeader-bodytext-width');\n                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);\n                                break;\n                            default:\n                                doc.body.classList.remove('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width', 'articleHeader-meta-bodytext-width');\n                                this.rootModel.set('fields.articleHeaderBodytextWidth', false);\n                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', false);\n                                this.rootModel.set('fields.articleMetaBodytextWidth', false);\n                                break;\n                        }\n                    }\n                }\n            },\n            'fields.articleHeaderBodytextWidth': { node: 'fields.articleHeaderBodytextWidth', boolean: true },\n            'fields.articleHeaderImageBodytextWidth': { node: 'fields.articleHeaderImageBodytextWidth', boolean: true },\n            'fields.articleMetaBodytextWidth': { node: 'fields.articleMetaBodytextWidth', boolean: true },\n            'fields.style_slidein': { node: 'fields.style_slidein', boolean: true },\n            'fields.style_spacing': { node: 'fields.style_spacing', boolean: true, suggestReload: true },\n            'fields.hidePublishedDate': { node: 'fields.hidePublishedDate', boolean: true },\n            'fields.showcomments': { node: 'fields.showcomments', boolean: true },\n            'fields.showbylineonfp': { node: 'fields.showbylineonfp', boolean: true },\n            'fields.showMetaAboveImage': { node: 'fields.showMetaAboveImage', boolean: true },\n            'fields.displayReadProgress': { node: 'fields.displayReadProgress', boolean: true },\n            'fields.displayReadTime': { node: 'fields.displayReadTime', boolean: true },\n            'fields.show_social_bodytext_after': { node: 'fields.show_social_bodytext_after', boolean: true },\n            'fields.show_social_bodytext_before': { node: 'fields.show_social_bodytext_before', boolean: true },\n            'fields.show_social_header': { node: 'fields.show_social_header', boolean: true },\n            'fields.displayEmbedButton': { node: 'fields.displayEmbedButton', boolean: true, suggestReload: true },\n            'fields.displayEmbedButtonAboveBodytext': { node: 'fields.displayEmbedButtonAboveBodytext', boolean: true, suggestReload: true }\n        };\n    }\n\n    showReadProgressColumnsWarning() {\n        const targetSelectors = ['.articleHeader', '.bodytext'];\n        let elements = [];\n        const docs = this.api.v1.viewport.getContexts();\n        for (const doc of docs) {\n            for (const target of (targetSelectors || [])) {\n                const targetElement = doc.querySelector(target);\n                if (targetElement) {\n                    elements = elements.concat(Array.from(targetElement.children).filter((el) => !el.classList.contains('column')));\n                }\n            }\n            // Only need to run this for one viewport\n            break;\n        }\n        if (!elements.length) {\n            Sys.logger.debug('[ReadProgress] Article has no length, show warning');\n            return true;\n        }\n        const minElementCount = parseInt(this.api.v1.config.get('displayReadProgress.minElementCount') || 25, 10);\n        if (elements.length < minElementCount) {\n            Sys.logger.debug(`[ReadProgress] Article length (${  elements.length  }) is less than minimum ${  minElementCount  }, show warning`);\n            return true;\n        }\n\n        return false;\n    }\n\n    onMarkup() {\n        const socialDisplay = this.api.v1.config.get(`page_settings.article.social.display`) || {};\n\n        const socialDisplayBodytextBefore = this.rootModel.get('fields.show_social_bodytext_before');\n        const socialDisplayBodytextAfter = this.rootModel.get('fields.show_social_bodytext_after');\n        const socialDisplayHeader = this.rootModel.get('fields.show_social_header');\n\n        const currentArticleStyle = this.rootModel.get('fields.articleStyle');\n        const articleStyles = (this.api.v1.config.get('articleStyles') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentArticleStyle }));\n        const currentPageHeaderDisplay = this.rootModel.get('fields.pageHeaderDisplay');\n        const pageHeaderDisplays = (this.api.v1.config.get('pageHeaderDisplays') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentPageHeaderDisplay }));\n        const currentBodytextWidth = this.rootModel.get('fields.bodytextWidth');\n        const bodytextWidths = (this.api.v1.config.get('bodytextWidths.desktop') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentBodytextWidth }));\n        const currentBodytextAlignment = this.rootModel.get('fields.bodytextAlignment');\n        const bodytextAlignments = (this.api.v1.config.get('bodytextAlignments') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentBodytextAlignment }));\n        const currentHeaderWidths = this.rootModel.get('fields.articleHeaderWidthSetup');\n        const headerWidths = (this.api.v1.config.get('headerWidths') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentHeaderWidths }));\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            articleStyles,\n            pageHeaderDisplays,\n            bodytextWidths,\n            bodytextAlignments,\n            headerWidths,\n            fields: {\n                showcomments: this.rootModel.get('fields.showcomments'),\n                showbylineonfp: this.rootModel.get('fields.showbylineonfp'),\n                articleStyle: this.rootModel.get('fields.articleStyle'),\n                bodytextWidth: this.rootModel.get('fields.bodytextWidth'),\n                bodytextAlignment: this.rootModel.get('fields.bodytextAlignment'),\n                headerWidths: this.rootModel.get('fields.articleHeaderWidthSetup'),\n                style_slidein: this.rootModel.get('fields.style_slidein'),\n                style_spacing: this.rootModel.get('fields.style_spacing'),\n                showMetaAboveImage: this.rootModel.get('fields.showMetaAboveImage'),\n                hidePublishedDate: this.rootModel.get('fields.hidePublishedDate'),\n                displayReadProgress: this.rootModel.get('fields.displayReadProgress'),\n                displayReadTime: this.rootModel.get('fields.displayReadTime'),\n                show_social_bodytext_after: socialDisplayBodytextAfter === null ? socialDisplay.bodytext_after : !!socialDisplayBodytextAfter,\n                show_social_bodytext_before: socialDisplayBodytextBefore === null ?  socialDisplay.bodytext_before : !!socialDisplayBodytextBefore,\n                show_social_header: socialDisplayHeader === null ? socialDisplay.header : !!socialDisplayHeader,\n                displayEmbedButton: !!this.rootModel.get('fields.displayEmbedButton'),\n                displayEmbedButtonAboveBodytext: !!this.rootModel.get('fields.displayEmbedButtonAboveBodytext'),\n                pageHeaderDisplay: this.rootModel.get('fields.pageHeaderDisplay')\n            },\n            displayReadProgressOption: !!this.api.v1.config.get('displayReadProgress.active'),\n            displayReadProgressOptionWarning: this.showReadProgressColumnsWarning(),\n            displayReadTimeOption: !!this.api.v1.config.get('displayReadTime.active')\n        }, true);\n\n        return markup;\n    }\n\n}\n","import contentLanguages from '../../lib/helpers/ContentLanguages.js';\n\nexport class ArticleTranslate {\n\n    constructor(api) {\n        this.api = api;\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.enabled = true;\n        this.newCopyId = 0;\n        this.translationTargets = this.api.v1.config.get('articleTranslationTargets');\n        this.multiLanguageConfig = this.api.v1.config.get(`multiLanguage.languages`) || [];\n        this.selectedLanguage = this.getPageLanguage();\n        this.prototypes = [];\n        this.defaultTemplate = `\n            <div class=\"lab-modal-form lab-grid lab-hidden\">\n                <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n\n                    <h2 class=\"lab-grid-large-12\">Article translate</h2>\n                    <div id=\"translationInfo\" class=\"lab-grid-large-12\">\n                        <div id=\"btnTranslationInfo\" style=\"cursor: pointer;\">Labrador AI helps you with translating the article. <a href=\"#\">Click for more info</a></div>\n                        <p class=\"lab-hidden info\"><b>Translate article</b> will translate the current article, while <b>Duplicate and translate</b> lets you make another article version that duplicates the current article and translates it.</p>\n                        <p class=\"lab-hidden info\">Duplicated articles need to be assigned a site and a prototype before they can be created. <a href=\"/settings/cp?page=multiLanguage\" target=\"_blank\">You can skip this step by adding default settings for your preferred language(s) for translation</a>. The language(s) will be visible in \"Overview\" below.</p>\n                        <p class=\"lab-hidden info\">You can also fine tune the translation into your preferred style by adding <a href=\"/settings/cp?page=labradorAi\" target=\"_blank\">custom prompt for your site</a>.</p>\n                    </div>\n\n                    <select id=\"languages\">\n                        <option value=\"\">Select language</option>\n                        {{ #languages }}\n                        <option value=\"{{ code }}\"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>\n                        {{ /languages }}\n                    </select>\n                    <div id=\"infoTextMainArea\" class=\"lab-hidden\">Ongoing translation process of this article</div>\n                    <progress id=\"progressBarMainArea\" class=\"lab-hidden\" value=0 min=0 max=0 style=\"width:100%; height:50px;\"></progress>\n                    <div id=\"btnAdvancedSettings\" class=\"lab-btn lab-space-right-medium lab-hidden\">Advanced settings</div>\n                    <div id=\"btnTranslateThisArticle\" class=\"lab-btn lab-generate lab-space-right-medium\">Translate article</div>\n                    <div id=\"btnPrepareNewCopy\" class=\"lab-btn lab-align-right\">Duplicate and translate</div>\n                    <h2 class=\"lab-grid-large-12\">Overview</h2>\n                    <div id=\"copiesOverview\" class=\"lab-grid lab-grid-gap\" style=\"width: 100%;\"></div>\n                </div>\n            </div>\n        `;\n\n        this.newCopyTemplate = `\n            <div style=\"border: 1px solid black; width: 100%; margin: 5px; padding: 0 10px;\">\n                <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                    <div class=\"removeFromOverview\" style=\"position: absolute; top: 10px; right: 10px; background-color:rgb(167, 17, 6); color: white; font-size: 16px; width: 20px; height: 20px; text-align: center; line-height: 20px; border-radius: 50%; cursor: pointer;\">X</div>\n                    <h3 style=\"width: 100%\">Create a new version{{ #languageSelectionName }} for '{{ languageSelectionName }}'{{ /languageSelectionName }}</h3>\n                    <p id=\"progress-info\" class=\"lab-hidden\"></p>\n                    <progress id=\"progress-meter\" class=\"lab-hidden\" value=0 min=0 max=0 style=\"width:100%; height:50px;\"></progress>\n                    <label class=\"translationSelection\" for=\"languages\"><b>Translate to</b></label>\n                    <select name=\"languages\" class=\"languages translationSelection\">\n                        <option value=\"\">Select language</option>\n                        {{ #languages }}\n                        <option value=\"{{ code }}\"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>\n                        {{ /languages }}\n                    </select>\n\n                    <div class=\"lab-formgroup-item lab-grid-large-5 lab-space-right-medium translationSelection\">\n                        <label for=\"site_id\"><b>Select site</b></label>\n                        <select name=\"site_id\" class=\"site_id\">\n                            {{#sites}}\n                            <option value=\"{{value}}\" {{#selected}}selected{{/selected}}>{{name}}</option>\n                            {{/sites}}\n                        </select>\n                    </div>\n\n                    <div class=\"lab-formgroup-item lab-grid-large-5 translationSelection\">\n                        <label for=\"prototype_id\"><b>Select prototype</b></label>\n                        <select name=\"prototype_id\" class=\"prototype_id\">\n                            {{#prototypes}}\n                            <option value=\"{{value}}\" {{#selected}}selected{{/selected}}>{{name}}</option>\n                            {{/prototypes}}\n                        </select>\n                    </div>\n                    <div id=\"btnCreateLinkedCopy\" class=\"lab-btn lab-space-right-medium lab-hidden translationSelection\">Duplicate article</div>\n                    <div id=\"btnCreateNewTranslation\" class=\"lab-btn lab-generate lab-align-right translationSelection\">Duplicate and translate</div>\n                </div>\n            </div>\n        `;\n\n        this.existingCopyTemplate = `\n            <div style=\"border: 1px solid black; width: 100%; margin: 5px; padding: 0 10px;\">\n                <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                    <h3 style=\"width: 100%\">{{articleId}}: <em>{{ title }}</em></h3>\n\n                    <div class=\"lab-formgroup-item lab-grid-large-3\">Language</div><div class=\"lab-formgroup-item lab-grid-large-8\">{{language}}</div>\n                    <div class=\"lab-formgroup-item lab-grid-large-3\">Status</div><div class=\"lab-formgroup-item lab-grid-large-8 status\">{{status}}</div>\n\n                    <div id=\"btnMakeChanges\" class=\"lab-btn lab-space-right-medium lab-hidden\">Sync with original version</div>\n                    <div id=\"btnGoToArticle\" class=\"lab-btn\">Go to article</div>\n                </div>\n            </div>\n        `;\n\n    }\n\n    onMarkup() {\n        /**\n         * Markup for the translate article function, in article settings\n         */\n        this.languages = contentLanguages.map((language) => ({ name: language.name, code: language.code, selected: language.code === this.selectedLanguage }));\n        this.setupPrototypes();\n        this.markup = this.api.v1.util.dom.renderTemplate(this.defaultTemplate, {\n            languages: this.languages,\n            prototypes: this.prototypes\n        }, true);\n\n        const language = this.markup.querySelector('#languages');\n        language.addEventListener('change', (event) => {\n            this.selectedLanguage = language.value;\n        });\n\n        this.prepareNewCopyButton = this.markup.querySelector('#btnPrepareNewCopy');\n        this.prepareNewCopyButton.addEventListener('click', () => {\n            this.prepareNewCopy();\n        });\n\n        // Translation of THIS article, the one user is currently on\n        this.btnTranslateThisArticle = this.markup.querySelector('#btnTranslateThisArticle');\n        this.btnTranslateThisArticle.addEventListener('click', () => {\n            this.btnTranslateThisArticle.classList.add('lab-disabled');\n            this.markup.querySelector('#infoTextMainArea').classList.remove('lab-hidden');\n            const progressBar = this.markup.querySelector('#progressBarMainArea');\n            progressBar.classList.remove('lab-hidden');\n            this.updateProgressBar(progressBar, { setAttributeValues: { value: 1, max: 10 } });\n\n            const articleId = this.rootModel.get('id');\n            const languageName = this.getLanguageName(this.selectedLanguage);\n\n            // Get new copy data - getNodeAndData\n            this.getNodeAndData(articleId).then((nodeData) => {\n            // Translate content - translateContent\n                const params = {\n                    featureName: 'translateArticle',\n                    language: languageName,\n                    cleanUpJsonString: true,\n                    updateModel: false\n                };\n                this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n                this.translateNode(nodeData, params, true)\n                    .then((response) => {\n                        response.fields.hasTranslation = '1';\n                        response.fields.seolanguage = this.selectedLanguage;\n                        for (const child of response.children) {\n                            this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                            this.overwriteNodeData(child.id, child.type, child);\n                            if (child.children && child.children.length > 0) {\n                                for (const grandChild of child.children) {\n                                    this.overwriteNodeData(grandChild.id, grandChild.type, grandChild);\n                                }\n                            }\n                        }\n                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n                        this.overwriteNodeData(articleId, 'article', response)\n                            .then((r) => {\n                                this.btnTranslateThisArticle.classList.remove('lab-disabled');\n                                // this.btnTranslateThisArticle.classList.remove('lab-busy');\n                                this.markup.querySelector('#infoTextMainArea').textContent = 'Translation completed. Refresh to see changes.';\n                                this.updateProgressBar(progressBar, { finished: true });\n\n                                // Force an editor reload to see changes:\n                                window.location.href = `/edit/article/id/${ articleId }`;\n\n                            });\n                    });\n            });\n        });\n\n        this.markup.querySelector('#btnTranslationInfo').addEventListener('click', () => {\n            const translationInfo = this.markup.querySelectorAll('#translationInfo .info');\n            for (const info of translationInfo) {\n                info.classList.remove('lab-hidden');\n            }\n            this.markup.querySelector('#btnTranslationInfo').classList.add('lab-hidden');\n        });\n\n        // Open advanced ai settings modal for custom prompt\n        this.markup.querySelector('#btnAdvancedSettings').addEventListener('click', () => {\n            const params = {\n                featureName: 'translateArticle',\n                disableGenerateButton: true\n            };\n            this.api.v1.ns.get('textAssistant.openFeatureSettings')(this.rootModel, null, null, params);\n        });\n\n        for (const languageConfig of this.multiLanguageConfig) {\n            if (languageConfig.autoSuggestTranslation && languageConfig.autoSuggestTranslation === true) {\n                const options = {\n                    language: languageConfig.language,\n                    siteName: languageConfig.siteName || null,\n                    prototypeName: languageConfig.prototypeName || null,\n                    languageSelectionName: languageConfig.name || null\n                };\n                const newCopy = this.getNewCopyTemplate(options);\n                const removeFromOverview = newCopy.querySelector('.removeFromOverview');\n                removeFromOverview.addEventListener('click', () => {\n                    this.markup.querySelector('#copiesOverview').removeChild(newCopy);\n                });\n                this.markup.querySelector('#copiesOverview').prepend(newCopy);\n\n            }\n        }\n\n        this.fetchListOfCopies().then((existingCopies) => {\n            // console.log(existingCopies);\n            for (const articleCopy of existingCopies) {\n                this.updateCopyInOverview(articleCopy);\n            }\n        });\n        return this.markup;\n    }\n\n    getLanguageName(code) {\n        /**\n         * Get the language name from the language code\n         * @param {string} code - The language code\n         */\n        const language = contentLanguages.find((lang) => lang.code === code);\n        if (language) {\n            return language.name;\n        }\n        return null;\n    }\n\n    updateCopyInOverview(articleCopy, replaceElement = false) {\n        /**\n         * Update the copy in the overview\n         * @param {object} articleCopy - The data for the article copy, to be used for element in overview\n         */\n        const updateCopy = this.getExistingCopyTemplate(articleCopy);\n        updateCopy.id = articleCopy.elementId || `copy-${ articleCopy.id }`;\n        const articleId = articleCopy.id || articleCopy.articleId;\n\n        updateCopy.querySelector('#btnMakeChanges').addEventListener('click', () => {\n            const options = {\n                elementId: updateCopy.id,\n                headerTitle: `Update ${ articleId }: <em>${ articleCopy.title }</em>`,\n                language: articleCopy.seolanguage,\n                articleId\n            };\n            const updatedTemplate = this.getNewCopyTemplate(options);\n            this.markup.querySelector('#copiesOverview').replaceChild(updatedTemplate, updateCopy);\n        });\n\n        updateCopy.querySelector('#btnGoToArticle').addEventListener('click', () => {\n            window.open(`/edit/article/id/${ articleId }`, '_blank');\n        });\n\n        // If an older element with the same ID exists, replace it:\n        if (articleId) {\n            const oldTemplate = this.markup.querySelector(`#${ updateCopy.id }`);\n            if (oldTemplate) {\n                this.markup.querySelector('#copiesOverview').replaceChild(updateCopy, oldTemplate);\n            } else {\n                this.markup.querySelector('#copiesOverview').appendChild(updateCopy);\n            }\n        } else {\n            this.markup.querySelector('#copiesOverview').appendChild(updateCopy);\n        }\n\n    }\n\n    setBusyState(rootElement, busy = true) {\n        /**\n         * Set the busy state and disabling of buttons for an element\n         * @param {HTMLElement} rootElement - The root element to be marked as busy\n         * @param {boolean} busy - The current state of the element\n         */\n        const rootElementId = rootElement.id;\n        const allElements = [rootElement.id, ...rootElement.querySelectorAll('[id]')];\n        const ids = allElements.filter((element) => element.id).map((element) => element.id);\n        for (const id of ids) {\n            if (busy === true) {\n                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.add('lab-busy');\n                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.add('lab-disabled');\n\n            } else {\n                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.remove('lab-busy');\n                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.remove('lab-disabled');\n\n            }\n        }\n    }\n\n    splitText(fullText, splitTarget = '</p>') {\n        /**\n         * Split the data into smaller parts\n         * @param {string} dataString - The data to be splitted\n         * @param {string} targetField - The field name to be splitted\n         * @param {string} splitTarget - The target to split the data with\n         */\n\n        const splittedText = fullText.split(splitTarget);\n        const maxLength = 1200;\n        let part = '';\n        let index = 0;\n        const textPartials = {};\n\n        // Split up bodytext into bodytext-partials\n        if (splittedText) {\n            for (let partial of splittedText) {\n                if (partial && partial.length > 0) {\n                    partial += splitTarget;\n                    part += partial;\n\n                    if (part.length > maxLength) {\n                        index += 1;\n                        textPartials[index] = part;\n                        part = '';\n                    }\n                }\n            }\n        }\n\n        // Include remainder\n        if (part && part.length > 0) {\n            textPartials[index + 1] = part;\n        }\n\n        return textPartials;\n\n    }\n\n    getPageLanguage() {\n        /**\n         * Get the language code of the current page, either seo language og site specified language\n         */\n        const seolanguageCode = this.rootModel.get('fields.seolanguage');\n        if (seolanguageCode) {\n            return seolanguageCode;\n        }\n        return this.api.v1.config.get('contentLanguage');\n    }\n\n    getNewCopyTemplate(options = {}) {\n        /**\n         * Get the new copy template\n         * @param {object} options - The options (data) to be used in the new copy template\n         */\n        const newOptions = { ...options };\n        if (!newOptions.language) {\n            newOptions.language = this.selectedLanguage;\n        }\n\n        const sites = this.api.v1.user.getSites().map((site) => ({\n            value: site.id, name: site.display_name\n        }));\n        const languages = this.languages.map((lang) => ({ name: lang.name, code: lang.code, selected: lang.code === newOptions.language }));\n        const newCopy = this.api.v1.util.dom.renderTemplate(this.newCopyTemplate, {\n            languages,\n            sites,\n            prototypes: [],\n            languageSelectionName: newOptions.languageSelectionName || null\n        }, true);\n\n        if (!newOptions.elementId) {\n            newOptions.elementId = `copy-${ this.newCopyId }`;\n            this.newCopyId++;\n        } else {\n            newCopy.querySelector('.removeFromOverview').classList.add('lab-hidden');\n        }\n        newCopy.id = newOptions.elementId;\n\n        if (newOptions.headerTitle) {\n            newCopy.querySelector('h3').innerHTML = newOptions.headerTitle;\n        }\n\n        // Button to create linked copy\n        newCopy.querySelector('#btnCreateLinkedCopy').addEventListener('click', () => {\n            // this.setBusyState(newCopy, true);\n            const prototypeId = newCopy.querySelector('select[name=\"prototype_id\"]').value;\n            // Oversett DENNE eller ORIGINALEN\n            const articleId = this.rootModel.get('id');\n            const replaceId = options.articleId || null;\n            const selectedLanguage = newCopy.querySelector('select[name=\"languages\"]').value;\n            // const languageName = this.getLanguageName(selectedLanguage);\n            if (selectedLanguage) {\n                const progressBar = newCopy.querySelector(`#progress-meter`);\n                this.updateProgressBar(progressBar, { setAttributeValues: { value: 1, max: 3 } });\n                this.createCopy(articleId, prototypeId, replaceId).then((copyId) => {\n                    this.fetchArticleData(copyId).then((data) => {\n                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                        const currentPageLanguage = this.getPageLanguage();\n                        const extraDataCurrent = {\n                            fields: { hasTranslation: '1', seolanguage: currentPageLanguage }\n                        };\n                        this.overwriteNodeData(articleId, 'article', extraDataCurrent);\n                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                        const extraData = {\n                            fields: { seolanguage: selectedLanguage, hasTranslation: '1' }\n                        };\n                        this.overwriteNodeData(copyId, 'article', extraData);\n\n                        const articleCopy = {\n                            elementId: newCopy.id,\n                            articleId: copyId,\n                            title: 'New title',\n                            seolanguage: selectedLanguage,\n                            status: 'Draft'\n\n                        };\n                        articleCopy.title = data.title;\n                        articleCopy.status = data.status;\n                        console.log('Article articleCopy: ', articleCopy);\n                        // this.setBusyState(newCopy, false);\n                        this.updateProgressBar(progressBar, { finished: true });\n\n                        this.updateCopyInOverview(articleCopy, true);\n                    });\n                });\n            } else {\n                // this.setBusyState(newCopy, false);\n            }\n\n        });\n\n        // Button to create new translation\n        newCopy.querySelector('#btnCreateNewTranslation').addEventListener('click', () => {\n            newCopy.querySelector('.site_id').classList.add('lab-hidden');\n            const progressBar = newCopy.querySelector(`#progress-meter`);\n            progressBar.classList.remove('lab-hidden');\n            this.updateProgressBarInfo(newCopy);\n            this.hideTranslationSelections(newCopy);\n            this.updateProgressBar(progressBar, { setAttributeValues: { value: 1, max: 10 } });\n\n            // this.setBusyState(newCopy, true);\n\n            const prototypeId = newCopy.querySelector('select[name=\"prototype_id\"]').value;\n            const articleId = this.rootModel.get('id');\n\n            const replaceId = options.articleId || null;\n            const selectedLanguage = newCopy.querySelector('select[name=\"languages\"]').value;\n            const languageName = this.getLanguageName(selectedLanguage);\n            if (languageName) {\n                this.createCopy(articleId, prototypeId, replaceId).then((copyId) => {\n                    this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                    const currentPageLanguage = this.getPageLanguage();\n                    const extraDataCurrent = {\n                        fields: { hasTranslation: '1', seolanguage: currentPageLanguage }\n                    };\n                    this.overwriteNodeData(articleId, 'article', extraDataCurrent);\n                    this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                    // Get new copy data - getNodeAndData\n                    this.getNodeAndData(copyId).then((nodeData) => {\n                    // Translate content - translateContent\n                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n                        const params = {\n                            featureName: 'translateArticle',\n                            language: languageName,\n                            cleanUpJsonString: true,\n                            updateModel: false\n                        };\n                        this.translateNode(nodeData, params, true)\n                            .then((response) => {\n                                this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                                response.fields.hasTranslation = '1';\n                                response.fields.seolanguage = selectedLanguage;\n                                for (const child of response.children) {\n                                    this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n                                    this.overwriteNodeData(child.id, child.type, child);\n                                    if (child.children && child.children.length > 0) {\n                                        for (const grandChild of child.children) {\n                                            this.overwriteNodeData(grandChild.id, grandChild.type, grandChild);\n                                        }\n                                    }\n                                }\n                                this.overwriteNodeData(copyId, 'article', response)\n                                    .then((r) => {\n                                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });\n\n                                        this.fetchArticleData(copyId).then((data) => {\n                                            const articleCopy = {\n                                                elementId: newCopy.id,\n                                                articleId: copyId,\n                                                title: data.title || '',\n                                                language: languageName,\n                                                status: data.status || 'Draft'\n\n                                            };\n                                            // this.setBusyState(newCopy, false);\n                                            this.updateProgressBar(progressBar, { finished: true });\n                                            this.updateCopyInOverview(articleCopy, true);\n                                        });\n\n                                    });\n                            });\n                    });\n\n                });\n            } else {\n                // this.setBusyState(newCopy, false);\n\n            }\n\n        });\n\n        // Use specified site name from config, as defined on multiLanguage admin page\n        if (options.siteName) {\n            const option = Array.from(newCopy.querySelector('select[name=\"site_id\"]').querySelectorAll('option'))\n                .find((opt) => opt.textContent.trim() === options.siteName.trim());\n            if (option) {\n                newCopy.querySelector('select[name=\"site_id\"]').value = option.value;\n\n            }\n        }\n        const siteId = newCopy.querySelector('select[name=\"site_id\"]').value;\n        this.updatePrototypeList(siteId, newCopy, options.prototypeName);\n\n        const siteElement = newCopy.querySelector('.site_id');\n        siteElement.addEventListener('change', (event) => {\n            const selectedSiteId = event.target.value;\n            this.updatePrototypeList(selectedSiteId, newCopy);\n        });\n\n        return newCopy;\n    }\n\n    getExistingCopyTemplate(options = {}) {\n        /**\n         * Get the existing copy template\n         * @param {object} options - The options (data) to be used in the existing copy template\n         */\n        const languageCode = options.seolanguage;\n        let languageName = languageCode ? this.getLanguageName(languageCode) : options.language;\n        if (languageCode) {\n            languageName = this.getLanguageName(languageCode);\n        }\n\n        let statusDescription = options.status || '';\n        if (options.visibility_status === 'H') {\n            statusDescription = 'Published hidden';\n            if (options.status === 'A') {\n                statusDescription += ', with unpublished changes';\n            }\n        } else if (options.visibility_status === 'P') {\n            statusDescription = 'Published';\n            if (options.status === 'A') {\n                statusDescription += ', with unpublished changes';\n            }\n        } else {\n            statusDescription = 'Draft';\n        }\n        const existingCopy = this.api.v1.util.dom.renderTemplate(this.existingCopyTemplate, {\n            title: options.title || 'N/A',\n            language: languageName,\n            status: statusDescription,\n            articleId: options.id || options.articleId || 'N/A'\n\n        }, true);\n        return existingCopy;\n    }\n\n    onAside() {\n        /**\n         * Aside menu for positioning the translate article function\n         */\n        return {\n            section: 'Advanced',\n            label: 'Translate article'\n        };\n    }\n\n    onPaths() {\n        /**\n         * Paths for the translate article function\n         */\n        return {\n            'fields.seolanguage': {\n                node: 'fields.seolanguage'\n            }\n        };\n    }\n\n    fetchListOfCopies() {\n        /**\n         * Fetch list of copies of the current article to display in the overview\n         */\n        let lab_canonical_id;\n        let query = '';\n        const currentArticleId = this.rootModel.get('id');\n        for (const path of ['lab_canonical_id', 'lab_canonical_extid', 'extid']) {\n            try {\n                const id = this.rootModel.get(`fields.${ path }`);\n                if (id) {\n                    if (query.length > 0) {\n                        query += ` OR `;\n                    }\n                    query += `${ path }:${ id }`;\n                }\n\n                if (path === 'lab_canonical_id') {\n                    lab_canonical_id = id;\n                }\n            } catch (error) {\n                // Add correct syslogger\n                // //console.log(`${ path } not found in current article`);\n            }\n        }\n        const id = this.rootModel.get('id');\n        if (id && id !== lab_canonical_id) {\n            if (query.length > 0) {\n                query += ` OR id:${ id }`;\n            } else {\n                query += `id:${ id }`;\n            }\n        }\n\n        // If you are in the original article, then fetch all copied articles with that value set as lab_canonical_id\n        if (id) {\n            if (query.length > 0) {\n                query += ` OR lab_canonical_id:${ id }`;\n            } else {\n                query += `lab_canonical_id:${ id }`;\n            }\n        }\n\n        // If you are in an copied article, then that article has an lab_canonical_id\n        // Use the value of lab_canonical_id to fetch the article with that value as id\n        if (lab_canonical_id) {\n            if (query.length > 0) {\n                query += ` OR id:${ lab_canonical_id }`;\n            } else {\n                query += `id:${ lab_canonical_id }`;\n            }\n        }\n\n        let url = `/api/v1/article?query=${ query }`;\n        const returnFields = ['id', 'hasTranslations', 'hasTranslation', 'seolanguage', 'status', 'site_id', 'publishhidden', 'published', 'published_url', 'siteDomain', 'visibility_status', 'has_published', 'title'];\n        url += `&fields=${ returnFields.join(',') }`;\n        return fetch(url)\n            .then((response) => response.json()).then((data) => {\n                if (data && data.result && data.result.length > 0) {\n                    const filteredArray = data.result.filter((item) => Number(item.id) !== currentArticleId);\n                    return filteredArray;\n                }\n                return [];\n            });\n    }\n\n    fetchArticleData(articleId) {\n        /**\n         * Fetch article data from article with given id\n         * @param {number} articleId - The article id to fetch data from\n         */\n        const url = `/api/v1/article?query=id:${ articleId }`;\n        return new Promise((resolve, reject) => {\n            fetch(url)\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data && data.result && data.result.length > 0) {\n                        resolve(data.result[0]);\n                    }\n                    resolve(null);\n                })\n                .catch((error) => reject(error));\n        });\n\n    }\n\n    createCopy(originalArticleId, prototypeId, replaceId) {\n        /**\n         * Create a copy of the original article, may replace an existing article\n         * @param {number} originalArticleId - The original article id\n         * @param {number} prototypeId - The prototype id to copy the article to\n         * @param {number} replaceId - The id of the article to replace\n         */\n        // ForceCopy is meant to be used to decide if an article creates a new version or not\n        let ajaxUrl = `/ajax/article/copy-to-prototype/?articleId=${ originalArticleId }&prototype=${ prototypeId }`;\n        if (replaceId) {\n            ajaxUrl += `&replaceId=${ replaceId }&forceCopy=false`;\n        } else {\n            ajaxUrl += `&forceCopy=true`;\n        }\n        return this.api.v1.util.httpClient.request(ajaxUrl).then((resp) => {\n            if (resp && resp.imported) {\n                const imported = Object.values(resp.imported);\n                if (imported.length > 0) {\n                    return imported[0];\n                }\n            }\n            return null;\n        });\n    }\n\n    overwriteNodeData(nodeId, nodeType, data) {\n        /**\n         * Overwrite node data with new data\n         * @param {number} nodeId - The node id to overwrite\n         * @param {string} nodeType - The node type to overwrite, like 'article'\n         */\n        return new Promise((resolve, reject) => {\n            const formData = this.buildFormData(nodeId, nodeType, data);\n            if (formData) {\n                fetch('/ajax/node/save-node-and-data', { body: formData, method: 'POST' })\n                    .then((response) => {\n                        resolve(response);\n                    }).catch((error) => {\n                        // //console.log('error: ', error);\n                        reject(error);\n                    });\n            }\n        });\n    }\n\n    buildFormData(id, type, data) {\n        /**\n         * Build formData for saving data in a node\n         * @param {number} id - The node id\n         * @param {string} type - The node type\n         * @param {object} data - The data to be saved\n         */\n        if (!data) {\n            return null;\n        }\n        let parsedData = data;\n        if (typeof data !== 'object') {\n            parsedData = JSON.parse(data);\n        }\n        const formContent = {\n            id,\n            type,\n            fields: parsedData.fields\n        };\n        if (parsedData.fields && parsedData.fields.tags) {\n            formContent.tags = parsedData.fields.tags;\n            delete formContent.fields.tags;\n        }\n\n        const formData = new FormData();\n        formData.append('json[id]', id);\n        formData.append('json[type]', type);\n        formData.append('json[structure]', null);\n        formData.append('json[node]', JSON.stringify([formContent]));\n        return formData;\n    }\n\n    getNodeAndData(id) {\n        /**\n         * Get data from a node id, including children.\n         * Only return data that is supported for translation\n         * @param {number} id - The node id to fetch data from\n         */\n        return new Promise((resolve, reject) => {\n            fetch(`/prototype/get-node-and-data?id=${ id }`)\n                .then((response) => response.json())\n                .then((node) => {\n                    const fieldsForTranslation = this.evaluateNodeDataSupport(node.data, true);\n                    resolve(fieldsForTranslation);\n                })\n                .catch((error) => reject(error));\n        });\n    }\n\n    evaluateNodeDataSupport(node = null, recursive = true) {\n        /**\n         * Evaluate node data for translation support\n         * @param {object} node - The node data to be evaluated\n         * @param {boolean} recursive - If the evaluation should be recursive\n         */\n        if (!node || !node.fields) {\n            return null;\n        }\n\n        // Check if node is supported for translation\n        if (this.translationTargets.elements[node.type] && this.translationTargets.elements[node.type].accept === false) {\n            return null;\n        }\n\n        const supportedNodeData = {\n            id: node.id,\n            type: node.type,\n            fields: {},\n            path: {},\n            children: []\n        };\n        for (const pathType of ['path', 'fields']) {\n            const nodeData = pathType === 'path' ? node : node.fields;\n            for (const field of Object.keys(nodeData)) {\n                let elementRules;\n                if (this.translationTargets.elements[node.type]) {\n                    elementRules = this.translationTargets.elements[node.type];\n                }\n                let acceptField = false;\n\n                // Evaluate globally first\n                if (this.translationTargets.global[pathType] && this.translationTargets.global[pathType][field] && this.translationTargets.global[pathType][field] === true) {\n                    acceptField = true;\n                }\n\n                // Check specific element rules\n                if (elementRules && elementRules[pathType][field] && elementRules[pathType][field] === true) {\n                    acceptField = true;\n                } else if (elementRules && elementRules[pathType][field] && elementRules[pathType][field] === false) {\n                    acceptField = false;\n                }\n\n                // Check field value with global regex rules - accept\n                if (this.translationTargets.global.regex && this.translationTargets.global.regex.accept && Object.keys(this.translationTargets.global.regex.accept).length > 0) {\n                    for (const key of Object.keys(this.translationTargets.global.regex.accept)) {\n                        const regexRule = new RegExp(this.translationTargets.global.regex.accept[key]);\n                        if (regexRule && regexRule.test(nodeData[field])) {\n                            acceptField = true;\n                        }\n                    }\n                }\n\n                // Check field value with global regex rules - ignore\n                if (this.translationTargets.global.regex && this.translationTargets.global.regex.ignore && Object.keys(this.translationTargets.global.regex.ignore).length > 0) {\n                    for (const key of Object.keys(this.translationTargets.global.regex.ignore)) {\n                        const regexRule = new RegExp(this.translationTargets.global.regex.ignore[key]);\n                        if (regexRule && regexRule.test(nodeData[field])) {\n                            acceptField = false;\n                        }\n                    }\n                }\n\n                // Check field value with element regex rule - ignore\n                if (elementRules && elementRules.regex && elementRules.regex.ignore && Object.keys(elementRules.regex.ignore).length > 0) {\n                    for (const key of Object.keys(elementRules.regex.ignore)) {\n                        const regexRule = new RegExp(elementRules.regex.ignore[key]);\n                        if (regexRule && regexRule.test(nodeData[field])) {\n                            acceptField = false;\n                        }\n                    }\n                }\n\n                // Check field value for specific field with regex - accept\n                if (elementRules && elementRules.regex && elementRules.regex.accept && Object.keys(elementRules.regex.accept).length > 0) {\n                    for (const key of Object.keys(elementRules.regex.accept)) {\n                        const regexRule = new RegExp(elementRules.regex.accept[key]);\n                        if (regexRule && regexRule.test(nodeData[field])) {\n                            acceptField = true;\n                        }\n                    }\n                }\n\n                // Store for translation\n                if (acceptField === true) {\n                    supportedNodeData[pathType][field] = nodeData[field];\n                }\n            }\n        }\n\n        if (recursive === true && node.children && node.children.length > 0) {\n            for (const child of node.children) {\n                const childData = this.evaluateNodeDataSupport(child, true);\n                if (childData) {\n                    supportedNodeData.children.push(childData);\n                }\n            }\n        }\n        if (Object.keys(supportedNodeData.fields).length > 0 || Object.keys(supportedNodeData.path).length > 0 || supportedNodeData.children.length > 0) {\n            return supportedNodeData;\n        }\n        return null;\n    }\n\n    prepareNewCopy() {\n        /**\n         * Prepare a new element with new copy template to be used in the overview\n         */\n        const copiesOverview = this.markup.querySelector('#copiesOverview');\n        const newCopy = this.getNewCopyTemplate();\n\n        const removeFromOverview = newCopy.querySelector('.removeFromOverview');\n        removeFromOverview.addEventListener('click', () => {\n            copiesOverview.removeChild(newCopy);\n        });\n\n        copiesOverview.prepend(newCopy);\n\n    }\n\n    setupPrototypes() {\n        /**\n         * Setup prototypes\n         */\n\n        // Protoype config\n        return new Promise((resolve, reject) => {\n            const urlPrototypes = '/ajax/articlePrototype/get-all';\n            lab_api.v1.util.httpClient.request(urlPrototypes)\n                .then((resp) => {\n\n                    const data = resp.data.map((prototype) => ({\n                        value: prototype.id,\n                        name: prototype.name,\n                        site: prototype.site\n                    }));\n                    this.prototypes = data;\n                    resolve(data);\n                });\n        });\n\n    }\n\n    updatePrototypeList(siteId, htmlElement, prototypeName = null) {\n        /**\n         * Update the prototype list based on the selected site\n         * @param {number} siteId - The site id to filter prototypes by\n         * @param {HTMLElement} htmlElement - The html element to update the prototype list in\n         * @param {string} prototypeName - The prototype name to be selected\n         */\n        this.setupPrototypes().then(() => {\n            let sitePrototypes = this.prototypes.filter((prototype) => Number(prototype.site) === Number(siteId));\n            if (prototypeName) {\n                sitePrototypes = sitePrototypes.map((prototype) => ({ ...prototype, selected: prototype.name === prototypeName }));\n            }\n            for (const buttonSelector of ['#btnCreateNewTranslation', '#btnCreateLinkedCopy']) {\n                const btn = htmlElement.querySelector(buttonSelector);\n                if (!sitePrototypes || sitePrototypes.length === 0) {\n                    btn.classList.add('lab-disabled');\n                } else if (btn.classList.contains('lab-disabled')) {\n                    btn.classList.remove('lab-disabled');\n                }\n            }\n            const prototypeElement = htmlElement.querySelector('.prototype_id');\n\n            const prototypeHtml = `\n            <select name=\"prototype_id\" id=\"prototype_id\">\n                {{#prototypes}}\n                <option value=\"{{value}}\" {{#selected}}selected{{/selected}}>{{name}}</option>\n                {{/prototypes}}\n            </select>`;\n            const prototypeMarkup = this.api.v1.util.dom.renderTemplate(prototypeHtml, {\n                prototypes: sitePrototypes\n            }, true);\n            prototypeElement.innerHTML = prototypeMarkup.innerHTML;\n        });\n    }\n\n    translateContent(params) {\n        /**\n         * Translate content with the text assistant Labrador AI\n         */\n        return new Promise((resolve, reject) => {\n            const res = this.api.v1.ns.get('textAssistant.generateContent')(this.rootModel, null, null, params);\n            resolve(res);\n\n        });\n\n    }\n\n    translateNode(node, params, splitBodytext = false) {\n        /**\n         * Translate a node with the text assistant Labrador AI\n         * Returns a promise\n         * @param {object} node - The node to be translated\n         * @param {object} params - The parameters to be used for translation\n         * @param {boolean} splitBodytext - If the bodytext should be splitted into smaller parts\n         */\n        return new Promise((resolve, reject) => {\n            const promises = [];\n\n            // BODYTEXT\n            // Split bodytext into smaller parts\n            if (splitBodytext === true && node.fields && node.fields.bodytext) {\n                const splittedBodytext = this.splitText(node.fields.bodytext);\n                for (const i of Object.keys(splittedBodytext)) {\n                    const content = JSON.stringify({ [`bodytext_${  i }`]: splittedBodytext[i] });\n                    const paramsBodytext = params;\n                    paramsBodytext.articleFields = content;\n                    const result = this.translateContent(paramsBodytext);\n                    promises.push(result);\n\n                }\n            }\n\n            // FIELDS (not bodytext)\n            const articleFields = node.fields;\n            if (articleFields.bodytext) {\n                delete articleFields.bodytext;\n            }\n            // For key not fields\n            if (node.path) {\n                for (const key of Object.keys(node.path)) {\n                    articleFields[key] = node.path[key];\n                }\n            }\n\n            const content = JSON.stringify(articleFields);\n            const paramsWithoutBodytext = params;\n            paramsWithoutBodytext.articleFields = content;\n            const result = this.translateContent(paramsWithoutBodytext);\n            promises.push(result);\n\n            // CHILDREN\n            if (node.children && node.children.length > 0) {\n                this.childrenContent = this.prepareChildrenForTranslation(node.children);\n                this.childrenContent = JSON.stringify(this.childrenContent);\n                const paramsChildren = params;\n                paramsWithoutBodytext.articleFields = this.childrenContent;\n                const resultChildren = this.translateContent(paramsChildren);\n                promises.push(resultChildren);\n\n            }\n\n            Promise.all(promises)\n                .then((resultFromPromises) => {\n                    const bodytextPartials = {};\n                    const translatedChildrenContent = {};\n                    const translation = {\n                        fields: {},\n                        children: []\n                    };\n                    if (this.childrenContent && typeof this.childrenContent === 'string') {\n                        this.childrenContent = JSON.parse(this.childrenContent);\n                    } else if (!this.childrenContent) {\n                        this.childrenContent = {};\n                    }\n                    for (const r of resultFromPromises) {\n                        const data = JSON.parse(r);\n                        for (const key of Object.keys(data)) {\n                            if (key.includes('bodytext_')) {\n                                bodytextPartials[key] = data[key];\n                            } else if (this.childrenContent[key]) {\n                                translatedChildrenContent[key] = data[key];\n                            } else {\n                                translation.fields[key] = data[key];\n                            }\n                        }\n\n                    }\n                    let bodytext = '';\n                    for (let i = 1; i <= Object.keys(bodytextPartials).length; i++) {\n                        bodytext += bodytextPartials[`bodytext_${ i }`];\n\n                    }\n                    translation.fields.bodytext = bodytext;\n\n                    if (this.childrenContent) {\n                        translation.children = this.handleTranslatedChildren(translatedChildrenContent);\n                    }\n                    resolve(translation);\n                });\n\n        });\n    }\n\n    handleTranslatedChildren(children) {\n        /**\n         * Handle translated children\n         * @param {object} children - The children to be translated\n         * @returns {array} - The translated children\n         */\n        const translatedChildren = {};\n        for (const key of Object.keys(children)) {\n            const [type, id, field] = key.split('_');\n            if (!translatedChildren[`${ type }_${ id }`]) {\n                translatedChildren[`${ type }_${ id }`] = { type, id, fields: {} };\n            }\n            translatedChildren[`${ type }_${ id }`].fields[field] = children[key];\n        }\n        return Object.values(translatedChildren);\n\n    }\n\n    prepareChildrenForTranslation(children) {\n        /**\n         * Prepare children for translation\n         * @param {object} children - The children to be translated\n         */\n        const childrenToTranslate = {};\n        for (const child of children) {\n            const childKey = `${ child.type }_${ child.id }`;\n            for (const field of Object.keys(child.fields)) {\n                childrenToTranslate[`${ childKey }_${ field }`] = child.fields[field];\n            }\n            if (child.tags) {\n                childrenToTranslate[`${ childKey }_tags`] = child.tags;\n            }\n            if (child.children && child.children.length > 0) {\n                const grandchildren = this.prepareChildrenForTranslation(child.children);\n                if (grandchildren) {\n                    for (const key of Object.keys(grandchildren)) {\n                        childrenToTranslate[key] = grandchildren[key];\n                    }\n                }\n\n            }\n        }\n\n        return childrenToTranslate;\n    }\n\n    updateProgressBar(progressBar, options) {\n        /**\n         * Update the progress meter\n         * @param {number} update - The amount to update the progress meter\n         */\n        /*\n        if (!progressBar.classList.contains('lab-busy')) {\n            progressBar.classList.add('lab-busy');\n        } */\n        if (options.updateAttributes) {\n            for (const attributeType of options.updateAttributes) {\n                let attributeValue = progressBar.getAttribute(attributeType);\n                if (!attributeValue) {\n                    attributeValue = 0;\n                } else {\n                    attributeValue = Number(attributeValue);\n                }\n                progressBar.setAttribute(attributeType, attributeValue + 1);\n            }\n        }\n        if (options.setAttributeValues) {\n            for (const attribute of Object.keys(options.setAttributeValues)) {\n                progressBar.setAttribute(attribute, options.setAttributeValues[attribute]);\n            }\n        }\n\n        if (options.finished === true) {\n            // progressBar.classList.add('lab-hidden');\n            progressBar.setAttribute('value', 10);\n            progressBar.setAttribute('max', 10);\n        }\n\n    }\n\n    updateProgressBarInfo(htmlElement) {\n        /**\n         * Update the progress bar info\n         * @param {HTMLElement} htmlElement - The html element to update the progress bar info in\n         */\n        const articleCopyElement = htmlElement;\n        const siteName = articleCopyElement.querySelector('select[name=\"site_id\"]').selectedOptions[0].textContent;\n        const prototypeName = articleCopyElement.querySelector('select[name=\"prototype_id\"]').selectedOptions[0].textContent;\n        const languageName = articleCopyElement.querySelector('select[name=\"languages\"]').selectedOptions[0].textContent;\n        if (siteName && prototypeName && languageName) {\n            const infoText = `Translating article to <b>${ languageName }</b> for <b>${ siteName }</b> using <b>${ prototypeName }</b>`;\n            const progressBarInfo = articleCopyElement.querySelector(`#progress-info`);\n            progressBarInfo.innerHTML = infoText;\n            progressBarInfo.classList.remove('lab-hidden');\n        }\n        const title = articleCopyElement.querySelector('h3');\n        if (title.textContent.includes('Create')) {\n            title.textContent = title.textContent.replace('Create', 'Translating');\n        }\n    }\n\n    hideTranslationSelections(htmlElement) {\n        /**\n         * Hide translation selections\n         * @param {HTMLElement} htmlElement - The html element to hide translation selections in\n         */\n        htmlElement.querySelectorAll('.translationSelection').forEach((selection) => {\n            selection.classList.add('lab-hidden');\n        });\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport class RoxenExport {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = this.api.v1.user.hasPermission('export_roxen');\n        this.multiPublicationEnabled = this.api.v1.config.get('roxen.multiPublicationEnabled');\n        this.dateTimeHelper = new DateTimeHelper(this.api.v1.config.get('lang') || undefined);\n        this.dom = {\n            exportDate: null,\n            message: null\n        };\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-medium lab-space-above-none\">Export article to Roxen</h2>\n                <p class=\"lab-para lab-grid-large-12\">Last exported: <strong data-name=\"export-date\">--</strong></p>\n            </div>\n            <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"lab-roxen-publication\">Select publication</label>\n                    <select name=\"lab-roxen-publication-select\" id=\"lab-roxen-publication-select\" disabled></select>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <label for=\"publishedDate\">Select print edition</label>\n                    <input type=\"date\" id=\"publishedDate\" name=\"fields.published\" value=\"\">\n                </div>\n            </div>\n            <div class=\"lab-formgroup lab-grid lab-space-above-none lab-align-right\">\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-space-below-medium\">\n                    <input type=\"button\" value=\"Export article\">\n                </div>\n            </div>\n            <div class=\"lab-formgroup lab-grid lab-space-above-none\">\n                <p class=\"lab-para lab-grid-large-12\" id=\"messageArea\"></p>\n            </div>\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Export',\n            label: 'Roxen'\n        };\n    }\n\n    onPaths() {}\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                name: this.rootModel.get('fields.name'),\n                hostpath: this.rootModel.get('fields.hostpath'),\n                lab_canonical: this.rootModel.get('fields.lab_canonical'),\n                defaultsection: this.rootModel.get('fields.defaultsection')\n            }\n        }, true);\n\n        const selectContainer = markup.querySelector('#lab-roxen-publication-select').parentNode;\n        const publication = this.rootModel.get('fields.print_publication');\n        const url = `/ajax/integration-services/proxy/export/roxen/?action=list&site=${ this.api.v1.site.getSite().alias }`;\n\n        this.api.v1.util.httpClient.get(url).then((payload) => {\n            if (payload.error) { return; }\n            if (Array.isArray(payload)) {\n                selectContainer.innerHTML = '';\n\n                if (this.multiPublicationEnabled) {\n                    const options = payload.map((item) => ({\n                        value: item.prefix,\n                        text: item.title\n                    }));\n\n                    const selectedValues = [];\n                    if (publication) {\n                        options.forEach((option) => {\n                            if (option.value === publication) {\n                                selectedValues.push(option.value);\n                            }\n                        });\n                    }\n\n                    const multiSelect = this.api.v1.ui.element.getMultiSelect({\n                        options,\n                        selectedValues,\n                        id: 'lab-roxen-publication-select',\n                        name: 'lab-roxen-publication-select',\n                        showSelectAll: true,\n                        selectAllText: 'Select All',\n                        visibleItems: 5,\n                        labelElement: markup.querySelector('label[for=\"lab-roxen-publication\"]'),\n                        labelText: 'Select publication',\n                        labelCountText: '($count selected)',\n                        returnObject: true\n                    });\n\n                    // Append the multi-select element to the container\n                    selectContainer.appendChild(multiSelect.element);\n\n                    // Trigger initial onChange to set the count\n                    const selectedOptions = multiSelect.getSelectedValues();\n                    if (selectedOptions.length > 0) {\n                        const label = markup.querySelector('label[for=\"lab-roxen-publication\"]');\n                        label.innerHTML = `Select publication <span class=\"lab-selection-count\">(${ selectedOptions.length } selected)</span>`;\n                    }\n                } else {\n                    // Create standard select for single selection\n                    const select = document.createElement('select');\n                    select.id = 'lab-roxen-publication-select';\n                    select.name = 'lab-roxen-publication-select';\n\n                    // Add options\n                    payload.forEach((item) => {\n                        const option = document.createElement('option');\n                        option.value = item.prefix;\n                        option.textContent = item.title;\n                        option.selected = item.prefix === publication;\n                        select.appendChild(option);\n                    });\n\n                    selectContainer.appendChild(select);\n                }\n            }\n        }).catch((error) => {\n            // Integration do not return anything if Roxen is not set up in config. Ignore.\n        });\n\n        this.dom.exportDate = markup.querySelector('[data-name=export-date]');\n        this.dom.messageArea = markup.querySelector('#messageArea');\n        this.updateExportDate();\n        this.setupSubmit(markup);\n        return markup;\n    }\n\n    setupSubmit(markup) {\n        const btn = markup.querySelector('input[type=button]');\n\n        btn.addEventListener('click', (event) => {\n            const editionDate = markup.querySelector('#publishedDate').value;\n            this.displayMessage('');\n            if (editionDate !== '') {\n\n                markup.classList.add('lab-busy');\n                btn.setAttribute('disabled', 'disabled');\n\n                this.api.v1.util.httpClient.get(`/prototype/get-node-and-data?id=${ this.rootModel.getId() }`, { resetCache: true }).then((d) => {\n                    const data = { ...d };\n                    const site = this.api.v1.site.getSite();\n                    const publication = `lab-${ site.id }`;\n                    const publicationsSelect = markup.querySelector('#lab-roxen-publication-select');\n                    const publicationFromSelect = publicationsSelect.value;\n                    data.data.fields.print_publication = (publicationFromSelect || publication);\n                    data.data.fields.print_edition_date = editionDate;\n                    if (this.multiPublicationEnabled) {\n                        data.publicationsArray = publicationsSelect.selectedOptions.length ? Array.from(publicationsSelect.selectedOptions).map((o) => o.value) : [];\n                    }\n                    const export_url = `/ajax/integration-services/proxy/export/roxen?imageBaseUrl=${ this.api.v1.properties.get('image_server') }&site=${ site.alias }`;\n                    this.api.v1.util.httpClient.request(\n                        export_url,\n                        {\n                            body: JSON.stringify(data),\n                            method: 'POST'\n                        }\n                    ).then((resp) => {\n                        if (Array.isArray(resp)) {\n                            // Check if each item in the array has an object_id\n                            const allValid = resp.every((item) => item && item.object_id);\n                            const validItems = resp.filter((item) => item && item.object_id);\n\n                            if (allValid && resp.length > 0) {\n                                // All items had object_id\n                                this.rootModel.set('fields.print_exported', Math.floor(Date.now() / 1000));\n                                this.rootModel.set('fields.print_publication', (publicationFromSelect || publication));\n                                this.rootModel.set('fields.print_edition_date', editionDate);\n                                this.rootModel.set('fields.print_id', validItems.map((item) => item.object_id).join(','));\n                                this.displayMessage(`The article was successfully exported to ${ validItems.length } publication(s) in Roxen`);\n                                this.updateExportDate();\n                            } else {\n                                // Some items were missing object_id or array was empty\n                                this.displayMessage('There was a problem sending the article');\n                                console.log(resp);\n                            }\n                        } else if (resp && resp.object_id) {\n                            // Handle single object response (original behavior)\n                            this.rootModel.set('fields.print_exported', Math.floor(Date.now() / 1000));\n                            this.rootModel.set('fields.print_publication', (publicationFromSelect || publication));\n                            this.rootModel.set('fields.print_edition_date', editionDate);\n                            this.rootModel.set('fields.print_id', resp.object_id);\n                            this.displayMessage('The article was successfully exported to Roxen');\n                            this.updateExportDate();\n                        } else {\n                            this.displayMessage('There was a problem sending the article');\n                            console.log(resp);\n                        }\n                        markup.classList.remove('lab-busy');\n                        btn.removeAttribute('disabled');\n                    }).catch((e) => {\n                        this.displayMessage('The export to Roxen failed. Try again. If you continue to see this message contact support@publishlab.com');\n                        console.error('Error: ', e, e.status);\n                        markup.classList.remove('lab-busy');\n                        btn.removeAttribute('disabled');\n                    });\n                });\n            }\n        });\n    }\n\n    displayMessage(msg) {\n        this.dom.messageArea.innerHTML = msg;\n    }\n\n    updateExportDate() {\n        const lastExport = this.rootModel.get('fields.print_exported');\n        let formattedDate = 'Never';\n        if (lastExport) {\n            formattedDate = this.dateTimeHelper.timestampToNiceDate(lastExport);\n        }\n        this.dom.exportDate.innerHTML = formattedDate;\n    }\n\n}\n","import contentLanguages from '../../lib/helpers/ContentLanguages.js';\n\nexport class TopicSummary {\n\n    /**\n     * The app 'Topic Summary' lets a user generate a factbox from a selection of articles.\n     * The user may adjust the prompt and visual output by selecting options.\n     * The app uses the Labrador api to fetch articles and update the factbox.\n     *\n     * @param {object} api - The Labrador api\n     * @param {object} model - The Labrador model\n     * @param {object} view - The Labrador view\n     * @param {object} aiSettings - Settings for the ai-integration (model, provider, integration)\n     * @param {object} options - Options for the ai prompt\n    */\n\n    constructor(api, model, view, aiSettings = { model: 'gpt-4o', provider: 'openAi', integration: 'openAi' }, options = { factboxType: 'overview' }) {\n        this.api = api;\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.factboxModel = model;\n        this.factboxViews = this.api.v1.view.getViews(this.factboxModel);\n        this.enabled = true;            // Enable app\n        this.respons = null;            // Respons from ai service\n\n        this.articleIds = [];           // List of ids for all selected article\n        this.currentlySelected = [];    // List of ids for currently selected articles\n        this.articleSelection = {};     // Data for selected articles\n\n        this.aiSettings = aiSettings;   // Settings for the ai-integration (model, provider, integration)\n        this.options = options;         // Options for the ai prompt\n\n        this.template = `\n        <div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium\">\n\n                    <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Generate topic summary <span class=\"labicon-magic_wand\"></span></h2>\n                    <p>Generate a topic summary with a <b><span id=\"selectedType\">{{ factboxType }}</span></b> style <span id=\"focalpointText\"></span>in <b><span id=\"selectedLang\">{{ languageName }}</span></b> from a selection of articles.\n                    </p>\n                    <p class=\"lab-hidden\">The text will be generated with model '<b>{{ aiSettings.model }}</b>' from <b>{{ aiSettings.provider }}</b> using an integration to <b>{{ aiSettings.integration }}</b>.</p>\n                    \n                </div>\n                <div>\n                    <span id=\"get-article-list\" type=\"button\" class=\"lab-btn\" style=\"float:left; position:relative\">Select articles</span>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-hidden lab-grid lab-grid-gap lab-space-above-none\">\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium\">\n\n                    <h3>Select articles by id</h3>\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-small\">\n                        <input type=\"text\" placeholder=\"100090, 100102\" id=\"articleids\"></input>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-small\">\n                        <div>\n                            <span id=\"get-articles-textarea\" type=\"button\" class=\"lab-btn\" style=\"float:left; position:relative\">Fetch articles by ids\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid-large-12 lab-grid-gap\">                    \n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium\">\n                    <h3>Selected articles:</h3>\n                    <ul id=\"article-selection\">\n                        <p><em>No articles selected</em></p>\n                    </ul>\n                </div>\n            </div>\n            <div class=\"lab-formgroup lab-grid-large-12 lab-grid-gap lab-space-below-small\">                    \n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <p id=\"generated-text\"></p>\n                </div>\n            </div>\n        </div>`;\n\n        this.asideTemplate = `\n        <div>\n            <div class=\"lab-aside-settings\">\n                <div>\n                    <h4 class=\"lab-title\">Factbox type</h4>\n                    <select id=\"factboxType\">\n                        <option value=\"overview\">Topic overview</option>\n                        <option value=\"development\">Context development</option>\n                        <option value=\"brief\">Brief summary</option>\n                    </select>\n                    <p class=\"lab-info\"><span id=\"factbox-description\">Generate a broad overview and focus on the most important aspects of the topic</span></p>\n                </div>\n            </div>\n            <div class=\"lab-aside-settings\">\n        \n                <div>\n                    <h4 class=\"lab-title\">Language</h4>    \n                    <select id=\"languages\">\n                        <option value=\"\">Select language:</option>\n                        {{ #languages }}\n                        <option value=\"{{ code }}\"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>\n                        {{ /languages }}\n                    </select>\n                </div>\n            </div>\n            <div class=\"lab-aside-settings\">\n                <div>\n                    <h4 class=\"lab-title\">Visual styling</h4>\n                    <p class=\"lab-para lab-hidden\"><label>Add source references<input type=\"checkbox\" title=\"Include a link to article sources\" id=\"use-references\" style=\"float:left;\"></label></p>\n                    <p class=\"lab-para\"><label>Bullet points<input type=\"checkbox\" title=\"Add a bulletpoint for each paragraph\" id=\"use-bulletpoints\" style=\"float:left;\"></label></p>\n                    <p class=\"lab-para lab-hidden\"><label>Bold names<input type=\"checkbox\" title=\"Add bold styling on names\" id=\"use-bold-names\" style=\"float:left;\"></label></p>\n                    <p class=\"lab-para lab-hidden\"><label>Bold keywords<input type=\"checkbox\" title=\"Add bold styling on keywords\" id=\"use-bold-keywords\" style=\"float:left;\"></label></p>\n                    <p class=\"lab-para lab-hidden\"><label>Add subheader(s)<input type=\"checkbox\" title=\"Include suitable subheader(s)\" id=\"use-subheader\" style=\"float:left;\"></label></p>\n                </div>\n            </div>\n            <div class=\"lab-aside-settings\">\n            <div>\n                <h4 class=\"lab-title\">Focal point</h4>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-small\">\n                    <input type=\"text\" placeholder=\"Optional\" id=\"focalpoint\"></input>\n                </div>\n                <p class=\"lab-info\">Write a name, an incident or a place that you want to emphasize in the summary. The AI will try to include this in the summary.</p>\n            </div>\n        </div>\n        </div>`;\n\n        this.display();\n    }\n\n    onPaths() {\n        /**\n         * Paths to listen for changes\n         */\n        return {\n            'fields.seolanguage': {\n                node: 'fields.seolanguage'\n            }\n        };\n    }\n\n    getAsideMarkup() {\n        /**\n         * Aside modal markup\n         * The aside modal is used to select options for the prompt\n         */\n        const seolanguage = this.rootModel.get('fields.seolanguage');\n        const defaultLanguage = lab_api.v1.config.get('contentLanguage');\n\n        this.selectedLanguage = seolanguage || defaultLanguage;\n\n        const languages = contentLanguages.map((language) => ({ name: language.name, code: language.code, selected: language.code === this.selectedLanguage }));\n        const languageName = this.getLanguageName(this.selectedLanguage);\n\n        this.asideMarkup = lab_api.v1.util.dom.renderTemplate(this.asideTemplate, {\n            title: 'Select language',\n            languages,\n            languageName,\n            language: this.selectedLanguage\n        });\n        return this.asideMarkup;\n    }\n\n    getMarkup() {\n        /**\n         * Main modal markup\n         */\n        this.markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            aiSettings: this.aiSettings\n        }, true);\n\n        return this.markup;\n    }\n\n    display() {\n        // Set up markups\n        this.asideMarkup = this.getAsideMarkup();\n        this.markup = this.getMarkup();\n\n        // Evaluate history\n        let history = this.factboxModel.get('fields.ai_metadata_json');\n        if (history && history.length > 0) {\n            history = JSON.parse(history);\n            if (history.selectionSourceIds) {\n                this.articleIds = history.selectionSourceIds;\n                this.updateArticleList(this.articleIds)\n                    .then(() => {\n                        this.updateModalMarkup();\n                    });\n            }\n        }\n\n        // Main modal\n        this.modal = this.api.v1.ui.modal.dialog({\n            container: {\n                width: 1400,\n                minHeight: 800\n\n            },\n            aside: {\n                expandable: true,\n                position: 'left',\n                header: 'Options',\n                content: this.asideMarkup,\n                noPadding: true,\n                width: '400px'\n            },\n            content: {\n                header: 'Generate topic summary',\n                markup: this.markup.innerHTML\n            },\n            footer: {\n                informalText: '<strong>This function in Labrador CMS is using advanced artificial intelligence developed by OpenAI API.</strong><br>Text from the article is not used to train or improve the public data models. Use generated text from these functions as suggestions, and be sure to manually verify them. Labrador CMS shall not be held liable for any use of the generated text.',\n                buttons: [\n                    {\n                        type: 'button',\n                        id: 'generate-insert',\n                        value: 'Generate',\n                        class: 'lab-generate lab-disabled',\n                        highlight: false\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#get-article-list',\n                event: 'click',\n                callback: () => {\n                    this.selectFromArticleCollection();\n\n                }\n            },\n            {\n                selector: '#generate-insert',\n                event: 'click',\n                callback: () => {\n                    this.updateFactboxViews({ addClasses: ['lab-busy', 'lab-busy-top'] });\n\n                    this.options.articles = JSON.stringify(this.articleSelection);\n                    this.options.language = this.getLanguageName(this.selectedLanguage);\n                    this.api.v1.ns.get('textAssistant.fetchByGroupName')('topic_summary', this.aiSettings, this.options).then((respons) => {\n                        const r = this.cleanUpJsonString(respons);\n                        this.respons = JSON.parse(r);\n                        this.updateFactboxModel();\n                        this.updateFactboxViews({ removeClasses: ['lab-busy', 'lab-busy-top'] });\n\n                    });\n                    this.modal.close();\n\n                }\n            }],\n            callbacks: {\n                didDisplay: (modal) => {\n                    /**\n                     * Callbacks to handle user input from options define values in the prompt\n                     */\n\n                    this.buttonsGenerate = this.modal.markup.querySelectorAll('.lab-generate');\n\n                    // Language\n                    const languageSpan = modal.markup.querySelector('#selectedLang');\n                    const language = modal.markup.querySelector('#languages');\n\n                    language.addEventListener('change', (event) => {\n                        this.selectedLanguage = language.value;\n                        languageSpan.textContent = this.getLanguageName(language.value);\n                    });\n                    this.selectedLanguage = language.value;\n                    languageSpan.textContent = this.getLanguageName(language.value);\n\n                    // Factbox type\n                    const typeSpan = modal.markup.querySelector('#selectedType');\n                    const factboxType = modal.markup.querySelector('#factboxType');\n                    const factboxDescription = modal.markup.querySelector('#factbox-description');\n\n                    factboxType.addEventListener('change', (event) => {\n                        typeSpan.textContent = factboxType.value;\n                        this.options.factboxType = { [factboxType.value]: true };\n\n                        // Update content description\n                        if (factboxType.value === 'overview') {\n                            factboxDescription.textContent = 'Generate a broad overview and focus on the most important aspects of the topic';\n                        } else if (factboxType.value === 'development') {\n                            factboxDescription.textContent = 'Generate summary that outlines the changes and focus on the development of the topic';\n                        } else if (factboxType.value === 'brief') {\n                            factboxDescription.textContent = 'Generate a brief summary of the topic';\n                        } else {\n                            factboxDescription.textContent = '';\n                        }\n\n                    });\n\n                    typeSpan.textContent = factboxType.value;\n                    this.options.factboxType = { [factboxType.value]: true };\n\n                    /**\n                     * Style options\n                     */\n\n                    // Use bulletpoints\n                    const optionBulletpoints = modal.markup.querySelector('#use-bulletpoints');\n                    optionBulletpoints.addEventListener('click', (event) => {\n                        this.options.bulletpoints = optionBulletpoints.checked;\n                    });\n\n                    /*\n                    // Reference - link to urls\n                    const optionReferences = modal.markup.querySelector('#use-references');\n                    optionReferences.addEventListener('click', (event) => {\n                        this.options.references = optionReferences.checked;\n                    });\n\n                    // Bold names\n                    const optionBoldNames = modal.markup.querySelector('#use-bold-names');\n                    optionBoldNames.addEventListener('click', (event) => {\n                        this.options.boldNames = optionBoldNames.checked;\n                    });\n\n                    // Bold keywords\n                    const optionBoldKeywords = modal.markup.querySelector('#use-bold-keywords');\n                    optionBoldKeywords.addEventListener('click', (event) => {\n                        this.options.boldKeywords = optionBoldKeywords.checked;\n                    });\n\n                    // Add subheader\n                    const optionSubheader = modal.markup.querySelector('#use-subheader');\n                    optionSubheader.addEventListener('click', (event) => {\n                        this.options.subheader = optionSubheader.checked;\n                    });\n                    */\n\n                    // Focal point\n                    const focalpointText = modal.markup.querySelector('#focalpointText');\n                    const optionFocalpoint = modal.markup.querySelector('#focalpoint');\n                    optionFocalpoint.addEventListener('change', (event) => {\n                        if (optionFocalpoint.value.length > 0) {\n                            this.options.focalpoint = optionFocalpoint.value;\n                            focalpointText.innerHTML = `that emphasizes on <b>${ optionFocalpoint.value }</b> `;\n                        } else {\n                            this.options.focalpoint = null;\n                            focalpointText.innerHTML = '';\n                        }\n                    });\n\n                    console.log(this.factboxModel);\n\n                },\n                end: () => {\n                }\n\n            }\n        });\n    }\n\n    updateFactboxViews(updateActions = null) {\n        /**\n         * Update all views from factbox model\n         * @param {object} updateActions - Actions to update views with\n         */\n\n        this.factboxViews = this.api.v1.view.getViews(this.factboxModel);\n        if (this.factboxViews && updateActions !== null) {\n            // Remove classes for each view\n            if (updateActions.removeClasses) {\n                for (const elementClass of updateActions.removeClasses) {\n                    for (const factboxView of this.factboxViews) {\n                        factboxView.markup.classList.remove(elementClass);\n                    }\n                }\n            }\n\n            // Add classes for each view\n            if (updateActions.addClasses) {\n                for (const elementClass of updateActions.addClasses) {\n                    for (const factboxView of this.factboxViews) {\n                        factboxView.markup.classList.add(elementClass);\n                    }\n                }\n            }\n        }\n    }\n\n    updateModalMarkup() {\n        /**\n         * Update UI in main modal with a list of selected articles\n         * Disable generate-buttons when list of selected articles is empty\n         * Make a list of clickable article references with styling\n         * Add event listeners to remove articles from list of selected articles\n         * */\n\n        const elementSelection = this.modal.markup.querySelector('#article-selection');\n        const selectionIds = Object.keys(this.articleSelection);\n\n        if (selectionIds && selectionIds.length === 0) {\n            // Update UI when zero articles are selected\n            elementSelection.innerHTML = '<p><em>No articles selected</em></p>'; // Clear existing content\n            for (const button of this.buttonsGenerate) {\n                button.classList.add('lab-disabled');\n            }\n        } else if (selectionIds && selectionIds.length >= 1) {\n            // Update UI when there is a selection of articles\n            elementSelection.innerHTML = ''; // Clear existing content\n            for (const button of this.buttonsGenerate) {\n                button.classList.remove('lab-disabled');\n            }\n\n            // Update list of articles\n            for (const id of selectionIds) {\n                const listItem = document.createElement('li');\n                listItem.textContent = `${ id }: ${ this.articleSelection[id].title }`;\n                elementSelection.appendChild(listItem);\n            }\n\n            // Add styling to list of articles\n            const articleElements = this.modal.markup.querySelectorAll('#article-selection > li');\n            articleElements.forEach((originalArticleElement) => {\n                const articleElement = originalArticleElement.cloneNode(true);\n\n                // To indicate it's clickable\n                const marker = document.createElement('span');\n                marker.textContent = 'X';\n                marker.style.position = 'absolute';\n                marker.style.left = '-20px';\n                marker.style.top = '0';\n                marker.style.display = 'none'; // Initially hidden\n                marker.style.color = '#ff0000';\n                marker.style.fontWeight = 'bold';\n                marker.style.cursor = 'pointer';\n\n                articleElement.appendChild(marker);\n                articleElement.style.position = 'relative'; // Ensure articleElement is positioned\n\n                // Remove selected article when clicked\n                articleElement.addEventListener('click', (event) => {\n                    const text = originalArticleElement.textContent.split(':');\n                    if (text && text.length > 0) {\n                        const id = text[0].trim();\n                        this.removeFromArticleList(id);\n                        this.updateArticlesListAndCheckEmpty();\n                    }\n                });\n\n                // Indicate that selected article can be removed when hovering\n                articleElement.addEventListener('mouseenter', (event) => {\n                    const eventTarget = event.target;\n                    marker.style.display = 'inline';\n                    eventTarget.style.backgroundColor = 'rgba(255, 0, 0, 0.4)'; // Semi-transparent red\n                    eventTarget.style.cursor = 'pointer';\n                    articleElement.style.listStyleType = 'none';\n\n                });\n\n                // Remove styling if mouse leaves\n                articleElement.addEventListener('mouseleave', (event) => {\n                    const eventTarget = event.target;\n                    marker.style.display = 'none';\n                    eventTarget.style.backgroundColor = '';\n                    articleElement.style.listStyleType = 'disc';\n\n                });\n                originalArticleElement.parentNode.replaceChild(articleElement, originalArticleElement);\n\n            });\n        }\n\n    }\n\n    updateArticlesListAndCheckEmpty() {\n        this.updateArticleList(this.articleIds).then(() => {\n            this.updateModalMarkup();\n            // Check and update for empty state\n            if (this.modal.markup.querySelectorAll('#article-selection > li').length === 0) {\n                const elementSelection = this.modal.markup.querySelector('#article-selection');\n                elementSelection.innerHTML = '<p><em>No articles selected</em></p>';\n            }\n        });\n    }\n\n    selectFromArticleCollection() {\n        /**\n         * Collection modal to select articles. Uses collection 'ArticlesLatest' as UI\n         */\n        return new Promise((resolve, reject) => {\n            lab_api.v1.collection.display(\n                {\n                    /**\n                     * Collection modal to select articles. Uses collection 'ArticlesLatest' as UI\n                     */\n                    name: 'ArticlesLatest',\n                    modal: true,\n                    isSilent: false,\n                    skipCache: true,\n                    options:\n                    {\n                        label: 'Select articles for topic summary',\n                        width: 1400,\n                        minHeight: 800,\n                        isSilent: true,\n                        type: 'topicSummary',\n                        externalContentUpdater: true,\n                        updateContents: {\n                            footer: true,\n                            markExisting: true\n                        },\n                        click: (uiInterface, model, element, event) => {\n                            /**\n                             * Callback when an article is clicked\n                             * @param {object} uiInterface - The Labrador uiInterface\n                             * @param {object} model - The Labrador model\n                             * @param {object} element - The html element\n                             * @param {object} event - The event\n                             */\n                            let id = model.data.contentdata.instance_of;\n                            id = String(id);\n\n                            if (!this.articleIds.includes(id)) {\n                                this.articleIds.push(id);\n                                this.currentlySelected.push(id);\n                            } else {\n                                this.articleIds = this.articleIds.filter((value) => value !== id);\n                                this.currentlySelected = this.currentlySelected.filter((value) => value !== id);\n\n                                this.updateArticleList();\n                            }\n\n                        },\n                        updateContent: (htmlElement, params) => {\n                            /**\n                             * Update content in modal when it is displayed\n                             * @param {object} htmlElement - The html element to update\n                             * @param {object} params - Parameters to update the html element\n                             */\n                            if (params && params.type === 'footer') {\n                                const form = htmlElement;\n                                const elements = form.querySelectorAll('li'); // Select the first li in the list\n                                for (const element of elements) {\n                                    element.classList.remove('lab-grid-large-3');\n                                    element.classList.add('lab-grid-large-2');\n                                }\n\n                                const listItem = document.createElement('li');\n                                listItem.className = 'lab-grid-large-4 lab-btn lab-small';\n                                listItem.style.cssText = 'display: flex; justify-content: center; align-items: center;';\n                                listItem.innerHTML = '<b>Finished</b>';\n                                // ADD EVENT LISTENER THAT CLOSES THE MODAL\n\n                                listItem.addEventListener('click', (event) => {\n                                    this.api.v1.ui.modal.close();\n                                });\n\n                                form.appendChild(listItem); // If there are no list items, just append it\n                            } else if (params && params.type === 'markExisting') {\n                                const id = String(params.id);\n                                const item = htmlElement;\n\n                                if ((!this.articleIds || !(this.articleIds.length > 0)) && (!this.currentlySelected || !(this.currentlySelected.length > 0))) {\n                                    // Remove selected (not in article lists)\n                                    if (item.element.classList.contains('lab-generate')) {\n                                        item.element.classList.remove('lab-generate');\n                                    }\n                                    if (item.element.classList.contains('lab-selected')) {\n                                        item.element.classList.remove('lab-selected');\n                                    }\n                                    return item;\n                                }\n\n                                // Remove lab-highlight-item (green color for article teasers on page)\n                                if (item.element.classList.contains('lab-highlight-item')) {\n                                    item.element.classList.remove('lab-highlight-item');\n                                }\n\n                                // Add lab-generate (purple color for new pick)\n                                if (this.articleIds.includes(id)) {\n                                    if (!item.element.classList.contains('lab-generate')) {\n                                        item.element.classList.add('lab-generate');\n                                    }\n                                } else if (item.element.classList.contains('lab-generate')) {\n                                    item.element.classList.remove('lab-generate');\n                                }\n\n                                // Remove lab-selected (already picked)\n                                if (!this.currentlySelected || !(this.currentlySelected.length > 0)) {\n                                    if (item.element.classList.contains('lab-selected')) {\n                                        item.element.classList.remove('lab-selected');\n                                    }\n\n                                // Add lab-selected and lab-generate (give purple color for new pick)\n                                } else if (this.currentlySelected.includes(id)) {\n                                    if (!item.element.classList.contains('lab-selected')) {\n                                        item.element.classList.add('lab-selected');\n                                    }\n                                    if (!item.element.classList.contains('lab-generate')) {\n                                        item.element.classList.add('lab-generate');\n                                    }\n                                } else if (!this.currentlySelected.includes(id)) {\n                                    if (item.element.classList.contains('lab-selected')) {\n                                        item.element.classList.remove('lab-selected');\n                                    }\n                                }\n\n                                return item;\n                            }\n                            return htmlElement;\n                        },\n                        end: (uiInterface) => {\n                            /**\n                             * Callback when modal is closed\n                             * @param {object} uiInterface - The Labrador uiInterface\n                             */\n                            this.updateArticleList(this.articleIds).then(() => {\n                                // Clean up so that the colors does not remain in other 'ArticlesLatest'-collections\n\n                                // Remove lab-generate and lab-selected for clean up\n                                for (const item of uiInterface.getContentList()) {\n                                    item.element.classList.remove('lab-generate');\n                                    item.element.classList.remove('lab-selected');\n                                }\n\n                                this.currentlySelected = [];\n                                this.updateModalMarkup();\n                                resolve();\n\n                            });\n                        }\n                    }\n                }\n            );\n        });\n    }\n\n    updateArticleList(ids = []) {\n        /**\n         * Update list of article ids\n         * Fetch article nodes by article ids\n         * Update article selection from article nodes\n         */\n        return new Promise((resolve, reject) => {\n            if (!ids) {\n                reject();\n            }\n            // Update this.articleList with new ids\n            this.evaluateIds(ids);\n\n            // Fetch article nodes, and then update article selection with\n            this.fetchArticlesByIds()\n                .then((articleNodes) => {\n                    if (articleNodes) {\n                        this.updateArticleSelection(articleNodes)\n                            .then(() => {\n                                resolve();\n                            });\n\n                    } else {\n                        resolve();\n                    }\n\n                });\n        });\n    }\n\n    removeFromArticleList(id) {\n        /**\n         * Remove article id from list of article ids\n         */\n        if (!this.articleList) {\n            this.articleList = [];\n        }\n        this.articleIds = this.articleIds.filter((value) => value !== id);\n\n    }\n\n    evaluateIds(ids) {\n        /**\n         * Evaluate ids and add to list of article ids\n         */\n        if (ids && ids.length > 0) {\n            for (let id of ids) {\n                id = String(id);\n                id = id.trim();\n\n                if (!this.articleIds.includes(id) && id.length > 0) {\n                    this.articleIds.push(id);\n                }\n            }\n        }\n    }\n\n    fetchArticlesByIds(fields = ['title', 'bodytext']) {\n        /**\n         * Use the labrador api to fetch articles by list of ids\n         */\n        return new Promise((resolve, reject) => {\n\n            let url = '/api/v1/article/?query=';\n\n            if (this.articleIds && this.articleIds.length > 0) {\n                for (const [index, element] of this.articleIds.entries()) {\n                    if (index === 0) {\n                        url += `id:${ element }`;\n                    } else {\n                        url += `%20OR%20id:${ element }`;\n                    }\n                }\n                // Fetch\n                fetch(url)\n                    .then((response) => {\n                        if (!response.ok) {\n                            resolve([]);\n                            // throw Error(response.statusText);\n                        }\n                        return response.json();\n                    })\n                    .then((resp) => {\n                        resolve(resp.result);\n\n                    })\n                    .catch((error) => {\n                        reject(error);\n                    });\n            } else {\n                resolve([]);\n            }\n        });\n\n    }\n\n    updateArticleSelection(articleNodes = [], fields = ['title', 'bodytext', 'published_url', 'published']) {\n        /**\n         * Update article selection with given fields for the\n         * The article selection is included in the prompt for reference to the ai service\n         * @param {array} articleNodes - List of article nodes\n         * @param {array} fields - List of fields to include in article selection\n         */\n        return new Promise((resolve, reject) => {\n            this.articleSelection = {};\n            for (const articleNode of articleNodes) {\n                const { id } = articleNode;\n                if (id) {\n                    this.articleSelection[id] = {};\n                    for (const field of fields) {\n                        if (articleNode[field]) {\n                            this.articleSelection[id][field] = articleNode[field];\n                        }\n                    }\n                }\n            }\n\n            resolve();\n        });\n\n    }\n\n    createFactbox(articles) {\n        /** *\n         * Create a new factbox. Not yet in use\n         */\n        const model = lab_api.v1.model.create.internal({\n            type: 'factbox',\n            contentdata: {\n                fields: {\n                    title: {\n                        value: this.respons.title\n                    },\n                    bodytext: {\n                        value: this.respons.bodytext\n                    }\n                }\n            },\n            metadata: {\n                background_color: {\n                    vp: {\n                        desktop: 'bg-primary-light'\n                    }\n                }\n            },\n            width: 100\n        });\n        lab_api.v1.model.addChild(lab_api.v1.model.query.getModelByType('bodytext'), model);\n    }\n\n    updateFactboxModel() {\n        /**\n         * Update the factbox model that initialised the modal with the respons from the ai service\n         */\n        return new Promise((resolve, reject) => {\n            // Tests ahead of updating factbox model\n            if (!this.factboxModel) {\n                reject(new Error('No node-model defined'));\n            }\n            if (!this.respons) {\n                this.updateFactboxViews({ removeClasses: ['lab-busy', 'lab-busy-top'] });\n                reject(new Error('No respons returned'));\n            }\n\n            if (this.respons) {\n                const disclaimerText = `<p class=\"italic ai-disclaimer\" data-lab-italic=\"italic\">${ this.api.v1.locale.get('ai.factbox_disclaimer') }</p>`;\n\n                // Update given fields in factbox-model\n                for (const path of ['bodytext', 'title']) {\n                    try {\n                        let fieldText = this.respons[path];\n                        if (fieldText) {\n                            if (path === 'bodytext') {\n                                fieldText += disclaimerText;\n                            }\n                            this.factboxModel.set(`fields.${ path }`, fieldText);\n                        }\n\n                    } catch (error) {\n                        this.updateFactboxViews({ removeClasses: ['lab-busy', 'lab-busy-top'] });\n                        reject(new Error(`Failed to set field ${ path } into current factbox-model`));\n                    }\n                }\n\n                // Build ai metadata\n                try {\n                    const aiMetadata = this.aiSettings;\n                    aiMetadata.timestamp = new Date().getTime();\n                    aiMetadata.createdByName = this.api.v1.user.getUserName();\n                    aiMetadata.createdById = this.api.v1.user.getUserId();\n                    aiMetadata.selectionSourceIds = this.articleIds;\n                    this.factboxModel.set('fields.ai_metadata_json', JSON.stringify(aiMetadata));\n                } catch (error) {\n                    reject(new Error(`Failed to build aiMetadata into current factbox-model`));\n                }\n            }\n            resolve();\n        });\n\n    }\n\n    cleanUpJsonString(data) {\n        /**\n         * Clean up json string to handle returning output that includes more than the expected json\n         */\n        let jsonString = data.trim();\n\n        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {\n            jsonString = jsonString.substring(jsonString.indexOf('{'));\n        }\n\n        if (!jsonString.includes('{')) {\n            jsonString = `{${  jsonString }`;\n        }\n\n        if (!jsonString.includes('}')) {\n            jsonString = `${  jsonString }}`;\n        }\n\n        // Test to choose the correct '}'. Ignore '}' with '\\' ahead\n        if (jsonString.match(/}/g).length > 1) {\n            jsonString = jsonString.match(/(.|\\n)*?(?<!\\\\)}/);\n        }\n\n        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {\n            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);\n        }\n\n        jsonString = jsonString.trim();\n        return jsonString;\n    }\n\n    getLanguageName(languageCode, cleanUp = true) {\n        /**\n         * Get language name from language code\n         */\n        let language = null;\n\n        // Get name of langauge\n        for (const lang of contentLanguages) {\n            if (lang.code === languageCode) {\n                language = lang.name;\n\n            }\n        }\n\n        // Clean up language name\n        if (language && cleanUp === true) {\n            if (language.includes('-')) {\n                language = language.substring(0, language.indexOf('-'));\n            }\n            if (/\\(.*?\\)/.test(language)) {\n                language = language.replaceAll(/\\(.*?\\)/g, '');\n            }\n            language = language.trim();\n        }\n        language = language.trim();\n        return language;\n    }\n\n}\n","export class ArticleSettings {\n\n    constructor(api, params = {}) {\n        this.api = api;\n        this.dom = {\n            sections: {},\n            selected: null\n        };\n        this.nodeSetterPaths = new Map();\n        this.rootModel = this.api.v1.model.query.getRootModel();\n\n        if (!this.validatePage()) {\n            Sys.logger.warn('[ArticleSettings] Page-type not validated. Will only run on article-pages.');\n            return;\n        }\n\n        const additions = this.api.v1.config.get('customMenuData.ArticleSettings.additions') || [];\n        const removals = this.api.v1.config.get('customMenuData.ArticleSettings.removals') || [];\n        const customElements = this.api.v1.config.get('customMenuData.ArticleSettings.items');\n        const apps = [\n            'ArticleGeneralTeaser',\n            'ArticleAudio',\n            'SeoSettings',\n            'ArticleDates',\n            'ArticleStyling',\n            'ArticleCommercialSettings',\n            'ArticleNotes',\n            'ArticleTranslate',\n            'Colors',\n            'ArticleAdvancedSettings',\n            'ArticleSite',\n            'ArticleApproval',\n            'AdvancedViewports',\n            'ConfigOverride',\n            'RoxenExport',\n            'AptomaExport',\n            'ArticleChangelog'\n        ].concat(additions).filter((app) => !removals.includes(app));\n        this.apps = {};\n\n        if (customElements && Array.isArray(customElements.formgroups)) {\n            apps.push('CustomElements');\n        }\n\n        this.getResources(apps, params).then((resources) => {\n            this.draw(resources, customElements);\n        }).catch((error) => {\n            Sys.logger.warn('[ArticleSettings] Error loading resources:');\n            console.log(error);\n        });\n    }\n\n    async getResources(appsList, params) {\n        const templates = await this.api.v1.util.httpClient.get('/ajax/template/get-aliases?nodeType=front');\n        const resources = {\n            templates,\n            params,\n            setter: this.pathSetter.bind(this),\n            rootModel: this.rootModel,\n            helpers: {\n                // Boolean node-data may be stored as number-strings. true -> \"1\", false -> \"0\"\n                // Transform the string \"0\" to boolean false etc.\n                toBoolean: (value) => {\n                    if (!value || value === '0' || value === 'false') {\n                        return false; // 0, '0', 'false', false, null, undefined, ...\n                    }\n                    return true;\n                }\n            },\n            log: this.logAction.bind(this)\n        };\n        return {\n            resources,\n            apps: await this.importApps(appsList, resources)\n        };\n    }\n\n    // This app can be extended with additional apps.\n    // Each app can set data using: `this.setter(key, value)` bound to this method.\n    pathSetter(key, value) {\n        if (this.nodeSetterPaths.has(key)) {\n            const pathInfo = this.nodeSetterPaths.get(key);\n            let validatedValue = value;\n            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {\n                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {\n                    return;\n                }\n            }\n            if (typeof pathInfo.transformer === 'function') {\n                validatedValue = pathInfo.transformer(value, pathInfo);\n            }\n            this.savePath(pathInfo.node, validatedValue, pathInfo.suggestReload);\n        }\n    }\n\n    async importApps(apps, resources) {\n        const promises = {};\n        for (const app of apps) {\n            promises[app] = this.api.v1.apps.start(app, resources);\n        }\n        const resolved = {};\n        const modules = await Promise.all(Object.values(promises));\n        modules.forEach((instance, index) => {\n            const name = Object.keys(promises)[index];\n            if (instance.enabled) {\n                Sys.logger.debug(`[ArticleSettings] Adding app \"${ name }\"`);\n                resolved[name] = instance;\n            } else {\n                Sys.logger.debug(`[ArticleSettings] Skipping disabled app \"${ name }\"`);\n            }\n        });\n        return resolved;\n    }\n\n    // Only run on article-pages\n    validatePage() {\n        if (this.rootModel.getType() === 'page_article') {\n            return true;\n        }\n        return false;\n    }\n\n    draw(input, customElements) {\n        if (customElements && Array.isArray(customElements.formgroups) && input.apps.CustomElements) {\n            input.apps.CustomElements.setElementsConfig(customElements);\n        }\n        const appsData = this.runApps(input.apps);\n        const placeholders = appsData.map((app) => app.placeholder);\n        const modal = this.api.v1.ui.modal.dialog({\n            defaultButtons: false,\n            container: {\n                width: 800\n            },\n            content: {\n                header: 'Article Settings',\n                markup: `<div>${ appsData.map((app) => `<div data-placeholder=\"${ app.placeholder.name }\"></div>`).join('') }</div>`\n            },\n            aside: {\n                position: 'left',\n                expandable: true,\n                header: 'Options',\n                content: this.getAsideMarkup(appsData),\n                // template: 'apps/ArticleSettings/aside',\n                noPadding: true,\n                width: 210\n            },\n            callbacks: {\n                didDisplay: () => {\n                    // this.addCustomElements(modal.getMarkup());\n                    // this.handleSaveAs(modal.getMarkup());\n                    if (this.dom.selected) { return; }\n                    this.setupEvents(modal.getMarkup());\n                    if (input.resources.params.source) {\n                        this.dom.selected = appsData[0].name;\n                        this.displaySource(input.resources.params.source);\n                    } else {\n                        this.displaySource(appsData[0].name);\n                    }\n                },\n                end: () => {\n                    if (!this.dom.selected || !this.apps[this.dom.selected]) {\n                        return;\n                    }\n                    if (this.apps[this.dom.selected].onHidden) {\n                        this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);\n                    }\n                }\n            },\n            placeholders\n        });\n    }\n\n    getAsideMarkup(appsData) {\n        const items = [];\n        const sections = {};\n        for (const appData of appsData) {\n            if (appData.aside.section && appData.aside.label) {\n                if (!sections[appData.aside.section]) {\n                    sections[appData.aside.section] = { label: appData.aside.section, items: [] };\n                }\n                sections[appData.aside.section].items.push({\n                    label: appData.aside.label,\n                    target: appData.name\n                });\n            } else {\n                Sys.logger.warn(`[ArticleSettings] Missing required \"aside.section\" or \"aside.label\" for app \"${ appData.name }\"`);\n            }\n        }\n        for (const name of Object.keys(sections)) {\n            items.push(`<div class=\"lab-aside-settings\">\n                <h4 class=\"lab-title\">${ sections[name].label }</h4>\n                ${ sections[name].items.map((item) => `<p class=\"lab-para lab-link\" data-nav-target=\"${ item.target }\">${ item.label }</p>`).join('') }\n            </div>`);\n        }\n        return items.join('');\n    }\n\n    displaySource(source) {\n        if (this.dom.selected === source) { return; }\n        if (!this.dom.sections[source]) {\n            Sys.logger.warn(`[ArticleSettings] Missing source \"${ source }\".`);\n            return;\n        }\n        if (this.dom.selected) {\n            this.dom.sections[this.dom.selected].nav.classList.remove('lab-selected');\n            this.dom.sections[this.dom.selected].element.classList.add('lab-hidden');\n            if (this.apps[this.dom.selected].onHidden) {\n                this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);\n            }\n            this.dom.selected = null;\n        }\n        if (!this.dom.sections[source].element) {\n            Sys.logger.warn(`[ArticleSettings] Missing dom-element for source \"${ source }\".`);\n            return;\n        }\n        this.dom.sections[source].nav.classList.add('lab-selected');\n        this.dom.sections[source].element.classList.remove('lab-hidden');\n        this.dom.selected = source;\n\n        if (this.apps[source].onDisplayed) {\n            this.apps[source].onDisplayed(this.dom.sections[source].element);\n        }\n\n        // Log name of tab in UI log:\n        this.logAction({\n            type: 'tab',\n            app: source\n        });\n    }\n\n    setupEvents(markup) {\n        for (const el of markup.querySelectorAll('.lab-aside-settings [data-nav-target]')) {\n            const source = el.getAttribute('data-nav-target');\n            if (source) {\n                this.dom.sections[source] = {\n                    selected: el.classList.contains('lab-selected'),\n                    name: source,\n                    nav: el,\n                    element: markup.querySelector(`.lab-modal-content [data-source=\"${ source }\"]`)\n                };\n                this.registerItem(source, this.dom.sections[source]);\n            }\n        }\n    }\n\n    registerItem(source, dom) {\n        dom.nav.addEventListener('click', (event) => {\n            this.displaySource(source);\n        }, false);\n        if (dom.selected) {\n            this.displaySource(source);\n        }\n    }\n\n    runApps(apps) {\n        const result = [];\n        for (const name of Object.keys(apps)) {\n            const app = apps[name];\n            const markup = app.onMarkup();\n            if (markup) {\n                this.apps[name] = app;\n                markup.setAttribute('data-source', name);\n                const aside = app.onAside() || {};\n                if (aside.item) {\n                    aside.identifier = name;\n                }\n                const paths = app.onPaths() || {};\n                const item = {\n                    placeholder: {\n                        element: markup,\n                        selector: `[data-placeholder=\"${ name }\"]`,\n                        name\n                    },\n                    paths,\n                    aside,\n                    name\n                };\n                this.registerAutoSave(markup, paths, app);\n                result.push(item);\n            } else {\n                Sys.logger.warn(`[ArticleSettings] No markup returned by app \"${ name }\".`);\n            }\n        }\n        return result;\n    }\n\n    registerAutoSave(markup, paths, app) {\n        for (const path of Object.keys(paths)) {\n            if (paths[path].node) {\n                this.nodeSetterPaths.set(paths[path].node, paths[path]);\n            }\n            const els = markup.querySelectorAll(`[name=\"${ path }\"]`);\n            if (els.length) {\n                for (const el of els) {\n                    this.registerInputItem(el, paths[path], app);\n                }\n            }\n        }\n    }\n\n    registerInputItem(element, pathInfo, app) {\n        element.addEventListener('change', (event) => {\n            let value = pathInfo.boolean ? element.checked : element.value;\n            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {\n                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {\n                    element.parentElement.classList.add('lab-validation-error');\n                    return;\n                }\n                element.parentElement.classList.remove('lab-validation-error');\n            }\n            if (typeof pathInfo.transformer === 'function') {\n                value = pathInfo.transformer(value, pathInfo);\n            }\n            if (pathInfo.callback && typeof pathInfo.callback === 'function') {\n                pathInfo.callback(element, pathInfo);\n            }\n            if (pathInfo.node) {\n                this.savePath(pathInfo.node, value, pathInfo.suggestReload);\n            }\n            if (pathInfo.meta) {\n                this.saveMeta(pathInfo.meta, value);\n            }\n\n            // Log path and app-name in UI log:\n            this.logAction({\n                type: 'data',\n                app: app.constructor.name,\n                path: pathInfo.node || pathInfo.meta\n            });\n        }, false);\n    }\n\n    logAction(data) {\n        if (this.api.v1.eventmonitor.writer.log) {\n            this.api.v1.eventmonitor.writer.log({\n                action: 'baseview_articleSettings',\n                ...data\n            });\n        }\n    }\n\n    savePath(path, value, suggestReload) {\n        const modified = this.rootModel.set(path, value);\n        if (modified && suggestReload) {\n            this.displayReloadOptions();\n        }\n    }\n\n    saveMeta(path, value) {\n        console.log('Todo: saveMeta: ', path, value);\n        // const data = {};\n        // data[path] = value;\n        // this.api.v1.pages.front.update(data);\n    }\n\n    displayReloadOptions() {\n        this.api.v1.ui.modal.dialog({\n            content: {\n                title: 'Page updated',\n                description: 'Reload editor for changes to take effect'\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Keep editing',\n                        highlight: false,\n                        id: 'keep-editing'\n                    },\n                    {\n                        value: 'Reload',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#keep-editing',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }],\n            callbacks: {\n                submit: () => {\n                    this.api.v1.ui.modal.close(true);\n                    this.api.v1.app.reload();\n                }\n            }\n        });\n    }\n\n}\n","import { DateTimeHelperInt } from '../../lib/helpers/datetime/DateTimeHelperInt.js';\nimport Template from './template.js';\n\nexport class FieldVersion {\n\n    constructor(api, {\n        field = null, model = null, limit = 400, callbacks = {}, selector = ''\n    } = {}) {\n        this.api = api;\n        this.field = field;\n        this.model = model;\n        this.limit = limit;\n        this.callbacks = callbacks;\n        this.selector = selector;\n        this.dateTimeHelper = new DateTimeHelperInt();\n\n        if (!this.field || !this.model) {\n            console.error('[FieldVersion] Params \"field\" and \"model\" are required.');\n            return;\n        }\n        this.id = this.model.get('id');\n        this.state = {\n            busy: false,\n            index: 0, // Current revision is 0, higher number is further back in time.\n            page: 1,\n            data: [],\n            hasMore: true,\n            openRequest: false\n        };\n        this.dom = {};\n        this.setupUI();\n    }\n\n    setupUI() {\n        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/apps/fieldversion/fieldversion.css');\n        this.api.v1.ui.modal.dialog({\n            container: {\n                css: 'fieldversions',\n                width: 1200\n            },\n            content: {\n                header: 'Preview'\n            },\n            aside: {\n                position: 'left',\n                content: Template.aside,\n                width: '30%',\n                header: 'Field Revisions'\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Previous',\n                        type: 'button',\n                        id: 'btn-prev',\n                        highlight: false\n                    },\n                    {\n                        value: 'Next',\n                        type: 'button',\n                        id: 'btn-next',\n                        highlight: false\n                    },\n                    {\n                        value: 'Insert',\n                        type: 'submit',\n                        id: 'btn-insert',\n                        highlight: false\n                    },\n                    {\n                        value: 'Cancel',\n                        id: 'btn-close',\n                        highlight: true\n                    }\n                ]\n            },\n            callbacks: {\n                didDisplay: (theModal) => {\n                    const markup = theModal.getMarkup();\n                    markup.querySelector('.lab-modal-content').appendChild(this.api.v1.util.dom.toDom(Template.main));\n                    const previous = markup.querySelector('#btn-prev');\n                    const next = markup.querySelector('#btn-next');\n                    const date = markup.querySelector('.date');\n                    const user = markup.querySelector('.user');\n                    const insert = markup.querySelector('#btn-insert');\n                    const close = markup.querySelector('#btn-close');\n                    const revision = markup.querySelector('.revision');\n                    const preview = markup.querySelector('.preview');\n                    markup.querySelector('.field').innerHTML = this.field;\n                    markup.querySelector('.node').innerHTML = this.model.getId();\n                    previous.addEventListener('click', () => this.navigateBackward());\n                    next.addEventListener('click', () => this.navigateForward());\n                    insert.addEventListener('click', () => this.insertVersion());\n                    close.addEventListener('click', () => this.end());\n                    this.dom = {\n                        modal: theModal,\n                        markup,\n                        preview,\n                        nav: {\n                            previous,\n                            next,\n                            insert,\n                            close\n                        },\n                        date,\n                        user,\n                        revision\n                    };\n                    this.getVersionData();\n                }\n            }\n        });\n    }\n\n    end() {\n        this.dom.modal.close();\n        this.dom = null;\n        this.api.v1.model.redraw(this.model);\n        if (this.callbacks.end) {\n            this.callbacks.end(this);\n        }\n    }\n\n    getUrl() {\n        const { limit } = this;\n        const offset = (this.limit * (this.state.page - 1)) || 0;\n        return `/ajax/field-versions/get-list?nodeId=${ this.id }&fieldName=${ this.field }&limit=${ limit }&offset=${ offset }&debug=0&doExplain=0&format=&fromTime&toTime`;\n    }\n\n    // Note: If no version-data exist the response will be an empty string.\n    getVersionData(callback) {\n        if (!this.state.hasMore) {\n            this.displayNoHits();\n            return;\n        }\n        this.setBusy(true);\n        fetch(this.getUrl()).then((resp) => resp.json()).then((resp) => {\n            this.setBusy(false);\n            if (!resp || !Array.isArray(resp)) {\n                this.state.hasMore = false;\n                this.displayNoHits();\n                return;\n            }\n\n            if (resp.length < this.limit) {\n                this.state.hasMore = false;\n            }\n\n            let data = [];\n            if (resp && Array.isArray(resp) && resp.length > 0) {\n                data = this.filterData(resp);\n            }\n            if (data.length) {\n                this.updateVersionData(data);\n                if (callback) {\n                    callback();\n                } else {\n                    this.displayIndex(this.state.index);\n                }\n            } else {\n                this.state.page++;\n                this.getVersionData(callback);\n            }\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    setBusy(isBusy) {\n        this.state.openRequest = isBusy;\n        if (isBusy) {\n            this.dom.markup.classList.add('lab-busy');\n        } else {\n            this.dom.markup.classList.remove('lab-busy');\n        }\n    }\n\n    filterData(data) {\n        return data.filter((item) => item.name === this.field);\n    }\n\n    navigateBackward(skipRetry = false) {\n        if (this.state.openRequest) {\n            return;\n        }\n        const newIndex = this.state.index + 1;\n        if (newIndex < this.state.data.length) {\n            this.state.index = newIndex;\n            this.displayIndex(newIndex);\n        } else if (!skipRetry) {\n            this.state.page++;\n            this.getVersionData(() => {\n                this.navigateBackward(true);\n            });\n        }\n    }\n\n    navigateForward() {\n        if (this.state.openRequest) {\n            return;\n        }\n        const newIndex = this.state.index - 1;\n        if (newIndex >= 0) {\n            this.state.index = newIndex;\n            this.displayIndex(newIndex);\n        }\n    }\n\n    displayNoHits() {\n        this.dom.date.innerHTML = 'No revison found ...';\n        this.dom.user.innerHTML = '--';\n        this.dom.revision.innerHTML = '--';\n        this.updateNavigation();\n    }\n\n    displayIndex(index) {\n        this.dom.date.innerHTML = this.formatDate(this.state.data[index].audit_time) + (index === 0 ? ' (current)' : '');\n        this.dom.user.innerHTML = this.state.data[index].user_name;\n        this.dom.revision.innerHTML = this.state.data[index].revision_id;\n        this.updateFieldPreview();\n        this.updateNavigation();\n    }\n\n    updateFieldPreview() {\n        this.dom.preview.innerHTML = this.state.data[this.state.index].value || '<p></p>';\n    }\n\n    insertVersion() {\n        if (!this.state.data[this.state.index]) {\n            console.warn(`[FieldVersion] No version data found for index ${ this.state.index } ...`);\n            return;\n        }\n        this.model.set(`fields.${ this.field }`, this.state.data[this.state.index].value);\n        this.end();\n        this.api.v1.model.highlight.message(this.model, 'Revision inserted');\n    }\n\n    formatDate(dateString) {\n        // new Date('2024-02-27 18:35:48.055554+01')\n        const date = new Date(dateString);\n        const dateFormat = this.api.v1.locale.get('dates.monthdayyear', { noRender: true });\n        const timeFormat = this.api.v1.locale.get('dates.hourminute', { noRender: true });\n        return `${ this.dateTimeHelper.format(date, dateFormat) } ${ this.dateTimeHelper.format(date, timeFormat) }`;\n    }\n\n    updateNavigation() {\n        if (this.state.index === 0) {\n            this.dom.nav.next.classList.add('lab-disabled');\n        } else {\n            this.dom.nav.next.classList.remove('lab-disabled');\n        }\n        if (!this.state.hasMore && this.state.data.length <= this.state.index + 1) {\n            this.dom.nav.previous.classList.add('lab-disabled');\n        } else {\n            this.dom.nav.previous.classList.remove('lab-disabled');\n        }\n    }\n\n    updateVersionData(data) {\n        for (const item of data) {\n            this.state.data.push(item);\n        }\n    }\n\n}\n","export default {\n    aside: `\n        <form class=\"content\">\n            <div class=\"item small info\">\n                <p>Field: <span class=\"field\"></span><br>\n                Node: <span class=\"node\"></span></p>\n            </div>\n            <div class=\"info\">\n                <h3 class=\"date\">--</h3>\n                <p>Revision <em class=\"revision\">--</em><br>\n                User <em class=\"user\">--</em></p>\n            </div>\n        </form>`,\n    main: `<div>\n        <div class=\"preview\"></div>\n    </div>`,\n    nav: `<ul></ul>`\n};\n","import { RequiredVieworts } from '../helpers/RequiredVieworts.js';\nimport { MainViewport } from '../helpers/MainViewport.js';\n\nexport class AdvancedViewports {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.log = params.log;\n        this.enabled = this.api.v1.user.hasPermission('admin_user'); // Sub-views may override and set to false to disable\n        this.requiredViewortsHelper = new RequiredVieworts(\n            this.api,\n            this.api.v1.viewport.getEditable(),\n            this.api.v1.viewport.getMain(),\n            [...(this.rootModel.get('fields.lab_required_viewports_json') || [])],\n            this.rootModel,\n            'fields.lab_required_viewports_json',\n            'admin_user',\n            (path, value) => {\n                this.log({\n                    type: 'data',\n                    app: this.constructor.name,\n                    path\n                });\n            }\n        );\n        this.mainViewortsHelper = new MainViewport(\n            this.api,\n            this.api.v1.viewport.getEditable(),\n            this.rootModel.get('fields.lab_main_viewport') || this.api.v1.viewport.getMain(),\n            this.rootModel,\n            'fields.lab_main_viewport',\n            'admin_user',\n            (path, value) => {\n                this.log({\n                    type: 'data',\n                    app: this.constructor.name,\n                    path\n                });\n            }\n        );\n\n        // requiredVieworts: this.api.v1.apps.start('RequiredVieworts', this.api.v1.viewport.getEditable(), this.api.v1.viewport.getMain(), [...(this.rootModel.get('fields.lab_required_viewports_json') || [])], this.rootModel, 'fields.lab_required_viewports_json', 'admin_user'),\n        // mainViewport: this.api.v1.apps.start('MainViewport', this.api.v1.viewport.getEditable(), this.rootModel.get('fields.lab_main_viewport') || this.api.v1.viewport.getMain(), this.rootModel, 'fields.lab_main_viewport', 'admin_user'),\n\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-bordered\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-medium lab-space-above-none\">Require viewport(s)</h2>\n                <p class=\"lab-grid-large-12 lab-grid-gap\">Users normally selects viewports to edit themselves (hotkey <span class=\"lab-label-hotkey\">V</span>). This option lets editors require selected viewports to always display for current page.</p>\n                <div data-placeholder=\"viewports-required\">\n                    <!-- Element replaced by modal -->\n                </div>\n            </div>\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-medium lab-space-above-none\">Set main viewport</h2>\n                <p class=\"lab-grid-large-12 lab-grid-gap\">The viewport defined as \"main\" is used for fallback-data and should be set to the viewport with the richest data-set.</p>\n                <div data-placeholder=\"viewports-main\">\n                    <!-- Element replaced by modal -->\n                </div>\n            </div>\n        </div>`;\n\n        // {\n        //     selector: '[data-placeholder=\"viewports-required\"]',\n        //     element: resources.modules.requiredVieworts.getMarkup()\n        // }\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Advanced',\n            label: 'Viewports'\n        };\n    }\n\n    onPaths() {}\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                name: this.rootModel.get('fields.name'),\n                hostpath: this.rootModel.get('fields.hostpath'),\n                lab_canonical: this.rootModel.get('fields.lab_canonical'),\n                defaultsection: this.rootModel.get('fields.defaultsection')\n            }\n        }, true);\n        const viewportsPlaceholder = markup.querySelector('[data-placeholder=\"viewports-required\"]');\n        viewportsPlaceholder.parentNode.replaceChild(this.requiredViewortsHelper.getMarkup(), viewportsPlaceholder);\n        const mainViewportsPlaceholder = markup.querySelector('[data-placeholder=\"viewports-main\"]');\n        mainViewportsPlaceholder.parentNode.replaceChild(this.mainViewortsHelper.getMarkup(), mainViewportsPlaceholder);\n        return markup;\n    }\n\n}\n","export class AutomationSettings {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.meta = params.meta;\n        this.frontSettings = this.api.v1.pages.front.getByNodeId(this.rootModel.getId());\n        this.enabled = true;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none\">Automatic content</h2>\n\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-3 lab-grid-gap lab-inline\">\n                    <label for=\"id-meta.automatic\">Enabled</label>\n                    <input id=\"id-meta.automatic\" type=\"checkbox\" name=\"automatic\" value=\"1\"{{ #meta.automatic }} checked{{ /meta.automatic }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-9 lab-grid-gap lab-inline\">\n                    <label for=\"id-meta.termMode\">Use terms, not tags</label>\n                    <input id=\"id-meta.termMode\" type=\"checkbox\" name=\"termMode\" value=\"1\"{{ #meta.termMode }} checked{{ /meta.termMode }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"automation-layout\">Layout from page</label>\n                    <div data-placeholder=\"automation-layout\">\n                        <!-- Element replaced by modal -->\n                    </div>\n                </div>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-bordered\">\n                    <label for=\"automation-automatic_site_id\">Content from site</label>\n                    <div data-placeholder=\"automation-automatic_site_id\">\n                        <!-- Element replaced by modal -->\n                    </div>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"automation-tags\">Include tags</label>\n                    <input type=\"text\" name=\"tags\" id=\"automation-tags\" value=\"{{ meta.tags }}\" placeholder=\"Comma-separated list of tags ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline\">\n                    <label for=\"automation-automatic_and\">Require all tags (AND)</label>\n                    <input type=\"checkbox\" name=\"automatic_and\" id=\"automation-automatic_and\" value=\"1\"{{ #meta.automatic_and }} checked{{ /meta.automatic_and }}>\n                </div>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"automation-exclude\">Exclude tags</label>\n                    <input type=\"text\" name=\"exclude\" id=\"automation-exclude\" value=\"{{ meta.exclude }}\" placeholder=\"Comma-separated list of tags ...\">\n                </div>\n            </div>\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Automation',\n            label: 'Automatic content'\n        };\n    }\n\n    onPaths() {\n        return {\n            automatic: {\n                node: 'fields.automatic',\n                meta: 'automatic',\n                boolean: true\n            },\n            termMode: {\n                node: 'fields.termMode',\n                meta: 'termMode',\n                boolean: true\n            },\n            layout: {\n                meta: 'layout',\n                validator: 'notEmpty'\n            },\n            automatic_site_id: {\n                meta: 'automatic_site_id'\n            },\n            tags: {\n                meta: 'tags'\n            },\n            exclude: {\n                meta: 'exclude'\n            },\n            automatic_and: {\n                meta: 'automatic_and',\n                boolean: true\n            }\n        };\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            meta: this.meta\n        }, true);\n        const layoutPlaceholder = markup.querySelector('[data-placeholder=\"automation-layout\"]');\n        layoutPlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getPageSelector({\n            siteId: null,\n            value: parseInt(this.meta.layout, 10),\n            pages: this.api.v1.pages.front.getAll().map((page) => ({\n                frontname: page.frontid === this.frontSettings.frontid ? (`${ page.frontname } (this page)`) : page.frontname,\n                nodeid: page.frontid,\n                site_id: page.site_id\n            })),\n            attributes: [{\n                name: 'name', value: 'layout'\n            }, {\n                name: 'id', value: 'automation-layout'\n            }]\n        }), layoutPlaceholder);\n        const sitePlaceholder = markup.querySelector('[data-placeholder=\"automation-automatic_site_id\"]');\n        sitePlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getSiteSelector({\n            label: 'All sites',\n            value: parseInt(this.meta.automatic_site_id, 10) || '',\n            attributes: [{\n                name: 'name', value: 'automatic_site_id'\n            }, {\n                name: 'id', value: 'automation-automatic_site_id'\n            }]\n        }), sitePlaceholder);\n        // Fix for automatic_and. The boolean value is storead as string in meta.\n        if (this.meta.automatic_and === 'false') {\n            const automatic_and_el = markup.querySelector('#automation-automatic_and');\n            automatic_and_el.removeAttribute('checked');\n        }\n        return markup;\n    }\n\n}\n","import { ColorUtils } from '../../lib/editor/ColorUtils.js';\n\nexport class Colors {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.isArticle = this.rootModel.getType() === 'page_article';\n        this.enabled = true;\n        this.bgColors = this.api.v1.config.get('background_colors') || [];\n        this.bgColorsMarkup = this.generateColorMarkup(this.bgColors, 'pageBackgroundColor');\n        this.fontColors = this.api.v1.config.get('font_colors') || [];\n        this.fontColorsMarkup = this.generateColorMarkup(this.fontColors, 'pageFontColor');\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid lab-grid-gap background-color-picker\">\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Background color</h4>\n                ${ this.bgColorsMarkup }\n            </div>\n\n            <div class=\"lab-formgroup lab-grid lab-grid-gap custom-background-color-picker lab-valign-bottom\">\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Custom Background color</h4>\n                <p class=\"lab-para lab-grid-large-12 lab-grid-gap\">Note: This will override the selected background color above.</p>\n                ${ this.generateCustomColorMarkup() }\n            </div>\n\n            <div class=\"lab-formgroup lab-grid lab-grid-gap font-color-picker\">\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Font color</h4>\n                ${ this.fontColorsMarkup }\n            </div>\n\n        </div>`;\n    }\n\n    generateColorMarkup(colors, field) {\n        const current = this.rootModel.get(`fields.${ field }`);\n        let markup = `<div class=\"lab-formgroup-item lab-grid-large-4 lab-grid-gap lab-inline\">\n            <label for=\"${ field }-noColor\" class=\"noColor\">Default color</label>\n            <input type=\"radio\" value=\"\" name=\"${ `fields.${ field }` }\" id=\"${ field }-noColor\" ${ current === '' && !this.rootModel.get('fields.pageBackgroundColorStyle') ? 'checked' : '' }>\n        </div>`;\n\n        colors.forEach((color) => {\n            markup += `<div title=\"${ color }\" class=\"lab-formgroup-item lab-grid-large-2 lab-grid-gap lab-inline page-settings-color-radio\">\n                <label for=\"${ color }\" class=\"${ color }\"></label>\n                <input type=\"radio\" value=\"${ color }\" name=\"${ `fields.${ field }` }\" id=\"${ color }\" ${ color === current ? 'checked' : '' }>\n            </div>`;\n        });\n\n        return markup;\n    }\n\n    generateCustomColorMarkup() {\n        const current = this.rootModel.get('fields.pageBackgroundColorStyle') || '';\n        const hasHeaderImage = !!lab_api.v1.model.query.getModelByPath('page_article/articleHeader/image');\n        let content = `<div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap\">\n            <input type=\"text\" value=\"${ current }\" placeholder=\"CSS style like rgb(10, 255, 0)\" name=\"fields.pageBackgroundColorStyle\">\n        </div>`;\n        if (hasHeaderImage) {\n            content += `<div class=\"lab-formgroup-item lab-grid-large-6 lab-grid-gap\"><input type=\"button\" value=\"Get from header image\" id=\"get_custom_color_button\"></div>`;\n        }\n        if (this.isArticle && !hasHeaderImage) {\n            content += `<div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\"><p class=\"lab-para\">Tip: Add a header image and select 'Get background color from image' in the media options button <span class=\"labicon-image\"></span> to select a matching color.</p></div>`;\n        }\n        return content;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Colors'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.pageBackgroundColor': {\n                node: 'fields.pageBackgroundColor',\n                callback: (element) => {\n                    // Reset custom color:\n                    this.rootModel.set('fields.pageBackgroundColorStyle', '');\n                    const customColorEl = this.markup.querySelector('input[name=\"fields.pageBackgroundColorStyle\"]');\n                    const customColorValue = customColorEl.value;\n                    customColorEl.value = '';\n\n                    // Update selector on body-element for all viewports in the editor\n                    // to allow preview without a reload.\n                    const docs = this.api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.pageBackgroundColor');\n                    const labelEl = element.parentElement.querySelector('label');\n                    let isDark = false;\n                    if (labelEl) {\n                        const compStyles = window.getComputedStyle(labelEl);\n                        const color = compStyles.getPropertyValue('background-color');\n                        if (color) {\n                            const rgbArray = color.match(/\\d+/g).map(Number); // [234, 88, 11]\n                            if (Array.isArray(rgbArray) && rgbArray.length === 3) {\n                                isDark = ColorUtils.getBrightness(rgbArray) < 130;\n                            }\n                            this.rootModel.set('fields.pageBackgroundColorStyleDark', isDark ? '1' : '');\n                        }\n                    }\n                    for (const doc of docs) {\n                        if (current) {\n                            doc.body.classList.remove(current);\n                            doc.body.classList.remove('custom-background-color');\n                        }\n                        if (customColorValue) {\n                            doc.body.style.backgroundColor = '';\n                            doc.body.style.color = '';\n                        }\n                        if (element.value) {\n                            doc.body.classList.add(element.value);\n                            doc.body.classList.add('custom-background-color');\n                            if (doc.body.querySelector('main > article')) {\n                                doc.body.querySelector('main > article').classList.add('bg-baseview-custom');\n                            }\n                        } else if (doc.body.querySelector('main > article')) {\n                            doc.body.querySelector('main > article').classList.remove('bg-baseview-custom');\n                        }\n                        if (isDark) {\n                            doc.body.classList.add('dark-mode');\n                        } else {\n                            doc.body.classList.remove('dark-mode');\n                        }\n                    }\n                }\n            },\n            'fields.pageBackgroundColorStyle': {\n                node: 'fields.pageBackgroundColorStyle',\n                callback: (element) => {\n                    // Reset background color and select default color in UI:\n                    this.rootModel.set('fields.pageBackgroundColor', '');\n                    const colorEl = this.markup.querySelector('input[name=\"fields.pageBackgroundColor\"]:checked');\n                    if (colorEl) {\n                        colorEl.checked = false;\n                    }\n\n                    const docs = this.api.v1.viewport.getContexts();\n                    const value = element.value.trim();\n                    const rgbArray = value.startsWith('rgb') ? (value.match(/\\d+/g) || []).map(Number) : ColorUtils.hex2rgb(value);\n                    const isDark = (Array.isArray(rgbArray) && rgbArray.length === 3) ? ColorUtils.getBrightness(rgbArray) < 130 : false;\n                    this.rootModel.set('fields.pageBackgroundColorStyleDark', isDark ? '1' : '');\n\n                    for (const doc of docs) {\n                        if (value) {\n                            doc.body.style.backgroundColor = value;\n                            doc.body.classList.add('custom-background-color', 'bg-baseview-custom');\n                            if (doc.body.querySelector('main > article')) {\n                                doc.body.querySelector('main > article').classList.add('bg-baseview-custom');\n                            }\n                        } else {\n                            doc.body.style.backgroundColor = '';\n                            doc.body.classList.remove('custom-background-color', 'bg-baseview-custom');\n                            if (doc.body.querySelector('main > article')) {\n                                doc.body.querySelector('main > article').classList.remove('bg-baseview-custom');\n                            }\n                        }\n                        if (isDark) {\n                            doc.body.classList.add('dark-mode');\n                            doc.body.style.color = value ? '#fff' : '';\n                        } else {\n                            doc.body.classList.remove('dark-mode');\n                            doc.body.style.color = '';\n                        }\n                    }\n                }\n            },\n            'fields.pageFontColor': {\n                node: 'fields.pageFontColor',\n                callback: (element) => {\n                    // Update selector on body-element for all viewports in the editor\n                    // to allow preview without a reload.\n                    const docs = this.api.v1.viewport.getContexts();\n                    const current = this.rootModel.get('fields.pageFontColor');\n                    for (const doc of docs) {\n                        if (current) {\n                            doc.body.classList.remove(current, 'custom-font-color');\n                            const articleSection = doc.querySelector('main > article');\n                            if (articleSection) {\n                                articleSection.classList.remove(current, 'custom-font-color');\n                            }\n                        }\n                        if (element.value) {\n                            doc.body.classList.add(element.value, 'custom-font-color');\n                            const articleSection = doc.querySelector('main > article');\n                            if (articleSection) {\n                                articleSection.classList.add(element.value, 'custom-font-color');\n                            }\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    onMarkup() {\n        this.markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                pageBackgroundColor: this.rootModel.get('fields.pageBackgroundColor'),\n                pageFontColor: this.rootModel.get('fields.pageFontColor')\n            }\n        }, true);\n        const selectCustomBackgroundColorButton = this.markup.querySelector('#get_custom_color_button');\n        if (selectCustomBackgroundColorButton) {\n            selectCustomBackgroundColorButton.addEventListener('click', () => {\n                const fn = this.api.v1.ns.get('contextualmenu.callbacks.getImageColors');\n                if (fn) {\n                    const articleHeader = this.api.v1.model.query.getModelByType('articleHeader');\n                    fn(articleHeader, this.api.v1.view.getView(articleHeader), undefined, undefined, (result) => {\n                        this.markup.querySelector('input[name=\"fields.pageBackgroundColorStyle\"]').value = result.color;\n                        const colorEl = this.markup.querySelector('input[name=\"fields.pageBackgroundColor\"]:checked');\n                        if (colorEl) {\n                            colorEl.checked = false;\n                        }\n                    });\n                }\n            });\n        }\n        return this.markup;\n    }\n\n}\n","export class ConfigOverride {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = this.api.v1.user.hasPermission('admin_frontpages'); // Sub-views may override and set to false to disable\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none\">Config override</h2>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"lab_override_config_edit\">Config for current page - Editor</label>\n                    <textarea name=\"fields.lab_override_config_edit\" id=\"lab_override_config_edit\" placeholder=\"valid json only, use with caution\" style=\"height:180px;\">{{ fields.lab_override_config_edit }}</textarea>\n                </div>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"lab_override_config_presentation\">Config for current page - Front</label>\n                    <textarea name=\"fields.lab_override_config_presentation\" id=\"lab_override_config_presentation\" placeholder=\"valid json only, use with caution\" style=\"height:180px;\">{{ fields.lab_override_config_presentation }}</textarea>\n                </div>\n            </div>\n        </div>\n        `;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Advanced',\n            label: 'Config override'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.lab_override_config_edit': {\n                node: 'fields.lab_override_config_edit',\n                validator: 'isJsonStringOrEmpty'\n            },\n            'fields.lab_override_config_presentation': {\n                node: 'fields.lab_override_config_presentation',\n                validator: 'isJsonStringOrEmpty'\n            }\n        };\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                lab_override_config_edit: this.rootModel.get('fields.lab_override_config_edit'),\n                lab_override_config_presentation: this.rootModel.get('fields.lab_override_config_presentation')\n            }\n        }, true);\n        return markup;\n    }\n\n}\n","export class ExportMailmojo {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = this.api.v1.user.hasPermission('admin_mailmojo');\n        this.newsletterListUrl = '/ajax/integration-services/proxy/newsletter/mailmojo/api-proxy/?embedUserData&resourcePath=/lists';\n        this.segmentListUrl = '/ajax/integration-services/proxy/newsletter/mailmojo/api-proxy/?embedUserData&resourcePath=/lists/';\n        this.template = `\n            <div class=\"lab-modal-form lab-grid lab-hidden\">\n                <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-bordered\">\n                    <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-medium lab-space-above-none\">Send this frontpage as a newsletter</h2>\n                    <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline\">\n                        <a href=\"\" class=\"lab-btn\" target=\"_blank\" id=\"mailmojo-login\">Log in</a>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline\">\n                        <input type=\"button\" value=\"Refresh newsletter list\" id=\"mailmojo-refresh\">\n                        <input type=\"button\" value=\"Logout from Mailmojo\" id=\"mailmojo-logout\" style=\"margin-left:1em\">\n                    </div>\n                    <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-hidden\" data-require-logn=\"1\">\n                        <label for=\"lab-newsletter-select\">Newsletter</label>\n                        <div data-placeholder=\"lab-newsletter-select\">\n                            -- <!-- Element replaced by onMarkup -->\n                        </div>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-hidden\" data-require-logn=\"1\">\n                        <label for=\"lab-segment-select\">Segment</label>\n                        <div data-placeholder=\"lab-segment-select\">\n                            <select></select> <!-- Element replaced by onMarkup -->\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-space-below-none lab-hidden\" data-require-logn=\"1\">\n                    <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                        <label for=\"lab-newsletter-subject\">Newsletter subject</label>\n                        <input type=\"text\" id=\"lab-newsletter-subject\" value=\"\" placeholder=\"Email subject ...\">\n                    </div>\n                    <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                        <label for=\"lab-newsletter-datetime\">Published date and time</label>\n                        <input type=\"datetime-local\" id=\"lab-newsletter-datetime\" value=\"\">\n                    </div>\n                </div>\n                \n                <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-hidden\" data-require-logn=\"1\">\n                    <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right\">\n                        <p id=\"lab-newsletter-info\" class=\"lab-align-left\">&nbsp;</p>\n                        <a href=\"\" target=\"_blank\" class=\"lab-btn\" id=\"lab-newsletter-preview-btn\">Preview newsletter</a>\n                        <input class=\"lab-btn\" type=\"button\" value=\"Send newsletter\" id=\"lab-sendnewsletter-btn\">\n                    </div>\n                </div>\n            </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Export',\n            label: 'Mailmojo newsletter'\n        };\n    }\n\n    onPaths() {}\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                name: this.rootModel.get('fields.name')\n            }\n        }, true);\n\n        const refreshBtn = markup.querySelector('#mailmojo-refresh');\n        refreshBtn.addEventListener('click', (event) => {\n            this.getNewsletterList(this.newsletterListUrl, markup);\n        }, false);\n\n        const logoutBtn = markup.querySelector('#mailmojo-logout');\n        logoutBtn.addEventListener('click', (event) => {\n            this.logout(markup);\n        }, false);\n\n        const sendBtn = markup.querySelector('#lab-sendnewsletter-btn');\n        sendBtn.addEventListener('click', (event) => {\n\n            event.preventDefault();\n            const elements = {\n                segmentIds: markup.querySelector('#lab-segment-select'),\n                newsletterId: markup.querySelector('#lab-newsletter-select'),\n                subject: markup.querySelector('#lab-newsletter-subject'),\n                sendTime: markup.querySelector('#lab-newsletter-datetime')\n            };\n            if (!elements.segmentIds) { return; }\n\n            const { frontpageurl } = this.api.v1.pages.front.getData();\n\n            const subject = elements.subject.value.trim();\n            const newsletterId = elements.newsletterId.value;\n            const segmentIds = this.getMultiValue(elements.segmentIds);\n            const sendTime = elements.sendTime.value;\n\n            if (!subject) { elements.subject.parentElement.classList.add('lab-validation-error'); return; }\n            elements.subject.parentElement.classList.remove('lab-validation-error');\n            if (!sendTime) { elements.sendTime.parentElement.classList.add('lab-validation-error'); return; }\n            elements.sendTime.parentElement.classList.remove('lab-validation-error');\n            if (!newsletterId) { elements.newsletterId.parentElement.classList.add('lab-validation-error'); return; }\n            elements.newsletterId.parentElement.classList.remove('lab-validation-error');\n            if (!segmentIds) { elements.segmentIds.parentElement.classList.add('lab-validation-error'); return; }\n            elements.segmentIds.parentElement.classList.remove('lab-validation-error');\n\n            // toISOString: 2019-11-25T12:28 (GMT+0100) -> 2019-11-25T11:28:00.000Z\n            const sendTimeIso = new Date(sendTime).toISOString();\n            const timestamp = new Date().getTime();\n            const html_url = `${ frontpageurl }?lab_viewport=mailmojo&v=${ timestamp }`;\n\n            const createObj = {\n                subject,\n                html_url,\n                list_id: newsletterId\n            };\n\n            // segments or all?\n            if (segmentIds.indexOf('all') === -1) {\n                createObj.segment_ids = segmentIds;\n            }\n\n            const sendObj = {\n                send_date: sendTimeIso\n            };\n\n            markup.querySelector('#lab-newsletter-info').innerHTML = 'Sending newsletter ...';\n            const url = '/ajax/integration-services/proxy/newsletter/mailmojo/create-send-newsletter/?embedUserData';\n\n            sendBtn.setAttribute('disabled', 'disabled');\n            this.api.v1.util.httpClient.request(\n                url,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        create: createObj,\n                        send: sendObj\n                    })\n                }\n            ).then((resp) => {\n                if (resp && resp.errors) {\n                    markup.querySelector('#lab-newsletter-info').innerHTML = '<span style=\"color: red;\">Something went wrong, check console.</span>';\n                    console.log(resp);\n                    return;\n                }\n                markup.querySelector('#lab-newsletter-info').innerHTML = 'Newsletter sent!';\n            }).catch((resp) => {\n                markup.querySelector('#lab-newsletter-info').innerHTML = '<span style=\"color: red;\">Something went wrong, check console.</span>';\n                console.log(resp);\n            });\n        }, false);\n\n        return markup;\n    }\n\n    displayLogin(url, markup) {\n        const loginBtn = markup.querySelector('#mailmojo-login');\n        loginBtn.setAttribute('href', url);\n        loginBtn.parentElement.classList.remove('lab-hidden');\n        for (const el of markup.querySelectorAll('[data-require-logn=\"1\"]')) {\n            el.classList.add('lab-hidden');\n        }\n    }\n\n    displayForm(markup) {\n        const loginBtn = markup.querySelector('#mailmojo-login');\n        loginBtn.parentElement.classList.add('lab-hidden');\n        for (const el of markup.querySelectorAll('[data-require-logn=\"1\"]')) {\n            el.classList.remove('lab-hidden');\n        }\n    }\n\n    onDisplayed(markup) {\n        this.getNewsletterList(this.newsletterListUrl, markup);\n        const previewLinkEl = markup.querySelector('#lab-newsletter-preview-btn');\n        const { frontpageurl } = this.api.v1.pages.front.getData();\n        previewLinkEl.setAttribute('href', `${ frontpageurl }?lab_viewport=mailmojo`);\n    }\n\n    logout(markup) {\n        this.api.v1.util.httpClient.get('/ajax/integration-services/proxy/newsletter/mailmojo/delete-user-tokens/', { resetCache: true, type: 'text' }).then(() => {\n            this.getNewsletterList(this.newsletterListUrl, markup);\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    getNewsletterList(url, markup) {\n        this.api.v1.util.httpClient.get(url, { resetCache: true }).then((resp) => {\n            if (Array.isArray(resp)) {\n                this.createNewsletterList(resp, markup);\n                return;\n            }\n            if (resp.authorize_uri) {\n                this.displayLogin(resp.authorize_uri, markup);\n            }\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    createNewsletterList(newsletters, markup) {\n        const sorted = newsletters.sort((a, b) => {\n            const aName = (a.name || '').toLowerCase();\n            const bName = (b.name || '').toLowerCase();\n            // eslint-disable-next-line no-nested-ternary\n            return (aName > bName) ? 1 : ((bName > aName) ? -1 : 0);\n        });\n\n        this.displayForm(markup);\n\n        const selectPlaceholder = markup.querySelector('[data-placeholder=\"lab-newsletter-select\"]') || markup.querySelector('#lab-newsletter-select');\n        const selectElement = this.api.v1.ui.element.getSelectElement({\n            value: '',\n            options: sorted.map((item) => ({ value: item.id, label: item.name })),\n            attributes: [{\n                name: 'id', value: 'lab-newsletter-select'\n            }]\n        });\n        selectElement.addEventListener('change', (event) => {\n            const { value } = event.target;\n            this.getSegmentList(value, markup);\n        }, false);\n        selectPlaceholder.parentNode.replaceChild(selectElement, selectPlaceholder);\n        if (selectElement.options.length && selectElement.options[0].value) {\n            this.getSegmentList(selectElement.options[0].value, markup);\n        }\n    }\n\n    getSegmentList(newsletterId, markup) {\n        this.api.v1.util.httpClient.get(this.segmentListUrl + newsletterId, { resetCache: true }).then((resp) => {\n            if (Array.isArray(resp.segments)) {\n                this.createSegmentList(resp.segments, markup);\n                return;\n            }\n            if (resp.authorize_uri) {\n                this.displayLogin(resp.authorize_uri, markup);\n            }\n        }).catch((error) => {\n            console.log('error: ', error);\n        });\n    }\n\n    createSegmentList(segments, markup) {\n\n        const selectElement = this.api.v1.ui.element.getSelectElement({\n            value: 'all',\n            options: [{ value: 'all', label: 'Entire list' }].concat(segments.map((item) => ({ value: item.id, label: item.name }))),\n            attributes: [{\n                name: 'id', value: 'lab-segment-select'\n            }, {\n                name: 'multiple'\n            }, {\n                name: 'style', value: 'height: auto;'\n            }]\n        });\n        selectElement.setAttribute('multiple', 'multiple');\n        const current = markup.querySelector('[data-placeholder=\"lab-segment-select\"]') || markup.querySelector('#lab-segment-select');\n        current.parentNode.replaceChild(selectElement, current);\n    }\n\n    openAuthentication(url) {\n        this.api.v1.app.gotoUrl(url, true);\n    }\n\n    // (array)\n    getMultiValue(selectElement) {\n        return [...selectElement.options].filter((option) => option.selected).map((option) => option.value);\n    }\n\n}\n","export class FrontSaveAs {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none\">Save as</h2>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"advanced-saveas-name\">Front page title</label>\n                    <input type=\"text\" name=\"saveas-name\" id=\"advanced-saveas-name\" value=\"\" placeholder=\"Name for new page ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"advanced-saveas-hostpath\">Host path</label>\n                    <input type=\"text\" name=\"saveas-hostpath\" id=\"advanced-saveas-hostpath\" value=\"\" placeholder=\"Host path ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-align-right\">\n                    <input type=\"button\" id=\"advanced-saveas-button\" value=\"Save copy\">\n                </div>\n                <div id=\"advanced-saveas-info\" class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-align-center\" style=\"padding: 1rem; color: gray;\"></div>\n            </div>  \n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'Advanced',\n            label: 'Save a copy'\n        };\n    }\n\n    onPaths() {}\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {}, true);\n        this.registerFront({\n            id: this.rootModel.getId(),\n            nameElement: markup.querySelector('#advanced-saveas-name'),\n            hostpathElement: markup.querySelector('#advanced-saveas-hostpath'),\n            button: markup.querySelector('#advanced-saveas-button'),\n            infoElement: markup.querySelector('#advanced-saveas-info')\n        });\n        return markup;\n    }\n\n    registerFront({\n        id, nameElement, hostpathElement, button, infoElement\n    }) {\n        nameElement.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                this.frontSubmitHandler(id, nameElement, hostpathElement, infoElement);\n            }\n        }, false);\n        hostpathElement.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                this.frontSubmitHandler(id, nameElement, hostpathElement, infoElement);\n            }\n        }, false);\n        button.addEventListener('click', (event) => {\n            this.frontSubmitHandler(id, nameElement, hostpathElement, infoElement);\n        }, false);\n    }\n\n    frontSubmitHandler(id, nameElement, hostpathElement, infoElement) {\n        if (!nameElement.value.trim()) {\n            nameElement.parentElement.classList.add('lab-validation-error');\n            return;\n        }\n        nameElement.parentElement.classList.remove('lab-validation-error');\n        if (!hostpathElement.value.trim()) {\n            hostpathElement.parentElement.classList.add('lab-validation-error');\n            return;\n        }\n        hostpathElement.parentElement.classList.remove('lab-validation-error');\n\n        infoElement.classList.add('lab-busy');\n        infoElement.innerHTML = 'Validating and saving new front-page ...';\n\n        this.api.v1.pages.front.duplicate(id, nameElement.value.trim(), hostpathElement.value.trim()).then((resp) => {\n            infoElement.classList.remove('lab-busy');\n            infoElement.innerHTML = `Front-page is duplicated. Edit the new page at<br><a href=\"${ resp.url }\" target=\"_blank\">${ resp.url }</a>`;\n        }).catch((error) => {\n            infoElement.classList.remove('lab-busy');\n            infoElement.innerHTML = error;\n        });\n        // this.copyFront(id, nameElement.value.trim(), hostpathElement.value.trim(), infoElement);\n    }\n\n}\n","export class GeneralPage {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.enabled = true; // Sub-views may override and set to false to disable\n        // if (!this.api.v1.user.hasPermission('admin_something')) {\n        //     this.enabled = false;\n        // }\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none\">Page settings</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"general-page-name\">Front page title</label>\n                    <input type=\"text\" name=\"fields.name\" id=\"general-page-name\" value=\"{{ fields.name }}\" placeholder=\"Name for this front-page ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"general-page-hostpath\">Host path</label>\n                    <input type=\"text\" name=\"fields.hostpath\" id=\"general-page-hostpath\" value=\"{{ fields.hostpath }}\" placeholder=\"Url-path for this front-page. Example: 'news' or 'sport' ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"general-page-lab_canonical\">Canonical url</label>\n                    <input type=\"text\" name=\"fields.lab_canonical\" id=\"general-page-lab_canonical\" value=\"{{{ fields.lab_canonical }}}\" placeholder=\"Permanent url for this front-page ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"lab_redirect_url\">Redirect url</label>\n                    <input type=\"text\" value=\"{{ fields.lab_redirect_url}}\" name=\"fields.lab_redirect_url\" id=\"lab_redirect_url\" placeholder=\"301 redirect, use with caution ...\">\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"general-page-defaultsection\">Default section</label>\n                    <input type=\"text\" name=\"fields.defaultsection\" id=\"general-page-defaultsection\" value=\"{{ fields.defaultsection }}\" placeholder=\"Default section-name for this front-page ...\">\n                </div>\n            </div>\n        </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Page'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.name': {\n                node: 'fields.name',\n                meta: 'name',\n                validator: 'notEmpty'\n            },\n            'fields.hostpath': {\n                node: 'fields.hostpath',\n                meta: 'hostpath',\n                validator: 'notEmpty'\n            },\n            'fields.lab_canonical': {\n                node: 'fields.lab_canonical'\n            },\n            'fields.lab_redirect_url': {\n                node: 'fields.lab_redirect_url'\n            },\n            'fields.defaultsection': {\n                node: 'fields.defaultsection',\n                meta: 'defaultsection'\n            }\n        };\n    }\n\n    onMarkup() {\n        return this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                name: this.rootModel.get('fields.name'),\n                hostpath: this.rootModel.get('fields.hostpath'),\n                lab_canonical: this.rootModel.get('fields.lab_canonical'),\n                lab_redirect_url: this.rootModel.get('fields.lab_redirect_url'),\n                defaultsection: this.rootModel.get('fields.defaultsection')\n            }\n        }, true);\n    }\n\n}\n","import { AutoFontSize } from '../../lib/helpers/AutoFontSize.js';\n\nexport class GeneralSettings {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.meta = params.meta;\n        this.templates = params.templates;\n        this.enabled = true; // Sub-views may override and set to false to disable\n        this.template = `<div class=\"lab-modal-form lab-grid\">\n        <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n            <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none\">General settings</h2>\n            <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                <label for=\"general-settings-site_id\">Site-name for this front page</label>\n                <div data-placeholder=\"site-selector\">\n                    <!-- Element replaced by modal -->\n                </div>\n            </div>\n            <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                <label for=\"general-settings-template\">Template</label>\n                <div data-placeholder=\"template-selector\">\n                    <!-- Element replaced by modal -->\n                </div>\n            </div>\n            <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline\">\n                <label for=\"general-settings-favourite\">Show in \"Front pages\" menu</label>\n                <input type=\"checkbox\" name=\"fields.favourite\" id=\"general-settings-favourite\" value=\"1\"{{ #fields.favourite }} checked{{ /fields.favourite }}>\n            </div>\n            <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline\">\n                <label for=\"general-settings-hideAds\">Hide ads from this page</label>\n                <input type=\"checkbox\" name=\"fields.hideAds\" id=\"general-settings-hideAds\" value=\"1\"{{ #fields.hideAds }} checked{{ /fields.hideAds }}>\n            </div>\n            <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline\">\n                <label for=\"style_spacing\">Enable custom space editing</label>\n                <input type=\"checkbox\" value=\"1\" name=\"fields.style_spacing\" id=\"style_spacing\" {{ #fields.style_spacing }}checked{{ /fields.style_spacing }}>\n            </div>\n            <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline\">\n                <label for=\"general-settings-autoFontSize\">Enable auto font size for titles</label>\n                <input type=\"checkbox\" value=\"1\" name=\"fields.autoFontSize\" id=\"general-settings-autoFontSize\" {{ #fields.autoFontSize }}checked{{ /fields.autoFontSize }}>\n            </div>\n            <div class=\"lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap\">\n                <label>Url</label>\n                <p><a href=\"{{{ meta.frontpageurl }}}\" target=\"_blank\">{{{ meta.frontpageurl }}}</a></p>\n            </div>\n        </div>\n    </div>`;\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Settings'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.site_id': {\n                meta: 'site_id',\n                validator: 'notEmpty'\n            },\n            template: {\n                meta: 'template',\n                validator: 'notEmpty'\n            },\n            'fields.favourite': {\n                node: 'fields.favourite',\n                meta: 'favourite',\n                boolean: true\n            },\n            'fields.hideAds': {\n                node: 'fields.hideAds',\n                boolean: true\n            },\n            'fields.style_spacing': {\n                node: 'fields.style_spacing',\n                boolean: true\n            },\n            'fields.autoFontSize': {\n                node: 'fields.autoFontSize',\n                boolean: true\n            }\n        };\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                favourite: this.rootModel.get('fields.favourite') === 'true' || this.rootModel.get('fields.favourite') === true,\n                hideAds: this.rootModel.get('fields.hideAds') === '1' || this.rootModel.get('fields.hideAds') === true,\n                style_spacing: this.rootModel.get('fields.style_spacing'),\n                autoFontSize: this.rootModel.get('fields.autoFontSize') === '1' || this.rootModel.get('fields.autoFontSize') === true\n            },\n            meta: {\n                frontpageurl: this.api.v1.pages.front.getData().frontpageurl\n            }\n        }, true);\n\n        const autoFontSizeReload = markup.querySelector('#general-settings-autoFontSize');\n        if (this.api.v1.config.get('autoFontSize.enabled') === false) {\n            autoFontSizeReload.parentNode.innerHTML = '';\n        } else {\n            autoFontSizeReload.addEventListener('change', (event) => {\n                this.requestReload();\n            }, autoFontSizeReload);\n        }\n\n        const sitePlaceholder = markup.querySelector('[data-placeholder=\"site-selector\"]');\n        sitePlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getSiteSelector({\n            value: parseInt(this.rootModel.get('fields.site_id') || 0, 10),\n            attributes: [{\n                name: 'name', value: 'fields.site_id'\n            }, {\n                name: 'id', value: 'general-settings-site_id'\n            }],\n            events: [{\n                name: 'change',\n                callback: (event) => {\n                    this.requestReload();\n                }\n            }]\n        }), sitePlaceholder);\n\n        const templatePlaceholder = markup.querySelector('[data-placeholder=\"template-selector\"]');\n        templatePlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getSelectElement({\n            value: this.meta.template,\n            options: this.templates.data.map((item) => ({ value: item.alias })),\n            attributes: [{\n                name: 'name', value: 'template'\n            }, {\n                name: 'id', value: 'general-settings-template'\n            }],\n            events: [{\n                name: 'change',\n                callback: (event) => {\n                    this.requestReload();\n                }\n            }]\n        }), templatePlaceholder);\n        return markup;\n    }\n\n    requestReload() {\n        this.api.v1.ui.modal.dialog({\n            content: {\n                title: 'Reload page',\n                description: 'The template or site for this front page has changed. Reload to continue editing with updated data.'\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Continue without reloading',\n                        id: 'continueBtn',\n                        highlight: false\n                    },\n                    {\n                        value: 'Reload',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            },\n            callbacks: {\n                submit: (formValues, theModal) => {\n                    theModal.close(true);\n                    this.api.v1.app.reload();\n                }\n            },\n            eventHandlers: [{\n                selector: '#continueBtn',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }]\n        });\n    }\n\n}\n","import contentLanguages from '../../lib/helpers/ContentLanguages.js';\n\nexport class SeoSettings {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.log = params.log;\n        this.languageElement = null;\n        this.languageLabel = null;\n        this.enabled = true;\n        this.isFrontPage = this.rootModel.getType() === 'page_front';\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid lab-grid-gap lab-space-above-none\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none\">Search Engine Optimization</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"seo-seotitle\">SEO title</label>{{{ buttons.seo_content }}}\n                    <textarea data-sugegstion-name=\"seo_content\" name=\"fields.seotitle\" id=\"seo-seotitle\" placeholder=\"Search engine title ...\">{{ fields.seotitle }}</textarea>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"seo-seodescription\">SEO description</label>\n                    <textarea data-sugegstion-name=\"seo_content\" name=\"fields.seodescription\" id=\"seo-seodescription\" placeholder=\"Search engine description ...\">{{ fields.seodescription }}</textarea>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline lab-grid-gap\">\n                    <label for=\"norobots\">Hide from Google</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.norobots\" id=\"norobots\" {{ #fields.norobots }}checked{{ /fields.norobots }}>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium\">\n                    <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none\">Page language</h2>\n                    <p>This will <strong>only</strong> apply to the current page.</p>\n                    <select name=\"fields.seolanguage\" id=\"languages\">\n                        <option value=\"\">Select language</option>\n                        {{ #languages }}\n                        <option value=\"{{ code }}\"{{ #selected }} selected{{ /selected }}>{{ name }} - {{ code }}</option>\n                        {{ /languages }}\n                    </select>\n                    <p id=\"language-label\">{{ #fields.seolanguage }}Selected language: <strong>{{ fields.seolanguage }}</strong>{{ /fields.seolanguage }}{{ ^fields.seolanguage }}No language selected{{ /fields.seolanguage }}</p>\n                    <p>The default language for the site is: <strong>{{ defaultLanguage }}</strong></p>\n                </div>\n            </div>\n\n            <div class=\"lab-formgroup lab-grid lab-grid-gap\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Social Media</h2>\n\n                ${ this.isFrontPage ? `\n                <img id=\"some-image\" style=\"display:{{# fields.someimage }}block{{/ fields.someimage }}{{^ fields.someimage}}none{{/ fields.someimage}}; width: 100%; max-height: 250px; object-fit: contain; background-color: #e7e7e7;\" src=\"{{{images_url}}}/{{fields.someimage}}.webp?width=600&height=315\" />\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <input type=\"button\" value=\"Select image\" id=\"some-select-image\" />\n                    <input type=\"button\" value=\"Remove image\" id=\"some-remove-image\" />\n                </div>` : '' }\n\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"seo-sometitle\">SoMe title</label>{{{ buttons.some_content }}}\n                    <textarea data-sugegstion-name=\"some_content\" name=\"fields.sometitle\" id=\"seo-sometitle\" placeholder=\"SoMe title ...\">{{ fields.sometitle }}</textarea>\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap\">\n                    <label for=\"seo-somedescription\">SoMe description</label>\n                    <textarea data-sugegstion-name=\"some_content\" name=\"fields.somedescription\" id=\"seo-somedescription\" placeholder=\"SoMe description ...\">{{ fields.somedescription }}</textarea>\n                </div>\n            </div>\n\n        </div>`;\n        this.dom = {\n            someimage: null\n        };\n    }\n\n    // SettingsFront: If section exist: add item to it, if not: create.\n    onAside() {\n        return {\n            section: 'SEO',\n            label: 'SEO settings'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.seotitle': {\n                node: 'fields.seotitle'\n            },\n            'fields.seodescription': {\n                node: 'fields.seodescription'\n            },\n            'fields.norobots': {\n                node: 'fields.norobots', boolean: true\n            },\n            'fields.sometitle': {\n                node: 'fields.sometitle'\n            },\n            'fields.somedescription': {\n                node: 'fields.somedescription'\n            },\n            'fields.seolanguage': {\n                node: 'fields.seolanguage'\n            }\n        };\n    }\n\n    onMarkup() {\n        const seolanguage = this.rootModel.get('fields.seolanguage');\n        const defaultLanguage = lab_api.v1.config.get('contentLanguage');\n        const selectedLanguage = seolanguage || defaultLanguage;\n        const languages = contentLanguages.map((language) => ({ name: language.name, code: language.code, selected: language.code === selectedLanguage }));\n\n        if (this.rootModel.getType() === 'page_front') {\n            const frontMarkup = this.api.v1.util.dom.renderTemplate(this.template, {\n                fields: {\n                    seotitle: this.rootModel.get('fields.seotitle'),\n                    seodescription: this.rootModel.get('fields.seodescription'),\n                    norobots: this.rootModel.get('fields.norobots'),\n                    someimage: this.rootModel.get('fields.someimage'),\n                    sometitle: this.rootModel.get('fields.sometitle'),\n                    somedescription: this.rootModel.get('fields.somedescription'),\n                    seolanguage: seolanguage || defaultLanguage\n                },\n                images_url: this.api.v1.properties.get('image_server'),\n                languages,\n                defaultLanguage\n            }, true);\n\n            const someImage = frontMarkup.querySelector('#some-image');\n            this.dom.someimage = someImage;\n\n            const someSelectImage = frontMarkup.querySelector('#some-select-image');\n            const someRemoveImage = frontMarkup.querySelector('#some-remove-image');\n\n            someSelectImage.addEventListener('click', async(event) => {\n                this.changeImage();\n            }, false);\n\n            someRemoveImage.addEventListener('click', (event) => {\n                this.removeImage();\n            }, false);\n\n            return frontMarkup;\n        }\n\n        const buttons = {\n            seo_content: `<span class=\"lab-btn lab-xsmall lab-generate lab-link lab-busy-top\" id=\"suggest-btn-seo_content\" style=\"float:right; position:relative;\">Generate new SEO texts</span>`,\n            some_content: `<span class=\"lab-btn lab-xsmall lab-generate lab-link lab-busy-top\" id=\"suggest-btn-some_content\" style=\"float:right; position:relative;\">Generate new SoMe texts</span>`\n        };\n\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            buttons,\n            languages,\n            defaultLanguage,\n            fields: {\n                seotitle: this.rootModel.get('fields.seotitle'),\n                seodescription: this.rootModel.get('fields.seodescription'),\n                norobots: this.rootModel.get('fields.norobots'),\n                someimage: this.rootModel.get('fields.someimage'),\n                sometitle: this.rootModel.get('fields.sometitle'),\n                somedescription: this.rootModel.get('fields.somedescription'),\n                seolanguage: this.rootModel.get('fields.seolanguage') || defaultLanguage\n            }\n        }, true);\n\n        const allowFunction = this.api.v1.ns.get('textAssistant.allow');\n        if (!allowFunction || !allowFunction()) {\n            for (const el of [...markup.querySelectorAll(`.textsuggestion-btn`)]) {\n                el.classList.add('lab-disabled');\n            }\n        }\n\n        for (const name of Object.keys(buttons)) {\n            const btn = markup.querySelector(`#suggest-btn-${ name }`);\n            btn.addEventListener('click', (event) => {\n                const inputEls = [...markup.querySelectorAll(`[data-sugegstion-name=\"${ name }\"]`)];\n                this.toggleSuggestUI(false, btn, inputEls);\n                lab_api.v1.ns.get('textAssistant.fetchByName')(name).then((result) => {\n                    if (result) {\n                        this.setSuggestionValue(result, inputEls);\n                    }\n                    this.toggleSuggestUI(true, btn, inputEls);\n                }).catch((error) => {\n                    this.toggleSuggestUI(true, btn, inputEls);\n                    console.error(error);\n                });\n            });\n        }\n\n        const languageElement = markup.querySelector('#languages');\n        const languageLabel = markup.querySelector('#language-label');\n\n        // Not sure why to do this? Will this update the element with the new selected data?\n        if (this.languageElement) { this.languageElement.replaceWith(languageElement); }\n        if (this.languageLabel) { this.languageLabel.replaceWith(languageLabel); }\n\n        this.languageElement = languageElement;\n        this.languageLabel = languageLabel;\n\n        this.setupLanguages();\n\n        return markup;\n    }\n\n    setupLanguages() {\n        this.languageElement.addEventListener('change', (event) => {\n            if (!this.languageElement.value) { return; }\n            this.languageLabel.innerHTML = `Selected language: <strong>${ this.languageElement.value }</strong>`;\n            this.rootModel.set('fields.seolanguage', this.languageElement.value);\n        }, false);\n    }\n\n    toggleSuggestUI(on, btn, elements) {\n        if (on) {\n            btn.classList.remove('lab-busy');\n            for (const inputEl of elements) {\n                inputEl.removeAttribute('disabled');\n            }\n        } else {\n            btn.classList.add('lab-busy');\n            for (const inputEl of elements) {\n                inputEl.setAttribute('disabled', 'disabled');\n            }\n        }\n    }\n\n    setSuggestionValue(values, elements) {\n        for (const inputEl of elements) {\n            inputEl.value = values[inputEl.getAttribute('name')];\n            const e = new Event('change');\n            inputEl.dispatchEvent(e);\n        }\n    }\n\n    changeImage() {\n        this.api.v1.collection.display({\n            name: 'MediaImages',\n            modal: true,\n            skipCache: true,\n            options: {\n                label: 'All Images',\n                archiveActive: true,\n                clickHandler: (model, element) => {\n                    this.setImage(model);\n                }\n            }\n        });\n    }\n\n    setImage(model) {\n        const instanceId = model.get('instance_of');\n        if (instanceId != null) {\n            this.rootModel.set('fields.someimage', instanceId);\n            this.dom.someimage.src = `${ this.api.v1.properties.get('image_server') }/${ instanceId }.webp?width=600&height=315`; // Note: Width and Height are currently hardcoded. This should be changed to a more dynamic solution on demand. (Currently following the default image size for SoMe images.)\n            this.dom.someimage.style.display = 'block';\n            this.log({\n                type: 'data',\n                app: this.constructor.name,\n                path: 'fields.someimage',\n                someimage: 'add'\n            });\n        } else {\n            // eslint-disable-next-line no-console\n            console.warn('[SeoSettings] No image instance id found during front image selection.');\n        }\n    }\n\n    removeImage() {\n        this.rootModel.set('fields.someimage', null);\n        this.dom.someimage.style.display = 'none';\n        this.dom.someimage.src = ``;\n        this.log({\n            type: 'data',\n            app: this.constructor.name,\n            path: 'fields.someimage',\n            someimage: 'delete'\n        });\n    }\n\n}\n","/* eslint-disable camelcase */\n\nexport class SettingsFront {\n\n    constructor(api, params = {}) {\n        this.api = api;\n        this.dom = {\n            sections: {},\n            selected: null\n        };\n        this.nodeSetterPaths = new Map();\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.frontSettings = this.api.v1.pages.front.getByNodeId(this.rootModel.getId());\n        this.resources = {};\n\n        if (!this.validatePage()) {\n            Sys.logger.warn('[SettingsFront] Page-type not validated. Will only run on front-pages.');\n            return;\n        }\n\n        const additions = this.api.v1.config.get('customMenuData.SettingsFront.additions') || [];\n        const removals = this.api.v1.config.get('customMenuData.SettingsFront.removals') || [];\n        const customElements = this.api.v1.config.get('customMenuData.SettingsFront.items');\n        const apps = [\n            'GeneralSettings',\n            'GeneralPage',\n            'Colors',\n            'SeoSettings',\n            'AutomationSettings',\n            'AdvancedViewports',\n            'ConfigOverride',\n            'FrontSaveAs',\n            'ExportMailmojo'\n        ].concat(additions).filter((app) => !removals.includes(app));\n        this.apps = {};\n\n        if (customElements && Array.isArray(customElements.formgroups)) {\n            apps.push('CustomElements');\n        }\n\n        this.getResources(apps, params).then((resources) => {\n            this.draw(resources, customElements);\n        }).catch((error) => {\n            Sys.logger.warn('[SettingsFront] Error loading resources:');\n            console.log(error);\n        });\n\n    }\n\n    draw(input, customElements) {\n        if (customElements && Array.isArray(customElements.formgroups) && input.apps.CustomElements) {\n            input.apps.CustomElements.setElementsConfig(customElements);\n        }\n        const appsData = this.runApps(input.apps);\n        const placeholders = appsData.map((app) => app.placeholder);\n        const modal = this.api.v1.ui.modal.dialog({\n            defaultButtons: false,\n            container: {\n                width: 800\n            },\n            content: {\n                header: 'Frontpage Settings',\n                markup: `<div>${ appsData.map((app) => `<div data-placeholder=\"${ app.placeholder.name }\"></div>`).join('') }</div>`\n            },\n            aside: {\n                position: 'left',\n                expandable: true,\n                header: 'Options',\n                content: this.getAsideMarkup(appsData),\n                noPadding: true,\n                width: 210\n            },\n            callbacks: {\n                didDisplay: () => {\n                    if (this.dom.selected) { return; }\n                    this.setupEvents(modal.getMarkup());\n                    if (input.resources.params.source) {\n                        this.dom.selected = appsData[0].name;\n                        this.displaySource(input.resources.params.source);\n                    } else {\n                        this.displaySource(appsData[0].name);\n                    }\n                }\n            },\n            placeholders\n        });\n    }\n\n    getAsideMarkup(appsData) {\n        const items = [];\n        const sections = {};\n        for (const appData of appsData) {\n            if (appData.aside.section && appData.aside.label) {\n                if (!sections[appData.aside.section]) {\n                    sections[appData.aside.section] = { label: appData.aside.section, items: [] };\n                }\n                sections[appData.aside.section].items.push({\n                    label: appData.aside.label,\n                    target: appData.name\n                });\n            } else {\n                Sys.logger.warn(`[SettingsFront] Missing required \"aside.section\" or \"aside.label\" for app \"${ appData.name }\"`);\n            }\n        }\n        for (const name of Object.keys(sections)) {\n            items.push(`<div class=\"lab-aside-settings\">\n                <h4 class=\"lab-title\">${ sections[name].label }</h4>\n                ${ sections[name].items.map((item) => `<p class=\"lab-para lab-link\" data-nav-target=\"${ item.target }\">${ item.label }</p>`).join('') }\n            </div>`);\n        }\n        return items.join('');\n    }\n\n    runApps(apps) {\n        const result = [];\n        for (const name of Object.keys(apps)) {\n            const app = apps[name];\n            const markup = app.onMarkup();\n            if (markup) {\n                this.apps[name] = app;\n                markup.setAttribute('data-source', name);\n                const aside = app.onAside() || {};\n                if (aside.item) {\n                    aside.identifier = name;\n                }\n                const paths = app.onPaths() || {};\n                const item = {\n                    placeholder: {\n                        element: markup,\n                        selector: `[data-placeholder=\"${ name }\"]`,\n                        name\n                    },\n                    paths,\n                    aside,\n                    name\n                };\n                this.registerAutoSave(markup, paths, app);\n                result.push(item);\n            } else {\n                Sys.logger.warn(`[SettingsFront] No markup returned by app \"${ name }\".`);\n            }\n        }\n        return result;\n    }\n\n    registerAutoSave(markup, paths, app) {\n        for (const path of Object.keys(paths)) {\n            if (paths[path].node) {\n                this.nodeSetterPaths.set(paths[path].node, paths[path]);\n            }\n            const els = markup.querySelectorAll(`[name=\"${ path }\"]`);\n            if (els.length) {\n                for (const el of els) {\n                    this.registerInputItem(el, paths[path], app);\n                }\n            }\n        }\n    }\n\n    registerInputItem(element, pathInfo, app) {\n        element.addEventListener('change', (event) => {\n            let value = pathInfo.boolean ? element.checked : element.value;\n            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {\n                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {\n                    element.parentElement.classList.add('lab-validation-error');\n                    return;\n                }\n                element.parentElement.classList.remove('lab-validation-error');\n            }\n            if (typeof pathInfo.transformer === 'function') {\n                value = pathInfo.transformer(value, pathInfo);\n            }\n            if (pathInfo.callback && typeof pathInfo.callback === 'function') {\n                pathInfo.callback(element, pathInfo);\n            }\n            if (pathInfo.node) {\n                this.savePath(pathInfo.node, value, pathInfo.suggestReload);\n            }\n            if (pathInfo.meta) {\n                this.saveMeta(pathInfo.meta, value);\n            }\n            // Log path and app-name in UI log:\n            this.logAction({\n                type: 'data',\n                app: app.constructor.name,\n                path: pathInfo.node || pathInfo.meta\n            });\n        }, false);\n    }\n\n    setupEvents(markup) {\n        for (const el of markup.querySelectorAll('.lab-aside-settings [data-nav-target]')) {\n            const source = el.getAttribute('data-nav-target');\n            if (source) {\n                this.dom.sections[source] = {\n                    selected: el.classList.contains('lab-selected'),\n                    name: source,\n                    nav: el,\n                    element: markup.querySelector(`.lab-modal-content [data-source=\"${ source }\"]`)\n                };\n                this.registerItem(source, this.dom.sections[source]);\n            }\n        }\n    }\n\n    async getResources(appsList, params) {\n        const templates = await this.api.v1.util.httpClient.get(`/ajax/template/get-aliases?nodeType=front&site=${ this.api.v1.site.getSite().alias }`);\n        const resources = {\n            templates,\n            params,\n            meta: this.api.v1.pages.front.getData(),\n            rootModel: this.rootModel,\n            log: this.logAction.bind(this)\n        };\n        return {\n            resources,\n            apps: await this.importApps(appsList, resources)\n        };\n    }\n\n    logAction(data) {\n        if (this.api.v1.eventmonitor.writer.log) {\n            this.api.v1.eventmonitor.writer.log({\n                action: 'baseview_frontSettings',\n                ...data\n            });\n        }\n    }\n\n    async importApps(apps, resources) {\n        const promises = {};\n        for (const app of apps) {\n            promises[app] = this.api.v1.apps.start(app, resources);\n        }\n        const resolved = {};\n        const modules = await Promise.all(Object.values(promises));\n        modules.forEach((instance, index) => {\n            const name = Object.keys(promises)[index];\n            if (instance.enabled) {\n                Sys.logger.debug(`[SettingsFront] Adding app \"${ name }\"`);\n                resolved[name] = instance;\n            } else {\n                Sys.logger.debug(`[SettingsFront] Skipping disabled app \"${ name }\"`);\n            }\n        });\n        return resolved;\n    }\n\n    // Only run on front-pages\n    validatePage() {\n        if (this.rootModel.getType() === 'page_front') {\n            return true;\n        }\n        return false;\n    }\n\n    registerItem(source, dom) {\n        dom.nav.addEventListener('click', (event) => {\n            this.displaySource(source);\n        }, false);\n        if (dom.selected) {\n            this.displaySource(source);\n        }\n    }\n\n    savePath(path, value) {\n        this.rootModel.set(path, value);\n    }\n\n    saveMeta(path, value) {\n        const data = {};\n        data[path] = value;\n        this.api.v1.pages.front.update(data);\n    }\n\n    displaySource(source) {\n        if (this.dom.selected === source) { return; }\n        if (!this.dom.sections[source]) {\n            Sys.logger.warn(`[SettingsFront] Missing source \"${ source }\".`);\n            return;\n        }\n        if (this.dom.selected) {\n            this.dom.sections[this.dom.selected].nav.classList.remove('lab-selected');\n            this.dom.sections[this.dom.selected].element.classList.add('lab-hidden');\n            this.dom.selected = null;\n        }\n        if (!this.dom.sections[source].element) {\n            Sys.logger.warn(`[SettingsFront] Missing dom-element for source \"${ source }\".`);\n            return;\n        }\n        this.dom.sections[source].nav.classList.add('lab-selected');\n        this.dom.sections[source].element.classList.remove('lab-hidden');\n        this.dom.selected = source;\n\n        if (this.apps[source].onDisplayed) {\n            this.apps[source].onDisplayed(this.dom.sections[source].element);\n        }\n\n        this.logAction({\n            type: 'tab',\n            app: source\n        });\n\n    }\n\n}\n","export class MainViewport {\n\n    constructor(api, viewports, selected, model, path, permission, callback) {\n        this.api = api;\n        this.viewports = viewports;\n        this.selected = selected;\n        this.originalSelected = selected;\n        this.model = model;\n        this.path = path;\n        this.callback = callback;\n        this.hasPermission = permission ? this.api.v1.user.hasPermission(permission) : true;\n    }\n\n    getMarkup() {\n        const container = document.createElement('div');\n        container.classList.add('mainViewport', 'lab-grid-large-12', 'lab-grid-gap');\n        const template = `<div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline\">\n            <label for=\"mainViewport-{{ viewport }}\">{{ viewport }}</label>\n            <input type=\"radio\" id=\"mainViewport-{{ viewport }}\" name=\"mainViewport\" value=\"{{ viewport }}\"{{ #selected }} checked{{ /selected }}{{ #disabled }} disabled{{ /disabled }}>\n        </div>`;\n        for (const viewport of this.viewports) {\n            container.appendChild(this.createElement(viewport, template));\n        }\n        return container;\n    }\n\n    createElement(viewport, template) {\n        const el = this.api.v1.util.dom.renderTemplate(template, {\n            viewport,\n            selected: this.selected === viewport,\n            disabled: viewport === this.main || !this.hasPermission\n        }, true);\n        const checkbox = el.querySelector('input');\n        checkbox.addEventListener('change', (event) => {\n            if (this.selected === checkbox.value) { return; }\n            this.selected = checkbox.value;\n            this.save();\n        }, false);\n        return el;\n    }\n\n    save() {\n        this.model.set(this.path, this.selected);\n        this.callback(this.path, this.selected);\n        if (this.selected === this.originalSelected) { return; }\n        const modal = this.api.v1.ui.modal.dialog({\n            container: {\n                state: {\n                    warning: true\n                }\n            },\n            content: {\n                title: 'Main viewport changed',\n                description: `Main viewport is set to \"${ this.selected }\".<br>Reload page for change to take effect.`\n            },\n            footer: {\n                informalText: 'Chang will take effect next time you load the editor.',\n                buttons: [\n                    {\n                        type: 'button',\n                        id: 'cancel_button',\n                        value: 'Continue',\n                        highlight: false\n                    },\n                    {\n                        type: 'submit',\n                        value: 'Reload',\n                        highlight: true\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#cancel_button',\n                event: 'click',\n                callback: () => {\n                    modal.close();\n                }\n            }],\n            callbacks: {\n                submit: (event) => {\n                    modal.close(true);\n                    this.api.v1.app.reload();\n                }\n            }\n        });\n    }\n\n}\n","export class RequiredVieworts {\n\n    constructor(api, viewports, main, selected, model, path, permission, callback) {\n        this.api = api;\n        this.viewports = viewports;\n        this.main = main;\n        this.selected = selected;\n        this.model = model;\n        this.path = path;\n        this.callback = callback;\n        this.hasPermission = permission ? this.api.v1.user.hasPermission(permission) : true;\n    }\n\n    getMarkup() {\n        const container = document.createElement('div');\n        container.classList.add('requiredVieworts', 'lab-grid-large-12', 'lab-grid-gap');\n        const template = `<div class=\"lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline\">\n            <label for=\"requiredVieworts-{{ viewport }}\">{{ viewport }}</label>\n            <input type=\"checkbox\" id=\"requiredVieworts-{{ viewport }}\" value=\"1\"{{ #selected }} checked{{ /selected }}{{ #disabled }} disabled{{ /disabled }}>\n        </div>`;\n        for (const viewport of this.viewports) {\n            container.appendChild(this.createElement(viewport, template));\n        }\n        return container;\n    }\n\n    createElement(viewport, template) {\n        if (!this.selected.includes(viewport) && viewport === this.main) {\n            this.selected.push(viewport);\n        }\n        const el = this.api.v1.util.dom.renderTemplate(template, {\n            viewport,\n            selected: this.selected.includes(viewport),\n            disabled: viewport === this.main || !this.hasPermission\n        }, true);\n        const checkbox = el.querySelector('input');\n        checkbox.addEventListener('change', (event) => {\n            if (checkbox.checked) {\n                this.addViewport(viewport);\n            } else {\n                this.removeViewport(viewport);\n            }\n        }, false);\n        return el;\n    }\n\n    addViewport(viewport) {\n        if (!this.selected.includes(viewport)) {\n            this.selected.push(viewport);\n            this.displayViewports([...this.selected]);\n        }\n        this.save();\n    }\n\n    removeViewport(viewport) {\n        this.selected = this.selected.filter((vp) => vp !== viewport);\n        this.save();\n    }\n\n    displayViewports(viewports) {\n        const current = this.api.v1.viewport.getActive();\n        if (this.api.v1.util.valueTransformer.conditionalArrayCompare(current, viewports) && this.api.v1.util.valueTransformer.conditionalArrayCompare(viewports, current)) {\n            return;\n        }\n        this.api.v1.viewport.display(viewports);\n    }\n\n    save() {\n        this.model.set(this.path, [...this.selected]);\n        this.callback(this.path, [...this.selected]);\n    }\n\n}\n","/**\n * Export a list of standalone apps as modules\n * Secondary views may override by replacing one or more modules\n */\n\nimport { SettingsFront } from './front/index.js';\nimport { GeneralSettings } from './front/GeneralSettings.js';\nimport { GeneralPage } from './front/GeneralPage.js';\nimport { SeoSettings } from './front/SeoSettings.js';\nimport { AutomationSettings } from './front/AutomationSettings.js';\nimport { FrontSaveAs } from './front/FrontSaveAs.js';\nimport { AdvancedViewports } from './front/AdvancedViewports.js';\nimport { ExportMailmojo } from './front/ExportMailmojo.js';\nimport { ConfigOverride } from './front/ConfigOverride.js';\nimport { Colors } from './front/Colors.js';\n\nimport { ArticleSettings } from './article/index.js';\nimport { ArticleTranslate } from './article/ArticleTranslate.js';\nimport { ArticleNotes } from './article/ArticleNotes.js';\nimport { ArticleChangelog } from './article/ArticleChangelog.js';\nimport { ArticleGeneralTeaser } from './article/ArticleGeneralTeaser.js';\nimport { ArticleAudio } from './article/ArticleAudio.js';\nimport { ArticleDates } from './article/ArticleDates.js';\nimport { ArticleCommercialSettings } from './article/ArticleCommercialSettings.js';\nimport { ArticleAdvancedSettings } from './article/ArticleAdvancedSettings.js';\nimport { ArticleCitation } from './article/ArticleCitation.js';\n\nimport { NoticeSettings } from './notice/index.js';\nimport { NoticeGeneralSettings } from './notice/NoticeGeneralSettings.js';\n\nimport { ArticleApproval } from './article/ArticleApproval.js';\nimport { ArticleStyling } from './article/ArticleStyling.js';\nimport { ArticleSite } from './article/ArticleSite.js';\nimport { RoxenExport } from './article/RoxenExport.js';\nimport { AptomaExport } from './article/AptomaExport.js';\n\nimport { CustomElements } from './CustomElements.js';\nimport { BylineEditor } from './BylineEditor.js';\nimport { TeaserEditor } from './TeaserEditor.js';\nimport { FrontContentSupport } from './FrontContentSupport.js';\nimport { ParallaxSupport } from './ParallaxSupport.js';\n\nimport { TopicSummary } from './article/TopicSummary.js';\nimport { ImageColors } from './ImageColors.js';\n\nimport { FieldVersion } from './fieldversion/index.js';\n\nexport default {\n    SettingsFront,\n    GeneralSettings,\n    GeneralPage,\n    SeoSettings,\n    AutomationSettings,\n    FrontSaveAs,\n    AdvancedViewports,\n    ExportMailmojo,\n    ConfigOverride,\n    Colors,\n    ArticleSettings,\n    ArticleNotes,\n    ArticleChangelog,\n    ArticleGeneralTeaser,\n    ArticleAudio,\n    ArticleDates,\n    ArticleCommercialSettings,\n    ArticleAdvancedSettings,\n    ArticleCitation,\n    ArticleApproval,\n    ArticleStyling,\n    ArticleSite,\n    ArticleTranslate,\n    RoxenExport,\n    AptomaExport,\n    CustomElements,\n    BylineEditor,\n    TeaserEditor,\n    FrontContentSupport,\n    ParallaxSupport,\n    TopicSummary,\n    ImageColors,\n    FieldVersion,\n    NoticeSettings,\n    NoticeGeneralSettings\n};\n","export class NoticeGeneralSettings {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = params.rootModel;\n        this.helpers = params.helpers;\n        this.enabled = true;\n        this.template = `<div class=\"lab-modal-form lab-grid lab-hidden\">\n            <div class=\"lab-formgroup lab-grid\" id=\"convert-container\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-medium\">Convert</h2>\n                <p class=\"lab-info\">\n                    When converting to article this notice will be hidden from Google and redirected to the new article.\n                    Title, bodytext, tags and images will be copied. The article will be created using the selected prototype.\n                </p>\n                {{ #fields.convertedToArticleId }}\n                <p class=\"lab-para\">\n                    <b>This notice is already converted to an article.</b><br>\n                    <a href=\"/edit/article/id/{{ fields.convertedToArticleId }}\" target=\"_blank\" class=\"lab-btn\">Edit article</a>\n                    <a href=\"{{{ frontDomain }}}/a/{{ fields.convertedToArticleId }}\" target=\"_blank\" class=\"lab-btn\">View article</a>\n                </p>\n                {{ /fields.convertedToArticleId }}\n                \n                {{ ^fields.convertedToArticleId }}\n                <div class=\"lab-formgroup-item lab-grid-large-6\" id=\"prototype-error-container\">\n                    <label>Select article prototype to use</label>\n                    <div id=\"prototype-container\" class=\"lab-busy\" style=\"position: relative; padding-top: 10px;\">Loading prototypes ...</div>\n                    <!-- Prototype selector will render here -->\n                </div>\n                <div class=\"lab-formgroup-item lab-grid-large-4 lab-grid-gap\">\n                    <label for=\"convert_button\">Create article</label>\n                    <input type=\"button\" value=\"Convert to article\" id=\"convert_button\">\n                </div>\n                {{ /fields.convertedToArticleId }}\n            </div>\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-medium\">SEO</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"norobots\">Hide from Google</label>\n                    <input type=\"checkbox\" value=\"1\" name=\"fields.norobots\" id=\"norobots\" {{ #fields.norobots }}checked{{ /fields.norobots }}>\n                </div>\n            </div>\n            <div class=\"lab-formgroup lab-grid\">\n                <h2 class=\"lab-title lab-grid-large-12 lab-space-below-medium\">Commercial settings</h2>\n                <div class=\"lab-formgroup-item lab-grid-large-12 lab-inline\">\n                    <label for=\"hideAds\">Hide ads</label>\n                    <input type=\"checkbox\" name=\"fields.hideAds\" id=\"hideAds\" value=\"1\" {{ #fields.hideAds }}checked{{ /fields.hideAds }}>\n                </div>\n            </div>\n        </div>`;\n    }\n\n    onAside() {\n        return {\n            section: 'General',\n            label: 'Settings'\n        };\n    }\n\n    onPaths() {\n        return {\n            'fields.norobots': {\n                node: 'fields.norobots',\n                boolean: true\n            },\n            'fields.hideAds': {\n                node: 'fields.hideAds',\n                boolean: true,\n                suggestReload: true\n            }\n        };\n    }\n\n    onMarkup() {\n        const markup = this.api.v1.util.dom.renderTemplate(this.template, {\n            fields: {\n                norobots: this.rootModel.get('fields.norobots'),\n                convertedToArticleId: this.rootModel.get('fields.convertedToArticleId'),\n                hideAds: this.helpers.toBoolean(this.rootModel.get('fields.hideAds'))\n            },\n            frontDomain: this.api.v1.site.getSite().domain\n        }, true);\n\n        // Get all article prototypes\n        this.api.v1.util.httpClient.get('/ajax/articlePrototype/get-all').then((response) => {\n            const prototypeContainer = markup.querySelector('#prototype-container');\n            if (prototypeContainer) {\n                const prototypeSelect = this.api.v1.ui.element.getPrototypeSelector({\n                    siteId: this.api.v1.site.getSite().id,\n                    prototypes: response.data\n                });\n                prototypeContainer.innerHTML = '';\n                prototypeContainer.removeAttribute('style');\n                prototypeContainer.appendChild(prototypeSelect);\n                const convertBtn = markup.querySelector('#convert_button');\n                if (convertBtn) {\n                    convertBtn.addEventListener('click', () => {\n                        const errorContainer = markup.querySelector('#prototype-error-container');\n                        const convertContainer = markup.querySelector('#convert-container');\n                        if (prototypeSelect.value) {\n                            errorContainer.classList.remove('lab-validation-error');\n                            this.convertToArticle(this.rootModel.get('id'), prototypeSelect.value, convertContainer);\n                        } else {\n                            errorContainer.classList.add('lab-validation-error');\n                        }\n                    });\n                }\n                prototypeContainer.classList.remove('lab-busy');\n            }\n        }).catch((error) => {\n            console.error('error', error);\n        });\n        return markup;\n    }\n\n    convertToArticle(pageId, prototypeId, container) {\n        container.classList.add('lab-busy');\n        this.api.v1.util.httpClient.get(`/ajax/article/copy-to-prototype/?articleId=${ pageId }&prototype=${ prototypeId }`, { resetCache: true }).then((response) => {\n            if (response.imported && response.imported[pageId]) {\n                const articleId = response.imported[pageId];\n                if (articleId) {\n                    this.rootModel.set('fields.lab_redirect_url', `${ this.api.v1.site.getSite().domain }/a/${ articleId }`);\n                    this.rootModel.set('fields.norobots', '1');\n\n                    // Note: If this notice has set 'fields.lab_redirect_url' then the copy will also set it on the article.\n                    // This can lead to a redirect loop. Remove it from the copy.\n                    // Todo: Create support for blacklisting fields in the copy-to-prototype endpoint.\n                    const data = {\n                        type: 'article',\n                        id: articleId,\n                        fields: {\n                            lab_redirect_url: '',\n                            convertedFromNoticeId: `${ pageId }`\n                        }\n                    };\n                    const formData = new FormData();\n                    formData.append(`json[id]`, articleId);\n                    formData.append(`json[type]`, 'notice');\n                    formData.append(`json[node]`, JSON.stringify([data]));\n                    formData.append(`json[structure]`, JSON.stringify([]));\n                    formData.append(`lockId`, articleId);\n                    const params = {\n                        body: formData,\n                        method: 'POST'\n                    };\n                    fetch('/ajax/node/save-node-and-data', params)\n                        .then((resp) => resp.json())\n                        .then(() => {\n                            this.rootModel.set('fields.convertedToArticleId', `${ articleId }`);\n                            this.api.v1.ui.modal.close();\n                            this.api.v1.ui.modal.dialog({\n                                container: {\n                                    state: {\n                                        ok: true\n                                    }\n                                },\n                                content: {\n                                    title: 'Notice converted to article',\n                                    description: `This notice will be redirected to the new <a target=\"_blank\" href=\"/edit/article/id/${ articleId }\">article</a> (${ articleId }) when displayed on the front servers by your readers. Remember to publish this notice to apply the redirect changes.`\n                                },\n                                footer: {\n                                    buttons: [\n                                        {\n                                            value: 'Cancel',\n                                            id: 'cancel_button',\n                                            highlight: false\n                                        },\n                                        {\n                                            value: 'OK - Publish notice',\n                                            type: 'submit',\n                                            highlight: true\n                                        }\n                                    ]\n                                },\n                                eventHandlers: [{\n                                    selector: '#cancel_button',\n                                    event: 'click',\n                                    callback: (modal, event) => {\n                                        modal.close();\n                                    }\n                                }],\n                                callbacks: {\n                                    submit: (formValues) => {\n                                        this.api.v1.app.publish();\n                                    }\n                                }\n                            });\n                            this.api.v1.app.gotoUrl(`/edit/article/id/${ articleId }`, true);\n                        })\n                        .catch((error) => {\n                            container.classList.remove('lab-busy');\n                            console.log('error', error);\n                        });\n                }\n            }\n        }).catch((error) => {\n            container.classList.remove('lab-busy');\n            console.error('Error copying article', error);\n        });\n    }\n\n}\n","export class NoticeSettings {\n\n    constructor(api, params = {}) {\n        this.api = api;\n        this.dom = {\n            sections: {},\n            selected: null\n        };\n        this.nodeSetterPaths = new Map();\n        this.rootModel = this.api.v1.model.query.getRootModel();\n\n        if (!this.validatePage()) {\n            Sys.logger.warn('[NoticeSettings] Page-type not validated. Will only run on article-pages.');\n            return;\n        }\n\n        const additions = this.api.v1.config.get('customMenuData.NoticeSettings.additions') || [];\n        const removals = this.api.v1.config.get('customMenuData.NoticeSettings.removals') || [];\n        const customElements = this.api.v1.config.get('customMenuData.NoticeSettings.items');\n        const apps = [\n            'NoticeGeneralSettings',\n            'ArticleSite'\n        ].concat(additions).filter((app) => !removals.includes(app));\n        this.apps = {};\n\n        if (customElements && Array.isArray(customElements.formgroups)) {\n            apps.push('CustomElements');\n        }\n\n        this.getResources(apps, params).then((resources) => {\n            this.draw(resources, customElements);\n        }).catch((error) => {\n            Sys.logger.warn('[NoticeSettings] Error loading resources:');\n            console.log(error);\n        });\n    }\n\n    async getResources(appsList, params) {\n        const templates = await this.api.v1.util.httpClient.get('/ajax/template/get-aliases?nodeType=front');\n        const resources = {\n            templates,\n            params,\n            setter: this.pathSetter.bind(this),\n            rootModel: this.rootModel,\n            helpers: {\n                // Boolean node-data may be stored as number-strings. true -> \"1\", false -> \"0\"\n                // Transform the string \"0\" to boolean false etc.\n                toBoolean: (value) => {\n                    if (!value || value === '0' || value === 'false') {\n                        return false; // 0, '0', 'false', false, null, undefined, ...\n                    }\n                    return true;\n                }\n            }\n        };\n        return {\n            resources,\n            apps: await this.importApps(appsList, resources)\n        };\n    }\n\n    // This app can be extended with additional apps.\n    // Each app can set data using: `this.setter(key, value)` bound to this method.\n    pathSetter(key, value) {\n        if (this.nodeSetterPaths.has(key)) {\n            const pathInfo = this.nodeSetterPaths.get(key);\n            let validatedValue = value;\n            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {\n                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {\n                    return;\n                }\n            }\n            if (typeof pathInfo.transformer === 'function') {\n                validatedValue = pathInfo.transformer(value, pathInfo);\n            }\n            this.savePath(pathInfo.node, validatedValue, pathInfo.suggestReload);\n        }\n    }\n\n    async importApps(apps, resources) {\n        const promises = {};\n        for (const app of apps) {\n            promises[app] = this.api.v1.apps.start(app, resources);\n        }\n        const resolved = {};\n        const modules = await Promise.all(Object.values(promises));\n        modules.forEach((instance, index) => {\n            const name = Object.keys(promises)[index];\n            if (instance.enabled) {\n                Sys.logger.debug(`[NoticeSettings] Adding app \"${ name }\"`);\n                resolved[name] = instance;\n            } else {\n                Sys.logger.debug(`[NoticeSettings] Skipping disabled app \"${ name }\"`);\n            }\n        });\n        return resolved;\n    }\n\n    // Only run on article-pages\n    validatePage() {\n        if (this.rootModel.getType() === 'page_notice') {\n            return true;\n        }\n        return false;\n    }\n\n    draw(input, customElements) {\n        if (customElements && Array.isArray(customElements.formgroups) && input.apps.CustomElements) {\n            input.apps.CustomElements.setElementsConfig(customElements);\n        }\n        const appsData = this.runApps(input.apps);\n        const placeholders = appsData.map((app) => app.placeholder);\n        const modal = this.api.v1.ui.modal.dialog({\n            defaultButtons: false,\n            container: {\n                width: 800\n            },\n            content: {\n                header: 'Notice Settings',\n                markup: `<div>${ appsData.map((app) => `<div data-placeholder=\"${ app.placeholder.name }\"></div>`).join('') }</div>`\n            },\n            aside: {\n                position: 'left',\n                expandable: true,\n                header: 'Options',\n                content: this.getAsideMarkup(appsData),\n                noPadding: true,\n                width: 210\n            },\n            callbacks: {\n                didDisplay: () => {\n                    if (this.dom.selected) { return; }\n                    this.setupEvents(modal.getMarkup());\n                    if (input.resources.params.source) {\n                        this.dom.selected = appsData[0].name;\n                        this.displaySource(input.resources.params.source);\n                    } else {\n                        this.displaySource(appsData[0].name);\n                    }\n                },\n                end: () => {\n                    if (!this.dom.selected || !this.apps[this.dom.selected]) {\n                        return;\n                    }\n                    if (this.apps[this.dom.selected].onHidden) {\n                        this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);\n                    }\n                }\n            },\n            placeholders\n        });\n    }\n\n    getAsideMarkup(appsData) {\n        const items = [];\n        const sections = {};\n        for (const appData of appsData) {\n            if (appData.aside.section && appData.aside.label) {\n                if (!sections[appData.aside.section]) {\n                    sections[appData.aside.section] = { label: appData.aside.section, items: [] };\n                }\n                sections[appData.aside.section].items.push({\n                    label: appData.aside.label,\n                    target: appData.name\n                });\n            } else {\n                Sys.logger.warn(`[NoticeSettings] Missing required \"aside.section\" or \"aside.label\" for app \"${ appData.name }\"`);\n            }\n        }\n        for (const name of Object.keys(sections)) {\n            items.push(`<div class=\"lab-aside-settings\">\n                <h4 class=\"lab-title\">${ sections[name].label }</h4>\n                ${ sections[name].items.map((item) => `<p class=\"lab-para lab-link\" data-nav-target=\"${ item.target }\">${ item.label }</p>`).join('') }\n            </div>`);\n        }\n        return items.join('');\n    }\n\n    displaySource(source) {\n        if (this.dom.selected === source) { return; }\n        if (!this.dom.sections[source]) {\n            Sys.logger.warn(`[NoticeSettings] Missing source \"${ source }\".`);\n            return;\n        }\n        if (this.dom.selected) {\n            this.dom.sections[this.dom.selected].nav.classList.remove('lab-selected');\n            this.dom.sections[this.dom.selected].element.classList.add('lab-hidden');\n            if (this.apps[this.dom.selected].onHidden) {\n                this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);\n            }\n            this.dom.selected = null;\n        }\n        if (!this.dom.sections[source].element) {\n            Sys.logger.warn(`[NoticeSettings] Missing dom-element for source \"${ source }\".`);\n            return;\n        }\n        this.dom.sections[source].nav.classList.add('lab-selected');\n        this.dom.sections[source].element.classList.remove('lab-hidden');\n        this.dom.selected = source;\n\n        if (this.apps[source].onDisplayed) {\n            this.apps[source].onDisplayed(this.dom.sections[source].element);\n        }\n\n    }\n\n    setupEvents(markup) {\n        for (const el of markup.querySelectorAll('.lab-aside-settings [data-nav-target]')) {\n            const source = el.getAttribute('data-nav-target');\n            if (source) {\n                this.dom.sections[source] = {\n                    selected: el.classList.contains('lab-selected'),\n                    name: source,\n                    nav: el,\n                    element: markup.querySelector(`.lab-modal-content [data-source=\"${ source }\"]`)\n                };\n                this.registerItem(source, this.dom.sections[source]);\n            }\n        }\n    }\n\n    registerItem(source, dom) {\n        dom.nav.addEventListener('click', (event) => {\n            this.displaySource(source);\n        }, false);\n        if (dom.selected) {\n            this.displaySource(source);\n        }\n    }\n\n    runApps(apps) {\n        const result = [];\n        for (const name of Object.keys(apps)) {\n            const app = apps[name];\n            const markup = app.onMarkup();\n            if (markup) {\n                this.apps[name] = app;\n                markup.setAttribute('data-source', name);\n                const aside = app.onAside() || {};\n                if (aside.item) {\n                    aside.identifier = name;\n                }\n                const paths = app.onPaths() || {};\n                const item = {\n                    placeholder: {\n                        element: markup,\n                        selector: `[data-placeholder=\"${ name }\"]`,\n                        name\n                    },\n                    paths,\n                    aside,\n                    name\n                };\n                this.registerAutoSave(markup, paths);\n                result.push(item);\n            } else {\n                Sys.logger.warn(`[NoticeSettings] No markup returned by app \"${ name }\".`);\n            }\n        }\n        return result;\n    }\n\n    registerAutoSave(markup, paths) {\n        for (const path of Object.keys(paths)) {\n            if (paths[path].node) {\n                this.nodeSetterPaths.set(paths[path].node, paths[path]);\n            }\n            const els = markup.querySelectorAll(`[name=\"${ path }\"]`);\n            if (els.length) {\n                for (const el of els) {\n                    this.registerInputItem(el, paths[path]);\n                }\n            }\n        }\n    }\n\n    registerInputItem(element, pathInfo) {\n        element.addEventListener('change', (event) => {\n            let value = pathInfo.boolean ? element.checked : element.value;\n            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {\n                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {\n                    element.parentElement.classList.add('lab-validation-error');\n                    return;\n                }\n                element.parentElement.classList.remove('lab-validation-error');\n            }\n            if (typeof pathInfo.transformer === 'function') {\n                value = pathInfo.transformer(value, pathInfo);\n            }\n            if (pathInfo.callback && typeof pathInfo.callback === 'function') {\n                pathInfo.callback(element, pathInfo);\n            }\n            if (pathInfo.node) {\n                this.savePath(pathInfo.node, value, pathInfo.suggestReload);\n            }\n            if (pathInfo.meta) {\n                this.saveMeta(pathInfo.meta, value);\n            }\n        }, false);\n    }\n\n    savePath(path, value, suggestReload) {\n        const modified = this.rootModel.set(path, value);\n        if (modified && suggestReload) {\n            this.displayReloadOptions();\n        }\n    }\n\n    saveMeta(path, value) {\n        console.log('Todo: saveMeta: ', path, value);\n        // const data = {};\n        // data[path] = value;\n        // this.api.v1.pages.front.update(data);\n    }\n\n    displayReloadOptions() {\n        this.api.v1.ui.modal.dialog({\n            content: {\n                title: 'Page updated',\n                description: 'Reload editor for changes to take effect'\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Keep editing',\n                        highlight: false,\n                        id: 'keep-editing'\n                    },\n                    {\n                        value: 'Reload',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#keep-editing',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }],\n            callbacks: {\n                submit: () => {\n                    this.api.v1.ui.modal.close(true);\n                    this.api.v1.app.reload();\n                }\n            }\n        });\n    }\n\n}\n","export default class AdnuntiusAd {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const formatConfig = this.api.v1.config.get('contentbox_settings.adnuntiusAd.formats') || [];\n        const key = model.get('fields.format');\n\n        const format = formatConfig.filter((config) => config.format === key)[0] || {};\n        model.setFiltered('adData', format);\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug') ||  model.get('metadata.isDebug'));\n\n        if (!this.api.v1.app.mode.isEditor()) {\n            const hideOnTablet = (model.parent && model.parent.get('metadata.hideOnTablet') === true && this.api.v1.config.get('xUaDevice') === 'tablet');\n            model.setFiltered('hideOnTablet', hideOnTablet);\n        }\n\n        if (this.api.v1.app.mode.isEditor()) {\n            const pageType = this.api.v1.model.root.getType().replace('page_', '');\n            const filteredKeys = [];\n            formatConfig.forEach((item) => {\n                if ((item.selectable && item.selectable.indexOf(pageType) > -1) || (item.selectableOn && item.selectableOn[pageType] === true)) {\n                    if (item.format === key) {\n                        const mutableItem = { ...item };\n                        mutableItem.selected = true;\n                        filteredKeys.push(mutableItem);\n                    } else {\n                        filteredKeys.push(item);\n                    }\n                }\n            });\n            model.setFiltered('formatConfigKeys', filteredKeys);\n        }\n\n        // Set label with fallback to config.\n        const fallbackLabel = this.api.v1.config.get('contentbox_settings.adnuntiusAd.label') || 'Annonse';\n        const label = model.get('fields.label') || fallbackLabel;\n        model.setFiltered('label', label);\n\n        // For viewport Mailmojo we should not render the label unless it is specified. For other viewports we use CSS to hide it, cannot do that in Mailmojo.\n        model.setFiltered('displayLabel', label && (model.get('metadata.css') || '').includes('display-label'));\n\n        const isSticky = (model.get('metadata.css') || '').includes('sticky'); // Check if css string contains sticky keyword.\n        if (isSticky) {\n            const spacingTop = this.api.v1.config.get('contentbox_settings.adnuntiusAd.spacingTop') || 120;\n            const spacingTopStyle = `top: ${ spacingTop }px;`;\n            model.setFiltered('spacingTop', spacingTopStyle);\n        }\n    }\n\n}\n","export default class ApsisSubmit {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model) {\n        const config = this.api.v1.config.get('contentbox_settings.apsis_submit');\n        if (config) {\n            model.setFiltered('apsis', config);\n        }\n    }\n\n}\n","import { LayoutHelper } from '../../lib/helpers/LayoutHelper.js';\nimport { AutodataHelper } from '../../lib/helpers/AutodataHelper.js';\nimport { LanguageHelper } from '../../lib/helpers/LanguageHelper.js';\nimport { AutoFontSize } from '../../lib/helpers/AutoFontSize.js';\nimport { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class Article {\n\n    constructor(api) {\n        this.api = api;\n        this.imageServer = this.api.v1.properties.get('image_server');\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n        this.fallbackLanguage = this.api.v1.config.get('contentLanguage') || '';\n        this.autoFontSizeConfig = this.api.v1.config.get('autoFontSize') || [];\n        this.autoFontSizePageSettings = Boolean(this.rootModel ? this.rootModel.get('fields.autoFontSize') : false);\n        this.hasAutoFontSize = this.autoFontSizePageSettings && this.autoFontSizeConfig.enabled;\n        this.autoFontSizeDone = false;\n        this.dateTimeHelper = new DateTimeHelper(this.api.v1.config.get('lang') || undefined);\n    }\n\n    onInserted(model) {\n        if (this.api.v1.app.mode.isEditor()) {\n            // Check for auto font size status and set value of autoFontSize Enabled on teaser if empty\n            // This is to set a status on all teaser before it's enabled\n\n            if (this.hasAutoFontSize) {\n                model.set('state.autoFontSizeReRender', true, { notify: false });\n                const autoFontSizeListener = (model, path, value) => {\n                    if (model.get('fields.title') === model.get('state.title')) {\n                        model.set('state.autoFontSizeReRender', false, { notify: false });\n                    } else {\n                        model.set('state.autoFontSizeReRender', true, { notify: false });\n                        model.set('metadata.autoFontSizeDone', false, { notify: false });\n                    }\n                };\n                this.api.v1.model.bindings.bind(model, 'fields.title', autoFontSizeListener);\n            }\n        }\n    }\n\n    onReady(model, view) {\n        // Define correct spot to print title, subtitle and kicker.\n        // Use in template to include partials.\n        // Run in onReady to make data avilable to children (image etc.)\n        model.setFiltered('layout', LayoutHelper.textElements(view, this.api.v1.app.mode.isEditor()));\n\n        let link = model.get('fields.published_url') || '';\n        const regex = /^https?/;\n        if (!regex.test(link) && link) link = this.domain + link;\n        model.setFiltered('published_url', link);\n        model.setFiltered('published_url_rss', link.replace(/&/g, '&amp;'));\n    }\n\n    onRender(model, view) {\n        const articleId = model.get('instance_of') || model.get('fields.origin_data_json.id');\n        const pubDate = model.get('fields.published') || model.get('fields.origin_data_json.published');\n        const title =  model.get('fields.origin_data_json.teaserTitle') || view.get('fields.title') || '';\n        const subtitle = model.get('fields.origin_data_json.teaserSubtitle') || view.get('fields.subtitle') || '';\n        const publishedSitemap = model.get('fields.origin_data_json.published') || model.get('fields.published');\n        const kicker = model.get('fields.origin_data_json.teaserKicker') || model.get('fields.origin_data_json.kicker') || view.get('fields.kicker');\n        const siteId = model.get('fields.site_id') || model.get('fields.origin_data_json.site_id');\n        const language = model.get('fields.origin_data_json.seolanguage') || model.get('fields.seolanguage') || this.fallbackLanguage;\n        const audioUrl = model.get('fields.origin_data_json.teaserAudio') || model.get('fields.audio');\n        const audioInfo = model.get('fields.origin_data_json.teaserAudio_style_json') || model.get('fields.audioInfo') || {};\n        const addRelNoFollow = model.get('fields.origin_data_json.addRelNoFollow') || model.get('fields.addRelNoFollow') || false;\n        const addRelSponsored = model.get('fields.origin_data_json.addRelSponsored') || model.get('fields.addRelSponsored') || false;\n        const addRelUgc = model.get('fields.origin_data_json.addRelUgc') || model.get('fields.addRelUgc') || false;\n\n        model.setFiltered('published', pubDate); // Only used by rss-template\n        model.setFiltered('title', title);\n        model.setFiltered('kicker', kicker);\n        model.setFiltered('subtitle', subtitle);\n        model.setFiltered('articleId', articleId);\n        model.setFiltered('section', model.get('fields.origin_data_json.section_tag') || model.get('fields.section') || '');\n        model.setFiltered('base_url', this.domain);\n        model.setFiltered('published_sitemap', publishedSitemap);\n        model.setFiltered('canonical_url', `${ this.getSiteDomain(siteId) }/a/${ articleId }`);\n        model.setFiltered('tags', model.get('tags') || []);\n        model.setFiltered('languageIso639', LanguageHelper.convertToIso639(language));\n        const timestampOutOfDateDays = new Date().getTime() - (2 * 24 * 60 * 60 * 1000);\n        model.setFiltered('articleOutOfDate_sitemap', timestampOutOfDateDays > Math.floor(new Date(publishedSitemap).getTime()));\n        model.setFiltered('addRelNoFollow', addRelNoFollow);\n        model.setFiltered('addRelSponsored', addRelSponsored);\n        model.setFiltered('addRelUgc', addRelUgc);\n\n        if (!this.api.v1.config.get('showHiddenTagsOnFront')) {\n            const tagsToIgnore = (this.api.v1.config.get('tagsToHide') || '').split(',').map((tag) => tag.trim()) || [];\n            const filteredTags = (model.get('tags') || []).filter((tag) => !tagsToIgnore.includes(tag));\n            model.setFiltered('tags', filteredTags);\n        }\n\n        // Site:\n        if (siteId) {\n            const site = this.api.v1.site.getSiteById(siteId);\n            if (site) {\n                model.setFiltered('site_alias', site.alias);\n            }\n        }\n\n        if (audioUrl) {\n            const audio = {\n                url: audioUrl\n            };\n            if (audioInfo) {\n                const info = JSON.parse(audioInfo);\n                audio.title = info.title || null;\n                audio.fileType = info.fileType || null;\n                audio.playTime = info.playTime || null;\n            }\n            model.setFiltered('audio', audio);\n        }\n\n        // Byline-display:\n        const displayByline = model.get('fields.origin_data_json.showbylineonfp') || view.get('fields.displayByline') || false;\n        if (displayByline) {\n            const bylineName = view.get('fields.byline') || model.get('fields.origin_data_json.byline');\n            const bylineImage = view.get('fields.bylineImage') || model.get('fields.origin_data_json.bylineImage');\n            const bylineArray = model.get('fields.origin_data_json.full_bylines') || model.get('fields.full_bylines_json') || [];\n            const bylines = bylineArray.map((byline) => ({\n                firstname: byline.firstname,\n                lastname: byline.lastname,\n                description: byline.description,\n                imageUrl: byline.imageUrl ? this.getImageUrl(`${ byline.imageUrl }&width=90&height=90`) : ''\n            }));\n            // For old article teasers without full bylines:\n            if (!bylines.length && (bylineName || bylineImage)) {\n                bylines.push({\n                    firstname: bylineName,\n                    lastname: '',\n                    imageUrl: bylineImage ? this.getImageUrl(`${ bylineImage }&width=90&height=90`) : ''\n                });\n            }\n            model.setFiltered('bylines', bylines);\n            if (bylineImage) {\n                model.setFiltered('bylineImage', `${ bylineImage }&width=90&height=90`);\n            }\n        }\n        model.setFiltered('displayByline', displayByline);\n\n        // Get the published date and the date format, then set the state for if it should be displayed\n        const displayPublishedDate = view.get('fields.displayPublishedDate') || false;\n        const dateFormat = this.api.v1.locale.get('dates.monthdayyear', { noRender: true });\n        model.setFiltered('displayPublishedDate', displayPublishedDate);\n\n        if (displayPublishedDate) {\n            // Check if the article is published, and if we are in the editor\n            if (this.api.v1.app.mode.isEditor() && !pubDate) {\n                // Without being published and in editor, show the date format\n                // This will apply to automatic articles, and empty articles\n                model.setFiltered('publishedDate', dateFormat);\n            } else if (!this.api.v1.app.mode.isEditor() && !pubDate) {\n                // If the article is not publised (so an empty article) and we are on front, it should not be shown\n                model.setFiltered('displayPublishedDate', false);\n            } else {\n                // Otherwise show the published date formatted\n                const publishedDate = new Date(pubDate);\n                const publishedDateFormatted = this.dateTimeHelper.format(publishedDate, dateFormat);\n                model.setFiltered('publishedDate', publishedDateFormatted);\n            }\n        }\n\n        // Paywall\n        let paywall = model.get('fields.origin_data_json.paywall') || model.get('fields.paywall') || false;\n        if (paywall === 1 || paywall === '1' || paywall === true) {\n            paywall = true;\n        } else {\n            paywall = null;\n        }\n        if (paywall) {\n\n            const paywallLabel = {\n                ...{\n                    display: true,\n                    displayInNewsletter: true\n                },\n                ...this.api.v1.config.get('paywall.label')\n            };\n\n            // Get the paywall label text and icon from the config or default values.\n            // Check if the values exists, i.e. they have been set in the config files for the site, if they have not, set a default value.\n            // This should make all config values where the users have set the value to be an empty string still show nothing\n            const textValue = this.api.v1.config.get('paywall.label.text.content');\n            const iconValue = this.api.v1.config.get('paywall.label.icon.content');\n            const textContent = (textValue ===  undefined || textValue === null) ? 'Plus' : this.api.v1.config.get('paywall.label.text.content');\n            const iconContent = (iconValue === undefined || iconValue === null) ? 'fi-plus' : this.api.v1.config.get('paywall.label.icon.content');\n\n            // Create an object that can be added to the paywallLabel object\n            // This will add empty objects if config values are not set in admin, but that is fine.\n            const labelIcon = { text: { content: textContent }, icon: { content: iconContent } };\n            Object.assign(paywallLabel, labelIcon);\n\n            if (paywallLabel.display) {\n                paywallLabel.layout = {\n                    noImage: true,\n                    float: null\n                };\n                const imageChild = this.api.v1.model.query.getChildOfType(model, 'image') || this.api.v1.model.query.getChildOfType(model, 'graphic');\n                if (imageChild && imageChild.get('instance_of')) {\n                    const imageView = this.api.v1.view.getView(imageChild, view.getViewport());\n                    paywallLabel.layout.float = this.api.v1.config.get('paywall.label.labelPosition') || imageView.get('fields.float');\n                    paywallLabel.layout.noImage = !!view.get('metadata.hideimage');\n                }\n                model.setFiltered('paywallLabel', paywallLabel);\n            }\n        } else {\n            model.setFiltered('paywallLabel', null);\n        }\n        model.setFiltered('paywall', paywall);\n\n        // Tag placement\n        const tagPlacement = model.get('metadata.tagPlacement') || 'underImage';\n        model.setFiltered('tagPlacement.underImage', tagPlacement === 'underImage');\n        model.setFiltered('tagPlacement.underText', tagPlacement === 'underText');\n\n        // Section placement\n        const sectionPlacement = model.get('metadata.sectionPlacement') || 'floating';\n        model.setFiltered('sectionPlacement.floating', sectionPlacement === 'floating');\n        model.setFiltered('sectionPlacement.underImage', sectionPlacement === 'underImage');\n        model.setFiltered('sectionPlacement.underText', sectionPlacement === 'underText');\n\n        // Mailmojo\n        model.setFiltered('articleWidth', view.getPixelWidth());\n\n        // Autodata\n        model.setFiltered('autodata_css', AutodataHelper.parseCss(model));\n        model.setFiltered('autodata_content_css', AutodataHelper.parseCss(model, 'filtered.autodata_content'));\n        model.setFiltered('autodata_attributes', AutodataHelper.parseAttributes(model));\n        model.setFiltered('autodata_custom', AutodataHelper.parseCustomData(model));\n\n        if (this.autoFontSizeConfig.enabled) {\n            this.autoFontSizeDone = model.get('metadata.autoFontSizeDone');\n        }\n    }\n\n    onRendered(model, view) {\n        if (this.api.v1.app.mode.isEditor()) {\n            if (this.autoFontSizeConfig.enabled) {\n                // Small reset when you click inside teaser title to edit\n                const resetAutoFontSizeOnTool = () => {\n                    const domElement = view.getMarkup();\n                    const title = domElement.querySelector('.headline');\n                    AutoFontSize.removeFontSize(title);\n                    this.api.v1.tool.off('ended', resetAutoFontSizeOnTool);\n                };\n                if ((view.viewport === 'desktop' && this.hasAutoFontSize && model.get('metadata.autoFontSizeEnabled'))) {\n                    this.api.v1.tool.on('started', (params) => {\n                        if (params.key === 'fields.title' && params.model === model) {\n                            resetAutoFontSizeOnTool();\n                        }\n                    });\n                    if (model.get('state.autoFontSizeReRender') && model.get('fields.title') && !this.autoFontSizeDone && model.get('metadata.autoFontSizeEnabled')) {\n                        const domElement = view.getMarkup();\n                        const title = domElement.querySelector('.headline');\n                        const newTitle = AutoFontSize.autoSizeText(title, this.autoFontSizeConfig);\n                        model.set('state.autoFontSizeReRender', false, { notify: false });\n                        model.set('state.title', newTitle, { notify: false });\n                        model.set('metadata.autoFontSizeDone', true, { notify: false });\n                        model.set('fields.title', newTitle);\n                    }\n                }\n            }\n        }\n    }\n\n    onCreated(model) {\n        if (this.hasAutoFontSize && model.get('metadata.autoFontSizeEnabled') === null) {\n            model.set('metadata.autoFontSizeEnabled', true, { notify: false });\n        }\n    }\n\n    getSiteDomain(siteId) {\n        if (!siteId) { return ''; }\n        const site = this.api.v1.site.getSiteById(siteId);\n        if (!site) { return ''; }\n        return site.domain;\n    }\n\n    getImageUrl(url) {\n        if (!url) { return ''; }\n        if (url.startsWith('http')) { return url; }\n        return this.imageServer + url;\n    }\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class ArticleCalendar {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onViewHelper(model) {\n        const site_id = model.get('fields.site_id') || null;\n        const articleCount = model.get('fields.articleCount') || 6;\n        const dateHander = new DateTimeHelper();\n        const startDate = `${ dateHander.formattedUtcDate(new Date(), 'Y-m-d')  }T00:00:00Z`;\n        const options = {\n            baseUrl: `${ this.api.v1.properties.get('front_api_url')  }/api/v1/article/?`,\n            urlParams: {\n                orderBy: 'calendar_start_date',\n                order: 'asc', // asc, desc\n                site_id,\n                limit: articleCount,\n                htmlText: 1\n            },\n            urlQueryParam: {\n                visibility_status: 'P',\n                published: '[*%20NOW]',\n                calendar_start_date: `[${  startDate  }%20TO%20*]`\n            }\n        };\n        const urlParams = [];\n        for (const key in options.urlParams) {\n            if (options.urlParams[key]) {\n                urlParams.push(`${ key  }=${  options.urlParams[key] }`);\n            }\n        }\n        const urlQueryParams = [];\n        for (const key in options.urlQueryParam) {\n            if (options.urlQueryParam[key]) {\n                urlQueryParams.push(`${ key  }:${  options.urlQueryParam[key] }`);\n            }\n        }\n        urlParams.push(`query=${  urlQueryParams.join('%20AND%20') }`);\n        const parsedUrl = options.baseUrl + urlParams.join('&');\n        model.setFiltered('url', parsedUrl);\n    }\n\n    onRender(model, view) {\n        const externalData = view.get('external');\n        const site_id = model.get('fields.site_id') || '';\n\n        const displayImage = model.get('fields.displayImage');\n        const displayTitle = model.get('fields.displayTitle') || null;\n        const displaySubtitle = model.get('fields.displaySubtitle');\n\n        const imageServer = this.api.v1.properties.get('image_server');\n        const imageWidth = 420;\n        const aspectRatio = this.api.v1.config.get('contentbox_settings.articleCalendar.imageAspectRatio') || this.api.v1.config.get('image.defaultAspectRatio');\n        const imgArgs = [\n            `width=${  imageWidth }`,\n            `height=${  Math.floor(imageWidth * aspectRatio) }`,\n            `format=${ this.api.v1.image.getPreferredImageFormat() }`\n        ];\n\n        if (this.api.v1.app.mode.isEditor()) {\n            const adminView = {\n                displayImage: !!displayImage,\n                displayTitle: displayTitle === null ? true : !!displayTitle,\n                displaySubtitle: !!displaySubtitle\n            };\n\n            // Options for \"site_id\" (fields.site_id)\n            const site_idOptions = [{\n                value: '',\n                name: 'Any site'\n            }];\n            this.api.v1.site.getSites().forEach((site) => {\n                site_idOptions.push({\n                    value: site.id,\n                    name: site.display_name,\n                    selected: site_id && site.id === parseInt(site_id, 10)\n                });\n            });\n\n            adminView.site_ids = site_idOptions;\n            model.setFiltered('options', adminView);\n        }\n\n        if (externalData) {\n            // Format data:\n            const result = [];\n            externalData.result.forEach((article) => {\n                const articleData = {\n                    url: article.published_url\n                };\n                if (displayTitle) {\n                    articleData.title = article.teaserTitle || article.title;\n                }\n                if (displaySubtitle) {\n                    articleData.subtitle = article.teaserSubtitle || article.subtitle;\n                }\n                if (displayImage && article.frontCropUrl) {\n                    articleData.calendarimage = `${ imageServer }/${ article.frontCropUrl }&${ imgArgs.join('&') }`;\n                }\n                result.push(articleData);\n            });\n            model.setFiltered('data', result);\n        }\n    }\n\n}\n","export default class ArticleFooter {\n\n    constructor(api) {\n        this.api = api;\n        this.ignoredTags = this.api.v1.config.get('page_settings.article.ignoredTags') || [];\n        this.ignoredTagPrefix = this.api.v1.config.get('page_settings.article.ignoredTagPrefix') || [];\n        this.adminIgnoredTags = !this.api.v1.config.get('showHiddenTagsOnArticle') ? (this.api.v1.config.get('tagsToHide') || '').split(',').map((tag) => tag.trim()) : [];\n    }\n\n    onRender(model, view) {\n        const allIgnoredTags = [...new Set([...this.ignoredTags, ...this.adminIgnoredTags])];\n\n        const tags = (this.api.v1.model.query.getRootModel().get('tags') || []).filter((tag) => !allIgnoredTags.includes(tag)).filter((tag) => {\n            for (const prefix of this.ignoredTagPrefix) {\n                if (tag.startsWith(prefix)) {\n                    return false;\n                }\n            }\n            return true;\n        });\n        model.setFiltered('tags', tags);\n        model.setFiltered('tagPagePath', this.api.v1.config.get('tagPagePath') || '/tag/');\n    }\n\n}\n","import { LayoutHelper } from '../../lib/helpers/LayoutHelper.js';\n\nexport default class ArticleHeader {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onInserted(model) {\n        if (model.get('metadata.hidecaption')) {\n            model.set('fields.displayCaption', false, { save: false });\n            model.set('metadata.hidecaption', null, { save: false });\n        }\n    }\n\n    onRender(model, view) {\n        const layout = LayoutHelper.textElements(view, this.api.v1.app.mode.isEditor());\n        model.setFiltered('layout', layout);\n        model.setFiltered('hasFloatingText', layout.floating.length > 0);\n        if (this.api.v1.app.mode.isFront()) {\n            // Lab 3 could store styled kicker with text-content of the placeholder.\n            // <span class=\"font-weight-bold\" data-lab-font_weight_desktop=\"font-weight-bold\">Click to add kicker</span>\n            const kicker = model.get('fields.kicker');\n            model.setFiltered('hideKicker', !kicker || kicker.includes('Click to add kicker'));\n        }\n    }\n\n    async onChildAdded(model, childModel) {\n        // Use image for front crop if:\n        // - Child is an image\n        // - Front-crop do not exist\n        if (childModel.getType() !== 'image') {\n            return;\n        }\n        this.api.v1.article.frontcrop.get().then((cropData) => {\n            if (cropData) { return; }\n            const instanceOfId = childModel.get('instance_of');\n            if (instanceOfId) {\n                this.setFrontCrop(instanceOfId);\n            } else {\n                // If image is being downloaded, wait for it to finish and then set the front crop.\n                this.api.v1.model.bindings.bind(childModel, 'instance_of', (image, path, value) => {\n                    this.setFrontCrop(value);\n                });\n            }\n        }).catch((err) => {\n            Sys.logger.warn(`[ArticleHeader] Failed to get front-crop: \"${ err.toString() }\"`);\n        });\n    }\n\n    setFrontCrop(instanceOfId) {\n        const data = {\n            type: 'image',\n            contentdata: {\n                instance_of: instanceOfId,\n                fields: {\n                    croph: 100,\n                    cropw: 100,\n                    x: 0,\n                    y: 0\n                }\n            }\n        };\n        this.api.v1.article.frontcrop.set({ pano: data, height: data }).then(() => {\n            Sys.logger.debug('[ArticleHeader] Front-crop successfully set.');\n        }).catch((err) => {\n            Sys.logger.warn(`[ArticleHeader] Failed to set front-crop: \"${ err.toString() }\"`);\n        });\n    }\n\n}\n","export default class ArticleList {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onRender(model, view) {\n        const grids = view.getAbsoluteGridWidths();\n        const columnsDesktop = model.get('fields.columnsDesktop') || this.getFallbackColumns(grids.desktop || 12);\n        const columnsMobile = model.get('fields.columnsMobile') || 1;\n        model.setFiltered('columns', {\n            desktop: columnsDesktop,\n            mobile: columnsMobile\n        });\n\n        if (!this.isEditor) { return; }\n        const layout = model.get('fields.layout');\n        const layoutOptions = [\n            {\n                value: 'default',\n                label: 'Horizontal',\n                selected: layout === 'default'\n            },\n            {\n                value: 'vertical',\n                label: 'Vertical',\n                selected: layout === 'vertical'\n            }\n        ];\n        const imageLayout = model.get('fields.imageLayout');\n        const imageLayoutOptions = [\n            {\n                value: 'full',\n                label: '100% width',\n                selected: imageLayout === 'full'\n            },\n            {\n                value: 'left',\n                label: 'Align Left',\n                selected: imageLayout === 'left'\n            },\n            {\n                value: 'right',\n                label: 'Align Right',\n                selected: imageLayout === 'right'\n            }\n        ];\n        model.setFiltered('layoutOptions', layoutOptions);\n        model.setFiltered('imageLayoutOptions', imageLayoutOptions);\n    }\n\n    getFallbackColumns(grid) {\n        if (grid >= 10) return 4;\n        if (grid >= 7) return 3;\n        if (grid >= 5) return 2;\n        return 1;\n    }\n\n}\n","import { DateTimeHelperInt } from '../../lib/helpers/datetime/DateTimeHelperInt.js';\n\nexport default class ArticleMeta {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const lang = lab_api.v1.config.get('contentLanguage') || 'no';\n        const stringSettings = {\n            publishedLabel: 'Publisert',\n            unpublishedLabel: '(upublisert) Opprettet',\n            modifiedLabel: 'Sist oppdatert',\n            readTimeLabel: 'Lesetid',\n            unifiedLabel: '',\n            languageCode: lang,\n            niceDates: false,\n            dateFormat: 'l d. F Y - H:i',\n            dateFormatPrependZero: true,\n            timeFormatPrependZero: true,\n            template: '{{dddd}} {{DD}}. {{MMMM}} {{YYYY}} - {{HH}}:{{mm}}',\n            useOldFormat: false\n        };\n        // If language is english\n        if (lang === 'en') {\n            stringSettings.publishedLabel = 'Published';\n            stringSettings.unpublishedLabel = '(unpublished) Created';\n            stringSettings.modifiedLabel = 'Last updated';\n            stringSettings.readTimeLabel = 'Read time';\n            stringSettings.languageCode = 'en';\n        }\n\n        // Let config override:\n        const config = this.api.v1.config.get('contentbox_settings.articleMeta.date');\n        if (config) {\n            for (const key in config) {\n                if (key && stringSettings[key] !== undefined) {\n                    stringSettings[key] = config[key];\n                }\n            }\n\n            if ('dateFormat' in config && !('template' in config)) {\n                stringSettings.useOldFormat = true;\n            }\n        }\n\n        // Admin will override config\n        const dateTimeFormat = this.api.v1.locale.get('dates.dateTime', { noRender: true, fallbackValue: null });\n        if (dateTimeFormat) {\n            stringSettings.template = dateTimeFormat;\n        }\n\n        // Fields \"published\" and \"created\" are derived from page-node in properties.json.\n        // Access page-data directly via the model.\n        // Note: This is also used in page-template (published/modified meta-fields)\n\n        const dateHandler = new DateTimeHelperInt(stringSettings.languageCode);\n        let label = stringSettings.publishedLabel;\n        let articleTimestamp = model.get('fields.published');\n        const modifiedTimestamp = model.get('fields.modified') >= articleTimestamp ? model.get('fields.modified') : null;\n\n        model.setFiltered('unpublished', false);\n\n        if (!articleTimestamp) {\n            label = stringSettings.unpublishedLabel;\n            model.setFiltered('unpublished', true);\n            articleTimestamp = model.get('fields.created');\n        }\n\n        let hideModifiedDate = this.api.v1.config.get('contentbox_settings.articleMeta.hideModifiedDate');\n        if (!hideModifiedDate) {\n            hideModifiedDate = model.get('fields.hidePublishedDate');\n        }\n\n        const hidePublishedDate = model.get('fields.hidePublishedDate');\n        const publishedDate = new Date(articleTimestamp * 1000);\n        const modifiedDate = modifiedTimestamp ? new Date(modifiedTimestamp * 1000) : null;\n\n        const published = {\n            isoDate: publishedDate.toISOString(),\n            label,\n            timestamp: articleTimestamp,\n            hide: hidePublishedDate,\n            formatted: ''\n        };\n\n        const modified = {\n            isoDate: modifiedDate ? modifiedDate.toISOString() : '',\n            label: stringSettings.modifiedLabel,\n            timestamp: modifiedTimestamp,\n            hide: hideModifiedDate,\n            formatted: ''\n        };\n\n        // Unified: Display modified-date if exist. If not: Use publish-date\n        const displayUnifiedDate = this.api.v1.config.get('contentbox_settings.articleMeta.displayUnifiedDate');\n        const unified = { hide: true };\n        if (displayUnifiedDate) {\n            unified.hide = false;\n            unified.isoDate = (modifiedDate || publishedDate).toISOString();\n            unified.timestamp = modifiedTimestamp || articleTimestamp;\n            unified.label = stringSettings.unifiedLabel;\n            unified.formatted = '';\n            published.hide = true;\n            modified.hide = true;\n        }\n\n        // Note: Use old format if specified. stringSettings.useOldFormat will default to true if the customer overwrites \"dateFormat\" in their config, while not overwriting \"template\".\n        if (stringSettings.niceDates) {\n            if (!published.hide) published.formatted = dateHandler.timestampToNiceDate(dateHandler.toTimestamp(publishedDate));\n            if (modifiedDate && !modified.hide) {\n                modified.formatted = dateHandler.timestampToNiceDate(dateHandler.toTimestamp(modifiedDate));\n            }\n            if (!unified.hide) {\n                unified.formatted = dateHandler.timestampToNiceDate(dateHandler.toTimestamp(modifiedDate || publishedDate));\n            }\n        } else if (stringSettings.useOldFormat) {\n            if (!published.hide) published.formatted = dateHandler.formattedUtcDate(publishedDate, stringSettings.dateFormat, stringSettings.dateFormatPrependZero, stringSettings.timeFormatPrependZero);\n            if (modifiedDate && !modified.hide) {\n                modified.formatted = dateHandler.formattedUtcDate(modifiedDate, stringSettings.dateFormat, stringSettings.dateFormatPrependZero, stringSettings.timeFormatPrependZero);\n            }\n            if (!unified.hide) {\n                unified.formatted = dateHandler.formattedUtcDate(modifiedDate || publishedDate, stringSettings.dateFormat, stringSettings.dateFormatPrependZero, stringSettings.timeFormatPrependZero);\n            }\n        } else {\n            if (!published.hide) published.formatted = dateHandler.utcFormat(publishedDate, stringSettings.template);\n            if (modifiedDate && !modified.hide) {\n                modified.formatted = dateHandler.utcFormat(modifiedDate, stringSettings.template);\n            }\n            if (!unified.hide) {\n                unified.formatted = dateHandler.utcFormat(modifiedDate || publishedDate, stringSettings.template);\n            }\n        }\n\n        model.setFiltered('date', { published, modified, unified });\n\n        // Date-info is now accessible in template.\n\n        const readTime = model.get('fields.readTime') || 0.5;\n        const { readTimeLabel } = stringSettings;\n        model.setFiltered('readTime', readTime < 1 ? '< 1 min' : `${ readTime } min`);\n        model.setFiltered('readTimeLabel', readTimeLabel);\n    }\n\n    onInserted(model) {\n        // Todo: Add default byline\n    }\n\n}\n","import { AutodataHelper } from '../../lib/helpers/AutodataHelper.js';\nimport { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class ArticleScroller {\n\n    constructor(api) {\n        this.api = api;\n        this.front_api_url = this.api.v1.properties.get('front_api_url');\n        this.integration_url = this.api.v1.properties.get('integration_url');\n        this.config = this.api.v1.config.get('contentbox_settings.articlescroller') || {\n            sources: {\n                all: {\n                    // eslint-disable-next-line no-template-curly-in-string\n                    src: `${ this.front_api_url }/api/v1/article/?orderBy=published&query=visibility_status:P%20AND%20published:[*%20NOW]%20AND%20showonfp:1&site_id={{ data.site_id }}&limit={{ data.articleCount }}`,\n                    data_type: 'labrador',\n                    is_default: true\n                }\n            },\n            imageAspectRatio: 0.5,\n            visibleArticleCount: 4,\n            visibleArticleCountMobile: 1\n        };\n        this.preferredImageFormat = lab_api.v1.image.getPreferredImageFormat();\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        this.sourceList = this.getSourceList();\n        this.domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n    }\n\n    onViewHelper(model) {\n        const source = model.get('fields.source') || this.getDefaultSource(this.sourceList);\n        const siteId = model.get('fields.site_id');\n        const articleCount = model.get('fields.articleCount') || 10;\n\n        let sourceList = this.sourceList[source] && this.sourceList[source].src ? this.sourceList[source] : null;\n        const customSource = model.get('fields.customSource');\n        if (customSource) {\n            Sys.logger.debug(`ArticleScroller: Will use custom source.`);\n            sourceList = customSource;\n        }\n\n        if (sourceList && sourceList.src) {\n            let siteIdFromAlias = null;\n            if (sourceList.defaultsiteAlias) {\n                const site = this.api.v1.site.getSite(sourceList.defaultsiteAlias);\n                if (site) {\n                    siteIdFromAlias = site.id;\n                }\n            }\n\n            const dateLimitFrom = model.get('fields.dateLimitFrom'); // \"today\". Can add more options if needed: \"tomorrow\", \"next_week\" etc.\n            const dateLimitTo = model.get('fields.dateLimitTo'); // \"today\". Can add more options if needed: \"tomorrow\", \"next_week\" etc.\n            const dateHander = new DateTimeHelper();\n            const todayString = dateHander.formattedUtcDate(new Date(), 'Y-m-d');\n            let dateQuery = '';\n            if (dateLimitFrom === 'today') {\n                dateQuery = `calendar_start_date:[${  todayString  }T00:00:00Z%20TO%20*]%20AND%20`;\n            }\n            if (dateLimitTo === 'today') {\n                dateQuery += `calendar_end_date:[*%20TO%20${  todayString  }T23:59:59Z]%20AND%20`;\n            }\n\n            const data = {\n                site_id: siteId || siteIdFromAlias,\n                front_api_url: this.front_api_url,\n                articleCount,\n                dateQuery\n            };\n\n            // Todo: Do not use Mustache directly to render. Use Labrador API.\n            const url = Mustache.render(this.handleUrlVariables(sourceList.src), { data });\n            model.setFiltered('url', url);\n        } else {\n            Sys.logger.warning(`ArticleScroller: Missing config for source \"${ source }\". Cannot fetch data. Check config.`);\n        }\n    }\n\n    onRender(model, view) {\n        const source = model.get('fields.source') || this.getDefaultSource(this.sourceList);\n        const paywallLabel = {\n            text: { content: 'Pluss' },\n            icon: { content: 'fi-plus' },\n            display: true,\n            ...this.api.v1.config.get('paywall.label')\n        };\n\n        if (paywallLabel.display) {\n            model.setFiltered('paywallLabel', paywallLabel);\n        }\n\n        let visibleArticleCount = model.get('fields.visibleArticleCount') || this.api.v1.config.get('contentbox_settings.articlescroller.visibleArticleCount') || 4;\n        const visibleArticleCountMobile = model.get('fields.visibleArticleCountMobile') || this.api.v1.config.get('contentbox_settings.articlescroller.visibleArticleCountMobile') || 2;\n        const maxVisibleArticleCount = visibleArticleCount;\n        const maxVisibleArticleCountMobile = visibleArticleCountMobile;\n        const restrictHeight = this.config.restrictHeight || false;\n        const hideImages = !!model.get('fields.hideImages');\n        const showAuthor = !!model.get('fields.showAuthor');\n        const showPublishedDate = !!model.get('fields.showPublishedDate');\n        const hideNavigation = !!model.get('fields.hideNavigation');\n        const transitionDuration = model.get('fields.transitionDuration') || 4000; // Milliseconds between each animation\n        const transitionStepPercent = model.get('fields.transitionStep') || 15; // Percent. CSS-transition. 100 result in a steady movement, any lower will scroll and stop for each iteration.\n        const transitionStepDuration = (((transitionDuration / 1000) / 100) * transitionStepPercent).toFixed(2);\n\n        if (view.viewport === 'mobile') {\n            visibleArticleCount = visibleArticleCountMobile;\n        }\n\n        let pixelDensityFactor = this.api.v1.view.getPixelDensityFactor();\n        if (view.get('metadata.hasFullWidth')) {\n            pixelDensityFactor += 0.2;\n        }\n        const imageSize = {};\n        imageSize.aspectRatio = model.get('fields.aspectRatio') || this.api.v1.config.get('contentbox_settings.articlescroller.imageAspectRatio') || this.api.v1.config.get('image.defaultAspectRatio');\n        imageSize.width = Math.ceil(this.api.v1.viewport.getWidth(view.viewport) / visibleArticleCount);\n        imageSize.height = Math.floor(imageSize.width * imageSize.aspectRatio);\n\n        const external = view.get('external');\n        const articleCount = model.get('fields.articleCount') || 10;\n        const mappers = this.config.externalMappers || {};\n        const sourceObj = model.get('fields.customSource') || this.sourceList[source] || {};\n\n        let data = this.mapExternalData(external, sourceObj.data_type, {\n            aspectRatio: imageSize.aspectRatio,\n            imageServer: this.api.v1.properties.get('image_server'),\n            width: Math.floor(imageSize.width * pixelDensityFactor),\n            height: Math.floor(imageSize.height * pixelDensityFactor),\n            baseUrl: sourceObj.baseUrl || '',\n            hideImages,\n            showAuthor,\n            showPublishedDate\n        }, mappers);\n        if (Array.isArray(data) && data.length > 0) data = data.slice(0, articleCount);\n        if (visibleArticleCount > data.length) visibleArticleCount = data.length;\n        if (visibleArticleCount < 1) visibleArticleCount = 1;\n\n        model.setFiltered('useNavigation', !hideNavigation && data.length > visibleArticleCount);\n        model.setFiltered('visibleArticleCount', visibleArticleCount);\n        model.setFiltered('maxVisibleArticleCount', maxVisibleArticleCount);\n        model.setFiltered('maxVisibleArticleCountMobile', maxVisibleArticleCountMobile);\n        model.setFiltered('restrictHeight', restrictHeight);\n        model.setFiltered('hideImages', hideImages);\n        model.setFiltered('showAuthor', showAuthor);\n        model.setFiltered('showPublishedDate', showPublishedDate);\n        model.setFiltered('transitionDuration', transitionDuration);\n        model.setFiltered('transitionStep', transitionStepDuration);\n        model.setFiltered('data', data);\n        model.setFiltered('width', imageSize.width);\n        model.setFiltered('height', imageSize.height);\n        model.setFiltered('labels', this.config.labels || {\n            buttonLeft: 'Rull til venstre',\n            buttonRight: 'Rull til høyre'\n        });\n\n        if (this.isEditor) {\n            model.setFiltered('transitionDurationSeconds', transitionDuration / 1000);\n        }\n        if (!this.isEditor) {\n            model.setFiltered('lazyloadImages', this.api.v1.config.get('imageLoading.lazy') || false);\n        } else if (sourceObj.src) {\n            const adminView = {};\n\n            // Options for \"source\" (fields.source)\n            const sourceOptions = [];\n            for (const sourceName of Object.keys(this.sourceList)) {\n                sourceOptions.push({\n                    value: sourceName,\n                    name: this.sourceList[sourceName].display_name || sourceName,\n                    selected: sourceName === source\n                });\n            }\n            adminView.sources = sourceOptions;\n\n            // Options for \"site_id\" (fields.site_id)\n            const site_idOptions = [{\n                value: '',\n                name: 'Any site'\n            }];\n            const selectedSiteId = parseInt(model.get('fields.site_id') || this.getSiteIdFromAlias(source), 10);\n            this.api.v1.site.getSites().forEach((site) => {\n                site_idOptions.push({\n                    value: site.id,\n                    name: site.display_name,\n                    selected: site.id === selectedSiteId\n                });\n            });\n            adminView.site_ids = site_idOptions;\n\n            const dateLimitFrom = model.get('fields.dateLimitFrom'); // \"today\". Can add more options if needed: \"tomorrow\", \"next_week\" etc.\n            const dateLimitTo = model.get('fields.dateLimitTo'); // \"today\". Can add more options if needed: \"tomorrow\", \"next_week\" etc.\n            // Options for fields.dateLimitFrom / fields.dateLimitTo\n            adminView.dateLimit = {\n                from: [{\n                    value: 'today',\n                    name: 'Today',\n                    selected: dateLimitFrom === 'today'\n                }],\n                to: [{\n                    value: 'today',\n                    name: 'Today',\n                    selected: dateLimitTo === 'today'\n                }]\n            };\n\n            // Options for layout align (fields.layoutAlign)\n            const layoutAlign = model.get('fields.layoutAlign'); // \"left\", \"centered\", \"right\"\n            adminView.layout = {\n                align: [{\n                    value: 'left',\n                    name: 'Align Left',\n                    selected: layoutAlign === 'left'\n                }, {\n                    value: 'centered',\n                    name: 'Align centered',\n                    selected: layoutAlign === 'centered'\n                }, {\n                    value: 'right',\n                    name: 'Align right',\n                    selected: layoutAlign === 'right'\n                }]\n            };\n\n\n            // Add custom layout if present.\n            const additionalLayout = this.api.v1.config.get('contentbox_settings.articlescroller.layout') || false;\n            if (additionalLayout) {\n                additionalLayout.forEach(item => {\n                    if (item && typeof item.value !== 'undefined') {\n                        item.selected = item.value === layoutAlign;\n                        if (item.value === layoutAlign) {\n                            item.selected = true;\n                        } else {\n                            item.selected = false;\n                        }\n                    }\n                    adminView.layout.align.push(item);\n                });\n            }\n\n            adminView.aspectRatio = imageSize.aspectRatio;\n\n            model.setFiltered('options', adminView);\n        }\n    }\n\n    // Turns off subtitle by default for Article Scroller when created\n    // Only affects newly created Article scrollers, not existing ones\n    // Avoids having to manually turn off subtitle for each new Article Scroller\n    onCreated(model) {\n        model.set('fields.skipLeadText', true);\n    }\n\n    handleUrlVariables(url) {\n        // url may be \"{{api}}/article/?query=tag:tag1\"\n        // Replace \"{{api}}\" with this.front_api_url\n        return url.replace(/\\{\\{api\\}\\}/g, this.front_api_url).replace(/\\{\\{int\\}\\}/g, this.integration_url);\n    }\n\n    getSourceList() {\n        const result = {};\n        for (const name of Object.keys(this.config.sources || {})) {\n            result[name] = this.config.sources[name];\n        }\n        const feeds = this.api.v1.config.get('feeds') || {};\n        for (const name of Object.keys(feeds)) {\n            if (feeds[name].format === 'json' && feeds[name].labrador_json) {\n                let urlObj;\n                try {\n                    urlObj = new URL(feeds[name].url);\n                } catch (e) {\n                    urlObj = null;\n                }\n\n                const domain = urlObj\n                    ? urlObj.origin\n                    : this.domain;\n\n                result[name] = {\n                    src: feeds[name].url,\n                    data_type: (feeds[name].url || '').startsWith('{{api}}') ? 'labrador' : 'labrador_json',\n                    is_default: false,\n                    baseUrl: domain,\n                    display_name: feeds[name].display_name\n                };\n            }\n        }\n        return result;\n    }\n\n    getDefaultSource(config) {\n        for (const key of Object.keys(config)) {\n            if (config[key].is_default) return key;\n        }\n        const [first = null] = Object.keys(config) || [];\n        return first;\n    }\n\n    getSiteIdFromAlias(source) {\n        if (this.sourceList[source].defaultsiteAlias) {\n            const site = this.api.v1.site.getSite(this.sourceList[source].defaultsiteAlias);\n            if (site) {\n                return site.id;\n            }\n        }\n        return null;\n    }\n\n    mapExternalData(data, data_type, settings, extraMappers) {\n        switch (data_type) {\n            case 'ntb':\n                return this.mapNtb(data, settings);\n            case 'advokatjobb':\n                return this.mapAdvokatjobb(data, settings);\n            case 'labrador_json':\n                return this.mapLabradorJson(data, settings);\n            case 'labrador_compliant':\n                return this.mapLabradorCompliant(data, settings);\n            default: // \"labrador\"\n                try {\n                    if (Object.keys(extraMappers).includes(data_type)) {\n                        const element = extraMappers[data_type].split('.');\n                        let functionReference = window;\n                        for (let i = 0; i < element.length; i += 1) {\n                            functionReference = functionReference[element[i]];\n                        }\n                        let result = null;\n                        if (functionReference) {\n                            result = functionReference(data, settings);\n                            if (result) {\n                                return result;\n                            }\n                        }\n                    }\n                } catch (e) {\n                    Sys.logger.warning('Faulty extraMapper function.');\n                }\n                return this.mapLabrador(data, settings);\n        }\n    }\n\n    mapNtb(data, settings) {\n        const result = [];\n        if (!data.releases) return result;\n        data.releases.forEach((article) => {\n            let imageUrl = false;\n            let iconImageUrl = null;\n            if (!settings.hideImages && article.images.length) {\n                imageUrl = article.images[0].thumbnail_16_9 || false;\n            }\n            if (article.logos.length) {\n                iconImageUrl = article.logos[0].thumbnail_original || false;\n            }\n            if (!settings.hideImages && !imageUrl && article.logos.length) {\n                imageUrl = article.logos[0].thumbnail_16_9 || false;\n            }\n            const thisArticle = {\n                url: `https://www.ntbinfo.no${  article.url }`,\n                title: article.title,\n                subtitle: article.leadtext,\n                image: imageUrl,\n                iconImage: iconImageUrl\n            };\n            result.push(thisArticle);\n        });\n        return result;\n    }\n\n    mapAdvokatjobb(data, settings) {\n        const result = [];\n        if (!data.Jobs) return result;\n        data.Jobs.forEach((article) => {\n            let img = false;\n            let description = '';\n            if (article.Company) {\n                if (!settings.hideImages && article.Company.Logo) {\n                    img = settings.baseUrl + article.Company.Logo;\n                }\n                if (article.Company.Name) {\n                    description = `${ article.Company.Name  } - `;\n                }\n            }\n            const thisArticle = {\n                url: settings.baseUrl + article.Url,\n                title: description + article.Title,\n                subtitle: `${ article.Location  } - ${  article.DueDate }`,\n                image: img,\n                iconImage: null\n            };\n            result.push(thisArticle);\n        });\n        return result;\n    }\n\n    mapLabradorJson(data, settings) {\n        const result = [];\n        if (!data || !data.result) return result;\n        const imgArgs = [\n            `width=${  settings.width }`,\n            `height=${  settings.height }`\n        ];\n        data.result.forEach((article) => {\n            const autodata = AutodataHelper.parseCustomDataFromFeed(article, 'contentbox_settings.articlescroller');\n            let url = '';\n            if (article.url) {\n                if (article.url.indexOf('http') === 0 || article.url.indexOf('//') === 0) {\n                    url = article.url;\n                } else {\n                    url = settings.baseUrl + article.url;\n                }\n            }\n            const thisArticle = {\n                url,\n                title: article.teaserTitle ? article.teaserTitle : article.title,\n                kicker: article.kicker || article.teaserKicker || '',\n                subtitle: article.teaserSubtitle ? article.teaserSubtitle : article.description,\n                image: !settings.hideImages && article.images && article.images.length ? (`${ article.images[0].url }${ article.images[0].url.includes('?') ? '&' : '?' }${ imgArgs.join('&') }`) : false,\n                autodata: autodata || '',\n                section: article.section || '',\n                paywall: !!article.paywall,\n                author: article.byline || '',\n                publishedDate: article.published\n            };\n            result.push(thisArticle);\n        });\n        return result;\n    }\n\n    mapLabrador(data, settings) {\n        const result = [];\n\n        if (!data || !data.result) return result;\n\n        const imgArgs = [\n            `width=${  settings.width }`,\n            `height=${  settings.height }`\n        ];\n\n        if (this.preferredImageFormat && this.preferredImageFormat !== 'jpg') {\n            imgArgs.push(`format=${ this.preferredImageFormat }`);\n        }\n\n        // Get the date format set by the customer in Admin -> Language options -> Dates\n        const publishedDateFormat = this.api.v1.locale.get('dates.articleScrollerPublishedFormat', { noRender: true });\n        const publishedDatePrefix = this.api.v1.locale.get('dates.articleScrollerPublishedDatePrefix', { fallbackValue: '' });\n        const dateHandler = new DateTimeHelper(this.api.v1.config.get('lang') || undefined);\n\n        data.result.forEach((article) => {\n            const autodata = AutodataHelper.parseCustomDataFromFeed(article, 'contentbox_settings.articlescroller');\n            const formattedDate = dateHandler.format(new Date(article.published), publishedDateFormat);\n            const publishedDate = publishedDatePrefix ? `${ publishedDatePrefix } ${ formattedDate }` : formattedDate;\n            const thisArticle = {\n                url: article.siteDomain + article.published_url,\n                title: article.title,\n                kicker: article.kicker || article.teaserKicker || '',\n                subtitle: article.subtitle,\n                image: !settings.hideImages && article.frontCropUrl ? (`${ settings.imageServer  }/${  article.frontCropUrl  }&${  imgArgs.join('&') }`) : false,\n                autodata: autodata || '',\n                section: article.section || '',\n                paywall: !!article.paywall,\n                author: article.byline || '',\n                publishedDate\n            };\n\n            result.push(thisArticle);\n        });\n\n        return result;\n    }\n\n    mapLabradorCompliant(data, settings) {\n        const result = [];\n        if (!data || !data.result) return result;\n        const imgArgs = [\n            `width=${  settings.width }`,\n            `height=${  settings.height }`\n        ];\n\n        data.result.forEach((article) => {\n            let imageUrl = false;\n            if (!settings.hideImages && article.images && Array.isArray(article.images) && article.images.length > 0) {\n                imageUrl = `${ settings.imageServer  }/?imageUrl=${  article.images[0].url  }&${  imgArgs.join('&') }`;\n            }\n            const thisArticle = {\n                url: article.url,\n                title: article.title,\n                kicker: article.kicker || '',\n                subtitle: article.subtitle,\n                section: article.section || '',\n                image: imageUrl,\n                paywall: !!article.paywall,\n                author: article.byline || ''\n            };\n            result.push(thisArticle);\n        });\n        return result;\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class ArticlesByTag {\n\n    constructor(api) {\n        this.api = api;\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        this.boundIds = {};\n        this.config = this.api.v1.config.get('contentbox_settings.articlesByTag') || {\n            niceDates: true,\n            dateFormat: '{{ HH }}:{{ mm }} - {{ DD }}.{{ MM }}.{{ YYYY }}'\n        };\n        this.preferredImageFormat = lab_api.v1.image.getPreferredImageFormat();\n    }\n\n    onViewHelper(model, view) {\n        // Default options:\n        const displayOptions = {\n            image: false,\n            kicker: false,\n            title: true,\n            subtitle: true,\n            published: false\n        };\n        const editDisplayOptions = [];\n        const selectedDisplayOptions = model.get('fields.displayOptions_json') || {};\n        for (const key of Object.keys(displayOptions)) {\n            if (selectedDisplayOptions[key] !== undefined) {\n                displayOptions[key] = !!selectedDisplayOptions[key];\n            }\n        }\n        const query_json = model.get('fields.query_json') || {};\n        const site_id = query_json.site_id === undefined ? this.api.v1.site.getSite().id : query_json.site_id;\n        const imageWidth = 200;\n        const aspectRatio = lab_api.v1.config.get('contentbox_settings.articlesByTag.imageAspectRatio') || lab_api.v1.config.get('image.defaultAspectRatio');\n        const imgArgs = [\n            `width=${ imageWidth }`,\n            `height=${ Math.floor(imageWidth * aspectRatio) }`\n        ];\n        if (this.preferredImageFormat && this.preferredImageFormat !== 'jpg') {\n            imgArgs.push(`format=${ this.preferredImageFormat }`);\n        }\n\n        model.setFiltered('site_id', site_id);\n        model.setFiltered('displayOptions', displayOptions);            // For template\n        model.setFiltered('imageServer', this.api.v1.properties.get('image_server'));\n        model.setFiltered('imgArgs', imgArgs.join('&'));\n        model.setFiltered('orderBy', 'published');\n\n        // Generate correct url depending on tagPagePath value\n        model.setFiltered('tagPagePath', lab_api.v1.config.get('tagPagePath') || '/tag/');\n        model.setFiltered('limit', query_json.limit || 10);\n\n        const setQuery = (m, tags, mode) => {\n            const sanitizedTags = [];\n\n            if (Array.isArray(tags)) {\n                tags.forEach((tag) => {\n                    let theTag = tag;\n                    theTag = theTag.replace(/([\\(\\)\\s+])/g, '\\\\$1');\n                    theTag = theTag.toLowerCase();\n                    sanitizedTags.push(theTag);\n                });\n            }\n\n            const id = this.rootModel.get('id');\n            let queryString;\n            if (m.get('fields.useApiQuery') && m.get('fields.apiQuery')) {\n\n                const query = m.get('fields.apiQuery')\n                    .replace(/\\b(AND|OR|NOT)\\b/g, '__$1__')\n                    .toLowerCase()\n                    .replace(/__and__/g, 'AND')\n                    .replace(/__or__/g, 'OR')\n                    .replace(/__not__/g, 'NOT');\n\n                queryString = query.length ? `(${ query }) AND published:[* TO NOW] AND NOT id:${ id }` : `published:[* TO NOW] AND NOT id:${ id }`;\n                queryString = queryString.replace(/\"\"+/g, '\"');\n            } else {\n                queryString = sanitizedTags.length ? `(tag:\"${ sanitizedTags.join('\" OR tag:\"') }\") AND published:[* TO NOW] AND NOT id:${ id }` : `published:[* TO NOW] AND NOT id:${ id }`;\n                queryString = queryString.replace(/\"\"+/g, '\"');\n            }\n\n            if (mode === 'edit') {\n                m.set('fields.query', queryString, { save: false });\n                m.setFiltered('query', encodeURIComponent(queryString));\n                m.set('fields.selectedTags_json', tags, { save: false });\n            }\n\n            if (mode === 'published') {\n                m.setFiltered('query', encodeURIComponent(queryString));\n                m.set('fields.selectedTags_json', tags, { save: false });\n            }\n        };\n        if (!this.isEditor) {\n            model.setFiltered('lazyloadImages', lab_api.v1.config.get('imageLoading.lazy') || false);\n\n            const section = this.rootModel.get('primaryTags.section');\n            let tags = [];\n            tags = (this.rootModel.get('tags') || []).filter((tag) => tag !== section);\n\n            if (model.get('fields.usePageTags')) {\n                setQuery(model, tags, 'published');\n            } else if (model.get('fields.useApiQuery') && model.get('fields.apiQuery')) {\n                setQuery(model, '', 'published');\n            } else {\n                model.setFiltered('query', encodeURIComponent(model.get('fields.query')));\n            }\n        }\n\n        if (this.isEditor) {\n            for (const key of Object.keys(displayOptions)) {\n                editDisplayOptions.push({\n                    name: key,\n                    value: displayOptions[key]\n                });\n            }\n\n            // Options for \"site_id\" (fields.query_json.site_id)\n            const siteOptions = [{\n                value: '',\n                name: 'Any site'\n            }];\n            this.api.v1.site.getSites().forEach((site) => {\n                siteOptions.push({\n                    value: site.id,\n                    name: site.display_name,\n                    // eslint-disable-next-line eqeqeq\n                    selected: site.id == site_id\n                });\n            });\n            model.setFiltered('siteOptions', siteOptions);\n            model.setFiltered('editDisplayOptions', editDisplayOptions);\n\n            const updateTags = () => {\n                if (model.get('fields.useApiQuery')) {\n                    setQuery(model, '', 'edit');\n                } else {\n                    let tags = [];\n                    if (model.get('fields.usePageTags')) {\n                        // Get tags without section-tag.\n                        const section = this.rootModel.get('primaryTags.section');\n                        tags = (this.rootModel.get('tags') || []).filter((tag) => tag !== section);\n                    } else {\n                        const tagsString = model.get('fields.tagsString') || '';\n                        const rawTags = tagsString.split(',');\n                        rawTags.forEach((tag) => {\n                            const theTag = tag.trim();\n                            if (theTag) tags.push(theTag);\n                        });\n                    }\n                    setQuery(model, tags, 'edit');\n                }\n            };\n\n            // Unset fields.usePageTags when editing tags-field:\n            const updateTagsString = () => {\n                model.set('fields.usePageTags', false);\n                updateTags();\n            };\n\n            const guid = model.getGuid();\n            if (!this.boundIds[guid]) {\n                this.boundIds[guid] = true;\n                this.api.v1.model.bindings.bind(this.rootModel, 'tags', updateTags);\n                this.api.v1.model.bindings.bind(model, 'fields.usePageTags', updateTags);\n                this.api.v1.model.bindings.bind(model, 'fields.usePageTags', updateTags);\n                this.api.v1.model.bindings.bind(model, 'fields.tagsString', updateTagsString);\n            }\n\n            updateTags();\n        }\n    }\n\n    onRender(model, view) {\n        const placeholder = view.get('fields.placeholder');\n        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));\n        const lang = this.api.v1.config.get('lang') || 'no';\n        const dateHelper = new DateTimeHelper(lang);\n        const external = view.get('external');\n        const templateData = [];\n\n        if (external && external.result) {\n            external.result.forEach((a) => {\n                if (a.type === 'article') {\n                    const dateString = a.published || null;\n                    const publishedDate = new Date(dateString);\n\n                    templateData.push({\n                        kicker: a.kicker,\n                        title: a.title,\n                        subtitle: a.subtitle,\n                        published_url: a.published_url,\n                        frontCropUrl: a.frontCropUrl,\n                        published: dateString,\n                        formatted: dateString && this.config.niceDates ? dateHelper.timestampToNiceDate(dateHelper.toTimestamp(publishedDate)) : dateHelper.format(publishedDate, this.config.dateFormat)\n                    });\n                }\n            });\n        }\n        model.setFiltered('templateData', templateData);\n    }\n\n    onSettingsPanel(model, view, settings) {\n        return {\n            onDisplay: (params) => {\n                const toggleEl = params.markup.querySelector('.advancedToggle');\n                const expandableEl = params.markup.querySelector('.advanced');\n                if (toggleEl && expandableEl) {\n                    toggleEl.addEventListener('click', (event) => {\n                        const isHidden = expandableEl.classList.contains('lab-hidden');\n                        expandableEl.classList.toggle('lab-hidden');\n                        if (isHidden) {\n                            toggleEl.classList.remove('labicon-pluss_slim');\n                            toggleEl.classList.add('labicon-minus_slim');\n                        } else {\n                            toggleEl.classList.remove('labicon-minus_slim');\n                            toggleEl.classList.add('labicon-pluss_slim');\n                        }\n                    }, false);\n                }\n            }\n        };\n    }\n\n}\n","import { Paywall } from '../../lib/helpers/Paywall.js';\n\nexport default class Bodytext {\n\n    constructor(api) {\n        this.api = api;\n        this.isFront = this.api.v1.app.mode.isFront();\n        this.internal = this.api.v1.properties.get('paywall') || {};\n        const config = this.api.v1.config.get('paywall') || {};\n        this.provider = config.provider || 'internal';\n        // View can disable displaying buildt-in paywall in config: { paywall: { displaySalesPosters: false, ... } }\n        // Useful for providers rendering the salesposters client-side\n        this.displaySalesPosters = config.displaySalesPosters !== false;\n    }\n\n    onRender(model, view) {\n        const paywall = {\n            displaySalesPosters: this.displaySalesPosters,\n            isInternal: this.provider === 'internal' && this.internal.active,\n            active: this.isFront && (this.provider === 'internal' ? this.internal.active : !!model.get('fields.paywall')),\n            access: this.provider === 'internal' && this.internal.active ? this.internal.hasAccess : false,\n            provider: this.provider,\n            intro: this.provider !== 'internal' ? Paywall.filterBodytext(model, view) : undefined,\n            bodytext: this.provider !== 'internal' ? model.get('filtered.bodytext') : undefined\n        };\n        if (paywall.active && !paywall.access) {\n            if (this.provider === 'internal') {\n                model.setFiltered('bodytext', Paywall.filterBodytext(model, view));\n            } else {\n                model.setFiltered('bodytext', '');\n            }\n        }\n        if (this.provider === 'iteras' && paywall.active) {\n            const iterasConfig = this.api.v1.config.get('iteras') || {};\n            const tags = model.get('tags') || [];\n            paywall.iteras = Paywall.iterasPaywall(iterasConfig, tags);\n        }\n        model.setFiltered('paywall', paywall);\n    }\n\n    onRendered(model, view) {\n        // Editor: Add an empty paragraph at the end of the bodytext if there is none.\n        if (!this.isFront) {\n            const markup = view.getMarkup();\n            if (markup.children.length && markup.children[markup.children.length - 1].tagName !== 'P') {\n                const p = document.createElement('p');\n                markup.appendChild(p);\n            }\n            this.markCustomIndex(model.getPersistentChildren());\n        }\n    }\n\n    // Baseview is configured to allow custom placement per viewport in bodytext.\n    // If user has moved an element to a new placement in a secondary viewport, mark it with an icon.\n    // A click on the icon will reset the position.\n    markCustomIndex(children) {\n        for (const child of children) {\n            const raw = child.getRaw('metadata.bodyTextIndex') || {};\n            if (Object.values(raw.vp || {}).filter((value) => Number.isInteger(value)).length > 1) {\n                this.markCustomIndexForModel(child);\n            }\n        }\n    }\n\n    markCustomIndexForModel(model) {\n        for (const viewport of this.api.v1.viewport.getActive()) {\n            const view = this.api.v1.view.getView(model, viewport);\n            if (!view.getExtraElement('customIndexElement')) {\n                const el = view.setExtraElement('customIndexElement', this.getCustomIndexElement(model, view));\n                view.getMarkup().appendChild(el);\n            }\n        }\n    }\n\n    getCustomIndexElement(model, view) {\n        const el = document.createElement('span');\n        const callback = (event) => {\n            if (event) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            this.removeCustomIndexElement(model);\n            if (model.getParent()) {\n                this.api.v1.model.addToRedrawQueue(model.getParent());\n            }\n            model.set('metadata.bodyTextIndex', undefined, { viewport: 'mobile' });\n            this.api.v1.viewport.align(model, view);\n        };\n        el.addEventListener('click', callback, false);\n        el.classList.add('labicon-line_index', 'is-customindex');\n        el.setAttribute('title', `${ model.getType() } has custom placement. Click to remove on mobile`);\n        const bindingHandler = (theModel, key, path) => {\n            if (theModel.getParent() && theModel.getParent().getType() !== 'bodytext') {\n                callback();\n                el.remove();\n                this.api.v1.model.bindings.unbind(model, 'path', bindingHandler);\n            }\n        };\n        this.api.v1.model.bindings.bind(model, 'path', bindingHandler);\n        return el;\n    }\n\n    removeCustomIndexElement(model) {\n        for (const view of this.api.v1.view.getViews(model)) {\n            view.unsetExtraElement('customIndexElement');\n        }\n    }\n\n}\n","export default class Byline {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onId(model) {\n        // Store added bylines on the user-object.\n        // Can be used to display frequently used bylines in the byline-collection\n        const current = lab_api.v1.user.getField('favouriteBylineIds') || [];\n        const id = model.get('instance_of');\n        if (!id || current.includes(id)) {\n            return;\n        }\n        current.unshift(id);\n        lab_api.v1.user.setField('favouriteBylineIds', current.slice(0, 5));\n    }\n\n    // Lab 3 may set fields.width for byline-images if main image is in full-width. Fix.\n    onReady(model, view) {\n        const image = this.api.v1.model.query.getChildOfType(model, 'image');\n        if (!image) { return; }\n        if (!image.get('fields.width')) { return; }\n        image.set('fields.width', null, {\n            save: false,\n            undoable: false\n        });\n    }\n\n    onRender(model, view) {\n        // Config defines what elements and order of elements to display in the byline.\n        /*\n        Config-example:\n        {\n            \"template\": [{\n                \"key\": \"image\"\n            }, {\n                \"key\": \"firstname\",\n                \"url\": \"public_email\"\n            }, {\n                \"key\": \"lastname\",\n                \"url\": \"public_email\"\n            }, {\n                \"key\": \"description\"\n            }],\n            \"imageAbove\": true,\n            \"imageBelow\": false\n        }\n        */\n\n        const isEditMode = this.api.v1.app.mode.isEditor();\n        const config = this.api.v1.config.get('contentbox_settings.byline') || {};\n        const template = config.template || [];\n        const fields = {\n            public_email: view.get('fields.public_email'),\n            public_url: view.get('fields.public_url'),\n            public_phone: view.get('fields.public_phone'),\n            firstname: view.get('fields.firstname'),\n            lastname: view.get('fields.lastname'),\n            description: view.get('fields.description'),\n            description2: view.get('fields.description2')\n        };\n\n        /**\n         * Tech debt - NEVER REMOVE THIS!\n         * (see NL-115 and LABS-1434)\n         */\n        if (!isEditMode) {\n            if (fields.firstname && fields.firstname.match(/^byline first name$/i)) {\n                fields.firstname = '';\n            }\n\n            if (fields.lastname && fields.lastname.match(/^byline last name$/i)) {\n                fields.lastname = '';\n            }\n        }\n\n        const data = {\n            items: [],\n            imageAbove: !!config.imageAbove,\n            imageBelow: !config.imageAbove && !!config.imageBelow\n        };\n\n        template.forEach((item) => {\n            const element = {\n                // key: item.key,\n                // value: fields[item.key],\n                url: null,\n                parts: []\n            };\n\n            (item.keys || []).forEach((part) => {\n                if ((fields[part] && (fields[part] !== `Click to edit ${  part }`)) || isEditMode) {\n                    let value = fields[part];\n                    let title;\n\n                    if (\n                        part === 'description'\n                        && config.enableDescriptionLength\n                        && (fields[part] && fields[part].length >= config.descriptionLength)\n                    ) {\n                        title = fields[part];\n                        value = `${ fields[part].substring(0, config.descriptionLength) }...`;\n                    }\n\n                    element.parts.push({\n                        key: part,\n                        value,\n                        title\n                    });\n                }\n            });\n\n            if (item.url) {\n                // Make sure it's a array.\n                if (!Array.isArray(item.url)) {\n                    item.url = [item.url];\n                }\n                for (let part of Object.keys(item.url)) {\n                    part = item.url[part];\n                    if (fields[part]) {\n                        let url = fields[part];\n                        if (part === 'public_email') {\n                            url = `mailto:${  url }`;\n                        }\n                        element.url = url;\n                        break;\n                    }\n                }\n            }\n\n            if (element.parts.length) {\n                data.items.push(element);\n            }\n        });\n\n        model.setFiltered('default_color', config.default_color || '');\n        model.setFiltered('data', data);\n    }\n\n}\n","export default class Changelog {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const rootModel = this.api.v1.model.query.getRootModel();\n        const contentLanguage = rootModel.get('filtered.contentLanguage');\n        const changelogEntriesRaw = rootModel.get('fields.lab_changelog_json');\n        if (changelogEntriesRaw && changelogEntriesRaw.length > 0) {\n            let changelog;\n            if (typeof changelogEntriesRaw === 'string') {\n                changelog = JSON.parse(changelogEntriesRaw);\n            } else {\n                changelog = [...changelogEntriesRaw];\n            }\n            model.setFiltered('changelogHasContent', true);\n            const newItems = [];\n            changelog.forEach((item) => {\n                const date = new Date(item.time * 1000);\n                const newItem = {\n                    time: date.toLocaleDateString(contentLanguage),\n                    changelog: this.convertNewLines(item.changelog)\n                };\n                newItems.push(newItem);\n            });\n            model.setFiltered('changelog', newItems);\n        }\n    }\n\n    /**\n     * Converts newline characters in a given text to HTML paragraph and line break tags.\n     *\n     * - Double newlines (`\\n\\n`) are replaced with `</p><p>`.\n     * - Single newlines (`\\n`) are replaced with `<br>`.\n     * - The entire text is wrapped in `<p>` tags.\n     *\n     * @param {string} text - The input text containing newline characters.\n     * @returns {string} - The converted text with HTML tags.\n     */\n    convertNewLines(text) {\n        text = text.replace(/\\n\\n/g, '</p><p>');\n        text = text.replace(/\\n/g, '<br>');\n        text = `<p>${ text }</p>`;\n        return text;\n    }\n\n}\n","export default class ChartElement {\n\n    constructor(api, aiSettings = { model: 'gpt-4o', provider: 'openAi', integration: 'openAi' }) {\n        this.api = api;\n        this.aiSettings = aiSettings;   // Settings for the ai-integration (model, provider, integration)\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        this.requiredFilesJS = this.api.v1.config.get('contentbox_settings.chart.require.js') || null;\n\n        if (this.isEditor) {\n\n            this.api.v1.ns.set('chart', {\n                generate: (model, view) => {\n                    const bodyText = this.api.v1.bodytext.getText(this.api.v1.model.query.getModelByType('bodytext'));\n                    const domElement = view.getMarkup();\n                    domElement.classList.add('lab-content-busy');\n                    this.api.v1.ns.get('textAssistant.fetchByGroupName')('chart', this.aiSettings, { bodytext: bodyText })\n                        .then((response) => {\n                            if (response) {\n                                const data = this.cleanUpAndParseJsonString(response);\n                                const {\n                                    enoughData, title, type, beginAtZero, labels, datasets\n                                } = data;\n                                if (enoughData) {\n                                    this.setIfDefined(model, 'fields.title', title);\n                                    this.setIfDefined(model, 'fields.chartType', type);\n                                    this.setIfDefined(model, 'fields.beginAtZero', beginAtZero);\n                                    this.setIfDefined(model, 'fields.tableData', this.objectToTsv({ labels, datasets }));\n                                } else {\n                                    domElement.classList.add('lab-highlight-warn');\n                                    domElement.querySelector('.description').insertAdjacentHTML('afterend', '<p style=\"color: #ff0000; text-transform: uppercase; font-weight: bold;\">Not enough data to generate a chart</p>');\n                                }\n                            }\n                        })\n                        .finally(() => {\n                            domElement.classList.remove('lab-content-busy');\n                        });\n                }\n            });\n        }\n    }\n\n    onCreated(model) {\n        if (this.requiredFilesJS) {\n            this.requiredFilesJS.forEach((file) => {\n                for (const doc of this.api.v1.viewport.getContexts()) {\n                    this.api.v1.util.dom.addFile('js', file, doc, null, null, {}, false);\n                }\n            });\n        }\n    }\n\n    onRender(model, view) {\n        const chartType = model.get('fields.chartType') || 'line';\n        const beginAtZero = model.get('fields.beginAtZero') || false;\n        const tableData = model.get('fields.tableData');\n        let chartData;\n        if (tableData) {\n            chartData = this.tsvToObject(tableData);\n        }\n\n        model.setFiltered('chartType', chartType);\n        model.setFiltered('beginAtZero', beginAtZero);\n        model.setFiltered('chartData_json', JSON.stringify(chartData));\n    }\n\n    tsvToObject(tsvString) {\n        const lines = tsvString.trim().split('\\n');\n        const headers = lines[0].split('\\t');\n\n        const result = {\n            labels: [],\n            datasets: []\n        };\n\n        // Start from index 1 if headers[0] is empty, indicating the first column is labels\n        const headerStartIndex = headers[0] === '' ? 1 : 0;\n\n        for (let i = headerStartIndex; i < headers.length; i++) {\n            result.datasets.push({\n                label: headers[i],\n                data: []\n            });\n        }\n\n        for (let i = 1; i < lines.length; i++) {\n            const values = lines[i].split('\\t');\n            result.labels.push(values[0]);\n\n            for (let j = 1; j < values.length; j++) {\n                const cleanedValue = values[j].replace(/\\s+/g, '');\n                result.datasets[j - 1].data.push(parseFloat(cleanedValue));\n            }\n        }\n\n        return result;\n    }\n\n    objectToTsv(obj) {\n        const headers = [''].concat(obj.datasets.map((dataset) => dataset.label));\n        const rows = [headers.join('\\t')];\n\n        for (let i = 0; i < obj.labels.length; i++) {\n            const row = [obj.labels[i]];\n            for (let j = 0; j < obj.datasets.length; j++) {\n                row.push(obj.datasets[j].data[i]);\n            }\n            rows.push(row.join('\\t'));\n        }\n\n        return rows.join('\\n');\n    }\n\n    cleanUpAndParseJsonString(response) {\n        try {\n            // Remove any leading or trailing unwanted characters\n            const cleanedResponse = response.trim();\n\n            // Remove the leading '```json' and trailing '```'\n            const jsonString = cleanedResponse.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\n\n            // Parse the cleaned JSON string\n            const parsedData = JSON.parse(jsonString);\n\n            return parsedData;\n        } catch (error) {\n            console.error('Error cleaning or parsing API response:', error.message);\n            return null;\n        }\n    }\n\n    setIfDefined(model, key, value) {\n        if (value !== undefined && value !== null) {\n            model.set(key, value);\n        }\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class Comments {\n\n    constructor(api) {\n        this.api = api;\n        this.dateTimeHelper = new DateTimeHelper(this.api.v1.config.get('lang'));\n        this.sources = {\n            disqus_most_popular: {\n                source: 'disqus',\n                url: `${ lab_api.v1.properties.get('integration_url') }/feed/disqus/?site=${ lab_api.v1.properties.get('site.alias') }&action=popular`,\n                name: 'Most commented articles',\n                description: ''\n            },\n            hyvor_most_popular: {\n                source: 'hyvor',\n                url: `${ lab_api.v1.properties.get('integration_url') }/feed/hyvor/?site=${ lab_api.v1.properties.get('site.alias') }&action=popular`,\n                name: 'Most commented articles',\n                description: ''\n            },\n            hyvor_recent: {\n                source: 'hyvor',\n                url: `${ lab_api.v1.properties.get('integration_url') }/feed/hyvor/?site=${ lab_api.v1.properties.get('site.alias') }&action=recent`,\n                name: 'Recent comments',\n                description: ''\n            }\n        };\n    }\n\n    getSourceConfig(model, view) {\n        /*\n        // Example of config\n        {\n            \"contentbox_settings\": {\n                \"comments\": {\n                    \"sources\": [\n                        {\n                            \"type\": \"disqus_most_popular\",\n                            \"name\": \"Mest kommentert\",\n                            \"description\": \"bla bla\"\n                        }\n                    ]\n                }\n            }\n        }\n\n        Data that may be defined on the element:\n        - fields.source         'disqus_recent_comments', 'disqus_most_popular' (default)\n        - fields.limit          '10' (default [1-10])\n        - fields.title          The title. Default defined in default config below.\n        - fields.description    The description. Default defined in default config below.\n        */\n\n        const commentsProviderObj = lab_api.v1.config.get('comments_provider') || {};\n        const commentsProvider = Object.keys(commentsProviderObj).shift();\n\n        let defaultSource;\n        switch (commentsProvider) {\n            case 'hyvor':\n                defaultSource = 'hyvor_most_popular';\n                break;\n            default:\n                defaultSource = 'disqus_most_popular';\n        }\n\n        const selectedSource = model.get('fields.source') || defaultSource;\n        const title = model.get('fields.title');\n        const description = model.get('fields.description');\n        const limit = Math.min(parseInt(model.get('fields.limit') || '5', 10), 30);\n\n        // (array) Get sources from config. Require value of \"type\"-attribute of each source to be present in sources defined above.\n        const config = (lab_api.v1.config.get('contentbox_settings.comments.sources') || []).filter((item) => this.sources[item.type] !== undefined && this.sources[item.type].source === commentsProvider);\n        const isEditMode = lab_api.v1.app.mode.isEditor();\n\n        if (!config.length) {\n            Sys.logger.warning(`comments: Missing required config \"contentbox_settings.comments.sources\". Options (type): ${ Object.keys(this.sources).join(', ') }`);\n            if (isEditMode) {\n                model.setFiltered('error', 'Missing required source(s).');\n            }\n            return null;\n        }\n\n        // Shallow merge default source-config and config from view:\n        const sourceConfig = { ...this.sources[selectedSource], ...config.filter((source) => source.type === selectedSource).pop() };\n        sourceConfig.url += `&limit=${ limit }`;\n\n        if (title) {\n            sourceConfig.name = title;\n        }\n        if (description) {\n            sourceConfig.description = description;\n        }\n\n        return sourceConfig;\n    }\n\n    onViewHelper(model, view) {\n        const sourceConfig = this.getSourceConfig(model, view);\n        if (!sourceConfig) { return; }\n        model.setFiltered('url', (sourceConfig.url));\n    }\n\n    onRender(model, view) {\n        const sourceConfig = this.getSourceConfig(model, view);\n        if (!sourceConfig) { return; }\n        const isEditMode = lab_api.v1.app.mode.isEditor();\n        const commentsProviderObj = lab_api.v1.config.get('comments_provider') || {};\n        const commentsProvider = Object.keys(commentsProviderObj).shift();\n        const defaultSource = commentsProvider === 'hyvor' ? 'hyvor_most_popular' : 'disqus_most_popular';\n        const selectedSource = model.get('fields.source') || defaultSource;\n        const maxCharLength = model.get('fields.maxCharLength');\n        const limit = Math.min(parseInt(model.get('fields.limit') || '5', 10), 30);\n        const external = view.get('external');\n        const hasError = external && typeof external === 'string'; // External data is an object. An error from integration-services is a string.\n\n        if (hasError) {\n            model.setFiltered('error', 'Error fetching data');\n            Sys.logger.warn(`Comments: Error fetching data from url: ${ sourceConfig.url }`);\n        } else {\n            // Unset previously set error in editor.\n            model.setFiltered('error', null);\n        }\n\n        const concatenateString = (input) => {\n            const str = input || '';\n            if (!maxCharLength) {\n                return str;\n            }\n            return `${ str.substring(0, maxCharLength) } ${ str.length > maxCharLength ? '...' : '' }`;\n        };\n\n        if (external && !hasError) {\n            let data = external;\n            if (sourceConfig.type === 'disqus_most_popular') {\n                data = external.response.map((item) => ({\n                    link: item.link,\n                    title: concatenateString(item.title)\n                }));\n            }\n            if (sourceConfig.type === 'hyvor_most_popular') {\n                data = external.data.map((item) => ({\n                    link: item.url,\n                    title: concatenateString(item.title)\n                }));\n            }\n            if (sourceConfig.type === 'hyvor_recent') {\n                const itemsConfig = sourceConfig.items || {};\n                const dateConfig = itemsConfig.date || {};\n                data = external.data.map((item) => {\n                    if (!item.page || !item.page.url) {\n                        return {};\n                    }\n                    return {\n                        link: `${ item.page.url }?ht-comment-id=${ item.id }`,\n                        title: (itemsConfig.titlePrefix || '') + concatenateString(item.page.title),\n                        user: item.user ? item.user.name : '',\n                        date: this.dateTimeHelper.format(new Date(item.created_at * 1000), dateConfig.template || '')\n                    };\n                });\n            }\n            model.setFiltered('data', data);\n        }\n\n        // Let template include partial by source ({{ #is_disqus_most_popular}} [template for disqus_most_popular ...] {{ /is_disqus_most_popular}})\n        for (const name of Object.keys(this.sources)) {\n            model.setFiltered(`is_${ name }`, name === selectedSource);\n        }\n\n        model.setFiltered('url', (sourceConfig.url));\n        model.setFiltered('source', sourceConfig);\n\n        // Editor\n        if (!isEditMode) {\n            return;\n        }\n\n        const config = (lab_api.v1.config.get('contentbox_settings.comments.sources') || []).filter((item) => this.sources[item.type] !== undefined && this.sources[item.type].source === commentsProvider);\n        const sourceList = config.map((source) => ({ name: source.type, selected: source.type === selectedSource }));\n        model.setFiltered('sourceList', sourceList);\n        model.setFiltered('limit', limit);\n\n    }\n\n}\n","import { ExpandableOptions } from '../../lib/helpers/ExpandableOptions.js';\n\nexport default class Factbox {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        model.setFiltered('options', ExpandableOptions.run({\n            configPath: 'contentbox_settings.factbox'\n        }));\n\n        // Set a flag if no title and bodytext exist\n        model.setFiltered('noContent', (lab_api.v1.app.mode.isFront() && !model.get('fields.title') && !model.get('fields.bodytext')));\n    }\n\n}\n","export default class FrontContent {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const getTagsArray = (m, fallbackArray) => {\n            const tags_string = m.get('fields.tags_string') || '';\n            const result = tags_string.split(',').map((tag) => tag.trim()).filter((tag) => !!tag);\n            if (result.length) {\n                return result;\n            }\n            return fallbackArray.map((richTag) => richTag.tag);\n        };\n\n        const getTagsArrayDescription = (tags, descriptions) => {\n            const tagDescriptions = {};\n            for (const richTag of descriptions) { // { \"tag\": \"ytre-sogn\", \"description\": \"Nyheter Ytre Sogn\" }\n                tagDescriptions[richTag.tag] = richTag.description;\n            }\n            return tags.map((tag) => ({ tag, description: tagDescriptions[tag] || tag }));\n        };\n\n        const config = this.api.v1.config.get('contentbox_settings.frontContent') || {};\n        const integrationUrl = this.api.v1.properties.get('integration_url');\n        const apiUrl = this.api.v1.properties.get('front_api_url');\n        const feeds = Object.values(this.api.v1.config.get('feeds') || {}).filter((feed) => !!feed.labrador_json).map((feed) => ({\n            identifier: feed.display_name,\n            name: feed.display_name,\n            type: feed.url.includes('lab_viewport=json') ? 'DachserJson' : 'LabradorApi',\n            url: feed.url.replace('{{int}}', integrationUrl).replace('{{api}}', apiUrl)\n        }));\n        const sourcesConfig = (config.sources || []).concat(feeds);\n        const source = model.get('fields.source'); // identifier\n        const sourceObject = { ...(sourcesConfig.filter((item) => item.identifier === source).shift() || {}) };\n        const organizer = model.get('fields.organizer');\n        const isEditor = this.api.v1.app.mode.isEditor();\n        const overrideUrlOption = model.get('fields.overrideUrlByTagsCookie', true);\n        const overrideUrlByTagsCookie = overrideUrlOption === undefined ? !!config.overrideUrlByTagsCookie : !!overrideUrlOption;\n        const tagsArray = getTagsArray(model, (config.tagsArray || [])); // Prio: 1) field-value, 2) config, 3) Empty array.\n        const tagsArrayRich = getTagsArrayDescription(tagsArray, (config.tagsArray || []));\n        const articleCountField = model.get('fields.articleCount') || 24;\n        const layoutOptions = {\n            columnCount: parseFloat(model.get('fields.layout_columnCount') || 3),\n            rowCount: parseFloat(model.get('fields.layout_rowCount') || 10),\n            maxRowSize: parseFloat(model.get('fields.layout_maxRowSize') || 3),\n            minRowSize: parseFloat(model.get('fields.layout_minRowSize') || 1),\n            imageAspectRatio: parseFloat(model.get('fields.layout_imageAspectRatio') || 0.45),\n            gridsize: parseFloat(model.get('fields.layout_gridsize') || 12),\n            hide_items: []\n        };\n        if (model.get('fields.hide_title')) { layoutOptions.hide_items.push('title'); }\n        if (model.get('fields.hide_subtitle')) { layoutOptions.hide_items.push('subtitle'); }\n        if (model.get('fields.hide_image')) { layoutOptions.hide_items.push('image'); }\n        if (model.get('fields.hide_kicker')) { layoutOptions.hide_items.push('kicker'); }\n        const articleFilterList = [];\n        if (model.get('fields.filterExisting')) {\n            articleFilterList.push({\n                path: 'contentdata.id',\n                values: this.api.v1.model.query.getModelsByType('article').filter((article) => !!article.get('instance_of')).map((article) => String(article.get('instance_of')))\n            });\n        }\n        const organizersRequiringArticleCount = ['RandomRows'];\n        let articleCount = articleCountField;\n        if (!organizersRequiringArticleCount.includes(organizer)) {\n            articleCount = layoutOptions.columnCount * layoutOptions.rowCount || articleCountField;\n        }\n        const articleFetchCount = model.get('fields.articleFetchCount') || articleCount;\n\n        model.setFiltered('source', sourceObject);\n        model.setFiltered('articleCount', articleCount);\n        model.setFiltered('articleFetchCount', articleFetchCount);\n        model.setFiltered('articleFilterList', JSON.stringify(articleFilterList));\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));\n        model.setFiltered('isEditor', isEditor);\n        model.setFiltered('isConfigured', articleCount && organizer && sourceObject.identifier && sourceObject.url && sourceObject.type);\n        model.setFiltered('viewport', this.api.v1.viewport.getName());\n        model.setFiltered('imageServer', this.api.v1.properties.get('image_server'));\n        model.setFiltered('layout', JSON.stringify(layoutOptions));\n        model.setFiltered('cookieOptions', {\n            allow: overrideUrlByTagsCookie,\n            cookieName: config.cookieName || 'dachserFrontContentTags',\n            tagsArray: tagsArrayRich,\n            tagsArrayString: JSON.stringify(tagsArrayRich)\n        });\n        model.setFiltered('tagOptions', {\n            allow: !!model.get('fields.tags_allow') && sourceObject.type === 'LabradorApi',\n            useOr: !!model.get('fields.tags_useOr'),\n            tags: tagsArray,\n            tags_string: tagsArray.join(', '),\n            tagsString: JSON.stringify(tagsArray)\n        });\n        const styleKeyVal = [];\n        if (model.get('fields.size_active')) {\n            if (model.get('fields.size_title')) { styleKeyVal.push({ path: 'contentdata.fields.title.attributes.text_size.value', value: parseInt(model.get('fields.size_title'), 10) }); }\n            if (model.get('fields.size_subtitle')) { styleKeyVal.push({ path: 'contentdata.fields.subtitle.attributes.text_size.value', value: parseInt(model.get('fields.size_subtitle'), 10) }); }\n            if (model.get('fields.size_kicker')) { styleKeyVal.push({ path: 'contentdata.fields.kicker.attributes.text_size.value', value: parseInt(model.get('fields.size_kicker'), 10) }); }\n        }\n        model.setFiltered('styleString', JSON.stringify(styleKeyVal));\n        // model.setFiltered('styleString', JSON.stringify({\n        //     size_active: !!model.get('fields.size_active'),\n        //     size_subtitle: parseInt(model.get('fields.size_subtitle'), 10) || null,\n        //     size_title: parseInt(model.get('fields.size_title'), 10) || null,\n        //     size_kicker: parseInt(model.get('fields.size_kicker'), 10) || null\n        // }));\n\n        // Editor:\n        if (!isEditor) {\n            return;\n        }\n\n        // Use proxy to fetch url in editor:\n        if (sourceObject.url && sourceObject.type !== 'LPStream') {\n            sourceObject.url = `${ this.api.v1.properties.get('proxy') }?query=${ encodeURIComponent(sourceObject.url) }`;\n            model.setFiltered('source', sourceObject);\n        }\n        model.setFiltered('sourcesConfig', sourcesConfig);\n    }\n\n}\n","export default class FrontRows {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onSettingsPanel() {\n        function getPageselector(siteId, pageId) {\n            const currentPageId = lab_api.v1.model.query.getRootModel().getId();\n            return lab_api.v1.ui.element.getPageSelector({\n                value: pageId ? parseInt(pageId, 10) : null,\n                siteId: siteId ? parseInt(siteId, 10) : 0,\n                attributes: [{ name: 'name', value: 'pageId' }, { name: 'id', value: 'frontrows_pageId' }],\n                pages: lab_api.v1.pages.front.getAll().filter((page) => page.nodeid !== currentPageId)\n            });\n        }\n        return {\n            onDisplay: ({\n                model, view, config, markup\n            }) => {\n                const data = model.get('fields.fragment_json') || {}; // pageId, siteId, start, count\n                const containers = {\n                    siteselector: markup.querySelector('[data-element=\"siteselector\"]'),\n                    pageselector: markup.querySelector('[data-element=\"pageselector\"]')\n                };\n                const siteselector = lab_api.v1.ui.element.getSiteSelector({ value: data.siteId ? parseInt(data.siteId, 10) : null, attributes: [{ name: 'name', value: 'siteId' }, { name: 'id', value: 'frontrows_siteId' }] });\n                let pageselector = getPageselector(data.siteId || siteselector.value, data.pageId);\n                containers.siteselector.appendChild(siteselector);\n                containers.pageselector.appendChild(pageselector);\n                siteselector.addEventListener('change', (event) => {\n                    pageselector.remove();\n                    pageselector = getPageselector(siteselector.value);\n                    containers.pageselector.appendChild(pageselector);\n                }, false);\n            },\n            onSubmit: ({\n                model, view, settings, markup, formValues\n            }) => {\n                model.resetExternalResource();\n                model.set('fields.fragment_json', formValues);\n            }\n        };\n    }\n\n}\n","export default class GlobalChangelog {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onViewHelper(model, view) {\n        const siteID = this.api.v1.site.getSite().id;\n\n        model.setFiltered('siteID', siteID);\n    }\n\n    onRender(model, view) {\n        const rootModel = this.api.v1.model.query.getRootModel();\n        const contentLanguage = rootModel.get('filtered.contentLanguage');\n        const external = view.get('external');\n\n        const templateData = [];\n\n        if (external && external.result) {\n            external.result.forEach((result) => {\n                if (result.type === 'article') {\n                    let changelog;\n                    const changelogRaw = result.lab_changelog_json || null;\n                    if (typeof changelogRaw === 'string') {\n                        const changelogStripped = this.stripJSON(changelogRaw);\n                        if (changelogStripped) {\n                            if (this.isValidJSON(changelogStripped)) {\n                                changelog = JSON.parse(changelogStripped);\n                            }\n                        }\n                    } else {\n                        changelog = changelogRaw;\n                    }\n                    if (changelog) {\n                        changelog.forEach((item) => {\n                            const date = new Date(item.time * 1000);\n                            item.time = date.toLocaleDateString(contentLanguage);\n                            item.changelog = this.convertNewLines(item.changelog);\n                        });\n                    }\n                    templateData.push({\n                        title: result.title,\n                        published_url: result.published_url,\n                        changelog\n                    });\n                }\n            });\n        }\n        model.setFiltered('templateData', templateData);\n    }\n\n    /**\n     * Removes escape characters from a JSON string.\n     *\n     * @param {string} str - The JSON string to be stripped.\n     * @returns {string} - The stripped JSON string.\n     */\n    stripJSON(str) {\n        return str.replace(/\\\\n/g, '\\\\n')\n            .replace(/\\\\'/g, '\\'')\n            .replace(/\\\\\"/g, '\"')\n            .replace(/\\\\&/g, '&')\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\t/g, '\\t')\n            .replace(/\\\\b/g, '\\b')\n            .replace(/\\\\f/g, '\\f');\n    }\n\n    /**\n     * Checks if a given string is a valid JSON.\n     *\n     * @param {string} str - The string to be checked.\n     * @returns {boolean} - Returns true if the string is a valid JSON, otherwise false.\n     */\n    isValidJSON(str) {\n        try {\n            JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Converts newline characters in a given text to HTML paragraph and line break tags.\n     *\n     * - Double newlines (`\\n\\n`) are replaced with `</p><p>`.\n     * - Single newlines (`\\n`) are replaced with `<br>`.\n     * - The entire text is wrapped in `<p>` tags.\n     *\n     * @param {string} text - The input text containing newline characters.\n     * @returns {string} - The converted text with HTML tags.\n     */\n    convertNewLines(text) {\n        text = text.replace(/\\\\n\\\\n/g, '</p><p>');\n        text = text.replace(/\\\\n/g, '<br>');\n        text = `<p>${ text }</p>`;\n        return text;\n    }\n\n}","export default class GoogleAd {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const rootModel = this.api.v1.model.query.getRootModel();\n        const formatConfig = this.api.v1.config.get('contentbox_settings.googleAd.formats') || [];\n        const key = model.get('fields.format');\n\n        const getFormat = (name, formatList) => {\n            for (let index = 0; index < formatList.length; index++) {\n                if (formatList[index].format === name) {\n                    return { ...formatList[index] };\n                }\n            }\n            return {};\n        };\n\n        const adEnv = this.api.v1.config.get('adEnvironment') || {};\n        const googleAds = {\n            bidding: adEnv.bidding,\n            hideOnTabletWidth: adEnv.hideOnTabletWidth || 1316,\n            fetchMarginPercent: adEnv.fetchMarginPercent || 150,\n            renderMarginPercent: adEnv.renderMarginPercent || 150\n        };\n        model.setFiltered('googleAds', googleAds);\n\n        const format = getFormat(key, formatConfig);\n        format.key = model.get('metadata.key') || 'row';\n\n        // Livewrapped special case\n        if (googleAds.bidding && googleAds.bidding.enabled && googleAds.bidding.provider && googleAds.bidding.provider.name) {\n            if (googleAds.bidding.provider.name === 'livewrapped') {\n                const guidGenerator = () => {\n                    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n                    return (`${ S4() + S4() }-${ S4() }-${ S4() }-${ S4() }-${ S4() }${ S4() }${ S4() }`);\n                };\n                if (format.code && format.code.endsWith('-1')) {\n                    format.code += `_${  guidGenerator() }`;\n                }\n            }\n        }\n\n        if (format.code === 'mpu_top') {\n            format.isMpuTop = true;\n        }\n\n        model.setFiltered('adData', format);\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug') || model.get('metadata.isDebug'));\n\n        const fallbackLabel = this.api.v1.config.get('contentbox_settings.googleAd.label') || 'Annonse';\n        const label = model.get('fields.label') || fallbackLabel;\n        model.setFiltered('label', label);\n\n        if (!this.api.v1.app.mode.isEditor()) {\n            const hideOnTablet = (model.parent && model.parent.get('metadata.hideOnTablet') === true && this.api.v1.properties.get('xUaDevice') === 'tablet');\n            model.setFiltered('hideOnTablet', hideOnTablet);\n        }\n\n        if (this.api.v1.app.mode.isEditor()) {\n            const pageType = rootModel.get('type').replace('page_', '');\n            const filteredKeys = [];\n            formatConfig.forEach((item) => {\n                if (item.selectable && item.selectable.indexOf(pageType) > -1) {\n                    filteredKeys.push(item);\n                } else if (item.selectableOn && item.selectableOn[pageType] === true) {\n                    filteredKeys.push(item);\n                }\n            });\n            model.setFiltered('formatConfigKeys', filteredKeys);\n        }\n\n        const isSticky = (model.get('metadata.css') || '').includes('sticky'); // Check if css string contains sticky keyword.\n        if (isSticky) {\n            const spacingTop = this.api.v1.config.get('contentbox_settings.googleAd.spacingTop') || 120;\n            const spacingTopStyle = `top: ${ spacingTop }px;`;\n            model.setFiltered('spacingTop', spacingTopStyle);\n        }\n    }\n\n}\n","export default class GoogleCSE {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        model.setFiltered('cse_id', model.get('fields.cse_id') || this.api.v1.config.get('contentbox_settings.googleCSE.cse_id'));\n    }\n\n}\n","import { LazyloadHelper } from '../../lib/helpers/LazyloadHelper.js';\n\nexport default class Image {\n\n    // Common instance for all image-elements on page\n    constructor(api) {\n        this.api = api;\n        this.lazyloadHelper = new LazyloadHelper(api);\n    }\n\n    // (void) Element is about to be rendered.\n    onRender(model, view) {\n        model.setFiltered('lazyloadImages', this.lazyloadHelper.check(model, view));\n    }\n\n}\n","export default class Grid {\n\n    constructor(api) {\n        this.api = api;\n        this.sizes = {\n            large: {\n                columns: 3,\n                rows: 4\n            },\n            small: {\n                columns: 2,\n                rows: 1\n            }\n        };\n        this.smallElementTypes = ['article'];\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        this.removedChildren = [];\n    }\n\n    onCreated(model) {\n        if (model.getChildren().length) {\n            return;\n        }\n        const size = this.getSize(model);\n        for (let i = 0; i < size.columns * size.rows; i++) {\n            this.createAndInsert(model);\n        }\n    }\n\n    onInserted(model) {\n        if (!this.isEditor) {\n            return;\n        }\n        this.api.v1.model.bindings.bind(model, 'fields.columnCount', this.sizeUpdated.bind(this));\n        this.api.v1.model.bindings.bind(model, 'fields.rowCount', this.sizeUpdated.bind(this));\n        this.api.v1.model.bindings.bind(model, 'fields.columnCountMobile', this.sizeUpdated.bind(this));\n    }\n\n    // Update width of added child:\n    onChildAdded(model, child) {\n        if (!model.parent) {\n            return;\n        }\n        const size = this.getSize(model);\n        this.updateSize(size, child);\n    }\n\n    updateSize(size, model) {\n        model.setWidth(size.width.desktop, {\n            viewport: 'desktop'\n        });\n        model.setWidth(size.width.mobile, {\n            viewport: 'mobile'\n        });\n    }\n\n    onSettingsPanel(theModel, theView, theConfig) {\n        return {\n            onWillDisplay: ({\n                model, view, config, template\n            }) => {\n                this.removedChildren = [];\n                model.setFiltered('size', this.getSize(model));\n            }\n        };\n    }\n\n    getSize(model) {\n        const size = this.getGridCount(model);\n        const columnCountMobile = model.get('fields.columnCountMobile') || 1;\n        const widthMobile = parseFloat((100 / columnCountMobile).toFixed(2));\n        return {\n            columns: size.columns,\n            columnsMobile: columnCountMobile,\n            rows: size.rows,\n            width: {\n                desktop: parseFloat((100 / size.columns).toFixed(2)),\n                mobile: widthMobile\n            }\n        };\n    }\n\n    getGridCount(model) {\n        const isSmallElementType = model.parent ? this.smallElementTypes.includes(model.parent.get('type')) : false;\n        const defaults = isSmallElementType ? this.sizes.small : this.sizes.large;\n        const columnCount = model.get('fields.columnCount') || defaults.columns;\n        const rowCount = model.get('fields.rowCount') || defaults.rows;\n        return {\n            columns: parseInt(columnCount, 10),\n            rows: parseInt(rowCount, 10)\n        };\n    }\n\n    sizeUpdated(model) {\n        const size = this.getSize(model);\n        const children = model.getChildren();\n        for (const child of children) {\n            this.updateSize(size, child);\n        }\n        // Remove extra children:\n        if (children.length > size.columns * size.rows) {\n            children.slice(size.columns * size.rows).forEach((child) => {\n                this.api.v1.model.delete(child);\n                if (child.get('instance_of')) {\n                    this.removedChildren.push(child);\n                }\n            });\n        }\n        // Add missing children:\n        if (children.length < size.columns * size.rows) {\n            for (let i = children.length; i < size.columns * size.rows; i++) {\n                this.createAndInsert(model, this.removedChildren.shift());\n            }\n        }\n    }\n\n    createAndInsert(model, source) {\n        if (source) {\n            this.api.v1.model.addChild(model, lab_api.v1.model.copy(source));\n        } else {\n            this.api.v1.model.create.internal({\n                type: 'image',\n                contentdata: {\n                    type: 'image',\n                    fields: {}\n                }\n            }, model, true, false);\n        }\n    }\n\n}\n","import { LazyloadHelper } from '../../lib/helpers/LazyloadHelper.js';\n\nexport default class Image {\n\n    // Common instance for all image-elements on page\n    constructor(api) {\n        this.api = api;\n        this.lazyloadHelper = new LazyloadHelper(api);\n        if (this.api.v1.app.mode.isEditor()) {\n            this.cropIds = [];\n            this.rootModel = this.api.v1.model.query.getRootModel();\n            this.frontcropBinding = this.frontCropChanged.bind(this);\n            this.api.v1.model.bindings.bind(this.rootModel, 'frontCrop', this.frontcropBinding);\n            this.frontcropBinding(this.rootModel, 'frontCrop', this.rootModel.get('frontCrop'));\n\n            // Preview image-filters:\n            this.api.v1.ns.set('imageFilter.preview', this.prepareVisualFilters);\n        }\n        this.isFragmentMode = this.api.v1.app.mode.isFragmentMode();\n    }\n\n    // View-helper is about to run, it may use filtered data.\n    // Method-order: 1) onViewHelper, 2) ViewHelper, 3) onRender\n    onViewHelper(model, view) {\n        if (model.parent) {\n            this.prepareForSlideshow(model, view);\n            const viewport = view.getViewport();\n            const parentView = this.api.v1.view.getView(model.parent, viewport);\n            if (parentView.get('metadata.hasFullWidth')) {\n                const width = viewport === 'mobile' ? 600 : 1800;\n                model.setFiltered(`width.${ viewport }`, width);\n            } else {\n                model.setFiltered(`width.${ viewport }`, null);\n            }\n            model.setFiltered('allowFullwidth', model.parent.getType() !== 'image');\n        }\n    }\n\n    // (void) Element is about to be rendered.\n    // All data and parent/child-relationships are ready.\n    onRender(model, view) {\n        this.setVisualFilters(model, view);\n        model.setFiltered('lazyloadImages', this.lazyloadHelper.check(model, view));\n        this.setCaptionOptions(model.getParent(), model, view);\n\n        // Aligned images must set a pixel width in the template. Check if image is aligned\n        // Note: In Lab3 the key 'floatNone' is used to unset alignment.\n        const float = view.get('fields.float');\n        model.setFiltered('hasFloat', !!float && float !== 'floatNone');\n    }\n\n    // (void) Element has been rendered\n    onRendered(model, view) {\n\n        if (!this.api.v1.app.mode.isEditor() || !this.cropIds.length) {\n            return;\n        }\n        const id = parseInt(model.get('instance_of'), 10);\n        if (!this.cropIds.includes(id)) {\n            return;\n        }\n        this.markFrontCrop(view, id);\n    }\n\n    setVisualFilters(model, view) {\n        model.setFiltered('filters', this.prepareVisualFilters(model, view));\n    }\n\n    prepareVisualFilters(model, view, returnObject = false) {\n        const filters = [];\n        const blur = model.get('metadata.filter_blur_active') ? model.get('metadata.filter_blur_value') || 0 : null;\n        const sepia = model.get('metadata.filter_sepia_active') ? model.get('metadata.filter_sepia_value') || 0 : null;\n        const saturate = model.get('metadata.filter_saturate_active') ? model.get('metadata.filter_saturate_value') || 1 : null;\n        const brightness = model.get('metadata.filter_brightness_active') ? model.get('metadata.filter_brightness_value') || 1 : null;\n        const contrast = model.get('metadata.filter_contrast_active') ? model.get('metadata.filter_contrast_value') || 1 : null;\n        if (blur !== null) { filters.push(`blur(${ blur }px)`); }                    // blur(4px), 0 is no change\n        if (sepia !== null) { filters.push(`sepia(${ sepia })`); }                   // sepia(0.8), 0 is no change\n        if (saturate !== null) { filters.push(`saturate(${ saturate })`); }          // saturate(2), 1 is no change\n        if (brightness !== null) { filters.push(`brightness(${ brightness })`); }    // brightness(3), 1 is no change\n        if (contrast !== null) { filters.push(`contrast(${ contrast })`); }          // contrast(1.5), 1 is no change\n        if (returnObject) {\n            return {\n                filter: filters.join(' ')\n            };\n        }\n        return filters.length ? `filter: ${ filters.join(' ') };` : null;\n    }\n\n    // (void) Add a label to the markup of the image-element\n    markFrontCrop(view, id) {\n        const el = document.createElement('span');\n        el.classList.add('labicon-imgFrontCrop', 'is-frontcrop');\n        el.setAttribute('title', 'Image used as front crop. Click to edit');\n        el.addEventListener('click', (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.api.v1.apps.start('ArticleSettings');\n        }, false);\n        view.getMarkup().appendChild(el);\n    }\n\n    frontCropChanged(model, path, cropData) {\n        // Remove frontcrop-label from images using the old crop-ids:\n        let models = this.getImages(this.cropIds);\n        this.cropIds = [];\n        this.updateImages(models);\n\n        if (!cropData) { return; }\n        if (cropData.pano && cropData.pano.instance_of) {\n            this.cropIds.push(cropData.pano.instance_of);\n        }\n        if (cropData.height && cropData.height.instance_of && !this.cropIds.includes(cropData.height.instance_of)) {\n            this.cropIds.push(cropData.height.instance_of);\n        }\n        // Add frontcrop-label to images using the new crop-ids:\n        models = this.getImages(this.cropIds);\n        this.updateImages(models);\n    }\n\n    // (array) Get images using a front-crop\n    getImages(ids) {\n        const models = [];\n        for (const id of ids) {\n            models.push(...this.api.v1.model.query.getModelsByKeyAndValue('instance_of', id));\n        }\n        return models;\n    }\n\n    // (void) Trigger a redraw of models to remove/add the frontcrop-label\n    updateImages(models) {\n        for (const model of models) {\n            this.api.v1.model.addToRedrawQueue(model);\n        }\n    }\n\n    setCaptionOptions(parent, model, view) {\n        const parentView = parent ? this.api.v1.view.getView(parent, view.getViewport()) : null;\n        const hasPath = (parentModel, childModel, path) => {\n            if (parentModel) {\n                const value = parentModel.get(path);\n                if (!value && value !== null) { // If parent has value false, 0 etc.: hide\n                    return false;\n                }\n                if (value) { return true; }\n            }\n            return !!childModel.get(path);\n        };\n        let display = hasPath(parentView, view, 'fields.displayCaption');\n        let displayDefault = display || (view.get('fields.displayCaption') === null && !view.get('metadata.hidecaption'));\n        if (this.api.v1.app.mode.isFront() && (!model.get('fields.imageCaption') && !model.get('fields.byline'))) {\n            display = false;\n            displayDefault = false;\n        }\n        const expandable = hasPath(parentView, view, `fields.expandableCaption`);\n        const truncate = hasPath(parentView, view, `fields.truncateCaption`);\n        let title = model.get('fields.imageCaption');\n        if (model.parent && (!view.getProperty('image.useCaptionForTitle') || !title)) {\n            title = model.parent.get('fields.title') || '';\n        }\n        const captionOptions = {\n            title,\n            display,\n            displayDefault,\n            truncate,\n            expandable: expandable || truncate\n        };\n        model.setFiltered('captionOptions', captionOptions);\n    }\n\n    prepareForSlideshow(model, view) {\n        if (!model.parent || model.parent.getType() !== 'slideshow') {\n            return;\n        }\n        if (view.get('fields.whRatio')) {\n            model.setFiltered('whRatio', null);\n            return;\n        }\n\n        const originalWidth = model.get('fields.originalWidth');\n        const originalHeight = model.get('fields.originalHeight');\n        if (originalHeight && originalWidth) {\n            const whRatio = originalHeight / originalWidth;\n            model.setFiltered('whRatio', whRatio);\n        }\n    }\n\n}\n","export default class JWPlayer {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onRender(model, view) {\n\n        // Display caption on article-pages:\n        let displayCaption = this.api.v1.model.root.getType() === 'page_article';\n        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption')) {\n            displayCaption = false;\n        }\n        model.setFiltered('displayCaption', displayCaption);\n\n        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {\n            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');\n            const jwplayerConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'jwplayer')[0];\n\n            if (jwplayerConsent) {\n                model.setFiltered('requiredCookieConsent', jwplayerConsent.requiredConsent || false);\n                model.setFiltered('insufficientConsentMessage', jwplayerConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');\n            }\n        }\n    }\n\n    onRendered(model, view) {\n        if (this.isEditor) {\n            // The iframe from jwplayer.com/embed captures events on the element of the iframe disabling drag/drop in the editor.\n            // Disable pointer-events when hovering the drag-handle.\n            const iframe = view.getMarkup().querySelector('iframe');\n            const dragHandle = view.getMarkup().querySelector('.jwplayer-drag-handle');\n            if (iframe && dragHandle) {\n                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);\n                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);\n            }\n        }\n    }\n\n}\n","/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n\nexport default class LabradorSearch {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const siteList = lab_api.v1.properties.get('sites');\n        const sites = [];\n        const allowedSites = model.get('fields.allowedSites_json') || {};\n        const allowedSitesList = [];\n\n        siteList.forEach((site) => {\n            const siteData = {\n                alias: site.alias,\n                id: site.id,\n                displayName: site.display_name,\n                selected: false\n            };\n\n            sites.push(siteData);\n\n            if (allowedSites[site.alias] === `${ site.id }`) {\n                siteData.selected = true;\n                allowedSitesList.push(siteData);\n            }\n        });\n\n        if (allowedSitesList.length === 0) {\n            const currentSite = lab_api.v1.properties.get('site');\n            sites.forEach((site) => {\n                if (site.id === currentSite.id) {\n                    site.selected = true;\n                    allowedSitesList.push(site);\n                }\n            });\n        }\n\n        const orderBy = view.get('fields.orderBy') || 'published';\n        const orderByOptions = [\n            {\n                value: 'published',\n                label: 'Published'\n            },\n            {\n                value: 'score',\n                label: 'Score'\n            }\n        ];\n        orderByOptions.forEach((item) => {\n            if (orderBy && orderBy === item.value) {\n                item.selected = true;\n            }\n        });\n\n        // Todo: Add filtered.desktopWidth to new method returned in behavior onSettingsPanel ...\n        const desktopWidth = parseInt(model.get('fields.desktopWidth') || 100, 10);\n        model.setFiltered('desktopWidth', [100, 50, 33, 25].map((width) => ({ key: width, value: width, selected: width === desktopWidth })));\n        model.setFiltered('desktopWidth', [{\n            key: '100% - 1 column',\n            value: 100,\n            selected: desktopWidth === 100\n        }, {\n            key: '50% - 2 columns',\n            value: 50,\n            selected: desktopWidth === 50\n        }, {\n            key: '33% - 3 columns',\n            value: 33,\n            selected: desktopWidth === 33\n        }, {\n            key: '25% - 4 columns',\n            value: 25,\n            selected: desktopWidth === 25\n        }]);\n\n        model.setFiltered('sites', sites);\n        model.setFiltered('allowedSites', allowedSitesList);\n        model.setFiltered('allowedSitesString', JSON.stringify(allowedSitesList || []));\n        model.setFiltered('orderByOptions', orderByOptions);\n    }\n\n}\n","export default class LiveFeed {\n\n    constructor(api) {\n        this.api = api;\n        this.baseApiUrl = this.api.v1.properties.get('front_api_url');\n        this.siteId = this.api.v1.properties.get('site.id');\n        this.cache = new Map();\n        this.defaultMaxCount = 100;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onPrepareViewHelper(model, view) {\n        const site = model.get('fields.site') || this.siteId;\n        const maxNoticesCount = view.get('fields.maxNoticesCount') || this.defaultMaxCount;\n        const tags = (model.get('fields.tags') || '').toLowerCase().split(',').filter((tag) => tag !== '');\n        const preparedTags = this.prepareTags(tags);\n        const query = this.prepareQuery(preparedTags, false);\n        const clientQuery = this.prepareQuery(preparedTags, true);\n        const url = `${ this.baseApiUrl }/notice?content=full&site_id=${ site }&limit=${ maxNoticesCount }`;\n        model.setFiltered('query', query);\n        model.setFiltered('clientQuery', clientQuery);\n        model.setFiltered('url', url);\n    }\n\n    onReady(model, view) {\n        const external = view.get('external');\n        const noFetch = model.get('filtered.noFetch') || false;\n        const blacklist = model.get('metadata.blacklist') || [];\n        const maxNoticesCount = view.get('fields.maxNoticesCount') || this.defaultMaxCount;\n        if (!noFetch && external) {\n            model.setFiltered('noFetch', true);\n            const pinneNotices = model.get('fields.pinnedNotices_json') || [];\n\n            let items = external.result;\n            if (this.api.v1.app.mode.isEditor()) {\n                const children = this.api.v1.model.query.getModelsByType('notice', model.children);\n                for (const child of children) {\n                    this.api.v1.model.delete(child, true, true);\n                }\n            }\n            items = items.slice(0, maxNoticesCount);\n\n            items.forEach((item) => {\n                const { attribute = {}, field = {} } = item.notice;\n                if (blacklist.includes(parseInt(attribute.id || 0, 10))) {\n                    Sys.logger.warn(`Notice with id ${ attribute.id } is blacklisted from Livefeed and will not be displayed.`);\n                    return;\n                }\n\n                // For an empty bodytext the API may return an object...\n                // https://publishlab.atlassian.net/browse/FS-2081\n                if (typeof field.bodytext === 'object') {\n                    field.bodytext = '';\n                }\n                const {\n                    title, bodytext, published, modified, published_url, userName\n                } = field;\n                const children = [];\n                if (item.notice.children && item.notice.children.image) {\n                    const images = Array.isArray(item.notice.children.image) ? item.notice.children.image : [item.notice.children.image];\n                    for (const image of images) {\n                        let metadata = {};\n                        if (field.structure_json && image.attribute.id) {\n                            try {\n                                const structureData = JSON.parse(field.structure_json);\n                                for (const itm of structureData) {\n                                    if (itm.type === 'bodytext') {\n                                        const structure = this.getStructure(itm.children || [], image.attribute.id);\n                                        metadata = structure ? structure.metadata : {};\n                                        break;\n                                    }\n                                }\n                            } catch (e) {\n                                Sys.logger.warn(`Failed to parse structure data: ${ e.toString() }`);\n                            }\n                        }\n                        // Disable fullwidth inside the feed\n                        metadata.hasFullWidth = {\n                            desktop: false,\n                            mobile: false\n                        };\n                        children.push(this.getImageData(image, metadata || {}));\n                    }\n                }\n\n                this.api.v1.model.insert.atPath({\n                    path: model.getPositionedPath(),\n                    data: {\n                        type: 'notice',\n                        contentdata: {\n                            id: attribute.id,\n                            fields: {\n                                title,\n                                bodytext,\n                                published,\n                                modified,\n                                published_url,\n                                userName,\n                                pinned: pinneNotices.includes(attribute.id)\n                            },\n                            // Note 'tag' can be a string with one tag or an array of multiple tags\n                            tags: item.notice.tag ? item.notice.tag.tag : ''\n                        },\n                        state: {\n                            isNonPersistent: true,\n                            editNonPersistent: true\n                        },\n                        children\n                    },\n                    options: {\n                        silent: true,\n                        index: pinneNotices.includes(attribute.id) ? 0 : undefined\n                    }\n                });\n            });\n\n            // Sort notices by pinned status and id\n            model.children.sort((a, b) => {\n                if (pinneNotices.includes(a.getId())) {\n                    return -1;\n                }\n                if (pinneNotices.includes(b.getId())) {\n                    return 1;\n                }\n                return b.getId() - a.getId();\n            });\n\n            if (this.api.v1.app.mode.isEditor()) {\n                this.api.v1.model.addToRedrawQueue(model, true);\n                this.api.v1.app.save();\n            }\n        }\n        // All numbers are in seconds\n        const updateFrequency = this.api.v1.config.get('contentbox_settings.livefeed.updateFrequency') || [{\n            range: [0, 600],\n            interval: 10\n        }, {\n            range: [600, 1200],\n            interval: 30\n        }, {\n            range: [1200],\n            interval: 60\n        }];\n        model.setFiltered('updateFrequency', JSON.stringify(updateFrequency));\n    }\n\n    onRender(model, view) {\n        const placeholder = view.get('fields.placeholder');\n        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));\n        model.setFiltered('initialRenderTime', (new Date()).getTime());\n        model.setFiltered('dateStrings', JSON.stringify({\n            now: this.api.v1.locale.get('dates.now', { noRender: true }),\n            monthdayyear: this.api.v1.locale.get('dates.monthdayyear', { noRender: true }),\n            hourminute: this.api.v1.locale.get('dates.hourminute', { noRender: true }),\n            durationSince: this.api.v1.locale.get('dates.durationSince', { noRender: true }),\n            minute: this.api.v1.locale.get('dates.minute', { noRender: true }),\n            minutes: this.api.v1.locale.get('dates.minutes', { noRender: true }),\n            hour: this.api.v1.locale.get('dates.hour', { noRender: true }),\n            hours: this.api.v1.locale.get('dates.hours', { noRender: true }),\n            day: this.api.v1.locale.get('dates.day', { noRender: true }),\n            days: this.api.v1.locale.get('dates.days', { noRender: true }),\n            ago: this.api.v1.locale.get('dates.ago', { noRender: true })\n        }));\n    }\n\n    onChildAdded(model, child) {\n        if (!this.isEditor) {\n            return;\n        }\n        if (child.getType() !== 'notice') {\n            // Other content added. Make sure it is placed below pinned notices.\n            // (After a new fetch this is handled anyway, but not right away)\n            if (model.children.indexOf(child) > 0) {\n                return; // Recursion. Already in correct position\n            }\n            const pinned = this.api.v1.model.query.getModelsByType('notice', model.children).filter((notice) => notice.get('fields.pinned'));\n            if (!pinned.length) {\n                return;\n            }\n            let index = 0;\n            for (const m of pinned) {\n                if (model.children.indexOf(m) > index) {\n                    index = model.children.indexOf(m);\n                }\n            }\n            if (index > 0) {\n                this.api.v1.model.addChild(model, child, index, false);\n            }\n        }\n    }\n\n    prepareQuery(preparedTags, isClientRendering = false) {\n        const query = isClientRendering ? ['(visibility_status:P OR visibility_status:H)'] : ['visibility_status:P'];\n        if (preparedTags.length > 0) {\n            query.push(`(${ preparedTags.join(` OR `) })`);\n        }\n\n        return `&query=${ encodeURIComponent(query.join(' AND ')) }`;\n    }\n\n    prepareTags(list) {\n        return list.map((tag) => {\n            let modifiedTag = tag.trim();\n            if (modifiedTag.indexOf(' ') > -1) {\n                modifiedTag = `\"${ modifiedTag }\"`;\n            }\n            return `tag:${ modifiedTag }`;\n        });\n    }\n\n    // Transform from API-format to view format\n    getImageData(apiImage, meta) {\n        return this.api.v1.model.serialize.apiToView({ type: 'image', data: apiImage, meta });\n    }\n\n    onSettingsPanel(model, view, settings) {\n        const elements = {\n            layout: null,\n            container: null\n        };\n        return {\n            onDisplay: ({\n                model, view, config, markup, modal\n            }) => {\n                elements.layout = markup.querySelector('#layout');\n                elements.container = markup.querySelector('.horizontalOptions');\n                if (elements.layout && elements.container) {\n                    elements.layout.addEventListener('change', (event) => {\n                        if (elements.layout.value === '1') {\n                            elements.container.classList.remove('lab-hidden');\n                        } else {\n                            elements.container.classList.add('lab-hidden');\n                        }\n                    });\n                }\n            },\n            onHide: ({\n                model, view, config, markup, modal\n            }) => {\n                elements.layout = null;\n                elements.container = null;\n                // Reset filtered.noFetch to allow updating notices in the editor in case tag changes.\n                model.setFiltered('noFetch', false);\n            }\n        };\n    }\n\n    getStructure(items, imageId) {\n        for (const item of items) {\n            // Note: Use == instead of === to allow for type conversion\n            // eslint-disable-next-line eqeqeq\n            if (item.type === 'image' && item.node_id == imageId) {\n                return item;\n            }\n            if (item.children) {\n                const structure = this.getStructure(item.children, imageId);\n                if (structure) {\n                    if (structure.metadata && !structure.metadata.bodyTextIndex && item.metadata && item.metadata.bodyTextIndex) {\n                        structure.metadata.bodyTextIndex = item.metadata.bodyTextIndex;\n                    }\n                    return structure;\n                }\n            }\n        }\n        return null;\n    }\n\n}\n","import { Movable } from '../../lib/helpers/Movable.js';\nimport { MarkupValidator } from '../../lib/editor/MarkupValidator.js';\n\nexport default class Markup {\n\n    constructor(api) {\n        this.api = api;\n        this.validation = {\n            suggestedMarkup: null,\n            isUnvalid: false,\n            error: ''\n        };\n    }\n\n    // (void) Element is about to be rendered.\n    // All data and parent/child-relationships are ready.\n    onRender(model, view) {\n        if (view.get('metadata.movableContent')) {\n            model.setFiltered('movableStyle', Movable.createStyle(model, 'metadata.contentPosition', ['desktop', 'mobile']));\n        }\n\n        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {\n            model.setFiltered('requiredCookieConsent', view.get('metadata.requiredCookieConsent') || false);\n\n            // Escape closing script tags\n            let markup = view.get('fields.markup') || '';\n            markup = markup.replace(/<\\/script>/g, '<\\\\/script>');\n            model.setFiltered('markup_escaped', markup);\n        }\n    }\n\n    // When opening the settings-panel to insert HTML:\n    // - Focus the input element\n    // - Allow tab-key to insert 4 spaces instead of setting focus to the next dom-element\n    onSettingsPanel(model, view, settings) {\n        return {\n            onDisplay: (params) => {\n                const textarea = params.markup.querySelector('textarea');\n                if (!textarea) { return; }\n                const doValidateBtn = params.markup.querySelector('input[name=\"doValidate\"]');\n                if (doValidateBtn) {\n                    doValidateBtn.addEventListener('change', (event) => {\n                        model.set('fields.skipValidation', event.target.checked ? null : true);\n                    }, false);\n                    doValidateBtn.checked = !model.get('fields.skipValidation');\n                }\n                textarea.value = view.get('fields.markup');\n                if (this.validation.suggestedMarkup) {\n                    textarea.value = this.validation.suggestedMarkup;\n                    const msg = document.createElement('p');\n                    if (this.validation.isUnvalid) {\n                        msg.innerHTML = `<span style=\"color: red;\">Markup is invalid. Please correct the markup and try again.</span><br>${ this.validation.error }`;\n                    } else {\n                        msg.innerHTML = 'Validator has modified markup. Please review the suggested markup below.';\n                    }\n                    textarea.before(msg);\n                    this.validation.suggestedMarkup = null;\n                    this.validation.isUnvalid = false;\n                    this.validation.error = '';\n                }\n                params.markup.querySelector('textarea').focus();\n                textarea.addEventListener('keydown', (event) => {\n                    if (event.key === 'Tab') {\n                        event.preventDefault();\n                        const [start, end] = [textarea.selectionStart, textarea.selectionEnd];\n                        textarea.setRangeText('    ', start, end, 'end');\n                    }\n                }, false);\n            },\n            onSubmit: ({\n                model, view, config, markup, modal, formValues\n            }) => {\n                if (!formValues.doValidate) {\n                    view.set('fields.markup', formValues['fields.markup']);\n                    return;\n                }\n                const markupValidator = new MarkupValidator();\n                markupValidator.validate(formValues['fields.markup']).then((validatedMarkup) => {\n                    if (formValues['fields.markup'].trim() !== validatedMarkup) {\n                        // Validator has modified markup\n                        this.validation.suggestedMarkup = validatedMarkup;\n                        this.validation.isUnvalid = false;\n                        const panelConfig = { ...config };\n                        panelConfig.defaultButtons = false;\n                        panelConfig.container.state.warning = true;\n                        this.api.v1.ui.modal.panel(model, view, panelConfig);\n                        return;\n                    }\n                    view.set('fields.markup', validatedMarkup);\n                }).catch((error) => {\n                    this.validation.suggestedMarkup = formValues['fields.markup'];\n                    this.validation.isUnvalid = true;\n                    this.validation.error = error.message;\n                    const panelConfig = { ...config };\n                    panelConfig.defaultButtons = false;\n                    panelConfig.container.state.error = true;\n                    this.api.v1.ui.modal.panel(model, view, panelConfig);\n                });\n            }\n        };\n    }\n\n}\n","export default class MobilTests {\n\n    constructor(api, params) {\n        this.api = api;\n        this.rootModel = api.v1.model.query.getRootModel();\n    }\n\n    // Prepare url for external data\n    onViewHelper(model, view) {\n        const site = this.api.v1.site.getSite();\n        model.setFiltered('siteId', site.id);\n        model.setFiltered('testId', model.get('fields.testId'));\n\n        const layoutOptionsMap = {\n            0: 'Score + pros/cons',\n            1: 'Score + pros/cons + specs',\n            2: 'Score + specs',\n            3: 'Pros/cons + specs',\n            4: 'Score',\n            5: 'Pros/cons',\n            6: 'Specs'\n        };\n        const layoutOption = model.get('fields.layoutOption') || '0';\n\n        const visible = {\n            score: (layoutOption === '0' || layoutOption === '1' || layoutOption === '2' || layoutOption === '4'),\n            prosCons: (layoutOption === '0' || layoutOption === '1' || layoutOption === '3' || layoutOption === '5'),\n            specs: (layoutOption === '1' || layoutOption === '2' || layoutOption === '3' || layoutOption === '6')\n        };\n        model.setFiltered('visible', visible);\n\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));\n        const layoutOptions = [];\n        for (const element of Object.keys(layoutOptionsMap)) {\n            layoutOptions.push({\n                key: element,\n                value: layoutOptionsMap[element],\n                selected: element === layoutOption\n            });\n        }\n\n        model.setFiltered('layoutOptions', layoutOptions);\n        model.setFiltered('apiEndpoint', layoutOptionsMap[layoutOption]);\n        model.setFiltered('topScore', model.get('fields.topScore') === 'on');\n        model.setFiltered('recommended', model.get('fields.recommended') === 'on');\n        model.setFiltered('titleWithGrade', model.get('fields.titleWithGrade') === 'on');\n        model.setFiltered('titleWithFacts', model.get('fields.titleWithFacts') === 'on');\n\n        if (this.api.v1.app.mode.isEditor()) {\n            const scoreOptions = [];\n            let score = model.get('fields.score') || '0';\n            score = parseInt(score, 10);\n            for (let i = 1; i < 11; i++) {\n                scoreOptions.push({ value: i, selected: (score === i ? 'selected' : '') });\n            }\n            model.setFiltered('scoreOptions', scoreOptions);\n        }\n    }\n\n    // External data-elements are run twice in Labrador. On second run we have external data\n    onRender(model, view) {\n        const externalData = view.get('external');\n        if (!externalData) return;\n\n        model.setFiltered('productName', externalData.namn ? externalData.namn : '');\n        model.setFiltered('pros', externalData.plus ? externalData.plus : []);\n        model.setFiltered('cons', externalData.minus ? externalData.minus : []);\n        model.setFiltered('structuredData', externalData.struktureradData ? JSON.stringify(externalData.struktureradData) : '');\n\n        const betygArray = [];\n\n        if (externalData.betyg && externalData.betyg.length) {\n            externalData.betyg.forEach(item => {\n                let score = false;\n                let scoreIsPercent = false;\n                let percent = false;\n\n                if (item.v) {\n                    score = item.v;\n                    if (parseInt(item.v, 10) < 11) { // TODO: Needs flag for percent score\n                        percent = `${ item.v }0`;\n                    } else {\n                        percent = item.v;\n                        scoreIsPercent = true;\n                    }\n                }\n\n                betygArray.push({\n                    key: item.n,\n                    score,\n                    scoreIsPercent,\n                    percent\n                });\n            });\n        }\n\n        model.setFiltered('score', betygArray);\n\n        // This previously overwrote the recommended and topScore filtered values that is set manually by not checking/using the model.fields value if no external data is available\n        // Should work like this, but I don't know if this breaks import stuff?\n        model.setFiltered('recommended', externalData.braköp === 'Ja' ? true : model.get('fields.recommended') === 'on');\n        model.setFiltered('topScore', externalData.toppbetyg === 'Ja' ? true : model.get('fields.topScore') === 'on');\n\n        model.setFiltered('specifications', externalData.spec ? externalData.spec : []);\n    }\n\n    onSettingsPanel(model) {\n        this.model = model;\n        return {\n            onDisplay: (params) => {\n                this.api.v1.apps.start('TextEdit').then((textTool) => {\n                    this.setupRichTextEditing(textTool, params.markup, this.model);\n                }).catch((error) => {\n                    console.log(`Error loading TextEdit-app: ${error}`);\n                });\n            }\n        };\n    }\n\n    setupRichTextEditing(textTool, markup, model) {\n        for (const element of markup.querySelectorAll('div.lab-input-text')) {\n            if (element && element instanceof HTMLElement) {\n                const key = element.getAttribute('data-input-key') || 'no-key';\n                this.setupRichTextEditingForElement(textTool, markup, element, key, model);\n            }\n        }\n    }\n\n    setupRichTextEditingForElement(textTool, markup, element, key, model) {\n        const contentdata = {};\n        lab_api.v1.util.object.set(key, model.get(key), contentdata);\n        textTool.register({\n            element,\n            simulatedData: {\n                type: 'article',\n                path: '',\n                contentdata\n            },\n            toolSettings: {\n                key,\n                inlineOnly: true,\n                displayCharCount: false,\n                displaySelectionLength: false,\n                displayWordCount: false,\n                selectTextOnStart: false,\n                placeholder: '',\n                attributes: {\n                    text_size: {\n                        active: false\n                    }\n                }\n            },\n            callbacks: {\n                ended: (theKey, theValue) => {\n                    this.model.set(theKey, theValue);\n                }\n            },\n            menuSettings: {\n                container: markup,\n                items: {\n                    bold: {\n                        group: 'g2',\n                        icon: 'labicon-text_bold',\n                        callback: 'toggleAttribute',\n                        key: 'font_weight',\n                        attributes: {\n                            class: 'font-weight-bold'\n                        },\n                        value: false,\n                        onValue: 'font-weight-bold',\n                        offValue: false,\n                        bindToSelection: 'font_weight',\n                        title: 'Font weight - Bold',\n                        hotkeys: [{\n                            key: 'B',\n                            controlkeys: ['labCtrlKey'],\n                            preventDefault: true,\n                            overrideDisable: true\n                        }]\n                    },\n                    italic: {\n                        group: 'g2',\n                        icon: 'labicon-text_italic',\n                        callback: 'toggleAttribute',\n                        key: 'italic',\n                        attributes: {\n                            class: 'italic'\n                        },\n                        value: false,\n                        onValue: 'italic',\n                        offValue: false,\n                        bindToSelection: 'italic',\n                        title: 'Italic',\n                        hotkeys: [{\n                            key: 'i',\n                            controlkeys: ['labCtrlKey'],\n                            preventDefault: true,\n                            overrideDisable: true\n                        }]\n                    },\n                    reset: {\n                        group: 'g4',\n                        icon: 'labicon-reset_style',\n                        callback: 'reset',\n                        title: 'Remove textformatting in selection for viewport'\n                    }\n                }\n            }\n        });\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class Motortests {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    // Prepare url for external data\n    onViewHelper(model, view) {\n        const site = this.api.v1.site.getSite();\n        model.setFiltered('siteId', site.id);\n        model.setFiltered('testId', model.get('fields.testId'));\n        const testTypeMap = {\n            summerTire: 'tiresummertests',\n            winterTire: 'tirewintertests',\n            food: 'foodtests',\n            hotel: 'hoteltests',\n            vehicle: 'vehicletests'\n        };\n        const testType = model.get('fields.testType') || 'vehicle';\n        const displayDirection = model.get('fields.displayDirection') === 'horizontal' ? 'horizontal' : 'vertical';\n        model.setFiltered('displayDirection', displayDirection);\n        model.setFiltered('displayDirectionOptions', [\n            {\n                value: 'horizontal',\n                selected: displayDirection === 'horizontal'\n            },\n            {\n                value: 'vertical',\n                selected: displayDirection === 'vertical'\n            }\n        ]);\n        model.setFiltered('needSlider', displayDirection === 'horizontal');\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));\n        const typeOptions = [];\n        for (const testName of Object.keys(testTypeMap)) {\n            typeOptions.push({\n                value: testName,\n                selected: testName === testType\n            });\n        }\n        model.setFiltered('typeOptions', typeOptions);\n        model.setFiltered('apiEndpoint', testTypeMap[testType]);\n    }\n\n    // External data-elements are run twice in Labrador. On second run we have external data\n    onRender(model, view) {\n        const externalData = view.get('external');\n        if (!externalData) return;\n        const testType = model.get('fields.testType') || 'vehicle';\n        const categoryMap = {\n            vehicle: {\n                comfort: 'Komfort',\n                design: 'Design',\n                driveability: 'Kjøreegenskaper',\n                environment: 'Miljø og forbruk',\n                equipment: 'Utstyr',\n                practicality: 'Praktisk',\n                price: 'Pris',\n                runningCosts: 'Driftskostnader',\n                security: 'Sikkerhet',\n                value: 'Annenhåndsverdi'\n            },\n            food: {\n                firstImpression: 'Førsteinntrykk',\n                menu: 'Meny',\n                taste: 'Smak',\n                price: 'Pris',\n                service: 'Service',\n                familyFriendly: 'Barnevennlig',\n                homemade: 'Hjemmelaget',\n                drinks: 'Drikke',\n                cleaning: 'Renhold',\n                lavatories: 'Toaletter'\n\n            },\n            hotel: {\n                location: 'Beliggenhet',\n                rooms: 'Rom',\n                standard: 'Standard',\n                beds: 'Senger',\n                breakfast: 'Frokost',\n                bathroom: 'Bad',\n                commonAreas: 'Fellesområder',\n                cleaning: 'Renhold',\n                value: 'Valuta for pengene'\n            },\n            summerTire: {\n                asphalt: 'Tørr asfalt',\n                asphaltWet: 'Våt asfalt',\n                grip: 'Grep',\n                breaking: 'Bremselengde',\n                driveability: 'Kjøreegenskaper',\n                aquaplaning: 'Vannplaning',\n                aquaplaningSwing: 'Vannplaning sving',\n                comfort: 'Komfort',\n                fuelConsumption: 'Forbruk',\n                noise: 'Støy',\n                other: 'Annet'\n            },\n            winterTire: {\n                snow: 'Snø',\n                ice: 'Is',\n                asphalt: 'Tørr asfalt',\n                asphaltWet: 'Våt asfalt',\n                breaking: 'Bremselengde',\n                driveability: 'Kjøreegenskaper',\n                aquaplaning: 'Vannplaning',\n                aquaplaningSwing: 'Vannplaning sving',\n                comfort: 'Komfort',\n                fuelConsumption: 'Forbruk',\n                noise: 'Støy',\n                grip: 'Grep',\n                acceleration: 'Akselerasjon',\n                other: 'Annet',\n                spikes: 'Pigger',\n                count: 'Antall',\n                spikeLengthBefore: 'Piggutstikk etter innkjøring (mm)',\n                spikeLengthAfter: 'Piggutstikk etter snø/istest (mm)',\n                weightKg: 'Vekt',\n                installationDescription: 'Montering'\n            }\n        };\n        const mappedCategories = [];\n        if (testType.indexOf('Tire') > 0) {\n            const dateHelper = new DateTimeHelper(this.api.v1.config.get('lang'));\n            const date = new  Date(externalData.production.date);\n            const dateString = Number.isNaN(date.getTime()) ? externalData.production.date : dateHelper.formattedDate(date, 'd/m Y');\n            let winterTire = '';\n            if (testType === 'winterTire') {\n                winterTire = `<span class=\"test-key-value\"><span class=\"test-key\">Pigger:</span><span class=\"test-value\">${ (externalData.spikes && externalData.spikes.isSpikes) ? externalData.spikes.count : 'nei' }</span></span>`;\n            }\n            if (externalData.description && typeof externalData.description === 'string') {\n                externalData.description = externalData.description.replace(/\\n/g, '<br>');\n            }\n            mappedCategories.push({\n                title: 'Fakta',\n                description: `\n                    <span class=\"test-key-value\"><span class=\"test-key\">Produksjonsland:</span><span class=\"test-value\">${ externalData.production.country || '' }</span></span>\n                    <span class=\"test-key-value\"><span class=\"test-key\">Produksjonsdato:</span><span class=\"test-value\">${ dateString || '' }</span></span>\n                    ${ winterTire }\n                    <p>${ externalData.description || '' }</p>\n                `\n            });\n            externalData.description = '';\n            if (externalData.loadSpeedRating && externalData.loadSpeedRating.length) {\n                externalData.description += `<span class=\"test-key-value\"><span class=\"test-key\">Last- og hastighetsindeks:</span><span class=\"test-value\">${ externalData.loadSpeedRating }</span></span>`;\n            }\n            if (externalData.shore && externalData.shore.length) {\n                externalData.description += `<span class=\"test-key-value\"><span class=\"test-key\">Hardhetstall</span><span class=\"test-value\">${ externalData.shore }</span></span>`;\n            }\n            if (externalData.installationDescription && externalData.installationDescription.length) {\n                externalData.description += `<span class=\"test-key-value\"><span class=\"test-key\">Montering:</span><span class=\"test-value\">${ externalData.installationDescription }</span></span>`;\n            }\n\n            Object.keys(categoryMap[testType]).forEach((key) => {\n                if (externalData[key] && (typeof externalData[key] === 'object' && Array.isArray(Object.keys(externalData[key])) && Object.keys(externalData[key]).length > 0)) {\n                    if (key === 'spikes' && !externalData.spikes.isSpikes) {\n                        return;\n                    }\n                    let subDescription = '';\n                    Object.keys(externalData[key]).forEach((subKey) => {\n                        if (externalData[key][subKey] > 0 && categoryMap[testType][subKey]) {\n                            subDescription += `<span class=\"test-key-value\"><span class=\"test-key\">${ categoryMap[testType][subKey] }:</span><span class=\"test-value\">${ externalData[key][subKey] }</span></span> `;\n                        }\n                    });\n\n                    mappedCategories.push({\n                        title: categoryMap[testType][key],\n                        description: subDescription\n                    });\n                }\n            });\n        } else {\n            Object.keys(categoryMap[testType]).forEach((key) => {\n                if (externalData[key]) {\n                    const tmpObj = {\n                        title: categoryMap[testType][key],\n                        score: externalData[key].score,\n                        description: externalData[key].description\n                    };\n                    mappedCategories.push(tmpObj);\n                }\n            });\n        }\n        model.setFiltered('testSubject', externalData.name ? externalData.name : null);\n        model.setFiltered('totalScore', externalData.score ? externalData.score : null);\n        model.setFiltered('introduction', externalData.description ? externalData.description : null);\n        model.setFiltered('mappedCategories', mappedCategories);\n    }\n\n}\n","export default class Newsletter_submit {\n\n    constructor(api) {\n        this.api = api;\n        this.signupText = api.v1.locale.get('newsletter.generic.signup');\n        this.yourEmailText = api.v1.locale.get('newsletter.generic.yourEmail');\n        this.subscribeButton = api.v1.locale.get('newsletter.generic.subscribeButton');\n        this.hiddenValue = api.v1.locale.get('newsletter.generic.hiddenValue');\n    }\n\n    onRender(model, view) {\n        const config = this.api.v1.config.get('contentbox_settings.newsletter_submit') || {};\n        const fieldAction = model.get('fields.newsletterDataAction') || (config.action === \"MAILMOJO_LENKE\" ? '' : config.action) || '';\n        const fieldTitle = model.get('fields.newsletterDataTitle');\n        const fieldDescription = model.get('fields.newsletterDataDescription');\n        const fieldButtonText = model.get('fields.newsletterButtonText') || this.subscribeButton;\n        const fieldPlaceholder = model.get('fields.newsletterPlaceholder') || this.yourEmailText;\n\n        const obj = {\n            provider: config.provider ? config.provider : 'mailmojo',\n            title: fieldTitle || (config.title ? config.title : this.signupText),\n            description: fieldDescription || config.description || '',\n            action: fieldAction,\n            buttonText: fieldButtonText,\n            placeholder: fieldPlaceholder,\n            elements: config.elements ? config.elements : [\n                {\n                    type: 'hidden',\n                    name: 'tagsadditional',\n                    value: this.hiddenValue,\n                    class: '',\n                    placeholder: ''\n                },\n                {\n                    type: 'email',\n                    name: 'email',\n                    value: '',\n                    class: '',\n                    placeholder: fieldPlaceholder\n                },\n                {\n                    type: 'submit',\n                    name: 'submit',\n                    value: fieldButtonText,\n                    class: 'bg-secondary',\n                    placeholder: ''\n                }\n            ]\n        };\n\n        if (this.api.v1.app.mode.isFront() && !obj.action) {\n            model.setFiltered('newsletter_data', null);\n        } else {\n            model.setFiltered('newsletter_data', obj);\n        }\n    }\n}\n\n","import { DateTimeHelperInt } from '../../lib/helpers/datetime/DateTimeHelperInt.js';\n\nexport default class Notice {\n\n    constructor(api) {\n        this.api = api;\n        this.dateTimeHelper = new DateTimeHelperInt();\n    }\n\n    onRender(model, view) {\n        const timestamp = model.get('fields.modified') || model.get('fields.published');\n        if (timestamp != null) {\n            const date = new Date(timestamp * 1000);\n            model.setFiltered('niceDate', this.dateTimeHelper.timestampToNiceDate(timestamp));\n            model.setFiltered('publishedDate', this.dateTimeHelper.utcFormat(date, `${ this.api.v1.locale.get('dates.monthdayyear', { noRender: true }) } ${ this.api.v1.locale.get('dates.hourminute', { noRender: true }) }`));\n            model.setFiltered('isoDate', date.toISOString());\n        }\n    }\n\n}\n","export default class NoticeHeader {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onRendered(model, view) {\n        if (!this.isEditor) {\n            return;\n        }\n        const tags = [...model.get('tags')];\n        const container = view.getMarkup().querySelector('.tags');\n        for (const tag of tags) {\n            const el = container.querySelector(`[data-tag=\"${ tag }\"]`);\n            if (el) {\n                this.setupTag(model, el, tag);\n            }\n        }\n        const addBtn = document.createElement('span');\n        addBtn.classList.add('labicon-pluss_slim', 'add-tag');\n        addBtn.setAttribute('title', 'Add tag');\n        container.appendChild(addBtn);\n        addBtn.addEventListener('click', async(e) => {\n            e.preventDefault();\n            let modal = null;\n            const tagsContainer = await this.api.v1.util.tags.ui({\n                callbacks: {\n                    change: (tagsList) => {\n                        if (modal) {\n                            // Backend sorts tags alphabetically.\n                            // Do the same here to avoid confusion.\n                            const sortedTags = tagsList.sort();\n                            modal.getMarkup().querySelector('#hidden_tags_input').value = sortedTags.join(', ');\n                        }\n                    }\n                },\n                tags\n            });\n            modal = this.api.v1.ui.modal.dialog({\n                container: {\n                    width: 500\n                },\n                placeholders: [\n                    {\n                        selector: '#placeholder-tags',\n                        element: tagsContainer\n                    }\n                ],\n                content: {\n                    title: 'Edit tags',\n                    formgroups: [\n                        {\n                            elements: [\n                                {\n                                    label: 'Selected tags. Click a tag to remove. <br>Use input field below to add new tags.',\n                                    inline: true,\n                                    tag: 'input',\n                                    attributes: [\n                                        {\n                                            name: 'type',\n                                            value: 'hidden'\n                                        },\n                                        {\n                                            name: 'name',\n                                            value: 'tag'\n                                        },\n                                        {\n                                            name: 'id',\n                                            value: 'hidden_tags_input'\n                                        },\n                                        {\n                                            name: 'value',\n                                            value: tags.join(', ')\n                                        }\n                                    ]\n                                },\n                                {\n                                    grid: 12,\n                                    placeholder: 'placeholder-tags'\n                                },\n                                {\n                                    // Create space below for tag suggestions\n                                    grid: 12,\n                                    tag: 'p',\n                                    value: '<br><br><br><br><br>'\n                                }\n                            ]\n                        }\n                    ]\n                },\n                callbacks: {\n                    didDisplay: (theModal) => {\n                        theModal.getMarkup().querySelector('input[name=\"tag\"]').focus();\n                    },\n                    submit: (formElements) => {\n                        const allTags = formElements.tag.trim().toLowerCase().split(',').map((t) => t.trim())\n                            .filter((t) => t.length > 0);\n                        if (allTags.length) {\n                            model.set('tags', allTags);\n                        }\n                    }\n                },\n                eventHandlers: [{\n                    selector: '#tag-cancel',\n                    event: 'click',\n                    callback: (theModal, event) => {\n                        theModal.close();\n                    }\n                }],\n                keyValidation: [{\n                    key: 'tag',\n                    validator: 'notEmpty'\n                }],\n                footer: {\n                    buttons: [\n                        {\n                            value: 'Cancel',\n                            highlight: false,\n                            id: 'tag-cancel'\n                        },\n                        {\n                            value: 'Save tags',\n                            type: 'submit',\n                            highlight: true\n                        }\n                    ]\n                }\n            });\n        });\n    }\n\n    setupTag(model, element, tag) {\n        element.addEventListener('click', (e) => {\n            e.preventDefault();\n            console.log('Tag clicked: ', tag);\n            model.set('tags', [...model.get('tags').filter((t) => t !== tag)]);\n        });\n    }\n\n}\n","export default class Parallax {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const totalGridSize = this.api.v1.config.get('grid.total_grid_spans');\n        const layers = [];\n        let requireJs = false;\n\n        model.getChildren().forEach((child, index) => {\n            const animations = [];\n            const supportedAnimations = ['scale', 'rotate', 'opacity', 'blur', 'sepia', 'brightness']; // , 'position.x'\n            const staticAttributes = [];\n            const supportedStaticAttributes = ['perspective'];\n            const childView = this.api.v1.view.getView(child, view.getViewport());\n            const data = childView.get('metadata.parallax') || {};\n            supportedAnimations.forEach((animationName) => {\n                const settings = data[animationName] || {};\n                if (settings.active) {\n                    requireJs = true;\n                    animations.push(JSON.stringify({\n                        name: animationName.replace('.', '_'),\n                        startValue: settings.startValue || 0,\n                        endValue: settings.endValue || 100,\n                        startScrollPosition: settings.startScrollPosition || 0,\n                        endScrollPosition: settings.endScrollPosition || 100\n                    }));\n                }\n            });\n            supportedStaticAttributes.forEach((attributeName) => {\n                const settings = data[attributeName] || {};\n                if (settings.active) {\n                    requireJs = true;\n                    staticAttributes.push(JSON.stringify({\n                        name: attributeName,\n                        value: settings.value || 0\n                    }));\n                }\n            });\n\n            const css = [\n                this.api.v1.style.getStyle(child, childView, 'background_color'),\n                this.api.v1.style.getStyle(child, childView, 'background_opacity')\n            ];\n\n            layers.push({\n                index,\n                type: child.getType(),\n                sticky: !!data.sticky,\n                fullwidth: !!data.fullwidth,\n                height: data.height || '100',\n                spaceBelow: data.spaceBelow || '0',\n                position: data.position,\n                horizontalAlign: data.horizontalAlign,\n                verticalAlign: data.verticalAlign || 'top',\n                verticalPosition: data.verticalPosition || 'auto',\n                css: css.join(' '),\n                grid: {\n                    desktop: this.api.v1.grid.percentToGrid(childView.get('width', false, 'desktop'), totalGridSize),\n                    mobile: this.api.v1.grid.percentToGrid(childView.get('width', false, 'mobile'), totalGridSize)\n                },\n                selector: `[data-parallax-layer=\"${ index }\"]`,\n                hasAnimations: animations.length > 0 || staticAttributes.length > 0,\n                animations,\n                staticAttributes\n            });\n        });\n\n        model.setFiltered('layers', layers);\n        model.setFiltered('elementCount', model.children.length);\n        model.setFiltered('requireJs', requireJs);\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));\n\n        if (!this.api.v1.app.mode.isEditor()) {\n            return;\n        }\n        model.setFiltered('displayNoContent', layers.length === 0);\n        model.setFiltered('useReflow', true);\n\n        // Display a list of supported elements:\n        const supportedContentTypes = Object.keys(view.getProperty('droppable.drop.sourceType') || {});\n        model.setFiltered('supportedContentTypes', supportedContentTypes);\n    }\n\n}\n","export default class RemoteProduction {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onRender(model, view) {\n\n        // Display caption on article-pages:\n        let displayCaption = this.api.v1.model.root.getType() === 'page_article';\n        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption')) {\n            displayCaption = false;\n        }\n        model.setFiltered('displayCaption', displayCaption);\n\n        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {\n            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');\n            const remoteProductionConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'remoteproduction')[0];\n\n            if (remoteProductionConsent) {\n                model.setFiltered('requiredCookieConsent', remoteProductionConsent.requiredConsent || false);\n                model.setFiltered('insufficientConsentMessage', remoteProductionConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');\n            }\n        }\n    }\n\n    onRendered(model, view) {\n        if (this.isEditor) {\n            // The iframe from remote production player captures events on the element of the iframe disabling drag/drop in the editor.\n            // Disable pointer-events when hovering the drag-handle.\n            const iframe = view.getMarkup().querySelector('iframe');\n            const dragHandle = view.getMarkup().querySelector('.remoteproduction-drag-handle');\n            if (iframe && dragHandle) {\n                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);\n                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);\n            }\n        }\n    }\n\n}\n","import { Movable } from '../../lib/helpers/Movable.js';\n\nexport default class Markup {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onInserted(model) {\n        if (!this.isEditor) {\n            const dateString = model.get('metadata.visibleAfterDate');\n            if (dateString) {\n                const date = this.stringToDate(dateString);\n                if (date) {\n                    const now = new Date().getTime();\n                    if (date.getTime() > now) {\n                        Sys.logger.debug(`[Baseview] The path 'metadata.visibleAfterDate' ('${ dateString }') has prevented the row '${ model.getPositionedPath() }' from rendering`);\n                        this.api.v1.model.noRender(model);\n                    }\n                }\n            }\n        }\n    }\n\n    onChildAdded(model, child) {\n        this.updateFutureFlag(model);\n    }\n\n    onChildRemoved(model, child) {\n        this.updateFutureFlag(model);\n    }\n\n    onRender(model, view) {\n        if (!this.isEditor && !model.hasNodeData(true)) {\n            this.api.v1.model.noRender(model);\n            return;\n        }\n        if (view.get('metadata.movableContent')) {\n            model.setFiltered('movableStyle', Movable.createStyle(model, 'metadata.contentPosition', ['desktop', 'mobile']));\n        }\n        if (!this.isEditor) {\n            return;\n        }\n        const dateString = model.get('metadata.visibleAfterDate');\n        if (dateString) {\n            const date = this.stringToDate(dateString);\n            if (date) {\n                const now = new Date().getTime();\n                if (date.getTime() > now) {\n                    view.addCssStates(['hidden-on-front', 'has-date-restriction']);\n                }\n                date.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n                model.setFiltered('visibleAfterDate', date.toISOString().slice(0, 16));\n            }\n        } else if (model.get('filtered.visibleAfterDate')) {\n            view.resetCssState();\n            model.setFiltered('visibleAfterDate', null);\n        }\n    }\n\n    onSettingsPanel() {\n        return {\n            onSubmit: ({\n                model, formValues\n            }) => {\n                for (const view of this.api.v1.view.getViews(model)) {\n                    view.resetCssState();\n                }\n                const date = this.stringToDate(formValues['metadata.visibleAfterDate']); // \"2023-06-08T10:44\"\n                let value;\n                if (date) {\n                    value = date.toISOString(); // '2023-06-08T08:44:00.000Z'\n                } else {\n                    model.setFiltered('visibleAfterDate', null);\n                    value = null;\n                }\n                model.set('metadata.visibleAfterDate', value);\n            }\n        };\n    }\n\n    stringToDate(dateString) {\n        const date = new Date(dateString || '');\n        if (date instanceof Date && Number.isFinite(date.getTime())) {\n            return date;\n        }\n        return null;\n    }\n\n    // Check if any child has a future publish date and update the row publish date (metadata.visibleAfterDate) if needed\n    updateFutureFlag(model) {\n        const currentVisibleAfterDate = model.get('metadata.visibleAfterDate');\n        const hasDate = !!currentVisibleAfterDate;\n        let visibleAfterDate = null;\n        for (const child of model.getChildren()) {\n            const published = child.get('fields.published');\n            if (published) {\n                const date = new Date(published).getTime();\n                if (date > new Date().getTime()) {\n                    if (date > visibleAfterDate) {\n                        visibleAfterDate = date;\n                    }\n                }\n            }\n        }\n        if (visibleAfterDate) {\n            model.set('metadata.visibleAfterDate', new Date(visibleAfterDate).toISOString());\n            this.api.v1.model.highlight.message(model, `Publish-date updated for row`);\n            Sys.logger.debug(`[Baseview] The row '${ model.getPositionedPath() }' has set publish date to '${ new Date(visibleAfterDate).toISOString() }'.`);\n        } else if (hasDate) {\n            model.set('metadata.visibleAfterDate', null);\n            this.api.v1.model.highlight.message(model, `Publish-date removed for row`);\n            Sys.logger.debug(`[Baseview] The row '${ model.getPositionedPath() }' has removed publish date.`);\n        }\n    }\n\n}\n","export default class Scrollbox {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    // Update data for added article-teaser.\n    // Replaces Lab 3 CMS-feature for config 'dataForAddedChild': 'contentbox_settings.scrollbox.dataForAddedChild'\n    onChildAdded(model, child) {\n        if (child.getType() !== 'article') {\n            return;\n        }\n        // {\n        //     \"metadata\": {\n        //         \"floatingTitle\": true,\n        //         ...\n        //     },\n        //     \"contentdata\": {\n        //         \"fields.displayByline\": false\n        //     },\n        //     \"children\": {\n        //         \"image\": {\n        //             \"contentdata\": {\n        //                 \"fields.whRatio\": {\n        //                     \"value\": \"1.2\",\n        //                     \"vp\": {\n        //                         \"mobile\": \"0.8\"\n        //                     }\n        //                 },\n        //                 \"fields.bbRatio\": \"0.4\"\n        //             }\n        //         }\n        //     }\n        // }\n        const setValues = (m, obj, fieldPrefix) => {\n            if (!obj) { return; }\n            for (const key of Object.keys(obj)) {\n                if (!key.includes('viewports_json')) { // Lab3-config may include paths like 'fields.viewports_json.mobile.fields.whRatio'\n                    if (obj[key] && typeof obj[key] === 'object') {\n                        m.setRaw((fieldPrefix || '') + key, obj[key]);\n                    } else {\n                        m.set((fieldPrefix || '') + key, obj[key]);\n                    }\n                }\n            }\n        };\n        setValues(child, this.api.v1.config.get('contentbox_settings.scrollbox.dataForAddedChild.article.metadata'), 'metadata.');\n        setValues(child, this.api.v1.config.get('contentbox_settings.scrollbox.dataForAddedChild.article.contentdata'));\n        if (child.children.length && child.children[0].getType() === 'image') {\n            const image = child.children[0];\n            setValues(image, this.api.v1.config.get('contentbox_settings.scrollbox.dataForAddedChild.article.children.image.contentdata'));\n        }\n    }\n\n}\n","export default class Simplestream {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        if (this.api.v1.model.query.getRootModel().getType() === 'page_article') {\n            if (this.api.v1.app.mode.isFront() && !model.get('fields.caption')) {\n                model.setFiltered('displayCaption', false);\n            } else {\n                model.setFiltered('displayCaption', true);\n            }\n        }\n\n        var MD5 = function (d) { var r = M(V(Y(X(d), 8 * d.length))); return r.toLowerCase() }; function M(d) { for (var _, m = \"0123456789ABCDEF\", f = \"\", r = 0; r < d.length; r++)_ = d.charCodeAt(r), f += m.charAt(_ >>> 4 & 15) + m.charAt(15 & _); return f } function X(d) { for (var _ = Array(d.length >> 2), m = 0; m < _.length; m++)_[m] = 0; for (m = 0; m < 8 * d.length; m += 8)_[m >> 5] |= (255 & d.charCodeAt(m / 8)) << m % 32; return _ } function V(d) { for (var _ = \"\", m = 0; m < 32 * d.length; m += 8)_ += String.fromCharCode(d[m >> 5] >>> m % 32 & 255); return _ } function Y(d, _) { d[_ >> 5] |= 128 << _ % 32, d[14 + (_ + 64 >>> 9 << 4)] = _; for (var m = 1732584193, f = -271733879, r = -1732584194, i = 271733878, n = 0; n < d.length; n += 16) { var h = m, t = f, g = r, e = i; f = md5_ii(f = md5_ii(f = md5_ii(f = md5_ii(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_ff(f = md5_ff(f = md5_ff(f = md5_ff(f, r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 0], 7, -680876936), f, r, d[n + 1], 12, -389564586), m, f, d[n + 2], 17, 606105819), i, m, d[n + 3], 22, -1044525330), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 4], 7, -176418897), f, r, d[n + 5], 12, 1200080426), m, f, d[n + 6], 17, -1473231341), i, m, d[n + 7], 22, -45705983), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 8], 7, 1770035416), f, r, d[n + 9], 12, -1958414417), m, f, d[n + 10], 17, -42063), i, m, d[n + 11], 22, -1990404162), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 12], 7, 1804603682), f, r, d[n + 13], 12, -40341101), m, f, d[n + 14], 17, -1502002290), i, m, d[n + 15], 22, 1236535329), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 1], 5, -165796510), f, r, d[n + 6], 9, -1069501632), m, f, d[n + 11], 14, 643717713), i, m, d[n + 0], 20, -373897302), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 5], 5, -701558691), f, r, d[n + 10], 9, 38016083), m, f, d[n + 15], 14, -660478335), i, m, d[n + 4], 20, -405537848), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 9], 5, 568446438), f, r, d[n + 14], 9, -1019803690), m, f, d[n + 3], 14, -187363961), i, m, d[n + 8], 20, 1163531501), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 13], 5, -1444681467), f, r, d[n + 2], 9, -51403784), m, f, d[n + 7], 14, 1735328473), i, m, d[n + 12], 20, -1926607734), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 5], 4, -378558), f, r, d[n + 8], 11, -2022574463), m, f, d[n + 11], 16, 1839030562), i, m, d[n + 14], 23, -35309556), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 1], 4, -1530992060), f, r, d[n + 4], 11, 1272893353), m, f, d[n + 7], 16, -155497632), i, m, d[n + 10], 23, -1094730640), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 13], 4, 681279174), f, r, d[n + 0], 11, -358537222), m, f, d[n + 3], 16, -722521979), i, m, d[n + 6], 23, 76029189), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 9], 4, -640364487), f, r, d[n + 12], 11, -421815835), m, f, d[n + 15], 16, 530742520), i, m, d[n + 2], 23, -995338651), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 0], 6, -198630844), f, r, d[n + 7], 10, 1126891415), m, f, d[n + 14], 15, -1416354905), i, m, d[n + 5], 21, -57434055), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 12], 6, 1700485571), f, r, d[n + 3], 10, -1894986606), m, f, d[n + 10], 15, -1051523), i, m, d[n + 1], 21, -2054922799), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 8], 6, 1873313359), f, r, d[n + 15], 10, -30611744), m, f, d[n + 6], 15, -1560198380), i, m, d[n + 13], 21, 1309151649), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 4], 6, -145523070), f, r, d[n + 11], 10, -1120210379), m, f, d[n + 2], 15, 718787259), i, m, d[n + 9], 21, -343485551), m = safe_add(m, h), f = safe_add(f, t), r = safe_add(r, g), i = safe_add(i, e) } return Array(m, f, r, i) } function md5_cmn(d, _, m, f, r, i) { return safe_add(bit_rol(safe_add(safe_add(_, d), safe_add(f, i)), r), m) } function md5_ff(d, _, m, f, r, i, n) { return md5_cmn(_ & m | ~_ & f, d, _, r, i, n) } function md5_gg(d, _, m, f, r, i, n) { return md5_cmn(_ & f | m & ~f, d, _, r, i, n) } function md5_hh(d, _, m, f, r, i, n) { return md5_cmn(_ ^ m ^ f, d, _, r, i, n) } function md5_ii(d, _, m, f, r, i, n) { return md5_cmn(m ^ (_ | ~f), d, _, r, i, n) } function safe_add(d, _) { var m = (65535 & d) + (65535 & _); return (d >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m } function bit_rol(d, _) { return d << _ | d >>> 32 - _ }\n\n        const uvid = model.get('fields.uvid');\n        let expire = new Date();\n        expire.setHours(expire.getHours() + 4);\n        expire = Math.floor(expire.getTime() / 1000);\n        const privateAPIKey = 'boqCnvdBXwZTAaa7tMvKkte3MqaufjIZ';\n        model.setFiltered('dataAttributes', {\n            type: model.get('fields.videoType') || 'vod',\n            id: model.get('fields.idString') || 'GB001',\n            token: MD5(`${ uvid }${ expire }${ privateAPIKey }`),\n            expire\n        });\n    }\n\n}\n","export default class Slideshow {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        // Set aspect ratio of images in the slideshow.\n        // Prio: 1: data, 2: element-property, 3: config, 4: Hard-coded value\n        const customAspectRatio = view.get('fields.aspectRatio') || view.getProperty('image.defaultAspectRatio') || this.api.v1.config.get('image.defaultAspectRatio') || 0.5;\n        model.setFiltered('aspectRatio', customAspectRatio * 100);\n    }\n\n}\n","import { TableFormatter } from '../../lib/helpers/TableFormatter.js';\n\nexport default class Tablebox {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const data = model.get('fields.tabledata');\n        const header = model.get('fields.tableheader');\n        const headerSort = model.get('fields.tableheadersort');\n        if ((typeof data === 'undefined' || data === null || data.length === 0) && this.api.v1.app.mode.isEditor()) {\n            model.setFiltered('missingData', 'Missing Data');\n            return;\n        }\n        const table = TableFormatter.tsvStringToTable(data);\n        const processedTable = TableFormatter.tableToTemplateBody(table); // Get table object\n        model.setFiltered('missingData', false);\n        model.setFiltered('tabledata', TableFormatter.tableToTSVString(table)); // Set edit-field\n        model.setFiltered('header', header ? TableFormatter.templateTableBodyToHeader(processedTable, headerSort) : null);\n        model.setFiltered('table', processedTable);\n    }\n\n}\n","export default class Tagboard {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const config = this.api.v1.config.get('contentbox_settings.tagboard') || {};\n        const isEditor = this.api.v1.app.mode.isEditor();\n        const getTagGroups = (tagGroupsConf = {}) => {\n            const result = [];\n            const tagStringToArray = (tags = '') => tags.split(',').map((t) => t.trim().toLowerCase()).filter((t) => !!t);\n            for (let index = 1; index <= 3; index++) {\n                if (tagGroupsConf[`tagGroup${ index }_tags`]) {\n                    result.push({\n                        label: tagGroupsConf[`tagGroup${ index }_label`],\n                        tags: tagStringToArray(tagGroupsConf[`tagGroup${ index }_tags`])\n                    });\n                }\n            }\n            return result;\n        };\n        // Tags for end-user to select:\n        const tagGroupsObject = {\n            tagGroup1_label: model.get('fields.tagGroup1_label') || '',\n            tagGroup1_tags: model.get('fields.tagGroup1_tags') || '',\n            tagGroup2_label: model.get('fields.tagGroup2_label') || '',\n            tagGroup2_tags: model.get('fields.tagGroup2_tags') || '',\n            tagGroup3_label: model.get('fields.tagGroup3_label') || '',\n            tagGroup3_tags: model.get('fields.tagGroup3_tags') || ''\n        };\n        const tagGroups = getTagGroups(tagGroupsObject);\n        if (!tagGroups.length || !Array.isArray(tagGroups)) {\n            Sys.logger.warning('tagboard: Missing required config \"contentbox_settings.tagboard.tagGroups\" (array). End user will not be able to filter results.');\n        }\n        let tagsGroupsDefaultVisible = model.get('fields.tagsGroupsDefaultVisible');\n        if (tagsGroupsDefaultVisible === null) {\n            tagsGroupsDefaultVisible = this.api.v1.config.get('contentbox_settings.tagboard.tagsOptions.tagsGroupsDefaultVisible');\n        }\n\n        let hideHitsPerTag = model.get('fields.hideHitsPerTag');\n        if (hideHitsPerTag === null) {\n            hideHitsPerTag = this.api.v1.config.get('contentbox_settings.tagboard.tagsOptions.hideHitsPerTag');\n        }\n\n        let tagGroupInRows = model.get('fields.tagGroupInRows');\n        if (tagGroupInRows === null) {\n            tagGroupInRows = this.api.v1.config.get('contentbox_settings.tagboard.tagsOptions.tagGroupInRows');\n        }\n\n        let overrideUrlOption = model.get('fields.overrideUrlByTagsCookie');\n        if (overrideUrlOption === null) {\n            overrideUrlOption = this.api.v1.config.get('contentbox_settings.tagboard.cookieOptions.allow');\n        }\n\n        const tagArrayGroups = tagGroups.map((group) => group.tags);\n        const tagsArray = [].concat(...tagArrayGroups);\n\n        const integrationUrl = this.api.v1.properties.get('integration_url');\n        const apiUrl = this.api.v1.properties.get('front_api_url');\n        const feeds = Object.values(this.api.v1.config.get('feeds') || {}).filter((feed) => !!feed.labrador_json).map((feed) => ({\n            identifier: feed.display_name,\n            name: feed.display_name,\n            type: feed.url.includes('lab_viewport=json') ? 'DachserJson' : 'LabradorApi',\n            url: feed.url.replace('{{int}}', integrationUrl).replace('{{api}}', apiUrl)\n        }));\n        const sourcesConfig = (config.sources || []).concat(feeds);\n        const source = model.get('fields.source'); // identifier\n        const sourceObject = { ...(sourcesConfig.filter((item) => item.identifier === source).shift() || {}) };\n        const organizer = model.get('fields.organizer');\n        const layoutOptions = {\n            columnCount: parseFloat(model.get('fields.layout_columnCount') || 3),\n            rowCount: parseFloat(model.get('fields.layout_rowCount') || 10),\n            maxRowSize: parseFloat(model.get('fields.layout_maxRowSize') || 3),\n            minRowSize: parseFloat(model.get('fields.layout_minRowSize') || 1),\n            imageAspectRatio: parseFloat(model.get('fields.layout_imageAspectRatio') || 0.45),\n            gridsize: parseFloat(model.get('fields.layout_gridsize') || 12),\n            hide_items: []\n        };\n        if (model.get('fields.hide_title')) { layoutOptions.hide_items.push('title'); }\n        if (model.get('fields.hide_subtitle')) { layoutOptions.hide_items.push('subtitle'); }\n        if (model.get('fields.hide_image')) { layoutOptions.hide_items.push('image'); }\n        if (model.get('fields.hide_kicker')) { layoutOptions.hide_items.push('kicker'); }\n\n        const articleCountField = model.get('fields.articleCount') || 24;\n        const organizersRequiringArticleCount = ['RandomRows'];\n        let articleCount = articleCountField;\n        if (!organizersRequiringArticleCount.includes(organizer)) {\n            articleCount = layoutOptions.columnCount * layoutOptions.rowCount || articleCountField;\n        }\n        const articleFetchCount = model.get('fields.articleFetchCount') || articleCount;\n\n        const articleFilterList = [];\n        if (model.get('fields.filterExisting')) {\n            articleFilterList.push({\n                path: 'contentdata.id',\n                values: this.api.v1.model.query.getModelsByType('article').filter((article) => !!article.get('instance_of')).map((article) => String(article.get('instance_of')))\n            });\n        }\n        model.setFiltered('articleCount', articleCount);\n        model.setFiltered('articleFetchCount', articleFetchCount);\n        model.setFiltered('articleFilterList', JSON.stringify(articleFilterList));\n        model.setFiltered('tagArrayGroups', JSON.stringify(tagArrayGroups));\n        model.setFiltered('tagGroups', tagGroups); // Tags for end user to select\n        model.setFiltered('tagGroupsObject', tagGroupsObject); // Tags for end user to select\n        model.setFiltered('tagsGroupsDefaultVisible', tagsGroupsDefaultVisible);\n        model.setFiltered('hideHitsPerTag', hideHitsPerTag);\n        model.setFiltered('tagGroupInRows', tagGroupInRows);\n        model.setFiltered('layout', JSON.stringify(layoutOptions));\n        model.setFiltered('isConfigured', organizer && sourceObject.identifier && sourceObject.url && sourceObject.type);\n        model.setFiltered('source', sourceObject);\n        model.setFiltered('isDebug', true);\n        model.setFiltered('siteId', model.get('fields.siteId') || '');\n        model.setFiltered('viewport', this.api.v1.properties.get('device'));\n        model.setFiltered('imageServer', this.api.v1.properties.get('image_server'));\n        model.setFiltered('cookieOptions', {\n            allow: overrideUrlOption\n        });\n        model.setFiltered('tagOptions', {\n            allow: true,\n            tags: tagsArray,\n            tags_string: tagsArray.join(', '),\n            tagsString: JSON.stringify(tagsArray)\n        });\n        const styleKeyVal = [];\n        if (model.get('fields.size_active')) {\n            if (model.get('fields.size_title')) { styleKeyVal.push({ path: 'contentdata.fields.title.attributes.text_size.value', value: parseInt(model.get('fields.size_title'), 10) }); }\n            if (model.get('fields.size_subtitle')) { styleKeyVal.push({ path: 'contentdata.fields.subtitle.attributes.text_size.value', value: parseInt(model.get('fields.size_subtitle'), 10) }); }\n            if (model.get('fields.size_kicker')) { styleKeyVal.push({ path: 'contentdata.fields.kicker.attributes.text_size.value', value: parseInt(model.get('fields.size_kicker'), 10) }); }\n        }\n        model.setFiltered('styleString', JSON.stringify(styleKeyVal));\n        // model.setFiltered('styleString', JSON.stringify({\n        //     size_active: !!model.get('fields.size_active'),\n        //     size_subtitle: parseInt(model.get('fields.size_subtitle'), 10) || null,\n        //     size_title: parseInt(model.get('fields.size_title'), 10) || null,\n        //     size_kicker: parseInt(model.get('fields.size_kicker'), 10) || null\n        // }));\n        model.setFiltered('imageWidth', model.get('fields.imageWidth') || 100);\n\n        if (!isEditor) {\n            return;\n        }\n\n        model.setFiltered('sourcesConfig', sourcesConfig);\n    }\n\n}\n","export default class TextMultiline {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n\n        const textCentered = view.get('metadata.text_align') === 'center';\n        model.setFiltered('textCentered', textCentered);\n    }\n\n}\n","export default class Timeline {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        if (this.isEditor) {\n            this.api.v1.ns.set('timeline.insertItem', (model, view, menuItem, params) => {\n                this.addItem(model);\n            });\n        }\n    }\n\n    /**\n     * Helper-functions for timeline\n     */\n\n    addItem(model) {\n        const d = new Date();\n        const child = this.api.v1.model.create.view({\n            type: 'timelineItem',\n            contentdata: {\n                fields: {\n                    date: `${ (d.getHours() < 10 ? '0' : '') + d.getHours() }.${ (d.getMinutes() < 10 ? '0' : '') + d.getMinutes() }`\n                }\n            }\n        });\n        this.api.v1.model.prependChild(model, child);\n    }\n\n}\n","export default class Twitter {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    // Todo: Dette elementet funker nok ikke så bra for kunder utenfor Norge ...\n    onRender(model, view) {\n        const versions = {\n            tips: {\n                cssClass: 'tips_version',\n                title: 'Tips og innlegg',\n                text: 'Vi synes det er viktig med dine meninger',\n                buttons: {\n                    tips: 'Tips oss',\n                    debate: 'Send innlegg'\n                }\n            },\n            debate: {\n                cssClass: 'debate_version',\n                title: 'Har du noe på hjertet?',\n                text: 'Send oss et debattinnlegg, en kronikk eller en meningsytring. Alle innlegg signeres med fullt navn og tittel.',\n                buttons: {\n                    tips: null,\n                    debate: 'Send innlegg'\n                }\n            }\n        };\n        const emails = this.api.v1.config.get('contact.email') || {};\n        const persistent = {\n            tips: model.get('fields.email_tips'),\n            debate: model.get('fields.email_debate'),\n            version: model.get('fields.version')\n        };\n        if (persistent.tips) { emails.tips = persistent.tips; }\n        if (persistent.debate) { emails.debate = persistent.debate; }\n        model.setFiltered('content', persistent.version === 'tips' ? versions.tips : versions.debate);\n        model.setFiltered('version_is_tips', persistent.version === 'tips');\n        model.setFiltered('emails', emails);\n\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class Topcomments {\n\n    constructor(api) {\n        this.api = api;\n        this.domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n    }\n\n    onViewHelper(model, view) {\n        // Get 'domain' for Kilkaya. Used in external url.\n        model.setFiltered('domain', model.get('fields.domain') || this.domain.replace('https://', ''));\n    }\n\n    onRender(model, view) {\n        const placeholder = view.get('fields.placeholder');\n        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));\n        const externalData = view.get('external');\n\n        // This element uses external data. External data-boxes are run twice in Labrador. On second run we have external data:\n        if (!externalData) return;\n\n        const dateHandler = new DateTimeHelper(lab_api.v1.config.get('lang'));\n        const dateTemplate = this.api.v1.config.get('contentbox_settings.topcomments.dateTemplate');\n        const imgSize = {\n            width: 63,\n            height: 63\n        };\n        const imageServer = lab_api.v1.properties.get('image_server');\n        const mostRead = [];\n        const data = lab_api.v1.util.object.clone(externalData, true);\n        for (const item of data.mostRead || []) {\n            const publishedDate = new Date(item.fields.published);\n            if (item.fields.image) {\n                item.fields.image = item.fields.image.replace('http://', 'https://');\n                item.resizedImage = `${ item.fields.image  }&width=${ imgSize.width }&height=${ imgSize.height }`;\n            }\n            item.fields.readableDate = dateHandler.utcFormat(publishedDate, dateTemplate);\n            mostRead.push(item);\n        }\n        model.setFiltered('mostRead', mostRead);\n\n        const latest = [];\n        for (const item of data.latest || []) {\n            const publishedDate = new Date(item.published);\n            item.readableDate = dateHandler.utcFormat(publishedDate, dateTemplate);\n            if (item.extId) {\n                item.disqusId = item.extId.replace('khrono-', 'node/');\n            } else {\n                item.disqusId = item.id;\n            }\n            if (item.frontCropUrl) {\n                item.resizedImage = `${ imageServer  }/${  item.frontCropUrl  }&width=${  imgSize.width  }&height=${  imgSize.height }`;\n            }\n            latest.push(item);\n        }\n        model.setFiltered('latest', latest);\n\n        // Selected tab:\n        let selectedTab = model.get('fields.selectedTab') || 'latest';\n        if (lab_api.v1.viewport.getName() === 'mobile' && model.get('fields.hideResultOnMobile')) {\n            selectedTab = '';\n        }\n        const selectedTabs = {};\n        ['mostRead', 'topComments', 'latest'].forEach((tab) => {\n            selectedTabs[tab] = tab === selectedTab;\n        });\n        model.setFiltered('selectedTabs', selectedTabs);\n        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));\n\n    }\n\n}\n","import { DateTimeHelperInt } from '../../lib/helpers/datetime/DateTimeHelperInt.js';\n\nexport default class Toplist {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onViewHelper(model, view) {\n\n        // Get node-data used to set external url:\n        let domain = model.get('fields.domain') || this.api.v1.properties.get('site.domain');\n        domain = domain.replace(/^https?:\\/\\//, ''); // Remove protocol\n        const limit = model.get('fields.limit') || 5;\n        model.setFiltered('domain', domain);\n        model.setFiltered('limit', limit);\n    }\n\n    onRender(model, view) {\n        const placeholder = view.get('fields.placeholder');\n        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));\n        const externalData = view.get('external');\n        const displayImages = !!model.get('fields.displayImages');\n        const displayDate = !model.get('fields.hideDate');\n        const limit = model.get('fields.limit') || 5;\n        const domain = model.get('filtered.domain');\n\n        const getPlaceholderData = (count) => {\n            const result = [];\n            for (let i = 0; i < count; i++) {\n                result.push({\n                    fields: {\n                        cssClass: 'dac-placeholder-text',\n                        type: 'article'\n                    }\n                });\n            }\n            return { data: result };\n        };\n\n        const getImageUrl = (url) => {\n            if (!url) { return null; }\n            return (`${ url.replace(/^https?:\\/\\//, '//') }${ url.includes('?') ? '&' : '?' }width=200&height=140`);\n        };\n\n        const result = [];\n        const source = externalData && typeof (externalData) === 'object' ? externalData : getPlaceholderData(limit); // Use placeholder-data in edit-mode.\n        const dateHelper = new DateTimeHelperInt();\n\n        source.data.forEach((article) => {\n            if (article.fields.type === 'article') {\n                // Get date. Prio: modified-date.\n                const dateString = article.fields.published || null;\n                result.push({\n                    title: article.fields.title || '[no title]',\n                    url: article.fields.srcUrl,\n                    section: article.fields.section || '',\n                    pageviews: article.fields.pageviews,\n                    published: dateString,\n                    niceDate: displayDate && dateString ? dateHelper.timestampToNiceDate(\n                        dateHelper.toTimestamp(\n                            new Date(dateString)\n                        )\n                    ) : '',\n                    cssClass: article.fields.cssClass || null,\n                    imageUrl: displayImages ? getImageUrl(article.fields.image) : null\n                });\n            }\n        });\n        model.setFiltered('result', result);\n\n        /**\n         * Admin-view\n         */\n        if (!this.api.v1.app.mode.isEditor()) return;\n        const adminView = {\n            domains: [],\n            layout: []\n        };\n        this.api.v1.site.getSites().forEach((site) => {\n            if (!site.domain) return;\n            const currentDomain = site.domain.replace(/^https?:\\/\\//, '');\n            const current = {\n                name: site.display_name,\n                value: currentDomain,\n                selected: currentDomain === domain\n            };\n            adminView.domains.push(current);\n        });\n        for (const direction of ['horizontal', 'vertical']) {\n            adminView.layout.push({\n                name: direction,\n                value: direction,\n                selected: direction === view.get('fields.layout')\n            });\n        }\n        model.setFiltered('adminView', adminView);\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class Tvguide {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const tvArray = view.get('external.tv');\n        if (!tvArray || !tvArray.length) {\n            return;\n        }\n        const data = tvArray[0];\n        const dateHandler = new DateTimeHelper(lab_api.v1.config.get('lang'));\n\n        // Input date:\n        // 2021-06-01T00:00:00000+0000\n        // Note: '00000' must be replaced by '00.000' to create a js Date-object (new Date(2021-06-01T00:00:00.000+0000))\n        const dateFormatter = (dateString, format = 'd/m Y H:i') => {\n            const d = new Date(dateString);\n            return dateHandler.formattedUtcDate(d, format);\n        };\n\n        const formatDateString = (dateString) => dateString.replace('00000+', '00.000+');\n\n        const isDateBeforeToday = (date) => {\n            const newDate = new Date(date.toUTCString().split(' ').slice(0, 4).join(' '));\n            const currentDate = new Date(new Date().toUTCString().split(' ').slice(0, 4)\n                .join(' '));\n            return newDate < currentDate;\n        };\n\n        // Adjust for summertime\n        const summerTimeHandler = (date) => {\n            const isSummerTime = dateHandler.isSummerTime(date);\n            if (isSummerTime) {\n                return dateHandler.manipulateTime(date, 1);\n            }\n            return date;\n        };\n\n        // Get correct date, affedted by summertime\n        const getProgrammeDate = (dateString) => {\n            const d = new Date(dateString);\n            const date = `${  d.getUTCFullYear()  }${ (`0${  d.getUTCMonth() + 1 }`).slice(-2)  }${ (`0${  d.getUTCDate() }`).slice(-2) }`;\n            return date;\n        };\n\n        // Clean up data from integration-services:\n        const programme = data.programme.filter((item) => {\n            let d = new Date(formatDateString(item.start));\n            d = summerTimeHandler(d);\n\n            // Filter out programmes before current date\n            if (isDateBeforeToday(d)) {\n                return false;\n            }\n            return true;\n        }).map((item) => {\n            const d = summerTimeHandler(new Date(formatDateString(item.start))).toUTCString();\n            return {\n                start: dateFormatter(d, 'H:i'),     // 2021-06-01T00:00:00000+0000 -> 01/06 2021 00:00\n                // stop: item.stop,                 // 2021-06-01T01:00:00000+0000\n                icon: item.icon[0].src,             // https://d537y3nbkeq75.cloudfront.net/gbnews/epg/20210601000000-20210601010000-1069.jpg?width=1920&lang=en\n                title: item.title[0]._,\n                desc: item.desc[0]._,\n                date: getProgrammeDate(d)           // \"20210601\"\n            };\n        });\n\n        const groupedByDate = {};\n        for (const item of programme) {\n            if (!groupedByDate[item.date]) {\n                const d = dateHandler.parseDate(item.date);\n                groupedByDate[item.date] = {\n                    date: dateHandler.formattedDate(d, 'd/m Y'),\n                    items: []\n                };\n            }\n            groupedByDate[item.date].items.push(item);\n        }\n\n        model.setFiltered('tvguide', Object.values(groupedByDate));\n    }\n\n}\n","export default class Twitter {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onViewHelper(model, view) {\n        const lang = model.get('fields.lang') || lab_api.v1.config.get('lang') || 'no';\n        model.setFiltered('lang', lang);\n    }\n\n}\n","export default class UserFeedback {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onRender(model, view) {\n        const emails = this.api.v1.config.get('contact.email') || {};\n        const email = model.get('fields.email') || emails.tips || '';\n        const url = model.get('fields.url') || '';\n        model.setFiltered('email', email);\n        model.setFiltered('url', url);\n    }\n\n}\n","export default class Vimond {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onRender(model, view) {\n        // Display caption on article-pages:\n        let displayCaption = this.api.v1.model.root.getType() === 'page_article';\n        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption')) {\n            displayCaption = false;\n        }\n        model.setFiltered('displayCaption', displayCaption);\n\n        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {\n            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');\n            const vimondConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'vimond')[0];\n\n            if (vimondConsent) {\n                model.setFiltered('requiredCookieConsent', vimondConsent.requiredConsent || false);\n                model.setFiltered('insufficientConsentMessage', vimondConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');\n            }\n        }\n    }\n\n    onRendered(model, view) {\n        if (this.isEditor) {\n            // The iframe from remote production player captures events on the element of the iframe disabling drag/drop in the editor.\n            // Disable pointer-events when hovering the drag-handle.\n            const iframe = view.getMarkup().querySelector('iframe');\n            const dragHandle = view.getMarkup().querySelector('.video-drag-handle');\n            if (iframe && dragHandle) {\n                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);\n                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);\n            }\n        }\n    }\n\n}\n","export default class YouTube {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n    }\n\n    onRender(model, view) {\n\n        // Display caption on article-pages:\n        let displayCaption = this.api.v1.model.root.getType() === 'page_article';\n        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption') || (model.getParent() && model.getParent().get('fields.displayCaption') === false)) {\n            displayCaption = false;\n        }\n        model.setFiltered('displayCaption', displayCaption);\n\n        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {\n            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');\n            const youtubeConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'youtube')[0];\n\n            if (youtubeConsent) {\n                model.setFiltered('requiredCookieConsent', youtubeConsent.requiredConsent || false);\n                model.setFiltered('insufficientConsentMessage', youtubeConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');\n            }\n        }\n\n        const params = [];\n        const startPoint = model.get('fields.video_start');\n        const endPoint = model.get('fields.video_end');\n        if (startPoint) params.push(`start=${  Math.round(startPoint) }`);\n        if (endPoint) params.push(`end=${  Math.round(endPoint) }`);\n        if (!params.length) return;\n        model.setFiltered('startstop', `?${  params.join('&') }`);\n    }\n\n    onRendered(model, view) {\n        if (this.isEditor) {\n            // The iframe from youtube.com/embed captures events on the element of the iframe disabling drag/drop in the editor.\n            // Disable pointer-events when hovering the drag-handle.\n            const iframe = view.getMarkup().querySelector('iframe');\n            const dragHandle = view.getMarkup().querySelector('.youtube-drag-handle');\n            if (iframe && dragHandle) {\n                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);\n                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);\n            }\n        }\n    }\n\n}\n","export { default as page_article } from './page/Article.js';\nexport { default as page_front } from './page/Front.js';\nexport { default as page_notice } from './page/Notice.js';\n\nexport { default as adnuntiusAd } from './elements/AdnuntiusAd.js';\nexport { default as apsis_submit } from './elements/ApsisSubmit.js';\nexport { default as article } from './elements/Article.js';\nexport { default as articleCalendar } from './elements/ArticleCalendar.js';\nexport { default as articleFooter } from './elements/ArticleFooter.js';\nexport { default as articleHeader } from './elements/ArticleHeader.js';\nexport { default as articleList } from './elements/ArticleList.js';\nexport { default as articleMeta } from './elements/ArticleMeta.js';\nexport { default as articlesByTag } from './elements/ArticlesByTag.js';\nexport { default as articlescroller } from './elements/ArticleScroller.js';\nexport { default as bodytext } from './elements/Bodytext.js';\nexport { default as byline } from './elements/Byline.js';\nexport { default as changelog } from './elements/Changelog.js';\nexport { default as comments } from './elements/Comments.js';\nexport { default as factbox } from './elements/Factbox.js';\nexport { default as front_rows } from './elements/Front_rows.js';\nexport { default as frontContent } from './elements/FrontContent.js';\nexport { default as globalChangelog } from './elements/GlobalChangelog.js';\nexport { default as googleAd } from './elements/GoogleAd.js';\nexport { default as googleCSE } from './elements/GoogleCSE.js';\nexport { default as image } from './elements/Image.js';\nexport { default as graphic } from './elements/Graphic.js';\nexport { default as labradorSearch } from './elements/LabradorSearch.js';\nexport { default as markup } from './elements/Markup.js';\nexport { default as mobiltests } from './elements/Mobiltests.js';\nexport { default as motortests } from './elements/Motortests.js';\nexport { default as newsletter_submit } from './elements/Newsletter_submit.js';\nexport { default as parallax } from './elements/Parallax.js';\nexport { default as simplestream } from './elements/Simplestream.js';\nexport { default as slideshow } from './elements/Slideshow.js';\nexport { default as tablebox } from './elements/Tablebox.js';\nexport { default as tagboard } from './elements/Tagboard.js';\nexport { default as text_multiline } from './elements/TextMultiline.js';\nexport { default as tips_box } from './elements/Tips_box.js';\nexport { default as toplist } from './elements/Toplist.js';\nexport { default as tvguide } from './elements/Tvguide.js';\nexport { default as twitter } from './elements/Twitter.js';\nexport { default as userFeedback } from './elements/UserFeedback.js';\nexport { default as youtube } from './elements/YouTube.js';\nexport { default as jwplayer } from './elements/JWPlayer.js';\nexport { default as remoteproduction } from './elements/RemoteProduction.js';\nexport { default as topcomments } from './elements/Topcomments.js';\nexport { default as scrollbox } from './elements/Scrollbox.js';\nexport { default as row } from './elements/Row.js';\nexport { default as timeline } from './elements/Timeline.js';\nexport { default as notice } from './elements/Notice.js';\nexport { default as livefeed } from './elements/LiveFeed.js';\nexport { default as noticeHeader } from './elements/NoticeHeader.js';\nexport { default as chart } from './elements/Chart.js';\nexport { default as grid } from './elements/Grid.js';\nexport { default as vimond } from './elements/Vimond.js';\n","import { PageAPI } from '../../lib/api/PageAPI.js';\nimport { PageData } from '../../lib/PageData.js';\nimport { AutodataHelper } from '../../lib/helpers/AutodataHelper.js';\n\nexport default class Article {\n\n    constructor(api) {\n        this.api = api;\n        this.pageData = new PageData(this.api, new PageAPI(this.api));\n    }\n\n    onReady(model, view) {\n        this.pageData.set(model, view);\n\n        // Autodata\n        model.setFiltered('autodata_css', AutodataHelper.parseCss(model));\n        model.setFiltered('autodata_attributes', AutodataHelper.parseAttributes(model));\n        model.setFiltered('autodata_custom', AutodataHelper.parseCustomData(model));\n    }\n\n}\n","import { PageAPI } from '../../lib/api/PageAPI.js';\nimport { PageData } from '../../lib/PageData.js';\n\nexport default class Front {\n\n    constructor(api) {\n        this.api = api;\n        this.pageData = new PageData(this.api, new PageAPI(this.api));\n    }\n\n    onReady(model, view) {\n        this.pageData.set(model, view);\n    }\n\n}\n","import { PageAPI } from '../../lib/api/PageAPI.js';\nimport { PageData } from '../../lib/PageData.js';\nimport { DateTimeHelperInt } from '../../lib/helpers/datetime/DateTimeHelperInt.js';\n\nexport default class Article {\n\n    constructor(api) {\n        this.api = api;\n        this.pageData = new PageData(this.api, new PageAPI(this.api));\n        this.dateTimeHelper = new DateTimeHelperInt();\n    }\n\n    onReady(model, view) {\n        this.pageData.set(model, view);\n        const timestampModified = model.get('fields.modified');\n        const timestampPublished = model.get('fields.published');\n        const timestamp = timestampModified || timestampPublished;\n        if (timestamp != null) {\n            const date = new Date(timestamp * 1000);\n            model.setFiltered('niceDate', this.dateTimeHelper.timestampToNiceDate(timestamp));\n            model.setFiltered('publishedDate', this.dateTimeHelper.utcFormat(date, `${ this.api.v1.locale.get('dates.monthdayyear', { noRender: true }) } ${ this.api.v1.locale.get('dates.hourminute', { noRender: true }) }`));\n            model.setFiltered('isoDate', date.toISOString());\n            model.setFiltered('date', {\n                published: {\n                    isoDate: timestampPublished ? new Date(timestampPublished * 1000).toISOString() : null\n                },\n                modified: {\n                    isoDate: timestampModified ? new Date(timestampModified * 1000).toISOString() : null\n                }\n            });\n        }\n        model.setFiltered('tagPagePath', this.api.v1.config.get('tagPagePath') || '/tag/');\n\n        if (model.get('filtered.hasInsertedRelatedContent')) {\n            return;\n        }\n\n        const tags = model.get('tags') || [];\n\n        const label = this.api.v1.locale.get('notice.relatedContent.header');\n        const labelElement = {\n            type: 'text_singleline',\n            contentdata: {\n                fields: {\n                    text: label,\n                    elementType: 'h2'\n                }\n            }\n        };\n\n        this.api.v1.model.insert.atPath({\n            path: 'dropZone/',\n            data: {\n                type: 'row',\n                metadata: {\n                    spaceOutsideTop: 'large',\n                    spaceOutsideBottom: 'medium'\n                    // hasRowTitle: true,\n                    // rowTitle: 'Related'\n                },\n                children: [labelElement, {\n                    type: 'livefeed',\n                    contentdata: {\n                        id: 122, // Note: Element needs an ID to properly render script nessesary for swipe functionality.\n                        fields: {\n                            tags: tags.join(','),\n                            maxNoticesCount: 20\n                        }\n                    },\n                    metadata: {\n                        blacklist: [model.get('id')]\n                    },\n                    width: 66.66\n                }, {\n                    type: 'frontContent',\n                    contentdata: {\n                        fields: {\n                            organizer: 'RowsAndColumns',\n                            source: 'lab-api-site',\n                            tags_allow: true,\n                            tags_useOr: true,\n                            tags_string: tags.join(','),\n                            hide_kicker: true,\n                            hide_subtitle: true,\n                            layout_rowCount: '20',\n                            layout_columnCount: '1',\n                            size_active: true,\n                            size_title: 24\n                        }\n                    },\n                    width: 33.33\n                }],\n                state: {\n                    isNonPersistent: true\n                }\n            }\n            // options: {\n            //     index: 0\n            // }\n        });\n\n        model.setFiltered('hasInsertedRelatedContent', true);\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onCreated(uiInterface, options) {\n        uiInterface.setProperty('query', {\n            start: 0,\n            limit: 24,\n            q: ''\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/articleTeasers/header', {}, true);\n        const query = uiInterface.getProperty('query');\n        const formHandler = (event) => {\n            const formData = this.api.v1.util.dom.serializeForm(form);\n            query.q = formData.text || '';\n            this.resetPager(uiInterface);\n            uiInterface.getData();\n        };\n        for (const formEl of [...form.querySelectorAll('input, select')]) {\n            formEl.addEventListener('change', formHandler, false);\n        }\n        const addBtn = form.querySelector('[name=\"add\"]');\n        if (this.api.v1.user.hasPermission('edit_article')) {\n            addBtn.addEventListener('click', (event) => {\n                this.editTeaser(uiInterface);\n            }, false);\n        } else {\n            addBtn.setAttribute('disabled', 'disabled');\n        }\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n        }, false);\n\n        return form;\n    }\n\n    onFooter(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/footer', {}, true);\n        uiInterface.setDomElement('prevPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('prevPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const args = [\n            `q=${ query.q }`,\n            `start=${ query.start }`,\n            `limit=${ query.limit }`\n        ];\n        return `/ajax/article/get-teasers?${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, serverData) {\n        const labData = [];\n        const ignoreUnpublished = uiInterface.getProperty('ignoreUnpublished');\n\n        // Create an empty article:\n        labData.push(this.articleData({\n            filtered: {\n                title: 'Empty teaser'\n            }\n        }));\n\n        for (const data of serverData.data) {\n            const article = this.articleData(data);\n            if (!ignoreUnpublished || article.fields.published_url) {\n                labData.push(article);\n            }\n        }\n\n        this.updatePageNumber(uiInterface);\n        return labData;\n    }\n\n    onRendered(uiInterface, contentList) {\n        if (!this.api.v1.user.hasPermission('edit_article')) { return; }\n        for (const item of contentList) {\n            const id = item.model.get('instance_of');\n            if (id) {\n                this.addEditLink(uiInterface, id, item.element);\n            }\n        }\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: 'filtered.title',\n                content: null\n            },\n            description: {\n                path: 'filtered.subtitle',\n                content: null\n            }\n        };\n    }\n\n    addEditLink(uiInterface, id, element) {\n        const el = document.createElement('div');\n        el.setAttribute('title', 'Edit Teaser');\n        el.classList.add('notes-info', 'labicon-startEdit');\n        el.addEventListener('click', (event) => {\n            this.editTeaser(uiInterface, id);\n        }, false);\n        element.querySelector('.lab-inner').prepend(el);\n    }\n\n    // If id: Update. If no id: Create\n    editTeaser(uiInterface, id) {\n        this.api.v1.apps.start('TeaserEditor', {\n            id,\n            endcallback: (createdId) => {\n                uiInterface.getData(true);\n            }\n        });\n    }\n\n    navigate(uiInterface, forward) {\n        const query = uiInterface.getProperty('query');\n        if (forward) {\n            query.start += query.limit;\n        } else {\n            query.start -= query.limit;\n            if (query.start < 0) {\n                query.start = 0;\n            }\n        }\n        uiInterface.getData();\n    }\n\n    updatePageNumber(uiInterface) {\n        const pageNumber = this.getPageNumber(uiInterface);\n        const el = uiInterface.getDomElement('pageCounterElement');\n        el.innerHTML = pageNumber;\n        if (pageNumber < 2) {\n            uiInterface.getDomElement('prevPageElement').setAttribute('disabled', 'disabled');\n        } else {\n            uiInterface.getDomElement('prevPageElement').removeAttribute('disabled');\n        }\n    }\n\n    getPageNumber(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        return Math.ceil(query.start / query.limit) + 1;\n    }\n\n    // (object) Create data for an article-element\n    articleData(inputData) {\n        const childrenData = [];\n        const children = inputData.children || [];\n        const filtered = inputData.filtered || {};\n        if (children.length && children[0].type === 'image') {\n            childrenData.push({\n                type: 'image',\n                contentdata: {\n                    instance_of: children[0].instance_of,\n                    fields: this.api.v1.view.helpers.image.getImageProperties({ crop: { pano: children[0].fields } })\n                },\n                children: []\n            });\n        }\n        const fields = inputData.fields || {};\n        const title = fields.title || '';\n        const subtitle = fields.subtitle || '';\n        return {\n            type: 'article',\n            contentdata: {\n                instance_of: inputData.id ? parseInt(inputData.id, 10) : null,\n                fields: {\n                    title,\n                    subtitle,\n                    published_url: fields.published_url\n                }\n            },\n            filtered: {\n                title: filtered.title || (title || '[No title]'),\n                subtitle: filtered.subtitle || (subtitle || '[No subtitle]')\n            },\n            children: childrenData\n        };\n    }\n\n    resetPager(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        query.start = 0;\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n        this.rootModel = this.api.v1.model.query.getRootModel();\n        this.pageAutomaticMode = [true, 'true', '1', 1].includes(this.rootModel.get('fields.automatic'));\n    }\n\n    onGetData(uiInterface, options) {\n        const feeds = this.api.v1.config.get('feeds') || {};\n        const imageId = 1018;\n        const icon = `https://publishlab.com/pbl2.jpg?v=${ imageId }`;\n        const result = Object.keys(feeds).filter((key) => (!(!this.pageAutomaticMode && feeds[key].auto_only === true))).map((key) => ({\n            type: 'article',\n            contentdata: {\n                fields: {\n                    title: `Article from feed`,\n                    subtitle: `<em>${ feeds[key].display_name }</em>`,\n                    feedId: key,\n                    isAutomatic: true\n                }\n            },\n            children: [{\n                type: 'image',\n                contentdata: {\n                    fields: {\n                        external_id: `lab_head_${ imageId }`,\n                        imageurl: icon,\n                        source: '_articlefeed'\n                    }\n                }\n            }]\n        }));\n\n        if (this.pageAutomaticMode) {\n            result.unshift({\n                type: 'article',\n                contentdata: {\n                    fields: {\n                        title: `Labrador Tag Feed`,\n                        subtitle: 'Automatic article from <em>Labrador Tag Feed</em>',\n                        feedId: '_tag',\n                        isAutomatic: true\n                    }\n                },\n                children: [{\n                    type: 'image',\n                    contentdata: {\n                        fields: {\n                            external_id: `lab_head_${ imageId }`,\n                            imageurl: icon,\n                            source: '_articlefeed'\n                        }\n                    }\n                }]\n            });\n        }\n        return result;\n    }\n\n    onProperties(uiInterface) {\n        return {\n            css: 'autoarticles'\n        };\n    }\n\n}\n","import { DateTimeHelper } from '../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class {\n\n    constructor(api) {\n        this.api = api;\n        // Site-config may specify paths to include in new article-teasers\n        this.customFields = lab_api.v1.config.get('customAdapterFields.article') || [];\n        this.dateTimeHelper = new DateTimeHelper(this.api.v1.config.get('lang') || undefined);\n        this.updateInterval = 30000; // Milliseconds, 10000 = 10 seconds\n    }\n\n    onProperties() {\n        return {\n            autoRefresh: 60\n        };\n    }\n\n    onCreated(uiInterface, options) {\n        const siteId = this.api.v1.eventmonitor.reader.getUiSelection('articles_latest_site_id');\n        if (options.externalContentUpdater === true && options.updateContents) {\n            this.updateContents = options.updateContents;\n        }\n        uiInterface.setProperty('query', {\n            start: 0,\n            limit: 24,\n            orderBy: 'published',\n            api: {\n                section: this.api.v1.eventmonitor.reader.getUiSelection(siteId ? `section_site_${ siteId }` : 'section'),\n                id: null,\n                tag: null,\n                fromDate: null,\n                toDate: null,\n                text: null,\n                onlyMine: this.api.v1.eventmonitor.reader.getUiSelection('article_list_only_mine') || false,\n                onlyPaywall: this.api.v1.eventmonitor.reader.getUiSelection('article_list_only_paywall') || false\n            },\n            site_id: siteId\n        });\n\n        if (options.click) {\n            uiInterface.setProperty('itemClickCallback', options.click);\n        }\n        if (options.end) {\n            uiInterface.setProperty('endCallback', options.end);\n        }\n        if (options.display) {\n            uiInterface.setProperty('displayCallback', options.display);\n        }\n\n        if (options.updateContent) {\n            uiInterface.setProperty('updateContentCallback', options.updateContent);\n        }\n\n        if (options.ignoreUnpublished) {\n            // Do not draw articles without published url.\n            uiInterface.setProperty('ignoreUnpublished', true);\n        }\n        this.api.v1.app.on('pageVisibilityChange', ({ isVisible }) => {\n            if (isVisible) {\n                if (uiInterface.getProperty('collectionIsVisible')) {\n                    this.startUpdateInterval(uiInterface);\n                }\n            } else {\n                this.endUpdateInterval(uiInterface);\n            }\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/header', {}, true);\n        const query = uiInterface.getProperty('query');\n\n        const formHandler = (event) => {\n            const formData = this.api.v1.util.dom.serializeForm(form);\n            query.api.id = (formData.id || '').trim();\n            query.api.section = (formData.section || '').trim().toLowerCase();\n            query.api.tag = (formData.tag || '').trim();\n            query.api.fromDate = (formData.fromDate ? new Date(formData.fromDate.trim()) : '');\n            query.api.toDate = (formData.toDate ? new Date(formData.toDate.trim()) : '');\n            query.api.text = (formData.text || '').trim();\n            query.api.onlyMine = !!formData.article_list_only_mine;\n            query.api.onlyPaywall = !!formData.article_list_only_paywall;\n            query.site_id = (formData.articles_latest_site_id || '').trim();\n            this.resetPager(uiInterface);\n            uiInterface.getData();\n        };\n\n        const updateSections = (siteId) => {\n            // Create a select-element containig available sections.\n            // The preferred section for user will be selected and stored when changed.\n            const container = form.querySelector('.section-container');\n            container.innerHTML = '';\n            const selectEl = this.api.v1.ui.element.getSectionSelector({\n                attributes: [{\n                    name: 'name',\n                    value: 'section'\n                }],\n                siteId: siteId ? parseInt(siteId, 10) : null,\n                label: 'All sections',\n                events: [{\n                    name: 'change',\n                    callback: formHandler\n                }]\n            });\n            container.appendChild(selectEl);\n            query.api.section = selectEl.value;\n        };\n\n        // Create a select-element containig available sites.\n        // The preferred site for user will be selected and stored when changed.\n        const siteSelectEl = this.api.v1.ui.element.getSiteSelector({\n            attributes: [{\n                name: 'name',\n                value: 'articles_latest_site_id'\n            }],\n            value: query.site_id,\n            events: [{\n                name: 'change',\n                callback: (event) => {\n                    updateSections(event.target.value);\n                }\n            }],\n            label: 'All sites',\n            requireSitePermission: true\n        });\n\n        query.site_id = siteSelectEl.value ? parseInt(siteSelectEl.value, 10) : '';\n        form.querySelector('.site-container').appendChild(siteSelectEl);\n\n        updateSections(query.site_id);\n\n        // Create a checkbox to toggle displaying articles from current user only.\n        // The preferred state for user will be selected and stored when changed.\n        form.querySelector('.article_list_only_mine-container').appendChild(this.api.v1.ui.element.getCheckboxElement({\n            name: 'article_list_only_mine',\n            label: 'Only mine'\n        }));\n\n        // Create a checkbox to toggle displaying articles from only paywall.\n        // The preferred state for user will be selected and stored when changed.\n        form.querySelector('.article_list_only_paywall-container').appendChild(this.api.v1.ui.element.getCheckboxElement({\n            name: 'article_list_only_paywall',\n            label: 'Only paywall'\n        }));\n\n        for (const formEl of [...form.querySelectorAll('input, select')]) {\n            formEl.addEventListener('input', formHandler, false);\n        }\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n        }, false);\n        const toggleEl = form.querySelector('a');\n        const expandableEl = form.querySelector('.expanded');\n        if (toggleEl && expandableEl) {\n            toggleEl.addEventListener('click', (event) => {\n                event.preventDefault();\n                expandableEl.classList.toggle('lab-hidden');\n            }, false);\n        }\n\n        form.querySelector('.size-container').appendChild(this.api.v1.ui.element.getSizeElements({\n            name: 'article_list_preferred_size',\n            btnSize: 'lab-small',\n            css: 'lab-grid lab-autogrid lab-btn-group',\n            sizes: ['small', 'medium', 'large'],\n            callback: (preferredSize) => {\n                uiInterface.setProperty('size', preferredSize);\n                uiInterface.requestSize(preferredSize);\n            }\n        }));\n\n        const preferredSize = this.api.v1.eventmonitor.reader.getUiSelection('article_list_preferred_size');\n        if (preferredSize) {\n            uiInterface.setProperty('size', preferredSize);\n            uiInterface.requestSize(preferredSize);\n        }\n\n        return form;\n    }\n\n    onFooter(uiInterface, options) {\n        /**\n         * Show a footer with buttons to navigate between pages.\n         * Optional callback to 'updateContentCallback' can be used to update the footer.\n         * @param {Object} uiInterface - The interface object used to update the UI.\n         * @param {Object} options - Options for the footer.\n         */\n        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/footer', {}, true);\n\n        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n\n        if (this.updateContents && this.updateContents.footer && this.updateContents.footer === true) {\n            const updateContentCallback = uiInterface.getProperty('updateContentCallback');\n            return updateContentCallback(form, { type: 'footer' });\n        }\n\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const args = [\n            `query=${ this.buildApiQueryString(uiInterface) }`,\n            `orderBy=${ query.orderBy }`,\n            `start=${ query.start }`,\n            `site_id=(${ query.site_id || this.api.v1.user.getSites().map((site) => site.id).join(' OR ') })`,\n            `limit=${ query.limit }`,\n            `htmlText=1`\n        ];\n        return `/api/v1/article/?${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, data, options) {\n        const labData = [];\n        const serverData = data && data.result && Array.isArray(data.result) ? data : [];\n        const notes = {};\n        const ignoreUnpublished = uiInterface.getProperty('ignoreUnpublished');\n\n        // Create an empty article:\n        if (!ignoreUnpublished) {\n            labData.push(this.articleData({\n                filtered: {\n                    title: 'Empty article'\n                }\n            }));\n        }\n\n        for (const item of serverData.result) {\n            const article = this.articleData(item);\n            if (!ignoreUnpublished || article.fields.published_url) {\n                labData.push(article);\n            }\n            const note = item.hasNotes.trim();\n            if (note) {\n                notes[item.id] = note;\n            }\n        }\n\n        uiInterface.setProperty('notes', notes);\n        this.updatePageNumber(uiInterface);\n\n        return labData;\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: 'filtered.title',\n                content: null\n            },\n            description: {\n                path: 'filtered.subtitle',\n                content: null\n            }\n        };\n    }\n\n    onRendered(uiInterface, contentList) {\n        const notes = uiInterface.getProperty('notes');\n        uiInterface.setProperty('contentList', contentList);\n        this.markExisting(uiInterface);\n        if (uiInterface.getProperty('size') === 'large') {\n            this.displayPublishDates(uiInterface, contentList);\n        }\n        if (!Object.keys(notes).length) { return; }\n        for (const item of contentList) {\n            const id = item.model.get('instance_of');\n            if (notes[id]) {\n                this.addNote(item, notes[id]);\n            }\n        }\n    }\n\n    onChildAdded(uiInterface, model, element) {\n\n        const itemClickCallback = uiInterface.getProperty('itemClickCallback');\n        if (itemClickCallback) {\n            element.addEventListener('click', (event) => {\n                itemClickCallback(uiInterface, model, element, event);\n                this.markExisting(uiInterface);\n\n            }, false);\n        }\n    }\n\n    onDisplayed(uiInterface, options) {\n        this.startUpdateInterval(uiInterface);\n        uiInterface.setProperty('collectionIsVisible', true);\n        this.api.v1.model.on('childAdded', this.getArticleListener(uiInterface));\n        this.api.v1.model.on('childRemoved', this.getArticleListener(uiInterface));\n\n        this.markExisting(uiInterface);\n\n    }\n\n    onHidden(uiInterface) {\n        this.endUpdateInterval(uiInterface);\n        uiInterface.setProperty('collectionIsVisible', false);\n        this.api.v1.model.off('childAdded', this.getArticleListener(uiInterface));\n        this.api.v1.model.off('childRemoved', this.getArticleListener(uiInterface));\n        const endCallback = uiInterface.getProperty('endCallback');\n        if (endCallback) {\n            endCallback(uiInterface);\n        }\n    }\n\n    navigate(uiInterface, forward) {\n        this.endUpdateInterval(uiInterface);\n        const query = uiInterface.getProperty('query');\n        if (forward) {\n            query.start += query.limit;\n        } else {\n            query.start -= query.limit;\n            if (query.start < 0) {\n                query.start = 0;\n            }\n        }\n        uiInterface.getData();\n    }\n\n    updatePageNumber(uiInterface) {\n        const pageNumber = this.getPageNumber(uiInterface);\n        const el = uiInterface.getDomElement('pageCounterElement');\n        el.innerHTML = pageNumber;\n        if (pageNumber < 2) {\n            uiInterface.getDomElement('previewPageElement').setAttribute('disabled', 'disabled');\n        } else {\n            uiInterface.getDomElement('previewPageElement').removeAttribute('disabled');\n        }\n    }\n\n    getPageNumber(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        return Math.ceil(query.start / query.limit) + 1;\n    }\n\n    // (string) Build \"query\" for Labrador API v1.\n    buildApiQueryString(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const params = [];\n        if (query.api.id) {\n            const idArray = query.api.id.split(/[\\s,]+/).map((id) => this.trimInputText(id)).filter((id) => id);\n            if (idArray.length) {\n                params.push(`(id:(${ idArray.join(' OR ') }))`);\n            }\n        }\n        if (query.api.section) params.push(`(section:(\"${ query.api.section }\"))`);\n        if (query.api.tag) params.push(`(tag:(\"${ this.trimInputText(query.api.tag) }\"))`);\n        if (query.api.text) {\n            params.push(`${ this.trimInputText(query.api.text) }*`);\n        }\n        if (query.api.onlyMine) {\n            params.push('(has_published:me%20OR%20created_by:me)');\n        }\n        if (query.api.onlyPaywall) {\n            params.push('(paywall:1)');\n        }\n        params.push('visibility_status:P');\n\n        const from = query.api.fromDate ? query.api.fromDate.toISOString() : '*';\n        const to = query.api.toDate ? query.api.toDate.toISOString() : 'NOW';\n        params.push(`published:[${ from } ${ to }]`);\n\n        const result = params.join(' AND ');\n        return result;\n    }\n\n    trimInputText(txt = '') {\n        return txt.trim().replace(/\"/g, '');\n    }\n\n    // (object) Create data for an article-element\n    articleData(inputData) {\n        const childrenData = [];\n        const filtered = inputData.filtered || {};\n        if (inputData.image) {\n            childrenData.push({\n                type: 'image',\n                contentdata: {\n                    instance_of: inputData.image,\n                    fields: this.api.v1.view.helpers.image.getImageProperties(inputData)\n                },\n                children: []\n            });\n        }\n\n        const bylines = (inputData.full_bylines || []).map((byline) => ({\n            firstname: byline.firstname,\n            lastname: byline.lastname,\n            description: byline.description,\n            description2: byline.description2,\n            public_email: byline.public_email,\n            public_phone: byline.public_phone,\n            public_url: byline.public_url,\n            imageUrl: byline.imageUrl\n        }));\n\n        const title = inputData.teaserTitle || inputData.title || '';\n        const subtitle = inputData.teaserSubtitle || inputData.subtitle || '';\n        const kicker = inputData.teaserKicker || inputData.kicker || '';\n        const articleData = {\n            type: inputData.type ? inputData.type : 'article',\n            contentdata: {\n                instance_of: inputData.id ? parseInt(inputData.id, 10) : null,\n                tags: inputData.tags ? inputData.tags.split(', ') : [],\n                fields: {\n                    full_bylines_json: bylines,\n                    title,\n                    subtitle,\n                    kicker,\n                    seolanguage: inputData.seolanguage,\n                    audio: inputData.teaserAudio,\n                    audioInfo: inputData.teaserAudio_style_json,\n                    addRelNoFollow: inputData.addRelNoFollow,\n                    addRelSponsored: inputData.addRelSponsored,\n                    addRelUgc: inputData.addRelUgc,\n                    published_url: inputData.published_url,\n                    published: inputData.published,\n                    showcomments: inputData.showcomments,\n                    paywall: inputData.paywall,\n                    displayByline: inputData.showbylineonfp,\n                    section: inputData.section_tag,\n                    hideAds: inputData.hideAds,\n                    site_id: inputData.site_id || null,\n                    site_alias: (this.api.v1.site.getSiteById(inputData.site_id) || {}).alias\n                }\n            },\n            filtered: {\n                title: filtered.title || (title || '[No title]'),\n                subtitle: filtered.subtitle || (subtitle || '[No subtitle]')\n            },\n            children: childrenData\n        };\n        for (const field of this.customFields) {\n            if (inputData[field] !== undefined) {\n                Sys.logger.debug(`Collection: Will add custom field \"${ field }\".`);\n                articleData.contentdata.fields[field] = inputData[field];\n            }\n        }\n        return articleData;\n    }\n\n    resetPager(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        query.start = 0;\n    }\n\n    addNote(item, note) {\n        const el = document.createElement('div');\n        el.setAttribute('title', 'Display notes');\n        el.classList.add('notes-info', 'labicon-notes');\n        el.addEventListener('click', (event) => {\n            this.displayNote(item, note);\n        }, false);\n        item.element.querySelector('.lab-inner').prepend(el);\n    }\n\n    displayNote(item, note) {\n        const lines = note.split('\\n').filter((line) => !!line).map((line) => `<p class=\"lab-para\">${ line }</p>`);\n        this.api.v1.ui.modal.dialog({\n            content: {\n                title: `Notes for \"${ item.model.get('fields.title') }\"`,\n                markup: lines.join('')\n            }\n        });\n    }\n\n    getArticleListener(uiInterface) {\n        if (!uiInterface.getProperty('articleListener')) {\n            const listener = (params) => {\n                if (params.childModel.getType() === 'article') {\n                    this.markExisting(uiInterface);\n                }\n            };\n            uiInterface.setProperty('articleListener', listener);\n        }\n        return uiInterface.getProperty('articleListener');\n    }\n\n    markExisting(uiInterface) {\n\n        const existing = this.api.v1.model.query.getModelsByType('article');\n        const contentList = uiInterface.getProperty('contentList') || [];\n        for (let item of contentList) {\n            const id = item.model.get('instance_of');\n            if (id) {\n                if (this.hasId(id, existing)) {\n                    item.element.classList.add('lab-highlight-item');\n                    item.element.setAttribute('title', 'Article used on current page');\n                } else {\n                    item.element.classList.remove('lab-highlight-item');\n                    item.element.setAttribute('title', '');\n                }\n\n                if (this.updateContents && this.updateContents.markExisting) {\n                    const updateContentCallback = uiInterface.getProperty('updateContentCallback');\n                    const params = {\n                        type: 'markExisting',\n                        id\n                    };\n                    item = updateContentCallback(item, params);\n                }\n            }\n        }\n    }\n\n    hasId(id, list) {\n        for (const model of list) {\n            if (id === model.get('instance_of')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    displayPublishDates(uiInterface, contentList) {\n        for (const item of contentList) {\n            const dateString = item.model.get('fields.published');\n            if (dateString) {\n                const el = document.createElement('p');\n                el.classList.add('article-publish-date', 'lab-offstage-description', 'labicon-time');\n                el.innerHTML = this.formatDate(dateString);\n                const id = item.model.get('instance_of');\n                if (id) {\n                    el.innerHTML += ` <a href=\"/edit/article/id/${ id }\" target=\"_blank\" class=\"lab-btn lab-small\">Edit</a>`;\n                }\n                item.element.querySelector('.lab-inner').appendChild(el);\n            }\n        }\n    }\n\n    formatDate(isoDateString) {\n        if (!isoDateString) {\n            return '';\n        }\n        const date = new Date(isoDateString);\n        return this.dateTimeHelper.format(date, `${ this.dateTimeHelper.str('monthdayyear') } ${ this.dateTimeHelper.str('hourminute') }`);\n    }\n\n    /**\n     * Starts an interval to update the UI with new data.\n     * @param {Object} uiInterface - The interface object used to update the UI.\n     */\n    startUpdateInterval(uiInterface) {\n        uiInterface.setProperty('updateIntervalId', window.setInterval(() => {\n            uiInterface.getData(true, { isSilent: true });\n        }, this.updateInterval));\n    }\n\n    /**\n     * Stops the update interval for the UI interface.\n     * @param {Object} uiInterface - The UI interface object.\n     */\n    endUpdateInterval(uiInterface) {\n        window.clearInterval(uiInterface.getProperty('updateIntervalId'));\n    }\n\n}\n","import { DateTimeHelper } from '../lib/helpers/datetime/DateTimeHelper.js';\n\nexport default class {\n\n    constructor(api) {\n        this.api = api;\n        this.dateTimeHelper = new DateTimeHelper(this.api.v1.config.get('lang') || undefined);\n        this.updateInterval = 30000; // Milliseconds, 10000 = 10 seconds\n    }\n\n    onProperties() {\n        return {\n            autoRefresh: 60\n        };\n    }\n\n    onCreated(uiInterface, options) {\n        const siteId = this.api.v1.eventmonitor.reader.getUiSelection('articles_latest_site_id');\n        if (options.externalContentUpdater === true && options.updateContents) {\n            this.updateContents = options.updateContents;\n        }\n        uiInterface.setProperty('query', {\n            start: 0,\n            limit: 24,\n            orderBy: 'published',\n            api: {\n                id: null,\n                tag: null,\n                text: null,\n                onlyMine: this.api.v1.eventmonitor.reader.getUiSelection('article_list_only_mine') || false\n            },\n            site_id: siteId\n        });\n\n        if (options.click) {\n            uiInterface.setProperty('itemClickCallback', options.click);\n        }\n        if (options.end) {\n            uiInterface.setProperty('endCallback', options.end);\n        }\n        if (options.display) {\n            uiInterface.setProperty('displayCallback', options.display);\n        }\n        if (options.updateContent) {\n            uiInterface.setProperty('updateContentCallback', options.updateContent);\n        }\n\n        this.api.v1.app.on('pageVisibilityChange', ({ isVisible }) => {\n            if (isVisible) {\n                if (uiInterface.getProperty('collectionIsVisible')) {\n                    this.startUpdateInterval(uiInterface);\n                }\n            } else {\n                this.endUpdateInterval(uiInterface);\n            }\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/articlesNotice/header', {}, true);\n        const query = uiInterface.getProperty('query');\n\n        const formHandler = (event) => {\n            const formData = this.api.v1.util.dom.serializeForm(form);\n            query.api.id = (formData.id || '').trim();\n            query.api.tag = (formData.tag || '').trim();\n            query.api.text = (formData.text || '').trim();\n            query.api.onlyMine = !!formData.article_list_only_mine;\n            query.site_id = (formData.articles_latest_site_id || '').trim();\n            this.resetPager(uiInterface);\n            uiInterface.getData();\n        };\n\n        // Create a select-element containig available sites.\n        // The preferred site for user will be selected and stored when changed.\n        const siteSelectEl = this.api.v1.ui.element.getSiteSelector({\n            attributes: [{\n                name: 'name',\n                value: 'articles_latest_site_id'\n            }],\n            value: query.site_id,\n            label: 'All sites'\n        });\n\n        query.site_id = siteSelectEl.value ? parseInt(siteSelectEl.value, 10) : '';\n        form.querySelector('.site-container').appendChild(siteSelectEl);\n\n        // Create a checkbox to toggle displaying articles from current user only.\n        // The preferred state for user will be selected and stored when changed.\n        form.querySelector('.article_list_only_mine-container').appendChild(this.api.v1.ui.element.getCheckboxElement({\n            name: 'article_list_only_mine',\n            label: 'Only mine'\n        }));\n\n        for (const formEl of [...form.querySelectorAll('input, select')]) {\n            formEl.addEventListener('input', formHandler, false);\n        }\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n        }, false);\n        const toggleEl = form.querySelector('a');\n        const expandableEl = form.querySelector('.expanded');\n        if (toggleEl && expandableEl) {\n            toggleEl.addEventListener('click', (event) => {\n                event.preventDefault();\n                expandableEl.classList.toggle('lab-hidden');\n            }, false);\n        }\n\n        form.querySelector('.size-container').appendChild(this.api.v1.ui.element.getSizeElements({\n            name: 'notice_list_preferred_size',\n            btnSize: 'lab-small',\n            css: 'lab-grid lab-autogrid lab-btn-group',\n            sizes: ['small', 'medium', 'large'],\n            callback: (preferredSize) => {\n                uiInterface.setProperty('size', preferredSize);\n                uiInterface.requestSize(preferredSize);\n            }\n        }));\n\n        form.querySelector('.newNoticeBtn').addEventListener('click', this.api.v1.notice.ui.create);\n\n        const preferredSize = this.api.v1.eventmonitor.reader.getUiSelection('notice_list_preferred_size');\n        if (preferredSize) {\n            uiInterface.setProperty('size', preferredSize);\n            uiInterface.requestSize(preferredSize);\n        }\n\n        return form;\n    }\n\n    onFooter(uiInterface, options) {\n        /**\n         * Show a footer with buttons to navigate between pages.\n         * Optional callback to 'updateContentCallback' can be used to update the footer.\n         * @param {Object} uiInterface - The interface object used to update the UI.\n         * @param {Object} options - Options for the footer.\n         */\n        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/footer', {}, true);\n\n        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n\n        if (this.updateContents && this.updateContents.footer && this.updateContents.footer === true) {\n            const updateContentCallback = uiInterface.getProperty('updateContentCallback');\n            return updateContentCallback(form, { type: 'footer' });\n        }\n\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const args = [\n            `query=${ this.buildApiQueryString(uiInterface) }`,\n            `orderBy=${ query.orderBy }`,\n            `start=${ query.start }`,\n            `site_id=${ query.site_id }`,\n            `limit=${ query.limit }`,\n            `htmlText=1`\n        ];\n        return `/api/v1/notice/?content=full&${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, data, options) {\n        const labData = [];\n        const serverData = data && data.result && Array.isArray(data.result) ? data : [];\n        for (const item of serverData.result) {\n            const article = this.articleData(item);\n            labData.push(article);\n        }\n        this.updatePageNumber(uiInterface);\n        return labData;\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: 'filtered.title',\n                content: null\n            },\n            description: {\n                path: 'filtered.subtitle',\n                content: null\n            }\n        };\n    }\n\n    onRendered(uiInterface, contentList) {\n        uiInterface.setProperty('contentList', contentList);\n        this.markExisting(uiInterface);\n        if (uiInterface.getProperty('size') === 'large') {\n            this.displayPublishDates(uiInterface, contentList);\n        }\n    }\n\n    onChildAdded(uiInterface, model, element) {\n        const itemClickCallback = uiInterface.getProperty('itemClickCallback');\n        if (itemClickCallback) {\n            element.addEventListener('click', (event) => {\n                itemClickCallback(uiInterface, model, element, event);\n                this.markExisting(uiInterface);\n            }, false);\n        }\n    }\n\n    onDisplayed(uiInterface, options) {\n        this.startUpdateInterval(uiInterface);\n        uiInterface.setProperty('collectionIsVisible', true);\n        this.api.v1.model.on('childAdded', this.getArticleListener(uiInterface));\n        this.api.v1.model.on('childRemoved', this.getArticleListener(uiInterface));\n        this.markExisting(uiInterface);\n    }\n\n    onHidden(uiInterface) {\n        this.endUpdateInterval(uiInterface);\n        uiInterface.setProperty('collectionIsVisible', false);\n        this.api.v1.model.off('childAdded', this.getArticleListener(uiInterface));\n        this.api.v1.model.off('childRemoved', this.getArticleListener(uiInterface));\n        const endCallback = uiInterface.getProperty('endCallback');\n        if (endCallback) {\n            endCallback(uiInterface);\n        }\n    }\n\n    navigate(uiInterface, forward) {\n        this.endUpdateInterval(uiInterface);\n        const query = uiInterface.getProperty('query');\n        if (forward) {\n            query.start += query.limit;\n        } else {\n            query.start -= query.limit;\n            if (query.start < 0) {\n                query.start = 0;\n            }\n        }\n        uiInterface.getData();\n    }\n\n    updatePageNumber(uiInterface) {\n        const pageNumber = this.getPageNumber(uiInterface);\n        const el = uiInterface.getDomElement('pageCounterElement');\n        el.innerHTML = pageNumber;\n        if (pageNumber < 2) {\n            uiInterface.getDomElement('previewPageElement').setAttribute('disabled', 'disabled');\n        } else {\n            uiInterface.getDomElement('previewPageElement').removeAttribute('disabled');\n        }\n    }\n\n    getPageNumber(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        return Math.ceil(query.start / query.limit) + 1;\n    }\n\n    // (string) Build \"query\" for Labrador API v1.\n    buildApiQueryString(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const params = [];\n        if (query.api.id) {\n            const idArray = query.api.id.split(/[\\s,]+/).map((id) => this.trimInputText(id)).filter((id) => id);\n            if (idArray.length) {\n                params.push(`(id:(${ idArray.join(' OR ') }))`);\n            }\n        }\n        if (query.api.tag) params.push(`(tag:(\"${ this.trimInputText(query.api.tag) }\"))`);\n        if (query.api.text) {\n            params.push(`${ this.trimInputText(query.api.text) }*`);\n        }\n        if (query.api.onlyMine) {\n            params.push('(has_published:me%20OR%20created_by:me)');\n        }\n        params.push('visibility_status:P');\n\n        const result = params.join(' AND ');\n        return result;\n    }\n\n    trimInputText(txt = '') {\n        return txt.trim().replace(/\"/g, '');\n    }\n\n    // (object) Create data for an article-element\n    articleData(inputData) {\n        const { field } = inputData.notice;\n        const { tag } = inputData.notice.tag || {};\n        const { id } = inputData.notice.attribute;\n        let bylines = [];\n        if (field.userName) {\n            bylines = [{\n                firstname: field.userName\n            }];\n        }\n\n        // For an empty bodytext the API may return an object...\n        if (typeof field.bodytext === 'object') {\n            field.bodytext = '';\n        }\n\n        // Use a subset of the bodytext as subtitle.\n        const subtitle = this.api.v1.util.string.stripTags(field.bodytext || '');\n        const childrenData = [];\n        if (inputData.notice.children && inputData.notice.children.image) {\n            const imageData = Array.isArray(inputData.notice.children.image) ? inputData.notice.children.image[0] : inputData.notice.children.image;\n            childrenData.push({\n                type: 'image',\n                contentdata: {\n                    instance_of: imageData.attribute.instanceof_id,\n                    fields: this.api.v1.view.helpers.image.getImageProperties(imageData.field)\n                },\n                children: []\n            });\n        }\n        const articleData = {\n            type: 'article',\n            contentdata: {\n                instance_of: parseInt(id, 10),\n                tags: Array.isArray(tag) ? tag : [tag],\n                fields: {\n                    subtype: 'notice',\n                    title: field.title,\n                    subtitle: subtitle.substring(0, 200),\n                    bodytext: field.bodytext,\n                    published_url: field.published_url,\n                    userName: field.userName,\n                    modified: field.modified,\n                    published: field.published,\n                    site_id: field.lab_site_id || null,\n                    site_alias: (this.api.v1.site.getSiteById(field.lab_site_id) || {}).alias,\n                    full_bylines_json: bylines\n                }\n            },\n            filtered: {\n                title: field.title || '[No title]',\n                subtitle: subtitle.substring(0, 120) || '[No text]'\n            },\n            children: childrenData\n        };\n        return articleData;\n    }\n\n    resetPager(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        query.start = 0;\n    }\n\n    getArticleListener(uiInterface) {\n        if (!uiInterface.getProperty('articleListener')) {\n            const listener = (params) => {\n                if (params.childModel.getType() === 'article') {\n                    this.markExisting(uiInterface);\n                }\n            };\n            uiInterface.setProperty('articleListener', listener);\n        }\n        return uiInterface.getProperty('articleListener');\n    }\n\n    markExisting(uiInterface) {\n        const existing = this.api.v1.model.query.getModelsByType('article');\n        const contentList = uiInterface.getProperty('contentList') || [];\n        for (let item of contentList) {\n            const id = item.model.get('instance_of');\n            if (id) {\n                if (this.hasId(id, existing)) {\n                    item.element.classList.add('lab-highlight-item');\n                    item.element.setAttribute('title', 'Article used on current page');\n                } else {\n                    item.element.classList.remove('lab-highlight-item');\n                    item.element.setAttribute('title', '');\n                }\n\n                if (this.updateContents && this.updateContents.markExisting) {\n                    const updateContentCallback = uiInterface.getProperty('updateContentCallback');\n                    const params = {\n                        type: 'markExisting',\n                        id\n                    };\n                    item = updateContentCallback(item, params);\n                }\n            }\n        }\n    }\n\n    hasId(id, list) {\n        for (const model of list) {\n            if (id === model.get('instance_of')) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    displayPublishDates(uiInterface, contentList) {\n        for (const item of contentList) {\n            const timestamp = item.model.get('fields.published');\n            if (timestamp) {\n                const el = document.createElement('p');\n                el.classList.add('article-publish-date', 'lab-offstage-description', 'labicon-time');\n                el.innerHTML = this.formatDate(timestamp * 1000);\n                const id = item.model.get('instance_of');\n                if (id) {\n                    el.innerHTML += ` <a href=\"/edit/notice/id/${ id }\" target=\"_blank\" class=\"lab-btn lab-small\">Edit</a>`;\n                }\n                item.element.querySelector('.lab-inner').appendChild(el);\n            }\n        }\n    }\n\n    formatDate(isoDateString) {\n        if (!isoDateString) {\n            return '';\n        }\n        const date = new Date(isoDateString);\n        return this.dateTimeHelper.format(date, `${ this.dateTimeHelper.str('monthdayyear') } ${ this.dateTimeHelper.str('hourminute') }`);\n    }\n\n    /**\n     * Starts an interval to update the UI with new data.\n     * @param {Object} uiInterface - The interface object used to update the UI.\n     */\n    startUpdateInterval(uiInterface) {\n        uiInterface.setProperty('updateIntervalId', window.setInterval(() => {\n            uiInterface.getData(true, { isSilent: true });\n        }, this.updateInterval));\n    }\n\n    /**\n     * Stops the update interval for the UI interface.\n     * @param {Object} uiInterface - The UI interface object.\n     */\n    endUpdateInterval(uiInterface) {\n        window.clearInterval(uiInterface.getProperty('updateIntervalId'));\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n        this.siteId = this.api.v1.site.getSite().id;\n    }\n\n    onCreated(uiInterface, options) {\n        if (options.clickHandler && typeof options.clickHandler === 'function') {\n            uiInterface.setProperty('clickHandler', options.clickHandler);\n        }\n    }\n\n    onChildAdded(uiInterface, model, element) {\n        element.addEventListener('click', (event) => {\n            const clickHandler = uiInterface.getProperty('clickHandler');\n            if (clickHandler) {\n                uiInterface.hide();\n                clickHandler(uiInterface.prepareForStage(model), element);\n            }\n        }, false);\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: 'fields.title',\n                content: null\n            },\n            description: {\n                path: 'fields.fileType',\n                content: null\n            },\n            url: {\n                path: 'fields.url'\n            }\n        };\n    }\n\n    onMapData(uiInterface, data) {\n        const results = [];\n        data.forEach((item) => {\n            results.push({\n                type: 'audio',\n                contentdata: {\n                    fields: {\n                        title: item.title,\n                        fileType: item.fileType,\n                        url: item.url,\n                        playTime: item.length\n                    }\n                }\n            });\n        });\n        return results;\n    }\n\n    onGetUrl(uiInterface, options) {\n        return `/ajax/soundplayer/list?siteId=${ this.siteId }`;\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n        this.siteId = this.api.v1.site.getSite().id;\n        this.pageId = this.api.v1.model.query.getRootModel().get('id');\n    }\n\n    onCreated(uiInterface, options) {\n        // uiInterface.setProperty('defaultByline', parseInt(lab_api.v1.user.getField('defaultByline'), 10));\n        uiInterface.setProperty('query', {\n            firstname: '',\n            lastname: '',\n            bylineId: ''\n        });\n        uiInterface.setProperty('permissions', {\n            mine: this.api.v1.user.hasPermission('byline_edit_mine'),\n            all: this.api.v1.user.hasPermission('byline_edit_all')\n        });\n    }\n\n    getDefaultBylineId() {\n        return parseInt(lab_api.v1.user.getField('defaultByline'), 10);\n    }\n\n    getFavouriteBylineIds() {\n        return lab_api.v1.user.getField('favouriteBylineIds') || [];\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/bylines/header', {}, true);\n        const query = uiInterface.getProperty('query');\n        const formHandler = (event, skipValidation = false) => {\n            const formData = this.api.v1.util.dom.serializeForm(form);\n            if (!skipValidation && ((formData.firstname || '').trim() + (formData.lastname || '').trim()).length <= 2) {\n                return;\n            }\n            query.firstname = (formData.firstname || '').trim();\n            query.lastname = (formData.lastname || '').trim();\n            query.bylineId = '';\n            uiInterface.getData();\n        };\n        for (const formEl of [...form.querySelectorAll('input')]) {\n            formEl.addEventListener('input', formHandler, false);\n            formEl.addEventListener('keydown', (event) => {\n                if (event.key === 'Enter') {\n                    formHandler(event, true);\n                }\n            }, false);\n        }\n        form.querySelector('button').addEventListener('click', (event) => {\n            this.editByline(uiInterface);\n        }, false);\n        return form;\n    }\n\n    // If no search is defined:\n    // Display default byline + recently used bylines\n    onGetUrl(uiInterface, options) {\n        const defaultBylineId = this.getDefaultBylineId();\n        const query = uiInterface.getProperty('query');\n        if (!query.firstname && !query.lastname && !query.bylineId) {\n            const ids = [...this.getFavouriteBylineIds().filter((id) => id !== defaultBylineId)];\n            if (defaultBylineId) {\n                ids.unshift(defaultBylineId);\n            }\n            return `/ajax/byline/get-by-ids?ids=${ ids }`;\n        }\n        return `/ajax/byline/search?page=${ this.pageId }&firstname=${ query.firstname }&lastname=${ query.lastname }&defaultBylineId=${ defaultBylineId || '' }&bylineId=${ query.bylineId }`;\n    }\n\n    onMapData(uiInterface, data, options) {\n        const result = data.data.map((item) => {\n            const bylineData = {\n                type: item.type ? item.type : 'byline',\n                contentdata: {\n                    instance_of: item.id ? item.id : null,\n                    fields: item.fields\n                },\n                filtered: {\n                    name: `${ item.fields.firstname } ${ item.fields.lastname }`,\n                    description: item.fields.description\n                }\n            };\n            if (item.children) {\n                bylineData.children = item.children.filter((child) => child.type === 'image').map((child) => ({\n                    type: child.type,\n                    contentdata: {\n                        instance_of: child.instance_of || null,\n                        fields: child.fields\n                    }\n                }));\n            }\n            return bylineData;\n        });\n\n        const defaultByline = this.getDefaultBylineId();\n        result.sort((a, b) => a.filtered.name.localeCompare(b.filtered.name));\n        if (defaultByline) {\n            const defaultItem = result.filter((item) => item.contentdata.instance_of === defaultByline).pop();\n            if (defaultItem) {\n                result.splice(result.indexOf(defaultItem), 1);\n                result.unshift(defaultItem);\n            }\n        }\n        result.unshift({\n            type: 'byline',\n            contentdata: {\n                fields: {}\n            },\n            filtered: {\n                name: 'Unnamed Byline ...',\n                description: 'Unnamed Description ...'\n            }\n        });\n        return result;\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: 'filtered.name',\n                content: null\n            },\n            description: {\n                path: 'filtered.description',\n                content: null\n            },\n            definition: {\n                useImagePlaceholder: true\n            }\n        };\n    }\n\n    onRendered(uiInterface, contentList) {\n        uiInterface.setProperty('contentList', contentList);\n        const permissions = uiInterface.getProperty('permissions');\n        const defaultByline = this.getDefaultBylineId();\n\n        // Add edit-button. Todo: Check permissions\n        for (const item of contentList) {\n            const id = item.model.get('instance_of');\n            if (id) {\n                if (permissions.all || (id === defaultByline && permissions.mine)) {\n                    this.addEditLink(uiInterface, id, item.element);\n                }\n            }\n        }\n\n        // Highlight bylines used on current page:\n        this.markExisting(uiInterface);\n    }\n\n    onDisplayed(uiInterface, options) {\n        this.api.v1.model.on('childAdded', this.getBylineListener(uiInterface));\n        this.api.v1.model.on('childRemoved', this.getBylineListener(uiInterface));\n        this.markExisting(uiInterface);\n    }\n\n    onHidden(uiInterface) {\n        this.api.v1.model.off('childAdded', this.getBylineListener(uiInterface));\n        this.api.v1.model.off('childRemoved', this.getBylineListener(uiInterface));\n    }\n\n    editByline(uiInterface, id = null) {\n        this.api.v1.apps.start('BylineEditor', {\n            id,\n            endcallback: (createdId) => {\n                if (createdId) {\n                    const query = uiInterface.getProperty('query');\n                    query.bylineId = createdId || '';\n                    uiInterface.setProperty('query', query);\n                }\n                uiInterface.getData(true);\n            }\n        });\n    }\n\n    addEditLink(uiInterface, id, element) {\n        const el = document.createElement('div');\n        el.setAttribute('title', 'Edit byline');\n        el.classList.add('notes-info', 'labicon-startEdit');\n        el.addEventListener('click', (event) => {\n            this.editByline(uiInterface, id);\n        }, false);\n        element.querySelector('.lab-inner').prepend(el);\n    }\n\n    getBylineListener(uiInterface) {\n        if (!uiInterface.getProperty('bylineListener')) {\n            const listener = (params) => {\n                if (params.childModel.getType() === 'byline') {\n                    this.markExisting(uiInterface);\n                }\n            };\n            uiInterface.setProperty('bylineListener', listener);\n        }\n        return uiInterface.getProperty('bylineListener');\n    }\n\n    markExisting(uiInterface) {\n        const existing = this.api.v1.model.query.getModelsByType('byline').map((model) => model.get('instance_of'));\n        const contentList = uiInterface.getProperty('contentList') || [];\n        for (const item of contentList) {\n            const id = item.model.get('instance_of');\n            if (id) {\n                if (existing.includes(id)) {\n                    item.element.classList.add('lab-highlight-item');\n                    item.element.setAttribute('title', 'Byline used on current page');\n                } else {\n                    item.element.classList.remove('lab-highlight-item');\n                    item.element.setAttribute('title', '');\n                }\n            }\n        }\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n        this.filetypes = ['svg', 'gif', 'png'];\n        this.imageServer = this.api.v1.properties.get('image_server');\n        this.siteId = this.api.v1.site.getSite().id;\n    }\n\n    onProperties(uiInterface) {\n        return {\n            autoItemSizing: true,\n            displayAsGrid: true,\n            isMedia: true\n        };\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: 'fields.name',\n                content: null\n            },\n            description: {\n                path: 'fields.fileType',\n                content: null\n            },\n            imageUrl: {\n                path: 'fields.url'\n            }\n        };\n    }\n\n    onCreated(uiInterface, options) {\n        uiInterface.setProperty('query', {\n            type: '',\n            text: ''\n        });\n        uiInterface.setProperty('filesUploadedHandler', (files) => {\n            if (files.length) {\n                uiInterface.getData(true);\n            }\n        });\n        lab_api.v1.file.on('filesUploaded', uiInterface.getProperty('filesUploadedHandler'));\n    }\n\n    onHeader(uiInterface, options) {\n        const form = this.api.v1.util.dom.renderView('collections/graphics/header', {\n            types: [{\n                value: '',\n                key: 'All types'\n            }, {\n                value: 'svg',\n                key: 'SVG'\n            }, {\n                value: 'png',\n                key: 'PNG'\n            }, {\n                value: 'gif',\n                key: 'GIF'\n            }]\n        }, true);\n        const query = uiInterface.getProperty('query');\n        const formHandler = (event) => {\n            event.preventDefault();\n            const formData = this.api.v1.util.dom.serializeForm(form);\n            query.type = formData.type;\n            query.text = formData.text;\n            uiInterface.getData();\n        };\n        form.addEventListener('submit', formHandler, false);\n        for (const formEl of [...form.querySelectorAll('input, select')]) {\n            formEl.addEventListener('change', formHandler, false);\n        }\n        form.querySelector('.size-container').appendChild(this.api.v1.ui.element.getSizeElements({\n            name: 'graphics_list_preferred_size',\n            btnSize: 'lab-small',\n            css: 'lab-grid lab-grid-gap lab-autogrid lab-btn-group lab-grid-large-4',\n            callback: (preferredSize) => {\n                uiInterface.requestSize(preferredSize);\n            }\n        }));\n        const preferredSize = this.api.v1.eventmonitor.reader.getUiSelection('graphics_list_preferred_size');\n        if (preferredSize) {\n            uiInterface.requestSize(preferredSize);\n        }\n        const toggleEl = form.querySelector('a');\n        const expandableEl = form.querySelector('.expanded');\n        if (toggleEl && expandableEl) {\n            toggleEl.addEventListener('click', (event) => {\n                event.preventDefault();\n                expandableEl.classList.toggle('lab-hidden');\n            }, false);\n        }\n        return form;\n    }\n\n    onFooter(uiInterface, options) {\n        const form = this.api.v1.util.dom.renderView('collections/graphics/footer', {}, true);\n        form.querySelector('.lab-footer-upload').addEventListener('click', (event) => {\n            this.api.v1.file.displayFileUpload();\n        }, false);\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        return form;\n    }\n\n    onGetUrl(uiInterface, options) {\n        const query = uiInterface.getProperty('query');\n        return `/ajax/file-upload/list-files-by-type?type=${ query.type || this.filetypes.join(',') }&text=${ query.text }&siteId=${ this.siteId }`;\n    }\n\n    onMapData(uiInterface, data) {\n        const results = [];\n        for (const id of Object.keys(data).reverse()) {\n            const url = data[id].url || false;\n            if (url) {\n                results.push({\n                    type: 'graphic',\n                    contentdata: {\n                        instance_of: id,\n                        fields: {\n                            url,\n                            name: data[id].name,\n                            uploadtime: data[id].uploadtime,\n                            fileType: url.split('.').pop()\n                        }\n                    }\n                });\n            }\n        }\n        return results;\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onCreated(uiInterface, options) {\n        const channelConfig = lab_api.v1.config.get('media.jwplayer.channel') || {};\n        uiInterface.setProperty('channelConfig', channelConfig);\n        uiInterface.setProperty('query', {\n            search: '',\n            limit: 30,\n            currentToken: null,\n            nextPageToken: null,\n            prevPageToken: null,\n            page: 1\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/jwplayer/header', {\n            channelConfig: uiInterface.getProperty('channelConfig')\n        }, true);\n        const query = uiInterface.getProperty('query');\n\n        const searchBar = form.querySelector('.search-bar');\n\n        const update = () => {\n            if (searchBar) {\n                query.search = searchBar.value || '';\n            }\n\n            uiInterface.getData(true);\n        };\n\n        searchBar.addEventListener('change', update.bind(this));\n\n        form.addEventListener('submit', (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n        });\n\n        return form;\n    }\n\n    onFooter(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/jwplayer/footer', {}, true);\n\n        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const siteAlias = lab_api.v1.site.getSite().alias;\n        const args = [\n            `num=${ query.limit }`,\n            `site=${ siteAlias }`\n        ];\n        if (query.search) {\n            args.push(`q=${ query.search }`);\n        }\n        if (query.currentToken) {\n            args.push(`token=${ query.currentToken }`);\n        }\n        return `/ajax/integration/get-collection?_service=jwplayer&${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, data) {\n        const query = uiInterface.getProperty('query');\n        query.nextPageToken = null;\n        query.prevPageToken = null;\n        query.currentToken = null;\n\n        if (!data.results || !data.results.length) { return []; }\n\n        if (typeof (data.pagination) !== 'undefined') {\n            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }\n            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }\n        }\n\n        const results = [];\n\n        data.results.forEach((item) => {\n            results.push({\n                type: 'jwplayer',\n                contentdata: {\n                    fields: {\n                        vid: item.id.videoId ? item.id.videoId : item.id,\n                        preview: item.preview,\n                        title: item.title,\n                        description: item.extra_metadata_json.metadata.description\n                    }\n                }\n            });\n        });\n        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;\n        return results;\n    }\n\n    onProperties(uiInterface) {\n        return {\n            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.\n            displayAsGrid: true,    // Set to true for images etc.\n            isMedia: true           // Set to true for images etc.\n        };\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: null,\n                content: null\n            },\n            description: {\n                path: 'fields.title',\n                content: null\n            },\n            imageUrl: {\n                path: 'fields.preview'\n            }\n        };\n    }\n\n    // Todo: Fix pagination ...\n    navigate(uiInterface, forward) {\n        const query = uiInterface.getProperty('query');\n        const active = forward ? 'nextPageToken' : 'prevPageToken';\n        if (!query[active]) {\n            return;\n        }\n        if (forward) {\n            query.page++;\n        } else {\n            query.page--;\n        }\n        query.currentToken = query[active];\n        uiInterface.setProperty('query', query);\n        uiInterface.getData();\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onCreated(uiInterface, options) {\n        const channelConfig = lab_api.v1.config.get('media.remoteproduction.channel') || {};\n        uiInterface.setProperty('channelConfig', channelConfig);\n        uiInterface.setProperty('query', {\n            search: '',\n            limit: 30,\n            currentToken: null,\n            nextPageToken: null,\n            prevPageToken: null,\n            page: 1\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/remoteproduction/header', {\n            channelConfig: uiInterface.getProperty('channelConfig')\n        }, true);\n        const query = uiInterface.getProperty('query');\n\n        const searchBar = form.querySelector('.search-bar');\n\n        const update = () => {\n            if (searchBar) {\n                query.search = searchBar.value || '';\n            }\n\n            uiInterface.getData(true);\n        };\n\n        searchBar.addEventListener('change', update.bind(this));\n\n        form.addEventListener('submit', (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n        });\n\n        return form;\n    }\n\n    onFooter(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/remoteproduction/footer', {}, true);\n\n        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const siteAlias = lab_api.v1.site.getSite().alias;\n        const args = [\n            `num=${ query.limit }`,\n            `site=${ siteAlias }`\n        ];\n        if (query.search) {\n            args.push(`q=${ query.search }`);\n        }\n        if (query.currentToken) {\n            args.push(`token=${ query.currentToken }`);\n        }\n        return `/ajax/integration/get-collection?_service=remote-production&${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, data) {\n        const query = uiInterface.getProperty('query');\n        query.nextPageToken = null;\n        query.prevPageToken = null;\n        query.currentToken = null;\n\n        if (!data.results || !data.results.length) { return []; }\n\n        if (typeof (data.pagination) !== 'undefined') {\n            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }\n            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }\n        }\n\n        const results = [];\n\n        data.results.forEach((item) => {\n            results.push({\n                type: 'remoteproduction',\n                contentdata: {\n                    fields: {\n                        vid: item.id.videoId ? item.id.videoId : item.id,\n                        embedCode: item.embedCode,\n                        playerUrl: item.playerUrl,\n                        preview: item.preview,\n                        title: item.title,\n                        caption: item.caption,\n                        byline: item.byline,\n                        description: item.description\n                    }\n                }\n            });\n        });\n        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;\n        return results;\n    }\n\n    onProperties(uiInterface) {\n        return {\n            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.\n            displayAsGrid: true,    // Set to true for images etc.\n            isMedia: true           // Set to true for images etc.\n        };\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: null,\n                content: null\n            },\n            description: {\n                path: 'fields.title',\n                content: null\n            },\n            imageUrl: {\n                path: 'fields.preview'\n            }\n        };\n    }\n\n    navigate(uiInterface, forward) {\n        const query = uiInterface.getProperty('query');\n        const active = forward ? 'nextPageToken' : 'prevPageToken';\n        if (!query[active]) {\n            return;\n        }\n        if (forward) {\n            query.page++;\n        } else {\n            query.page--;\n        }\n        query.currentToken = query[active];\n        uiInterface.setProperty('query', query);\n        uiInterface.getData();\n    }\n\n}\n","/**\n * Search for existing elements of any type.\n * Default implementation will use elements factbox, slideshow, parallax, quotebox and markup.\n * You can add or remove element-types using config.\n */\n\n/*\n// Remove `markup`-element:\n{\n    \"collections\": {\n        \"search\": {\n            \"types\": {\n                \"markup\": null\n            }\n        }\n    }\n}\n\n// Add `quotebox`:\n{\n    \"collections\": {\n        \"search\": {\n            \"types\": {\n                \"quotebox\": {\n                    \"name\": \"Quote\",\n                    \"description\": \"{{{ fields.quote }}}\"\n                }\n            }\n        }\n    }\n}\n// Note: The values for `name` and `description` may use standard Mustache variables, like `{{{ fields.title }}}`, referencing model-data from each element.\n// These are used to display text for the user in the collection in the editor.\n\n// Set default search for `slideshow`\n{\n    \"collections\": {\n        \"search\": {\n            \"types\": {\n                \"slideshow\": {\n                    \"selected\": true\n                }\n            }\n        }\n    }\n}\n\n*/\n\nexport default class {\n\n    constructor(api) {\n        this.api = api;\n        this.pageId = this.api.v1.model.query.getRootModel().get('id');\n    }\n\n    onCreated(uiInterface, options) {\n        const config = this.api.v1.util.defaults.object(this.api.v1.config.get('collections.search.types'), {\n            factbox: {\n                selected: true\n            },\n            slideshow: {},\n            parallax: {},\n            markup: {},\n            quotebox: {},\n            timeline: {}\n        });\n        let selectedElement = 'factbox';\n        for (const name of Object.keys(config)) {\n            if (config[name] && config[name].selected) {\n                selectedElement = name;\n            }\n        }\n        uiInterface.setProperty('config', config);\n        uiInterface.setProperty('query', {\n            type: selectedElement,\n            string: ''\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const config = uiInterface.getProperty('config');\n        const items = Object.keys(config).filter((name) => !!config[name]).map((name) => ({ elementType: name, ...config[name] }));\n        const form = this.api.v1.util.dom.renderView('collections/search/header', { items }, true);\n        const query = uiInterface.getProperty('query');\n        const formHandler = (event) => {\n            event.preventDefault();\n            const formData = this.api.v1.util.dom.serializeForm(form);\n            query.type = formData.type;\n            query.string = (formData.query || '').trim();\n            uiInterface.getData();\n        };\n        form.addEventListener('submit', formHandler, false);\n        for (const formEl of [...form.querySelectorAll('input, select')]) {\n            formEl.addEventListener('change', formHandler, false);\n        }\n        return form;\n    }\n\n    onGetData(uiInterface, options) {\n        const query = uiInterface.getProperty('query');\n        return query.type ? undefined : [];\n    }\n\n    // Note: No metadata returned from query.\n    // Background colors, positions of images in factboxes etc. are omitted.\n    onGetUrl(uiInterface, options) {\n        const query = uiInterface.getProperty('query');\n        return `/ajax/node/get-children-by-query?type=${ query.type }&query=${ query.string }&start=0&limit=20&lockId=${ this.pageId }`;\n    }\n\n    mapItems(uiInterface, items, checkConfig = true) {\n        const config = uiInterface.getProperty('config');\n        const result = [];\n        for (const item of items) {\n            if (!checkConfig || config[item.type]) {\n                const itm = {\n                    type: item.type,\n                    contentdata: {\n                        type: item.type,\n                        fields: item.fields,\n                        instance_of: item.instance_of\n                    },\n                    filtered: this.getItemDescription(item, config[item.type]),\n                    children: this.mapItems(uiInterface, item.children || [], false)\n                };\n                if (item.instance_of) {\n                    itm.contentdata.apiResult = {\n                        id: item.instance_of\n                    };\n                }\n                result.push(itm);\n            }\n        }\n        return result;\n    }\n\n    onMapData(uiInterface, data, options) {\n        const result = data && data.result ? this.mapItems(uiInterface, data.result) : [];\n        return result;\n    }\n\n    getItemDescription(item, config = {}) {\n        if (config.name || config.description) {\n            return {\n                name: this.api.v1.util.dom.renderTemplate(config.name, item),\n                description: this.api.v1.util.string.stripTags(this.api.v1.util.dom.renderTemplate(config.description, item))\n            };\n        }\n        let name = '';\n        let description = '';\n        switch (item.type) {\n            case 'factbox':\n                return {\n                    name: `${ lab_api.v1.util.object.get('fields.title', item) || '[No title]' }`,\n                    description: (lab_api.v1.util.object.get('fields.bodytext', item) || '[No bodytext]')\n                };\n            case 'markup':\n                return {\n                    name: `Markup from page #${ item.page_id }`,\n                    description: lab_api.v1.util.string.stripTags(lab_api.v1.util.object.get('fields.markup', item) || lab_api.v1.util.object.get('fields.viewports_json.desktop.fields.markup', item) || '', ' ') || '[No markup]'\n                };\n            case 'slideshow':\n                return {\n                    name: '',\n                    description: ''\n                };\n            case 'quotebox':\n                return {\n                    name: 'Quote',\n                    description: lab_api.v1.util.string.stripTags(lab_api.v1.util.object.get('fields.quote', item)) || '[No quote]'\n                };\n            case 'parallax':\n                for (const child of item.children) {\n                    if (!name && child.type === 'text_title') {\n                        name = child.fields.title;\n                    }\n                    if (!name && child.type === 'text_subtitle') {\n                        name = child.fields.subtitle;\n                    }\n                    if (!name && child.type === 'text_singleline') {\n                        name = child.fields.text;\n                    }\n                    if (!description && child.type === 'text_multiline') {\n                        description = child.fields.bodytext;\n                    }\n                }\n                return {\n                    name: name || '[No titles]',\n                    description: description || '[No multiline text]'\n                };\n            case 'timeline':\n                return {\n                    name: `${ lab_api.v1.util.object.get('fields.title', item) || '[No title]' }`,\n                    description: [...(item.children || [])].slice(0, 3).reverse().filter((itm) => !!itm.fields.title).map((itm) => lab_api.v1.util.string.stripTags(itm.fields.title || '')).join(' -- ') || '[No items]'\n                };\n            default:\n                return {\n                    name: `${ item.type }`,\n                    description: ''\n                };\n        }\n    }\n\n    onItemProperties(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const useImagePlaceholder = query.type !== 'markup';\n        return {\n            title: {\n                path: 'filtered.name',\n                content: null\n            },\n            description: {\n                path: 'filtered.description',\n                content: null\n            },\n            definition: {\n                useImagePlaceholder,\n                children: [{\n                    type: 'image',\n                    limit: query.type === 'slideshow' ? 8 : 1\n                }]\n            }\n        };\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onCreated(uiInterface, view) {\n        uiInterface.setProperty('videolist', lab_api.v1.config.get('contentbox_settings.simplestream.videolist') || []);\n        uiInterface.setProperty('query', {\n            proxy: '/ajax/integration-services/proxy/feed/simplestream',\n            site: lab_api.v1.properties.get('site').alias,\n            search: ''\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/simplestream/header', {}, true);\n        const searchBar = form.querySelector('.search-bar');\n        const query = uiInterface.getProperty('query');\n        searchBar.addEventListener('change', (event) => {\n            query.search = searchBar.value;\n            uiInterface.getData(true);\n        }, false);\n        form.addEventListener('submit', (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n        });\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        if (query.search) {\n            return `${ query.proxy }?site=${ query.site }&action=search&query=${ query.search }`;\n        }\n        return `${ query.proxy }?site=${ query.site }&action=list`;\n    }\n\n    onMapData(uiInterface, data) {\n        if (!data.videos.length) { return []; }\n        const result = [];\n        const videolist = uiInterface.getProperty('videolist');\n        const videos = [...videolist, ...data.videos];\n        videos.forEach((item) => {\n            result.push(this.mapItem(item));\n        });\n        return result;\n    }\n\n    mapItem(item) {\n        let videoType;\n        switch (item.type) {\n            case 'REPLAY':\n                videoType = 'replay';\n                break;\n            case 'live':\n                videoType = 'live';\n                break;\n            default:\n                videoType = 'vod';\n        }\n        return {\n            type: 'simplestream',\n            contentdata: {\n                fields: {\n                    videoId: item.id,\n                    videoType,\n                    idString: item.idString || 'GB001',\n                    uvid: item.id || '',\n                    categories: item.categories,\n                    duration: item.duration,\n                    image: item.image,\n                    logo: item.logo,\n                    logo_position: item.logo_position,\n                    title: item.title\n                }\n            },\n            filtered: {\n                image: item.image ? `${ item.image }width=200` : '/images/placeholders/video_48.png'\n            }\n        };\n    }\n\n    onProperties(uiInterface) {\n        return {\n            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.\n            displayAsGrid: true,    // Set to true for images etc.\n            isMedia: true           // Set to true for images etc.\n        };\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: null,\n                content: null\n            },\n            description: {\n                path: 'fields.title',\n                content: null\n            },\n            imageUrl: {\n                path: 'filtered.image'\n            }\n        };\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onCreated(uiInterface, options) {\n        const channelConfig = lab_api.v1.config.get('media.vimond.channel') || {};\n        uiInterface.setProperty('channelConfig', channelConfig);\n        uiInterface.setProperty('query', {\n            search: '',\n            limit: 30,\n            currentToken: null,\n            nextPageToken: null,\n            prevPageToken: null,\n            page: 1\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/vimond/header', {\n            channelConfig: uiInterface.getProperty('channelConfig')\n        }, true);\n        const query = uiInterface.getProperty('query');\n\n        const searchBar = form.querySelector('.search-bar');\n\n        const update = () => {\n            if (searchBar) {\n                query.search = searchBar.value || '';\n            }\n\n            uiInterface.getData(true);\n        };\n\n        searchBar.addEventListener('change', update.bind(this));\n\n        form.addEventListener('submit', (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n        });\n\n        return form;\n    }\n\n    onFooter(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/vimond/footer', {}, true);\n\n        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const siteAlias = lab_api.v1.site.getSite().alias;\n        const args = [\n            `num=${ query.limit }`,\n            `site=${ siteAlias }`\n        ];\n        if (query.search) {\n            args.push(`q=${ query.search }`);\n        }\n        if (query.currentToken) {\n            args.push(`token=${ query.currentToken }`);\n        }\n        return `/ajax/integration/get-collection?_service=vimond&${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, data) {\n        const query = uiInterface.getProperty('query');\n        query.nextPageToken = null;\n        query.prevPageToken = null;\n        query.currentToken = null;\n\n        if (!data.results || !data.results.length) { return []; }\n\n        if (typeof (data.pagination) !== 'undefined') {\n            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }\n            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }\n        }\n\n        const results = [];\n\n        data.results.forEach((item) => {\n            results.push({\n                type: 'vimond',\n                contentdata: {\n                    fields: {\n                        vid: item.id.videoId ? item.id.videoId : item.id,\n                        embedCode: item.embedCode,\n                        playerUrl: item.playerUrl,\n                        preview: item.preview,\n                        title: item.title,\n                        caption: item.caption,\n                        byline: item.byline,\n                        description: item.description\n                    }\n                }\n            });\n        });\n        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;\n        return results;\n    }\n\n    onProperties(uiInterface) {\n        return {\n            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.\n            displayAsGrid: true,    // Set to true for images etc.\n            isMedia: true           // Set to true for images etc.\n        };\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: null,\n                content: null\n            },\n            description: {\n                path: 'fields.title',\n                content: null\n            },\n            imageUrl: {\n                path: 'fields.preview'\n            }\n        };\n    }\n\n    navigate(uiInterface, forward) {\n        const query = uiInterface.getProperty('query');\n        const active = forward ? 'nextPageToken' : 'prevPageToken';\n        if (!query[active]) {\n            return;\n        }\n        if (forward) {\n            query.page++;\n        } else {\n            query.page--;\n        }\n        query.currentToken = query[active];\n        uiInterface.setProperty('query', query);\n        uiInterface.getData();\n    }\n\n}\n","export default class {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    onCreated(uiInterface, options) {\n        const channelConfig = lab_api.v1.config.get('media.youtube.channel') || {};\n        uiInterface.setProperty('channelConfig', channelConfig);\n        uiInterface.setProperty('query', {\n            search: '',\n            limit: 30,\n            id: null,\n            cid: null, // Channel id\n            onlyMyChannel: !!(channelConfig && channelConfig.defaultSearch),\n            currentToken: null,\n            nextPageToken: null,\n            prevPageToken: null,\n            page: 1\n        });\n    }\n\n    onHeader(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/youtube/header', {\n            channelConfig: uiInterface.getProperty('channelConfig')\n        }, true);\n        const query = uiInterface.getProperty('query');\n\n        const expander = form.querySelector('a');\n        const expanded = form.querySelector('.expanded');\n        if (expander && expanded) {\n            expander.addEventListener('click', (event) => {\n                event.preventDefault();\n                expanded.classList.toggle('lab-hidden');\n            });\n        }\n\n        const searchBar = form.querySelector('.search-bar');\n        const onlyMyChannel = form.querySelector('#my-channel');\n        const videoId = form.querySelector('.video-id');\n        const channelId = form.querySelector('.channel-id');\n\n        const setOnlyChannel = (isSet) => {\n            query.onlyMyChannel = isSet;\n\n            videoId.disabled = isSet;\n            channelId.disabled = isSet;\n\n            videoId.style.opacity = isSet ? 0.5 : 1;\n            channelId.style.opacity = isSet ? 0.5 : 1;\n        };\n\n        const update = () => {\n            if (searchBar) {\n                query.search = searchBar.value || '';\n            }\n            if (videoId) {\n                query.id = videoId.value || '';\n            }\n            if (channelId) {\n                query.cid = channelId.value || '';\n            }\n\n            uiInterface.getData(true);\n        };\n\n        if (onlyMyChannel) {\n            setOnlyChannel(onlyMyChannel.checked);\n            onlyMyChannel.addEventListener('change', () => {\n                setOnlyChannel(onlyMyChannel.checked);\n                update();\n            });\n        }\n\n        searchBar.addEventListener('change', update.bind(this));\n        videoId.addEventListener('change', update.bind(this));\n        channelId.addEventListener('change', update.bind(this));\n\n        form.addEventListener('submit', (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n        });\n\n        return form;\n    }\n\n    onFooter(uiInterface, params) {\n        const form = this.api.v1.util.dom.renderView('collections/youtube/footer', {}, true);\n\n        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));\n        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, false);\n        }, false);\n\n        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));\n        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {\n            this.navigate(uiInterface, true);\n        }, false);\n\n        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {\n            uiInterface.getData(true);\n        }, false);\n        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));\n        return form;\n    }\n\n    onGetUrl(uiInterface) {\n        const query = uiInterface.getProperty('query');\n        const channelConfig = uiInterface.getProperty('channelConfig');\n        const siteAlias = lab_api.v1.site.getSite().alias;\n        const args = [\n            `num=${ query.limit }`,\n            `site=${ siteAlias }`\n        ];\n        if (query.id) {\n            args.push(`id=${ query.id }`);\n        } else {\n            if (query.search) {\n                args.push(`q=${ query.search }`);\n            }\n            if (query.onlyMyChannel && channelConfig.id) {\n                args.push(`cid=${ channelConfig.id }`);\n            } else if (query.cid) {\n                args.push(`cid=${ query.cid }`);\n            }\n        }\n        if (query.currentToken) {\n            args.push(`token=${ query.currentToken }`);\n        }\n        return `/ajax/integration/get-collection?_service=youtube&${ args.join('&') }`;\n    }\n\n    onMapData(uiInterface, data) {\n        const query = uiInterface.getProperty('query');\n        query.nextPageToken = null;\n        query.prevPageToken = null;\n        query.currentToken = null;\n\n        if (!data.results || !data.results.length) { return []; }\n\n        if (typeof (data.pagination) !== 'undefined') {\n            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }\n            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }\n        }\n\n        const results = [];\n\n        data.results.forEach((item) => {\n            results.push({\n                type: 'youtube',\n                contentdata: {\n                    fields: {\n                        vid: item.id.videoId ? item.id.videoId : item.id,\n                        preview: item.snippet.thumbnails.high.url,\n                        title: item.snippet.title,\n                        description: item.snippet.description\n                    }\n                }\n            });\n        });\n        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;\n        return results;\n    }\n\n    onProperties(uiInterface) {\n        return {\n            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.\n            displayAsGrid: true,    // Set to true for images etc.\n            isMedia: true           // Set to true for images etc.\n        };\n    }\n\n    onItemProperties(uiInterface) {\n        return {\n            title: {\n                path: null,\n                content: null\n            },\n            description: {\n                path: 'fields.title',\n                content: null\n            },\n            imageUrl: {\n                path: 'fields.preview'\n            }\n        };\n    }\n\n    // Todo: Fix pagination ...\n    navigate(uiInterface, forward) {\n        const query = uiInterface.getProperty('query');\n        const active = forward ? 'nextPageToken' : 'prevPageToken';\n        if (!query[active]) {\n            return;\n        }\n        if (forward) {\n            query.page++;\n        } else {\n            query.page--;\n        }\n        query.currentToken = query[active];\n        uiInterface.setProperty('query', query);\n        uiInterface.getData();\n    }\n\n}\n","export { default as ArticlesLatest } from './ArticlesLatest.js';\nexport { default as ArticlesAuto } from './ArticlesAuto.js';\nexport { default as ArticleTeasers } from './ArticleTeasers.js';\nexport { default as YouTube } from './YouTube.js';\nexport { default as JWPlayer } from './JWPlayer.js';\nexport { default as RemoteProduction } from './RemoteProduction.js';\nexport { default as Bylines } from './Bylines.js';\nexport { default as Search } from './Search.js';\nexport { default as Simplestream } from './Simplestream.js';\nexport { default as Graphics } from './Graphics.js';\nexport { default as Audio } from './Audio.js';\nexport { default as ArticlesNotice } from './ArticlesNotice.js';\nexport { default as Vimond } from './Vimond.js';\n","import { ResourceHelper } from './helpers/ResourceHelper.js';\nimport { StyleHelper } from './helpers/StyleHelper.js';\n// import { DateTimeHelper } from './helpers/datetime/DateTimeHelper.js';\nimport { AdsHelper } from './helpers/AdsHelper.js';\nimport { SEOHelper } from './helpers/SEOHelper.js';\nimport { CustomTags } from './helpers/CustomTags.js';\nimport { ClientConfig } from './helpers/ClientConfig.js';\n\nexport class PageData {\n\n    constructor(api, pageApi) {\n        this.api = api;\n        this.page = pageApi;\n    }\n\n    set(model, view) {\n        const data = this.export(model, view);\n        for (const key of Object.keys(data)) {\n            model.setFiltered(key, data[key]);\n        }\n    }\n\n    export(model, view) {\n        const exports = {};\n\n        const NOW = new Date();\n        const PAGE_TYPE = view.get('type').replace('page_', '');\n        const PAGE_ID = view.get('id');\n        const CUSTOMER_FRONT_URL = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n        const URL = CUSTOMER_FRONT_URL + view.get('fields.published_url');\n        const URL_ENCODED = encodeURIComponent(URL);\n        const IMAGE_SERVER = this.api.v1.properties.get('image_server');\n        const IS_EDITOR = this.api.v1.app.mode.isEditor();\n        const CANONICAL = this.getCanonicalUrl(model, PAGE_TYPE, PAGE_ID, CUSTOMER_FRONT_URL);\n        const TAGPAGE_PATH = this.api.v1.config.get('tagPagePath') || '/tag/';\n        const IS_TAGPAGE = (PAGE_TYPE === 'front' && (URL.endsWith(TAGPAGE_PATH.slice(0, -1)) || URL.indexOf(TAGPAGE_PATH) > -1));\n        const IS_TAGPAGE_WITH_FRONTPAGE = (IS_TAGPAGE && !URL.endsWith(TAGPAGE_PATH.slice(0, -1)));\n\n        // Metadata.\n        exports.customer_front_url = CUSTOMER_FRONT_URL;\n        exports.isEditMode = IS_EDITOR;\n        exports.url = URL;\n        exports.urlEncoded = URL_ENCODED;\n        exports.specificUrl = CANONICAL;\n        exports.image_server = IMAGE_SERVER;\n        exports.pageType = PAGE_TYPE;\n        exports.pageId = PAGE_ID;\n        exports.is_article = PAGE_TYPE === 'article';\n        exports.is_notice = PAGE_TYPE === 'notice';\n        exports.is_front = PAGE_TYPE === 'front';\n        exports.section = view.get('primaryTags.section') || view.get('fields.defaultsection');\n        exports.device = this.api.v1.viewport.getName();\n        exports.cmsVersion = this.api.v1.properties.get('app.version');\n        exports.front_api_url = this.api.v1.properties.get('front_api_url');\n        exports.xUaDevice = this.api.v1.properties.get('xUaDevice');\n        exports.favicons = this.api.v1.config.get('favicons');\n        exports.faviconList = this.api.v1.config.get('faviconList');\n        exports.skipDefaultFont = this.api.v1.config.get('skipDefaultFont');\n        exports.isDebug = this.api.v1.util.request.hasQueryParam('debug');\n        exports.staticUrl = this.getStaticUrl(model, PAGE_TYPE, PAGE_ID, CUSTOMER_FRONT_URL);\n        exports.customMetatags = this.getCustomMetatags();\n        exports.customTags = CustomTags.prepareForTemplate(this.api.v1.config.get('customTags') || [], PAGE_TYPE, IS_EDITOR);\n        exports.footerSettings = this.api.v1.config.get('page_settings.footer');\n        exports.rssDescriptionPrefix = this.api.v1.config.get('viewports.rss.descriptionPrefix');\n        exports.is_tagpage = IS_TAGPAGE;\n        exports.contentLanguage = lab_api.v1.config.get('contentLanguage');\n\n        // Media.\n        const logo = this.page.media.getLogo(view.getViewport());\n        exports.logo = logo.current;\n        exports.logo_sm = logo.sm;\n        exports.logo_mm = logo.mm;\n\n        // Note: Is this still used?\n        exports.misc = this.api.v1.config.get('misc');\n\n        // Google Translate\n        const translate = {\n            active: false,\n            lang: this.api.v1.config.get('google_translate')\n        };\n        if (translate.lang && Array.isArray(translate.lang) && translate.lang.length) {\n            translate.active = true;\n        }\n        exports.google_translate = translate;\n\n        const seoHelper = new SEOHelper({\n            pageType: PAGE_TYPE,\n            canonical: CANONICAL,\n            isTagpage: IS_TAGPAGE,\n            isTagpageWithFrontpage: IS_TAGPAGE_WITH_FRONTPAGE,\n            tagpagePath: TAGPAGE_PATH\n        });\n\n        // Set JSON-LD json string.\n        const site_jsonld = seoHelper.generateSiteData(model);\n        const jsonld = seoHelper.getStructuredData(model);\n\n        exports.jsonld = JSON.stringify([site_jsonld, jsonld]);\n\n        // Set SEO Data (title and description).\n        const seoData = seoHelper.getSEOData(model);\n        exports.seotitle = seoData.title;\n        exports.seodescription = seoData.description;\n        exports.seolanguage = seoData.language;\n\n        // Set SoMe data with fallback\n        if (PAGE_TYPE === 'article' || PAGE_TYPE === 'notice') {\n            // SoMe title\n            const sometitle = model.get('fields.sometitle') || model.get('fields.teaserTitle') || model.get('fields.title');\n            if (sometitle) {\n                exports.sometitle = this.api.v1.util.string.stripTags(sometitle);\n            }\n\n            // SoMe description\n            const somedescription = model.get('fields.somedescription') || model.get('fields.teaserSubtitle') || model.get('fields.subtitle');\n            if (somedescription && somedescription.length > 0) {\n                exports.somedescription = this.api.v1.util.string.stripTags(somedescription);\n            } else {\n                let somedescriptionBodytext = model.get('fields.bodytext') || '';\n                somedescriptionBodytext = this.api.v1.util.string.stripTags(somedescriptionBodytext);\n                exports.somedescription = `${ somedescriptionBodytext.substring(0, 100) } ...`;\n            }\n        } else if (PAGE_TYPE === 'front') {\n            const someimage = model.get('fields.someimage');\n            if (someimage != null && someimage !== '') {\n                exports.someimage = `${ IMAGE_SERVER }/${ someimage }.webp?width=1200&height=630`;\n            }\n            exports.sometitle = model.get('fields.sometitle') || model.get('fields.name');\n            exports.somedescription = model.get('fields.somedescription') || '';\n        }\n\n        // Social\n        exports.social = {\n            facebook: `https://www.facebook.com/sharer.php?u=${  URL_ENCODED }`,\n            twitter: `https://twitter.com/intent/tweet?url=${  URL_ENCODED }`,\n            // google: 'https://plus.google.com/share?url=' + urlEncoded,\n            mail: `mailto:?subject=${  encodeURIComponent(this.api.v1.util.string.stripTags(view.get('fields.title')))  }&body=${  encodeURIComponent(this.api.v1.util.string.stripTags(view.get('fields.subtitle')))  }%0D${  URL_ENCODED }`,\n            linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${ URL_ENCODED }`,\n            threads: `https://threads.net/intent/post?text=${ URL_ENCODED }`,\n            copyLink: `navigator.clipboard.writeText(\"${ URL }\");`,\n            glimta: `https://glimta.com/unlock?link=${ URL_ENCODED }`,\n            talandeWebb: `ReachDeck.panel.toggleBar();`,\n            bluesky: `https://bsky.app/intent/compose?text=${ encodeURIComponent(`${ exports.sometitle }\\n`) }${ URL_ENCODED }`\n        };\n\n        // Set article tags and byline as comma separated string\n        if (PAGE_TYPE === 'article') {\n            const ignoredTags = this.api.v1.config.get('page_settings.article.ignoredTags') || [];\n            const ignoredTagPrefix = this.api.v1.config.get('page_settings.article.ignoredTagPrefix') || [];\n            const tags = (model.get('tags') || []).filter((tag) => !ignoredTags.includes(tag)).filter((tag) => {\n                for (const prefix of ignoredTagPrefix) {\n                    if (tag.startsWith(prefix)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n\n            exports.tagsString = tags.toString();\n            let tagsStringCommaSeparated = '';\n            tags.forEach((tag, index) => {\n                tagsStringCommaSeparated += `\"${ tag.replace('\"', '\\'') }\"`;\n                if (index < tags.length - 1) tagsStringCommaSeparated += ', ';\n            });\n            exports.tagsStringCommaSeparated = tagsStringCommaSeparated;\n\n            const bylines = this.api.v1.model.query.getChildrenOfType(model, 'byline', true);\n            if (bylines) {\n                const bylinesStringCommaSeparated = bylines\n                    .map((byline) => `\"${ byline.get('fields.firstname') } ${ byline.get('fields.lastname') }\"`)\n                    .join(', ');\n                exports.bylinesStringCommaSeparated = bylinesStringCommaSeparated;\n            }\n        }\n\n        // Set article published time\n        if (PAGE_TYPE === 'article') {\n            if (model.get('fields.published')) {\n                exports.published = new Date(parseInt(model.get('fields.published'), 10) * 1000).toISOString();\n                exports.publishedTimestamp = model.get('fields.published');\n            }\n        }\n\n        // Site.\n        exports.site = this.api.v1.site.getSite();\n        exports.siteJSON = JSON.stringify(exports.site);\n        exports['site.domain_no_protocol'] = exports.site.domain.split('://').pop();\n        exports.siteAlias = exports.site.alias;\n        exports.fullUrl = exports.site.domain;\n        exports[`site_is_${ exports.siteAlias }`] = true;\n\n        const resourcesHandler = this.page.resources;\n\n        if (!IS_EDITOR && exports.is_article && this.api.v1.config.get('displayReadProgress.active') && view.get('fields.displayReadProgress')) {\n            exports.readProgress = resourcesHandler.scripts.getProgressReader();\n        }\n\n        exports.siteStylesheetList = ResourceHelper.getSiteStylesWithFallback(exports.siteAlias);\n        Sys.logger.debug(`ViewSupport: Will include ${ exports.siteStylesheetList.length } configured stylesheet(s): \"${ exports.siteStylesheetList.join(', ') }\".`);\n\n        exports.siteFiles = resourcesHandler.scripts.getSiteFiles(model, view, exports.siteAlias, PAGE_TYPE, IS_EDITOR);\n        exports.modules = resourcesHandler.scripts.getModules(model, view, exports.siteAlias, PAGE_TYPE, IS_EDITOR);\n\n        if (!IS_EDITOR) {\n            exports.analytics = resourcesHandler.analytics.get(exports);\n            exports.widgets = {\n                strossle: this.api.v1.config.get('widgets.strossle.strossle_id')\n            };\n            exports.consent = {\n                cookieconsent: this.api.v1.config.get('consent.cookieconsent.show'),\n                cookieconsent_culture: this.api.v1.config.get('consent.cookieconsent.culture') || 'NB'\n            };\n\n            if (this.api.v1.config.get('cookieConsent.enabled')) {\n                resourcesHandler.scripts.required.push({\n                    url: '/view-resources/public/common/cookieConsent.js',\n                    requireDom: false\n                });\n            }\n\n            if (this.api.v1.viewport.getName() === 'desktop' && view.get('fields.style_slidein')) {\n                exports.style_slidein = true;\n                resourcesHandler.scripts.required.push({\n                    url: '/view-resources/public/common/SlideIn/SlideIn.js',\n                    requireDom: false\n                });\n            }\n\n            const adEnv = this.api.v1.config.get('adEnvironment') || {};\n            const hideAds = view.get('fields.hideAds') === '1';\n            const disableSkyscraper = view.get('fields.hideSkyscraperAds') === '1' || false;\n            const disableTopBanner = view.get('fields.hideTopBannerAd') === '1' || false;\n\n            if (!hideAds && adEnv && adEnv.name === 'adnuntius') {\n                try {\n                    exports.adnuntius = AdsHelper.getAdnuntiusSettings(this.api, model, view, adEnv, exports.site, disableSkyscraper, disableTopBanner);\n                } catch (error) {\n                    Sys.logger.warn(`[PageData] Failed to prepare Adnuntius ads: ${ error.toString() }`);\n                }\n            }\n            if (!hideAds && adEnv && adEnv.name === 'google') {\n                try {\n                    exports.googleAds = AdsHelper.getGoogleSettings(this.api, model, view, adEnv, exports.site, disableSkyscraper, disableTopBanner);\n                } catch (error) {\n                    Sys.logger.warn(`[PageData] Failed to prepare Google ads: ${ error.toString() }`);\n                }\n            }\n\n        }\n\n        if (this.api.v1.util.request.hasQueryParam('fontpreview')) {\n            exports.fontpreview = this.api.v1.util.request.getQueryParam('fontpreview');\n            exports.analytics = null;\n        }\n\n        exports.page_settings = this.page.settings.get({\n            // Treat notice as an article to use the same settings (admin, config from view)\n            pageType: PAGE_TYPE === 'notice' ? 'article' : PAGE_TYPE,\n            socialLinks: exports.social\n        });\n\n        // Comments\n        if (PAGE_TYPE === 'article') {\n            const configForComments = this.api.v1.config.get('comments_provider.hideCommentsIfPaywall') || false;\n            const paywallState = this.api.v1.properties.get('paywall') || {};\n            const paywallMode = lab_api.v1.app.mode.isFront() && paywallState.active && !paywallState.hasAccess;\n            const hideComments = paywallMode && configForComments;\n            const DISPLAY = IS_EDITOR === false && hideComments === false;\n\n            if (view.get('fields.showcomments') && !hideComments) {\n                if (this.api.v1.config.get('comments_provider.facebook')) {\n                    const facebookAppId = this.api.v1.config.get('comments_provider.facebook.app_id');\n                    if (facebookAppId) {\n                        exports.facebook = {\n                            display: DISPLAY,\n                            displayPlaceholder: IS_EDITOR,\n                            appId: facebookAppId,\n                            pageId: PAGE_ID,\n                            url: exports.fullUrl + (PAGE_TYPE === 'article' ? `/a/${  PAGE_ID }` : '')\n                        };\n                        exports.displayComments = true;\n                    }\n                }\n\n                if (this.api.v1.config.get('comments_provider.disqus')) {\n                    const enableComments = this.api.v1.config.get('comments_provider.disqus.enable');\n                    const disqusScript = this.api.v1.config.get('comments_provider.disqus.script');\n                    if (enableComments) {\n                        exports.disqus = {\n                            display: DISPLAY,\n                            displayPlaceholder: IS_EDITOR,\n                            canonical: CANONICAL,\n                            pageId: PAGE_ID,\n                            script: disqusScript\n                        };\n                        exports.displayComments = true;\n                    }\n                }\n\n                const commentoConfig = this.api.v1.config.get('comments_provider.commento');\n                if (commentoConfig) {\n                    if (commentoConfig.enable) {\n                        exports.commento = {\n                            display: DISPLAY,\n                            displayPlaceholder: IS_EDITOR,\n                            canonical: CANONICAL,\n                            usePageId: commentoConfig.usePageId,\n                            pageId: PAGE_ID,\n                            script: commentoConfig.script,\n                            cssOverride: commentoConfig.cssOverride,\n                            descriptionText: commentoConfig.descriptionText\n                        };\n                        exports.displayComments = true;\n                    }\n                }\n\n                const hyvor = lab_api.v1.config.get('comments_provider.hyvor');\n                if (hyvor) {\n                    if (hyvor.websiteId) {\n                        const publishedTimestamp = model.get('fields.published') || 0;\n                        exports.hyvor = {\n                            display: DISPLAY,\n                            displayPlaceholder: IS_EDITOR,\n                            websiteId: hyvor.websiteId,\n                            pageId: (publishedTimestamp > 1646908200 ? PAGE_ID : false)\n                        };\n                        if (hyvor.hidePageIdBeforeDate && publishedTimestamp < hyvor.hidePageIdBeforeDate) {\n                            exports.hyvor.pageId = '';\n                        }\n                        exports.displayComments = true;\n                    }\n                }\n\n                // Ifrågasätt\n                const ifragasatt = lab_api.v1.config.get('comments_provider.ifragasatt');\n                if (ifragasatt) {\n                    exports.ifragasatt = {\n                        display: DISPLAY,\n                        displayPlaceholder: IS_EDITOR,\n                        customerId: ifragasatt.customer_id,\n                        articleId: `article${  PAGE_ID }`\n                    };\n\n                    exports.displayComments = true;\n                }\n            }\n        }\n\n        // const dateHandler = new DateTimeHelper(lab_api.v1.config.get('lang'));\n        // exports.currentDateNo = dateHandler.format(NOW, '{{dd}}. {{MMMM}} {{YYYY}}');\n\n        exports.menus = this.page.menus.get({\n            defaultSection: view.get('fields.defaultsection'),\n            section: view.get('primaryTags.section')\n        });\n\n        exports.style_definitions = StyleHelper.getStyleDefinitions(this.api);\n        exports.css_build = StyleHelper.getInlineCSS(this.api);\n        exports.css_variables = StyleHelper.getCssVariables(this.api);\n        exports.contact = this.api.v1.config.get('contact');\n\n        const norobots = !!view.get('fields.norobots'); // Can be true, false, \"\", \"1\"\n        const hideFromFp = view.get('fields.hidefromfp_time');\n        const nowInSeconds = Math.round(NOW.getTime() / 1000);\n        exports.norobots = norobots || (hideFromFp && hideFromFp <= nowInSeconds) || false;\n\n        if (PAGE_TYPE === 'article') {\n            // Is this an embeddable article?\n            if (this.api.v1.config.get('embeddable.active')) {\n                exports.embeddable = {\n                    active: true,\n                    display: !!view.get('fields.displayEmbedButton') && exports.device !== 'embed',\n                    aboveBodytext: !!view.get('fields.displayEmbedButtonAboveBodytext') && exports.device !== 'embed',\n                    isFullContent: this.api.v1.util.request.getQueryString().indexOf('lab_content=full') > -1,\n                    hasParallax: this.api.v1.model.query.hasChildOfType(model, 'parallax', true)\n                };\n            }\n        }\n\n        // Handle required scripts.\n        Sys.logger.debug(`ViewSupport: Will include ${ resourcesHandler.scripts.required.length } configured script(s): \"${ resourcesHandler.scripts.required.map((item) => item.url).join(', ') }\".`);\n        resourcesHandler.scripts.required.forEach((script) => {\n            if (!script.placeholderKey && script.requireDom) {\n                script.placeholderKey = 'requireDom';\n            }\n            // Template friendly format\n            if (script.placeholderKey) {\n                const { placeholderKey } = script;\n                script.placeholderKey = {};\n                script.placeholderKey[placeholderKey] = true;\n            }\n        });\n        exports.siteScriptList = resourcesHandler.scripts.required;\n        exports.paywall = this.getPaywallInfo(model, IS_EDITOR);\n\n        exports.simplestreamEnabled = lab_api.v1.config.get('contentbox_settings.simplestream') || false;\n\n        // Mailmojo\n        if (exports.device === 'mailmojo') {\n            this.setDefaultMailmojoData(model, view);\n        }\n\n        // Age disclaimer\n        if (PAGE_TYPE === 'article') {\n            const ageWarningsConf = lab_api.v1.config.get('page_settings.article.ageWarnings');\n            if (Array.isArray(ageWarningsConf)) {\n                const publishedTimestamp = model.get('fields.published');\n                if (publishedTimestamp) {\n                    const ageItem = this.getAgeWarningItem(publishedTimestamp, ageWarningsConf);\n                    if (ageItem) {\n                        model.setFiltered('ageWarning', ageItem);\n                    }\n                }\n            }\n        }\n\n        // Feature flags\n        exports.featureFlags = {\n            responsive_mobile_fonts: !lab_api.v1.util.featureFlags.enabled('Disable responsive mobile fonts', PAGE_TYPE) // Default enabled\n        };\n\n        // Make config object available for client side rendering\n        exports.clientSideConfig = JSON.stringify(ClientConfig.buildConfig(this.api));\n\n        return exports;\n    }\n\n    getAgeWarningItem(timestamp, config) {\n        // Validate input and sort by property \"years\". Largest numbers first.\n        const items = Object.values(config)\n            .filter((item) => !!item.years && !!item.label)\n            .sort((a, b) => b.years - a.years);\n        const articleDate = new Date(timestamp * 1000);\n        const diffMs = Date.now() - articleDate;\n        const ageDate = new Date(diffMs); // miliseconds from epoch\n        const diffYears = Math.abs(ageDate.getUTCFullYear() - 1970);\n        for (const item of items) {\n            if (diffYears >= item.years) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    setDefaultMailmojoData(model, view) {\n        const language = lab_api.v1.config.get('lang') || 'no';\n        model.setFiltered('lang', language);\n    }\n\n    getCanonicalUrl(model, pageType, pageId, frontUrl) {\n        const canonical = model.get('fields.lab_canonical');\n        if (canonical) {\n            return canonical;\n        }\n        if (pageType === 'front') {\n            const hostpath = model.get('fields.hostpath');\n            if (hostpath) {\n                return `${ frontUrl }/${ hostpath === 'index' ? '' : hostpath }`;\n            }\n        }\n        return `${ frontUrl + model.get('fields.published_url') }`;\n    }\n\n    getStaticUrl(model, pageType, pageId, frontUrl) {\n        if (pageType === 'front') {\n            const redirectedUrl = lab_api.v1.util.request.getHeader('X-Labrador-404-Referer');\n            if (redirectedUrl) {\n                return `${ frontUrl }${ redirectedUrl }`;\n            }\n\n            const hostpath = model.get('fields.hostpath');\n            if (hostpath) {\n                return `${ frontUrl }/${ hostpath === 'index' ? '' : hostpath }`;\n            }\n            return `${ frontUrl + model.get('fields.published_url') }`;\n        }\n        return (`${ lab_api.v1.properties.get('site').domain }/a/${ pageId }`);\n    }\n\n    // (array) Supports two formats\n    // customMetatags [{ key1: 'val1', key2: 'val2' }]\n    // customMetatagsKeyVal: [[ { key: 'key3', value: 'val3' }, { key: 'key4', value: 'val4' }]]\n    // Return value for the above examples:\n    // [[ { key: 'key1', value: 'val1' }, { key: 'key2', value: 'val2' } ], [ { key: 'key3', value: 'val3' }, { key: 'key4', value: 'val4' } ]]\n    // Result in template: <meta key1=\"val1\" key2=\"val2\" > <meta key3=\"val3\" key4=\"val4\" >\n    // Config customMetatagsKeyVal can be set in admin-tool.\n    getCustomMetatags() {\n        const metatags = lab_api.v1.config.get('customMetatags') || [];\n        const metatagsKeyVal = lab_api.v1.config.get('customMetatagsKeyVal') || [];\n        const result = [];\n        for (const pairs of metatags) {\n            const keyVals = Object.keys(pairs).map((key) => ({ key, value: pairs[key] }));\n            result.push(keyVals);\n        }\n        for (const tag of metatagsKeyVal) {\n            if (tag.length) {\n                result.push(tag);\n            }\n        }\n        return result;\n    }\n\n    getPaywallInfo(model, isEditor) {\n        const settings = lab_api.v1.properties.get('paywall');\n        const enabled = !isEditor && model.get('fields.paywall') === '1';\n        const provider = lab_api.v1.config.get('paywall.provider', { site: lab_api.v1.site.getSite().alias }) || 'internal';\n        const enabledImage = !isEditor && model.get('fields.paywallSalesImage') === '1';\n\n        // Shareable article\n        const shareable = !isEditor && enabled && settings.hasAccess && model.get('fields.paywallShareable') === '1';\n        let shareableArticle;\n        if (model.get('fields.paywallShareable') === '1') {\n            shareableArticle = lab_api.v1.config.getConfig('pages.localisation.data.items.paywall.items.shareableArticle.items') || {};\n            for (const key of Object.keys(shareableArticle)) {\n                shareableArticle[key] = lab_api.v1.locale.get(`paywall.shareableArticle.${ key }`) || '';\n            }\n        }\n\n        return {\n            enabled,\n            settings,\n            provider,\n            shareable,\n            shareableArticle,\n            hasAccess: enabled && settings.active ? settings.hasAccess : true,\n            hidePaywallOffers: this.api.v1.util.request.hasQueryValue('lab_opts', 'paywall_loginonly'),\n            paywallSalesImage: model.get('fields.paywallSalesImage'),\n            paywallSalesPitchContent: model.get('fields.paywallSalesPitchContent'),\n            paywallSalesPitchTitle: model.get('fields.paywallSalesPitchTitle'),\n            paywallLayoutType: model.get('fields.paywallPreview.paywallLayoutType'),\n            requiredProducts: JSON.stringify(this.api.v1.properties.get('app.paywall.requiredProducts') || [])\n        };\n    }\n\n}\n","import { ResourceHelper } from '../helpers/ResourceHelper.js';\n\nexport class PageAPI {\n\n    constructor(api) {\n        this.api = api;\n        this.pageType = this.api.v1.model.root.getType();\n    }\n\n    get media() {\n        return {\n            // (object) { current, sm }\n            getLogo: (viewport = this.api.v1.viewport.getName()) => {\n                const logo = this.api.v1.config.get('logo') || {};\n                const activeLogo = logo.uploadedFileUrl ? {\n                    src: logo.uploadedFileUrl, href: logo.default.href, type: 'img', size: { width: logo.logoWidth }, title: logo.default.title, isCustom: true\n                } : logo[viewport] || logo.default || null;\n                if (activeLogo) {\n                    if (activeLogo.type === 'img') {\n                        activeLogo.is_img = true;\n                    } else if (activeLogo.type === 'svg') {\n                        activeLogo.is_svg = true;\n                    }\n                }\n\n                const logo_sm = logo.uploadedFileUrl ? { src: logo.uploadedFileUrl, href: logo.default.href, size: { width: logo.logoWidth }, title: logo.default.title, isCustom: true } : logo.standalone || logo.mailmojo || null;\n                const logo_mm = logo.uploadedMailmojoFileUrl ? { src: logo.uploadedMailmojoFileUrl, href: logo.default.href, size: { width: logo.mailmojoLogoWidth }, title: logo.default.title, isCustom: true } : logo.mailmojo || logo.standalone || null;\n\n                return {\n                    current: activeLogo,\n                    sm: logo_sm,\n                    mm: logo_mm\n                };\n            }\n        };\n    }\n\n    get menus() {\n        return {\n            get: ({ section, defaultSection } = {}, identifier) => {\n                const results = {};\n                const menus = Object.values(this.api.v1.config.get('menus') || {});\n                if (menus.length < 1) return null;\n\n                const validateItems = (items) => {\n                    items.forEach((item) => {\n                        item.selected = (item.section === section || item.section === defaultSection);\n                        if (!('target' in item)) item.target = '_self';\n                        if (!('selector' in item)) item.selector = '';\n                        if (!('children' in item)) item.children = [];\n                        if (item.children.length > 0) {\n                            item.hasChildren = true;\n                            validateItems(item.children);\n                        }\n                    });\n                };\n\n                menus.forEach((menu) => {\n                    validateItems(menu.menuItems);\n                    const name = menu.type || menu.menuName;\n                    results[name] = {\n                        items: menu.menuItems,\n                        type: menu.type,\n                        selector: menu.selector || ''\n                    };\n                });\n\n                return identifier ? results[identifier] : results;\n            }\n        };\n    }\n\n    get misc() {\n        return {\n\n        };\n    }\n\n    get resources() {\n        const scripts = {\n            required: [],\n            getProgressReader() {\n                scripts.required.push({\n                    url: '/view-resources/public/common/ReadProgress.js',\n                    requireDom: false\n                });\n                return {\n                    active: true,\n                    minElementCount: lab_api.v1.config.get('displayReadProgress.minElementCount') || 25\n                };\n            },\n            getSiteFiles(model, view, alias, pageType, isEditor) {\n                const siteScripts = ResourceHelper.getSiteScriptsWithFallback(alias, pageType, isEditor);\n                const commonScripts = ResourceHelper.getCommonScripts(pageType, isEditor);\n\n                scripts.required.push(...siteScripts, ...commonScripts);\n\n                return {\n                    js: ResourceHelper.getSiteFilesForContentboxes(model, view, 'js', scripts.required.map((script) => script.url)),\n                    css: ResourceHelper.getSiteFilesForContentboxes(model, view, 'css')\n                };\n            },\n            // (array)\n            getModules(model, view, alias, pageType, isEditor) {\n                return ResourceHelper.getCommonScripts(pageType, isEditor, true);\n            }\n        };\n\n        const analytics = {\n            get: (exports) => {\n                const kilkaya = (lab_api.v1.config.get('analytics.kilkaya') || []).map((item) => {\n                    const itm = { ...item };\n                    if (itm.id && typeof itm.id === 'string' && itm.id.trim().endsWith('.js')) {\n                        itm.url = itm.id;\n                    }\n                    return itm;\n                });\n\n                // Support old data in object format\n                let adnuntiusConnect = this.api.v1.config.get('analytics.adnuntiusConnect');\n                if (adnuntiusConnect && (typeof adnuntiusConnect === 'object' && !Array.isArray(adnuntiusConnect)) && Object.keys(adnuntiusConnect).length) {\n                    adnuntiusConnect = new Array(adnuntiusConnect);\n                }\n\n                const items = {\n                    google: this.api.v1.config.get('analytics.google.tracking_id'),\n                    google_gtm: this.api.v1.config.get('analytics.google.gtm'),\n                    comscore: this.api.v1.config.get('analytics.comscore.comscore_id'),\n                    adnuntiusConnect,\n                    adnuntiusConnectCMP: this.api.v1.config.get('analytics.adnuntiusConnectCMP'),\n                    kilkaya,\n                    kilkayaSettings: this.api.v1.config.get('analytics.kilkayaSettings'),\n                    io: this.api.v1.config.get('analytics.io.tracking_id')\n                };\n\n                const dataLayer = analytics.getDataLayer(exports);\n                if (dataLayer.dataLayer) items.dataLayer = dataLayer.dataLayer;\n                if (dataLayer.usesJWTCookieData) items.usesJWTCookieData = dataLayer.usesJWTCookieData;\n\n                return items;\n            },\n            getDataLayer: (exports) => {\n                const dataLayer = this.api.v1.config.get('analytics.google.dataLayer');\n                let usesJWTCookieData = false;\n\n                if (dataLayer && Array.isArray(dataLayer) && dataLayer.length) {\n                    dataLayer.forEach((item) => {\n                        let value = null;\n\n                        // eslint-disable-next-line default-case\n                        switch (item.source) {\n                            case 'fixed':\n                                value = (item.value || '').trim();\n                                break;\n                            case 'config':\n                                value = this.api.v1.properties.get(item.value);\n                                break;\n                            case 'jwtcookie':\n                                item.isJWTCookie = true;\n                                value = item.value;\n                                usesJWTCookieData = true;\n                                break;\n                            case 'article_authors':\n                                value = `${ (exports.bylinesStringCommaSeparated || '').replace(/\"/g, '') }`;\n                                break;\n                            case this.pageType.replace('page_', ''):\n                                value = this.api.v1.model.query.getRootModel().get(item.value);\n                                break;\n                            default:\n                                Sys.logger.warn(`Unsupported dataLayer source: \"${ item.source }\"`);\n                                break;\n                        }\n\n                        item.value = (value === null ? '' : value.toString());\n                    });\n\n                    const lastIndex = dataLayer.map((item) => item.value.length > 0).lastIndexOf(true);\n                    if (dataLayer[lastIndex]) {\n                        dataLayer[lastIndex].last = true;\n                    }\n                }\n\n                return {\n                    dataLayer,\n                    usesJWTCookieData\n                };\n            }\n        };\n\n        return {\n            scripts,\n            analytics\n        };\n    }\n\n    get settings() {\n        return {\n            get: (params = {}) => {\n                const socialDisplay = this.api.v1.config.get(`page_settings.${ params.pageType }.social.display`) || {};\n\n                const socialDisplayBodytextBefore = this.api.v1.model.query.getRootModel().get('fields.show_social_bodytext_before');\n                const socialDisplayBodytextAfter = this.api.v1.model.query.getRootModel().get('fields.show_social_bodytext_after');\n                const socialDisplayHeader = this.api.v1.model.query.getRootModel().get('fields.show_social_header');\n\n                if (socialDisplayBodytextBefore !== null) {\n                    socialDisplay.bodytext_before = !!socialDisplayBodytextBefore;\n                }\n\n                if (socialDisplayBodytextAfter !== null) {\n                    socialDisplay.bodytext_after = !!socialDisplayBodytextAfter;\n                }\n\n                if (socialDisplayHeader !== null) {\n                    socialDisplay.header = !!socialDisplayHeader;\n                }\n\n                const socialItemsConfig = this.api.v1.config.get(`page_settings.${ params.pageType }.social.items`) || {};\n                const showTagsSetting = this.api.v1.config.get(`page_settings.${ params.pageType }.showTags`);\n                const socialItems = Object.keys(socialItemsConfig).filter((key) => !!socialItemsConfig[key].display).map((key) => ({\n                    name: key,\n                    icon: socialItemsConfig[key].icon || '',\n                    url: params.socialLinks[key] || '',\n                    shareText: socialItemsConfig[key].shareText || '',\n                    isButton: socialItemsConfig[key].isButton || false\n                }));\n                return {\n                    page_type: params.pageType,\n                    social: {\n                        display: {\n                            bodytext_before: socialItems.length > 0 && !!socialDisplay.bodytext_before,\n                            bodytext_after: socialItems.length > 0 && !!socialDisplay.bodytext_after,\n                            header: socialItems.length > 0 && !!socialDisplay.header\n                        },\n                        items: socialItems\n                    },\n                    showTags: showTagsSetting !== false\n                };\n            }\n        };\n    }\n\n}\n","export class ColorUtils {\n\n    /**\n     * Convert a hex color to RGB\n     * @param {String} hexColor Input color in HEX format (e.g. #ff0000 or ff0000)\n     * @returns {Array} RGB color array (e.g. [255, 0, 0])\n     */\n    static hex2rgb(hexColor) {\n        let color = typeof hexColor === 'string' ? hexColor.trim() : '';\n        if (!color.startsWith('#')) {\n            color = `#${ color }`;\n        }\n        return [\n            parseInt(color.slice(1, 3), 16),\n            parseInt(color.slice(3, 5), 16),\n            parseInt(color.slice(5, 7), 16)\n        ];\n    }\n\n    /**\n     * Get color brightness\n     * @param {Array} rgbArray Input-color in RGB format\n     * @returns {Integer} Brightness value from 0 (dark) to 255 (light), null on error\n     */\n    static getBrightness(rgbArray) {\n        if (!Array.isArray(rgbArray) || rgbArray.length !== 3) {\n            return null;\n        }\n        return parseInt(((rgbArray[0] * 299) + (rgbArray[1] * 587) + (rgbArray[2] * 114)) / 1000, 10);\n    }\n\n}\n","// Let user add caption, alt-text etc. on uploaded images.\n// Todo: When supported: Add button to publish image to front-servers\n// Captions can be edited by the app CaptionEditor:\n// this.api.v1.apps.start('CaptionEditor', { id: 123456 });\n\nexport class ImageUploadProcessor {\n\n    constructor(api, callbacks = {}) {\n        this.api = api;\n        this.callbacks = {\n            modified: callbacks.modified || null\n        };\n        this.lastEditId = null;\n        this.template = `<div class=\"lab-fileuploader\" data-lab-content=\"1\">\n            <div class=\"lab-formgroup\">\n                <ul class=\"lab-grid lab-list lab-space-above-large\">\n                    {{ #items }}\n                    <li class=\"lab-grid-large-4 item-no-{{ id }}\">\n                        <img src=\"{{ imageServer }}/?imageId={{ id }}&width={{ width }}\" class=\"lab-space-above-small\" style=\"max-height: 180px; max-width: 180px; margin: 0 auto; display: block;\">\n                    </li>\n                    <li class=\"lab-grid-large-8 lab-space-below-medium\">\n                        <p class=\"lab-para\"><strong>Filename: </strong>{{ fileName }}</p>\n                        <p class=\"lab-para\"><strong>ID: </strong>{{ id }}</p>\n                        <p class=\"lab-para\"><strong>Caption: </strong><span data-caption-{{ id }}>{{{ caption }}}{{ ^caption }}<span class=\"lab-label\">No caption</span>{{ /caption }}</span></p>\n                        <p class=\"lab-para\"><strong>Byline: </strong><span data-byline-{{ id }}>{{{ byline }}}{{ ^byline }}<span class=\"lab-label\">No byline</span>{{ /byline }}</span></p>\n                        <p class=\"lab-align-right\"><input type=\"button\" value=\"Edit\" data-id=\"{{ id }}\"></p>\n                    </li>\n                    {{ /items }}\n                </ul>\n            </div>\n        </div>`;\n        this.imageServer = this.api.v1.properties.get('image_server');\n    }\n\n    imagesUploaded(items) {\n        let isDisplayed = false;\n        this.modal = this.api.v1.ui.modal.dialog({\n            content: {\n                header: 'Uploaded images',\n                markup: this.getMarkup(items)\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Media Library',\n                        type: 'button',\n                        id: 'media-library'\n                    },\n                    {\n                        value: 'OK',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            },\n            callbacks: {\n                didDisplay: (modal) => {\n                    if (this.lastEditId) {\n                        const item = modal.getMarkup().querySelector(`.item-no-${ this.lastEditId }`);\n                        if (item && typeof item.scrollIntoViewIfNeeded === 'function') {\n                            item.scrollIntoViewIfNeeded();\n                        }\n                        this.lastEditId = null;\n                    }\n                    if (isDisplayed) { return; }\n                    for (const btn of modal.getMarkup().querySelectorAll('ul input')) {\n                        btn.addEventListener('click', (event) => {\n                            this.editImage(event.target.getAttribute('data-id'));\n                        }, false);\n                    }\n                    const link = modal.getMarkup().querySelector('#media-library');\n                    link.addEventListener('click', (event) => {\n                        modal.close();\n                        this.api.v1.collection.display({ name: 'MediaImages', options: { reload: true } });\n                    }, false);\n                    isDisplayed = true;\n                }\n            }\n        });\n    }\n\n    editImage(id) {\n        // Start caption-editor and also update UI in modal with result.\n        this.api.v1.apps.start('CaptionEditor', {\n            id,\n            callback: (fields) => {\n                this.lastEditId = id;\n                for (const key of Object.keys(fields)) {\n                    const el = this.modal.markup.querySelector(`span[data-${ key }-${ id }]`);\n                    if (el) { el.innerHTML = fields[key]; }\n                }\n                this.updateCollection('MediaImages', { id, fields });\n            }\n        });\n    }\n\n    // Update caption/byline in collection\n    updateCollection(name, data) {\n        const uiInterface = lab_api.v1.collection.get(name);\n        if (uiInterface) {\n            const contentList = uiInterface.getContentList();\n            for (const item of contentList) {\n                // eslint-disable-next-line eqeqeq\n                if (item.model.get('instance_of') == data.id) {\n                    for (const field of Object.keys(data.fields)) {\n                        const key = field === 'caption' ? 'imageCaption' : field;\n                        item.model.set(`fields.${ key }`, data.fields[field], {\n                            notify: false, registerModified: false, save: false, undoable: false\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    getMarkup(items) {\n        return this.api.v1.util.dom.renderTemplate(this.template, {\n            items,\n            imageServer: this.imageServer,\n            width: 180\n        });\n    }\n\n}\n","export class MarkupValidator {\n\n    /**\n     * Fix missing end-tags etc. by inserting markup into a template and read out the (fixed) result.\n     * @param {String} input The markup to validate\n     * @returns {Promise<String|Error>} The validated, fixed markup\n     */\n    validate(input = '')  {\n        return new Promise((resolve, reject) => {\n            try {\n                // Use a template creating a DocumentFragment.\n                // This prevents the client from rendering any markup (including loading scripts)\n                // until the element actually is inserted into the DOM.\n                // If scripts are loaded they may modify the markup.\n                const tmpEl = document.createElement('template');\n                tmpEl.innerHTML = input.trim();\n                resolve(tmpEl.innerHTML.trim());\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    // (array)\n    createElements(markup) {\n        const fragment = document.createRange().createContextualFragment(markup);\n        return [...fragment.children];\n    }\n\n}\n","export const Namespace = {\n\n    // Create a globally available object for use by the view in the editor\n    expose: () => {\n        // Generate a citation article from a copy of text and source\n        lab_api.v1.ns.set('contextualmenu.callbacks.generateTopicSummary', (model, view, menuItem, params) => {\n            lab_api.v1.apps.start('TopicSummary', model, view);\n        });\n\n        // Generate a citation article from a copy of text and source\n        lab_api.v1.ns.set('contextualmenu.callbacks.generateCitationArticle', (model, view, menuItem, params) => {\n            lab_api.v1.apps.start('ArticleCitation', menuItem);\n        });\n\n        // Edit caption, byline and alt-text for original image. Useful for menu-items related to caption-editing of image-crops.\n        lab_api.v1.ns.set('contextualmenu.callbacks.editOriginalImageCaption', (model, view, menuItem, params) => {\n            if (menuItem && menuItem.tool) {\n                menuItem.tool.end();\n            }\n            lab_api.v1.apps.start('CaptionEditor', { id: model.get('instance_of') });\n        });\n\n        // For text-editors: Display a list of articles.\n        // Let user click an article to insert an a-tag at selection.\n        lab_api.v1.ns.set('contextualmenu.callbacks.insertArticleLink', (model, view, menuItem, params) => {\n\n            // Clicking on some element that did not capture the event inside the menu will trigger\n            // the blur-event of the bodytext. Disable and enable again in the callback.\n            menuItem.menu.tool.disableEndEvent();\n\n            if (!params.menu || !params.menu.name) {\n                Sys.logger.warning('insertArticleLink: Missing required param \"params.menu.name\".');\n                return;\n            }\n            lab_api.v1.collection.display({\n                name: params.menu.name,\n                modal: true,\n                options: {\n                    click: (uiInterface, targetModel, element, event) => {\n                        let url = targetModel.get('fields.published_url');\n                        if (url) {\n                            if (!url.startsWith('http')) {\n                                const site = lab_api.v1.site.getSiteById(targetModel.get('fields.site_id'));\n                                if (site) {\n                                    url = site.domain + url;\n                                }\n                            }\n\n                            // If text is selected: Use this for the link, if not: insert article title\n                            const selectedText = menuItem.menu.tool.domHelper.getSelectionHtml().trim();\n                            const title = targetModel.get('fields.title');\n                            if (selectedText) {\n                                menuItem.menu.tool.domHelper.removeSelectedContent();\n                            }\n                            menuItem.menu.tool.insertMarkup(` <a href=\"${ url }\">${ selectedText || title }</a> `);\n                        }\n                        lab_api.v1.collection.toggle({ name: uiInterface.getName(), modal: true });\n                    },\n                    end: (uiInterface) => {\n                        if (menuItem.menu.tool.element) {\n                            menuItem.menu.tool.element.focus();\n                        }\n                        menuItem.menu.tool.enableEndEvent();\n                    }\n                }\n            });\n        });\n\n        // For text-editors. Let user create a quote-box from selection\n        lab_api.v1.ns.set('contextualmenu.callbacks.insertQuote', (model, view, menuItem, params) => {\n\n            // Get selected text. Will expand to contents of dom-element.\n            const element = menuItem.menu.tool.domHelper.getEditableElementFromSelection(true, undefined, '.lab-bodytext-line');\n            if (!element) { return; }\n            const text = element.innerText;\n            if (!text) { return; }\n\n            // Get view-helper for bodytext\n            const viewHelper = lab_api.v1.view.getHelper('bodytext', view.getViewport());\n\n            // Get bodytext-element\n            const selector = viewHelper.getLineClassSelector();\n            const bodytextElement = lab_api.v1.util.dom.getParentByClass(element, menuItem.tool.getElement(), selector);\n            if (!bodytextElement) { return; }\n\n            // Get index for bodytext-element\n            const getIndex = (elmnts, target, classSelector) => {\n                let index = 0;\n                for (const el of elmnts) {\n                    if (el.classList.contains(classSelector)) {\n                        if (el === target) {\n                            return index;\n                        }\n                        index++;\n                    }\n                }\n                return null;\n            };\n            const index = getIndex(menuItem.tool.getElement().children, bodytextElement, selector);\n            if (index === null) { return; }\n\n            // Create element and insert\n            const quoteModel = lab_api.v1.model.create.view({\n                type: 'quotebox',\n                contentdata: {\n                    fields: {\n                        quote: text\n                    }\n                },\n                metadata: {\n                    float: {\n                        desktop: 'floatRight'\n                    },\n                    bodyTextIndex: index\n                },\n                width: 33.33\n            });\n            lab_api.v1.model.addChild(model, quoteModel, index);\n            menuItem.menu.tool.end();\n        });\n\n        lab_api.v1.ns.set('contextualmenu.callbacks.displayKicker', (model, view, menuItem, params) => {\n            if (view.get('metadata.kickerBelowImage') || view.get('metadata.floatingKicker') || view.get('metadata.kickerBelowTitle')) {\n                view.set('metadata.showKicker', true);\n            }\n        });\n\n        lab_api.v1.ns.set('contextualmenu.callbacks.rowFullwidth', (model, view, menuItem, params) => {\n            if (menuItem.getConfig('key') === 'metadata.fullWidthContent') {\n                view.set('metadata.isSection', false);\n            } else {\n                view.set('metadata.fullWidthContent', false);\n            }\n            if (view.get('metadata.fullWidthContent') || view.get('metadata.isSection')) {\n                view.set('metadata.fullWidthRow', true);\n            } else {\n                view.set('metadata.fullWidthRow', false);\n            }\n        });\n\n        // Set as \"callback\" for an invisible menu-item on article-boxes.\n        // Toggle metadata to display kicker, title and subtitle floating above the image.\n        lab_api.v1.ns.set('contextualmenu.callbacks.toggleTextOnImage', (model, view, menuItem, params) => {\n            const attributes = ['metadata.floatingTitle', 'metadata.floatingSubtitle', 'metadata.floatingKicker'];\n            let hasAttribute = false;\n            attributes.forEach((attr) => {\n                if (view.get(attr)) hasAttribute = true;\n            });\n            attributes.forEach((attr) => {\n                view.set(attr, !hasAttribute);\n            });\n        });\n\n        lab_api.v1.ns.set('contextualmenu.callbacks.disableAutoFontSize', (model, view, menuItem, params) => {\n            model.set('metadata.autoFontSizeEnabled', !model.get('metadata.autoFontSizeEnabled'));\n        });\n\n        // Set as \"valueTransformer\" in bindings for menu-items. Use \"valueTransformerOptions\" to specify key/value pairs to validate on.\n        lab_api.v1.ns.set('contextualmenu.valueTransformer.keyVal', (value, keyValuePairs, model, view) => {\n            if (!keyValuePairs) {\n                Sys.logger.debug('[keyVal] Missing required param \"keyValuePairs\" (object)');\n                return false;\n            }\n            for (const key of Object.keys(keyValuePairs)) {\n                if (view.get(key) !== keyValuePairs[key]) {\n                    return false;\n                }\n            }\n            return true;\n        });\n\n        // Add click-handler for elements inside bodytext to prevent editor from starting.\n        // This will happen when clicking somewhere inside the element but outside an editable dom-element.\n        // Method can be added to property 'redrawCallbacks' of elements inside bodytext\n        lab_api.v1.ns.set('eventhandlers.stopPropagation', (model, view) => {\n            view.getMarkup().addEventListener('click', (event) => {\n                event.stopPropagation();\n                event.preventDefault();\n            }, false);\n        });\n\n        // Add image to child.\n        // If params.addImageChildType is defined, add image to first child of type\n        lab_api.v1.ns.set('contextualmenu.callbacks.addImage', (model, view, menuItem, params) => {\n            lab_api.v1.collection.display({\n                name: 'MediaImages',\n                modal: true,\n                skipCache: true,\n                options: {\n                    clickHandler: (mediaModel, element) => {\n                        if (!params.addImageChildType) {\n                            lab_api.v1.model.replaceChildren(model, [mediaModel]);\n                            return;\n                        }\n                        const child = lab_api.v1.model.query.getChildrenOfType(model, params.addImageChildType);\n                        if (child.length) {\n                            lab_api.v1.model.replaceChildren(child[0], [mediaModel]);\n                        }\n                    }\n                }\n            });\n        });\n\n        // Remove first child on path\n        lab_api.v1.ns.set('contextualmenu.callbacks.removeChildByPath', (model, view, menuItem, params) => {\n            if (!params.removeChildPath) {\n                Sys.logger.warning('removeChildByPath: Missing required param \"params.removeChildPath\".');\n                return;\n            }\n            const childModel = lab_api.v1.model.query.getModelByPath(params.removeChildPath, true, false, [model]);\n            if (childModel) {\n                lab_api.v1.model.delete(childModel);\n            }\n        });\n\n        // Toggle element holding background image / video / other media element\n        lab_api.v1.ns.set('contextualmenu.callbacks.toggleMediaContainer', (model) => {\n            let mediaContainer = lab_api.v1.model.query.getChildOfType(model, 'mediaContainer');\n            if (mediaContainer) {\n                lab_api.v1.model.delete(mediaContainer);\n                return;\n            }\n            mediaContainer = lab_api.v1.model.create.view({\n                type: 'mediaContainer'\n            });\n            lab_api.v1.model.addChild(model, mediaContainer);\n        });\n        lab_api.v1.ns.set('contextualmenu.callbacks.toggleEditMediaContainer', (model) => {\n            const state = !model.get('state.editMediaContainer');\n            model.set('state.editMediaContainer', state);\n            for (const view of lab_api.v1.view.getViews(model)) {\n                if (state) {\n                    view.getMarkup().classList.add('edit-media-container');\n                } else {\n                    view.getMarkup().classList.remove('edit-media-container');\n                }\n            }\n            if (state) {\n                const fn = () => {\n                    lab_api.v1.ns.get('contextualmenu.callbacks.toggleEditMediaContainer')(model);\n                    lab_api.v1.tool.off('ended', fn);\n                };\n                lab_api.v1.tool.on('ended', fn);\n            }\n        });\n\n        // Display images from article of the button\n        lab_api.v1.ns.set('contextualmenu.callbacks.displayArticleImages', (model, view) => {\n            lab_api.v1.collection.display({\n                name: 'MediaImages', modal: false, skipCache: true, options: { articleId: model.get('instance_of') }\n            });\n        });\n\n        // Automatically create suggestions for new articles\n        if (lab_api.v1.model.root.getType() === 'page_article') {\n            lab_api.v1.view.on('ready', () => {\n                const listener = lab_api.v1.ns.get('textAssistant.listen');\n                if (listener) {\n                    listener();\n                }\n            });\n        }\n\n        // Display an app for displaying and inserting a previous version of a field\n        lab_api.v1.ns.set('contextualmenu.callbacks.openFieldVersions', (model, view, menuItem, params) => {\n            lab_api.v1.apps.start('FieldVersion', {\n                model,\n                field: 'bodytext',\n                selector: '.main > .bodytext',\n                callbacks: {\n                    end: (app) => {\n                        model.set('state.openBaseviewFieldVersions', false);\n                    }\n                }\n            });\n        });\n\n        // Trigger app for setting custom background color from image\n        // menuItem.getModel(), menuItem.getView(), menuItem, menuItem.config.params\n        lab_api.v1.ns.set('contextualmenu.callbacks.getImageColors', (model, view, menuItem, menuParams, callback) => {\n            const image = lab_api.v1.model.query.getChildOfType(model, 'image');\n            if (!image) {\n                return;\n            }\n            const imageView = lab_api.v1.view.getView(image, view.getViewport());\n            const domImage = imageView.getMarkup().querySelector('img');\n            if (!domImage) {\n                return;\n            }\n            lab_api.v1.apps.start('ImageColors', {\n                image: domImage,\n                targetModel: lab_api.v1.model.query.getRootModel(),\n                path: 'fields.pageBackgroundColorStyle',\n                pathDark: 'fields.pageBackgroundColorStyleDark',\n                resetPath: 'fields.pageBackgroundColor',\n                callback\n            });\n        });\n\n        // Toggle pinning of a notice in a live feed\n        lab_api.v1.ns.set('contextualmenu.callbacks.toggleNoticePin', (model, view, menuItem, menuParams, callback) => {\n            const livefeedModel = model.getParent();\n            if (!livefeedModel || livefeedModel.getType() !== 'livefeed') {\n                return;\n            }\n            const pinneNotices = [...(livefeedModel.get('fields.pinnedNotices_json') || [])];\n            const id = model.getId();\n            if (pinneNotices.includes(id)) {\n                pinneNotices.splice(pinneNotices.indexOf(id), 1);\n            } else {\n                pinneNotices.push(id);\n            }\n            livefeedModel.setFiltered('noFetch', false);\n            livefeedModel.resetExternalResource();\n            livefeedModel.set('fields.pinnedNotices_json', pinneNotices);\n        });\n    }\n};\n","import { DateTimeHelper } from './datetime/DateTimeHelper.js';\n\nexport class AdsHelper {\n\n    static getAdnuntiusSettings(api, model, view, adEnv, site, disableSkyscraper = false, disableTopBanner = false) {\n        // Find adUnits placed on current page in admin\n        const adnuntiusBiddingEnabled = (api.v1.config.get('contentbox_settings.adnuntiusAd.bidding') || {}).enabled || false;\n\n        function parseFormat(format, item) {\n            let config = '';\n            if (adnuntiusBiddingEnabled && format.prebidConfig) {\n                config = JSON.parse(format.prebidConfig);\n                if (Array.isArray(config)) [config] = config;\n                config = JSON.stringify(config);\n            }\n\n            return {\n                ...format,\n                prebidConfig: config,\n                metadata: item.metadata || []\n            };\n        }\n\n        const units = api.v1.config.get('contentbox_settings.adnuntiusAd.formats') || [];\n        const content = api.v1.config.getView(`insertDynamic.${ api.v1.model.root.getType().replace('page_', '') }.${ view.getViewport() }`, site.alias) || [];\n        const manualContent = api.v1.model.query.getChildrenOfType(model, 'adnuntiusAd', true, true);\n\n        const visibleUnits = [];\n        for (const item of content) {\n            const [format] = units.filter((unit) => item.content_data.fields.format === unit.format);\n            if (format && ((item.placement.key.includes('skyscraper_') === false && item.placement.key !== 'topbanner')\n                || (item.placement.key.includes('skyscraper_') && !disableSkyscraper)\n                || (item.placement.key === 'topbanner' && !disableTopBanner))) {\n                visibleUnits.push(parseFormat(format, item));\n            }\n        }\n        for (const childModel of manualContent) {\n            const [format] = units.filter((unit) => childModel.get('fields.format') === unit.format);\n            if (format) {\n                visibleUnits.push(parseFormat(format, childModel));\n            }\n        }\n\n        const dateHander = new DateTimeHelper();\n        const newsletterTargeting = dateHander.utcFormat(new Date(), '&tag=week_{{ W }}_{{ YYYY }}');\n\n        return {\n            enabled: units.length > 0,\n            lazyload: api.v1.config.get('contentbox_settings.adnuntiusAd.lazyload') || false,\n            adUnits: visibleUnits,\n            spacingTop: api.v1.config.get('contentbox_settings.adnuntiusAd.spacingTop') || 120,\n            fetchMarginPercent: adEnv.fetchMarginPercent || 150,\n            renderMarginPercent: adEnv.renderMarginPercent || 150,\n            bidding: {\n                enabled: adnuntiusBiddingEnabled\n            },\n            hideOnTabletWidth: adEnv.hideOnTabletWidth || 1316,\n            refreshdelay: api.v1.config.get('contentbox_settings.adnuntiusAd.refreshdelay') || 5,\n            refreshcount: api.v1.config.get('contentbox_settings.adnuntiusAd.refreshcount') || 1,\n            connectLoading: api.v1.config.get('contentbox_settings.adnuntiusAd.connectLoading') || false,\n            contkitEnabled: api.v1.config.get('contentbox_settings.adnuntiusAd.contkitEnabled') || false,\n            newsletter: {\n                targeting: newsletterTargeting\n            }\n        };\n    }\n\n    static getGoogleSettings(api, model, view, adEnv, site, disableSkyscraper = false, disableTopBanner = false) {\n        function parseFormat(format, item) {\n            const { sizes = [] } = format;\n            return {\n                ...format,\n                sizesString: `[${  sizes.map((size) => `[${ size.width },${ size.height }]`).join(', ') }]`,\n                metadata: item.metadata || []\n            };\n        }\n\n        const units = api.v1.config.get('contentbox_settings.googleAd.formats') || [];\n        const anchor = api.v1.config.get('contentbox_settings.googleAd.anchor') || { enabled: false, code: '', type: 'TOP_ANCHOR' };\n        const content = api.v1.config.getView(`insertDynamic.${ api.v1.model.root.getType().replace('page_', '') }.${ view.getViewport() }`, site.alias) || [];\n        const manualContent = api.v1.model.query.getChildrenOfType(model, 'googleAd', true, true);\n\n        const visibleUnits = [];\n        for (const item of content) {\n            const [format] = units.filter((unit) => item.content_data.fields.format === unit.format);\n            if (format && ((item.placement.key.includes('skyscraper_') === false && item.placement.key !== 'topbanner')\n                || (item.placement.key.includes('skyscraper_') && !disableSkyscraper)\n                || (item.placement.key === 'topbanner' && !disableTopBanner))) {\n                visibleUnits.push(parseFormat(format, item));\n            }\n        }\n        for (const childModel of manualContent) {\n            const [format] = units.filter((unit) => childModel.get('fields.format') === unit.format);\n            if (format) {\n                visibleUnits.push(parseFormat(format, childModel));\n            }\n        }\n\n        return {\n            enabled: units.length > 0,\n            lazyload: adEnv.lazyload || false,\n            spacingTop: api.v1.config.get('contentbox_settings.googleAd.spacingTop') || 120,\n            fetchMarginPercent: adEnv.fetchMarginPercent || 150,\n            renderMarginPercent: adEnv.renderMarginPercent || 150,\n            adUnits: visibleUnits,\n            anchor,\n            dfpid: adEnv.dfpid || false,\n            debugmode: adEnv.debugmode || false,\n            disableInitialLoad: adEnv.disableInitialLoad || false,\n            bidding: adEnv.bidding,\n            hideOnTabletWidth: adEnv.hideOnTabletWidth || 1316\n        };\n    }\n\n}\n","/**\n * AutoFontSize is a utility class designed to dynamically adjust font sizes and split text into parts based on specified criteria.\n * It provides functionality to ensure text fits within given constraints by adjusting font size and splitting text into even parts\n * or based on maximum word length and custom regular expressions.\n */\nexport class AutoFontSize {\n\n    /**\n     * Automatically sizes the text within an element based on the provided configuration.\n     *\n     * @param {HTMLElement} element - The element containing the text to be auto-sized.\n     * @param {Object} config - The configuration object for auto-sizing the text.\n     * @returns {string} - The modified HTML content of the element after auto-sizing the text.\n     */\n    static autoSizeText(element, config) {\n        const startFontSize = {\n            1: 100,\n            2: 70,\n            3: 50,\n            4: 45,\n            5: 40,\n            6: 35,\n            7: 30,\n            8: 26,\n            9: 22,\n            10: 20,\n            11: 18,\n            12: 17,\n            13: 16,\n            14: 15,\n            15: 14,\n            16: 13,\n            17: 12,\n            18: 11,\n            19: 10,\n            20: 9,\n            21: 8,\n            22: 7,\n            23: 6,\n            24: 5,\n            25: 4\n        };\n        const title = element.innerHTML.replace(/&nbsp;/, '');\n        if (element.querySelector('br') || element.querySelector('.auto-font-size-line-br')) {\n            const titleLines = this.handleBreaks(title);\n            element.innerHTML = ''; // eslint-disable-line no-param-reassign\n            titleLines.forEach((line, index) => {\n                element.innerHTML += `<span class=\"auto-font-size-line${ index < titleLines.length ? ' auto-font-size-line-br' : '' }\">${ line } </span>`;  // eslint-disable-line no-param-reassign\n            });\n        } else {\n            const titleWithSpaces = this.removeHTMLTags(title);\n            const titleLines = this.splitSentence(titleWithSpaces, config, 'default');\n            element.innerHTML = '';  // eslint-disable-line no-param-reassign\n            for (const line of titleLines) {\n                element.innerHTML += `<span class=\"auto-font-size-line\">${ line } </span>`;  // eslint-disable-line no-param-reassign\n            }\n        }\n\n        const titleSpans = element.querySelectorAll('.auto-font-size-line');\n        const maxTitleWidth = element.clientWidth;\n\n        for (const span of titleSpans) {\n            const stringLength = span.innerText.length;\n            const fontSize = startFontSize[stringLength] || 5;\n            if (span.clientWidth < maxTitleWidth) {\n                this.enlargeTitle(span, maxTitleWidth, fontSize);\n            } else if (span.clientWidth > maxTitleWidth) {\n                this.shrinkTitle(span, maxTitleWidth, fontSize);\n            }\n        }\n\n        return element.innerHTML;\n    }\n\n    /**\n     * Splits a title into lines based on HTML line breaks.\n     *\n     * @param {string} title - The title to be processed.\n     * @returns {string[]} An array of lines from the title.\n     */\n    static handleBreaks(title) {\n        const titleWithSpaces = this.removeHTMLTags(title);\n        let titleLines = titleWithSpaces.split(/<br\\s*[^>]*>/gi);\n        titleLines = titleLines.filter((line) => line.trim().length > 0);\n        return titleLines;\n    }\n\n    /**\n     * Removes the font size from the innerHTML of the given element.\n     * @param {HTMLElement} element - The element from which to remove the font size.\n     */\n    static removeFontSize(element) {\n        const title = element.innerHTML;\n        return this.removeHTMLTags(title);\n        // return element.innerHTML;\n    }\n\n    /**\n     * Removes HTML tags from a given title.\n     *\n     * @param {string} title - The title containing HTML tags.\n     * @returns {string} - The title with HTML tags removed.\n     */\n    static removeHTMLTags(title) {\n        let titleWithSpaces = title.replace(/<span class=\"auto-font-size-hyphen\">-<\\/span>\\s?/g, '');\n        titleWithSpaces = titleWithSpaces.replace(/<span class=\"[^\"]*\\bauto-font-size-line-br\\b[^\"]*\"[^>]*>(.*?)<\\/span>/g, '$1<br>');\n        titleWithSpaces = titleWithSpaces.replace(/<span class=\"[^\"]*\\bauto-font-size-line\\b[^\"]*\"[^>]*>(.*?)<\\/span>/g, '$1');\n        titleWithSpaces = titleWithSpaces.replace(/<span[^>]*>([^<]*)<\\/span>/g, '$1');\n        titleWithSpaces = titleWithSpaces.replace(/(\\r\\n|\\n|\\r)/g, '');\n        return titleWithSpaces;\n    }\n\n    /**\n     * Enlarges the title by adjusting the font size until it reaches the maximum title width.\n     *\n     * @param {HTMLElement} title - The title element to be enlarged.\n     * @param {number} maxTitleWidth - The maximum width that the title can occupy.\n     * @param {number} fontSize - The initial font size of the title.\n     */\n    static enlargeTitle(title, maxTitleWidth, fontSize, maxFontSize = 100) {\n        let newFontSize = fontSize;\n        while (title.clientWidth < maxTitleWidth && newFontSize <= maxFontSize) {\n            newFontSize += 1;\n            title.style.setProperty('--lab-auto-font-size', `${ newFontSize }cqi`);\n        }\n        while (title.clientWidth >= maxTitleWidth || newFontSize > maxFontSize) {\n            newFontSize -= 0.1;\n            title.style.setProperty('--lab-auto-font-size', `${ newFontSize }cqi`);\n        }\n    }\n\n    /**\n     * Shrinks the title font size until it fits within the specified maximum width.\n     *\n     * @param {HTMLElement} title - The title element to shrink the font size of.\n     * @param {number} maxTitleWidth - The maximum width that the title should fit within.\n     * @param {number} fontSize - The initial font size of the title.\n     */\n    static shrinkTitle(title, maxTitleWidth, fontSize) {\n        let newFontSize = fontSize;\n        while (title.clientWidth > maxTitleWidth) {\n            newFontSize -= 0.1;\n            title.style.setProperty('--lab-auto-font-size', `${ newFontSize }cqi`);\n        }\n    }\n\n    /**\n     * Splits a sentence into multiple lines based on given rules and container dimensions.\n     *\n     * @param {string} sentence - The sentence to be split.\n     * @param {object} rules - The rules to be applied for splitting the sentence.\n     * @param {object} container - The container dimensions.\n     * @returns {string[]} An array of lines resulting from splitting the sentence.\n     */\n    static splitSentence(sentence, rules, container) {\n        const { length } = sentence;\n        const rulesToUse = this.findRules(rules, container);\n        const rangeToUse = this.findNumberOfLines(rulesToUse.ranges, length) || 1;\n        const maxWordLength = rulesToUse.maxWordLength || null;\n        const minLineLength = rulesToUse.minLineLength || null;\n        const lines = this.splitTextEvenly(sentence, rangeToUse, maxWordLength, minLineLength, rules.regex) || [];\n        return lines;\n    }\n\n    /**\n     * Finds the rules to use for a given container.\n     *\n     * @param {object} rules - The rules object containing the formats.\n     * @param {string} container - The container for which to find the rules.\n     * @returns {object} - The rules to use for the given container.\n     */\n    static findRules(rules, container) {\n        const formatRules = rules.formats[container];\n        const rulesToUse = { ...formatRules };\n        return rulesToUse;\n    }\n\n    /**\n     * Finds the number of lines based on the given ranges and length.\n     *\n     * @param {Array<Object>} ranges - An array of range objects.\n     * @param {number} length - The length to compare against the range's maxCharacters.\n     * @returns {number} The number of lines.\n     */\n    static findNumberOfLines(ranges, length) {\n        const rangeToUse = { maxLineLength: 20, numberOfLines: 1 };\n        for (const range of ranges) {\n            if (length <= range.maxCharacters) {\n                rangeToUse.numberOfLines = range.numberOfLines;\n                rangeToUse.maxLineLength = range.maxCharacters / range.numberOfLines;\n                break;\n            }\n        }\n        return rangeToUse;\n    }\n\n    /**\n     * Replaces matches of the regex in the text with a placeholder.\n     *\n     * @param {Object} regex - The regular expressions to check and replace in the text.\n     * @param {string} text - The input text to be processed.\n     * @param {string} placeholder - The placeholder to replace matches with.\n     * @returns {string} The processed text with placeholders.\n     */\n    static checkRegex(regex, text, placeholder) {\n        let newText = text;\n        const matches = [];\n        const regexArray = Array.from(Object.entries(regex), ([, value]) => value);\n\n        regexArray.forEach((rule) => {\n            const expression = new RegExp(rule, 'g');\n            const foundMatches = newText.match(expression);\n            if (foundMatches) {\n                matches.push(...foundMatches);\n            }\n        });\n\n        matches.forEach((match) => {\n            const replacement = match.replace(/ /g, placeholder);\n            newText = newText.replace(match, replacement);\n        });\n\n        return newText;\n    }\n\n    /**\n     * Splits a string into parts based on the given parameters.\n     *\n     * @param {string} text - The input text to be split.\n     * @param {number} partSize - The maximum size of each part.\n     * @param {RegExp} regex - The regular expression used to check and replace text.\n     * @param {number} maxWordLength - The maximum length of each word.\n     * @returns {string[]} An array of parts after splitting the input text.\n     */\n    static splitStringIntoParts(text, partSize, regex, maxWordLength, numberOfLines) {\n        const regexPlaceholder = '___';\n        const newText = this.checkRegex(regex, text, regexPlaceholder);\n        const words = newText.split(' ');\n        const parts = [];\n        let currentPart = '';\n\n        words.forEach((wordRaw) => {\n            const word = wordRaw.trim().replace(new RegExp(regexPlaceholder, 'g'), ' ');\n\n            if (word.includes('-')) {\n                // Treat hyphenated words as a single unit\n                if (currentPart.length + word.length + 1 > partSize) {\n                    parts.push(currentPart);\n                    currentPart = word;\n                } else {\n                    currentPart += (currentPart.length > 0 ? ' ' : '') + word;\n                }\n            } else {\n                const chunks = this.splitWord(word, maxWordLength);\n                chunks.forEach((chunk, chunkIndex) => {\n                    if (currentPart.length + chunk.length + 1 > partSize) {\n                        parts.push(currentPart);\n                        currentPart = chunk;\n                    } else {\n                        currentPart += (currentPart.length > 0 ? ' ' : '') + chunk;\n                    }\n                    // Add hyphen if it's not the last chunk\n                    if (chunkIndex < chunks.length - 1) {\n                        currentPart += '<span class=\"auto-font-size-hyphen\">-</span>';\n                    }\n                });\n            }\n        });\n\n        if (currentPart.length > 0) {\n            parts.push(currentPart);\n        }\n\n        return parts;\n    }\n\n    /**\n     * Splits a word into chunks, adding hyphens if necessary.\n     *\n     * @param {string} word - The word to be split.\n     * @param {number} maxWordLength - The maximum length of each chunk.\n     * @returns {string[]} An array of word chunks.\n     */\n    static splitWord(word, maxWordLength) {\n        const chunks = [];\n        let remainingWord = word;\n\n        while (remainingWord.length > maxWordLength) {\n            chunks.push(remainingWord.substring(0, maxWordLength));\n            remainingWord = remainingWord.substring(maxWordLength);\n        }\n\n        if (remainingWord.length > 0) {\n            chunks.push(remainingWord);\n        }\n\n        return chunks;\n    }\n\n    /**\n     * Splits the given text evenly into a specified number of lines, ensuring that each line\n     * adheres to the maximum word length and minimum line length constraints.\n     *\n     * @param {string} text - The text to be split.\n     * @param {Object} rangeToUse - An object containing the number of lines to split the text into.\n     * @param {number} rangeToUse.numberOfLines - The number of lines to split the text into.\n     * @param {number} maxWordLength - The maximum length of a word in the split text.\n     * @param {number} [minLineLength] - The minimum length of a line in the split text.\n     * @param {RegExp} regex - The regular expression used to split the text.\n     * @returns {string[]} An array of strings, each representing a line of the split text.\n     */\n    static splitTextEvenly(text, rangeToUse, maxWordLength, minLineLength, regex) {\n        const newText = text.trim();\n        const partLength = Math.ceil(newText.length / rangeToUse.numberOfLines);\n        let lines = this.splitStringIntoParts(newText, partLength, regex, maxWordLength, rangeToUse.numberOfLines);\n\n        if (minLineLength) {\n            lines = this.mergeShortLines(lines, minLineLength);\n        }\n\n        if (lines.length > rangeToUse.numberOfLines) {\n            const hyphenRegex = /<span class=\"auto-font-size-hyphen\">-<\\/span>$/;\n            const lastLine = lines.pop();\n            if (hyphenRegex.test(lines[lines.length - 1])) {\n                lines[lines.length - 1] = lines[lines.length - 1].replace(hyphenRegex, '') + lastLine;\n            } else {\n                lines[lines.length - 1] += ` ${ lastLine }`;\n            }\n        }\n        return lines;\n    }\n\n    /**\n     * Merges lines that are shorter than a specified minimum length with adjacent lines, including the last line.\n     *\n     * @param {string[]} lines - The array of split lines.\n     * @param {number} minLength - The minimum length a line must have.\n     * @returns {string[]} The modified array of lines where all lines meet the minimum length.\n     */\n    static mergeShortLines(lines, minLength) {\n        const mergedLines = [];\n        for (let i = 0; i < lines.length; i++) {\n            let currentLine = lines[i].trim();\n\n            if (currentLine.length < minLength && i < lines.length - 1) {\n                currentLine += ` ${ lines[i + 1] }`;\n                i++;\n            }\n\n            mergedLines.push(currentLine);\n        }\n\n        if (mergedLines.length > 1) {\n            const lastLine = mergedLines[mergedLines.length - 1];\n            if (lastLine.length < minLength) {\n                mergedLines[mergedLines.length - 2] += ` ${ lastLine }`;\n                mergedLines.pop();\n            }\n        }\n\n        return mergedLines;\n    }\n\n}\n","export class AutodataHelper {\n\n    // Collect data defined in 'filtered.autodata' (cssObject, cssString, cssArray) and use to generate css class-names.\n    static parseCss(model, path = 'filtered.autodata') {\n\n        /*\n        Example of data-structure this method supports:\n        {\n            filtered: {\n                autodata: {\n                    cssObject: {\n                        key1: \"value_1\",\n                        key2: \"value_2\"\n                    },\n                    cssString: \"value_3 value_4\",\n                    cssArray: [\"value_5\", \"value_6\"]\n                }\n            }\n        }\n\n        Result: \"value_1 value_2 value_3 value_4 value_5 value_6\"\n        */\n\n        const autodata = model.get(path);\n        if (!autodata || typeof autodata !== 'object') {\n            return undefined;\n        }\n        const cssString = [\n            Object.values(autodata.cssObject || {}).join(' '),\n            autodata.cssString || '',\n            (autodata.cssArray || []).join(' ')\n        ].join(' ').trim();\n        return cssString;\n    }\n\n    // (object) Collect data defined in 'filtered.autodata.attributesObject' and use to generate key/value pairs for dom-attributes.\n    static parseAttributes(model) {\n\n        /*\n        Example of data-structure this method supports:\n        {\n            filtered: {\n                autodata: {\n                    attributesObject: {\n                        \"data-key1\": \"value_1\",\n                        \"data-key2\": \"value_2\"\n                    }\n                }\n            }\n        }\n\n        Result: [\n            { key: 'data-key1', value: 'value_1' },\n            { key: 'data-key2', value: 'value_2' }\n        ]\n\n        Template: (assume result is available at filtered.items)\n        <article {{ #filtered.items }} {{ key }}=\"{{ value }}\"{{ /filtered.items }}>...</article>\n\n        Parsed markup:\n        <article data-key1=\"value_1\" data-key2=\"value_2\">...</article>\n        */\n\n        const autodata = model.get('filtered.autodata.attributesObject');\n        if (!autodata || typeof autodata !== 'object') {\n            return undefined;\n        }\n        const result = Object.keys(autodata).map((key) => ({ key, value: autodata[key] }));\n        return result;\n    }\n\n    // (object) Collect data defined in 'filtered.autodata.custom' and use to generate arrays of key/value pairs.\n    static parseCustomData(model) {\n        /*\n        Example of data-structure this method supports:\n        {\n            filtered: {\n                autodata: {\n                    custom: {\n                        key1: {\n                            subkey1: \"value_1\",\n                            subkey2: \"value_2\"\n                        },\n                        key2: {\n                            subkey1: \"value_3\",\n                            subkey2: \"value_4\"\n                        }\n\n                    }\n                }\n            }\n        }\n\n        Result: {\n            key1: [\n                {\n                    key: \"subkey1\",\n                    value: \"value_1\"\n                },\n                {\n                    key: \"subkey2\",\n                    value: \"value_2\"\n                }\n            ],\n            key2: [\n                {\n                    key: \"subkey1\",\n                    value: \"value_3\"\n                },\n                {\n                    key: \"subkey2\",\n                    value: \"value_4\"\n                }\n            ]\n        }\n\n        Template-example: (assume result is available at filtered.items)\n        <ul class=\"something\">\n        {{ #filtered.items.key1 }}\n            <li class=\"{{ key }}\">{{ value }}</li>\n        {{ /filtered.items.key1 }}\n        </ul>\n        <ul class=\"something-else\">\n        {{ #filtered.items.key2 }}\n            <li class=\"{{ key }}\">{{ value }}</li>\n        {{ /filtered.items.key2 }}\n        </ul>\n\n        Parsed markup:\n        <ul class=\"something\">\n            <li class=\"subkey1\">value_1</li>\n            <li class=\"subkey2\">value_2</li>\n        </ul>\n        <ul class=\"something-else\">\n            <li class=\"subkey1\">value_3</li>\n            <li class=\"subkey2\">value_4</li>\n        </ul>\n        */\n\n        const autodata = model.get('filtered.autodata.custom');\n        if (!autodata || typeof autodata !== 'object') {\n            return undefined;\n        }\n        const result = {};\n        for (const key of Object.keys(autodata)) {\n            result[key] = Object.keys(autodata[key]).map((itemKey) => ({ key: itemKey, value: autodata[key][itemKey] }));\n        }\n        return result;\n    }\n\n    // Use data from feed and config for defined path to map autodata fields\n    // TODO: Support other types of autodata than labels\n    static parseCustomDataFromFeed(data, path) {\n        /*\n        Example of data-structure this method supports:\n        \"contentbox_settings\": {\n            \"articlescroller\": {\n                \"autodata\": {\n                    \"mapping\": {\n                        \"labels\": [\n                            {\n                                \"field\": \"fieldInFeed\",\n                                \"key\": \"autodataKey\"\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n\n        Result: {\n            labels: [\n                {\n                    key: \"subkey1\",\n                    value: \"value_1\"\n                },\n                {\n                    key: \"subkey2\",\n                    value: \"value_2\"\n                }\n            ]\n        }\n\n        Template-example: (depends on contentbox template. Assume result is available at autodata.labels)\n        {{ #autodata.labels }}\n            <div class=\"labels\">\n                <div class=\"label\" data-label-key=\"{{ key }}\" data-label-value=\"{{ value }}\"><span class=\"label-value\">{{ value }}</span></div>\n            </div>\n        {{ /autodata.labels }}\n\n         Example parsed markup (depends on contentbox template):\n         <div class=\"labels\">\n            <div class=\"label\" data-label-key=\"subkey1\" data-label-value=\"value_1\"><span class=\"label-value\">value_1</span></div>\n        </div>\n        */\n\n        const autodata = lab_api.v1.config.get(`${ path  }.autodata.mapping`) || {};\n        if (!autodata || typeof autodata !== 'object') {\n            return undefined;\n        }\n        const result = {\n            labels: []\n        };\n        if (autodata.labels) {\n            for (const key of Object.keys(autodata.labels)) {\n                if (data[autodata.labels[key]]) {\n                    result.labels.push({ key, value: data[autodata.labels[key]] });\n                }\n            }\n        }\n        return result;\n    }\n\n}\n","/**\n * ClientConfig\n * Get site-config and config-object that should be passed on to the client renderer.\n */\n\nexport class ClientConfig {\n\n    static buildConfig(api) {\n        return {\n            viewConfig: {\n                config: {\n                    customer: {\n                        paywall: {\n                            label: lab_api.v1.config.get('paywall.label') || {}\n                        },\n                        image: {\n                            defaultAspectRatio: lab_api.v1.config.get('image.defaultAspectRatio') || undefined\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n}\n","const contentLanguages = [\n    { name: 'Afrikaans', code: 'af' },\n    { name: 'Albanian - shqip', code: 'sq' },\n    { name: 'Amharic - አማርኛ', code: 'am' },\n    { name: 'Arabic - العربية', code: 'ar' },\n    { name: 'Aragonese - aragonés', code: 'an' },\n    { name: 'Armenian - հայերեն', code: 'hy' },\n    { name: 'Asturian - asturianu', code: 'ast' },\n    { name: 'Azerbaijani - azərbaycan dili', code: 'az' },\n    { name: 'Basque - euskara', code: 'eu' },\n    { name: 'Belarusian - беларуская', code: 'be' },\n    { name: 'Bengali - বাংলা', code: 'bn' },\n    { name: 'Bosnian - bosanski', code: 'bs' },\n    { name: 'Breton - brezhoneg', code: 'br' },\n    { name: 'Bulgarian - български', code: 'bg' },\n    { name: 'Catalan - català', code: 'ca' },\n    { name: 'Central Kurdish - کوردی (دەستنوسی عەرەبی)', code: 'ckb' },\n    { name: 'Chinese - 中文', code: 'zh' },\n    { name: 'Chinese (Hong Kong) - 中文（香港）', code: 'zh-HK' },\n    { name: 'Chinese (Simplified) - 中文（简体）', code: 'zh-CN' },\n    { name: 'Chinese (Traditional) - 中文（繁體）', code: 'zh-TW' },\n    { name: 'Corsican', code: 'co' },\n    { name: 'Croatian - hrvatski', code: 'hr' },\n    { name: 'Czech - čeština', code: 'cs' },\n    { name: 'Danish - dansk', code: 'da-DK' },\n    { name: 'Dutch - Nederlands', code: 'nl-NL' },\n    { name: 'Dutch - Belgium', code: 'nl-BE' },\n    { name: 'English (Australia)', code: 'en-AU' },\n    { name: 'English (Canada)', code: 'en-CA' },\n    { name: 'English (India)', code: 'en-IN' },\n    { name: 'English (New Zealand)', code: 'en-NZ' },\n    { name: 'English (South Africa)', code: 'en-ZA' },\n    { name: 'English (United Kingdom)', code: 'en-GB' },\n    { name: 'English (United States)', code: 'en-US' },\n    { name: 'Esperanto - esperanto', code: 'eo' },\n    { name: 'Estonian - eesti', code: 'et' },\n    { name: 'Faroese - føroyskt', code: 'fo' },\n    { name: 'Filipino', code: 'fil' },\n    { name: 'Finnish - suomi', code: 'fi-FI' },\n    { name: 'French (Canada) - français (Canada)', code: 'fr-CA' },\n    { name: 'French (France) - français (France)', code: 'fr-FR' },\n    { name: 'French (Switzerland) - français (Suisse)', code: 'fr-CH' },\n    { name: 'Galician - galego', code: 'gl' },\n    { name: 'Georgian - ქართული', code: 'ka' },\n    { name: 'German (Austria) - Deutsch (Österreich)', code: 'de-AT' },\n    { name: 'German (Germany) - Deutsch (Deutschland)', code: 'de-DE' },\n    { name: 'German (Liechtenstein) - Deutsch (Liechtenstein)', code: 'de-LI' },\n    { name: 'German (Switzerland) - Deutsch (Schweiz)', code: 'de-CH' },\n    { name: 'Greek - Ελληνικά', code: 'el' },\n    { name: 'Greenlandic - Kalaallisut', code: 'kl-GL' },\n    { name: 'Greenlandic - Danish', code: 'da-GL' },\n    { name: 'Guarani', code: 'gn' },\n    { name: 'Gujarati - ગુજરાતી', code: 'gu' },\n    { name: 'Hausa', code: 'ha' },\n    { name: 'Hawaiian - ʻŌlelo Hawaiʻi', code: 'haw' },\n    { name: 'Hebrew - עברית', code: 'he' },\n    { name: 'Hindi - हिन्दी', code: 'hi' },\n    { name: 'Hungarian - magyar', code: 'hu' },\n    { name: 'Icelandic - íslenska', code: 'is' },\n    { name: 'Indonesian - Indonesia', code: 'id' },\n    { name: 'Interlingua', code: 'ia' },\n    { name: 'Irish - Gaeilge', code: 'ga' },\n    { name: 'Italian - italiano', code: 'it' },\n    { name: 'Italian (Italy) - italiano (Italia)', code: 'it-IT' },\n    { name: 'Italian (Switzerland) - italiano (Svizzera)', code: 'it-CH' },\n    { name: 'Japanese - 日本語', code: 'ja-JP' },\n    { name: 'Kannada - ಕನ್ನಡ', code: 'kn' },\n    { name: 'Kazakh - қазақ тілі', code: 'kk' },\n    { name: 'Khmer - ខ្មែរ', code: 'km' },\n    { name: 'Korean - 한국어', code: 'ko' },\n    { name: 'Kurdish - Kurdî', code: 'ku' },\n    { name: 'Kyrgyz - кыргызча', code: 'ky' },\n    { name: 'Lao - ລາວ', code: 'lo' },\n    { name: 'Latin', code: 'la' },\n    { name: 'Latvian - latviešu', code: 'lv' },\n    { name: 'Lingala - lingála', code: 'ln' },\n    { name: 'Lithuanian - lietuvių', code: 'lt' },\n    { name: 'Macedonian - македонски', code: 'mk' },\n    { name: 'Malay - Bahasa Melayu', code: 'ms' },\n    { name: 'Malayalam - മലയാളം', code: 'ml' },\n    { name: 'Maltese - Malti', code: 'mt' },\n    { name: 'Marathi - मराठी', code: 'mr' },\n    { name: 'Mongolian - монгол', code: 'mn' },\n    { name: 'Nepali - नेपाली', code: 'ne' },\n    { name: 'Norwegian Bokmål - norsk bokmål', code: 'nb-NO' },\n    { name: 'Norwegian Nynorsk - nynorsk', code: 'nn-NO' },\n    { name: 'Occitan', code: 'oc' },\n    { name: 'Oriya - ଓଡ଼ିଆ', code: 'or' },\n    { name: 'Oromo - Oromoo', code: 'om' },\n    { name: 'Pashto - پښتو', code: 'ps' },\n    { name: 'Persian - فارسی', code: 'fa' },\n    { name: 'Polish - polski', code: 'pl-PL' },\n    { name: 'Portuguese - português', code: 'pt' },\n    { name: 'Portuguese (Brazil) - português (Brasil)', code: 'pt-BR' },\n    { name: 'Portuguese (Portugal) - português (Portugal)', code: 'pt-PT' },\n    { name: 'Punjabi - ਪੰਜਾਬੀ', code: 'pa' },\n    { name: 'Quechua', code: 'qu' },\n    { name: 'Romanian - română', code: 'ro' },\n    { name: 'Romanian (Moldova) - română (Moldova)', code: 'mo' },\n    { name: 'Romansh - rumantsch', code: 'rm' },\n    { name: 'Russian - русский', code: 'ru' },\n    { name: 'Sami (Finland)', code: 'se-FI' },\n    { name: 'Sami (Norway)', code: 'se-NO' },\n    { name: 'Sami (Sweden)', code: 'se-SE' },\n    { name: 'Scottish Gaelic', code: 'gd' },\n    { name: 'Serbian - српски', code: 'sr' },\n    { name: 'Serbo - Croatian', code: 'sh' },\n    { name: 'Shona - chiShona', code: 'sn' },\n    { name: 'Sindhi', code: 'sd' },\n    { name: 'Sinhala - සිංහල', code: 'si' },\n    { name: 'Slovak - slovenčina', code: 'sk' },\n    { name: 'Slovenian - slovenščina', code: 'sl' },\n    { name: 'Somali - Soomaali', code: 'so' },\n    { name: 'Southern Sotho', code: 'st' },\n    { name: 'Spanish - español', code: 'es' },\n    { name: 'Spanish (Argentina) - español (Argentina)', code: 'es-AR' },\n    { name: 'Spanish (Latin America) - español (Latinoamérica)', code: 'es-419' },\n    { name: 'Spanish (Mexico) - español (México)', code: 'es-MX' },\n    { name: 'Spanish (Spain) - español (España)', code: 'es-ES' },\n    { name: 'Spanish (United States) - español (Estados Unidos)', code: 'es-US' },\n    { name: 'Sundanese', code: 'su' },\n    { name: 'Swahili - Kiswahili', code: 'sw' },\n    { name: 'Swedish - svenska', code: 'sv-SE' },\n    { name: 'Tajik - тоҷикӣ', code: 'tg' },\n    { name: 'Tamil - தமிழ்', code: 'ta' },\n    { name: 'Tatar', code: 'tt' },\n    { name: 'Telugu - తెలుగు', code: 'te' },\n    { name: 'Thai - ไทย', code: 'th' },\n    { name: 'Tigrinya - ትግርኛ', code: 'ti' },\n    { name: 'Tongan - lea fakatonga', code: 'to' },\n    { name: 'Turkish - Türkçe', code: 'tr' },\n    { name: 'Turkmen', code: 'tk' },\n    { name: 'Twi', code: 'tw' },\n    { name: 'Ukrainian - українська', code: 'uk' },\n    { name: 'Urdu - اردو', code: 'ur' },\n    { name: 'Uyghur', code: 'ug' },\n    { name: 'Uzbek - o‘zbek', code: 'uz' },\n    { name: 'Vietnamese - Tiếng Việt', code: 'vi' },\n    { name: 'Walloon - wa', code: 'wa' },\n    { name: 'Welsh - Cymraeg', code: 'cy' },\n    { name: 'Western Frisian', code: 'fy' },\n    { name: 'Xhosa', code: 'xh' },\n    { name: 'Yiddish', code: 'yi' },\n    { name: 'Yoruba - Èdè Yorùbá', code: 'yo' },\n    { name: 'Zulu - isiZulu', code: 'zu' }\n];\n\nexport default contentLanguages;\n","export class CustomTags {\n\n    /*\n    Transform list of tags to something templates may print.\n    Config may be set in admin-tool 'customtags'\n    Supported tags: meta, script, link\n    Supported placements: head_top, head_bottom, body_top, body_bottom\n    Input: [ { tag, placement, attributes, pageType, value }, ... ]\n    Note: 'value' is only used by 'script'\n    Output:\n    {\n        script: {\n            head_top: ['<tag_1>', '<tag_2>'],\n            head_bottom: [],\n            body_top: [],\n            body_bottom: []\n        },\n        meta: { ... },\n        link: { ... }\n    }\n    */\n    static prepareForTemplate(tags, pageType, isEditMode) {\n        const result = {\n            meta: {\n                head_top: [],\n                head_bottom: []\n            },\n            script: {\n                head_top: [],\n                head_bottom: [],\n                body_top: [],\n                body_bottom: []\n            },\n            style: {\n                head_top: [],\n                head_bottom: []\n            },\n            link: {\n                head_top: [],\n                head_bottom: []\n            }\n        };\n        const filtered = tags.filter((tag) => (!tag.pageType || tag.pageType === pageType) && !(tag.skipEditor && isEditMode));\n        for (const tag of Object.keys(result)) {\n            for (const placement of Object.keys(result[tag])) {\n                result.meta[placement] = filtered.filter((item) => item.tag === 'meta').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));\n                result.script[placement] = filtered.filter((item) => item.tag === 'script').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));\n                result.style[placement] = filtered.filter((item) => item.tag === 'style').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));\n                result.link[placement] = filtered.filter((item) => item.tag === 'link').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));\n            }\n        }\n        console.log(result);\n        return result;\n    }\n\n    static createCustomTag(item) {\n        switch (item.tag) {\n            case 'link':\n                return this.createLinkTag(item);\n            case 'script':\n                return this.createScriptTag(item);\n            case 'style':\n                return this.createStyleTag(item);\n            default:\n                return this.createMetaTag(item);\n        }\n    }\n\n    static fetchDynamicAttribute(value) {\n        return lab_api.v1.view.render({ model: lab_api.v1.model.query.getRootModel(), template: value }) || null;\n    }\n\n    static parseAttributes(attributes) {\n        const attrs = attributes.filter((attr) => !!attr.key).map((attr) => (attr.value ? `${ attr.key }=\"${ attr.value.match(/\\{\\{.*\\}\\}/g) ? this.fetchDynamicAttribute(attr.value) : attr.value }\"` : attr.key));\n        return attrs.join(' ');\n    }\n\n    static parseVariables(value) {\n        return value.replace(/\\{\\{\\{?.*?\\}\\}\\}?/g, this.fetchDynamicAttribute);\n    }\n\n    // <link rel=\"shortcut icon\" type=\"image/png\" sizes=\"256x256\" href=\"/images/favicon_256x256.png\">\n    static createLinkTag(item) {\n        return `<link ${ this.parseAttributes(item.attributes) }>`;\n    }\n\n    // <script type=\"text/javascript\" src=\"/js/cms/LabUtils/Form.js?v=2\"></script>\n    static createScriptTag(item) {\n        return `<script ${ this.parseAttributes(item.attributes) }>${ item.value ? this.parseVariables(item.value) : '' }</script>`;\n    }\n\n    // <meta charset=\"UTF-8\">\n    static createMetaTag(item) {\n        return `<meta ${ this.parseAttributes(item.attributes) }>`;\n    }\n\n    // <style>body { background-color: lightblue; }</style>\n    static createStyleTag(item) {\n        return `<style ${ this.parseAttributes(item.attributes) }>${ item.value ? this.parseVariables(item.value) : '' }</style>`;\n    }\n\n}\n","export class ExpandableOptions {\n\n    // (object) Get settings for an expandable contentbox.\n    // The box needs css to display the toggle-element and to hide collapsed content.\n    // ViewSupport.expandableOptions = function(configPath, expanded) {\n    // params: { options, configPath, expanded }\n    // \"options\" is an object containing config. If not set \"configPath\" is used to read config.\n    static run(params) {\n\n        const siteOptions = params.options || lab_api.v1.config.get(params.configPath) || {};\n\n        // Define default settings and merge with site-settings.\n        // The factbox is default visible on desktop (collapsedState.desktop = false), collapsed on mobile (collapsedState.mobile = true).\n        const options = lab_api.v1.util.object.merge({\n\n            // Content for kicker-element on top of the box\n            kicker: null,\n\n            // Editable kicker element\n            kicker_editable: false,\n\n            // Is the box expandable?\n            expandable: {\n                mobile: true,\n                desktop: true\n            },\n\n            // Can a collapsed box expand?\n            collapsable: {\n                mobile: true,\n                desktop: true\n            },\n\n            // Collapsed state\n            collapsedState: {\n                mobile: true,\n                desktop: false\n            },\n\n            // Do the box need js to handle collapsed state?\n            needJs: false,\n\n            // How should the box style a collapsed box?\n            style: 'fade' // Options: 'fade': Display some of the fact-content, fade to transparent. ''hide': Only display title and optional kicker.\n\n        }, siteOptions);\n\n        // Let template reflect state for all viewports\n        const cssStrings = [`style-${  options.style }`];\n        for (const vp in options.expandable) {\n            if (options.expandable[vp]) {\n                cssStrings.push(`expandable-${  vp }`);\n            }\n        }\n        for (const vp in options.collapsable) {\n            if (options.collapsable[vp]) {\n                cssStrings.push(`collapsable-${  vp }`);\n            }\n        }\n        options.needJs = cssStrings.length > 0;\n        options.cssString = cssStrings.join(' ');\n\n        return options;\n    }\n\n}\n","// Baseview fragment-api\n// Return a subset of page-data to the drawing engine\n// Supports 'path' and 'guid'\n// Url: ?lab_path=dropZone[0]/row[2]&lab_selector=lab-dz-1\n// Url: ?lab_guid=cdbcdd28-52c3-4c33-c54a-cb54e0480d6f&lab_selector=lab-dz-1\n// For embedded content: ?lab_viewport=embed&lab_path=dropZone[0]/row[2]/article[0]\n\nexport class FragmentHelper {\n\n    constructor(api) {\n        this.api = api;\n        this.request = this.api.v1.util.request;\n    }\n\n    listen() {\n        const options = {\n            selector: this.request.getQueryParam('lab_selector') || 'contentFromPath',\n            path: this.request.getQueryParam('lab_path'),\n            guid: this.request.getQueryParam('lab_guid')\n        };\n\n        // Debug:\n        // options.path = 'dropZone[0]/row[1]';\n        // options.path = 'dropZone/row[1]/*[1]';\n        // options.path = 'article[2]/image';\n        // options.path = 'image[3]';\n        // options.path = 'dropZone[0]/row';\n        // options.guid = '634afc87-1b4d-4005-b413-d09905caf072';\n\n        if (options.guid || options.path) {\n            // If listener returns an array it will replace models to render.\n            // Return undefined to let drawing engine ignore listener.\n            this.api.v1.model.on('insert', (models) => {\n                const model = options.guid ? this.getModelByGuid(options.guid, models) : this.getModelByPath(options.path, models);\n                if (model) {\n                    Sys.logger.debug(`[FragmentHelper] Element found. Path: ${ model.getPositionedPath() }, GUID: ${ model.getGuid() }.`);\n                    model.setSelector(options.selector);\n                    if (lab_api.v1.viewport.getName() === 'embed') {\n                        return this.appendToRoot(models, model);\n                    }\n                    return [model];\n                }\n                return undefined;\n            });\n        }\n    }\n\n    // (LabModel / null)\n    getModelByGuid(guid) {\n        Sys.logger.debug(`[FragmentHelper] Will filter elements by guid: \"${ guid }\".`);\n        return this.api.v1.model.query.getModelByGuid(guid);\n    }\n\n    // (LabModel / null)\n    getModelByPath(path, models) {\n        Sys.logger.debug(`[FragmentHelper] Will filter elements by path: \"${ path }\".`);\n        const pathInfo = this.api.v1.util.string.parsePath(path);\n        if (!pathInfo[0]) { return null; }\n        const sources = this.api.v1.model.query.getModelsByType(pathInfo[0].base, models);\n        return this.api.v1.model.query.getModelByPath(path, true, false, sources);\n    }\n\n    // (array)\n    // The 'embed'-viewport draws fragments as children of the page-element.\n    // Replace children of the root-model with 'models' and return new array.\n    appendToRoot(models, model) {\n        const rootModel = models[0];\n        rootModel.children = [model];\n        return [rootModel];\n    }\n\n}\n","import contentLanguages from './ContentLanguages.js';\n\n/**\n * Add retry-method for generating content ()\n */\n\nexport class LabradorAi {\n\n    /**\n     * Labrador AI helper class for the TextAssistant plugin\n     * The Labrador AI helper class will handle the configuration and generation of content from Labrador AI\n     * Methods are used both from admin page 'Labrador AI' as well as from contextual menues through the TextAssistant plugin\n     * The Labrador AI helper class will also handle a generalised settings modal for the AI feature\n     * @param {*} api Labrador API\n     * @param {*} rootModel Uppermost parent model\n     */\n\n    constructor(api, rootModel) {\n        this.api = api;\n        this.rootModel = rootModel;\n        this.promptInstructions = this.api.v1.config.get('promptInstructions');\n        this.siteInfo = this.getSiteInfo();\n    }\n\n    getSiteInfo(sitealias = null) {\n        /**\n         * Get the alias of the current site\n         */\n        let site;\n        if (sitealias) {\n            site = this.api.v1.site.getSite(sitealias);\n        } else {\n            site = this.api.v1.site.getSite();\n        }\n        if (site) {\n            const siteInfo = {\n                alias: site.alias\n            };\n            if (site.display_name && site.display_name.length > 0 && site.display_name !== site.alias) {\n                siteInfo.display_name = site.display_name;\n            }\n            if (site.domain && site.domain.length > 0) {\n                siteInfo.domain = site.domain;\n            }\n            return siteInfo;\n        }\n        return null;\n    }\n\n    getPromptConfig(featureParams = null, customParams = null) {\n        /**\n         * Get the prompt configuration for the current feature, as defined in admin page Labrador AI for the current site\n         * @param {Object} featureParams - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         * @param {Object} customParams - The custom field values to override the default values (like fields stored on a factbox-element)\n         */\n\n        // Admin config values for Labrador AI to be used as default values\n        this.configAdmin = this.api.v1.config.getConfig(`pages.labradorAi.data.items.${ featureParams.featureName }`);\n        const featureItems = this.configAdmin?.items || {};\n        for (const promptLevel of ['promptBase', 'promptSite', 'promptPage']) {\n            if (featureItems[promptLevel] && featureItems[promptLevel].defaultValue) {\n                featureItems[promptLevel] = featureItems[promptLevel].defaultValue;\n            }\n            if (!featureItems[promptLevel]) {\n                featureItems[promptLevel] = '';\n            }\n        }\n\n        // Site specific config values (as overridden in Admin page 'Labrador AI')\n        let siteItems;\n        this.siteAlias = featureParams.siteAlias || this.siteInfo.alias;\n        this.configSite = this.api.v1.config.get('labradorAi', { site: this.siteAlias });\n        if (this.configSite) {\n            siteItems = this.configSite[featureParams.featureName];\n        }\n\n        // Config from 'Prompt instructions' for the current feature\n        this.promptInstructionsFeature = null;\n        if (this.promptInstructions && this.promptInstructions.feature && this.promptInstructions.feature[featureParams.featureName]) {\n            this.promptInstructionsFeature = this.promptInstructions.feature[featureParams.featureName];\n        }\n\n        if (this.promptInstructionsFeature && this.promptInstructionsFeature.items) {\n            for (const item of Object.keys(this.promptInstructionsFeature.items)) {\n                featureItems[item] = this.promptInstructionsFeature.items[item];\n            }\n        }\n        // CustomParams, like fields stored on a Labrador-model\n        if (customParams) {\n            for (const param of Object.keys(customParams)) {\n                if (!featureItems[param]) {\n                    featureItems[param] = featureParams[param];\n                }\n            }\n        }\n\n        let promptConfig = {\n            siteLanguage: this.getPageLanguage(this.siteAlias, 'code', false),\n            pageLanguage: this.getPageLanguage(this.siteAlias, 'code', true),\n            siteAlias: this.siteAlias,\n            siteDomain: this.siteInfo.domain,\n            siteName: this.siteInfo.display_name || this.siteAlias\n        };\n        if (this.configSite && this.configSite.globalSettings && this.configSite.globalSettings.siteName && this.configSite.globalSettings.siteName.length > 0) {\n            promptConfig.siteName = this.configSite.globalSettings.siteName;\n        }\n\n        /**\n         * promptConfig priority/fallback:\n         * 1. Article/model config\n         * 2. Site config\n         * 3. Prompt instructions config\n         * 4. Admin config (default values)\n         */\n        if (featureItems) {\n            for (const item of Object.keys(featureItems)) {\n                // Admin: Default values from admin config\n\n                if (featureItems[item] && featureItems[item].defaultValue) {\n                    promptConfig[item] = featureItems[item].defaultValue;\n                }\n                if (promptConfig[item] === '' && featureItems[item]?.contentType === 'checkbox') {\n                    promptConfig[item] = false;\n                }\n\n                // Prompt-config: If prompt instruction has a defined value, then use it\n                if (this.promptInstructionsFeature && this.promptInstructionsFeature[item]) {\n                    promptConfig[item] = this.promptInstructionsFeature[item];\n                }\n\n                // Site: If site config has a defined value, then use it\n                if (siteItems && siteItems[item]) {\n                    promptConfig[item] = siteItems[item];\n                }\n\n                // Model: If article or feature element has defined values, then use them\n                if (customParams && customParams[item] !== undefined && !['promptBase'].includes(item)) {\n                    promptConfig[item] = customParams[item];\n                }\n\n            }\n        }\n\n        if (featureParams && featureParams.emptySitePromptForDemo && featureParams.emptySitePromptForDemo === true) {\n            promptConfig.promptSite = '';\n        }\n\n        // Update language in promptConfig\n        promptConfig = this.updateLanguageInConfig(promptConfig);\n\n        // Add general instructions in prompt-config to promptConfig\n        for (const instruction of Object.keys(this.promptInstructions.general)) {\n            promptConfig[instruction] = this.promptInstructions.general[instruction];\n        }\n\n        return promptConfig;\n    }\n\n    updateLanguageInConfig(config) {\n        /**\n         * Update the language in the prompt configuration\n         * Priority: customLanguage > language > siteLanguage\n         * CustomLanguage is a custom string defining the language set in the prompt instructions\n         * @param {Object} config - The prompt configuration to update the language in\n         */\n\n        const promptConfig = config;\n        if (promptConfig.specifyLanguage && (promptConfig.specifyLanguage === 'true' || promptConfig.specifyLanguage === true)) {\n            promptConfig.languageName = this.getLanguageNameByCode(promptConfig.languageContent);\n            promptConfig.languageCode = promptConfig.languageContent;\n        } else if (promptConfig.languageSiteSetting === 'siteLanguage') {\n            promptConfig.languageName = this.getPageLanguage(promptConfig.siteAlias, 'name', true);\n            promptConfig.languageCode = this.getPageLanguage(promptConfig.siteAlias, 'code', true);\n        } else {\n            // Default to seo language or site language if nothing is specified\n            promptConfig.languageName = this.getPageLanguage(promptConfig.siteAlias, 'name', true);\n            promptConfig.languageCode = this.getPageLanguage(promptConfig.siteAlias, 'code', true);\n        }\n        return promptConfig;\n    }\n\n    getAiSettings(promptConfig) {\n        /**\n         * Get the AI settings for the current feature, as defined in admin page Labrador AI for the current site.\n         * Passed on to backend AI integration for generation of content\n         * Default to provider/model set in 'prompt instructions'-config\n         * @param {Object} promptConfig - The prompt configuration to get the AI settings for\n         */\n\n        // Use customer defined provider, if set in promptConfig\n        if (promptConfig?.aiProvider && this.promptInstructions?.aiProvider && this.promptInstructions.aiProvider[promptConfig.aiProvider]) {\n            return this.promptInstructions.aiProvider[promptConfig.aiProvider];\n        }\n\n        // Fallback to default provider, as set in \"prompt instructions\"\n        if (this.promptInstructionsFeature?.providerDefault && this.promptInstructions.aiProvider[this.promptInstructionsFeature.providerDefault]) {\n            return this.promptInstructions.aiProvider[this.promptInstructionsFeature.providerDefault];\n        }\n\n        const defaultAiProvider = 'openAi-gpt4o';\n\n        const aiProvider = this.promptInstructions.aiProvider[defaultAiProvider];\n        aiProvider.searchForKeywords = promptConfig.searchForKeywords || [];\n        return aiProvider;\n    }\n\n    getOriginalContent(labradorModel, fields) {\n        /**\n         * Get the original content of the article, to be used as a base or context for the prompt\n         */\n        const originalContent = {};\n        for (const field of fields) {\n            const fieldContent = labradorModel.get(`fields.${ field }`);\n            if (fieldContent && fieldContent.length > 0) {\n                originalContent[field] = fieldContent;\n            }\n\n        }\n        return originalContent;\n    }\n\n    prepareCustomParams(labradorModel, params = {}) {\n        /**\n         * Prepare custom parameters for the prompt, based on the fields stored on the Labrador element-model\n         *\n         * This method is used to fetch stored data in the fields of the Labrador element-model\n         * @param {Object} labradorModel - The Labrador element-model\n         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         */\n        const customParams = params;\n        if (labradorModel) {\n            this.configAdmin = this.api.v1.config.getConfig(`pages.labradorAi.data.items.${ params.featureName }`);\n            if (this.configAdmin && this.configAdmin.items) {\n                const configItems = Object.keys(this.configAdmin.items);\n                if (this.promptInstructionsFeature && this.promptInstructionsFeature.items) {\n                    for (const item of Object.keys(this.promptInstructionsFeature.items)) {\n                        if (!configItems.includes(item)) {\n                            configItems.push(item);\n                        }\n                    }\n                }\n                for (const item of configItems) {\n                    // Get stored fields from the model\n                    const customSetting = labradorModel.get(`fields.labradorAi_${ params.featureName }_${ item }`, null, true);\n\n                    // Exception for promptPage, due to sending empty strings\n                    if (item === 'promptPage' && customSetting !== undefined) {\n                        customParams[item] = customSetting;\n                    }\n\n                    if (customSetting !== undefined && customSetting.length > 0) {\n                        if (customSetting === 'true') {\n                            customParams[item] = true;\n\n                        } else if (customSetting === 'false') {\n                            customParams[item] = false;\n                        } else {\n                            customParams[item] = customSetting;\n                        }\n                    }\n\n                }\n            }\n        }\n        return customParams;\n    }\n\n    getPrompt(promptConfig, originalFields = null) {\n        /**\n         * Get the prompt for the current feature, as defined by config in admin page Labrador AI for the current site\n         * @param {Object} promptConfig - The prompt configuration to render the prompt with\n         * @param {Object} originalFields - The original fields of the article to use as context for the prompt\n         */\n\n        if (!promptConfig) {\n            return '';\n        }\n        const config = promptConfig;\n        let fields = originalFields;\n        if (!fields) {\n            fields = this.getOriginalContent(this.rootModel, ['title', 'subtitle', 'bodytext', 'modified', 'created', 'published']);\n        }\n\n        // Get the original content of the article\n        if (fields) {\n            for (const field of Object.keys(fields)) {\n                // Handle date format\n                if (field === 'created' || field === 'modified' || field === 'published') {\n                    const timestamp = Number(fields[field]) * 1000;\n                    if (timestamp) {\n                        fields[field] = new Date(timestamp);\n                    }\n\n                }\n                if (fields[field]) {\n                    config[`original_${ field }`] = fields[field];\n                }\n            }\n        }\n\n        // Build the unrendered prompt\n        let unRenderedPrompt = config.promptBase;\n\n        // Add site prompt\n        if ((config.promptSite && config.promptSite.length > 0) || (config.promptPage && config.promptPage.length > 0)) {\n            unRenderedPrompt += `\\n In particular, it is extremly important to follow these instructions: \\n`;\n\n            if (config.promptSite && config.promptSite.length > 0) {\n                unRenderedPrompt += `- ${ config.promptSite }\\n`;\n            }\n\n            if (config.promptPage && config.promptPage.length > 0) {\n                unRenderedPrompt += `- ${ config.promptPage }\\n`;\n            }\n        }\n\n        // Add general error handling\n        /*\n        if (config.errorResponse && config.errorResponse.length > 0) {\n            unRenderedPrompt += config.errorResponse;\n        } */\n\n        // Add original article content (context)\n        if (fields && config.originalContent) {\n            unRenderedPrompt += config.originalContent;\n        }\n\n        const prompt = this.api.v1.util.dom.renderTemplate(unRenderedPrompt, { params: config });\n        return prompt;\n    }\n\n    getDefaultAiSettingsTemplate() {\n        /**\n         * Get the default template for the AI feature settings modal\n         * The template will be used to render the settings modal for the AI feature\n         */\n        return `\n        {{#formFields}}\n            {{#showInGeneral}}\n                {{#isTextarea}}\n                    <div class=\"lab-formgroup lab-grid-gap lab-grid-large-12 lab-grid-small-12\">\n                            <label for=\"{{key}}\"><b>{{label}}</b></label>\n                            <textarea id=\"{{key}}\" class=\"featureSetting\" name=\"{{key}}\" placeholder=\"{{placeholder}}\" style=\"height: 100px;\">{{defaultValue}}</textarea>\n                    </div>\n                {{/isTextarea}}\n\n                {{#isSelect}}\n                <div class=\"lab-formgroup lab-grid-gap lab-grid-large-6 lab-grid-small-12\">\n\n                    <label for=\"{{key}}\"><b>{{label}}</b></label>\n                    <select id=\"{{key}}\" name=\"{{key}}\" class=\"featureSetting\">\n                        {{#options}}\n                        <option value=\"{{value}}\" {{#isSelected}}selected{{/isSelected}}>{{label}}</option>\n                        {{/options}}\n                    </select>\n                </div>\n                {{/isSelect}}\n\n                {{#isInput}}\n                <div class=\"lab-formgroup lab-grid-gap lab-grid-large-6 lab-grid-small-12\">\n\n                    <label for=\"{{key}}\"><b>{{label}}</b></label>\n                    {{#isCheckbox}}\n                    <input type=\"checkbox\" id=\"{{key}}\" name=\"{{key}}\" class=\"featureSetting\" {{#defaultValue}}checked{{/defaultValue}}>\n                    {{/isCheckbox}}\n\n                    {{^isCheckbox}}\n                    <input type=\"{{contentType}}\" id=\"{{key}}\" name=\"{{key}}\" class=\"featureSetting\" placeholder=\"{{placeholder}}\" value=\"{{defaultValue}}\">\n                    {{/isCheckbox}}\n                </div>\n                {{/isInput}}\n            {{/showInGeneral}}\n        {{/formFields}}\n\n        <div class=\"settings-container\">\n            <div id=\"toggle-advanced-btn\" class=\"lab-btn text-completion lab-is-clickable\" currentstate=\"hidden\">Show Advanced Settings</div>\n            {{#formFields}}\n            <div class=\"advanced-setting lab-formgroup lab-grid-gap lab-grid-large-4 lab-grid-small-12 lab-hidden\">\n                {{#showInAdvanced}}\n                    {{#isSelect}}\n                    <label for=\"{{key}}\"><b>{{label}}</b></label>\n                    <select id=\"{{key}}\" name=\"{{key}}\" class=\"featureSetting\">\n                        {{#options}}\n                        <option value=\"{{value}}\" {{#isSelected}}selected{{/isSelected}}>{{label}}</option>\n                        {{/options}}\n                    </select>\n                    {{/isSelect}}\n            \n                    {{#isInput}}\n                    <label for=\"{{key}}\"><b>{{label}}</b></label>\n                        {{#isCheckbox}}\n                        <input type=\"checkbox\" id=\"{{key}}\" name=\"{{key}}\" class=\"featureSetting\" {{#defaultValue}}checked{{/defaultValue}}>\n                        {{/isCheckbox}}\n            \n                        {{^isCheckbox}}\n                        <input type=\"{{contentType}}\" id=\"{{key}}\" name=\"{{key}}\" class=\"featureSetting\" placeholder=\"{{placeholder}}\" value=\"{{defaultValue}}\">\n                        {{/isCheckbox}}\n                    {{/isInput}}\n                {{/showInAdvanced}}\n            </div>\n            {{/formFields}}\n        </div>`;\n    }\n\n    setupTemplateConfig(params, adminConfigFeature, pageConfigFeature) {\n        /**\n         * Setup the template configuration for the AI feature settings modal\n         * The template configuration will be used to render the settings modal for the AI feature\n         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         * @param {Object} adminConfigFeature - The configuration for the AI feature settings from the admin page 'Labrador AI'\n         */\n        const { featureName } = params;\n\n        const templateConfigItems = adminConfigFeature.items;\n\n        // Add items available from settings modal on page (if not already set in admin config)\n        if (pageConfigFeature && pageConfigFeature.items) {\n            for (const item of Object.keys(pageConfigFeature.items)) {\n                if (!templateConfigItems[item]) {\n                    templateConfigItems[item] = pageConfigFeature.items[item];\n                }\n            }\n        }\n\n        const customParams = {};\n        for (const item of Object.keys(templateConfigItems)) {\n\n            // If model value is set, then use that\n            const modelValue = this.labradorModel.get(`fields.labradorAi_${ featureName }_${ item }`, null, true);\n            if (modelValue !== undefined) {\n                customParams[item] = modelValue;\n            }\n        }\n\n        const promptConfig = this.getPromptConfig(params, customParams);\n        for (const item of Object.keys(templateConfigItems)) {\n            if (promptConfig[item]) {\n                templateConfigItems[item].defaultValue = promptConfig[item];\n            }\n\n            // If model value is set, then use that\n            const modelValue = this.labradorModel.get(`fields.labradorAi_${ featureName }_${ item }`);\n\n            if (modelValue) {\n                templateConfigItems[item].defaultValue = modelValue;\n            } else if (item === 'promptPage') {\n                templateConfigItems[item].defaultValue = '';\n            }\n        }\n\n        // Handle special case model, model depends on selected provider\n        /*\n        if (!templateConfigItems.model.defaultValue || templateConfigItems.model.defaultValue.length === 0) {\n            if (!templateConfigItems.provider.defaultValue) {\n                // Add placeholder for model\n                const { providerDefault } = this.promptInstructions.feature[featureName];\n                templateConfigItems.model.defaultValue = this.promptInstructions.feature[featureName].providerSettings[providerDefault].model;\n            } else {\n                templateConfigItems.model.defaultValue = this.promptInstructions.feature[featureName].providerSettings[templateConfigItems.provider.defaultValue].model;\n            }\n            promptConfig.model = templateConfigItems.model.defaultValue;\n        }\n            */\n\n        // option for language, fetch language list set that to \"options\"\n        if (templateConfigItems.languageContent) {\n            const initialLanguage = promptConfig.languageCode || this.getPageLanguage(params.siteAlias, 'code', true);\n            const languages = contentLanguages.map((language) => ({ label: language.name, value: language.code, selected: language.code === initialLanguage }));\n            templateConfigItems.languageContent.options = languages;\n            templateConfigItems.languageContent.defaultValue = initialLanguage;\n        }\n        return [templateConfigItems, promptConfig];\n    }\n\n    setupTemplateParams(templateConfigItems) {\n        /**\n         * Setup the template parameters for the AI feature settings modal\n         * Form fields are used as template parameters in the AI feature settings modal\n         * @param {Object} templateConfigItems - The configuration items for the AI feature settings\n         */\n\n        const formFields = Object.entries(templateConfigItems).map(([key, value]) => ({\n            key,\n            label: value.label || '',\n            showInGeneral: ((!value.adminSettingOnly || value.adminSettingOnly === false) && (!value.advanced || value.advanced === false)) || false,\n            showInAdvanced: ((!value.adminSettingOnly || value.adminSettingOnly === false) && (value.advanced && value.advanced === true)) || false,\n            placeholder: value.placeholder || '',\n            contentType: value.contentType || 'text',\n            defaultValue: (value.contentType === 'checkbox' && (value.defaultValue === false || value.defaultValue === 'false')) ? null : value.defaultValue,\n            options: (value.options || []).map((option) => ({\n                ...option,\n                isSelected: option.value === value.defaultValue // Check if this option should be selected\n            })),\n            isTextarea: value.contentType === 'textarea',\n            isSelect: value.contentType === 'select',\n            isInput: !['textarea', 'select'].includes(value.contentType),\n            isCheckbox: value.contentType === 'checkbox' // Check if this is a checkbox\n\n        }));\n        return formFields;\n    }\n\n    openFeatureSettings(labradorModel, labradorView, labradorItem, params) {\n        /**\n         * Open the settings modal for the AI feature\n         * The settings modal will allow the user to configure the AI feature for the current article\n         * The settings will be stored on the Labrador element-model\n         * The settings will be used as parameters for the prompt to generate content with Labrador AI\n         * @param {Object} labradorModel - The Labrador element-model\n         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         */\n        this.labradorModel = labradorModel;\n\n        // Get the feature settings from the admin page Labrador AI, define feature-config and modal html-template\n        const adminConfigFeature = this.api.v1.config.getConfig(`pages.labradorAi.data.items.${ params.featureName }`);\n        const pageConfigFeature = this.promptInstructions.feature[params.featureName];\n        const [templateConfigItems, promptConfig] = this.setupTemplateConfig(params, adminConfigFeature, pageConfigFeature);\n        const templateParams = this.setupTemplateParams(templateConfigItems);\n        const template = this.getDefaultAiSettingsTemplate();\n\n        // Render the modal with the feature settings\n        const markup = this.api.v1.util.dom.renderTemplate(template, { formFields: templateParams });\n        this.api.v1.ui.modal.dialog({\n            container: {\n                css: 'baseview-textcompletion'\n            },\n            content: {\n                header: `${ adminConfigFeature.label } settings`,\n                markup: `<p><b>${ adminConfigFeature.description }</b></p>\n                <p>Configured settings will affect the '${ adminConfigFeature.label }'-feature for <em>this</em> article. To change the settings for <em>all</em> articles, go to the <a href=\"/settings/cp?page=labradorAi\">Labrador AI admin page.</a></p>\n                <div class=\"lab-grid\">${ markup }</div>`\n            },\n            callbacks: {\n                didDisplay: (modal) => {\n                    const modalMarkup = modal.getMarkup();\n\n                    const languageSetting = modalMarkup.querySelector('#languageSiteSetting');\n                    const languageContent = modalMarkup.querySelector('#languageContent');\n\n                    if (promptConfig.specifyLanguage && promptConfig.specifyLanguage === 'true' && languageSetting) {\n                        // Language setting, as set in admin\n                        languageSetting.setAttribute('disabled', true);\n                        languageSetting.parentElement.classList.add('lab-disabled');\n\n                        // Optional language selection\n                        languageContent.removeAttribute('disabled');\n                        languageContent.parentElement.classList.remove('lab-disabled');\n\n                    } else if (languageSetting) {\n                        languageSetting.removeAttribute('disabled');\n                        languageSetting.parentElement.classList.remove('lab-disabled');\n\n                        // Optional language selection\n                        languageContent.setAttribute('disabled', true);\n                        languageContent.parentElement.classList.add('lab-disabled');\n                    }\n                    if (params && params.disableGenerateButton) {\n                        const generateButton = modalMarkup.querySelector('.lab-generate');\n                        generateButton.style.display = 'none';\n                    }\n                }\n\n            },\n            eventHandlers: [{\n                selector: '#toggle-advanced-btn',\n                event: 'click',\n                callback: (modal, event) => {\n\n                    const button = document.getElementById('toggle-advanced-btn');\n                    const currentState = button.getAttribute('currentstate');\n                    if (currentState && currentState === 'hidden') {\n                        button.setAttribute('currentstate', 'open');\n                        button.textContent = 'Hide Advanced Settings';\n                    } else {\n                        button.setAttribute('currentstate', 'hidden');\n                        button.textContent = 'Show Advanced Settings';\n                    }\n\n                    const advancedSettings = document.querySelectorAll('.advanced-setting');\n                    for (const setting of advancedSettings) {\n                        if (setting.classList.contains('lab-hidden')) {\n                            setting.classList.remove('lab-hidden');\n                        } else {\n                            setting.classList.add('lab-hidden');\n                        }\n                    }\n                }\n            },\n            {\n                selector: 'input[type=\"checkbox\"]',\n                event: 'click',\n                callback: (modal, event) => {\n                    const checkboxElement = event.target;\n                    if (event.target.checked === true) {\n                        checkboxElement.setAttribute('checked', true);\n                    } else {\n                        checkboxElement.setAttribute('checked', false);\n                    }\n\n                    if (checkboxElement.id === 'specifyLanguage') {\n                        const languageSetting = document.getElementById('languageSiteSetting');\n                        const languageContent = document.getElementById('languageContent');\n                        if (checkboxElement.checked === true) {\n                            languageSetting.setAttribute('disabled', true);\n                            languageSetting.parentElement.classList.add('lab-disabled');\n\n                            // Optional language selection\n                            languageContent.removeAttribute('disabled');\n                            languageContent.parentElement.classList.remove('lab-disabled');\n                        } else {\n                            languageSetting.removeAttribute('disabled');\n                            languageSetting.parentElement.classList.remove('lab-disabled');\n\n                            // Optional language selection\n                            languageContent.setAttribute('disabled', true);\n                            languageContent.parentElement.classList.add('lab-disabled');\n                        }\n                    }\n                }\n            },\n            {\n                selector: '#save-ai-feature-settings',\n                event: 'click',\n                callback: (modal, event) => {\n                    const featureSettingElements = document.querySelectorAll('.featureSetting');\n                    this.updateFeatureParamsFromSettings(featureSettingElements, params, promptConfig);\n\n                    modal.close();\n                }\n            },\n            {\n                selector: '#generate-ai-content',\n                event: 'click',\n                callback: (modal, event) => {\n                    const featureSettingElements = document.querySelectorAll('.featureSetting');\n                    this.updateFeatureParamsFromSettings(featureSettingElements, params, promptConfig);\n                    this.api.v1.ns.get('textAssistant.generateContent')(this.labradorModel, labradorView, labradorItem, params);\n                    modal.close();\n                }\n            }, {\n                selector: '#button-close',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }],\n            footer: {\n                buttons: [\n                    {\n                        value: 'Cancel',\n                        type: 'button',\n                        id: 'button-close',\n                        highlight: false\n                    },\n                    {\n                        value: 'Save',\n                        type: 'button',\n                        id: 'save-ai-feature-settings',\n                        hightlight: true\n                    },\n                    {\n                        value: 'Generate',\n                        type: 'button',\n                        id: 'generate-ai-content',\n                        class: 'lab-generate'\n\n                    }\n                ]\n            }\n        });\n    }\n\n    requestGeneration(prompt, aiIntegrationSettings = { model: 'gpt-4o' }) {\n        /**\n         * Request generation of content from Labrador AI\n         * @param {string} prompt - The rendered prompt to generate content from, includes instructions and context\n         * @param {Object} aiIntegrationSettings - The settings to define parameters of the AI model\n         */\n        return new Promise((resolve, reject) => {\n            const options = {\n                prompt,\n                service: 'chatCompletions',\n                model: aiIntegrationSettings.model,\n                aiSettings: aiIntegrationSettings\n            };\n            this.api.v1.generate.text(options).then((result) => {\n                resolve(result);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    updateModelFields(model, view, fields, addLocalizedStringPath = false, setToRootModel = false, setToViewAiField = false) {\n        /**\n         * Update the Labrador element-model with the fields provided.\n         * If addLocalizedStringPath is included, then append a localized string to the bodytext.\n         * If setToRootModel is true, then update the root model as well\n         * @param {Object} model - The Labrador element-model\n         * @param {Object} fields - The fields to update the model with\n         * @param {string} addLocalizedStringPath - The path to the localized string to append to the bodytext\n         * @param {boolean} setToRootModel - If true, then update the root model as well\n         * @param {boolean} setToViewAiField - If true, then update the view as well\n         */\n        let modelFields = fields;\n        const parentViews = this.api.v1.view.getViews(this.rootModel);\n        if (typeof modelFields !== 'object') {\n            modelFields = JSON.parse(fields);\n        }\n        for (const field of Object.keys(modelFields)) {\n            if (setToRootModel === true) {\n                this.rootModel.set(`fields.${ field }`, modelFields[field]);\n            }\n            if (setToViewAiField === true) {\n                for (const parentView of parentViews) {\n                    parentView.set(`fields.${ field }`, modelFields[field]);\n                }\n            }\n            model.set(`fields.${ field }`, modelFields[field]);\n        }\n\n        // Append localized string to bodytext\n        if (addLocalizedStringPath) {\n            this.appendLocalizedString(model, 'fields.bodytext', addLocalizedStringPath);\n        }\n    }\n\n    preprocessGeneration(model, view, menuItem, params) {\n        /**\n         * Pre-process the generation of content from Labrador AI\n         * @param {Object} model - The Labrador element-model\n         * @param {Object} view - The view (element) to modify class names in\n         * @param {Object} menuItem - The menu item that triggered the generation\n         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         */\n        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }]: Start preprocess of generateContent`);\n        if (view) {\n            this.modifyClassNamesInView(view, { add: ['lab-busy', 'lab-busy-top'] });\n        }\n\n        // Custom params are fields stored on the model\n        const customParams = this.prepareCustomParams(model, params);\n\n        // Config setup for prompt, priorities customParams over site/admin config\n        const promptConfig = this.getPromptConfig(params, customParams);\n        const prompt = this.getPrompt(promptConfig);\n        const aiIntegrationSettings = this.getAiSettings(promptConfig);\n        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }]: Finished preprocess of generateContent`);\n\n        return [prompt, aiIntegrationSettings];\n    }\n\n    postprocessGeneration(model, view, menuItem, params, result) {\n        /**\n         * Post-process the generated content from Labrador AI\n         * @param {Object} model - The Labrador element-model\n         * @param {Object} view - The view (element) to modify class names in\n         * @param {Object} menuItem - The menu item that triggered the generation\n         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         * @param {string} result - The generated content from Labrador AI\n         */\n        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }] Generated content successfully`);\n\n        if (!params || typeof params !== 'object') {\n            return result;\n        }\n\n        if (params.returnRawContent === true) {\n            return result;\n        }\n\n        let modelFields = result;\n        if (params.cleanUpJsonString === true || !params.cleanUpJsonString) {\n            modelFields = this.cleanUpJsonString(result);\n        }\n\n        if (params.cleanUpJsonString && params.cleanUpJsonString === false) {\n            return modelFields;\n        }\n\n        if (model && params.updateModel !== false) {\n            const suffixString = params.localizedStringPath || false;\n            const setToRootModel = params.setToRootModel || false;\n            const setToViewAiField = params.setToViewAiField || false;\n            this.updateModelFields(model, view, modelFields, suffixString, setToRootModel, setToViewAiField);\n        }\n\n        if (view && params.updateView !== false) {\n            this.modifyClassNamesInView(view, { remove: ['lab-busy', 'lab-busy-top'] });\n        }\n        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }] Finished post-process generation`);\n        return modelFields;\n    }\n\n    cleanUpJsonString(data) {\n        /**\n         * Clean up the JSON string to be used for updating the Labrador element-model\n         * @param {string} data - The JSON string to clean up\n         */\n        let jsonString = data.trim();\n\n        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {\n            jsonString = jsonString.substring(jsonString.indexOf('{'));\n        }\n\n        if (!jsonString.includes('{')) {\n            jsonString = `{${ jsonString }`;\n        }\n\n        if (!jsonString.includes('}')) {\n            jsonString = `${ jsonString }}`;\n        }\n\n        // Test to choose the correct '}'. Ignore '}' with '\\' ahead\n        if (jsonString.match(/}/g).length > 1) {\n            jsonString = jsonString.match(/(.|\\n)*?(?<!\\\\)}/);\n        }\n\n        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {\n            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);\n        }\n\n        jsonString = jsonString.trim();\n        return jsonString;\n    }\n\n    appendLocalizedString(model, fieldPath, localizationPath) {\n        /**\n         * Append a localized string to the bodytext of the Labrador element-model\n         * The localized string might be a disclaimer or similar\n         * Localized string is defined in the Admin page 'Language options'\n         * @param {Object} model - The Labrador element-model\n         * @param {string} fieldPath - The path to the field to append the localized string to\n         * @param {string} localizationPath - The path to the localized string to append\n         */\n        const fieldContent = model.get(fieldPath);\n        if (!fieldContent || fieldContent.length === 0) {\n            return;\n        }\n        const localizedString = lab_api.v1.locale.get(localizationPath);\n        if (!localizedString || localizedString.length === 0) {\n            return;\n        }\n        model.set(fieldPath, `${ fieldContent }<hr><p class=\"italic ai-disclaimer\" data-lab-italic=\"italic\">${ localizedString }</p>`);\n    }\n\n    getPageLanguage(site, returnValue = 'name', returnSeoLanguage = false) {\n        /**\n         * Get the name of the language from the language code\n         * @param {string} languageCode - The language code to get the name for\n         */\n\n        // Return seo language (prioritized)\n        if (returnSeoLanguage) {\n            const seolanguage = this.rootModel?.get('fields.seolanguage');\n            if (seolanguage) {\n                for (const contentLanguage of contentLanguages) {\n                    if (seolanguage === contentLanguage.code) {\n                        if (returnValue === 'code') {\n                            return contentLanguage.code;\n                        }\n                        if (returnValue === 'name') {\n                            return contentLanguage.name;\n                        }\n                    }\n                }\n            }\n        }\n\n        const langCode = lab_api.v1.config.get('contentLanguage', { site });\n        if (!langCode) {\n            return '';\n        }\n\n        // Return site langauge\n        for (const contentLanguage of contentLanguages) {\n            if (contentLanguage.code === langCode) {\n                if (returnValue === 'code') {\n                    return contentLanguage.code;\n                }\n                if (returnValue === 'name') {\n                    return contentLanguage.name;\n                }\n            }\n        }\n\n        return '';\n    }\n\n    getLanguageNameByCode(langCode) {\n        if (!langCode) {\n            return '';\n        }\n        for (const contentLanguage of contentLanguages) {\n            if (contentLanguage.code === langCode) {\n                return contentLanguage.name;\n            }\n        }\n\n        return '';\n    }\n\n    getContentLanguages() {\n        /**\n         * Get the content languages for the current site\n         */\n        return contentLanguages;\n    }\n\n    modifyClassNamesInView(view, classModifications) {\n        /**\n         * Modify the class names in the view content element\n         * If warning or error is added, then it will removed after 3 seconds\n         * @param {Object} view - The view (element) to modify class names in\n         * @param {Object} classModifications - The class modifications to apply, like add or remove class names\n         */\n        const viewContentElement = view.getMarkup().querySelector('.content');\n        if (viewContentElement) {\n            if (classModifications.add) {\n                viewContentElement.classList.add(...classModifications.add);\n                if (viewContentElement.classList.contains('lab-highlight-warn')) {\n                    setTimeout(() => {\n                        this.modifyClassNamesInView(view, { remove: ['lab-highlight-warn'] });\n                    }, 3000);\n                }\n                if (viewContentElement.classList.contains('lab-highlight-error')) {\n                    setTimeout(() => {\n                        this.modifyClassNamesInView(view, { remove: ['lab-highlight-error'] });\n                    }, 3000);\n                }\n            }\n            if (classModifications.remove) {\n                viewContentElement.classList.remove(...classModifications.remove);\n            }\n        }\n    }\n\n    updateFeatureParamsFromSettings(featureSettingElements, params, promptConfig) {\n        /**\n         * Update the feature parameters from the settings modal\n         * The feature parameters are stored on the Labrador element-model\n         * When a user is changing the data set in the settings modal, the data is stored on the Labrador element-model\n         * @param {Object} featureSettingElements - The elements in the settings modal to update the feature parameters from\n         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.\n         * @param {Object} promptConfig - The prompt configuration to update the feature parameters from\n         */\n        for (const element of featureSettingElements) {\n            const key = element.getAttribute('id');\n            let value;\n            if (element.value) {\n                value = element.value;\n            }\n\n            if (element.tagName === 'INPUT' && element.type === 'checkbox') {\n                value = element.checked;\n                this.labradorModel.set(`fields.labradorAi_${ params.featureName }_${ key }`, String(element.checked));\n            } else if (!value && (element.type === 'textarea' || element.type === 'text')) {\n                this.labradorModel.set(`fields.labradorAi_${ params.featureName }_${ key }`, '');\n            } else if (value && String(promptConfig[key]) !== String(value)) {\n                this.labradorModel.set(`fields.labradorAi_${ params.featureName }_${ key }`, value);\n            }\n        }\n    }\n\n}\n","export class LanguageHelper {\n\n    static convertToIso639(language) {\n        /**\n         * Convert language code to ISO 639 code (two or three letter code) for news sitemap\n         */\n        let languageIso639Code = '';\n        if (language) {\n            // Accept tree letter language codes\n            if (language.length === 3) {\n                languageIso639Code = language.toLowerCase();\n            } else if (language.includes('-')) {\n                languageIso639Code = language.split('-')[0].toLowerCase();\n            } else {\n                languageIso639Code = language.toLowerCase();\n            }\n        }\n        return languageIso639Code;\n    }\n\n}\n","export class LayoutHelper {\n\n    static textElements(view, isEditor) {\n        const layout = {\n            top: [],\n            floating: [],\n            bottom: [],\n            positions: {\n                kicker: '',\n                title: ''\n            }\n        };\n\n        let kickerPosition = '';\n        let titlePosition = '';\n\n        // Process the kicker first\n        if (view.get('metadata.showKicker') && (isEditor || (!!view.get('fields.kicker') || !!view.get('fields.origin_data_json.teaserKicker') || !!view.get('fields.origin_data_json.kicker')))) {\n            if (view.get('metadata.floatingKicker')) {\n                layout.floating.push('kicker');\n                layout.positions.kicker = 'floating';\n                kickerPosition = 'floating';\n            } else if (!view.get('metadata.kickerBelowImage')) {\n                layout.top.push('kicker');\n                layout.positions.kicker = 'above';\n                kickerPosition = 'top';\n            } else {\n                layout.bottom.push('kicker');\n                layout.positions.kicker = 'below';\n                kickerPosition = 'bottom';\n            }\n        }\n\n        // Process the title\n        if (!view.get('metadata.hideTitle') && (isEditor || !!view.get('fields.title'))) {\n            if (view.get('metadata.floatingTitle')) {\n                layout.floating.push('title');\n                layout.positions.title = 'floating';\n                titlePosition = 'floating';\n            } else if (view.get('metadata.titleAboveImage')) {\n                layout.top.push('title');\n                layout.positions.title = 'above';\n                titlePosition = 'top';\n            } else {\n                layout.bottom.push('title');\n                layout.positions.title = 'below';\n                titlePosition = 'bottom';\n            }\n        }\n\n        // Adjust the kicker's position if kickerBelowTitle is set\n        if (view.get('metadata.kickerBelowTitle') && view.get('metadata.showKicker')) {\n            if (titlePosition) {\n                // Remove 'kicker' from its current array\n                if (kickerPosition) {\n                    const index = layout[kickerPosition].indexOf('kicker');\n                    if (index !== -1) {\n                        layout[kickerPosition].splice(index, 1);\n                    }\n                }\n\n                // Insert 'kicker' after 'title' in the title's position array\n                const positionArray = layout[titlePosition];\n                const titleIndex = positionArray.indexOf('title');\n                if (titleIndex !== -1) {\n                    positionArray.splice(titleIndex + 1, 0, 'kicker');\n                } else {\n                    // If 'title' not found, add 'kicker' to the position array\n                    positionArray.push('kicker');\n                }\n                layout.positions.kicker = 'belowTitle';\n                kickerPosition = titlePosition;\n            }\n        }\n\n        // Process the subtitle\n        if (!view.get('metadata.hidesubtitle') && (isEditor || (!!view.get('fields.subtitle') || !!view.get('fields.origin_data_json.teaserSubtitle')))) {\n            if (view.get('metadata.floatingSubtitle')) {\n                layout.floating.push('subtitle');\n            } else if (view.get('metadata.subtitleAboveImage')) {\n                layout.top.push('subtitle');\n            } else {\n                layout.bottom.push('subtitle');\n            }\n        }\n\n        return layout;\n    }\n\n}\n","export class LazyloadHelper {\n\n    constructor(api) {\n        this.api = api;\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        this.isFragmentMode = this.api.v1.app.mode.isFragmentMode();\n        this.lazyloadImages = !this.isEditor && !!this.api.v1.config.get('imageLoading.lazy');\n    }\n\n    // (bool) Check if image should be lazyloaded.\n    check(model, view) {\n        if (!this.lazyloadImages || view.getProperty('image.noLazy')) {\n            return false;\n        }\n        const row = lab_api.v1.model.query.getParentOfType(model, 'row');\n        if (row && !this.isFragmentMode && row.getModelIndex() < 5) {\n            return false;\n        }\n        return true;\n    }\n\n}\n","// Usage:\n// model.setFiltered('movableStyle', Movable.createStyle(model, 'metadata.contentPosition', ['desktop', 'mobile']));\n\nexport class Movable {\n\n    static mediaQueries = {\n        desktop: '(min-width:1024px)',\n        mobile: '(max-width: 1023px)'\n    };\n\n    static createStyle(model, path, viewports, mediaQueries = this.mediaQueries) {\n        const items = [];\n        for (const viewport of viewports) {\n            const vpData = mediaQueries[viewport] ? model.get(path, viewport) : null; // { x, y, selector }\n            if (vpData) {\n                items.push(`@media ${ mediaQueries[viewport] } { ${ vpData.selector } { transform: translate(${ vpData.x }px, ${ vpData.y }px); } }`);\n            }\n        }\n        return `<style>${ items.join('\\n') }</style>`;\n    }\n\n}\n","/**\n * Make a serialized JSON-object of page.\n * Return an object matching Labrador API: { result: [...] }.\n * Also add \"page\".\n * Use structure-data for ordering.\n */\n\nexport class PageExport {\n\n    constructor(api) {\n        this.api = api;\n        this.paths = {\n            main: ['parent', 'guid', 'type', 'tags'],\n            fields: ['feedId', 'byline', 'bylineImage', 'paywall', 'published', 'published_url', 'site_alias', 'site_id', 'subtitle', 'subtitleHTML', 'teaserSubtitle', 'somedescription', 'title', 'teaserTitle', 'titleHTML', 'seolanguage', 'seotitle', 'sometitle', 'kicker', 'teaserKicker', 'showcomments'],\n            fieldsAuto: ['section_tag', 'tags'],\n            fieldsNative: ['section'],\n            fieldMap: {\n                subtitle: 'description', subtitleHTML: 'descriptionHTML', somedescription: 'someDescription', teaserSubtitle: 'teaserDescription', seolanguage: 'seolanguage', seotitle: 'seoTitle', sometitle: 'someTitle', published_url: 'url', section_tag: 'section'\n            },\n            fallback: {\n                url: 'url' // JSON-feeds\n            }\n        };\n        this.frontUrl = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n        this.imageServer = this.api.v1.properties.get('image_server');\n    }\n\n    jsonData(rootModel) {\n        Sys.logger.debug('[PageExport] Will export page as JSON-data');\n        const page = this.api.v1.model.serialize.model(rootModel);\n        delete page.guid;\n        const result =  rootModel.getType() === 'page_article' ? this.exportArticle() : this.exportFront();\n        return {\n            page,\n            result\n        };\n    }\n\n    oembed(rootModel) {\n        if (rootModel.getType() !== 'page_article') {\n            Sys.logger.warn('[PageExport] Will not export current page type as oEmbed.');\n            return {};\n        }\n        Sys.logger.debug('[PageExport] Will export page as oEmbed');\n        return {\n            version: '1.0',\n            type: 'rich',\n            width: '',\n            height: '',\n            title: this.api.v1.util.string.sanitizeString(rootModel.get('fields.title') || ''),\n            url: rootModel.get('filtered.url') || '',\n            author_name: this.api.v1.site.getSite().display_name || this.api.v1.site.getSite().alias,\n            author_url: this.frontUrl,\n            provider_name: 'Labrador',\n            provider_url: 'http://www.labradorcms.com/',\n            html: `<div class=\"labrador-cms-embed\" data-lab-style=\"dac-no-sitelink dac-no-sitelink-logo dac-no-poweredby dac-embed-full\" data-lab-content=\"full\" data-lab-id=\"${ rootModel.get('id') }\" data-lab-site=\"${ rootModel.get('filtered.site.domain_no_protocol') }\"><script async defer src=\"${ this.frontUrl }/embed.js?v=335\"></script></div>`\n        };\n    }\n\n    exportArticle() {}\n\n    exportFront() {\n        const dropZone = this.api.v1.model.query.getModelByType('dropZone');\n        return this.api.v1.model.query.getModelsByType('article', [dropZone]).map((model) => this.serialize(model)).filter((article) => !!article);\n    }\n\n    serialize(model) {\n        const serialized = this.api.v1.model.serialize.model(model);\n        if (!serialized || !serialized.fields) {\n            return null;\n        }\n        const isAuto = !!serialized.fields.origin_data_json;\n        const result = {\n            images: [],\n            width: model.getWidth('desktop'),\n            metadata: serialized.metadata,\n            isAutomatic: isAuto,\n            siteDomain: this.frontUrl\n        };\n        const fields = isAuto ? serialized.fields.origin_data_json : serialized.fields;\n        const fieldKeys = [...this.paths.fields, ...(isAuto ? this.paths.fieldsAuto : this.paths.fieldsNative)];\n        for (const key of this.paths.main) {\n            result[key] = serialized[key] || '';\n        }\n        for (const key of fieldKeys) {\n            result[this.paths.fieldMap[key] || key] = fields[key] || '';\n        }\n        // Add 'teaserSubtitle' (replaced with 'teaserDescription')\n        result.teaserSubtitle = fields.teaserSubtitle || '';\n        if (isAuto) {\n            if (!result.byline) {\n                const bylineObj = (fields.full_bylines || []).shift();\n                result.byline = bylineObj ? `${ bylineObj.firstname } ${ bylineObj.lastname }` : '';\n                result.bylineImage = result.bylineImage || (bylineObj || {}).imageUrl;\n            }\n            if (typeof result.tags === 'string') {\n                result.tags = result.tags.split(',').map((tag) => (tag || '').trim());\n            }\n            result.site_alias = (this.api.v1.site.getSiteById(fields.site_id) || {}).alias;\n            result.id = parseInt(fields.id, 10);\n        } else {\n            result.titleHTML = result.title;\n            result.title = this.cleanText(result.title);\n            result.descriptionHTML = result.description;\n            result.description = this.cleanText(result.description);\n            result.kickerHTML = result.kicker;\n            result.kicker = this.cleanText(result.kicker);\n            result.id = serialized.id;\n        }\n        result.section_tag = result.section;\n        if (result.url && !result.url.startsWith('http')) {\n            result.url = this.frontUrl + result.url;\n        }\n        for (const key of (Object.keys(this.paths.fallback))) {\n            if (!result[key]) {\n                result[key] = fields[this.paths.fallback[key]] || '';\n            }\n        }\n\n        // Bylines\n        result.full_bylines = (isAuto ? fields.full_bylines : fields.full_bylines_json) || [];\n        result.full_bylines = result.full_bylines.map((byline) => ({\n            firstname: byline.firstname,\n            lastname: byline.lastname,\n            description: byline.description,\n            imageUrl: this.getImageUrl(byline.imageUrl)\n        }));\n        if (isAuto && result.byline) {\n            result.full_bylines.unshift({\n                firstname: result.byline,\n                lastname: '',\n                imageUrl: this.getImageUrl(result.bylineImage)\n            });\n        }\n        if (!result.byline && result.full_bylines.length) {\n            result.byline = `${ result.full_bylines[0].firstname } ${ result.full_bylines[0].lastname }`;\n            result.bylineImage = result.full_bylines[0].imageUrl.replace(this.imageServer, '');\n        }\n\n        const customFields = lab_api.v1.config.get('customAdapterFields.article') || [];\n        if (customFields) {\n            for (const key of customFields) {\n                if (key) {\n                    let fieldValue = serialized.fields[key] || '';\n                    if (!fieldValue && serialized.fields.origin_data_json) {\n                        fieldValue = serialized.fields.origin_data_json[key] || '';\n                    }\n                    if (fieldValue) {\n                        result[key] = fieldValue;\n                    }\n                }\n            }\n        }\n\n        result.paywall = result.paywall === '0' ? false : !!result.paywall;\n        const imageModel = this.api.v1.model.query.getChildOfType(model, 'image');\n        if (imageModel) {\n            const url = imageModel.get('filtered.image');\n            if (url) {\n                result.images.push({\n                    url,\n                    jpg: `${ url }&format=jpg`,\n                    webp: `${ url }&format=webp`,\n                    url_size: url,\n                    default: '1',\n                    id: imageModel.get('instance_of')\n                });\n            }\n        }\n        return result;\n    }\n\n    cleanText(markup) {\n        return this.api.v1.util.string.sanitizeString(markup).replace(/&amp;/g, '&');\n    }\n\n    getImageUrl(url) {\n        if (!url) { return ''; }\n        if (url.startsWith('http')) { return url; }\n        return this.imageServer + url;\n    }\n\n}\n","export class Paywall {\n\n    static defaultLineIndex = 3;\n\n    // Paywall-mode. Render for users without access\n    // - Only include a configured number of bodytext-lines\n    // - Omit all elements inside the bodytext\n    static filterBodytext(model, view) {\n        let lineIndex = lab_api.v1.config.get('paywall.bodytext.lineCount');\n        if (lineIndex === null || lineIndex === false) {\n            lineIndex = this.defaultLineIndex;\n        }\n        const lineData = model.get('filtered.lineData');\n        let { bodytext } = lineData;\n        const indexRegister = lineData.indexRegister.reverse();\n        if (indexRegister.length <= lineIndex) {\n            lineIndex = indexRegister.length - 1;\n        }\n        if (indexRegister[lineIndex]) {\n            bodytext = bodytext.substring(0, indexRegister[lineIndex].charIndex);\n        }\n        return bodytext;\n    }\n\n    static iterasPaywall(config, tags) {\n        const paywallConfig = {\n            id: config.id,\n            offersTitle: config.offersTitle,\n            alreadySubscribedText: config.alreadySubscribedText,\n            alreadySubscribedLink: config.alreadySubscribedLink,\n            offers: config.offers,\n            offerButtonLink: config.offerButtonLink,\n            offerButtonText: config.offerButtonText,\n            offersSalesText: config.offersSalesText\n        };\n\n        const extraPaywall = config.extraPaywalls.find((paywall) => tags.includes(paywall.triggerTag)) || null;\n        if (extraPaywall) {\n            paywallConfig.id = extraPaywall.id;\n            paywallConfig.offersTitle = extraPaywall.offersTitle;\n            paywallConfig.alreadySubscribedText = extraPaywall.alreadySubscribedText;\n            paywallConfig.alreadySubscribedLink = extraPaywall.alreadySubscribedLink;\n            paywallConfig.offers = extraPaywall.offers;\n            paywallConfig.offerButtonLink = extraPaywall.offerButtonLink;\n            paywallConfig.offerButtonText = extraPaywall.offerButtonText;\n            paywallConfig.offersSalesText = extraPaywall.offersSalesText;\n        }\n        return paywallConfig;\n    }\n\n}\n","export class ResourceHelper {\n\n    /**\n     * Fetches paths to stylesheets specified for a given site. Stylesheets can be specified in \"site_styles.<SITE ALIAS>\".\n     *\n     * @param {string} siteAlias Site to fetch stylesheet paths for.\n     * @param {Array<string>} fallbackValue An array of fallback stylesheet paths to use in case of failure.\n     * @returns {Array<string>} An array containing paths to stylesheets for the provided site.\n     */\n    static getSiteStyles(siteAlias, fallbackValue = []) {\n        const paths = lab_api.v1.config.get(`site_styles.${ siteAlias }`) || fallbackValue;\n        Sys.logger.debug(`ViewSupport: Found ${ Array.isArray(paths) ? paths.length : 0 } stylesheet(s) for site \"${ siteAlias }\".`);\n        return paths;\n    }\n\n    /**\n     * Get a list of paths for stylesheets.\n     * If none is defined, check configured fallback-site\n     * A site using a fallback-site may set site_styles.<SITE ALIAS> to an empty array to prevent using fallback-resources.\n     *\n     * @param {string} siteAlias Site to fetch stylesheet paths for.\n     * @param {Array<string>} ignoreSites An array of site aliases refering to sites which are to be ignored.\n     * @returns {Array<string>} An array containing paths to stylesheets for the provided site or any of its declared fallback sites.\n     */\n    static getSiteStylesWithFallback(siteAlias, ignoreSites = []) {\n        const paths = this.getSiteStyles(siteAlias, null);\n        if (paths === null) {\n            ignoreSites.push(siteAlias);\n            const fallbackSite = lab_api.v1.config.get('lab_fallback_site', { site: siteAlias });\n            if (fallbackSite && !ignoreSites.includes(fallbackSite)) {\n                return this.getSiteStylesWithFallback(fallbackSite, ignoreSites);\n            }\n        }\n        return paths || [];\n    }\n\n    /**\n     * Fetches an array of script paths for a site based on the provided site alias.\n     *\n     * @param {string} siteAlias The alias of the site to fetch script paths for.\n     * @param {string} pageType The type of page which is to be generated.\n     * @returns {Array<string>} An array containing paths to scripts for a given site.\n     */\n    static getSiteScripts(siteAlias, pageType, isEditor) {\n        const paths = this.filterScriptListByPageType(lab_api.v1.config.get(`site_scripts.${ siteAlias }`) || [], pageType, isEditor);\n        Sys.logger.debug(`ViewSupport: Found ${ paths.length } script-path(s) for site \"${ siteAlias }\".`);\n        return paths;\n    }\n\n    /**\n     * Get a list of paths for scripts.\n     * If none is defined, check configured fallback-site\n     * A site using a fallback-site may set site_scripts.<SITE ALIAS> to an empty array to prevent using fallback-resources.\n     *\n     * @param {string} siteAlias Site to fetch script paths for.\n     * @param {string} pageType The type of page which is to be generated.\n     * @param {boolean} isEditor Flag for editor-mode\n     * @param {Array<string>} ignoreSites An array of site aliases refering to sites which are to be ignored.\n     * @returns {Array<object>} An array containing objects with paths to scripts for a given site or any of its declared fallback sites.\n     */\n    static getSiteScriptsWithFallback(siteAlias, pageType, isEditor, ignoreSites = []) {\n        let paths = this.getSiteScripts(siteAlias, pageType, isEditor);\n        if (ignoreSites.length) {\n            paths = this.removeWithInheritFalse(paths);\n        }\n        if (!paths.length) {\n            ignoreSites.push(siteAlias);\n            const fallbackSite = lab_api.v1.config.get('lab_fallback_site', { site: siteAlias });\n            if (fallbackSite && !ignoreSites.includes(fallbackSite)) {\n                return this.getSiteScriptsWithFallback(fallbackSite, pageType, isEditor, ignoreSites).filter((item) => item.inherit !== false);\n            }\n        }\n        return paths;\n    }\n\n    /**\n     * Fetches paths for scripts which are common for all sites.\n     *\n     * @param {string} pageType The type of page to be generated.\n     * @param {boolean} isEditor Flag for editor-mode\n     * @returns {Array<string>} An array containing paths to scripts common for all sites.\n     */\n    static getCommonScripts(pageType, isEditor, isModule = false) {\n        const paths = this.filterScriptListByPageType(lab_api.v1.config.get(`site_scripts_common`) || [], pageType, isEditor, isModule);\n        Sys.logger.debug(`ViewSupport: Found ${ paths.length } common ${ isModule ? 'script-path(s)' : 'JS modules' }`);\n        return paths;\n    }\n\n    // (array)\n    static filterScriptListByPageType(list, pageType, isEditor, isModule = false) {\n        return list.filter((item) => ((!item.isModule && !isModule) || (item.isModule && isModule)) && (!item.pageType || item.pageType === pageType) && (!isEditor || (isEditor && !item.skipEditor)));\n    }\n\n    static removeWithInheritFalse(items) {\n        if (Array.isArray(items) && items.length > 0) {\n            return items.filter((item) => item.inherit !== false);\n        }\n        return items;\n    }\n\n    /**\n     * Get element-specific resources.\n     * User-config can specify files needed per element.\n     * Handle it here to avoid multiple copies of the same files included on page.\n     * Config: \"contentbox_settings.<BOX NAME>.require.<FILETYPE>\"\n     *\n     * Note: Query config per content-type ('contentbox_settings.my_box' instead of 'contentbox_settings') to get site-overrides\n     *\n     * @param {LabModel} pageModel\n     * @param {LabView} pageView\n     * @param {string} filetype Type of file to be fetched (JS or CSS).\n     * @param {Array<string>} ignorePaths\n     * @returns\n     */\n    static getSiteFilesForContentboxes(pageModel, pageView, filetype, ignorePaths = []) {\n        const result = [];\n        const contentboxList = lab_api.v1.model.query.getModelTypes();\n        Sys.logger.debug(`ViewSupport sitefiles: Will register ${ filetype }-file(s) for contentbox-types ${ contentboxList.join(', ') }.`);\n        for (const type of contentboxList) {\n            const config = lab_api.v1.config.get(`contentbox_settings.${ type }.require.${ filetype }`);\n            if (Array.isArray(config)) {\n                for (const path of config) {\n                    if (!result.includes(path) && !ignorePaths.includes(path)) {\n                        Sys.logger.debug(`ViewSupport sitefiles: Will include ${ filetype }-file \"${ path }\" for contentbox \"${ type }\".`);\n                        result.push(path);\n                    }\n                }\n            }\n        }\n        Sys.logger.debug(`ViewSupport sitefiles: Finished registering ${ filetype }-file(s). Found ${ result.length } file(s).`);\n        return result;\n    }\n\n}\n","export class SEOHelper {\n\n    constructor({\n        pageType = '',\n        canonical = '',\n        isTagpage = false,\n        isTagpageWithFrontpage = false,\n        tagpagePath = '/tag/'\n    } = {}) {\n        this.settings = {\n            pageType,\n            canonical,\n            isTagpage,\n            isTagpageWithFrontpage,\n            tagpagePath\n        };\n        this.cache = {\n            seoData: null\n        };\n    }\n\n    /**\n     * Generates and returns JSON-LD data based on configurations and page type.\n     *\n     * @param {LabModel} model The data model of the current node.\n     * @returns Structured JSON-LD data.\n     */\n    getStructuredData(model) {\n        if (model.get('fields.jsonld_json')) {\n            return model.get('fields.custom_jsonld');\n        }\n        if (this.settings.pageType === 'front') {\n            return this.generateFrontData(model);\n        }\n        if (this.settings.pageType === 'article' || this.settings.pageType === 'notice') {\n            return this.generateArticleData(model);\n        }\n        return null;\n    }\n\n    generateSiteData(model) {\n        return {\n            '@context': 'http://schema.org',\n            '@type': 'WebSite',\n            name: lab_api.v1.properties.get('site.display_name'),\n            url: lab_api.v1.properties.get('site.domain') || ''\n            /*\n            sameAs: [\n                'https://facebook.com/mypage',\n                'https://instagram.com/site',\n                'https://twitter.com/name'\n            ],\n            potentialAction: {\n            '@type': 'SearchAction',\n            'target': 'http://example.com/pages/search_results?q={search_term}',\n            'query-input': 'required name=search_term'\n            }\n            */\n        };\n    }\n\n    generateFrontData(model) {\n        const seoData = this.getSEOData(model);\n        return {\n            '@context': 'https://schema.org',\n            '@type': 'WebPage',\n            name: seoData.title,\n            description: seoData.description\n        };\n    }\n\n    generateArticleData(model) {\n        const seoData = this.getSEOData(model);\n        const output = {\n            '@context': 'https://schema.org',\n            '@type': 'NewsArticle',\n            headline: seoData.title || model.get('fields.title'),\n            description: seoData.description,\n            availableLanguage: [\n                {\n                    '@type': 'Language',\n                    alternateName: seoData.language\n                }\n            ],\n            images: lab_api.v1.model.query.getChildrenOfType(model, 'image', true).map((image) => {\n                return (image.get('fields.imageurl') || '').includes('width=') ? `${image.get('fields.imageurl')}1200` : `${image.get('fields.imageurl')}&width=1200`;\n            }),\n            author: lab_api.v1.model.query.getChildrenOfType(model, 'byline', true).map((byline) => {\n                let firstname = byline.get('fields.firstname');\n                if (firstname === 'Byline first name') { firstname = ''; }\n                let lastname = byline.get('fields.lastname');\n                if (lastname === 'Byline last name') { lastname = ''; }\n                const result = {\n                    '@type': 'Person',\n                    name: `${ firstname } ${ lastname }`\n                };\n\n                const public_url = byline.get('fields.public_url');\n                if (public_url) {\n                    result.url = public_url;\n                }\n\n                const image = (byline.children || []).filter((child) => child.type === 'image')[0];\n                if (image) {\n                    result.image = {\n                        '@type': 'ImageObject',\n                        url: `${ image.get('fields.imageurl') }&width=250`\n                    };\n                }\n\n                const public_email = byline.get('fields.public_email');\n                if (public_email) {\n                    result.email = public_email;\n                }\n\n                return result;\n            }),\n            publisher: {\n                '@type': 'Organization',\n                name: lab_api.v1.properties.get('site.display_name'),\n                logo: {\n                    '@type': 'ImageObject',\n                    url: lab_api.v1.config.get('logo.default.src')\n                }\n            }\n        };\n\n        if (model.get('fields.published')) {\n            output.datePublished = new Date(parseInt(model.get('fields.published'), 10) * 1000).toISOString();\n        }\n\n        if (model.get('fields.modified')) {\n            output.dateModified = new Date(parseInt(model.get('fields.modified'), 10) * 1000).toISOString();\n        }\n\n        if (model.get('fields.paywall') === '1') {\n            output.isAccessibleForFree = true;\n            output.hasPart = {\n                '@type': 'WebPageElement',\n                isAccessibleForFree: false,\n                cssSelector: '.teaserContent'\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * Returns SEO data such as Title and Description for a frontpage or article.\n     * Method may be called several times, uses cache.\n     *\n     * @param {model} model The data model of the current node.\n     * @returns {Object} SEO title and description of the current page.\n     */\n    getSEOData(model) {\n        if (this.cache.seoData) { return this.cache.seoData; }\n        let language;\n        let title;\n        let description;\n        if (this.settings.pageType === 'article' || this.settings.pageType === 'notice') {\n            title = lab_api.v1.util.string.sanitizeString(model.get('fields.seotitle') || model.get('fields.title') || '');\n            description = lab_api.v1.util.string.sanitizeString(model.get('fields.seodescription') || model.get('fields.subtitle') || '');\n            language = model.get('fields.seolanguage') || lab_api.v1.config.get('contentLanguage');\n        } else {\n            if (this.settings.isTagpage && !this.settings.isTagpageWithFrontpage) {\n\n                // Todo: Backend should deliver an array of tags.\n                const tagPath = this.settings.tagpagePath.replace(/\\//g, '');\n                const tagsString = this.settings.canonical.split(this.settings.tagpagePath)[1] || '';\n                const tags = tagsString.split('/').filter((item) => !!item);\n\n                // Data for mustache-template\n                const data = {\n                    tag: tags[tags.length - 1],\n                    tags,\n                    tagPath\n                };\n\n                // Get the template from locale and render with tagPath and tag from data\n                title = lab_api.v1.locale.get('tags.title_text', {\n                    data\n                });\n\n            } else {\n                title = lab_api.v1.util.string.sanitizeString(model.get('fields.seotitle') || model.get('fields.name') || '');\n            }\n            description = lab_api.v1.util.string.sanitizeString(model.get('fields.seodescription') || '');\n        }\n\n        this.cache.seoData = {\n            title: title.charAt(0).toUpperCase() + title.slice(1),\n            description,\n            language\n        };\n        return this.cache.seoData;\n    }\n\n}\n","export class Spacing {\n\n    static mediaQueries = {\n        desktop: '(min-width:1024px)',\n        mobile: '(max-width: 1023px)'\n    };\n\n    static createStyle({\n        model, view, viewports, styleCollection = 'content_inline_spacing', mediaQueries = this.mediaQueries, returnArray = false\n    }) {\n        const items = [];\n        const selector = `[data-element-guid=\"${ model.getGuid() }\"] .content`;\n        for (const viewport of viewports) {\n            if (mediaQueries[viewport]) {\n                const vpStyle = lab_api.v1.style.getStyles(model, view, styleCollection, viewport);\n                if (vpStyle) {\n                    items.push(`@media ${ mediaQueries[viewport] } { ${ selector } { ${ vpStyle } } }`);\n                }\n            }\n        }\n        return returnArray ? items : `<style>${ items.join('\\n') }</style>`;\n    }\n\n}\n","export class StyleHelper {\n\n    static getStyleDefinitions(api) {\n        const alias = api.v1.properties.get('site.alias');\n        const definitions = api.v1.config.get('style_definitions', alias);\n        const rules = [];\n\n        (definitions.rules || []).forEach((rule) => rules.push(rule));\n        (definitions.fontface || []).forEach((font) => {\n            const selector = `.font-${ font.family.replace(/ /g, '') }`;\n            rules.push(StyleHelper.getFamilyDefinition(selector, font.family));\n\n            const weights = {\n                light: {\n                    keys: ['light', '200', '100', '300'],\n                    used: false\n                },\n                normal: {\n                    keys: ['regular', 'normal', '400', '500'],\n                    used: false\n                },\n                bold: {\n                    keys: ['bold', '600', '700'],\n                    used: false\n                },\n                black: {\n                    keys: ['black', '800', '900'],\n                    used: false\n                }\n            };\n            font.variants.forEach((definedWeight) => {\n                for (const weight of Object.keys(weights)) {\n                    const weightDefinition = weights[weight];\n                    if (weightDefinition && !weightDefinition.used && weightDefinition.keys.indexOf(definedWeight) > -1) {\n                        rules.push(StyleHelper.getWeightDefinition(selector, definedWeight, weight));\n                        weightDefinition.used = true;\n                    }\n                }\n            });\n        });\n\n        const result = {\n            fontface: definitions.fontface || [],\n            parsedRules: StyleHelper.CSSRuleParser(rules)\n        };\n        result.hasRules = !!result.parsedRules.length;\n        return result;\n    }\n\n    static getFamilyDefinition(selector, family) {\n        return {\n            selector,\n            declarations: [{\n                key: 'font-family',\n                value: `\"${ family }\" !important`\n            }]\n        };\n    }\n\n    static getWeightDefinition(selector, weight, name) {\n        let validatedWeight = weight;\n        if (weight === 'regular') {\n            validatedWeight = 'normal';\n        }\n        return {\n            selector: `${ selector  }.font-weight-${  name }`,\n            declarations: [{\n                key: 'font-weight',\n                value: `${ validatedWeight } !important`\n            }]\n        };\n    }\n\n    static CSSRuleParser(rules) {\n        const results = [];\n        rules.forEach((rule) => {\n            let ruleString = `${ rule.selector } { `;\n            let fontSizeMobile;\n            let lineHeightMobile;\n            rule.declarations.forEach((subrule) => {\n                if (subrule.key === 'font-size-desktop') {\n                    if (subrule.value !== 'default') {\n                        ruleString += `font-size: ${ subrule.value.slice(0, -2) / 16 }rem; `;\n                    }\n                } else if (subrule.key === 'font-size-mobile') {\n                    if (subrule.value !== 'default') {\n                        fontSizeMobile = `calc(0.262vw * ${ subrule.value.slice(0, -2) })`;\n                    }\n                } else if (subrule.key === 'line-height-desktop') {\n                    if (subrule.value !== 'default') {\n                        ruleString += `line-height: ${ subrule.value }; `;\n                    }\n                } else if (subrule.key === 'line-height-mobile') {\n                    if (subrule.value !== 'default') {\n                        lineHeightMobile = subrule.value;\n                    }\n                } else if (subrule.key === 'font-family') {\n                    if (subrule.value.includes('!important')) {\n                        ruleString += `${ subrule.key }: ${ subrule.value }; `;\n                    } else {\n                        ruleString += `${ subrule.key }: \"${ subrule.value }\"; `;\n                    }\n                } else {\n                    ruleString += `${ subrule.key }: ${ subrule.value }; `;\n                }\n            });\n            ruleString += '}';\n            if (fontSizeMobile || lineHeightMobile) {\n                ruleString += `@media (max-width: 767px) { .resp_fonts ${ rule.selector } {`;\n                if (fontSizeMobile) {\n                    ruleString += `font-size: ${ fontSizeMobile }; `;\n                }\n                if (lineHeightMobile) {\n                    ruleString += `line-height: ${ lineHeightMobile }; `;\n                }\n                ruleString += `} }`;\n            }\n            results.push(ruleString);\n        });\n\n        return results;\n    }\n\n    static getInlineCSS(api, site) {\n        return [\n            {\n                key: 'custom_properties',\n                value: api.v1.config.get('css_build.custom_properties', { site }) || ''\n            },\n            {\n                key: 'background_colors',\n                value: api.v1.config.get('css_build.background_colors', { site }) || ''\n            },\n            {\n                key: 'background_colors_opacity',\n                value: api.v1.config.get('css_build.background_colors_opacity', { site }) || ''\n            },\n            {\n                key: 'border_colors',\n                value: api.v1.config.get('css_build.border_colors', { site }) || ''\n            },\n            {\n                key: 'font_colors',\n                value: api.v1.config.get('css_build.font_colors', { site }) || ''\n            },\n            {\n                key: 'image_gradient',\n                value: api.v1.config.get('css_build.image_gradient', { site }) || ''\n            }\n        ];\n    }\n\n    // (array) Config: { \"custom_css_variables\": { \"lab_page_width\": \"1088px\", ... }, ... }\n    // Read config and return an array of objects with \"key\" and \"value\" suitable for iteration in template.\n    static getCssVariables(api) {\n        const custom_css_variables = api.v1.config.get('custom_css_variables') || {};\n        const result = { no_viewport: [], desktop: [], mobile: [] };\n        for (const key of Object.keys(custom_css_variables)) {\n            for (const viewport of Object.keys(custom_css_variables[key])) {\n                result[viewport].push({ key, value: (custom_css_variables[key][viewport] || {}).value });\n            }\n        }\n        return result;\n    }\n\n}\n","export class TableFormatter {\n\n    static tsvStringToTable(data) {\n        return data.split('\\n').map(\n            (row) => row.split('\\t').map(\n                (cell) => cell.trim()\n            )\n        );\n    }\n\n    static tableToTSVString(table) {\n        if (!table) return null;\n        return table.map(\n            (row) => row.join('\\t')\n        ).join('\\n');\n    }\n\n    static getMaxRowLength(table) {\n        const cellCountList = table.map((row) => row.filter((cell) => cell.indexOf('|*') === -1).length);\n        return Math.max.apply(null, cellCountList);\n    }\n\n    static newCell(e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ''; return e ? { style: e, content: t } : { content: t }; }\n\n    static newRow(e, t) { return e ? { style: e, row: t } : { row: t }; }\n\n    static tableToTemplateBody(table) {\n        const maxRowLength = TableFormatter.getMaxRowLength(table);\n        return table\n            .filter((row) => row.join('').trim() !== '') // Dont process empty lines\n            .map((row) => {\n                let processedRow = row.map((cell) => {\n                    if (cell.indexOf('|') > -1) {\n                        const cellData = cell.split('|');\n                        // var [cellStyle, cellContent] = cell.split('|');\n                        return TableFormatter.newCell(cellData[0], cellData[1]);\n                    }\n                    return TableFormatter.newCell(null, cell);\n                });\n\n                const rowStyle = processedRow[processedRow.length - 1].content === '*' ? processedRow[processedRow.length - 1].style : null; // If this row has a style, get it.\n                if (rowStyle) {\n                    processedRow = processedRow.slice(0, processedRow.length - 1);\n                }\n\n                while (processedRow.length < maxRowLength) { // Add empty cells to avoid holes in the table\n                    processedRow.push(TableFormatter.newCell());\n                }\n\n                return TableFormatter.newRow(rowStyle, processedRow);\n            });\n    }\n\n    static templateTableBodyToHeader(processedTable, sort) {\n        if (!processedTable) {\n            return null;\n        }\n        const processedHeader = processedTable.shift();\n        if (sort) {\n            for (let colNum = 0; colNum < processedHeader.row.length; colNum++) {\n                const numbersInColumn = processedTable.map((row) => row[colNum]).filter((content) => /^[0-9, ]+$/.test(content)).length; // Count number of numbers in column\n                const datesInColumn = processedTable.map((row) => row[colNum]).filter((content) => Date.parse(content)).length; // Count number of dates in column\n                const colLength = processedTable.length;\n                processedHeader.row[colNum].sortBy = numbersInColumn === colLength ? 'number' : datesInColumn === colLength ? 'date' : 'string';\n            }\n        }\n        return processedHeader;\n    }\n\n}\n","import words from './words.js';\n\nexport class DateTimeHelper {\n\n    constructor(language = 'en', fallbackLanguage = 'en') {\n        this.fallbackLanguage = fallbackLanguage;\n        this.language = language || fallbackLanguage;\n        this.words = words;\n        this.timezone = this.getTimezone();\n    }\n\n    // (int) Get GMT timezone. Defaults to Western Europe (1)\n    // Value can be overridden by config 'timezone' (int or string)\n    getTimezone() {\n        const configValue = lab_api.v1.config.get('timezone');\n        if (configValue !== undefined && !Number.isNaN(configValue) && !Number.isNaN(parseFloat(configValue))) {\n            return parseInt(configValue, 10);\n        }\n        return 1;\n    }\n\n    str(key) {\n        let { language } = this;\n        if (!(key in this.words)) return null;\n        if (!(language in this.words[key])) language = this.fallbackLanguage;\n        if (!(language in this.words[key])) return null;\n        return this.words[key][language];\n    }\n\n    /*\n    Format  | Output              | Description\n    ---     | ---                 | ---\n    YY      | 18                  | Two-digit year\n    YYYY    | 2018                | Four-digit year\n    M       | 1-12                | The month, beginning at 1\n    MM      | 01-12               | The month, 2-digits\n    MMM     | Jan-Dec             | The abbreviated month name\n    MMMM    | January-December    | The full month name\n    D       | 1-31                | The day of the month\n    DD      | 01-31               | The day of the month, 2-digits\n    ddd     | Sun-Sat             | The short name of the day of the week\n    dddd    | Sunday-Saturday     | The name of the day of the week\n    H       | 0-23                | The hour\n    HH      | 00-23               | The hour, 2-digits\n    m       | 0-59                | The minute\n    mm      | 00-59               | The minute, 2-digits\n    s       | 0-59                | The second\n    ss      | 00-59               | The second, 2-digits\n    */\n    // https://day.js.org/docs/en/display/format\n\n    // 'template' is a standard Mustache template: 'Year: {{ YYYY }}, month: {{ MM }}, day: {{ DD }}'\n    format(date, template) {\n        return Mustache.render(template, {\n            YYYY: () => date.getFullYear(),                                     // (2022)\n            YY: () => `${ date.getFullYear() }`.slice(-2),                      // (22)\n            MM: () => (date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1), // (08)\n            M: () => date.getMonth() + 1,                                       // (8)\n            D: () => date.getDate(),                                            //\n            DD: () => (date.getDate() < 10 ? '0' : '') + date.getDate(),\n            H: () => date.getHours(),\n            HH: () => (date.getHours() < 10 ? '0' : '') + date.getHours(),\n            m: () => date.getMinutes(),\n            mm: () => (date.getMinutes() < 10 ? '0' : '') + date.getMinutes(),\n            s: () => date.getSeconds(),\n            ss: () => (date.getSeconds() < 10 ? '0' : '') + date.getSeconds(),\n            dddd: () => this.weekday(date, false),\n            ddd: () => this.weekday(date, false, 3),\n            MMMM: () => this.monthName(date, false),\n            MMM: () => this.monthName(date, false, 3),\n            W: () => this.weekNumber(date, true, true),\n            WW: () => this.weekNumber(date, true, false)\n        });\n    }\n\n    // 'template' is a standard Mustache template: 'Year: {{ YYYY }}, month: {{ MM }}, day: {{ DD }}'\n    utcFormat(date, template) {\n        const realDate = this.correctDate(date);\n        return Mustache.render(template, {\n            YYYY: () => realDate.getUTCFullYear(),                                     // (2022)\n            YY: () => `${ realDate.getUTCFullYear() }`.slice(-2),                      // (22)\n            MM: () => (realDate.getUTCMonth() < 9 ? '0' : '') + (realDate.getUTCMonth() + 1), // (08)\n            M: () => realDate.getUTCMonth() + 1,                                       // (8)\n            D: () => realDate.getUTCDate(),                                            //\n            DD: () => (realDate.getUTCDate() < 10 ? '0' : '') + realDate.getUTCDate(),\n            H: () => realDate.getUTCHours(),\n            HH: () => (realDate.getUTCHours() < 10 ? '0' : '') + realDate.getUTCHours(),\n            m: () => realDate.getUTCMinutes(),\n            mm: () => (realDate.getUTCMinutes() < 10 ? '0' : '') + realDate.getUTCMinutes(),\n            s: () => realDate.getUTCSeconds(),\n            ss: () => (realDate.getUTCSeconds() < 10 ? '0' : '') + realDate.getUTCSeconds(),\n            dddd: () => this.weekday(realDate, true),\n            ddd: () => this.weekday(realDate, true, 3),\n            MMMM: () => this.monthName(realDate, true),\n            MMM: () => this.monthName(realDate, true, 3),\n            W: () => this.weekNumber(realDate, true, true),\n            WW: () => this.weekNumber(realDate, true, false)\n        });\n    }\n\n    formattedDate(date, inputFormat, prependZeroDate = true, prependZeroTime = true) {\n        let format = inputFormat || '';\n        format = format.replace('Y', date.getFullYear());\n        format = format.replace('m', (prependZeroDate && date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1));\n        format = format.replace('d', (prependZeroDate && date.getDate() < 10 ? '0' : '') + date.getDate());\n        format = format.replace('H', (prependZeroTime && date.getHours() < 10 ? '0' : '') + date.getHours());\n        format = format.replace('i', (prependZeroTime && date.getMinutes() < 10 ? '0' : '') + date.getMinutes());\n        format = format.replace('s', date.getSeconds());\n        format = format.replace('l', this.weekday(date, false));\n        format = format.replace('D', this.weekday(date, false, 3));\n        format = format.replace('F', this.monthName(date, false));\n        format = format.replace('M', this.monthName(date, false, 3));\n        return format;\n    }\n\n    formattedUtcDate(date, inputFormat, prependZeroDate = true, prependZeroTime = true) {\n        const realDate = this.correctDate(date);\n        let format = inputFormat || '';\n        format = format.replace('Y', realDate.getUTCFullYear());\n        format = format.replace('m', (prependZeroDate && realDate.getUTCMonth() < 9 ? '0' : '') + (realDate.getUTCMonth() + 1));\n        format = format.replace('d', (prependZeroDate && realDate.getUTCDate() < 10 ? '0' : '') + realDate.getUTCDate());\n        format = format.replace('H', (prependZeroTime && realDate.getUTCHours() < 10 ? '0' : '') + realDate.getUTCHours());\n        format = format.replace('i', (prependZeroTime && realDate.getUTCMinutes() < 10 ? '0' : '') + realDate.getUTCMinutes());\n        format = format.replace('s', realDate.getUTCSeconds());\n        format = format.replace('l', this.weekday(realDate, true));\n        format = format.replace('D', this.weekday(realDate, true, 3));\n        format = format.replace('F', this.monthName(realDate, true));\n        format = format.replace('M', this.monthName(realDate, true, 3));\n        return format;\n    }\n\n    correctDate(date) {\n        return this.manipulateTime(date, this.isSummerTime(date) ? this.timezone + 1 : this.timezone);\n    }\n\n    utcDate(date) {\n        return this.unmanipulateTime(date, this.isSummerTime(date) ? this.timezone + 1 : this.timezone);\n    }\n\n    timestampToDate(timestamp) {\n        return new Date(timestamp * 1000);\n    }\n\n    toTimestamp(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    parseDate(str) {\n        const year = str.substr(0, 4);\n        const month = str.substr(4, 2) - 1;\n        const day = str.substr(6, 2);\n\n        const date = new Date(year, month, day);\n\n        // Note: Use sloppy compare (==)\n        const isValidYear = date.getFullYear() == year;\n        const isValidMonth = date.getMonth() == month;\n        const isValidDay = date.getDate() == day;\n\n        return (isValidYear && isValidMonth && isValidDay)\n            ? date\n            : 'invalid date';\n    }\n\n    weekday(date, isUtc = false, charCount = 9) {\n        const weekdays = [\n            this.str('sunday'),\n            this.str('monday'),\n            this.str('tuesday'),\n            this.str('wednesday'),\n            this.str('thursday'),\n            this.str('friday'),\n            this.str('saturday')\n        ];\n        return (weekdays[isUtc ? date.getUTCDay() : date.getDay()] || '').substr(0, charCount);\n    }\n\n    monthName(date, isUtc = false, charCount = 10) {\n        const months = [\n            this.str('january'),\n            this.str('february'),\n            this.str('mars'),\n            this.str('april'),\n            this.str('may'),\n            this.str('june'),\n            this.str('july'),\n            this.str('august'),\n            this.str('september'),\n            this.str('october'),\n            this.str('november'),\n            this.str('december')\n        ];\n        return (months[isUtc ? date.getUTCMonth() : date.getMonth()] || '').substr(0, charCount);\n    }\n\n    weekNumber(date, isUtc = false, shortFormat = true) {\n        const tdt = new Date(date.valueOf());\n        const dayn = ((isUtc ? date.getUTCDay() : date.getDay()) + 6) % 7;\n        tdt.setDate(tdt.getDate() - dayn + 3);\n        const firstThursday = tdt.valueOf();\n        tdt.setMonth(0, 1);\n        if (tdt.getDay() !== 4) {\n            tdt.setMonth(0, 1 + (((4 - tdt.getDay()) + 7) % 7));\n        }\n        const wn = 1 + Math.ceil((firstThursday - tdt) / 604800000);\n        return (!shortFormat && wn < 10 ? '0' : '') + wn;\n    }\n\n    timestampToNiceDate(timestamp, shortFormat = false) {\n        const labels = {\n            ago: shortFormat ? '' : this.str('ago'),\n            now: this.str('now'),\n            minute: shortFormat ? this.str('min') : this.str('minutes'),\n            minutes: shortFormat ? this.str('min') : this.str('minutes'),\n            hour: this.str('hour'),\n            hours: this.str('hours'),\n            day: this.str('day'),\n            days: this.str('days')\n        };\n\n        const dateNow = new Date().getTime();\n        const dateInput = new Date(timestamp * 1000).getTime() - 0;\n        const dateDiff = parseInt(((dateNow - dateInput) / 1000) / 60, 10); // Minutes.\n\n        if (dateDiff < 60) { // Less than 1 hour.\n            if (dateDiff < 1) {\n                return labels.now;\n            }\n            if (dateDiff == 1) {\n                return `1 ${ labels.minute } ${ labels.ago }`;\n            }\n            return `${ dateDiff } ${ labels.minutes } ${ labels.ago }`;\n        }\n\n        if (dateDiff < 1440) { // Less than 1 day.\n            if (parseInt((dateDiff / 60), 10) == 1) {\n                return `1 ${ labels.hour } ${ labels.ago }`;\n            }\n            return `${ parseInt((dateDiff / 60), 10)  } ${ labels.hours } ${ labels.ago }`;\n        }\n\n        if (parseInt(dateDiff / (60 * 24), 10) < 30) { // Less than 1 month.\n            if (parseInt(dateDiff / (60 * 24), 10) == 1) { // 1 or more days.\n                return `1 ${ labels.day } ${ labels.ago }`;\n            }\n            return `${ parseInt(dateDiff / (60 * 24), 10) } ${ labels.days } ${ labels.ago }`;\n        }\n\n        return this.format(\n            this.timestampToDate(timestamp),\n            this.str('monthdayyear')\n        );\n    }\n\n    isSummerTime(date) {\n        function lastSunday(month, year) {\n            const d = new Date();\n            const lastDayOfMonth = new Date(Date.UTC(year || d.getFullYear(), month + 1, 0));\n            const day = lastDayOfMonth.getDay();\n            return new Date(Date.UTC(lastDayOfMonth.getFullYear(), lastDayOfMonth.getMonth(), lastDayOfMonth.getDate() - day));\n        }\n        const d = date || new Date();\n        const starts = lastSunday(2, d.getFullYear());\n        starts.setHours(1);\n        const ends = lastSunday(9, d.getFullYear());\n        starts.setHours(1);\n        return d.getTime() >= starts.getTime() && d.getTime() < ends.getTime();\n    }\n\n    manipulateTime(date, hours) {\n        return new Date(date.getTime() + (hours * 60 * 60 * 1000));\n    }\n\n    unmanipulateTime(date, hours) {\n        return new Date(date.getTime() - (hours * 60 * 60 * 1000));\n    }\n\n}\n","/**\n * DateTimeHelper that uses localisation\n */\n\nimport { DateTimeHelper } from './DateTimeHelper.js';\n\nexport class DateTimeHelperInt extends DateTimeHelper {\n\n    // languageCode: 'nb-NO', 'en-GB', etc.\n    constructor({ languageCode } = {}) {\n        super('en');\n        this.languageCode = languageCode || lab_api.v1.config.get('contentLanguage');\n    }\n\n    str(key, { data, noRender } = {}) {\n        return lab_api.v1.locale.get(`dates.${ key }`, { data, noRender });\n    }\n\n    // durationSince:\n    // Norwegian structure: '{{count}} {{period}} {{ago}}' // 3 days ago\n    // Spanish structure: '{{ago}} {{count}} {{period}}' // ago 3 days\n    timestampToNiceDate(timestamp, shortFormat = false) {\n        const dateNow = new Date().getTime();\n        const dateInput = new Date(timestamp * 1000).getTime() - 0;\n        const dateDiff = parseInt(((dateNow - dateInput) / 1000) / 60, 10); // Minutes.\n\n        // Minutes. Less than 1 hour\n        if (dateDiff < 60) {\n            if (dateDiff < 1) {\n                return this.str('now');\n            }\n            return this.str('durationSince', {\n                data: {\n                    count: dateDiff,\n                    // eslint-disable-next-line no-nested-ternary\n                    period: shortFormat ? this.str('min') : (dateDiff === 1 ? this.str('minute') : this.str('minutes')),\n                    ago: shortFormat ? '' : this.str('ago')\n                }\n            });\n        }\n\n        // Hours. Less than 1 day\n        if (dateDiff < 1440) {\n            const count = parseInt((dateDiff / 60), 10);\n            return this.str('durationSince', {\n                data: {\n                    count,\n                    period: count === 1 ? this.str('hour') : this.str('hours'),\n                    ago: shortFormat ? '' : this.str('ago')\n                }\n            });\n        }\n\n        // Days. Less than 1 month\n        if (parseInt(dateDiff / (60 * 24), 10) < 30) {\n            const count = parseInt(dateDiff / (60 * 24), 10);\n            return this.str('durationSince', {\n                data: {\n                    count,\n                    period: count === 1 ? this.str('day') : this.str('days'),\n                    ago: shortFormat ? '' : this.str('ago')\n                }\n            });\n        }\n\n        // Date. More than one month\n        return this.format(\n            this.timestampToDate(timestamp),\n            this.str('monthdayyear', { noRender: true })\n        );\n    }\n\n}\n","export default {\n    sunday: {\n        en: 'sunday',\n        sv: 'söndag',\n        dk: 'søndag',\n        no: 'søndag',\n        nl: 'zondag',\n        kl: 'sapaat'\n    },\n    monday: {\n        en: 'monday',\n        sv: 'måndag',\n        dk: 'mandag',\n        no: 'mandag',\n        nl: 'maandag',\n        kl: 'ataasinngorneq'\n    },\n    tuesday: {\n        en: 'tuesday',\n        sv: 'tisdag',\n        dk: 'tirsdag',\n        no: 'tirsdag',\n        nl: 'dinsdag',\n        kl: 'marlunngorneq'\n    },\n    wednesday: {\n        en: 'wednesday',\n        sv: 'onsdag',\n        dk: 'onsdag',\n        no: 'onsdag',\n        nl: 'woensdag',\n        kl: 'pingasunngorneq'\n    },\n    thursday: {\n        en: 'thursday',\n        sv: 'torsdag',\n        dk: 'torsdag',\n        no: 'torsdag',\n        nl: 'donderdag',\n        kl: 'sisamanngorneq'\n    },\n    friday: {\n        en: 'friday',\n        sv: 'fredag',\n        dk: 'fredag',\n        no: 'fredag',\n        nl: 'vrijdag',\n        kl: 'tallimanngorneq'\n    },\n    saturday: {\n        en: 'saturday',\n        sv: 'lördag',\n        dk: 'lørdag',\n        no: 'lørdag',\n        nl: 'zaterdag',\n        kl: 'arfininngorneq'\n    },\n    january: {\n        en: 'January',\n        sv: 'januari',\n        dk: 'januar',\n        no: 'januar',\n        nl: 'januari',\n        kl: 'ukiortaarsiorneq'\n    },\n    february: {\n        en: 'February',\n        sv: 'februari',\n        dk: 'februar',\n        no: 'februar',\n        nl: 'februari',\n        kl: 'ukiortaami'\n    },\n    mars: {\n        en: 'March',\n        sv: 'mars',\n        dk: 'marts',\n        no: 'mars',\n        nl: 'maart',\n        kl: 'marsi'\n    },\n    april: {\n        en: 'April',\n        sv: 'april',\n        dk: 'april',\n        no: 'april',\n        nl: 'april',\n        kl: 'apriili'\n    },\n    may: {\n        en: 'May',\n        sv: 'maj',\n        dk: 'maj',\n        no: 'mai',\n        nl: 'mei',\n        kl: 'maajii'\n    },\n    june: {\n        en: 'June',\n        sv: 'juni',\n        dk: 'juni',\n        no: 'juni',\n        nl: 'juni',\n        kl: 'juuni'\n    },\n    july: {\n        en: 'July',\n        sv: 'juli',\n        dk: 'juli',\n        no: 'juli',\n        nl: 'juli',\n        kl: 'juuli'\n    },\n    august: {\n        en: 'August',\n        sv: 'augusti',\n        dk: 'august',\n        no: 'august',\n        nl: 'augustus',\n        kl: 'aggusti'\n    },\n    september: {\n        en: 'September',\n        sv: 'september',\n        dk: 'september',\n        no: 'september',\n        nl: 'september',\n        kl: 'septembari'\n    },\n    october: {\n        en: 'October',\n        sv: 'oktober',\n        dk: 'oktober',\n        no: 'oktober',\n        nl: 'oktober',\n        kl: 'oktobari'\n    },\n    november: {\n        en: 'November',\n        sv: 'november',\n        dk: 'november',\n        no: 'november',\n        nl: 'november',\n        kl: 'novembari'\n    },\n    december: {\n        en: 'December',\n        sv: 'december',\n        dk: 'december',\n        no: 'desember',\n        nl: 'december',\n        kl: 'decembari'\n    },\n    ago: {\n        en: 'ago',\n        sv: 'sedan',\n        dk: 'siden',\n        no: 'siden',\n        nl: 'geleden',\n        kl: 'matuma siorna'\n    },\n    now: {\n        en: 'now',\n        sv: 'nu',\n        dk: 'nu',\n        no: 'nå',\n        nl: 'nu',\n        kl: 'maanna'\n    },\n    min: {\n        en: 'min'\n    },\n    minutes: {\n        en: 'minutes',\n        sv: 'minuter',\n        dk: 'minutter',\n        no: 'minutter',\n        nl: 'minuten',\n        kl: 'minutsi'\n    },\n    hour: {\n        en: 'hour',\n        sv: 'timme',\n        dk: 'time',\n        no: 'time',\n        nl: 'uur',\n        kl: 'akunnera'\n    },\n    hours: {\n        en: 'hours',\n        sv: 'timmar',\n        dk: 'timer',\n        no: 'timer',\n        nl: 'uren',\n        kl: 'akunnerit'\n    },\n    day: {\n        en: 'day',\n        sv: 'dag',\n        dk: 'dag',\n        no: 'dag',\n        nl: 'dag',\n        kl: 'ulloq'\n    },\n    days: {\n        en: 'days',\n        sv: 'dagar',\n        dk: 'dage',\n        no: 'dager',\n        nl: 'dagen',\n        kl: 'ullut'\n    },\n    monthdayyear: {\n        en: '{{MMMM}} {{DD}}. {{YYYY}}',\n        sv: '{{DD}}/{{MM}} {{YYYY}}',\n        dk: '{{DD}}/{{MM}} {{YYYY}}',\n        no: '{{DD}}/{{MM}} {{YYYY}}',\n        nl: '{{DD}}/{{MM}} {{YYYY}}'\n    },\n    hourminute: {\n        en: '{{HH}}:{{mm}}'\n    }\n};\n","import { Insertable } from './Insertable.js';\nimport { Placement } from './Placement.js';\nimport { ViewData } from './ViewData.js';\n\nexport class DynamicDataHelper {\n\n    constructor(api) {\n        this.api = api;\n        this.page = this.api.v1.model.query.getRootModel();\n        this.pageType = this.api.v1.model.root.getType().replace('page_', '');\n        this.viewports = this.api.v1.viewport.getActive();\n        this.isEditor = this.api.v1.app.mode.isEditor();\n        this.cache = new Map();\n        this.pageElements = {};\n        this.hideAds = this.page.get('fields.hideAds') === '1' || this.page.get('fields.hideAds') === true;\n    }\n\n    hasRequiredElement(name) {\n        if (typeof this.pageElements[name] === 'undefined') {\n            this.pageElements[name] = !!this.api.v1.model.query.getModelByType(name);\n        }\n        return this.pageElements[name];\n    }\n\n    /**\n     * Inserts available data on a viewport.\n     *\n     * @param {string} viewport Name of the viewport you wish to insert data to.\n     * @param {string} pathFilter Filter to only insert data on a specific path.\n     * @returns {Array} Array of ads that should be inserted client side, not inserted here.\n     */\n    insert(viewport, pathFilter = null) {\n        const returnValue = [];\n        const clientSidePlacements = {};\n        const contentPath = `insertDynamic.${ this.pageType }.${ viewport }`;\n        const placementsPath = `placements.${ this.pageType }.${ viewport }`;\n\n        /*\n        {\n            \"type\": \"browserFeed\",\n            \"metadata\": {},\n            \"placement\": {\n                \"key\": \"article_bottom\"\n            },\n            \"cssSettings\": {\n                \"some_css_class\": true\n            },\n            \"content_data\": {\n                \"fields\": {\n                    \"type\": \"fragment\",\n                    \"pageId\": \"100233\",\n                    \"contentType\": \"row\",\n                    \"contentCount\": 4\n                }\n            },\n            \"dynamicDataSettings\": {\n                \"hideInEditMode\": true\n            },\n            \"conditions\": [{\n                \"field\": \"primaryTags.section\",\n                \"operator\": \"equals\",\n                \"value\": \"Nyhet\"\n            }]\n        }\n        */\n\n        let hasAdditions = false;\n        const placements = (this.api.v1.config.get(placementsPath) || []).filter((placement) => {\n            if (placement.client) {\n                if (!placement.requireElement || this.hasRequiredElement(placement.requireElement)) {\n                    clientSidePlacements[placement.key] = placement;\n                }\n                return false;\n            }\n            return true;\n        });\n\n        if (!this.cache.has(contentPath)) {\n            // insertDynamicAdditions ignores viewport\n            const contentAdditionsPath = `insertDynamicAdditions.${ this.pageType }`;\n            const defaultValue = this.api.v1.config.get(contentPath) || [];\n            const additionsValue = this.validateConditions(this.api.v1.config.get(contentAdditionsPath) || []).reverse();\n            hasAdditions = additionsValue.length > 0;\n            const mergedValue = [...defaultValue, ...additionsValue];\n            const content = (this.isEditor ? mergedValue.filter((item) => (!item.dynamicDataSettings || !item.dynamicDataSettings.hideInEditMode)) : mergedValue).filter((item) => {\n                if (item.placement && item.placement.key && clientSidePlacements[item.placement.key]) {\n                    const clientSideItem = { ...item, placementData: clientSidePlacements[item.placement.key] };\n                    returnValue.push(clientSideItem);\n                    return false;\n                }\n                return true;\n            });\n            this.cache.set(contentPath, content);\n        }\n\n        if (!this.cache.has(placementsPath)) {\n            if (hasAdditions) {\n                const additionsPlacementsPath = `placementsAdditions.${ this.pageType }`;\n                const additions = this.api.v1.config.get(additionsPlacementsPath) || [];\n                placements.push(...additions);\n            }\n            this.cache.set(placementsPath, placements.map((placement) => new Placement(placement)));\n        }\n\n        const insertables = this.parse(\n            this.cache.get(contentPath),\n            this.cache.get(placementsPath),\n            viewport,\n            pathFilter\n        );\n\n        for (const insertable of insertables) {\n            if (insertable.selector) {\n                this.api.v1.model.insert.bySelector({\n                    selector: insertable.selector,\n                    data: insertable.data,\n                    options: insertable.options\n                });\n            } else if (insertable.path) {\n                this.api.v1.model.insert.atPath({\n                    path: insertable.path,\n                    data: insertable.data,\n                    options: insertable.options\n                });\n            }\n        }\n        return returnValue;\n    }\n\n    // (array) Validate conditions for each item in the content array.\n    validateConditions(content) {\n        return content.filter((item) => {\n            if (item.excludeDuplicates) {\n                if (this.api.v1.model.query.getModelByType(item.type)) {\n                    Sys.logger.debug(`[DynamicDataHelper]: Element of type \"${ item.type }\" already exist on page. Skipping.`);\n                    return false;\n                }\n            }\n            if (item && item.conditions) {\n                const { conditions } = item;\n                for (const condition of conditions) {\n                    const { field, operator, value = '' } = condition;\n                    const pageValue = this.page.get(field || '', undefined, true);\n                    if (pageValue === undefined) {\n                        // eslint-disable-next-line no-continue\n                        Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${ item.type }\" ignored. Value of field: \"${ field }\" is undefined.`);\n                        continue;\n                    }\n                    switch (operator) {\n                        case 'equals':\n                            if (pageValue !== value) {\n                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${ item.type }\" failed. Field: \"${ field }\", operator \"${ operator }\", value: \"${ value }\", page value: \"${ pageValue }\".`);\n                                return false;\n                            }\n                            break;\n                        case 'notEquals':\n                            if (pageValue === value) {\n                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${ item.type }\" failed. Field: \"${ field }\", operator \"${ operator }\", value: \"${ value }\", page value: \"${ pageValue }\".`);\n                                return false;\n                            }\n                            break;\n                        case 'contains':\n                            if (!pageValue.includes(value)) {\n                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${ item.type }\" failed. Field: \"${ field }\", operator \"${ operator }\", value: \"${ value }\", page value: \"${ pageValue }\".`);\n                                return false;\n                            }\n                            break;\n                        case 'notContains':\n                            if (pageValue.includes(value)) {\n                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type \"${ item.type }\" failed. Field: \"${ field }\", operator \"${ operator }\", value: \"${ value }\", page value: \"${ pageValue }\".`);\n                                return false;\n                            }\n                            break;\n                        default:\n                            // No valid operator, ignore the item.\n                            Sys.logger.warning(`[DynamicDataHelper]: Operator \"${ operator }\" is not valid. The condition fails and the item is not inserted onto the page.`);\n                            return false;\n                    }\n                }\n                // All conditions passed, accept the item.\n                Sys.logger.debug(`[DynamicDataHelper]: All conditions (${ conditions.length }) for inserting element type \"${ item.type }\" accepted. Will insert.`);\n                return true;\n            }\n            // No conditions, accept the item.\n            Sys.logger.debug(`[DynamicDataHelper]: No validation specified for inserting element type \"${ item.type }\". Will insert.`);\n            return true;\n        });\n    }\n\n    parse(content = [], placements = [], viewport = 'desktop', pathFilter = null) {\n        const insertables = [];\n\n        // Iterate through all ad-content\n        for (const item of content) {\n            const [placement] = placements.filter(({ key }) => key === item.placement.key);\n            if (placement) {\n                if (this.acceptPath(placement.path, pathFilter)) {\n                    // Create the insertable by checking if the placement is allowed on the current viewport.\n                    const insertable = this.create(item, placement, content, viewport);\n                    if (insertable !== null) {\n                        insertable.data.metadata.viewportBlacklist = this.viewports.filter((current) => current !== viewport);\n                        insertables.unshift(insertable);\n                    }\n                } else {\n                    Sys.logger.debug(`[DynamicDataHelper]: Path \"${ placement.path }\" not allowed. Filter: \"${ pathFilter }\", key: \"${ item.placement.key }\"`);\n                }\n            } else {\n                Sys.logger.debug(`[DynamicDataHelper]: No placement found with key \"${ item.placement.key }\"`);\n            }\n        }\n\n        return insertables;\n    }\n\n    create(item, placement, allItems, viewport = 'desktop') {\n        if (this.filter(item)) {\n            const data = this.assemble(item, placement);\n            if (placement.path && placement.selector) {\n                const placeholder = this.api.v1.model.query.getModelBySelector(placement.selector);\n                if (!placeholder) {\n                    this.api.v1.model.insert.atPath({\n                        path: placement.path,\n                        data: {\n                            type: 'placeholder',\n                            selector: placement.selector,\n                            metadata: {\n                                ...(placement.metadata || {}),\n                                key: placement.key\n                            },\n                            state: {\n                                isNonPersistent: true\n                            }\n                        },\n                        options: {\n                            index: 0,\n                            useExisting: true,\n                            prepend: true,\n                            silent: true\n                        }\n                    });\n                }\n            }\n\n            const options = {\n                ...item.options,\n                prepend: true,\n                silent: true\n            };\n            let { path } = placement;\n            let index = item.placement.index || 0;\n            let model = null;\n            if (placement.selector) {\n                model = this.api.v1.model.query.getModelBySelector(placement.selector);\n            } else if (placement.path) {\n                // Get the non-ad models that should be rendered out.\n                const models = this.getModelsByPath(placement.path, viewport);\n                if (models.length) {\n                    if (placement.options.useBodyTextIndex || placement.options.useBodyTextHeadingIndex || placement.options.lastBodyTextHeading) {\n                        model = models.find((m) => m.getType() === 'bodytext');\n                    } else {\n                        // If the ad is to be inserted, get the model at the same index as the ad.\n                        model = placement.options.shouldInsert ? models[0].children[index] : models[index];\n                    }\n                }\n            }\n\n            // If we don't have a model here, it's because there was none at the index of the ad.\n            if (model || !placement.options.skipIfOutOfBounds) {\n                if (model) {\n                    index = this.api.v1.model.query.getIndex(model);\n\n                    let parent = model.getParent();\n                    // Mobile edge-cases.\n                    if (viewport === 'mobile') {\n                        if (index > 0 && index < parent.children.length) {\n                            let current = parent.children[index];\n                            while (current) {\n                                const width = model.get('width', viewport, true);\n                                if (width === undefined || width === 100) break;\n                                current = parent.children[++index];\n                            }\n                        }\n\n                        if (parent.get('metadata.hasRowTitle') && (index === 0 || index >= parent.children.length)) {\n                            model = parent;\n                            parent = model.getParent();\n                            index = this.api.v1.model.query.getIndex(model);\n                            path = parent.getPositionedPath();\n                        }\n                    }\n\n                    if (placement.options.useIndex) {\n                        if (index < parent.children.length) {\n                            // If the previous model is set to not render, we need to set the index to +1 so it will render after the next model.\n                            if (parent.children[index - 1] && parent.children[index - 1].getNoRenderState()) {\n                                // Check if the next ad content has the same index as current index + 1,\n                                // That means they have ads two rows in a row, so we can discard the one that was\n                                // supposed to be rendered after the row that is hidden\n                                if (allItems[index + 1] && allItems[index + 1].placement.index === index + 1) {\n                                    return null;\n                                }\n\n                                options.index = index + 1;\n                            } else {\n                                options.index = index;\n                            }\n                        }\n                    }\n\n                    if (!placement.options.shouldInsert) {\n                        path = parent.getPositionedPath();\n                    }\n                } else {\n                    options.prepend = false;\n                }\n\n                return new Insertable({\n                    data,\n                    options,\n                    selector: placement.selector,\n                    path\n                });\n            }\n        }\n\n        return null;\n    }\n\n    assemble(item, placement) {\n        let data = new ViewData(item);\n\n        if (!placement.selector) {\n            data.metadata = {\n                ...data.metadata,\n                ...placement.metadata,\n                css: placement.metadata.css ? `${ data.metadata.css } ${ placement.metadata.css }` : data.metadata.css || ''\n            };\n        }\n\n        if (placement.options.wrap) {\n            data = new ViewData({\n                type: placement.options.wrap.type,\n                metadata: placement.options.wrap.metadata,\n                children: [data]\n            });\n        }\n\n        if (placement.options.skipIfOutOfBounds) {\n            data.metadata.skipIfOutOfBounds = true;\n        }\n\n        if (placement.options.useBodyTextIndex) {\n            data.metadata.bodyTextIndex = item.placement.index || 0;\n        } else if (placement.options.useBodyTextHeadingIndex) {\n            data.metadata.bodyTextHeadingIndex = item.placement.index || 0;\n        }\n\n        if (placement.options.lastBodyTextHeading) {\n            data.metadata.lastBodyTextHeading = true;\n        }\n\n        data.state.isNonPersistent = true;\n\n        return data;\n    }\n\n    acceptPath(path, pathFilter) {\n        if (!path || !pathFilter) {\n            return true;\n        }\n        return path === pathFilter;\n    }\n\n    // Note (Birk):\n    // This is not a very scalable solution, but will have to do for now.\n    // In the future, I recommend we move this filter to each \"item\" which is to be received by the DynamicDataHelper instance.\n    // This way the helper will stay independent, and not care about specific implementations.\n    filter(item) {\n        if (item.type === 'googleAd' || item.type === 'adnuntiusAd') {\n            return !this.hideAds;\n        }\n        return true;\n    }\n\n    // (Array) Get a list of models at supplied path. Validate that models are not hidden in viewport.\n    getModelsByPath(path, viewport) {\n        const key = `getByPath-${ path }`;\n        if (!this.cache.has(key)) {\n            this.cache.set(key, (this.api.v1.model.query.getModelsByPath(path) || []).filter((m) => !m.get('metadata.hideViewport', viewport) && !m.isNonPersistent()));\n        }\n        return this.cache.get(key);\n    }\n\n}\n","export class EsiHelper {\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    register(model, sitename) {\n\n        if (this.api.v1.app.mode.isFragmentMode()) {\n            Sys.logger.debug('[EsiHelper] Labrador is is fragment-mode. Will not register ESI. Skipping.');\n            return;\n        }\n        if (!model) {\n            Sys.logger.debug('[EsiHelper] Missing model, cannot process. Skipping.');\n            return;\n        }\n\n        // Include a footer from another page (fragment-api)\n        // Example-url: http://api-www-default.localhost/fragment/structure/?pageId=104907&path=/dropzone&structureType=row&start=0&count=1\n        // This config can be set using an admin-tool\n        const footerInclude = this.api.v1.config.get('footer.include');\n        if (footerInclude && footerInclude.pageId) {\n            const footerUrl = this.getEsiUrl(footerInclude);\n            if (footerUrl) {\n                if (footerInclude.render === 'client') {\n                    model.setFiltered('renderFooter.url', footerUrl);\n                } else {\n                    this.insertEsi(model, footerUrl, 'esi_footer');\n                }\n            } else {\n                Sys.logger.warning('[EsiHelper] Cannot prepare url for footer-fragment. Missing url.');\n            }\n        }\n\n        /*\n        // Add to Config-object for site:\n        \"header\": {\n            \"include\": {\n                \"path\": \"/dropzone\",\n                \"count\": 1,\n                \"start\": 0,\n                \"pageId\": 121919,\n                \"structureType\": \"topcomments\"\n            }\n        }\n        Draw in client: (\"render\" = \"client\")\n        \"header\": {\n            \"include\": {\n                \"path\": \"/dropzone\",\n                \"count\": 1,\n                \"start\": \"0\",\n                \"pageId\": 103486,\n                \"structureType\": \"row\",\n                \"render\": \"client\"\n            },\n            \"includes\": [{\n                \"path\": \"/dropzone\",\n                \"count\": 1,\n                \"start\": \"4\",\n                \"pageId\": 103486,\n                \"structureType\": \"row\",\n                \"render\": \"client\"\n            }]\n        }\n        */\n\n        const headerInclude = this.api.v1.config.get('header.include');\n        const headerIncludes = this.api.v1.config.get('header.includes') || [];\n        const headerIncludeUrls = [];\n        if (headerInclude && headerInclude.pageId) {\n            const clientRenderUrl = this.insertHeader(headerInclude, model);\n            if (clientRenderUrl) {\n                headerIncludeUrls.push(clientRenderUrl);\n            }\n        }\n        for (const include of headerIncludes) {\n            if (include && include.pageId) {\n                const clientRenderUrl = this.insertHeader(include, model);\n                if (clientRenderUrl) {\n                    headerIncludeUrls.push(clientRenderUrl);\n                }\n            }\n        }\n        model.setFiltered('renderHeader.urls', headerIncludeUrls.map((url) => `'${ url }'`).join(', '));\n    }\n\n    getEsiUrl(config) {\n        if (!config.pageId) { return null; }\n        const attributes = ['pageId', 'path', 'structureType', 'start', 'count'];\n        const urlArguments = [];\n        attributes.forEach((attr) => {\n            if (config[attr] !== undefined && config[attr] !== '' && config[attr] !== null) {\n                urlArguments.push(`${ attr }=${ config[attr] }`);\n            }\n        });\n        // Require all attributes to be present:\n        if (urlArguments.length === attributes.length) {\n            let front_api_url = this.api.v1.properties.get('front_api_url');\n            if (this.api.v1.app.mode.isEditor()) {\n                if (document.location.protocol === 'https:') {\n                    // Enforce same protocol:\n                    front_api_url = front_api_url.replace('http:', 'https:');\n                }\n            }\n            return `${ front_api_url }/fragment/structure/?${ urlArguments.join('&') }`;\n        }\n        return null;\n    }\n\n    insertEsi(model, url, selector) {\n        Sys.logger.debug(`[EsiHelper] Will insert fragment for selector: \"${ selector }\", url: \"${ url }\".`);\n        this.api.v1.model.insert.atPath({\n            path: model.getPath(),\n            data: {\n                type: 'esi',\n                selector,\n                contentdata: {\n                    fields: {\n                        url,\n                        identifier: selector\n                    }\n                },\n                state: {\n                    isNonPersistent: true\n                }\n            },\n            options: {\n                frontpage: true,\n                articlepage: true\n            }\n        });\n        if (this.api.v1.app.mode.isEditor()) {\n            // In editor a placeholder is by now inserted.\n            // Fetch markup from url and replace placeholder:\n            this.fetchEditorEsi(url, `${ selector }`);\n        }\n    }\n\n    insertHeader(headerInclude, model) {\n        const headerUrl = this.getEsiUrl(headerInclude);\n        if (headerUrl) {\n            if (headerInclude.render === 'client') {\n                Sys.logger.debug(`[EsiHelper] Found url for header-fragment to render in client: \"${  headerUrl  }\".`);\n                return headerUrl;\n            }\n            this.insertEsi(model, headerUrl, 'esi_header');\n        } else {\n            Sys.logger.warning('[EsiHelper] Cannot prepare url for header-fragment. Missing url.');\n        }\n        return null;\n    }\n\n    fetchEditorEsi(url, selector) {\n        this.api.v1.view.on('domRendered', (elements, viewport) => {\n            const model = this.api.v1.model.query.getModelBySelector(selector);\n            if (!model) {\n                return;\n            }\n            Sys.logger.debug(`EsiHelper.fetchEditorEsi: Will fetch esi-substitute for editor. Selector: ${ selector }, url: ${ url }`);\n            this.api.v1.util.httpClient.get(url, { credentials: 'omit', type: 'text' })\n                .then((html) => {\n                    const view = lab_api.v1.view.getView(model, viewport);\n                    const tmpl = document.createElement('template');\n                    tmpl.innerHTML = html;\n                    Sys.logger.debug(`EsiHelper.fetchEditorEsi: Esi-substitute fetched. Selector: ${ selector }, element-count: ${ tmpl.content.children.length }`);\n                    if (!view.markup) {\n                        Sys.logger.warn(`EsiHelper.fetchEditorEsi: Element markup not found. Cannot insert dom-element(s). Selector: ${ selector }`);\n                        return;\n                    }\n                    for (const element of [...tmpl.content.children]) {\n                        view.markup.parentElement.insertBefore(element, view.markup);\n                    }\n                    view.markup.remove();\n                }).catch((err) => {\n                    Sys.logger.warning(`EsiHelper.fetchEditorEsi: Esi-substitute could not be fetched. Selector: ${ selector }, error: ${ err }`);\n                });\n        });\n    }\n\n}\n","export class Insertable {\n\n    constructor({\n        path = null,\n        selector = null,\n        data = {},\n        options = {}\n    } = {}) {\n        this.path = path;\n        this.selector = selector;\n        this.data = data;\n        this.options = {\n            persistentTarget: true,\n            intermediate: {\n                useExisting: true\n            },\n            ...options\n        };\n    }\n\n}\n","export class Placement {\n\n    constructor({\n        key = null,\n        path = null,\n        selector = null,\n        placeholder = null,\n        metadata = {},\n        options: {\n            shouldInsert = true,\n            wrap = null,\n            skipIfOutOfBounds = false,\n            useIndex = false,\n            useBodyTextIndex = false,\n            useBodyTextHeadingIndex = false,\n            lastBodyTextHeading = false\n        } = {}\n    } = {}) {\n        this.key = key;\n        this.path = path;\n        this.selector = selector;\n        this.placeholder = placeholder;\n        this.metadata = metadata;\n        this.options = {\n            shouldInsert,\n            wrap,\n            skipIfOutOfBounds,\n            useIndex,\n            useBodyTextIndex,\n            useBodyTextHeadingIndex,\n            lastBodyTextHeading\n        };\n    }\n\n}\n","export class ViewData {\n\n    constructor({\n        type = null,\n        contentdata = null,\n        content_data = null,\n        cssSettings = {},\n        children = [],\n        metadata = {}\n    } = {}) {\n        this.type = type;\n        this.contentdata = contentdata || content_data;\n        this.children = children;\n        this.metadata = { ...metadata };\n        this.state = {};\n\n        const css = [];\n        if (this.metadata.css) css.push(this.metadata.css);\n        for (const key of Object.keys(cssSettings)) {\n            if (cssSettings[key]) css.push(key);\n        }\n\n        this.metadata.css = css.join(' ');\n    }\n\n}\n","import { DateTimeHelper } from '../../lib/helpers/datetime/DateTimeHelper.js';\n\n/**\n * @typedef {string}\n * @enum {TEST_METHODS}\n */\nexport const TEST_METHODS = {\n    CLICK_RATIO_95_QUICK_EXIT: 'clickratio95qe',\n    CLICK_RATIO_95: 'clickratio95'\n};\n\nexport class AbTest {\n\n    /**\n     * @param {string} [data.id]\n     * @param {string} [data.placeId]\n     * @param {string} [data.status]\n     * @param {{TEST_METHODS}} [data.testMethod]\n     * @param {string} [data.url]\n     * @param {string} [data.start]\n     * @param {string} [data.end]\n     * @param {Object<string, *>} [data.results]\n     * @param {boolean} [data.published]\n     * @param {boolean} [data.includeOriginal]\n     */\n    constructor(data = {}) {\n        this.id = data.id || null;\n        this.placeId = data.placeId || null;\n        this.status = data.status || 'Not started';\n        this.testMethod = data.testMethod || TEST_METHODS.CLICK_RATIO_95_QUICK_EXIT;\n        this.methodoptions = {\n            minVariantDifference: 23,\n            minimumclicks: 100,\n            defaultVariantWinner: 'best'\n        };\n        this.url = data.url || '';\n        this.start = data.start || '';\n        this.end = data.end || '';\n        this.results = data.results || {};\n        this.published = !!data.published || false;\n        this.dateTimeHelper = new DateTimeHelper(lab_api.v1.config.get('lang') || 'no');\n        this.includeOriginal = data.includeOriginal !== false;\n    }\n\n    static getTestMethods() {\n        return [\n            { key: TEST_METHODS.CLICK_RATIO_95, description: 'Clickratio using all clicks' },\n            { key: TEST_METHODS.CLICK_RATIO_95_QUICK_EXIT, description: 'Clickratio without quick exits' }\n        ];\n    }\n\n    get correct_start() {\n        return this.toLocalDateString((this.start !== '') ? new Date(this.start) : '');\n    }\n\n    get correct_end() {\n        return this.toLocalDateString((this.end !== '') ? new Date(this.end) : '');\n    }\n\n    isFinished() {\n        return ['finished', 'inconclusive', 'stopped', 'concluded'].includes(this.status);\n    }\n\n    isRunning() {\n        return (this.status === 'running' || this.status === 'pending');\n    }\n\n    toLocalDateString(date) {\n        if (!date) {\n            return '';\n        }\n        return new Date(date.getTime() + new Date().getTimezoneOffset() * -60 * 1000).toISOString().slice(0, 19);\n    }\n\n    serialize(preparedVariants, originalTitle, originalPublishedUrl) {\n        const startDate = (this.start !== '') ? new Date(this.start) : '';\n        const endDate = (this.end !== '') ? new Date(this.end) : '';\n        const variants = [];\n        if (this.includeOriginal) {\n            // We need to add an item for the original article-teaser in data we send to Kilkaya\n            // Client side it is identified as 'original' and we'll use the version rendered server side.\n            // Use the actual title of the article to easier identify it in Kilkaya A/B GUI.\n            const title = lab_api.v1.util.string.stripTags(originalTitle || 'Original article');\n            const data = [\n                { name: 'title', value: title },\n                { name: 'identifier', value: 'original' }\n            ];\n            if (originalPublishedUrl) {\n                data.push({ name: 'url', value: lab_api.v1.site.getSite().domain + originalPublishedUrl });\n            }\n            variants.push({\n                vid: 1,\n                active: this.includeOriginal,\n                data,\n                name: title\n            });\n        }\n        let cc = 2;\n        for (const [variant] of preparedVariants) {\n            const item = {\n                vid: cc,\n                active: !variant.state.disabled,\n                data: [\n                    { name: 'title', value: lab_api.v1.util.string.stripTags(variant.data.contentdata.fields.title.value) },\n                    { name: 'identifier', value: variant.guid }\n                ],\n                name: variant.name\n            };\n            if (variant.data.contentdata.fields.published_url) {\n                item.data.push({ name: 'url', value: lab_api.v1.site.getSite().domain + variant.data.contentdata.fields.published_url.value });\n            }\n            variants.push(item);\n            cc += 1;\n        }\n        return {\n            id: this.id,\n            placeId: this.placeId,\n            status: this.status,\n            testMethod: this.testMethod,\n            methodoptions: JSON.stringify(this.methodoptions),\n            url: this.url,\n            // editurl: window.location.href,\n            start: (startDate !== '') ? startDate.toISOString().slice(0, 19) : '',\n            end: (endDate !== '') ? endDate.toISOString().slice(0, 19) : '',\n            published: this.published,\n            variants: JSON.stringify(variants)\n        };\n    }\n\n    updateTestData(data) {\n        for (const key in data) {\n            if (key === 'url' && data[key] === null) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (key === 'methodoptions' && typeof data[key] === 'object') {\n                for (const k of Object.keys(data[key])) {\n                    const optionValue = ['minVariantDifference', 'minimumclicks'].includes(k) ? parseInt(data[key][k], 10) : data[key][k];\n                    this.methodoptions[k] = optionValue;\n                }\n            } else if (key !== 'methodoptions') {\n                this[key] = data[key];\n            }\n        }\n    }\n\n    shouldSave() {\n        if (this.start !== '' || this.end !== '') {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","export class PublishUpdater {\n\n    constructor(api, model) {\n        this.api = api;\n        this.model = model;\n    }\n\n    // (void)\n    async willPublish() {\n\n        // 1) Find all collections used on this page\n        const collectionIds = await this.getCollections();\n\n        // 2) Get current stored collection id's\n        const current = this.model.get('fields.abtestCollectionIds_json') || [];\n\n        // 3) Check if modified, if so: Store new list on model and re-publish\n        if (this.hasDiff(current, collectionIds)) {\n            this.model.set('fields.abtestCollectionIds_json', collectionIds);\n            this.model.set('fields.lab_override_config_presentation', this.getPreloadConfig(collectionIds));\n            setTimeout(() => {\n                this.api.v1.app.publish();\n            }, 1000);\n        }\n    }\n\n    // (array) Get id of all collections used on current page\n    async getCollections() {\n        const ids = await this.api.v1.abtest.collection.listByPageId(this.model.get('id'));\n        return ids ? ids.result : [];\n    }\n\n    // (boolean)\n    hasDiff(array1, array2) {\n        if (array1.length !== array2.length) {\n            return true;\n        }\n        for (const id of array1) {\n            if (!array2.includes(id)) { return true; }\n        }\n        for (const id of array2) {\n            if (!array1.includes(id)) { return true; }\n        }\n        return false;\n    }\n\n    // (string)\n    getPreloadConfig(idList) {\n        if (!idList.length) {\n            return '';\n        }\n        return JSON.stringify({\n            preloadObject: {\n                abtests: {\n                    mode: 'presentation',\n                    type: 'json',\n                    timeout: 1000,\n                    url: `{{api}}/api/v1/ab_collection?query=id:(${ encodeURIComponent(idList.join(' OR ')) })&content=full`,\n                    path: 'ab_collections'\n                }\n            }\n        });\n    }\n\n}\n","// import templates from './templates.js';\nimport { TestManagerBase } from './TestManagerBase.js';\n\nexport class TestManagerArticle extends TestManagerBase {\n\n    constructor(api, model, endCallback) {\n        super(api, model);\n        this.endCallback = endCallback;\n        this.instanceOfId = this.model.getId();\n        this.ui.sizes = {\n            logo: 3,\n            variantsContainer: 9,\n            variants: 5,\n            selectedVariant: 7\n        };\n        this.ui.displayArticleData = true;\n        this.usePartialData = true;\n        this.api.v1.apps.start('TextEdit').then((textTool) => {\n            this.textEditor = textTool;\n        }).catch((error) => {\n            console.error(`Error loading TextEdit-app: ${ error }`);\n        });\n        this.CropEditorModule = this.api.v1.tool.classes.get('ImageEdit').getEditor();\n    }\n\n    setupEditables(model, skipEditor = false) {\n        const editables = {};\n        if (this.ui.editablesContainer) {\n            editables.image = this.setupEditableImage(model, skipEditor);\n            editables.kicker = this.setupEditable(model, 'fields.kicker', skipEditor);\n            editables.title = this.setupEditable(model, 'fields.title', skipEditor);\n            editables.subtitle = this.setupEditable(model, 'fields.subtitle', skipEditor);\n        }\n        return editables;\n    }\n\n    setupEditableImage(model, skipEditor) {\n        const image = this.api.v1.model.query.getChildOfType(model, 'image');\n        return this.createImageElements(image, model);\n    }\n\n    async setupImagePlaceholder(model) {\n        const image = await this.getModelImageData();\n        if (image) {\n            const element = this.createImageElements(this.api.v1.model.create.view(image), model, true);\n            this.ui.editablesContainerImage.appendChild(element);\n        }\n    }\n\n    updateImage(model) {\n        this.ui.editablesContainerImage.innerHTML = '';\n        const el = this.createImageElements(model, model ? model.getParent() : undefined);\n        this.ui.editablesContainerImage.appendChild(el);\n        if (this.preparedVariants.get(this.currentVariant)) {\n            this.preparedVariants.get(this.currentVariant).editables.image = el;\n        }\n    }\n\n    removeImage(model) {\n        this.api.v1.model.delete(model);\n        this.updateImage();\n    }\n\n    async showDefaultFields() {\n        let image = await this.getModelImageData();\n        if (image !== null && !image.data) {\n            image = this.api.v1.model.create.view(image);\n        }\n        this.updateImage(image);\n    }\n\n    changeImage(currentImage, parent) {\n        this.api.v1.collection.display({\n            name: 'MediaImagesThisPage',\n            modal: true,\n            skipCache: true,\n            options: {\n                label: 'Images from this page',\n                clickHandler: (model, element) => {\n                    this.setImage(model, currentImage, parent);\n                },\n                navigation: [\n                    {\n                        label: 'Display All images',\n                        name: 'MediaImages',\n                        modal: true,\n                        skipCache: true,\n                        options: {\n                            label: 'All images',\n                            archiveActive: false,\n                            onlyLabradorSource: true,\n                            clickHandler: (model, element) => {\n                                this.setImage(model, currentImage, parent);\n                            },\n                            navigation: [\n                                {\n                                    label: 'Display This page',\n                                    name: 'MediaImagesThisPage',\n                                    modal: true,\n                                    skipCache: true\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n    }\n\n    setImage(model, currentImage, parent) {\n        if (currentImage) {\n            this.removeImage(currentImage);\n        }\n        this.api.v1.model.setNonPersistentState(model, true);\n        parent.addChild(model);\n        this.updateImage(model);\n    }\n\n    createImageElements(image, parent, placeholder = false) {\n        const buttons = this.api.v1.util.dom.renderTemplate(`<div class=\"abtest-image-btns\">\n            <input type=\"button\" class=\"btn-remove-image\" value=\"Remove\" ${ (!image || placeholder) ? 'disabled' : '' }>\n            <input type=\"button\" class=\"btn-change-image\" value=\"Change\" ${ !this.currentVariant ? 'disabled' : '' }>\n        </div>`, {}, true);\n        buttons.querySelector('.btn-remove-image').addEventListener('click', (event) => {\n            this.removeImage(image);\n        });\n        buttons.querySelector('.btn-change-image').addEventListener('click', (event) => {\n            this.changeImage(image, parent);\n        });\n\n        if (!image) {\n            const el = this.api.v1.util.dom.renderTemplate(`\n                <div class=\"abtest-image-el\">\n                    <div class=\"lab-empty-placeholder lab-color-light lab-bordered\">\n                        <div class=\"lab-inner\">\n                            <div class=\"lab-icon-large labicon-images\"></div>\n                        </div>\n                    </div>\n                </div>\n            `, {}, true);\n            el.appendChild(buttons);\n            return el;\n        }\n        const imageServer = this.api.v1.properties.get('image_server');\n        const view = this.api.v1.view.getView(image);\n        const cropdata = {\n            cropw: view.get('fields.cropw') || 100,\n            croph: view.get('fields.croph') || 100,\n            x: view.get('fields.x') || 0,\n            y: view.get('fields.y') || 0\n        };\n        const size = {\n            w: 270,\n            h: 122\n        };\n        const el = this.api.v1.util.dom.renderTemplate(`\n            <div class=\"abtest-image-el\">\n                <figure><img src=\"${ imageServer }/${ image.get('instance_of') }.webp?imageId=${ image.get('instance_of') }&width=${ size.w }&height=${ size.h }&${ Object.keys(cropdata).map((key) => `${ key }=${ cropdata[key] }`).join('&') }\"></figure>\n            </div>\n        `, {}, true);\n        el.appendChild(buttons);\n        const imageElement = el.querySelector('.abtest-image-el img');\n        imageElement.addEventListener('click', (event) => { this.editCrop(imageElement, image); }, false);\n        return el;\n    }\n\n    editCrop(element, model) {\n        const offset = this.api.v1.viewport.getOffset();\n        const view = this.api.v1.view.getView(model);\n        const crop = {\n            x: view.get('fields.x') || 0,\n            y: view.get('fields.y') || 0,\n            cropw: view.get('fields.cropw') || 100,\n            croph: view.get('fields.croph') || 100\n        };\n        const keyEventsIds = [];\n        const endCallback = (theEditor) => {\n            while (keyEventsIds.length > 0) {\n                this.api.v1.util.keyEventHandler.remove(keyEventsIds.pop());\n            }\n            if (theEditor) {\n                const serializedCrop = theEditor.end();\n                view.set('fields.x', serializedCrop.x);\n                view.set('fields.y', serializedCrop.y);\n                view.set('fields.cropw', serializedCrop.cropw);\n                view.set('fields.croph', serializedCrop.croph);\n            }\n            this.updateImage(model);\n        };\n        const editor = new this.CropEditorModule({\n            modal: false,\n            container: {\n                width: element.width,\n                height: element.height,\n                element,\n                cssList: ['lab-modal-overlay']\n            },\n            offset: {\n                y: window.scrollY - offset.top\n            },\n            imageElement: {\n                element\n            },\n            crop,\n            tools: {\n                resize: {\n                    active: false\n                }\n            },\n            imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ model.get('instance_of') }`\n        }, {\n            end: () => {\n                endCallback(editor);\n            }\n        });\n        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({\n            key: 'Escape',\n            callback: (event) => {\n                editor.end();\n                endCallback();\n            },\n            stopPropagation: true,\n            preventDefault: true,\n            overrideDisable: true\n        }));\n        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({\n            key: 'S',\n            controlkeys: ['labCtrlKey'],\n            callback: (event) => {\n                endCallback(editor);\n            },\n            stopPropagation: true,\n            preventDefault: true,\n            overrideDisable: true\n        }));\n\n    }\n\n    setupEditable(model, path, skipEditor) {\n        const el = document.createElement('h2');\n        const fieldName = path.replace('fields.', '');\n        el.innerHTML = model.get(path) || `Click to add ${ fieldName }`;\n        el.classList.add('lab-title', `abtest-text-${ fieldName }`);\n        if (skipEditor) {\n            el.classList.add('lab-defaultTextValue');\n        } else {\n            el.setAttribute('title', `Click to edit ${ fieldName }`);\n            this.setupRichTextEditingForElement(model, el, path);\n        }\n        return el;\n    }\n\n    setupRichTextEditingForElement(model, element, key) {\n        const contentdata = {};\n        this.api.v1.util.object.set(key, model.get(key), contentdata);\n        this.textEditor.register({\n            element,\n            simulatedData: {\n                type: 'article',\n                path: '',\n                contentdata\n            },\n            toolSettings: {\n                key,\n                inlineOnly: true,\n                displayCharCount: true,\n                displaySelectionLength: false,\n                displayWordCount: true,\n                selectTextOnStart: true,\n                placeholder: `Click to add ${ key.replace('fields.', '') }`,\n                attributes: {\n                    text_size: {\n                        active: false\n                    }\n                }\n            },\n            callbacks: {\n                ended: (theKey, theValue) => {\n                    model.set(theKey, theValue.trim());\n                },\n                started: (tool, theKey) => {}\n            },\n            menuSettings: {\n                container: this.ui.editablesContainerText,\n                style: {\n                    'margin-top': '-10px'\n                },\n                items: {\n                    textColor: {\n                        group: 'g1',\n                        inheritPath: 'menu/buttons/textColor.json'\n                    },\n                    textBackgroundColor: {\n                        group: 'g1',\n                        inheritPath: 'menu/buttons/textBackgroundColor.json'\n                    },\n                    bold: {\n                        group: 'g2',\n                        icon: 'labicon-text_bold',\n                        callback: 'toggleAttribute',\n                        key: 'font_weight',\n                        attributes: {\n                            class: 'font-weight-bold'\n                        },\n                        value: false,\n                        onValue: 'font-weight-bold',\n                        offValue: false,\n                        bindToSelection: 'font_weight',\n                        title: 'Font weight - Bold',\n                        hotkeys: [{\n                            key: 'B',\n                            controlkeys: ['labCtrlKey'],\n                            preventDefault: true,\n                            overrideDisable: true\n                        }]\n                    },\n                    italic: {\n                        group: 'g2',\n                        icon: 'labicon-text_italic',\n                        callback: 'toggleAttribute',\n                        key: 'italic',\n                        attributes: {\n                            class: 'italic'\n                        },\n                        value: false,\n                        onValue: 'italic',\n                        offValue: false,\n                        bindToSelection: 'italic',\n                        title: 'Italic',\n                        hotkeys: [{\n                            key: 'i',\n                            controlkeys: ['labCtrlKey'],\n                            preventDefault: true,\n                            overrideDisable: true\n                        }]\n                    },\n                    reset: {\n                        group: 'g4',\n                        icon: 'labicon-reset_style',\n                        callback: 'reset',\n                        title: 'Remove textformatting in selection for viewport'\n                    }\n                }\n            }\n        });\n    }\n\n    bindWidth() {}\n\n    setWidth() {}\n\n    removeFromEditor(model) {}\n\n    resetRemoveFromEditor(model) {}\n\n    addToController(model) {\n        this.model.addChild(model);\n    }\n\n    end() {\n        super.end();\n        this.endCallback();\n    }\n\n}\n","import templates from './templates.js';\nimport { AbTest, TEST_METHODS } from './AbTest.js';\nimport contentLanguages from '../../lib/helpers/ContentLanguages.js';\n\n/**\n * @typedef {Object} Collection\n * @property {number} [test_id] The test id of the collection, if present\n * @property {number} referenceId\n * @property {string} type\n * @property {Array<Variant>} variants\n * @property {string} id\n * @property {string} status\n * @property {number} modified\n * @property {number} created\n * @property {number} published\n * @property {number} variantCounter\n */\n\n/**\n * @typedef {Object} Variant\n * @property {number} referenceId\n * @property {Object<string, any>} data\n * @property {{state?: boolean}} state\n * @property {number} modified\n * @property {number} created\n * @property {string} guid\n * @property {string} name\n * @property {string} notes\n * @property {number} partial\n */\n\nexport class TestManagerBase {\n\n    constructor(api, model) {\n        this.api = api;\n        this.model = model;\n\n        /**\n         * @type {?Collection}\n         */\n        this.collection = null;\n\n        this.default_test_method = TEST_METHODS.CLICK_RATIO_95_QUICK_EXIT;\n\n        /**\n         * @type {AbTest}\n         */\n        this.test = null;\n\n        /**\n         * @type {?Variant}\n         */\n        this.currentVariant = null;\n\n        /**\n         * Key is instance of Variant, value is navigation DOM-element etc.\n         * @type {Map<any, any>}\n         */\n        this.preparedVariants = new Map();\n\n        this.instanceOfId = this.model.get('instance_of') || this.model.get('id');\n        this.timeoutId = null;\n        this.ui = {\n            sizes: {\n                logo: 3,\n                variantsContainer: 9,\n                variants: 7,\n                selectedVariant: 5\n            },\n            displayArticleData: false,\n            displayTestData: false\n        };\n        this.usePartialData = false;\n        this.listeners = new Map();\n        this.deleter = this.deleteBinding.bind(this);\n        this.modelDeleter = this.deleteModelBinding.bind(this);\n        this.statistics = [];\n        this.stats = {};\n        this.estimateId = null;\n    }\n\n    setup(data = {}) {\n        if (!this.validateOriginal()) {\n            return false;\n        }\n        if (data.displayTestData !== undefined) {\n            this.ui.displayTestData = data.displayTestData;\n        }\n        this.setupUI();\n        return true;\n    }\n\n    getType(model) {\n        return (model || this.model).getType().replace('page_', '');\n    }\n\n    getTitle(model) {\n        return this.api.v1.util.string.stripTags((model || this.model).get('fields.title'));\n    }\n\n    setupUI() {\n        if (!this.instanceOfId) {\n            Sys.logger.warn('[TestManagerBase] Model is missing instance_of-id. No AB-versions here.');\n            return;\n        }\n        this.hideExisting();\n        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/abtest/abtest.css');\n        const site_id = this.model.get('fields.site_id') || null;\n        const domain = (site_id) ? this.api.v1.site.getSiteById(site_id).domain : null;\n        this.ui.container = this.api.v1.util.dom.renderTemplate(templates.ui, {\n            type: this.getType(),\n            id: this.model.get('id'),\n            instanceOfId: this.instanceOfId,\n            links: {\n                edit: this.model.get('id') !== this.instanceOfId\n            },\n            front: domain || this.api.v1.properties.get('customer_front_url'),\n            title: this.api.v1.util.string.stripTags(this.model.get('fields.title')),\n            sizes: this.ui.sizes,\n            displayArticleData: this.ui.displayArticleData,\n            displayTestData: this.ui.displayTestData\n        }, true);\n        this.api.v1.model.bindings.bind(this.model, 'fields.title', (m, path, value) => {\n            this.ui.container.querySelector('h3 span').innerHTML = this.api.v1.util.string.stripTags(value);\n        });\n        this.bindWidth();\n        this.model.set('state.draggableDisabled', true, { notify: false, registerModified: false });\n\n        this.ui.notesField = this.ui.container.querySelector('.variant-notes-field');\n        this.ui.notesField.addEventListener('change', (event) => {\n            this.currentVariant.setNotes(this.ui.notesField.value.trim());\n            this.ui.notesField.blur();\n            this.save();\n        });\n\n        if (this.ui.displayTestData) {\n            this.ui.endTestNowButton = this.ui.container.querySelector('.end-test-now-btn');\n            this.ui.endTestNowButton.addEventListener('click', (event) => {\n                if (this.test && this.test.isRunning()) {\n                    this.deleteTest();\n                }\n            });\n            this.ui.startTestNowButton = this.ui.container.querySelector('.start-test-now-btn');\n            this.ui.startTestNowButton.addEventListener('click', (event) => {\n                this.setDefaultTestValues();\n                this.api.v1.ui.modal.dialog({\n                    container: {\n                        css: 'ab-results',\n                        state: {\n                            ok: true\n                        }\n                    },\n                    content: {\n                        title: 'Do you want to publish current A/B test?',\n                        description: '<p>The A/B test will be started with available variants and the page will publish now.</p>'\n                    },\n                    footer: {\n                        buttons: [\n                            {\n                                type: 'button',\n                                highlight: false,\n                                id: 'ab_cancelBtn',\n                                value: 'No, don\\'t publish yet'\n                            },\n                            {\n                                type: 'button',\n                                highlight: true,\n                                id: 'ab_okBtn',\n                                value: 'Yes, publish now'\n                            }\n                        ]\n                    },\n                    eventHandlers: [\n                        {\n                            selector: '#ab_cancelBtn',\n                            callback: (modal, event) => {\n                                modal.close();\n                            }\n                        },\n                        {\n                            selector: '#ab_okBtn',\n                            callback: (modal, event) => {\n                                modal.close();\n                                this.publish();\n                            }\n                        }\n                    ]\n                });\n            });\n\n            this.ui.testNowButton = this.ui.container.querySelector('.set-test-now-btn');\n            this.ui.testNowButton.addEventListener('click', (event) => {\n                this.setDefaultTestDuration();\n            });\n\n            this.ui.resetTestButton = this.ui.container.querySelector('.abtest-reset-btn');\n            this.ui.resetTestButton.addEventListener('click', (event) => {\n                this.resetAbTest();\n            });\n\n            this.ui.testMethodSelector = this.addTestMethodSelector();\n            this.ui.testMethodSelector.addEventListener('change', (event) => {\n                this.test.testMethod = event.target.value;\n                this.ui.publish.button.classList.add('abtest-modified');\n                this.updateTestUI();\n            });\n\n            this.ui.testStartField = this.ui.container.querySelector('.test-start-field');\n            if (this.ui.testStartField) {\n                this.ui.testStartField.addEventListener('change', (event) => {\n                    const start_value = this.ui.testStartField.value.trim();\n                    this.test.start = (start_value !== '') ? new Date(start_value) : '';\n                    this.ui.publish.button.classList.add('abtest-modified');\n                });\n            }\n            this.ui.testEndField = this.ui.container.querySelector('.test-end-field');\n            if (this.ui.testEndField) {\n                this.ui.testEndField.addEventListener('change', (event) => {\n                    const end_value = this.ui.testEndField.value.trim();\n                    this.test.end = (end_value !== '') ? new Date(end_value) : '';\n                    this.ui.publish.button.classList.add('abtest-modified');\n                });\n            }\n\n            this.ui.minVariantDifferenceField = this.ui.container.querySelector('.min-variant-lift');\n            if (this.ui.minVariantDifferenceField) {\n                this.ui.minVariantDifferenceField.addEventListener('change', (event) => {\n                    this.test.methodoptions.minVariantDifference = parseInt(this.ui.minVariantDifferenceField.value, 10);\n                    this.ui.publish.button.classList.add('abtest-modified');\n                    this.getEstimate();\n                });\n            }\n\n            this.ui.getEstimateValue = this.ui.container.querySelector('.estimate-value');\n\n            this.ui.testIsPublishedField = this.ui.container.querySelector('.test-is-published');\n            if (this.ui.testStartField) {\n                this.ui.testIsPublishedField.addEventListener('change', (event) => {\n                    if (this.ui.testIsPublishedField.checked) {\n                        this.test.published = true;\n                    } else {\n                        this.test.published = false;\n                    }\n                    this.ui.publish.button.classList.add('abtest-modified');\n                    if (this.ui.displayTestData) {\n                        this.updateTestUI();\n                    }\n                });\n            }\n        }\n\n        this.ui.variants = this.ui.container.querySelector('.variants');\n        this.ui.originalBtn = this.ui.variants.querySelector('.original');\n        this.ui.originalBtn.addEventListener('click', (event) => {\n            this.resetView();\n        });\n        this.ui.container.querySelector('.add-variant-btn').addEventListener('click', (event) => {\n            this.copyVariant();\n        });\n        this.ui.copyToOriginalBtn = this.ui.container.querySelector('.copy-to-orignal-btn');\n        if (this.ui.copyToOriginalBtn) {\n            this.ui.copyToOriginalBtn.addEventListener('click', (event) => {\n                this.copyVariantToOriginal();\n            });\n        }\n        this.ui.deleteBtn = this.ui.container.querySelector('.delete-variant-btn');\n        this.ui.deleteBtn.addEventListener('click', (event) => {\n            if (this.collection && this.currentVariant) {\n                if (this.test && this.test.isRunning()) {\n                    this.warnActiveTest({\n                        title: 'Cannot delete variant',\n                        description: 'You cannot delete a variant while the A/B test is running. Please stop the A/B test before copying.'\n                    });\n                    return;\n                }\n                const index = this.collection.getVariantIndex(this.currentVariant);\n                this.preparedVariants.get(this.currentVariant).navigation.remove();\n                this.api.v1.model.delete(this.preparedVariants.get(this.currentVariant).model, false, true);\n                this.deleteVariant(this.currentVariant);\n                this.currentVariant = null;\n                const i = this.collection.getVariants().length > index ? index : index - 1;\n                if (i > -1) {\n                    this.displayVariant(i);\n                } else {\n                    this.resetView();\n                }\n                this.updateUI();\n                this.save();\n            }\n        });\n        this.ui.disableBtn = this.ui.container.querySelector('#disable-variant-btn');\n        this.ui.disableBtn.addEventListener('change', (event) => {\n            if (this.currentVariant) {\n                if (this.ui.disableBtn.checked) {\n                    this.currentVariant.disable();\n                    this.preparedVariants.get(this.currentVariant).navigation.classList.add('abtest-disabled');\n                } else {\n                    this.currentVariant.enable();\n                    this.preparedVariants.get(this.currentVariant).navigation.classList.remove('abtest-disabled');\n                }\n                this.save();\n            }\n        });\n        this.ui.suggestBtn = this.ui.container.querySelector('.suggest-variant-btn');\n        this.ui.suggestBtn.addEventListener('click', (event) => {\n            const countEl = this.ui.container.querySelector('.suggest-variant-count-btn');\n            let count = 3;\n            if (countEl && countEl.value) {\n                count = countEl.value;\n            }\n            this.suggestVariants(count);\n        });\n        this.ui.container.querySelector('.abtest-close-btn').addEventListener('click', (event) => {\n            this.end();\n        });\n        this.ui.editablesContainer = this.ui.container.querySelector('.abtest-editables');\n        this.ui.editablesContainerImage = this.ui.editablesContainer ? this.ui.editablesContainer.querySelector('.abtest-image') : null;\n        this.ui.editablesContainerText = this.ui.editablesContainer ? this.ui.editablesContainer.querySelector('.abtest-text') : null;\n        this.ui.publish = {\n            button: this.ui.container.querySelector('.abtest-publish-btn')\n        };\n        this.ui.publish.button.addEventListener('click', (event) => {\n            this.publish();\n        });\n        this.ui.deleteBtn = this.ui.container.querySelector('.abtest-delete-btn');\n        this.ui.deleteBtn.addEventListener('click', (event) => {\n            this.deleteCollection();\n        });\n\n        // Navigation\n        this.ui.variantsContainer = this.ui.container.querySelector('.variants-container');\n        this.ui.testsContainer = this.ui.container.querySelector('.tests-container');\n        this.ui.testResultsContainer = this.ui.container.querySelector('.test-results-container');\n        this.ui.navVariantsContainer = this.ui.container.querySelector('.tab-variants-container');\n        this.ui.navTestsContainer = this.ui.container.querySelector('.tab-tests-container');\n        this.ui.navTestResultsContainer = this.ui.container.querySelector('.tab-test-results-container');\n        this.ui.navVariantsContainer.addEventListener('click', (event) => {\n            this.ui.variantsContainer.classList.remove('lab-hidden');\n            this.ui.testsContainer.classList.add('lab-hidden');\n            this.ui.testResultsContainer.classList.add('lab-hidden');\n            this.ui.navVariantsContainer.classList.add('lab-selected');\n            if (this.ui.navTestsContainer) {\n                this.ui.navTestsContainer.classList.remove('lab-selected');\n            }\n            if (this.ui.navTestResultsContainer) {\n                this.ui.navTestResultsContainer.classList.remove('lab-selected');\n            }\n        });\n        if (this.ui.navTestsContainer) {\n            this.ui.navTestsContainer.addEventListener('click', (event) => {\n                this.ui.testsContainer.classList.remove('lab-hidden');\n                this.ui.testResultsContainer.classList.add('lab-hidden');\n                this.ui.variantsContainer.classList.add('lab-hidden');\n                this.ui.navTestsContainer.classList.add('lab-selected');\n                this.ui.navVariantsContainer.classList.remove('lab-selected');\n                this.ui.navTestResultsContainer.classList.remove('lab-selected');\n            });\n        }\n        if (this.ui.navTestResultsContainer) {\n            this.ui.navTestResultsContainer.addEventListener('click', (event) => {\n                this.ui.testResultsContainer.classList.remove('lab-hidden');\n                this.ui.variantsContainer.classList.add('lab-hidden');\n                this.ui.testsContainer.classList.add('lab-hidden');\n                this.ui.navTestResultsContainer.classList.add('lab-selected');\n                this.ui.navVariantsContainer.classList.remove('lab-selected');\n                this.ui.navTestsContainer.classList.remove('lab-selected');\n            });\n        }\n\n        // Test-management\n        // const testBtn = this.ui.container.querySelector('.tests-container .abtest-testing-btn');\n        // testBtn.addEventListener('click', (event) => {\n        //     console.log('klikk ...');\n        // });\n    }\n\n    bindWidth() {\n        this.api.v1.model.bindings.bind(this.model, 'width', () => {\n            const w = this.model.getRaw('width');\n            for (const [variant, value] of this.preparedVariants) {\n                value.model.setRaw('width', w, { save: false });\n            }\n        });\n    }\n\n    setWidth(model) {\n        model.setRaw('width', this.model.getRaw('width'), { save: false });\n    }\n\n    async getModelImageData() {\n        try {\n            const crop = await this.api.v1.article.frontcrop.get();\n            if (crop) {\n                const { pano } = crop;\n                pano.contentdata.id = undefined;\n                pano.contentdata.type = pano.type;\n                if (pano.contentdata?.fields?.id) {\n                    pano.contentdata.fields.id = undefined;\n                }\n                return pano;\n            }\n            const original_image = this.api.v1.model.query.getModelByPath('articleHeader/image');\n            if (!original_image) {\n                return null;\n            }\n            const image = this.api.v1.model.copy(original_image);\n            this.api.v1.model.setNonPersistentState(image, true);\n            return image.data;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    getModelData(model, isCopy = false) {\n        if (model) {\n            const data = this.api.v1.model.serialize.modelToInternal(model, true, isCopy);\n            return data;\n        }\n        return {\n            type: this.getType(),\n            children: [],\n            contentdata: {\n                fields: {\n                    title: {\n                        value: this.model.get('fields.title')\n                    },\n                    subtitle: {\n                        value: this.model.get('fields.subtitle')\n                    }\n                }\n            }\n        };\n    }\n\n    getOriginalModel() {\n        return null;\n    }\n\n    validateJsonString(data) {\n        let jsonString = data.trim();\n\n        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {\n            jsonString = jsonString.substring(jsonString.indexOf('{'));\n        }\n\n        if (!jsonString.includes('{')) {\n            jsonString = `{${  jsonString }`;\n        }\n\n        if (!jsonString.includes('}')) {\n            jsonString = `${  jsonString }}`;\n        }\n\n        // Test to choose the correct '}'. Ignore '}' with '\\' ahead\n        if (jsonString.match(/}/g).length > 1) {\n            jsonString = jsonString.match(/(.|\\n)*?(?<!\\\\)}/);\n        }\n\n        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {\n            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);\n        }\n\n        jsonString = jsonString.trim();\n        return jsonString;\n    }\n\n    setupLanguage() {\n        let { language } = this;\n\n        // Get site language\n        this.languageCode = this.api.v1.config.get('contentLanguage');\n        if (this.languageCode) {\n            for (const contentLanguage of contentLanguages) {\n                if (contentLanguage.code === this.languageCode) {\n                    language = contentLanguage.name;\n                }\n            }\n        }\n\n        // Get seo language\n        const seolanguageCode = this.model.get('fields.seolanguage');\n        if (seolanguageCode) {\n            for (const contentLanguage of contentLanguages) {\n                if (contentLanguage.code === seolanguageCode) {\n                    language = contentLanguage.name;\n                }\n            }\n        }\n        return language;\n    }\n\n    async suggestVariants(count = 3, allowRetry = true) {\n        this.ui.suggestBtn.parentElement.classList.add('lab-busy');\n        this.ui.suggestBtn.disabled = true;\n\n        // Get data from original article and use this to suggest title and summary.\n        const articleData = await this.api.v1.util.httpClient.get(`/api/v1/article/${ this.instanceOfId }`);\n        if (!articleData.result || !articleData.result[0]) {\n            Sys.logger.warn(`[TestManagerBase] Cannot find data for original article \"${ this.instanceOfId }\"`);\n            this.ui.suggestBtn.parentElement.classList.remove('lab-busy');\n            this.ui.suggestBtn.disabled = false;\n            return;\n        }\n        const aiConfig = this.api.v1.config.get('plugins.abtest.completion') || {};\n        const prompt = `${ this.api.v1.util.dom.renderTemplate(aiConfig.prompt, {\n            language: this.setupLanguage(),\n            title: articleData.result[0].title || '',\n            subtitle: articleData.result[0].subtitle || '',\n            bodytext: articleData.result[0].bodytext || ''\n        }) }`;\n        let data = await this.api.v1.generate.text({\n            service: aiConfig.service || 'chatCompletions',\n            model: aiConfig.model || 'gpt-4o', // GPT-4o\n            prompt,\n            results: count\n        }).catch((error) => {\n            Sys.logger.warn(`[TestManagerBase] Error fetching suggestions:`);\n            console.warn(error);\n            if (allowRetry) {\n                Sys.logger.debug(`[TestManagerBase] Will try again.`);\n                this.suggestVariants(count, false);\n            }\n        });\n\n        if (typeof data === 'string') {\n            data = [data];\n        }\n\n        const original_model = this.getModelData(this.getOriginalModel(), true);\n        if (original_model.children.length === 0) {\n            const image = await this.getModelImageData();\n            if (image) {\n                original_model.children.push(image);\n            }\n        }\n\n        for (let item of (data || [])) {\n            try {\n                item = this.validateJsonString(item);\n                const texts = JSON.parse(item);\n                const variant = this.collection.add(original_model, this.usePartialData);\n                this.prepareVariant(variant);\n                this.displayVariant(this.collection.getVariants().length - 1);\n                const obj = this.preparedVariants.get(variant);\n                if (texts.title) {\n                    obj.model.set('fields.title', texts.title);\n                }\n                if (texts.summary) {\n                    obj.model.set('fields.subtitle', texts.summary);\n                }\n                obj.editables = this.setupEditables(obj.model);\n            } catch (error) {\n                Sys.logger.warn(`[TestManagerBase] Cannot parse JSON-string: \"${ item }\"`);\n            }\n        }\n        if (data) {\n            this.ui.suggestBtn.parentElement.classList.remove('lab-busy');\n            this.ui.suggestBtn.disabled = false;\n        }\n    }\n\n    updateColelctionDrawer() {\n        const rect = this.ui.container.getBoundingClientRect();\n        document.querySelector('.lab-collection-drawer').style.setProperty('bottom', `${ rect.height }px`);\n    }\n\n    hideExisting() {\n        const current = document.querySelector(`.abtest-ui-container:not([data-ab-container=\"${ this.model.getId() }\"])`);\n        if (current) {\n            current.classList.add('abtest-will-hide');\n            setTimeout(() => {\n                current.classList.add('abtest-hidden');\n                this.updateColelctionDrawer();\n                current.remove();\n            }, 500);\n        }\n    }\n\n    validateOriginal() {\n        if (!this.model.get('fields.published_url')) {\n            Sys.logger.debug(`[TestManagerBase] Model do not validate for AB testing. Missing url`);\n            this.api.v1.ui.modal.dialog({\n                container: {\n                    state: {\n                        warning: true\n                    }\n                },\n                content: {\n                    title: 'Cannot run AB test',\n                    description: 'This element has no URL defined and cannot run an A/B test. Please define a URL in the element settings.'\n                },\n                footer: {\n                    buttons: [\n                        {\n                            type: 'button',\n                            highlight: true,\n                            id: 'ab_cancelBtn',\n                            value: 'OK'\n                        }\n                    ]\n                },\n                eventHandlers: [{\n                    selector: '#ab_cancelBtn',\n                    callback: (modal, event) => {\n                        modal.close();\n                    }\n                }]\n            });\n            return false;\n        }\n        return true;\n    }\n\n    displayCurrent() {\n        this.ui.container.classList.remove('abtest-hidden');\n        document.body.append(this.ui.container);\n        setTimeout(() => {\n            this.ui.container.classList.remove('abtest-will-hide');\n            this.updateColelctionDrawer();\n        }, 300);\n    }\n\n    hideCurrent() {\n        if (this.ui.container.classList.contains('abtest-hidden')) {\n            return;\n        }\n        this.ui.container.classList.add('abtest-will-hide');\n        setTimeout(() => {\n            this.ui.container.classList.add('abtest-hidden');\n            this.updateColelctionDrawer();\n            this.ui.container.remove();\n        }, 300);\n        this.api.v1.model.bindings.unbind(this.model, 'state.deleted', this.modelDeleter);\n    }\n\n    prepareVariants() {\n        if (!this.collection) {\n            return;\n        }\n        for (const variant of this.collection.getVariants()) {\n            this.prepareVariant(variant);\n        }\n    }\n\n    async ensureCollection() {\n        this.toggleBusyState(true);\n        if (!this.collection) {\n            this.collection = await this.getCollection(this.instanceOfId).catch((error) => {});\n            if (!this.collection) {\n                Sys.logger.debug(`[TestManagerBase] Will create new collection collection. Reference-id: ${ this.instanceOfId }`);\n                this.collection = await this.api.v1.abtest.collection.new({ referenceId: this.instanceOfId, type: this.getType(), pageId: this.api.v1.model.query.getRootModel().get('id') });\n            } else {\n                Sys.logger.debug(`[TestManagerBase] Found collection. ID: ${ this.collection.getId() }`);\n                this.prepareVariants();\n                // Make sure the collection holds current page ID (added December 2024)\n                if (!this.collection.pageId) {\n                    this.collection.pageId = this.api.v1.model.query.getRootModel().get('id');\n                    this.save();\n                }\n            }\n        }\n        if (!this.test && this.ui.displayTestData) {\n            this.test = new AbTest({ placeId: this.instanceOfId, url: this.getFrontUrl(), testMethod: this.default_test_method });\n            this.testInstanceCreated();\n            if (this.collection.test_id) {\n                Sys.logger.debug(`[TestManagerBase] Found A/B test. ID: ${ this.collection.test_id }`);\n                const test_data = await this.api.v1.abtest.test.get(this.collection.test_id);\n                if (!test_data.success) {\n                    this.showNoValidTestProviderDialog(test_data.message, 'Error: Cannot load A/B test from Kilkaya');\n                }\n                this.test.updateTestData(test_data.result);\n                this.updateTestUI();\n            }\n        }\n        return this.collection;\n    }\n\n    getFrontUrl() {\n        const domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');\n        return domain + this.api.v1.model.query.getRootModel().get('fields.published_url').replace('/index', '/');\n    }\n\n    toggleBusyState(on, model = this.model) {\n        for (const view of this.api.v1.view.getViews(model)) {\n            if (on) {\n                view.getMarkup().classList.add('lab-busy');\n            } else {\n                view.getMarkup().classList.remove('lab-busy');\n            }\n        }\n    }\n\n    // Default duration is 12 hours\n    setDefaultTestDuration(ignoreIfExist = false) {\n        if (ignoreIfExist && this.test.start && this.test.end) {\n            return;\n        }\n        const date = new Date().getTime() + (new Date().getTimezoneOffset());\n        this.test.start = new Date(date).toISOString();\n        this.test.end = new Date(date + (60000 * 60 * 12)).toISOString();\n        this.updateTestUI();\n    }\n\n    setDefaultTestValues() {\n        this.test.testMethod = this.default_test_method;\n        this.test.published = true;\n        this.setDefaultTestDuration(true);\n    }\n\n    addTestMethodSelector() {\n        const el = document.createElement('select');\n        for (const testMethod of AbTest.getTestMethods()) {\n            const selected = ((this.test && this.test.testMethod === testMethod.key) || testMethod.key === this.default_test_method) ? 'selected' : '';\n            el.innerHTML += `<option value=\"${ testMethod.key }\" ${ selected }>${ testMethod.description }</option>`;\n        }\n        this.ui.container.querySelector('.test-test-method').appendChild(el);\n        el.addEventListener('change', (event) => {\n            this.getEstimate();\n        });\n        return el;\n    }\n\n    resetAbTest() {\n        this.api.v1.ui.modal.dialog({\n            container: {\n                state: {\n                    warning: true\n                }\n            },\n            content: {\n                title: 'Reset A/B test results?',\n                description: 'Resetting the A/B test results clears out any settings for the existing A/B test, but keeps your variations. This cannot be undone.'\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'button',\n                        highlight: true,\n                        id: 'ab_cancelBtn',\n                        value: 'Cancel'\n                    },\n                    {\n                        type: 'submit',\n                        id: 'ab_resetBtn',\n                        value: 'Reset'\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#ab_cancelBtn',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }, {\n                selector: '#ab_resetBtn',\n                callback: async(modal, event) => {\n                    const deleted = this.deleteTest();\n                    if (deleted) {\n                        this.doResetTest();\n                        this.save();\n                    }\n                    modal.close();\n                }\n            }]\n        });\n\n    }\n\n    doResetTest() {\n        this.test = new AbTest({ placeId: this.instanceOfId, url: this.getFrontUrl() });\n        this.testInstanceCreated();\n        this.collection.test_id = null;\n        this.collection.setHasActiveTest(false);\n        this.resetView();\n    }\n\n    testInstanceCreated() {\n        if (this.ui.displayTestData) {\n            this.updateTestUI();\n        }\n    }\n\n    async showNoValidTestProviderDialog(message, title) {\n        const ab_settings = await this.api.v1.abtest.settings.get();\n        this.api.v1.ui.modal.dialog({\n            container: {\n                state: {\n                    warning: true\n                }\n            },\n            content: {\n                title: title || 'Could not save the A/B test',\n                description: `${ message ? `Message: ${ message }<br><br>` : '' }Note: The A/B testing functionality must be enabled with your A/B test provider.<br>\nIf this issue persists, contact your A/B test provider (${ ab_settings.provider }) and verify that the functionality is enabled and correctly configured for your account (${ ab_settings.customer }). If so, please contact Labrador CMS at support@labradorcms.com.`\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'button',\n                        highlight: true,\n                        id: 'ab_cancelBtn',\n                        value: 'Cancel'\n                    },\n                    {\n                        type: 'submit',\n                        id: 'ab_okBtn',\n                        value: 'OK'\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#ab_cancelBtn',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }, {\n                selector: '#ab_okBtn',\n                callback: async(modal, event) => {\n                    modal.close();\n                }\n            }]\n        });\n    }\n\n    saveOrUpdateTest(skipSave = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.instanceOfId) { resolve(); return; }\n            this.ensureCollection().then((collection) => {\n                if (!this.test || !this.test.shouldSave()) {\n                    resolve();\n                    return;\n                }\n\n                // In cases where variants are created and later on the original is resized, we need to update width on all variants.\n                const model = this.getOriginalModel();\n                if (model) {\n                    for (const variant of collection.getVariants()) {\n                        variant.data.width = model.getRaw('width');\n                    }\n                }\n\n                const promises = [];\n                if (this.test.id) {\n                    promises.push(this.api.v1.abtest.test.update(this.test.id, this.test.serialize(this.preparedVariants)));\n                } else {\n                    promises.push(\n                        this.api.v1.abtest.test.create(\n                            this.test.serialize(\n                                this.preparedVariants,\n                                this.model.get('fields.title'),\n                                this.model.get('fields.published_url')\n                            )\n                        )\n                    );\n                }\n\n                collection.setHasActiveTest(true);\n\n                Promise.all(promises)\n                    .then((results) => {\n                        if (results[0].success === false) {\n                            this.showNoValidTestProviderDialog(results[0] && results[0].message ? results[0].message : '');\n                            reject(new Error(`[TestManager] Error saving A/B test: ${ results[0] && results[0].message ? results[0].message : '' } Collection ID: ${ this.collection.getId() }`));\n                        } else {\n                            this.test.updateTestData(results[0].result);\n                            this.collection.test_id = this.test.id;\n                            if (!skipSave) {\n                                this.api.v1.abtest.collection.save(this.collection);\n                            }\n                            resolve();\n                        }\n                    }).then(resolve).catch((error) => {\n                        console.error(`[TestManager] Error updating A/B test: `, error);\n                        reject(error);\n                    });\n            });\n        });\n    }\n\n    warnActiveTest({ title, description } = {}) {\n        this.api.v1.ui.modal.dialog({\n            container: {\n                state: {\n                    warning: true\n                }\n            },\n            content: {\n                title,\n                description\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'button',\n                        highlight: true,\n                        id: 'ab_cancelBtn',\n                        value: 'OK'\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#ab_cancelBtn',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }]\n        });\n    }\n\n    async copyVariant() {\n        if (this.test && this.test.isRunning()) {\n            this.warnActiveTest({\n                title: 'Cannot copy variant',\n                description: 'You cannot copy a variant while the A/B test is running. Please stop the A/B test before copying.'\n            });\n            return;\n        }\n\n        if (!this.currentVariant) {\n            this.createVariant();\n            return;\n        }\n        const obj = this.preparedVariants.get(this.currentVariant);\n        this.collection.add(this.getModelData(obj.model, true), this.currentVariant.hasPartialData());\n        this.save();\n        this.displayVariant(this.collection.getVariants().length - 1);\n    }\n\n    copyVariantToOriginal() {\n        if (!this.currentVariant) {\n            return;\n        }\n        const obj = this.preparedVariants.get(this.currentVariant);\n        const original = this.getOriginalModel();\n        const modelData = this.getModelData(obj.model, true);\n        let needCollectionUpdate = false;\n\n        // Check if this is an \"empty\" original. If so, we need to remove the instance_of from the copied variant.\n        if (!original.get('instance_of')) {\n            this.api.v1.util.object.delete('contentdata.instance_of', modelData);\n            needCollectionUpdate = true;\n        }\n        const newModel = this.api.v1.model.create.internal(modelData, null, true, false);\n        if (needCollectionUpdate) {\n            const listener = (model, path, value) => {\n                this.api.v1.model.bindings.unbind(newModel, 'id', listener);\n                obj.variant.referenceId = value;\n                this.collection.referenceId = value;\n                this.save();\n                this.end();\n                this.api.v1.app.save();\n                setTimeout(() => {\n                    this.api.v1.model.highlight.message(newModel, `Original is replaced by selected variant.`);\n                }, 500);\n            };\n            this.api.v1.model.bindings.bind(newModel, 'id', listener);\n            this.api.v1.model.replace(original, newModel);\n            this.api.v1.model.highlight.message(obj.model, `Replacing original with selected variant ...`);\n        } else {\n            this.save();\n            this.end();\n            this.api.v1.model.replace(original, newModel);\n            setTimeout(() => {\n                this.api.v1.model.highlight.message(newModel, `Original is replaced by selected variant.`);\n            }, 500);\n        }\n    }\n\n    async createVariant() {\n        if (!this.instanceOfId) { return; }\n        const collection = await this.ensureCollection();\n        const variant_data = this.getModelData(this.getOriginalModel(), true);\n        if (variant_data.children.length === 0) {\n            const image = await this.getModelImageData();\n            if (image) {\n                variant_data.children.push(image);\n            }\n        }\n        collection.add(variant_data, this.usePartialData);\n        this.save();\n        this.displayVariant(collection.getVariants().length - 1);\n    }\n\n    deleteVariant(variant) {\n        this.collection.deleteVariant(variant);\n        this.preparedVariants.delete(variant);\n        this.getEstimate();\n    }\n\n    async showDefaultFields() {\n        return true;\n    }\n\n    async displayVariant(index) {\n        if (!this.instanceOfId) {\n            this.updatePublishStatus();\n            return;\n        }\n\n        this.hideExisting();\n        this.displayCurrent();\n\n        this.api.v1.model.bindings.bind(this.model, 'state.deleted', this.modelDeleter);\n\n        const collection = await this.ensureCollection();\n        this.toggleBusyState(false);\n        if (index !== false && collection.getVariants().length) {\n            const variant = collection.getVariantByIndex(index);\n            if (variant) {\n                this.removeFromEditor(this.model);\n                this.prepareVariant(variant);\n            }\n        } else {\n            await this.showDefaultFields();\n        }\n        this.updatePublishStatus();\n    }\n\n    /**\n     * @param referenceId\n     * @return {Promise<Collection>}\n     */\n    getCollection(referenceId, reuse = false) {\n        return new Promise((resolve, reject) => {\n            if (reuse && this.collection && this.collection.referenceId === referenceId) {\n                resolve(this.collection);\n                return;\n            }\n            this.api.v1.abtest.collection.list(referenceId).then((data) => {\n                if (data && data.result && data.result.length) {\n                    this.api.v1.abtest.collection.load(data.result[0]).then((collection) => {\n                        resolve(collection);\n                    });\n                } else {\n                    reject(new Error(`No collection for reference id \"${ referenceId }\".`));\n                }\n            }).catch((error) => reject(error));\n        });\n    }\n\n    removeFromEditor(model) {\n        this.api.v1.model.removeFromEditor(model);\n    }\n\n    resetRemoveFromEditor(model) {\n        this.api.v1.model.resetRemoveFromEditor(model);\n    }\n\n    getVariantData(variant, defaultData = {}) {\n        const variantData = this.mergeData(JSON.parse(JSON.stringify(variant.getData())), defaultData);\n        if (variant.hasPartialData() && this.getOriginalModel()) {\n            if (variantData.metadata && variantData.metadata.width && !variantData.metadata.width.length) {\n                delete variantData.metadata.width;\n            }\n            const modelData = this.getModelData(this.getOriginalModel());\n            const data = this.api.v1.util.object.merge(modelData, variantData);\n            variant.setHasPartialData(false);\n            variant.setData(data);\n            return this.api.v1.util.object.merge(data, defaultData);\n        }\n        return variantData;\n    }\n\n    mergeData(data, additions) {\n        const result = this.api.v1.util.object.merge(data, additions);\n        result.children = [];\n        if (data.children) {\n            for (const child of data.children) {\n                result.children.push(this.mergeData(child, additions));\n            }\n        }\n        return result;\n    }\n\n    preloadVariant(variant, addToController = true, setupEditables = true) {\n        const model = this.api.v1.model.create.internal(this.getVariantData(variant, { state: { isNonPersistent: true, draggableDisabled: true } }), null, true, false);\n        model.set('fields.referenceGuid', this.model.getGuid(), {\n            save: false,\n            notify: false,\n            undoable: false\n        });\n\n        this.api.v1.model.setEditNonPersistentState(model, true);\n        this.setWidth(model);\n        if (addToController) {\n            this.addToController(model);\n        }\n        this.preparedVariants.set(variant, {\n            variant,\n            model,\n            navigation: null,\n            editables: (setupEditables) ? this.setupEditables(model) : null\n        });\n        this.getEstimate();\n        return model;\n    }\n\n    prepareVariant(variant) {\n        if (this.currentVariant === variant) {\n            return;\n        }\n        if (this.currentVariant) {\n            const current = this.preparedVariants.get(this.currentVariant);\n            if (current) {\n                this.removeFromEditor(current.model);\n            }\n        }\n        this.currentVariant = variant;\n        if (this.preparedVariants.has(variant)) {\n            const current = this.preparedVariants.get(this.currentVariant);\n            if (current) {\n                this.resetRemoveFromEditor(current.model);\n            }\n            this.updateUI(this.preparedVariants.get(variant));\n            setTimeout(() => {\n                this.api.v1.model.highlight.message(current.model, `A/B variant \"${ variant.getName() }\"`);\n            }, 300);\n            return;\n        }\n\n        const model = this.preloadVariant(variant);\n        this.api.v1.model.bindings.bind(model, 'state.deleted', this.deleter);\n        for (const m of this.api.v1.model.query.getModelsAsArray([model])) {\n            this.registerListener(m, variant, model);\n        }\n        // In case user do not modify data: Make sure variant holds sufficient data\n        variant.update(this.getModelData(model));\n\n        this.updateUI(this.preparedVariants.get(variant));\n    }\n\n    setupEditables() {\n        return {};\n    }\n\n    setupImagePlaceholder() {\n        return {};\n    }\n\n    addToController(model) {\n        this.api.v1.model.addSibling(this.model, model, false, false);\n    }\n\n    // Remove variant, display original\n    resetView() {\n        const current = this.currentVariant ? this.preparedVariants.get(this.currentVariant) : null;\n        this.currentVariant = null;\n        if (this.getOriginalModel()) {\n            this.api.v1.model.resetRemoveFromEditor(this.model);\n        }\n        if (current) {\n            this.api.v1.model.removeFromEditor(current.model);\n            this.updateUI();\n            setTimeout(() => {\n                this.api.v1.model.highlight.message(this.model, `Original ${ this.model.getType() }`);\n            }, 300);\n        }\n    }\n\n    updateUI(variantObject) {\n        if (variantObject && !variantObject.navigation) {\n            const btn = document.createElement('span');\n            btn.classList.add('lab-btn', 'lab-ellipsis');\n            if (variantObject.variant.isDisabled()) {\n                btn.classList.add('abtest-disabled');\n            }\n            btn.innerHTML = variantObject.variant.getName();\n            btn.addEventListener('click', (event) => {\n                this.removeFromEditor(this.model);\n                this.prepareVariant(variantObject.variant);\n                this.api.v1.model.highlight.default(variantObject.model, { scroll: true, approximateScroll: true });\n                // this.updateUI(variantObject);\n            });\n            this.ui.variants.appendChild(btn);\n            variantObject.navigation = btn;\n        }\n\n        for (const el of [...this.ui.variants.children]) {\n            el.classList.remove('lab-selected');\n            if (variantObject && el === variantObject.navigation) {\n                el.classList.add('lab-selected');\n            }\n        }\n        if (!variantObject) {\n            this.ui.variants.querySelector('.original').classList.add('lab-selected');\n        }\n\n        if (this.test && this.ui.displayTestData) {\n            this.updateTestUI();\n        }\n\n        if (this.ui.notesField) {\n            this.ui.notesField.value = variantObject ? variantObject.variant.getNotes() : '';\n            this.ui.notesField.disabled = !variantObject;\n        }\n        if (variantObject) {\n            this.ui.disableBtn.checked = variantObject.variant.isDisabled();\n            this.ui.disableBtn.disabled = false;\n            this.ui.disableBtn.parentElement.classList.remove('lab-disabled');\n            if (this.ui.copyToOriginalBtn) { this.ui.copyToOriginalBtn.disabled = false; }\n        } else {\n            this.ui.disableBtn.checked = false;\n            this.ui.disableBtn.disabled = true;\n            this.ui.disableBtn.parentElement.classList.add('lab-disabled');\n            if (this.ui.copyToOriginalBtn) { this.ui.copyToOriginalBtn.disabled = true; }\n        }\n\n        if (this.ui.editablesContainer) {\n            this.ui.editablesContainerImage.innerHTML = '';\n            this.ui.editablesContainerText.innerHTML = '';\n            if (variantObject) {\n                this.ui.container.querySelector('.abtest-helpertext-title').classList.remove('lab-hidden');\n                this.ui.editablesContainerImage.appendChild(variantObject.editables.image);\n                this.ui.editablesContainerText.appendChild(variantObject.editables.kicker);\n                this.ui.editablesContainerText.appendChild(variantObject.editables.title);\n                this.ui.editablesContainerText.appendChild(variantObject.editables.subtitle);\n            } else {\n                this.ui.container.querySelector('.abtest-helpertext-title').classList.add('lab-hidden');\n                const elements = this.setupEditables(this.model, true);\n                this.setupImagePlaceholder();\n                this.ui.editablesContainerText.appendChild(elements.kicker);\n                this.ui.editablesContainerText.appendChild(elements.title);\n                this.ui.editablesContainerText.appendChild(elements.subtitle);\n            }\n        }\n    }\n\n    removeTestBtn() {\n        for (const viewport of this.api.v1.viewport.getActive()) {\n            const view = this.api.v1.view.getView(this.model, viewport);\n            const el = view.getExtraElement('abElement');\n            if (el) {\n                view.unsetExtraElement('abElement');\n                el.remove();\n            }\n        }\n    }\n\n    updateTestUI() {\n        if (this.test && this.test.id) {\n            for (const viewport of this.api.v1.viewport.getActive()) {\n                const view = this.api.v1.view.getView(this.model, viewport);\n                if (!view.getExtraElement('abElement')) {\n                    const el = view.setExtraElement('abElement', this.getCustomIcon(this.model, view, this));\n                    view.getMarkup().appendChild(el);\n                }\n            }\n        } else {\n            this.removeTestBtn();\n        }\n        const status_field = this.ui.container.querySelector('.test-status');\n        let status_text = this.test.status;\n        const is_completed = this.test.isFinished();\n        if (is_completed && this.test.results.statistics) {\n            const num_views = this.test.results.statistics.reduce((cc, item) => cc + item.views, 0);\n            const num_clicks = this.test.results.statistics.reduce((cc, item) => cc + item.clicks, 0);\n            status_text += ` (${ num_views } views, ${ num_clicks } clicks)`;\n            this.stats = this.prepareNumbers(this.test.results);\n            this.statistics = this.prepareStatistics(this.stats);\n        }\n        status_field.innerHTML = status_text;\n        this.ui.testMethodSelector.value = this.test.testMethod;\n        if (is_completed) {\n            this.ui.testMethodSelector.setAttribute('disabled', true);\n        }\n        this.ui.testStartField.value = this.test.correct_start.slice(0, 19);\n        this.ui.testEndField.value = this.test.correct_end.slice(0, 19);\n        this.ui.minVariantDifferenceField.value = this.test.methodoptions.minVariantDifference;\n        this.ui.minVariantDifferenceField.setAttribute('data-value', this.test.methodoptions.minVariantDifference);\n        this.ui.testIsPublishedField.checked = this.test.published;\n        this.ui.minVariantDifferenceField.disabled = !!this.test.published;\n        this.ui.resetTestButton.disabled = (this.collection.test_id === null && this.test && this.test.id);\n        this.ui.startTestNowButton.disabled = (this.test && this.test.isFinished()) || this.preparedVariants.size === 0;\n        this.ui.endTestNowButton.disabled = !this.test || (this.test && !this.test.isRunning());\n        if (this.ui.navTestResultsContainer) {\n            this.ui.navTestResultsContainer.disabled = !(this.test && this.test.results.statistics);\n            if (!this.ui.navTestResultsContainer.disabled) {\n                this.displayStatistics();\n            }\n        }\n    }\n\n    prepareNumbers(data) {\n        const result = { ...data };\n        const stats = [];\n        if (!data.statistics) {\n            return stats;\n        }\n        const max = {\n            views: 0,\n            clicks: 0\n        };\n        for (const item of data.statistics) {\n            if (item.views > max.views) {\n                max.views = item.views;\n            }\n            if (item.clicks > max.clicks) {\n                max.clicks = item.clicks;\n            }\n        }\n        result.max = max;\n        for (const item of data.statistics) {\n            const copy = { ...item };\n            copy.scoreNice = Math.round(item.score);\n            copy.viewsNice = this.api.v1.util.string.niceNumber(item.views);\n            copy.clicksNice = this.api.v1.util.string.niceNumber(item.clicks);\n            copy.viewsPercent = Math.round((item.views / max.views) * 100);\n            copy.clicksPercent = Math.round((item.clicks / max.clicks) * 100);\n            stats.push(copy);\n        }\n        result.statistics = stats;\n        return result;\n    }\n\n    prepareStatistics(data) {\n        const map = this.sortVariantsByTestId();\n        const result = [];\n        if (!data.statistics) {\n            return result;\n        }\n        let maxScore = 0;\n        let maxScoreIndex = null;\n        for (const stats of data.statistics) {\n            const variantObject = map[stats.variant_id];\n            result.push({\n                ...stats,\n                ...variantObject\n            });\n            if (stats.score > maxScore) {\n                maxScore = stats.score;\n                maxScoreIndex = data.statistics.indexOf(stats);\n            }\n            if (variantObject && variantObject.obj && variantObject.obj.navigation) {\n                variantObject.obj.navigation.setAttribute('data-test-views', stats.views);\n                variantObject.obj.navigation.setAttribute('data-test-clicks', stats.clicks);\n                variantObject.obj.navigation.setAttribute('data-test-score', Math.round(stats.score));\n            }\n        }\n        if (maxScoreIndex !== null && result[maxScoreIndex].obj.navigation) {\n            result[maxScoreIndex].obj.navigation.setAttribute('data-test-winner', '1');\n        }\n        result.sort((a, b) => a.score - b.score);\n        return result.reverse();\n    }\n\n    displayStatistics() {\n        const data = this.prepareStatistics(this.stats);\n        let no_data_text = 'Test results and data will show up here as soon as the test is completed';\n        if (this.stats.status === 'finish') {\n            no_data_text = 'Test results are unavailable because no data (or not enough data) could be gathered';\n        }\n        const markup = this.api.v1.util.dom.renderTemplate(templates.result, {\n            data,\n            no_data_text,\n            stats: this.stats,\n            article: {\n                id: this.model.get('instance_of') || this.model.get('id'),\n                title: this.model.get('fields.title')\n            }\n        }, false);\n        this.ui.testResultsContainer.querySelector('.results-container').innerHTML = markup;\n    }\n\n    sortVariantsByTestId() {\n        const result = {};\n        if (!this.test || !this.test.variants) {\n            return result;\n        }\n        for (const variant of this.test.variants) {\n            for (const item of variant.data) {\n                if (item.name === 'identifier') {\n                    result[variant.id] = {\n                        identifier: item.value,\n                        name: variant.name\n                    };\n                    const variantItem = this.getPreparedVariantByGuid(item.value);\n                    if (variantItem) {\n                        result[variant.id].obj = variantItem;\n                    } else if (item.value === 'original') {\n                        result[variant.id].obj = {\n                            model: this.getOriginalModel(),\n                            navigation: this.ui.originalBtn\n                        };\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    getPreparedVariantByGuid(guid) {\n        for (const [variant, item] of this.preparedVariants) {\n            if (variant.getGuid() === guid) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    deleteBinding(m, path, value) {\n        for (const [theVariant, obj] of this.preparedVariants) {\n            if (obj.model === m) {\n                const index = this.collection.getVariantIndex(theVariant);\n                this.preparedVariants.get(theVariant).navigation.remove();\n                this.deleteVariant(theVariant);\n                if (this.currentVariant === theVariant) {\n                    this.currentVariant = null;\n                }\n                const i = this.collection.getVariants().length > index ? index : index - 1;\n                if (i > -1) {\n                    this.displayVariant(i);\n                } else {\n                    this.resetView();\n                }\n                this.unregisterListener(m);\n                this.save();\n            }\n        }\n    }\n\n    deleteModelBinding(m, path, value) {\n        this.hideCurrent();\n    }\n\n    registerListener(model, variant, targetModel) {\n        this.listeners.set(model, (m, path, value) => {\n            if (['gridWidth', 'absoluteGridWidth', 'state.deleted'].includes(path)) {\n                return;\n            }\n            // Data modified. Update variant\n            variant.update(this.getModelData(targetModel));\n            this.save();\n        });\n        this.api.v1.model.bindings.bindAll(model, this.listeners.get(model));\n    }\n\n    unregisterListener(model) {\n        for (const m of this.api.v1.model.query.getModelsAsArray([model])) {\n            if (this.listeners.has(m)) {\n                this.api.v1.model.bindings.unbindAll(m, this.listeners.get(m));\n                this.listeners.delete(m);\n            }\n        }\n    }\n\n    validateVariants(variantObjects) {\n        for (const [variant, obj] of variantObjects) {\n            if (!obj.model.get('fields.title')) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    save() {\n        window.clearTimeout(this.timeoutId);\n        this.timeoutId = window.setTimeout(() => {\n            // Update variants in collection in case they are modified before handled by this class.\n            // Example: Data is set when replacing an image in the variant.\n            for (const [variant, obj] of this.preparedVariants) {\n                variant.update(this.getModelData(obj.model));\n            }\n            this.api.v1.abtest.collection.save(this.collection)\n                .then(() => {\n                    this.updatePublishStatus();\n                    this.ui.container.classList.remove('lab-busy');\n                    this.toggleBusyState(false);\n                });\n        }, 500);\n    }\n\n    publish() {\n        if (this.collection) {\n            if (!this.validateVariants(this.preparedVariants)) {\n                console.warn('[TestManager] Validation failed for variants');\n                this.api.v1.ui.modal.dialog({\n                    container: {\n                        state: {\n                            error: true\n                        }\n                    },\n                    content: {\n                        title: 'Validation failed',\n                        description: 'All variants must have a title. The test is not published. Please add a title to all variants and try again.'\n                    },\n                    noArchive: true,\n                    footer: {\n                        buttons: [\n                            {\n                                type: 'submit',\n                                value: 'OK'\n                            }\n                        ]\n                    }\n                });\n                return;\n            }\n            this.toggleBusyState(true);\n            this.ui.container.classList.add('lab-busy');\n\n            // Update pageId on the collection in case it is created on the original article.\n            this.collection.pageId = this.api.v1.model.query.getRootModel().get('id');\n\n            this.saveOrUpdateTest()\n                .then(() => this.api.v1.abtest.collection.publish(this.collection))\n                .then(() => {\n                    this.updatePublishStatus();\n                    this.api.v1.app.publish();\n                    this.ui.container.classList.remove('lab-busy');\n                    this.toggleBusyState(false);\n                    let currentModel = this.model;\n                    if (this.currentVariant) {\n                        currentModel = this.preparedVariants.get(this.currentVariant).model;\n                    }\n                    if (currentModel) {\n                        this.api.v1.model.highlight.message(currentModel, `AB test is published`);\n                    }\n                    this.updateTestUI();\n                }).catch((error) => {\n                    console.error(`[TestManager] Error publishing collection: `, error);\n                    const err = new Error(error.toString(), { cause: error });\n                    lab_api.v1.app.logViewError(err, 'entry');\n                    this.ui.container.classList.remove('lab-busy');\n                    this.toggleBusyState(false);\n                });\n        }\n    }\n\n    deleteCollection() {\n        if (!this.collection || !this.collection.isPersistent()) {\n            return;\n        }\n\n        this.api.v1.ui.modal.dialog({\n            container: {\n                state: {\n                    warning: true\n                }\n            },\n            content: {\n                title: 'Delete test and variants of this article?',\n                description: 'You cannot undo this.'\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'button',\n                        highlight: true,\n                        id: 'ab_cancelBtn',\n                        value: 'Cancel'\n                    },\n                    {\n                        type: 'submit',\n                        id: 'ab_deleteBtn',\n                        value: 'Delete'\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#ab_cancelBtn',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }, {\n                selector: '#ab_deleteBtn',\n                callback: (modal, event) => {\n                    this.end();\n                    this.deleteTest();\n                    this.removeTestBtn();\n                    this.api.v1.abtest.collection.delete(this.collection).then(() => {\n                        console.log('[TestManager] Collection persistently deleted');\n                    }).catch((error) => {\n                        console.error(`[TestManager] Error deleting collection: `, error);\n                    });\n                }\n            }]\n        });\n    }\n\n    deleteTest() {\n        if (this.test && this.test.id) {\n            // First, unpublish the test, then delete it.\n            this.unpublishTest().then(() => {\n                this.api.v1.abtest.test.delete(this.test.id).then((result) => {\n                    this.doResetTest();\n                    this.save();\n                    console.log(`[TestManager] Test deleted`);\n                }).catch((error) => {\n                    console.error(`[TestManager] Error deleting test: `, error);\n                });\n                this.test = null;\n            }).catch((error) => {\n                console.error(`[TestManager] Error unpublishing test: `, error);\n            });\n        } else {\n            console.warn('[TestManager] No test to delete ...');\n        }\n    }\n\n    // (Promise) Unpublish current test.\n    unpublishTest() {\n        return new Promise((resolve, reject) => {\n            if (this.test && this.test.id) {\n                this.test.published = false;\n                this.saveOrUpdateTest(true).then(() => {\n                    if (this.ui.displayTestData) {\n                        this.updateTestUI();\n                    }\n                    resolve();\n                }).catch(reject);\n                return;\n            }\n            reject(new Error('No test to unpublish'));\n        });\n    }\n\n    getEstimate() {\n        if (!this.ui.displayTestData) {\n            return;\n        }\n        window.clearTimeout(this.estimateId);\n        this.estimateId = window.setTimeout(() => {\n            this.ui.getEstimateValue.classList.add('lab-content-busy');\n            const testData = {\n                start: this.ui.testStartField.value || new Date(),\n                end: this.ui.testEndField.value || new Date(new Date().getTime() + (60 * 60 * 24 * 1000)),\n                placeId: this.instanceOfId,\n                url: this.getFrontUrl(),\n                testMethod: this.ui.testMethodSelector.value\n            };\n            const test = new AbTest(testData);\n            test.updateTestData({\n                methodoptions: {\n                    minVariantDifference: this.ui.minVariantDifferenceField.value\n                }\n            });\n            this.api.v1.abtest.test.estimate(test.serialize(this.preparedVariants)).then((data) => {\n                this.ui.getEstimateValue.innerHTML = data.result || 'Cannot estimate';\n                if (this.ui.displayTestData) {\n                    this.updateTestUI();\n                }\n                this.ui.getEstimateValue.classList.remove('lab-content-busy');\n            }).catch((error) => {\n                console.error(`[TestManager] Error estimating test: `, error);\n                this.ui.getEstimateValue.classList.remove('lab-content-busy');\n            });\n        }, 400);\n    }\n\n    updatePublishStatus() {\n        if (!this.collection) {\n            this.ui.publish.button.setAttribute('disabled', 'disabled');\n            return;\n        }\n        if (this.collection.isPersistent()) {\n            this.ui.publish.button.removeAttribute('disabled');\n            this.ui.deleteBtn.removeAttribute('disabled');\n            if (this.ui.displayTestData) {\n                if (this.collection.test_id) {\n                    this.ui.resetTestButton.removeAttribute('disabled');\n                } else {\n                    this.ui.resetTestButton.setAttribute('disabled', 'disabled');\n                }\n            }\n        } else {\n            this.ui.publish.button.setAttribute('disabled', 'disabled');\n            this.ui.deleteBtn.setAttribute('disabled', 'disabled');\n            if (this.ui.displayTestData) {\n                this.ui.resetTestButton.setAttribute('disabled', 'disabled');\n            }\n        }\n        const isModified = this.collection.getModified() !== this.collection.getPublished();\n        if (isModified) {\n            this.ui.publish.button.classList.add('abtest-modified');\n        } else {\n            this.ui.publish.button.classList.remove('abtest-modified');\n        }\n    }\n\n    end() {\n        this.hideCurrent();\n        this.resetView();\n        for (const [, value] of this.preparedVariants) {\n            this.api.v1.model.bindings.unbind(value.model, 'state.deleted', this.deleter);\n            this.unregisterListener(value.model);\n        }\n        for (const [key, value] of this.preparedVariants) {\n            this.api.v1.model.delete(value.model, true, true);\n            this.preparedVariants.delete(key);\n        }\n        this.model.set('state.draggableDisabled', false, { notify: false, registerModified: false });\n    }\n\n}\n","import { TestManagerBase } from './TestManagerBase.js';\nimport { AbTest } from './AbTest.js';\n\nexport class TestManagerFront extends TestManagerBase {\n\n    setupUI() {\n        super.setupUI();\n        this.displayCurrent();\n    }\n\n    /**\n     * Get the original model to create variants from\n     * @returns {LabModel}\n     */\n    getOriginalModel() {\n        return this.model;\n    }\n\n    /**\n     * @param model\n     * @param {HTMLElement} el\n     * @return {Promise<unknown>}\n     */\n    checkRunningAbTestState(model, el, reusableManager) {\n        return new Promise((resolve, reject) => {\n            const manager = reusableManager || new TestManagerFront(this.api, model);\n            manager.getCollection(manager.instanceOfId, true)\n                .then((collection) => this.api.v1.abtest.test.get(collection.test_id))\n                .then((test_data) => {\n                    const test = new AbTest();\n                    test.updateTestData(test_data.result);\n                    if (test.isRunning()) {\n                        el.classList.add('is_active');\n                        el.setAttribute('title', 'This article is currently running an A/B test');\n                    } else if (test.isFinished()) {\n                        el.classList.add('is_completed');\n                        el.setAttribute('title', 'The A/B test for this article is completed');\n                    }\n\n                    resolve();\n                })\n                .catch(reject);\n        });\n    }\n\n    getCustomIcon(model, view, manager) {\n        const el = document.createElement('span');\n        el.classList.add('labicon-ab_version', 'ab_test_running_indicator', 'indicator-top-right');\n        el.setAttribute('title', 'This article has an active A/B test');\n        el.addEventListener('click', () => {\n            if (this.api.v1.ns.get('abManager')) {\n                this.api.v1.ns.get('abManager').end();\n            }\n            this.setup({ displayTestData: true });\n            this.prepareVariants();\n            this.displayVariant(0);\n            this.api.v1.ns.set('abManager', this);\n        });\n\n        this.checkRunningAbTestState(model, el, manager);\n\n        return el;\n    }\n\n}\n","import properties from './properties.js';\nimport { PublishUpdater } from './PublishUpdater.js';\nimport { TestManagerArticle } from './TestManagerArticle.js';\nimport { TestManagerFront } from './TestManagerFront.js';\nimport { AbTest } from './AbTest.js';\n\nexport default {\n    name: 'AB Test',\n    description: 'Handle variants of article teasers',\n    version: '1.0.1',\n    predicate: (api) => api.v1.config.get('plugins.abtest.enable'),\n    entry: class {\n\n        onReady(api) {\n            this.api = api;\n            this.needs_rerender = [];\n            const rootModel = api.v1.model.query.getRootModel();\n            // For articles: Add a button to the drawer. When clicked: Start TestManagerArticle.\n            if (rootModel.getType() === 'page_article') {\n                let currentManager = null;\n                const navContainer = document.querySelector('.lab-collection-drawer ul');\n                const btn = document.createElement('li');\n                btn.setAttribute('data-collection', 'no-collection');\n                btn.innerHTML = `\n                    <div class=\"lab-lbl\"><span class=\"labicon-ab_version\" style=\"margin-top: -2px; display: block;\"></span></div>\n                    <div class=\"lab-desc\">A/B Test</div>\n                `;\n                btn.addEventListener('click', (event) => {\n                    if (currentManager) {\n                        currentManager.hideCurrent();\n                        currentManager.end();\n                        return;\n                    }\n                    const manager = new TestManagerArticle(api, rootModel, () => {\n                        currentManager = null;\n                    });\n                    if (manager.setup()) {\n                        manager.displayVariant(0);\n                        currentManager = manager;\n                    }\n                });\n                navContainer.appendChild(btn);\n            } else {\n                let publishUpdater;\n                api.v1.view.on('ready', async() => {\n                    this.checkFrontRunningAbTests(api);\n                });\n                api.v1.app.on('published', (params) => {\n                    for (const model of this.needs_rerender) {\n                        const instanceOfId = model.get('instance_of') || model.get('id');\n                        Sys.logger.debug(`[AbTest] Updating width for model variants: ${ instanceOfId }`);\n                        const manager = new TestManagerFront(api, model);\n                        manager.getCollection(instanceOfId)\n                            .then((collection) => {\n                                for (const variant of collection.getVariants()) {\n                                    variant.data.width = model.getRaw('width');\n                                }\n                                this.api.v1.abtest.collection.save(collection).then((resp) => {\n                                    this.api.v1.abtest.collection.publish(collection);\n                                });\n                                this.checkFrontRunningAbTests(api);\n                            }).catch((error) => {});\n                    }\n                });\n                api.v1.app.on('willPublish', () => {\n                    if (!publishUpdater) {\n                        publishUpdater = new PublishUpdater(api, api.v1.model.query.getRootModel());\n                    }\n                    publishUpdater.willPublish();\n                });\n            }\n        }\n\n        /**\n         * @param model\n         * @param {HTMLElement} el\n         * @return {Promise<unknown>}\n         */\n        checkRunningAbTestState(model, el) {\n            return new Promise((resolve, reject) => {\n                const manager = new TestManagerFront(this.api, model);\n                let collectionObj = null;\n                manager.getCollection(manager.instanceOfId)\n                    .then((collection) => {\n                        collectionObj = collection;\n                        return this.api.v1.abtest.test.get(collection.test_id);\n                    })\n                    .then((test_data) => {\n                        const test = new AbTest();\n                        test.updateTestData(test_data.result);\n                        if (test.isRunning()) {\n                            el.classList.add('is_active');\n                            el.setAttribute('title', 'This article is currently running an A/B test');\n                            if (!collectionObj.hasActiveTest) {\n                                collectionObj.setHasActiveTest(true);\n                                this.api.v1.abtest.collection.save(collectionObj);\n                            }\n                        } else if (test.isFinished()) {\n                            el.classList.add('is_completed');\n                            el.setAttribute('title', 'The A/B test for this article is completed');\n                            if (collectionObj.hasActiveTest) {\n                                collectionObj.setHasActiveTest(false);\n                                this.api.v1.abtest.collection.save(collectionObj);\n                            }\n                        }\n\n                        resolve();\n                    })\n                    .catch(reject);\n            });\n        }\n\n        getCustomIcon(model, view) {\n            const el = document.createElement('span');\n            el.classList.add('labicon-ab_version', 'ab_test_running_indicator', 'indicator-top-right');\n            el.setAttribute('title', 'This article has an associated A/B test');\n            el.addEventListener('click', () => {\n                if (this.api.v1.ns.get('abManager')) {\n                    this.api.v1.ns.get('abManager').end();\n                }\n                const manager = new TestManagerFront(this.api, model);\n                if (manager.setup({ displayTestData: true })) {\n                    manager.displayVariant(0);\n                    this.api.v1.ns.set('abManager', manager);\n                }\n            });\n\n            this.checkRunningAbTestState(model, el);\n\n            return el;\n        }\n\n        getArticleIds(ids, pageId) {\n            return new Promise((resolve, reject) => {\n                fetch(`/api/v1/ab_collection?content=full&query=(${ ids.map((id) => `referenceId:${ id }`).join(' OR ') }) AND pageId:${ pageId }`)\n                    .then((response) => response.json())\n                    .then((json) => {\n                        const only_test_results = json.result.filter((result) => typeof result.ab_collection.field.test_id === 'string');\n                        const ab_article_ids = only_test_results.map((result) => parseInt(result.ab_collection.field.referenceId, 10));\n                        resolve(ab_article_ids);\n                    })\n                    .catch(reject);\n            });\n        }\n\n        async checkFrontRunningAbTests(api) {\n            try {\n                const model = api.v1.model.query.getRootModel();\n                const models = api.v1.model.query.getModelsByType('article', [model]).filter((m) => !m.isNonPersistent() && ((m.get('instance_of') || m.get('id')) && m.get('fields.published_url')));\n                const articleIds = await this.getArticleIds(models.map((m) => m.get('instance_of') || m.get('id')), model.get('id'));\n                Sys.logger.debug('[AbTest] Checking for running tests');\n                for (const child of models) {\n                    const instance_id = child.get('instance_of') || child.get('id');\n                    if (articleIds.includes(instance_id)) {\n                        Sys.logger.debug(`[AbTest] Found running test for instance_id: ${ instance_id }`);\n                        if (!this.needs_rerender.includes(child)) {\n                            this.needs_rerender.push(child);\n                            Sys.logger.debug(`[AbTest] Adding ${ instance_id } to re-render list`);\n                        }\n                        for (const viewport of api.v1.viewport.getActive()) {\n                            const view = api.v1.view.getView(child, viewport);\n                            if (!view.getExtraElement('abElement')) {\n                                const el = view.setExtraElement('abElement', this.getCustomIcon(child, view));\n                                view.getMarkup().appendChild(el);\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                Sys.logger.debug(`[AbTest] Error checking running tests: ${ error.message }`);\n            }\n        }\n\n    },\n    elements: properties\n};\n","export default {\n    article: {\n        properties: {\n            contentMenus: {\n                default: {\n                    items: {\n                        settings: {\n                            items: {\n                                abtests: {\n                                    group: 's2',\n                                    icon: 'labicon-ab_version',\n                                    text: 'Edit A/B-test',\n                                    callback: (menuItem, event) => {\n                                        if (lab_api.v1.model.query.getRootModel().getType() === 'page_front') {\n                                            // Front page\n                                            import('./TestManagerFront.js').then((module) => {\n                                                if (lab_api.v1.ns.get('abManager')) {\n                                                    lab_api.v1.ns.get('abManager').end();\n                                                    lab_api.v1.ns.get('abManager').hideCurrent();\n                                                }\n                                                const manager = new module.TestManagerFront(lab_api, menuItem.getModel());\n                                                if (manager.setup({ displayTestData: true })) {\n                                                    manager.displayVariant(0);\n                                                    lab_api.v1.ns.set('abManager', manager);\n                                                }\n                                            }).catch((error) => {\n                                                console.error('Error fetching TestManagerFront: ', error);\n                                            });\n                                        }\n                                    },\n                                    bindings: [\n                                        {\n                                            path: 'state.isNonPersistent',\n                                            attribute: 'disabled',\n                                            valueTransformer: 'toBoolean'\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n","export default {\n    ui: `<div class=\"lab-content lab-grid abtest-ui-container abtest-will-hide abtest-hidden{{ #displayArticleData }} abtest-article{{ /displayArticleData }}\" data-ab-container=\"{{ id }}\">\n        <span class=\"abtest-close-btn labicon-remove\" title=\"Close\"></span>\n        <ul class=\"abtest-tabs lab-list lab-grid-large-12\">\n            <li class=\"tab-variants-container lab-selected\">Variants</li>\n            {{ #displayTestData }}\n                <li class=\"tab-tests-container\">Settings</li>\n                <li class=\"tab-test-results-container\">Test results</li>\n            {{ /displayTestData }}\n        </ul>\n\n        <div class=\"lab-formgroup lab-grid-large-{{ sizes.logo }} abtest-logo\">\n            <h3 class=\"lab-title labicon-ab_version\">\n                <strong>A/B testing for {{ type }} #{{ instanceOfId }}</strong>\n                <span class=\"lab-ellipsis\">{{{ title }}}</span>\n                <a target=\"_blank\" href=\"{{{ front }}}/a/{{ instanceOfId }}\" class=\"lab-link\">View{{ ^links.edit }} article{{ /links.edit }}</a> {{ #links.edit }}- <a target=\"_blank\" href=\"/edit/article/id/{{ instanceOfId }}\" class=\"lab-link\">Edit</a>{{ /links.edit }}\n                <span>\n                    Estimated test time: <strong class=\"estimate-value\">No estimate</strong>\n                </span>\n                <span>\n                    <input type=\"button\" value=\"Publish test\" class=\"abtest-publish-btn lab-selected\" title=\"Publish modifications to front-servers\" disabled> &nbsp; \n                    <input type=\"button\" value=\"Delete all\" class=\"abtest-delete-btn\" title=\"Delete test and variants for this article\">\n                    {{ #displayTestData }}\n                        <br>\n                        <input type=\"button\" value=\"Reset test\" class=\"abtest-reset-btn\" title=\"Delete test for this article\" disabled>\n                        <input type=\"button\" value=\"Start test\" class=\"start-test-now-btn\" title=\"Start the test using the selected variants\" disabled>\n                        <input type=\"button\" value=\"End test\" class=\"end-test-now-btn\" title=\"End running AB test\" disabled>\n                    {{ /displayTestData }}\n                </span>\n            </h3>\n        </div>\n\n\n        <div class=\"lab-formgroup lab-grid-large-{{ sizes.variantsContainer }} lab-grid tests-container lab-hidden\">            \n            <div class=\"lab-formgroup lab-grid-large lab-grid test-info-container lab-valign-top\">\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">A/B test for {{ type }}</h4>\n                {{ #displayTestData }}\n                    <div class=\"lab-formgroup-item lab-grid-gap lab-grid-large-4 lab-grid\">\n                        <div class=\"lab-formgroup-item lab-inline lab-grid-large-12 lab-grid\">\n                            <label for=\"test-is-published\">Active</label>\n                            <input type=\"checkbox\" class=\"test-is-published\" id=\"test-is-published\">\n                            <label class=\"name-label\">- &nbsp;Status:</label>\n                            <span class=\"test-status\">{{ #test.status }}{{ test.status }}{{ /test.status }}{{ ^test.status }}Not started ...{{ /test.status }}</span>\n                        </div>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-grid-gap lab-grid-large-4 lab-grid\">\n                        <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid\">\n                            <label class=\"name-label\">Minimum increase in CTR to detect a winner</label>\n                            <input type=\"range\" class=\"min-variant-lift\" min=\"10\" max=\"50\" step=\"1\" value=\"{{ test.minVariantDifference }}\" data-value=\"{{ test.minVariantDifference }}\" oninput=\"event.target.setAttribute('data-value', event.target.value);\">\n                        </div>\n                        <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid test-test-method\">\n                            <label class=\"name-label\">Test method</label>\n                        </div>\n                    </div>\n                    <div class=\"lab-formgroup-item lab-grid-gap lab-grid-large-1 lab-grid\"></div>\n                    <div class=\"lab-formgroup-item lab-grid-gap lab-grid-large-3 lab-grid\">\n                        <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid\">\n                            <label class=\"name-label\" for=\"test-start-field-input\">Test start time</label>\n                            <input type=\"datetime-local\" class=\"test-start-field\" id=\"test-start-field-input\" value=\"{{ test.start }}\" placeholder=\"Start date (YYYY-MM-DD)\">\n                        </div>\n                        <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid\">\n                            <label class=\"name-label\" for=\"test-end-field-input\">Test end time</label>\n                            <input type=\"datetime-local\" class=\"test-end-field\" id=\"test-end-field-input\" value=\"{{ test.end }}\" placeholder=\"End date (YYYY-MM-DD)\">\n                        </div>\n                        <div class=\"lab-formgroup-item lab-grid-large-12 lab-grid\">\n                            <input type=\"button\" class=\"set-test-now-btn\" value=\"Now + 12 hours\">\n                        </div>\n                    </div>\n                {{ /displayTestData }}\n    \n                {{ ^displayTestData }}\n                    <div class=\"lab-formgroup-item lab-grid-gap lab-grid-large-12 lab-grid\">\n                        <div class=\"abtest-text\" style=\"flex-basis: auto;\">A/B tests are added on the frontpage but will use the variants created here.</div>\n                    </div>\n                {{ /displayTestData }}\n            </div>\n\n        </div>\n\n        <div class=\"lab-formgroup lab-grid-large-{{ sizes.variantsContainer }} lab-grid test-results-container lab-hidden\">\n\n            <div class=\"lab-formgroup lab-grid-large-12 results-container\">\n                No test results available yet. When enough data has been collected to determine a winning variant, the winner will be selected automatically as long as the A/B test is running and active.\n                When the test period is over, only the original article will be shown.<br>\n                <br>\n                To continue to show the winning variant, make sure to keep the test running for as long as the article is present on the frontpage.\n            </div>\n\n        </div>\n\n        <div class=\"lab-formgroup lab-grid-large-{{ sizes.variantsContainer }} lab-grid variants-container\">\n\n            <div class=\"lab-formgroup lab-grid-large-{{ sizes.variants }}\">\n                \n                <h4 class=\"lab-title\">Variants of {{ type }}</h4>\n\n                <div class=\"variants lab-grid\"><span class=\"lab-btn original\">Original</span></div>\n\n                <div class=\"lab-grid lab-bordered-top\" style=\"padding-top: 14px;\">\n                    <input type=\"button\" value=\"Duplicate selected\" class=\"lab-btn lab-selected labicon-pluss_slim add-variant-btn\" title=\"Add a variant based on the selected variant\">\n                    {{ ^displayArticleData }}<input type=\"button\" value=\"Copy to original\" class=\"lab-btn copy-to-orignal-btn\" title=\"Use selected variant as original\" style=\"margin-left: 0.5rem;\" disabled>{{ /displayArticleData }}\n                    <input type=\"button\" value=\"Suggest\" class=\"suggest-variant-btn\" title=\"Get suggestions for variants\" style=\"margin-left: auto;\">\n                    <input type=\"number\" value=\"3\" class=\"suggest-variant-count-btn\" style=\"width: 50px; margin-left: 0.5rem;\">\n                </div>\n\n                {{ ^displayArticleData }}<p class=\"lab-info lab-grid-large-12 lab-grid-gap lab-space-above-medium\">Use the editor to modify variant details. All changes will be used in the test.</p>{{ /displayArticleData }}\n            </div>\n\n            <div class=\"lab-formgroup lab-grid-large-{{ sizes.selectedVariant }} lab-grid lab-valign-top\">\n\n                <h4 class=\"lab-title lab-grid-large-12 lab-grid-gap\">Selected Variant{{ #displayArticleData }}<span class=\"abtest-helpertext-title\"> - Click to edit text / image</span>{{ /displayArticleData }}</h4>\n\n                {{ #displayArticleData }}\n                <div class=\"lab-grid lab-grid-large-12 abtest-editables lab-grid-gap lab-bordered lab-autogrid\" style=\"margin-bottom:14px; flex-wrap: nowrap;\">\n                    <div class=\"abtest-text\" style=\"flex-basis: auto;\">No variant added. Click the \"Duplicate selected\" button to create a variant based on the article.</div>\n                    <div class=\"abtest-image\"><div class=\"lab-empty-placeholder lab-color-light lab-bordered\">\n                        <div class=\"lab-inner\">\n                            <div class=\"lab-icon-large labicon-images\"></div>\n                        </div>\n                    </div></div>\n                </div>\n                {{ /displayArticleData }}\n\n                <div class=\"lab-formgroup-item lab-grid-gap lab-grid-large-{{ #displayArticleData }}4{{ /displayArticleData }}{{ ^displayArticleData }}12{{ /displayArticleData }} lab-grid\">\n                    <label class=\"name-label\" for=\"variant-notes-field-input\">Notes</label>\n                    <textarea class=\"lab-grid-large-12 variant-notes-field\" id=\"variant-notes-field-input\" placeholder=\"Add notes here ...\">{{ variant.notes }}</textarea>\n                </div>\n\n                <div class=\"lab-formgroup-item lab-grid-gap lab-inline lab-grid-large-{{ #displayArticleData }}5{{ /displayArticleData }}{{ ^displayArticleData }}12{{ /displayArticleData }}\">\n                    <label for=\"disable-variant-btn\">Disabled</label>\n                    <input type=\"checkbox\" id=\"disable-variant-btn\">\n                    <button class=\"lab-btn labicon-delete delete-variant-btn\" style=\"margin-left: auto;\"> Delete variant</button>\n                </div>\n\n            </div>\n\n        </div>\n\n    </div>`,\n\n    result: `<h2>Results</h2>\n    <p>\n        Article: <a href=\"/edit/article/id/{{ article.id }}\" target=\"_blank\">{{ article.id }}</a> <b>{{{ article.title }}}</b><br>\n        Status: <b>{{ stats.status }}</b>. Winner: <b>{{ stats.winner }}</b>\n    </p>\n    <table class=\"lab-table lab-table-tight\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Score</th>\n                <th>Views</th>\n                <th>Clicks</th>\n            </tr>\n        </thead>\n        <tbody>\n        {{ #data }}\n            <tr>\n                <td>{{ name }}</td>\n                <td title=\"{{ score }}\">{{ scoreNice }}</td>\n                <td>{{ views }}</td>\n                <td>{{ clicks }}</td>\n            </tr>\n        {{ /data }}\n        </tbody>\n    </table>\n    `\n};\n","export default class {\n\n    constructor() {\n        this.api = null;\n        this.url = 'https://firebase.automagi.com/publish-story';\n        this.onPublish = this.publish.bind(this);\n        this.keyEvent = null;\n    }\n\n    onReady(api) {\n        this.api = api;\n        this.start();\n    }\n\n    onEnabled() {\n        this.start();\n    }\n\n    onDisabled() {\n        this.stop();\n    }\n\n    start() {\n        if (this.api) {\n            if (this.api.v1.config.get('plugins.appPusher.appName')) {\n                this.keyEvent = this.api.v1.util.keyEventHandler.add({\n                    key: 'i',\n                    callback: this.onPublish,\n                    controlkeys: ['labCtrlKey'],\n                    overrideDisable: false\n                });\n\n                const shouldAutoPush = this.api.v1.config.get('plugins.appPusher.autoPush');\n                if (shouldAutoPush === true) {\n                    this.api.v1.app.on('published', this.onPublish);\n                }\n            } else {\n                Sys.logger.warn('[AppPusher]: No app name is specified in config.');\n            }\n        }\n    }\n\n    stop() {\n        if (this.api) {\n            this.api.v1.app.off('published', this.onPublish);\n            this.api.v1.util.keyEventHandler.remove(this.keyEvent);\n        }\n    }\n\n    getPageData() {\n        const root = this.api.v1.model.query.getRootModel();\n        const site = this.api.v1.site.getSite();\n        return {\n            type: root.get('type'),\n            id: root.get('id'),\n            tags: root.get('tags'),\n            section: root.get('primaryTags.section'),\n            title: root.get('fields.title'),\n            url: (this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url')) + root.get('fields.published_url'),\n            url_edit: `${ this.api.v1.properties.get('customer_cms_url') }/edit/${  root.get('type') }/id/${  root.get('id') }`,\n            status: root.get('status'),\n            visibility_status: root.get('fields.visibility_status'),\n            publishhidden: root.get('fields.publishhidden'),\n            site: {\n                id: site.id,\n                alias: site.alias\n            }\n        };\n    }\n\n    getUserData() {\n        return {\n            id: this.api.v1.user.getUserId(),\n            name: this.api.v1.user.getUserName(),\n            email: this.api.v1.user.getUserEmail()\n        };\n    }\n\n    publish() {\n        const pageData = this.getPageData();\n        const userData = this.getUserData();\n\n        const data = {\n            app_name: this.api.v1.config.get('plugins.appPusher.appName'),\n            email: userData.email,\n            story_id: pageData.id,\n            title: pageData.title\n        };\n\n        const body = new FormData();\n        for (const key of Object.keys(data)) {\n            body.append(key, data[key]);\n        }\n\n        if (pageData.visibility_status === 'P' && pageData.publishhidden !== '1') {\n            Sys.logger.debug('[AppPusher]: Sending push message...');\n            this.api.v1.util.httpClient.request(this.url, {\n                method: 'POST',\n                mode: 'cors',\n                credentials: 'omit',\n                body\n            }).then(() => {\n                // Display success snackbar.\n                Sys.logger.debug('[AppPusher]: Successfully sent push message.');\n            }).catch(() => {\n                // Display error snackbar.\n                Sys.logger.error('[AppPusher]: Failed to send push message.');\n            });\n        } else {\n            Sys.logger.warn('[AppPusher]: Page not published visibly, failed to send push message.');\n            // Display warning snackbar.\n        }\n    }\n\n}","import AppPusher from './AppPusher.js';\n\nexport default {\n    name: 'App Pusher',\n    description: 'Push message to app',\n    version: '1.0.0',\n    predicate: (api) => api.v1.config.get('plugins.appPusher.enable') && api.v1.config.get('plugins.appPusher.appName'),\n    entry: AppPusher,\n    on: {\n        enabled(plugin) {\n            if (plugin.entry.instance && plugin.entry.instance.onEnabled) {\n                plugin.entry.instance.onEnabled();\n            }\n        },\n        disabled(plugin) {\n            if (plugin.entry.instance && plugin.entry.instance.onDisabled) {\n                plugin.entry.instance.onDisabled();\n            }\n        }\n    }\n};\n","export default class {\n\n    constructor() {\n        this.api = null;\n        this.config = null;\n        this.keyEvent = null;\n    }\n\n    onReady(api, config) {\n        this.api = api;\n        this.config = config;\n        this.start();\n    }\n\n    start() {\n        if (this.api && this.config.active) {\n            this.keyEvent = this.api.v1.util.keyEventHandler.add({\n                key: 'b',\n                callback: () => this.showPushModal(),\n                controlkeys: ['labCtrlKey', 'shiftKey'],\n                overrideDisable: false\n            });\n        }\n    }\n\n    stop() {\n        if (this.api) {\n            this.api.v1.util.keyEventHandler.remove(this.keyEvent);\n        }\n    }\n\n    stripHtmlTags(html) {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = html;\n        return tempDiv.textContent;\n    }\n\n    // Display a modal for configuring and sending the push notification\n    showPushModal() {\n        const pageData = this.getPageData();\n        const titleText = this.stripHtmlTags(pageData.title || '');\n        const subtitleText = this.stripHtmlTags(pageData.subtitle || '');\n\n        this.api.v1.ui.modal.dialog({\n            content: {\n                title: 'Send BuyAndRead Push Notification',\n                description: `\n                    <div class=\"lab-formgroup\">\n                        <div class=\"lab-formgroup-item\">\n                            <label for=\"buyandreadTitle\">Title:</label>\n                            <input type=\"text\" id=\"buyandreadTitle\" class=\"lab-input\" value=\"${ this.config.defaultTitle || titleText || '' }\">\n                        </div>\n                        <div class=\"lab-formgroup-item\">\n                            <label for=\"buyandreadBody\">Message:</label>\n                            <textarea id=\"buyandreadBody\" class=\"lab-input\">${ this.config.defaultMessage || subtitleText || '' }</textarea>\n                        </div>\n                        <div class=\"lab-formgroup-item\">\n                            <label for=\"buyandreadUrl\">Custom Article URL (Optional):</label>\n                            <input type=\"text\" id=\"buyandreadUrl\" class=\"lab-input\" value=\"\">\n                        </div>\n                        <div class=\"lab-formgroup-item\">\n                            <label for=\"excludeParams\">Send notification without linking to article:</label>\n                            <input type=\"checkbox\" id=\"excludeParams\" ${ this.config.excludeParamsDefault ? 'checked' : '' }>\n                        </div>\n                    </div>\n                `\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Cancel',\n                        id: 'cancel_button',\n                        highlight: false\n                    },\n                    {\n                        value: 'Send Push',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#cancel_button',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }],\n            callbacks: {\n                submit: () => {\n                    const title = document.getElementById('buyandreadTitle').value;\n                    const message = document.getElementById('buyandreadBody').value;\n                    const customUrl = document.getElementById('buyandreadUrl').value;\n                    const excludeParams = document.getElementById('excludeParams').checked;\n                    this.publish(title, message, customUrl, excludeParams);\n                }\n            }\n        });\n    }\n\n    // Retrieve relevant data about the current page\n    getPageData() {\n        const root = this.api.v1.model.query.getRootModel();\n        const site = this.api.v1.site.getSite();\n        return {\n            type: root.get('type'),\n            id: root.get('id'),\n            title: root.get('fields.title'),\n            subtitle: root.get('fields.subtitle'),\n            url: (this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url')) + root.get('fields.published_url'),\n            status: root.get('status'),\n            visibility_status: root.get('fields.visibility_status'),\n            publishhidden: root.get('fields.publishhidden'),\n            site: {\n                alias: site.alias\n            }\n        };\n    }\n\n    // Publish a push notification with the provided title and body,\n    publish(customTitle, customBody, customUrl, excludeParams) {\n        const pageData = this.getPageData();\n\n        if (pageData.visibility_status === 'P' && pageData.publishhidden !== '1') {\n            const params = new URLSearchParams({\n                title: customTitle,\n                message: customBody\n            });\n\n            if (!excludeParams) {\n                const url = customUrl || pageData.url; // Use custom URL if provided, otherwise use the page URL\n                params.append('url', url);\n            }\n\n            // Construct the request URL\n            const requestUrl = `https://www.buyandread.com/servlet/api/${ this.config.providerId }/provider/v1/app/sendPushMessage?${ params.toString() }`;\n\n            Sys.logger.debug('[BuyAndRead]: Sending push message...');\n\n            // Prepare the payload for the API call\n            const formData = new FormData();\n            const payload = {\n                site: pageData.site.alias,\n                request_url: requestUrl\n            };\n            formData.append('payload', JSON.stringify(payload));\n\n            // Make the API call to send the push notification\n            this.api.v1.util.httpClient.request(\n                '/ajax/buyandread/post',\n                {\n                    method: 'POST',\n                    body: formData\n                }\n            ).then((response) => response).then((data) => {\n                // If success is false, reject the promise with an error\n                if ((data && data.success === false) || data === '') {\n                    const errorMessage = `Contact us or <a href=\"https://www.buyandread.com/\" target=\"_blank\">BuyAndRead</a> if the error persists.<br>\n                    <b>Status from BuyAndRead:</b> ${ data.statusDesc || 'Push notification failed' }`;\n\n                    return Promise.reject(new Error(errorMessage));\n                }\n\n                // Success message, and details about the push notification\n                Sys.logger.debug('[BuyAndRead]: Successfully sent push message.', data);\n                const successMessage = `Push notification successfully sent!`;\n                /* For a more detailed response, uncomment the following lines and add the desired fields:\n                Response:<br>\\n\\n\n                <b>Success:</b> ${data.success}<br>\n                <b>Scheduled:</b> ${data.scheduled}<br>\n                <b>Description:</b> ${data.statusDesc || 'Push notification sent successfully!'}<br>\n                <b>Status code:</b> ${data.statusCode}<br>\n                <b>Title:</b> ${params.get('title') || 'N/A'}<br>\n                <b>Message:</b> ${params.get('message') || 'N/A'}<br>\n                <b>Article ID:</b> ${params.get('articleId') || 'N/A'}<br>\n                <b>URL:</b> ${params.get('url') || 'N/A'}<br>\n                */\n\n                this.showResultModal('Success', successMessage, false);\n            }).catch((error) => {\n                // Error message if the API call fails, or the response is not as expected\n                Sys.logger.error('[BuyAndRead]: Failed to send push message.', error);\n                const errorMessage = (error.message ? `<br>\\n\\n${  error.message }` : '');\n\n                this.showResultModal('Error - Push request failed!', errorMessage, true);\n            });\n        } else {\n            // Error message if the page is not published visibly\n            Sys.logger.warn('[BuyAndRead]: Page not published visibly, failed to send push message.');\n            this.showResultModal('Error', 'Page must be published and visible to send push notifications.', true);\n        }\n    }\n\n    // Display a modal with the result of the push notification send\n    showResultModal(title, message, isError) {\n        this.api.v1.ui.modal.dialog({\n            container: {\n                state: isError ? 'error' : 'success'\n            },\n            content: {\n                title,\n                description: message\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'submit',\n                        value: 'OK',\n                        highlight: true\n                    }\n                ]\n            }\n        });\n    }\n\n}\n","import BuyAndRead from './buyandread.js';\n\nexport default {\n    name: 'BuyAndRead',\n    description: 'Push message to app using BuyAndRead',\n    version: '1.0.0',\n    predicate: (api) => api.v1.config.get('plugins.buyandread.active'),\n    entry: class {\n\n        onReady(api) {\n            api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/buyandread/buyandread-main.css');\n\n            let buyAndReadInstance = null;\n\n            const btn = api.v1.util.dom.renderTemplate('<li class=\"lab-item lab-btn labicon-buyandread\" title=\"BuyAndRead\"></li>', {}, true);\n            document.querySelector('#labrador-menu ul li.lab-menulist ul').appendChild(btn);\n            btn.addEventListener('click', (event) => {\n                const config = api.v1.config.get('plugins.buyandread');\n                if (!config.providerId) {\n                    const missingFields = [\n                        !config.providerId && 'Provider ID'\n                    ].filter(Boolean).join(', ');\n\n                    Sys.logger.warn(`[BuyAndRead] Required config missing: ${ missingFields }. BuyAndRead will not run.`);\n                    api.v1.ui.modal.dialog({\n                        container: { state: { warning: true } },\n                        content: {\n                            title: 'BuyAndRead not configured',\n                            description: `Required configuration missing: ${ missingFields }.<br>Set up BuyAndRead in the <a href=\"/settings/cp?page=plugins\" target=\"_blank\">admin-page</a>.`\n                        },\n                        footer: {\n                            buttons: [\n                                {\n                                    type: 'submit',\n                                    value: 'OK',\n                                    highlight: true\n                                }\n                            ]\n                        }\n                    });\n                    return;\n                }\n\n                if (!buyAndReadInstance) {\n                    buyAndReadInstance = new BuyAndRead();\n                    buyAndReadInstance.onReady(api, config);\n                }\n                buyAndReadInstance.showPushModal();\n            }, false);\n        }\n\n    }\n};\n","export { default as youtube } from './youtube/index.js';\nexport { default as publishhistory } from './publishhistory/index.js';\nexport { default as app_pusher } from './app_pusher/index.js';\nexport { default as tansa } from './tansa/index.js';\nexport { default as textassistant } from './textassistant/index.js';\nexport { default as abtest } from './abtest/index.js';\nexport { default as slack_notifier } from './slack_notifier/index.js';\nexport { default as subrite } from './subrite/index.js';\nexport { default as buyandread } from './buyandread/index.js';\nexport { default as paywall } from './paywall/index.js';\n","export default class PaywallManager {\n\n    constructor(api, rootModel, onClose) {\n        this.api = api;\n        this.rootModel = rootModel;\n        this.onClose = onClose;\n        this.previewActive = false;\n        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/paywall/paywall.css');\n        this.previewModel = null;\n    }\n\n    setup() {\n        this.togglePreview();\n    }\n\n    // Toggle the preview of the paywall\n    togglePreview() {\n        if (this.previewActive) {\n            this.deletePreview();\n            this.previewActive = false;\n        } else {\n            this.deletePreview();\n            this.createPreview();\n            this.previewActive = true;\n            setTimeout(() => this.scrollToPaywallPreview(), 100);\n        }\n    }\n\n    // Insert a paywallPreview model programatically into the correct bodyTextIndex\n    createPreview() {\n        const lineIndex = lab_api.v1.config.get('paywall.bodytext.lineCount');\n        const model = this.api.v1.model.insert.atPath({\n            path: 'page_article/bodytext[0]',\n            data: {\n                type: 'paywallPreview',\n                metadata: {\n                    bodyTextIndex: lineIndex\n                },\n                contentdata: {\n                    fields: {}\n                },\n                state: {\n                    isNonPersistent: true,\n                    editNonPersistent: true,\n                    draggableDisabled: true\n                }\n            },\n            options: {\n                silent: false\n            }\n        });\n\n        if (model) {\n            this.previewModel = model;\n            this.api.v1.model.bindings.bind(model, 'state.deleted', this.handlePreviewDeleted.bind(this));\n        }\n\n        return model;\n    }\n\n    // Handle when the preview is deleted manually\n    handlePreviewDeleted(model, path, value) {\n        if (value === true) {\n            this.previewActive = false;\n            this.previewModel = null;\n\n            if (typeof this.onClose === 'function') {\n                this.onClose();\n            }\n        }\n    }\n\n    // Delete the paywall preview model\n    deletePreview() {\n        this.api.v1.model.delete(this.previewModel, true, true);\n    }\n\n    // Scroll to the paywall preview\n    scrollToPaywallPreview() {\n        lab_api.v1.model.highlight.default(this.previewModel, { scroll: true });\n    }\n\n    // Close the paywall preview\n    end() {\n        this.deletePreview();\n        this.previewActive = false;\n\n        if (typeof this.onClose === 'function') {\n            this.onClose();\n        }\n    }\n\n}\n","import PaywallManager from './PaywallManager.js';\n\nexport default {\n    name: 'Paywall Preview',\n    description: 'Display a preview of the paywall configuration',\n    version: '1.0.1',\n    predicate: (api) => !api.v1.config.get('paywall.provider'),\n    entry: class {\n\n        onReady(api) {\n            this.api = api;\n            this.rootModel = api.v1.model.query.getRootModel();\n            this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/paywall/paywall.css');\n\n            if (this.rootModel.getType() === 'page_article') {\n                let currentManager = null;\n                const labStatusArea = document.querySelector('.lab-status-area');\n                const span = document.createElement('span');\n                span.className = 'labicon-ad_content';\n                labStatusArea.appendChild(span);\n                const navContainer = document.querySelector('body > div.lab-collection-drawer.lab-content > nav > ul');\n                const btn = document.createElement('li');\n                btn.style.display = 'none';\n                btn.setAttribute('data-collection', 'no-collection');\n                btn.innerHTML = `\n                <div class=\"lab-lbl paywall-btn\"><span class=\"labicon-ad_content\" style=\"margin-top: -2px; display: block;\"></span></div>\n                <div class=\"lab-desc paywall-btn\">Paywall</div>\n                `;\n                const lbl = btn.querySelector('.lab-lbl');\n                btn.addEventListener('click', (event) => {\n                    if (currentManager) {\n                        currentManager.end();\n                        currentManager = null;\n                        lbl.classList.remove('paywall-btn-active');\n                    } else {\n                        const manager = new PaywallManager(api, this.rootModel, () => {\n                            currentManager = null;\n                            lbl.classList.remove('paywall-btn-active');\n                        });\n                        manager.setup();\n                        currentManager = manager;\n                        lbl.classList.add('paywall-btn-active');\n                    }\n                });\n                navContainer.appendChild(btn);\n\n                const paywallState = this.rootModel.get('fields.paywall');\n                if (paywallState) {\n                    const paywallElements = btn.querySelectorAll('.paywall-btn');\n                    paywallElements.forEach((el) => {\n                        el.classList.add('paywall-collection-btn-visible');\n                    });\n                    span.classList.add('paywall-collection-btn-visible');\n                    btn.style.display = '';\n                }\n\n                this.api.v1.model.bindings.bind(this.rootModel, 'fields.paywall', (model, path, value) => {\n                    const paywallElements = btn.querySelectorAll('.paywall-btn');\n                    if (value) {\n                        paywallElements.forEach((el) => {\n                            el.classList.add('paywall-collection-btn-visible');\n                        });\n                        span.classList.add('paywall-collection-btn-visible');\n                        btn.style.display = '';\n                    } else {\n                        paywallElements.forEach((el) => {\n                            el.classList.remove('paywall-collection-btn-visible');\n                        });\n                        span.classList.remove('paywall-collection-btn-visible');\n                        btn.style.display = 'none';\n                    }\n                });\n            }\n        }\n\n    }\n};\n","export class PublishHistory {\n\n    constructor(id) {\n        this.id = id;\n        this.container = null;\n    }\n\n    getMarkup(data) {\n        return lab_api.v1.util.dom.renderTemplate(`\n            <div>\n                <p>Publish-history for {{ type }} #{{ id }} {{ #date }}- Created {{ date }}{{ /date }} <a class=\"labicon-startEdit lab-btn\" href=\"/edit/{{ type }}/id/{{ id }}\" target=\"_blank\" style=\"float: right; margin-top: -0.8em;\"> Edit {{ type }}</a></p>\n                <table class=\"lab-table lab-space-above-large lab-modal-table\">\n                    <thead>\n                        <tr class=\"publish-marker\">\n                            <th>Status</th>\n                            <th>Publish date</th>\n                            <th>Time</th>\n                            <th>User name</th>\n                            <th>User email</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {{ #items }}\n                        <tr>\n                            <td><span class=\"lab-label {{ #visible }}published-visible{{ /visible }}{{ ^visible }}published-hidden{{ /visible }}\">{{ #visible }}Visible{{ /visible }}{{ ^visible }}Hidden{{ /visible }}</span></td>\n                            <td>{{ date }}</td>\n                            <td>{{ time }}</td>\n                            <td>{{ user.firstname }} {{ user.lastname }}</td>\n                            <td><a href=\"mailto:{{ user.googleid }}\">{{ user.googleid }}</a></td>\n                        </tr>\n                    {{ /items }}\n                    </tbody>\n                </table>\n            </div>\n        `, data, true);\n    }\n\n    run(container, callback) {\n        this.container = container;\n        lab_api.v1.util.httpClient.get(`/ajax/node/get-node?id=${ this.id }`, { resetCache: true }).then((resp) => {\n\n            // '[[1,1646861908,\"A\"],[1,1646907387,\"A\"],[1,1646915037,\"A\"]]' [[<user-id>, <timestamp>, <status>], ...]\n            const historyString = lab_api.v1.util.defaults.string(lab_api.v1.util.object.get('data.fields.last_published_by', resp));\n            if (!historyString) {\n                Sys.logger.debug(`[PublishHistory] No history found for node #${ this.id }.`);\n                return;\n            }\n            const history = JSON.parse(historyString).reverse();\n            const userIds = [...new Set(history.map((item) => item[0]))];\n\n            lab_api.v1.util.httpClient.get(`/ajax/user/get-users-by-ids?ids=${ userIds.join(',') }`).then((users) => {\n                this.draw(resp.data, history, users);\n                callback();\n            }).catch((error) => {\n                console.log('Error fetching users: ', error);\n            });\n\n        }).catch((error) => {\n            console.log('Error fetching node: ', error);\n        });\n\n    }\n\n    draw(data, history, users) {\n        const usersObj = {};\n        for (const user of users) {\n            usersObj[user.userid] = user;\n        }\n        const items = history.map((item) => ({\n            user: usersObj[item[0]],\n            date: this.formatTimestamp(item[1], true, false),\n            time: this.formatTimestamp(item[1], false, true),\n            status: item[2],\n            visible: item[2] === 'A' || item[2] === 'P'\n        }));\n        const markup = this.getMarkup({\n            id: data.id,\n            date: this.formatTimestamp(data.fields.created),\n            type: data.type,\n            items\n        });\n        this.container.appendChild(markup);\n    }\n\n    // Todo: Use a general method for this\n    formatTimestamp(timestamp, displayDate = true, displayTime = true) {\n        if (!timestamp) {\n            return null;\n        }\n        const d = new Date(timestamp * 1000);\n        if (displayDate && displayTime) {\n            return `${ d.toLocaleDateString() } - ${ d.toLocaleTimeString() }`;\n        }\n        return displayDate ? d.toLocaleDateString() : d.toLocaleTimeString();\n    }\n\n}\n","import { PublishHistory } from './PublishHistory.js';\n\nexport default (menu, event) => {\n    const model = menu.getModel();\n    lab_api.v1.util.dom.addFile('css', '/view-resources/Baseview/modules/plugins/publishhistory/style.css');\n    const id = model.get('instance_of');\n    if (!id) {\n        Sys.logger.debug('[PublishHistory] No instance-of-id found. Cannot show publish history.');\n        return;\n    }\n\n    const editor = new PublishHistory(id);\n\n    lab_api.v1.ui.modal.dialog({\n        container: {\n            width: 900,\n            state: {\n                busy: true\n            }\n        },\n        content: {\n            title: model.get('fields.title') || '[Unnamed article]',\n            markup: `<div class=\"publishhistory\"></div>`\n        },\n        callbacks: {\n            didDisplay: (modal) => {\n                editor.run(modal.getMarkup().querySelector('.publishhistory'), () => {\n                    modal.setBusyState(false);\n                });\n            }\n        }\n    });\n\n};\n","import properties from './properties.js';\n\nexport default {\n    name: 'PublishHistory',\n    description: 'Display time and user for each publish-action for current article teaser',\n    version: '1.0.0',\n    isEnabled: true,\n    elements: {\n        article: {\n            properties\n        }\n    }\n};\n","import callback from './callback.js';\n\nexport default {\n    contentMenus: {\n        default: {\n            items: {\n                settings: {\n                    items: {\n                        originalArticle: {\n                            text: 'Original article',\n                            icon: 'labicon-article',\n                            displayCondition: 'hasParentOfTypes',\n                            params: {\n                                modelTypes: ['row', 'bodytext']\n                            },\n                            items: {\n                                publishhistory: {\n                                    icon: 'labicon-time',\n                                    title: 'Display Publish History',\n                                    text: 'Publish History',\n                                    callback,\n                                    bindings: [\n                                        {\n                                            path: 'instance_of',\n                                            attribute: 'disabled',\n                                            valueTransformer: 'isNumeric',\n                                            valueTransformerOptions: {\n                                                negateBoolean: true\n                                            }\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n","/**\n * Notifier.js\n * Send a message via a Slack webhook\n * Input is an array of objects defining cases where a notification is to be sendt\n * [{\n *     page_type: (string) - The type of page to notify about (all, front, article, notice)\n *     event: (string) - The event to notify about (currently only publish (default))\n *     type: (string) - The type of notification (all (default), tags, section, hostpath)\n *     value: (array) - The value to match against (e.g. ['news'])\n *     webhook: (string) - The Slack webhook URL\n * }]\n */\n\nexport class Notifier {\n\n    constructor(api, options) {\n        this.api = api;\n        this.defaults = {\n            type: ['all', 'tags', 'section', 'hostpath'],\n            page_type: ['all', 'front', 'article', 'notice'],\n            event: ['publish', 'error']\n        };\n        this.events = {\n            publish: this.setupEvent('publish', options),\n            error: this.setupEvent('error', options)\n        };\n        this.listen();\n    }\n\n    listen() {\n        if (this.events.publish.length) {\n            this.api.v1.app.on('published', (params) => {\n                this.notifyPublish(params);\n            });\n        }\n        if (this.events.error.length) {\n            this.api.v1.app.on('error', (error) => {\n                try { this.notifyError(error, true); } catch { /* empty */ }\n            });\n            this.api.v1.app.on('viewError', (error) => {\n                try { this.notifyError(error, false); } catch { /* empty */ }\n            });\n        }\n    }\n\n    notifyPublish(params) {\n        const model = this.api.v1.model.query.getModelById(params.id);\n        for (const item of this.events.publish) {\n            if (this.validateEvent(model, item, params)) {\n                const published = params.published ? new Date(params.published * 1000).toLocaleString() : '';\n                let modified = params.modified ? new Date(params.modified * 1000).toLocaleString() : '';\n                if (!modified && published) {\n                    modified = published;\n                }\n                this.notify({\n                    notifyType: 'publish',\n                    title: params.type === 'front' ? model.get('fields.name') : model.get('fields.title'),\n                    url_front: params.url,\n                    url_editor: `${ this.api.v1.properties.get('customer_cms_url') }/edit/${ params.type }/id/${ params.id }`,\n                    url_cms: this.api.v1.properties.get('customer_cms_url'),\n                    id: params.id,\n                    type: params.type,\n                    hidden: !!params.hidden,\n                    modified,\n                    published,\n                    published_ahead: params.published_ahead,\n                    user: this.api.v1.user.getUserName()\n                }, item.webhook);\n            }\n        }\n    }\n\n    notifyError(error, isCmsError) {\n        const model = this.api.v1.model.query.getRootModel();\n        for (const item of this.events.error) {\n            if (this.validateEvent(model, item, item)) {\n                this.notify({\n                    notifyType: 'error',\n                    type: 'all',\n                    isCmsError,\n                    isViewError: !isCmsError,\n                    url_editor: `${ this.api.v1.properties.get('customer_cms_url') }/edit/${ model.get('type').replace('page_', '') }/id/${ model.getId() }`,\n                    url_cms: this.api.v1.properties.get('customer_cms_url'),\n                    url_monitor: `${ this.api.v1.properties.get('customer_cms_url') }/support/monitor/`,\n                    user: this.api.v1.user.getUserName(),\n                    message: error.toString(),\n                    stackTrace: error.stack\n                }, item.webhook);\n            }\n        }\n    }\n\n    validateEvent(model, item, params) {\n        if (!model || (params.type !== item.page_type && item.page_type !== 'all')) {\n            return false;\n        }\n        if (item.type === 'all') {\n            return true;\n        }\n        return this.validateValue(model, item.type, item.value);\n    }\n\n    validateValue(model, type, value) {\n        switch (type) {\n            case 'tags':\n                return this.validateTags(model, value);\n            case 'section':\n                return this.validateSection(model, value);\n            case 'hostpath':\n                return this.validateHostPath(model, value);\n            default:\n                return false;\n        }\n    }\n\n    validateTags(model, value) {\n        const tags = model.get('tags');\n        for (const tag of tags) {\n            if (value.includes(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    validateSection(model, value) {\n        return value.includes(model.get('primaryTags.section'));\n    }\n\n    validateHostPath(model, value) {\n        return value.includes(model.get('fields.hostpath'));\n    }\n\n    setupEvent(event, options) {\n        const result = [];\n        if (!Array.isArray(options)) {\n            return result;\n        }\n        for (const item of options) {\n            if (item.event === event) {\n                const validated = this.validateItem(item);\n                if (validated) {\n                    result.push(validated);\n                }\n            }\n        }\n        return result;\n    }\n\n    validateItem(item) {\n        if (!item.webhook || !item.page_type) {\n            return null;\n        }\n        if (!this.defaults.page_type.includes(item.page_type)) {\n            console.warn(`[Slack Notifier] Invalid page type \"${ item.page_type }\". Item will not be used. Options: `, this.defaults.page_type);\n            return null;\n        }\n        if (!this.defaults.event.includes(item.event)) {\n            console.warn(`[Slack Notifier] Invalid event \"${ item.event }\". Item will not be used. Options: `, this.defaults.event);\n            return null;\n        }\n        return {\n            page_type: item.page_type,\n            event: item.event,\n            type: this.defaults.type.includes(item.type) ? item.type : 'all',\n            value: Array.isArray(item.value) ? item.value : [],\n            webhook: item.webhook\n        };\n    }\n\n    /**\n     * Send a message to a Slack webhook\n     * @param {object} data - Data available to template\n     * @param {string} url - The Slack webhook URL\n     * @returns {Promise|null} - A promise that resolves when the message is sent\n     */\n    notify(data, url) {\n        const key = `slack_notifier.${ data.notifyType }.${ data.type }`;\n        let content = this.api.v1.locale.get(key, { data });\n        if (content === key) {\n            if (data.notifyType === 'publish') {\n                content = `*Page ${ data.id } is published*\\nType: ${ data.type }\\nPublish date: ${ data.published }\\nUser: ${ data.user }\\nFront url: ${ data.url_front }\\nEditor url: ${ data.url_editor }`;\n            } else if (data.notifyType === 'error') {\n                content = `*${ data.isCmsError ? 'CMS error' : 'View error' }*\\nMessage: ${ data.message }\\nStack trace: ${ data.stackTrace }\\nUser: ${ data.user }\\nEditor url: ${ data.url_editor }`;\n            } else {\n                console.warn('No content for notify:', data);\n                return null;\n            }\n        }\n\n        const payload = {\n            blocks: [{\n                type: 'section',\n                text: {\n                    type: 'mrkdwn',\n                    text: content\n                }\n            }, {\n                type: 'divider'\n            }, {\n                type: 'context',\n                elements: [\n                    {\n                        type: 'image',\n                        image_url: 'https://www.labradorcms.com/view-resources/baseview/public/common/icons/labrador_logo.png',\n                        alt_text: 'Labrador CMS logo'\n                    },\n                    {\n                        type: 'mrkdwn',\n                        text: 'Powered by <https://labradorcms.com|Labrador CMS>'\n                    }\n                ]\n            }]\n        };\n\n        return new Promise((resolve, reject) => {\n            fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(payload)\n            }).then((res) => {\n                if (!res.ok) {\n                    throw new Error(`Server error ${ res.status }`);\n                }\n                resolve(res.text());\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n}\n","/**\n * Slack Notifier plugin for Labrador CMS\n * ©️ Labrador CMS AS\n */\n\nimport { Notifier } from './Notifier.js';\n\nexport default {\n    name: 'Slack Notifier',\n    description: 'Send a message to a Slack when a page is published',\n    version: '1.0.0',\n    predicate: (api) => api.v1.config.get('plugins.slack_notifier.enable'),\n    entry: class {\n\n        onReady(api) {\n            this.api = api;\n            this.notifier = new Notifier(api, api.v1.config.get('plugins.slack_notifier.options'));\n        }\n\n    }\n\n};\n","import Subrite from './subrite.js';\n\nexport default {\n    name: 'Subrite',\n    description: 'Push message to app using Subrite',\n    version: '1.0.0',\n    predicate: (api) => api.v1.config.get('plugins.subrite.active'),\n    entry: class {\n\n        onReady(api) {\n            api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/subrite/subrite-main.css');\n\n            let subriteInstance = null;\n\n            const btn = api.v1.util.dom.renderTemplate('<li class=\"lab-item lab-btn labicon-subrite\" title=\"Subrite\"></li>', {}, true);\n            document.querySelector('#labrador-menu ul li.lab-menulist ul').appendChild(btn);\n            btn.addEventListener('click', (event) => {\n                const config = api.v1.config.get('plugins.subrite');\n\n                if (!subriteInstance) {\n                    subriteInstance = new Subrite();\n                    subriteInstance.onReady(api, config);\n                }\n                subriteInstance.showPushModal();\n            }, false);\n        }\n\n    }\n};\n","export default class {\n\n    constructor() {\n        this.api = null;\n        this.config = null;\n        this.keyEvent = null;\n    }\n\n    onReady(api, config) {\n        this.api = api;\n        this.config = config;\n        this.start();\n    }\n\n    start() {\n        if (this.api && this.config.active) {\n            this.keyEvent = this.api.v1.util.keyEventHandler.add({\n                key: 'u',\n                callback: () => this.showPushModal(),\n                controlkeys: ['labCtrlKey', 'shiftKey'],\n                overrideDisable: false\n            });\n        }\n    }\n\n    stop() {\n        if (this.api) {\n            this.api.v1.util.keyEventHandler.remove(this.keyEvent);\n        }\n    }\n\n    stripHtmlTags(html) {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = html;\n        return tempDiv.textContent;\n    }\n\n    showPushModal() {\n        const pageData = this.getPageData();\n        const titleText = this.stripHtmlTags(pageData.title || '');\n        const subtitleText = this.stripHtmlTags(pageData.subtitle || '');\n\n        this.api.v1.ui.modal.dialog({\n            content: {\n                title: 'Send Subrite Push Notification',\n                description: `\n                    <div class=\"lab-formgroup\">\n                        <div class=\"lab-formgroup-item\">\n                            <label for=\"subriteTitle\">Title</label>\n                            <input type=\"text\" id=\"subriteTitle\" class=\"lab-input\" value=\"${ this.config.defaultTitle || titleText  || '' }\">\n                        </div>\n                        <div class=\"lab-formgroup-item\">\n                            <label for=\"subriteBody\">Body</label>\n                            <textarea id=\"subriteBody\" class=\"lab-input\">${ this.config.defaultMessage || subtitleText || '' }</textarea>\n                        </div>\n                    </div>\n                `\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Cancel',\n                        id: 'cancel_button',\n                        highlight: false\n                    },\n                    {\n                        value: 'Send Push',\n                        type: 'submit',\n                        highlight: true\n                    }\n                ]\n            },\n            eventHandlers: [{\n                selector: '#cancel_button',\n                event: 'click',\n                callback: (modal, event) => {\n                    modal.close();\n                }\n            }],\n            callbacks: {\n                submit: () => {\n                    const title = document.getElementById('subriteTitle').value;\n                    const body = document.getElementById('subriteBody').value;\n                    this.publish(title, body);\n                }\n            }\n        });\n    }\n\n    getPageData() {\n        const root = this.api.v1.model.query.getRootModel();\n        const site = this.api.v1.site.getSite();\n        return {\n            type: root.get('type'),\n            id: root.get('id'),\n            tags: root.get('tags'),\n            section: root.get('primaryTags.section'),\n            title: root.get('fields.title'),\n            subtitle: root.get('fields.subtitle'),\n            url: (this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url')) + root.get('fields.published_url'),\n            status: root.get('status'),\n            visibility_status: root.get('fields.visibility_status'),\n            publishhidden: root.get('fields.publishhidden'),\n            site: {\n                alias: site.alias\n            }\n        };\n    }\n\n    publish(customTitle, customBody) {\n        const pageData = this.getPageData();\n\n        if (pageData.visibility_status === 'P' && pageData.publishhidden !== '1') {\n            const data = {\n                title: customTitle,\n                body: customBody,\n                data: {\n                    url: pageData.url\n                },\n                topics: pageData.tags\n            };\n\n            Sys.logger.debug('[Subrite]: Sending push message...');\n\n            const formData = new FormData();\n            const payload = {\n                site: pageData.site.alias,\n                request_url: 'https://api.subrite.no/api/v1/app-push/pushcontent',\n                data: JSON.stringify(data)\n            };\n            formData.append('payload', JSON.stringify(payload));\n\n            this.api.v1.util.httpClient.request(\n                '/ajax/subrite/post',\n                {\n                    method: 'POST',\n                    body: formData\n                }\n            ).then((response) => response).then((responseData) => {\n                if ((responseData && responseData.status !== 'created') || responseData === '') {\n                    const errorMessage = `Contact us the error persists.<br>\n                    <b>Status response:</b> ${ JSON.stringify(responseData) || 'Push notification failed' }`;\n\n                    return Promise.reject(new Error(errorMessage));\n                }\n\n                Sys.logger.debug('[Subrite]: Successfully sent push message.');\n                this.showResultModal('Success!', 'Push notification sent successfully!', false);\n            }).catch((error) => {\n                Sys.logger.error('[Subrite]: Failed to send push message.', error);\n                const errorMessage = (error.message ? `<br>\\n\\n${  error.message }` : '');\n\n                this.showResultModal('Error - Push request failed!', errorMessage, true);\n            });\n        } else {\n            Sys.logger.warn('[Subrite]: Page not published visibly, failed to send push message.');\n            this.showResultModal('Error', 'Page must be published and visible to send push notifications.', true);\n        }\n    }\n\n    showResultModal(title, message, isError) {\n        this.api.v1.ui.modal.dialog({\n            container: {\n                state: isError ? 'error' : 'success'\n            },\n            content: {\n                title,\n                description: message\n            },\n            footer: {\n                buttons: [\n                    {\n                        type: 'submit',\n                        value: 'OK',\n                        highlight: true\n                    }\n                ]\n            }\n        });\n    }\n\n}\n","export default {\n    name: 'Tansa',\n    description: 'Proofreading from Tansa',\n    version: '1.0.1',\n    predicate: (api) => (api.v1.model.root.getType() === 'page_article' || api.v1.model.root.getType() === 'page_notice') && api.v1.config.get('tansa.active'),\n    entry: class {\n\n        onReady(api) {\n            api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/tansa/tansa-main.css');\n\n            // Add Tansa-attribute to iframe:\n            document.querySelector('iframe[data-lab-viewport=\"desktop\"]').setAttribute('tansa-proofing', 'true');\n\n            let tansaInstance = null;\n\n            const btn = api.v1.util.dom.renderTemplate('<li class=\"lab-item lab-btn labicon-tansa\" title=\"Tansa\"></li>', {}, true);\n            document.querySelector('#labrador-menu ul li.lab-menulist ul').appendChild(btn);\n            btn.addEventListener('click', (event) => {\n                const config = api.v1.config.get('tansa');\n                if (!config.licenseKey || !config.baseUrl) {\n                    Sys.logger.warn('[Tansa] Required config \"licenseKey\" or \"baseUrl\" missing. Tansa will not run.');\n                    api.v1.ui.modal.dialog({\n                        container: { state: { warning: true } },\n                        content: {\n                            title: 'Tansa not configured',\n                            description: 'Required config \"licenseKey\" or \"baseUrl\" missing. Tansa will not run.<br>Set up Tansa in the <a href=\"/settings/cp?page=tansa\" target=\"_blank\">admin-page</a>.'\n                        },\n                        footer: {\n                            buttons: [\n                                {\n                                    type: 'submit',\n                                    value: 'OK',\n                                    highlight: true\n                                }\n                            ]\n                        }\n                    });\n                    return;\n                }\n\n                const elements = api.v1.util.defaults.object(config.elements, {\n                    kicker: true, title: true, subtitle: true, bodytext: true, images: true, factboxes: true, articles: true\n                });\n                const targets = [];\n                // Add entry to the array. Each entry will be a target for Tansa and the text value of each path will be spellchecked.\n                // If dispatchEvent is true, the element will be updated when Tansa is done using connected text tool.\n                // If false (default), the element will be updated using standard set method.\n                const pusher = (model, domModel, selector, path, dispatchEvent = false) => {\n                    targets.push({\n                        model, domModel, selector, dispatchEvent, value: '', path\n                    });\n                };\n                if (elements.kicker) {\n                    pusher(api.v1.model.query.getModelByType('articleHeader'), null, '.kicker', 'fields.kicker');\n                }\n                if (elements.title) {\n                    pusher(api.v1.model.query.getModelByType('articleHeader') || api.v1.model.query.getModelByType('noticeHeader'), null, '.headline', 'fields.title');\n                }\n                if (elements.subtitle) {\n                    pusher(api.v1.model.query.getModelByType('articleHeader'), null, '.subtitle', 'fields.subtitle');\n                }\n                if (elements.images) {\n                    const topImage = api.v1.model.query.getModelByPath('articleHeader/image');\n                    const images = api.v1.model.query.getModelsByPath('bodytext/image');\n                    if (topImage) {\n                        // Caption is edited by the articleHeader, not the image itself:\n                        pusher(topImage, topImage.getParent(), 'figcaption[itemprop=\"caption\"]', 'fields.imageCaption');\n                        pusher(topImage, topImage.getParent(), 'figcaption[itemprop=\"author\"]', 'fields.byline');\n                    }\n                    for (const image of images) {\n                        pusher(image, null, 'figcaption[itemprop=\"caption\"]', 'fields.imageCaption');\n                        pusher(image, null, 'figcaption[itemprop=\"author\"]', 'fields.byline');\n                    }\n                }\n                if (elements.articles) {\n                    const articleTeasers = api.v1.model.query.getModelsByPath('bodytext/article');\n                    for (const article of articleTeasers) {\n                        pusher(article, null, '.headline', 'fields.title');\n                        pusher(article, null, '.subtitle', 'fields.subtitle');\n                        pusher(article, null, '.kicker', 'fields.kicker');\n                        const image = api.v1.model.query.getChildOfType(article, 'image');\n                        if (image) {\n                            pusher(image, article, 'figcaption[itemprop=\"caption\"]', 'fields.imageCaption');\n                            pusher(image, article, 'figcaption[itemprop=\"author\"]', 'fields.byline');\n                        }\n                    }\n                }\n                if (elements.factboxes) {\n                    const factboxes = api.v1.model.query.getModelsByPath('bodytext/factbox');\n                    for (const factbox of factboxes) {\n                        pusher(factbox, null, 'h2', 'fields.title');\n                        pusher(factbox, null, '.fact', 'fields.bodytext', true);\n                    }\n                }\n                // Note: Add after other child-elements requiring dispatchEvent=true (factbox).\n                if (elements.bodytext) {\n                    pusher(api.v1.model.query.getModelByType('bodytext'), null, null, 'fields.bodytext', true);\n                }\n\n                const addedConfig = {\n                    ...config,\n                    clientExtenstionJs: 'tansa4ClientExtensionSimple.js',\n                    userId: api.v1.user.getUserEmail(),\n                    parentAppId: 'ed527f00-6109-11ed-b10c-5974977ab271',\n                    parentAppVersion: '',\n                    requireProofingAttribute: 'true'\n                };\n\n                if (tansaInstance) {\n                    const rect = btn.getBoundingClientRect();\n                    tansaInstance.load(targets, addedConfig, rect);\n                    return;\n                }\n\n                import('./tansa.js').then((module) => {\n                    const rect = btn.getBoundingClientRect();\n                    tansaInstance = module.tansa;\n                    module.tansa.load(targets, addedConfig, rect);\n                }).catch((error) => {\n                    Sys.logger.warn(`Error loading Tansa-functionality: ${ error }`);\n                });\n            }, false);\n        }\n\n    }\n};\n","export const tansa = {\n\n    // settings: {\n    //     baseUrl: 'https://kommune.tansa.com/tansaclient/',   // Settes i admin\n    //     licenseKey: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',  // Settes i admin\n    //     userId: '<user-email>',\n    //     clientExtenstionJs: 'tansa4ClientExtensionSimple.js',\n    //     parentAppId: 'ed527f00-6109-11ed-b10c-5974977ab271', // Labrador CMS\n    //     parentAppVersion: '',\n    //     requireProofingAttribute: 'true'                     // Kjører kun kontroll på dom-elementer med 'tansa-proofing=\"true\"'\n    // }\n    load: (targets, settings, rect) => {\n        // Required by Tansa to position the menu:\n        const btn = document.querySelector('#tansa-menu-section') || lab_api.v1.util.dom.renderTemplate(`<div id=\"tansa-menu-section\">\n            <input id=\"content_tansaButton\" type=\"button\" value=\"Display Tansa-menu\">\n        </div>`, {}, true);\n        btn.setAttribute('style', `position:fixed; top: ${ rect.top - 20 }px; left: ${ rect.left }px; height:0;`);\n        document.body.appendChild(btn);\n        for (const item of targets) {\n            const domElement = tansa.getDomElement(item);\n            if (domElement) {\n                domElement.setAttribute('tansa-proofing', 'true');\n            }\n        }\n        document.defaultView.tansa4ClientExtensionPlugin = {\n            replaceText: (tansaReplaceTextFunRef, index, startPos, endPos, replacement, occurrenceNo, textToReplace) => {\n                tansaReplaceTextFunRef();\n                document.defaultView.tansa.hasModifications = true;\n            }\n        };\n        const tansaLoaderScript = document.getElementById('tansaLoaderScript');\n        if (!tansaLoaderScript) {\n            document.defaultView.tansa = {\n                settings\n            };\n            document.defaultView.beforeProofing = () => {\n                document.defaultView.tansa.hasModifications = false;\n            };\n            document.defaultView.afterProofing = (cancelled) => {\n                if (document.defaultView.tansa.hasModifications) {\n                    document.defaultView.tansa.hasModifications = false;\n                    tansa.save(targets);\n                }\n            };\n            const script = document.createElement('script');\n            script.src = `${ settings.baseUrl }initTansaLoader.js?${ new Date().getTime() }`;\n            document.querySelector('head').appendChild(script);\n        } else if (document.defaultView.tansa4ClientExtension && typeof document.defaultView.tansa4ClientExtension.initMenu === 'function') {\n            document.defaultView.tansa4ClientExtension.initMenu();\n        } else {\n            console.warn('[Tansa] Error: tansa4ClientExtension missing/incomplete.');\n        }\n    },\n\n    getDomElement(item) {\n        if (!item.model && !item.domModel) {\n            return null;\n        }\n        const view = lab_api.v1.view.getView(item.domModel || item.model);\n        const markup = view.getMarkup();\n        return item.selector ? markup.querySelector(item.selector) : markup;\n    },\n\n    save: (targets) => {\n        for (const item of targets) {\n            const domElement = tansa.getDomElement(item);\n            if (domElement && !domElement.classList.contains('lab-defaultTextValue')) {\n                item.value = domElement.innerHTML;\n            }\n        }\n        for (const item of targets) {\n            tansa.saveTarget(item);\n        }\n        lab_api.v1.app.save();\n    },\n\n    saveTarget: (item) => {\n        if (!item.dispatchEvent) {\n            // Use standard set method for models:\n            const view = lab_api.v1.view.getView(item.model);\n            view.set(item.path, item.value, true);\n        } else {\n            setTimeout(() => {\n                // Dispatch click and blur events to trigger the model update through connected text tool.\n                // This ensures that logic for removing DOM of child elements etc. (bodytext) are run.\n                const domElement = tansa.getDomElement(item);\n                if (!domElement) { return; }\n                domElement.innerHTML = item.value;\n                domElement.dispatchEvent(new Event('click'));\n                setTimeout(() => {\n                    domElement.dispatchEvent(new Event('blur'));\n                }, 100);\n            }, 200);\n        }\n    }\n\n};\n","export class Field {\n\n    constructor(data, value) {\n        this.path = data.path;\n        this.name = data.name;\n        this.label = data.label;\n        this.value = value;\n        this.archive = [];\n        if (value) {\n            this.archive.push(value);\n        }\n        this.index = 0;\n        this.active = true;\n        this.ui = {};\n    }\n\n    setKey(key, value) {\n        this[key] = value;\n    }\n\n    setValue(value) {\n        if (value && !this.archive.includes(value)) {\n            this.archive.push(value);\n        }\n        this.value = value;\n        this.index = this.archive.indexOf(value) || 0;\n        this.updateUI();\n    }\n\n    updateValue(value) {\n        if (value && !this.archive.includes(value)) {\n            this.setValue(value);\n        }\n    }\n\n    navigate(steps) {\n        const index = this.index + steps;\n        if (index >= this.archive.length) {\n            return;\n        }\n        if (index < 0) {\n            return;\n        }\n        this.setValue(this.archive[index]);\n    }\n\n    updateUI() {\n        if (!this.ui.element) { return; }\n        this.ui.element.value = this.value;\n        this.ui.nav.labelLeft.textContent = this.index + 1;\n        this.ui.nav.labelRight.textContent = this.archive.length;\n    }\n\n}\n","/**\n * Group\n * Holds a prompt for one or more fields\n */\n\nimport { Field } from './Field.js';\n\nexport class Group {\n\n    /*\n    {\n        \"name\": \"title_subtitle\",\n        \"label\": \"Title / subtitle\",\n        \"prompt\": \"Act as a professional reporter working as online frontpage editor. Your goal is to maximize traffic to your story, without producing clickbait. Writing style: {{ style }}. Writing Tone: {{ tone }}. Return a JSON-object with text in same language as input text in this format: { \\\"title\\\": \\\"A highly readable title of the article optimized for teasing visitors to read the article, maximum 8 words\\\", \\\"subtitle\\\": \\\"One sentence abstract of the article, that works well with the title\\\" }\",\n        \"active\": true,\n        \"items\": [{\n            \"path\": \"fields.title\",\n            \"name\": \"title\"\n        }, {\n            \"path\": \"fields.subtitle\",\n            \"name\": \"subtitle\"\n        }]\n    }\n    */\n\n    constructor(data, getter) {\n        this.name = data.name;\n        this.label = data.label;\n        this.prompt = data.prompt;\n        this.showOnPanel = data.showOnPanel;\n        this.active = data.active;\n        this.fields = (data.fields || []).map((field) => new Field(field, getter(field.path)));\n        this.ui = {};\n    }\n\n    setKey(key, value) {\n        this[key] = value;\n    }\n\n}\n","import { Group } from './Group.js';\nimport contentLanguages from '../../lib/helpers/ContentLanguages.js';\n\nimport asideTemplate from './aside.js';\n\nexport const FACTBOX_TYPES = {\n    SUMMARY: 'summary',\n    BULLETPOINTS: 'bulletpoints'\n};\n\nexport class Manager {\n\n    constructor(api, model, config = {}) {\n        this.api = api;\n        this.rootModel = this.api.v1.model.query.getRootModel();\n\n        this.model = model;\n        this.state = {\n            uiReady: false,\n            cssLoaded: false\n        };\n        this.settings = {\n            minLength: 500\n        };\n        this.writingStyles = Array.isArray(config.writingStyles) ? config.writingStyles : [];\n        this.writingTones = Array.isArray(config.writingTones) ? config.writingTones : [];\n        this.modal = null;\n        this.menuItem = null;\n        this.userSettings = null;\n        this.getter = this.getFieldValue.bind(this);\n        this.groups = this.setupGroups(Array.isArray(config.content) ? config.content : []);\n        this.factboxPrompts = config.factbox.prompts;\n        this.paths = this.resolvePaths();\n        this.language = 'the same language as the provided article';\n    }\n\n    setupLanguage() {\n        let { language } = this;\n\n        // Get site language\n        this.languageCode = this.api.v1.config.get('contentLanguage');\n        if (this.languageCode) {\n            for (const contentLanguage of contentLanguages) {\n                if (contentLanguage.code === this.languageCode) {\n                    language = contentLanguage.name;\n                }\n            }\n        }\n\n        // Get seo language\n        const seolanguageCode = this.rootModel.get('fields.seolanguage');\n        if (seolanguageCode) {\n            for (const contentLanguage of contentLanguages) {\n                if (contentLanguage.code === seolanguageCode) {\n                    language = contentLanguage.name;\n                }\n            }\n        }\n        return language;\n    }\n\n    resolvePaths() {\n        const result = {};\n        for (const group of this.groups) {\n            for (const field of group.fields) {\n                result[field.path] = {\n                    group,\n                    field\n                };\n            }\n        }\n        return result;\n    }\n\n    // (object) { group, field }\n    getGroupObjectByPath(path) {\n        return this.paths[path] || {};\n    }\n\n    // (Group)\n    getGroupByName(name) {\n        for (const group of this.groups) {\n            if (group.name === name) {\n                return group;\n            }\n        }\n        return null;\n    }\n\n    // (Promise) Resolves a string with a value for specified path\n    fetchByPath(path, { tone, style } = {}, aiSettings = {}) {\n        return new Promise((resolve, reject) => {\n            const { group, field } = this.getGroupObjectByPath(path);\n            if (!group || !field) {\n                reject(new Error(`Missing required group/field for path \"${ path }\".`));\n                return;\n            }\n            this.fetchByGroup(group, [field], { tone, style }, aiSettings, true).then((values) => {\n                resolve(values[path]);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    // (Promise) Resolves an object with paths and values\n    fetchByName(name, { tone, style } = {}, aiSettings = {}) {\n        return new Promise((resolve, reject) => {\n            const group = this.getGroupByName(name);\n\n            if (!group) {\n                reject(new Error(`Missing required group by name \"${ name }\".`));\n                return;\n            }\n            this.fetchByGroup(group, group.fields, { tone, style }, aiSettings, true).then((values) => {\n                resolve(values);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    fetchByGroupName(name, aiSettings = { model: 'gpt-4o' }, options = {}, retryFetch = false) {\n        console.log('FETCH BY GROUP NAME');\n        return new Promise((resolve, reject) => {\n            const dataOptions = options;\n            const group = this.getGroupByName(name);\n            if (['title_subtitle', 'some_content', 'tags', 'seo_content', 'paywallSalesPitch'].includes(name)) {\n                const params = { featureName: name };\n                lab_api.v1.ns.get('textAssistant.generateContent')(this.rootModel, null, null, params);\n\n            }\n            if (!group) {\n                reject(new Error(`Missing required group by name \"${ name }\".`));\n                return;\n            }\n\n            if (!group) {\n                reject(new Error(`Missing required group`));\n                return;\n            }\n            if (!dataOptions.language) {\n                dataOptions.language = this.setupLanguage();\n            }\n            const prompt = `${ this.api.v1.util.dom.renderTemplate(group.prompt, dataOptions) }`;\n            console.log('Prompt: ', prompt);\n            this.api.v1.generate.text({\n                prompt, service: 'chatCompletions', model: aiSettings.model, paths: group.fields.map((field) => field.path)\n            }).then((result) => {\n                resolve(result);\n            }).catch((error) => {\n                console.log('[TextAssistant] Error fetching suggestions: ', error);\n                if (retryFetch === true) {\n                    console.log('[TextAssistant] Attempting to retry a new fetch');\n\n                    this.fetchByGroupName(name, aiSettings, options, false);\n                } else {\n                    reject(error);\n                }\n            });\n        });\n    }\n\n    fetchByGroup(group, fields, { tone, style } = {}, aiSettings = { model: 'gpt-4o' }, retryFetch = false) {\n        console.log('FETCH BY GROUP');\n        return new Promise((resolve, reject) => {\n            const bodytext = this.getBodytext();\n            if (!bodytext) {\n                resolve({});\n                return;\n            }\n            if (!group || !fields.length) {\n                reject(new Error(`Missing required group/fields`));\n                return;\n            }\n            /*\n            if (!fields.filter((field) => field.active).length) {\n                resolve({});\n                return;\n            }\n\n            if (group.active === false) {\n                resolve({});\n                return;\n            } */\n            if (['title_subtitle', 'some_content', 'tags', 'seo_content', 'paywallSalesPitch'].includes(group.name)) {\n                const params = {\n                    featureName: group.name,\n                    updateModel: false\n                };\n                lab_api.v1.ns.get('textAssistant.generateContent')(this.rootModel, null, null, params)\n                    .then((result) => {\n                        const values = this.update(result, fields);\n                        resolve(values);\n                    }).catch((error) => {\n                        console.log('[TextAssistant] Error fetching suggestions: ', error);\n                        reject(error);\n                    });\n\n            } else {\n                const language = this.setupLanguage();\n\n                const prompt = `${ this.api.v1.util.dom.renderTemplate(group.prompt, {\n                    style, tone, bodytext, language\n                }) }`;\n                this.api.v1.generate.text({\n                    prompt, service: 'chatCompletions', model: aiSettings.model, paths: fields.map((field) => field.path)\n                }).then((result) => {\n                    const values = this.update(result, fields);\n                    resolve(values);\n                }).catch((error) => {\n                    if (retryFetch === true) {\n                        this.fetchByGroup(group, fields, { tone, style }, aiSettings, false);\n                    } else {\n                        reject(error);\n                    }\n                    reject(error);\n                });\n            }\n\n        });\n    }\n\n    generateCaption(nodeModel, view, aiSettings = { model: 'gpt-4o' }, retry = false) {\n\n        let imageModel = nodeModel;\n        if (nodeModel.getType() !== 'image') {\n            imageModel = lab_api.v1.model.query.getChildOfType(nodeModel, 'image');\n        }\n        if (!imageModel) {\n            Sys.logger.warn('Neither current model nor children of model has type \"image\". A generated caption cannot be stored.');\n            return;\n        }\n\n        const bodytext = this.getBodytext();\n        const url = imageModel.get('filtered.viewport_list.desktop.url') || imageModel.get('filtered.viewport_list.mobile.url') || '';\n        const domainUrl = url.substring(0, url.indexOf('?') + 1);\n        const imageUrl = `${ domainUrl }width=1000`;\n        const imageCaption = imageModel.get('fields.imageCaption');\n        const group = this.getGroupByName('image_caption');\n        const language = this.setupLanguage();\n\n        const elements = [...view.markup.querySelectorAll(`[data-lab-editable-path='fields.imageCaption']`)];\n        for (const element of elements) {\n            element.classList.add('lab-busy', 'lab-busy-top');\n        }\n\n        const promptString = `${ this.api.v1.util.dom.renderTemplate(group.prompt, {\n            bodytext, imageCaption, language, imageUrl\n        }) }`;\n\n        // Prompt - Gpt-4-vision-documentation: https://platform.openai.com/docs/guides/vision?lang=curl\n        const prompt = [\n            {\n                type: 'text',\n                text: promptString\n            },\n            {\n                type: 'image_url',\n                image_url: {\n                    url: imageUrl\n                }\n            }\n        ];\n\n        // Request image caption from openAi\n        this.api.v1.generate.text({\n            prompt, service: 'chatCompletions', model: aiSettings.model, paths: 'imageCaption', role: 'user'\n        }).then((result) => {\n            let generatedData = this.cleanUpJsonString(result);\n            try {\n                generatedData = JSON.parse(generatedData);\n            } catch (error) {\n                console.warn('Error parsing json-string: ', error);\n                if (retry === true) {\n                    console.log('Attempting to retry fetching');\n                    this.generateCaption(nodeModel, view, aiSettings, false);\n                }\n            }\n\n            // Update caption\n            const originalCaption = imageModel.get('fields.imageCaption') || '';\n            let newCaption = generatedData.caption;\n            if (generatedData.keyword && generatedData.keyword.length > 0) {\n                newCaption = `${ generatedData.keyword.toUpperCase().trim() }: ${ generatedData.caption.trim() }`;\n            }\n            if (newCaption) {\n                imageModel.set('fields.imageCaption', newCaption);\n            }\n\n            // Update byline\n            if (generatedData.byline && generatedData.byline.length > 0 && originalCaption.includes(generatedData.byline)) {\n                const byline = imageModel.get('fields.byline');\n                if (!byline || byline.length === 0) {\n                    imageModel.set('fields.byline', generatedData.byline);\n                }\n            }\n            // Remove class lab-busy\n            for (const element of elements) {\n                element.classList.remove('lab-busy', 'lab-busy-top');\n            }\n        }).catch((error) => {\n            // Remove class lab-busy\n            for (const element of elements) {\n                element.classList.remove('lab-busy', 'lab-busy-top');\n            }\n            console.warn('[TextAssistant] Error fetching suggestions: ', error);\n            if (retry === true) {\n                console.log('Attempting to retry fetching');\n                this.generateCaption(nodeModel, view, aiSettings, false);\n            }\n        });\n    }\n\n    // (Promise)\n    uiFetchByGroup(group, fields) {\n        return new Promise((resolve, reject) => {\n            const tone = this.getUserSetting('writingTone');\n            const style = this.getUserSetting('writingStyle');\n            if (group.ui.refresh) {\n                group.ui.refresh.classList.add('lab-disabled', 'lab-busy');\n            }\n            this.fetchByGroup(group, fields, { tone, style }).then((values) => {\n                if (group.ui.refresh) {\n                    group.ui.refresh.classList.remove('lab-disabled', 'lab-busy');\n                }\n                resolve(values);\n            }).catch((error) => {\n                if (group.ui.refresh) {\n                    group.ui.refresh.classList.remove('lab-disabled', 'lab-busy');\n                }\n                console.log('error: ', error);\n                reject(error);\n            });\n        });\n    }\n\n    // (Promise) Resolves an array of objects containing keys and values of suggestions\n    uiFetchAll() {\n        return new Promise((resolve, reject) => {\n            const promises = this.groups.map((group) => this.uiFetchByGroup(group, group.fields));\n            Promise.all(promises).then((results) => {\n                resolve(results);\n            }).catch((error) => {\n                console.log('error: ', error);\n                reject(error);\n            });\n        });\n    }\n\n    setupGroups(data) {\n        return data.map((group) => new Group(group, this.getter));\n    }\n\n    setupUIForGroup(group) {\n        for (const field of group.fields) {\n            this.setupUIForField(field, group);\n        }\n        const ui = {\n            container: this.api.v1.util.dom.renderTemplate(`<div class=\"lab-formgroup lab-grid-large-2 lab-grid-small-12 lab-align-right\">\n                <span data-group=\"${ group.name }\" class=\"lab-btn lab-generate\" title=\"Generate suggestion for ${ group.label }\" style=\"margin-top:50px; position:relative;\">Generate</span>\n            </div>`, {}, true),\n            refresh: null\n        };\n        ui.refresh = ui.container.querySelector('[data-group]');\n        ui.refresh.addEventListener('click', (event) => {\n            this.uiFetchByGroup(group, group.fields);\n        });\n        group.setKey('ui', ui);\n    }\n\n    setupUIForField(field, group) {\n        const result = {\n            nav: {}\n        };\n        const active = this.getUserSetting(`${ field.name }.active`) !== false;\n        field.setKey('active', active);\n        const size = 10 / group.fields.length;\n        result.container = this.api.v1.util.dom.renderTemplate(`<div class=\"lab-formgroup lab-grid-large-${ size } lab-grid-small-12\">\n            <div class=\"lab-formgroup-item\">\n                <div class=\"lab-grid lab-valign-center\" style=\"float:right; margin-top: -8px;\">\n                    <div class=\"lab-grid lab-valign-center\">\n                        <span class=\"nav-left lab-btn lab-text lab-small labicon-arrow_left\"></span> &nbsp;\n                        <span class=\"nav-index-left\">0</span> / <span class=\"nav-index-right\">${ field.archive.length }</span> &nbsp;\n                        <span class=\"nav-right lab-btn lab-text lab-small labicon-arrow_right\"></span>\n                    </div>\n                    <span class=\"settings-btn lab-btn lab-small\" title=\"Settings\" style=\"margin-right:0.3em; margin-left:0.3em;\">Settings</span>\n                    <span class=\"insert-btn lab-btn lab-small\" title=\"Insert ${ field.label } on page\">Insert</span>\n                </div>\n                <label for=\"completion-element-${ field.path }\"><b>${ field.label }</b></label>\n                <textarea name=\"${ field.path }\">${ field.value }</textarea>\n            </div>\n        </div>`, {}, true);\n\n        result.checkbox = this.api.v1.util.dom.renderTemplate(`<p class=\"lab-para\"><label>${ field.label } <input type=\"checkbox\" title=\"Use field ${ field.name }\" name=\"${ field.path }-active\" style=\"float:left;\" ${ active ? 'checked=\"checked\"' : '' }></label></p>`, {}, true);\n        result.nav.left = result.container.querySelector('.nav-left');\n        result.nav.labelLeft = result.container.querySelector('.nav-index-left');\n        result.nav.right = result.container.querySelector('.nav-right');\n        result.nav.labelRight = result.container.querySelector('.nav-index-right');\n        const insertBtn = result.container.querySelector('.insert-btn');\n        const settingsBtn = result.container.querySelector('.settings-btn');\n        settingsBtn.addEventListener('click', (event) => {\n            const params = {\n                featureName: group.name,\n                disableGenerateButton: true\n            };\n            this.api.v1.ns.get('textAssistant.openFeatureSettings')(this.rootModel, null, null, params);\n        });\n\n        result.element = result.container.querySelector('textarea');\n        result.checkbox.querySelector('input').addEventListener('change', (event) => {\n            field.setKey('active', event.currentTarget.checked);\n            if (event.currentTarget.checked) {\n                result.element.removeAttribute('disabled');\n            } else {\n                result.element.setAttribute('disabled', 'disabled');\n            }\n            this.setUserSetting(`${ field.name }.active`, event.currentTarget.checked);\n        });\n\n        // Listeners\n        result.element.addEventListener('change', (event) => {\n            field.setValue(event.currentTarget.value.trim());\n        });\n        insertBtn.addEventListener('click', (event) => {\n            this.useCurrent(false, [field], false);\n        });\n\n        result.nav.left.addEventListener('click', (event) => {\n            field.navigate(-1);\n        });\n        result.nav.right.addEventListener('click', (event) => {\n            field.navigate(1);\n        });\n\n        field.setKey('ui', result);\n        field.setValue(field.value);\n    }\n\n    getUserSetting(path) {\n        if (this.userSettings === null) {\n            const pluginSettings = this.api.v1.user.getField('plugin') || {};\n            this.userSettings = pluginSettings.textassistant || {};\n        }\n        return this.api.v1.util.object.get(path, this.userSettings, true);\n    }\n\n    setUserSetting(path, value) {\n        this.api.v1.util.object.set(path, value, this.userSettings);\n        const current = this.api.v1.user.getField('plugin') || {};\n        current.textassistant = this.userSettings;\n        this.api.v1.user.setField('plugin', { ...current });\n    }\n\n    // (Object)\n    update(txt, fields) {\n        if (txt) {\n            try {\n                // May return '{ ... }' or something like 'Json-object: { ... }'\n                const jsonString = this.cleanUpJsonString(txt);\n\n                const result = JSON.parse(jsonString);\n                const pathResult = {};\n                for (const field of fields) {\n                    if (result[field.name]) {\n                        let value = result[field.name] || '';\n                        if (field.name === 'tags') {\n                            value = [...result[field.name]];\n                            const primaryTags = this.model.get('primaryTags');\n                            if (primaryTags && primaryTags.section) {\n                                value.push(primaryTags.section);\n\n                            }\n                        }\n                        field.setValue(value);\n                        pathResult[field.path] = value;\n                    }\n                }\n                return pathResult;\n            } catch (error) {\n                console.warn('Error parsing json-string: ', error);\n            }\n        }\n        return {};\n    }\n\n    cleanUpJsonString(data) {\n        let jsonString = data.trim();\n\n        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {\n            jsonString = jsonString.substring(jsonString.indexOf('{'));\n        }\n\n        if (!jsonString.includes('{')) {\n            jsonString = `{${ jsonString }`;\n        }\n\n        if (!jsonString.includes('}')) {\n            jsonString = `${ jsonString }}`;\n        }\n\n        // Test to choose the correct '}'. Ignore '}' with '\\' ahead\n        if (jsonString.match(/}/g).length > 1) {\n            jsonString = jsonString.match(/(.|\\n)*?(?<!\\\\)}/);\n        }\n\n        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {\n            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);\n        }\n\n        jsonString = jsonString.trim();\n        return jsonString;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getBodytext() {\n        return this.api.v1.util.string.stripTags(this.model.get('fields.bodytext') || '', ' ');\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    allowSuggestion() {\n        return this.getBodytext().length > this.settings.minLength;\n    }\n\n    getFieldValue(field) {\n        const value = this.model.get(field);\n        if (!value) {\n            return '';\n        }\n        if (typeof value === 'string') {\n            return this.api.v1.util.string.stripTags(value);\n        }\n        return value;\n    }\n\n    hasFieldValue(field) {\n        const value = this.model.get(field.path);\n        if (!value) {\n            return false;\n        }\n        if (field.name === 'tags') {\n            return false;\n        } // Ignore existing tags\n        return true;\n    }\n\n    // (bool)\n    hasPath(path) {\n        for (const group of this.groups) {\n            for (const field of group.fields) {\n                if (field.path === path) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    useCurrent(checkCurrent, inputFields = [], closeModal = true) {\n        const fields = inputFields || [];\n        if (!fields.length) {\n            for (const group of this.groups) {\n                fields.push(...group.fields);\n            }\n        }\n        for (const field of fields) {\n            if (field.value) {\n                if (!checkCurrent || (checkCurrent && !this.hasFieldValue(field))) {\n                    if (field.name === 'tags') {\n                        const tags = (Array.isArray(field.value) ? field.value : field.value.split(',')).map((tag) => tag.trim().toLowerCase());\n                        const currentTags = this.model.get(field.path) || [];\n                        const newTags = [...currentTags];\n                        for (const tag of tags) {\n                            if (!newTags.includes(tag)) {\n                                newTags.push(tag);\n                            }\n                        }\n                        this.model.set(field.path, newTags);\n                    } else {\n                        this.model.set(field.path, field.value);\n                    }\n                }\n            }\n        }\n        if (closeModal && this.modal) {\n            this.modal.close();\n        }\n    }\n\n    listen() {\n        // Only start auto-suggest for empty articles.\n        if (this.model.get('fields.bodytext')) {\n            return;\n        }\n        const listener = (model, path, value) => {\n            if (value.length > this.settings.minLength) {\n                this.api.v1.model.bindings.unbind(this.model, 'fields.bodytext', listener);\n                this.menuItem = document.querySelector('#labrador-menu .text-completion');\n                if (!this.getUserSetting('auto.enabled')) {\n                    return;\n                }\n                this.uiFetchAll().then((results) => {\n                    if (!this.modal) {\n                        this.useCurrent(true);\n                    }\n                });\n            }\n        };\n        this.api.v1.model.bindings.bind(this.model, 'fields.bodytext', listener);\n    }\n\n    onPaths() {\n        return {\n            'fields.seolanguage': {\n                node: 'fields.seolanguage'\n            }\n        };\n    }\n\n    getDisclaimer() {\n        return `<p class=\"lab-info\"><b>This function in Labrador CMS is using advanced artificial intelligence developed by OpenAI API.</b><br>\n        Text from the article is not used to train or improve the public data models. \n        Use generated text from these functions as suggestions, and be sure to manually verify them. \n        Labrador CMS shall not be held liable for any use of the generated text. \n        For now the use of these functions are covered by your Labrador CMS license. We might change this in the future, when we know more about our operational costs.</p>`;\n    }\n\n    getWritingStylePlaceholder(selectedWritingStyle, callback_method) {\n        let callback = callback_method;\n        if (callback === undefined) {\n            callback = (event) => {\n                this.setUserSetting('writingStyle', event.target.value);\n            };\n        }\n\n        return {\n            element: this.api.v1.ui.element.getSelectElement({\n                value: selectedWritingStyle || this.getUserSetting('writingStyle'),\n                options: [{ value: '', label: 'Default style' }, ...this.writingStyles.map((item) => ({\n                    value: item,\n                    label: item\n                }))],\n                attributes: [{\n                    name: 'id', value: 'completion-writingStyle'\n                }],\n                events: [{\n                    name: 'change',\n                    callback\n                }]\n            }),\n            selector: `.completion-container-style`\n        };\n    }\n\n    getWritingTonePlaceholder(selectedWritingTone, callback_method) {\n        let callback = callback_method;\n        if (callback === undefined) {\n            callback = (event) => {\n                this.setUserSetting('writingTone', event.target.value);\n            };\n        }\n        return {\n            element: this.api.v1.ui.element.getSelectElement({\n                value: selectedWritingTone || this.getUserSetting('writingTone'),\n                options: [{ value: '', label: 'Default tone' }, ...this.writingTones.map((item) => ({\n                    value: item,\n                    label: item\n                }))],\n                attributes: [{\n                    name: 'id', value: 'completion-writingTone'\n                }],\n                events: [{\n                    name: 'change',\n                    callback\n                }]\n            }),\n            selector: `.completion-container-tone`\n        };\n    }\n\n    getLanguageName(languageCode, cleanUp = true) {\n        let language = null;\n\n        // Get name of langauge\n        for (const lang of contentLanguages) {\n            if (lang.code === languageCode) {\n                language = lang.name;\n\n            }\n        }\n\n        // Clean up language name\n        if (language && cleanUp === true) {\n            if (language.includes('-')) {\n                language = language.substring(0, language.indexOf('-'));\n            }\n            if (/\\(.*?\\)/.test(language)) {\n                language = language.replaceAll(/\\(.*?\\)/g, '');\n            }\n            language = language.trim();\n        }\n        language = language.trim();\n        return language;\n    }\n\n    displayUI() {\n        if (!this.state.cssLoaded) {\n            this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/textassistant/textassistant.css');\n            this.state.cssLoaded = true;\n        }\n\n        if (!this.state.uiReady) {\n            for (const group of this.groups) {\n                if (group.showOnPanel === true) {\n                    this.setupUIForGroup(group);\n                }\n\n            }\n            this.state.uiReady = true;\n            this.menuItem = document.querySelector('#labrador-menu .text-completion');\n        } else {\n            // Re-display\n            for (const group of this.groups) {\n                for (const field of group.fields) {\n                    field.updateValue(this.getFieldValue(field.path));\n                }\n            }\n        }\n\n        this.menuItem.classList.remove('lab-selected');\n\n        // const asideItems = [];\n        const placeholders = [];\n        const markup = [];\n        for (const group of this.groups) {\n            if (group.showOnPanel === true) {\n                for (const field of group.fields) {\n                    // asideItems.push({ placeholder: `completion-checkbox-${ field.name }` });\n                    markup.push(`<div class=\"completion-container-${ field.name }\"></div>`);\n                    placeholders.push({ element: field.ui.container, selector: `.completion-container-${ field.name }` });\n                    placeholders.push({ element: field.ui.checkbox, selector: `.completion-checkbox-${ field.name }` });\n                }\n                markup.push(`<div class=\"completion-group-${ group.name }\">ccc</div>`);\n                placeholders.push({ element: group.ui.container, selector: `.completion-group-${ group.name }` });\n            }\n        }\n\n        const disclaimer = this.getDisclaimer();\n\n        this.modal = this.api.v1.ui.modal.dialog({\n            container: {\n                css: 'baseview-textcompletion',\n                width: 1400\n            },\n            content: {\n                header: 'Labrador AI - Content generation',\n                markup: `<div class=\"lab-grid\">${ markup.join('') }${ disclaimer }</div>`\n            },\n            placeholders,\n            eventHandlers: [{\n                selector: '#button-suggest',\n                event: 'click',\n                callback: () => {\n                    this.uiFetchAll();\n                }\n            }, {\n                selector: '#button-insert',\n                event: 'click',\n                callback: () => {\n                    this.useCurrent();\n                }\n            }],\n            callbacks: {\n                didDisplay: (modal) => {\n\n                }\n            },\n            footer: {\n                buttons: [\n                    {\n                        value: 'Generate suggestions',\n                        type: 'button',\n                        id: 'button-suggest',\n                        class: 'lab-generate',\n                        highlight: false\n                    },\n                    {\n                        value: 'Insert all fields',\n                        type: 'button',\n                        id: 'button-insert',\n                        highlight: true\n                    }\n                ]\n            }\n        });\n    }\n\n}\n","export default `<div>\n    {{ #content }}\n    <div class=\"lab-aside-settings\">\n        <h4 class=\"lab-title\">Target fields</h4>\n        {{ #items }}\n        <div class=\"{{{ placeholder }}}\"></div>\n        {{ /items }}\n    </div>\n    <div class=\"lab-aside-settings\">\n        <h4 class=\"lab-title\">Language</h4>\n        <p class=\"lab-info\">You can autodetect the language or use your page language.</p>\n        <p class=\"lab-para\"><label>Autodetect language<input type=\"checkbox\" title=\"Automatically detect language\" id=\"auto-language\" style=\"float:left;\"></label></p>\n        <p class=\"lab-para\"><label><span id=\"selectedLang\">{{ languageName }}</span><input type=\"checkbox\" checked title=\"Use page language\" id=\"page-language\" style=\"float:left;\"></label></p>\n\n        \n        <select name=\"fields.seolanguage\" id=\"languages\">\n            <option value=\"\">Select language:</option>\n            {{ #languages }}\n            <option value=\"{{ code }}\"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>\n            {{ /languages }}\n        </select>\n    </div>\n\n    {{ /content }}\n</div>`;\n","/**\n * Use-cases:\n * - Vise et gui for alle felt, få forslag for alt\n * - Finne forslag for alt i bakgrunnen, oppdatere knapp i Labrador-menyen som viser at nå har vi noe\n * - Forslag for ett felt i artikkel-settings\n * - Forslag for ett felt via tekst-verktøy\n */\n\nimport { Manager } from './Manager.js';\nimport { LabradorAi } from '../../lib/helpers/LabradorAi.js';\n\nexport default {\n    name: 'TextAssistant',\n    description: 'Labrador assistive AI tools',\n    version: '2.0.0',\n    predicate: (api) => api.v1.model.root.getType() === 'page_article' && api.v1.config.get('plugins.textassistant.enable'),\n    entry: class {\n\n        onReady(api) {\n            this.api = api;\n            this.manager = new Manager(api, this.api.v1.model.query.getRootModel(), this.api.v1.config.get('plugins.textassistant'));\n            this.labradorAi = new LabradorAi(api, this.api.v1.model.query.getRootModel());\n\n            // Define the API-methods for the textAssistant plugin and Labrador AI tools\n            this.api.v1.ns.set('textAssistant', {\n                // Generate content for the current element, use Labrador AI to request generation\n                generateContent: (model, view, item, params) => {\n                    const [prompt, aiIntegrationSettings] = this.labradorAi.preprocessGeneration(model, view, item, params);\n                    return this.labradorAi.requestGeneration(prompt, aiIntegrationSettings)\n                        .then((result) => this.labradorAi.postprocessGeneration(model, view, item, params, result))\n                        .catch((error) => {\n                            Sys.logger.warn(`[Labrador Ai - ${ params.featureName }] Error generating content:`, error);\n                            lab_api.v1.ui.modal.dialog({\n                                container: {\n                                    state: {\n                                        error: true\n                                    }\n                                },\n                                content: {\n                                    title: 'Error: Labrador AI',\n                                    description: `An error has occurred: ${ error }`\n                                },\n                                footer: {\n                                    buttons: [\n                                        {\n                                            type: 'submit',\n                                            value: 'Close',\n                                            highlight: true\n                                        }\n                                    ]\n                                }\n                            });\n                            if (view) {\n                                this.labradorAi.modifyClassNamesInView(view, { remove: ['lab-busy', 'lab-busy-top'], add: ['lab-highlight-error'] });\n                            }\n                        });\n                },\n                // Open settings modal for AI feature\n                openFeatureSettings: (model, view, item, params) => {\n                    // Todo: It should be possible to provide a path to a template for a specific feature\n                    console.log(model, view, item, params);\n                    this.labradorAi.openFeatureSettings(model, view, item, params);\n                },\n\n                generateCaption: (model, view, item, params) => {\n                    // console.log(model, view, item, params);\n                    this.manager.generateCaption(model, view, { model: 'gpt-4o' }, true);\n                },\n\n                fetchByGroupName: (name, aiSettings, options) => this.manager.fetchByGroupName(name, aiSettings, options, true),\n\n                // await lab_api.v1.ns.get('textAssistant.fetchByPath')('fields.title', { tone: 'Sarcastic' })\n                fetchByPath: (path, options, aiSettings) => this.manager.fetchByPath(path, options, aiSettings),\n\n                // await lab_api.v1.ns.get('textAssistant.fetchByPath')('fields.title', { tone: 'Sarcastic' })\n                fetchByName: (path, options) => this.manager.fetchByName(path, options),\n\n                // await lab_api.v1.ns.get('textAssistant.cleanUpJsonString')\n                cleanUpJsonString: (data) => this.manager.cleanUpJsonString(data),\n\n                // (void) Set up a listener for the bodytext. Create suggestions automatically\n                listen: () => {\n                    this.manager.listen();\n                },\n\n                // (bool) Check if suggestions can be made\n                allow: () => this.manager.allowSuggestion(),\n\n                // (void) Allow Labrador text-tools to insert suggestion for current element\n                textToolSuggestion: (model, view, menuItem, params) => {\n                    const { tool } = menuItem.getMenu();\n                    if (tool) {\n                        const { key } = tool.settings;\n                        if (this.manager.hasPath(key)) {\n                            tool.end();\n                            let elements = [];\n                            const toggle = (on) => {\n                                for (const element of elements) {\n                                    if (on) {\n                                        element.classList.add('lab-busy', 'lab-busy-top');\n                                    } else {\n                                        element.classList.remove('lab-busy', 'lab-busy-top');\n                                    }\n                                }\n                            };\n                            setTimeout(() => {\n                                elements = [...view.getMarkup().querySelectorAll(`[data-lab-editable-path='${ key }']`)];\n                                toggle(true);\n                            }, 100);\n                            this.manager\n                                .fetchByPath([key], true)\n                                .then((result) => {\n                                    if (result) {\n                                        view.set(key, result);\n                                    } else {\n                                        console.log(`Error: Required path ${ key } did not return.`);\n                                    }\n                                    toggle(false);\n                                })\n                                .catch((error) => {\n                                    console.log('error: ', error);\n                                    toggle(false);\n                                });\n                        }\n                    }\n                },\n\n                // (void) Display UI for all fields\n                displayUI: (model, view, item, params) => {\n                    this.manager.displayUI();\n                }\n            });\n        }\n\n    }\n};\n","export class YouTubeEditor {\n\n    constructor(model, view) {\n        this.model = model;\n        this.view = view;\n\n        this.playerAPI = null;\n        this.fields = {\n            video_start: this.model.get('fields.video_start') || 0,\n            video_end: this.model.get('fields.video_end') || null\n        };\n        this.sliderUpdateFrequency = 500;\n        this.duration = null;\n        this.progress = this.fields.video_start;\n\n        this.playButton = null;\n        this.timestampElement = null;\n        this.progressElement = null;\n        this.startMarker = null;\n        this.endMarker = null;\n        this.croppedVideoLabel = null;\n\n        this.updater = null;\n\n        this.isActive = false;\n        this.isPlaying = false;\n    }\n\n    run(markup) {\n        this.isActive = true;\n\n        const videoId = this.model.get('fields.vid');\n        if (!videoId) return false;\n\n        if (typeof YT !== 'undefined') {\n            this.playerAPI = this.createPlayer(videoId, markup);\n        } else {\n            window.onYouTubeIframeAPIReady = () => {\n                this.playerAPI = this.createPlayer(videoId, markup);\n            };\n        }\n\n        return true;\n    }\n\n    createPlayer(id, markup) {\n        return new YT.Player('YouTubeEditorContainer', {\n            videoId: id,\n            playerVars: {\n                controls: 0,\n                disablekb: 1\n            },\n            events: {\n                onReady: this.onPlayerReady.bind(this, markup),\n                onStateChange: this.onStateChange.bind(this)\n            }\n        });\n    }\n\n    onPlayerReady(markup) {\n        this.duration = this.playerAPI.getDuration();\n        this.createControls(markup);\n        this.setTimestamp(this.fields.video_start);\n    }\n\n    onStateChange(state) {\n        this.setIsPlaying(state.data == 1);\n        if (state.data === 0) {\n            this.progressElement.value = this.duration;\n        }\n    }\n\n    setTimestamp(seconds) {\n        this.playerAPI.seekTo(seconds);\n        this.progress = this.playerAPI.getCurrentTime();\n    }\n\n    setIsPlaying(isPlaying) {\n        this.isPlaying = isPlaying;\n        if (isPlaying) {\n            this.startUpdater();\n            this.playButton.classList.add('labicon-pause');\n            this.playButton.classList.remove('labicon-play');\n        } else {\n            this.update();\n            this.stopUpdater();\n            this.playButton.classList.add('labicon-play');\n            this.playButton.classList.remove('labicon-pause');\n        }\n    }\n\n    createControls(markup) {\n        this.progressElement =  markup.querySelector('#progressYouTube');\n        this.progressElement.max = this.duration;\n        this.progressElement.addEventListener('change', () => {\n            this.stopUpdater();\n            this.setTimestamp(this.progressElement.value);\n        });\n\n        this.startMarker = markup.querySelector('#startMarkerYouTube');\n        this.endMarker = markup.querySelector('#endMarkerYouTube');\n        this.styleMarker(this.startMarker);\n        this.styleMarker(this.endMarker);\n\n        this.playButton = markup.querySelector('#playYouTube');\n        this.playButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (this.isPlaying) {\n                this.playerAPI.pauseVideo();\n            } else {\n                this.playerAPI.playVideo();\n            }\n        });\n        // Skip buttons.\n        const forwardButton = markup.querySelector('#forwardYouTube');\n        forwardButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            const seconds = 5;\n            const timestamp = this.playerAPI.getCurrentTime() + seconds;\n            this.setTimestamp(timestamp);\n        });\n        const backwardButton = markup.querySelector('#backwardYouTube');\n        backwardButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            const seconds = -5;\n            const timestamp = this.playerAPI.getCurrentTime() + seconds;\n            this.setTimestamp(timestamp);\n        });\n\n        const startPointElement = markup.querySelector('#setStartYouTube');\n        startPointElement.addEventListener('click', (e) => {\n            e.preventDefault();\n            const currentTime = this.playerAPI.getCurrentTime();\n            if (this.fields.video_end && currentTime > this.fields.video_end) {\n                return;\n            }\n\n            this.fields.video_start = currentTime;\n            this.updateCrop();\n            this.save();\n        });\n\n        const endPointElement = markup.querySelector('#setEndYouTube');\n        endPointElement.addEventListener('click', (e) => {\n            e.preventDefault();\n            const currentTime = this.playerAPI.getCurrentTime();\n            if (this.fields.video_start > currentTime) {\n                return;\n            }\n            this.fields.video_end = currentTime;\n            this.updateCrop();\n            this.save();\n        });\n\n        const resetElement = markup.querySelector('#resetYouTube');\n        resetElement.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fields.video_start = 0;\n            this.fields.video_end = this.duration;\n            this.updateCrop();\n            this.save();\n        });\n\n        this.croppedVideoLabel = markup.querySelector('#cropLabelYouTube');\n        this.timestampElement = markup.querySelector('#timestampYouTube');\n\n        this.update();\n        this.updateCrop();\n    }\n\n    styleMarker(marker) {\n        marker.style.pointerEvents = 'none';\n        marker.style.top = '50%';\n        marker.style.transform = 'translate(-50%, -50%)';\n        marker.style.fontSize = '2rem';\n    }\n\n    getPrettyTimestamp(time) {\n        const seconds = (`0${  Math.floor(time % 60) }`).slice(-2);\n        const minutes = (`0${  Math.floor((time / 60) % 60) }`).slice(-2);\n\n        let timestamp = `${ minutes }:${ seconds }`;\n\n        if (this.duration / (60 * 60) > 1) {\n            const hours = (`0${  Math.floor((time / (60 * 60)) % 60) }`).slice(-2);\n            timestamp = `${ hours }:${ timestamp }`;\n        }\n\n        return timestamp;\n    }\n\n    stopUpdater() {\n        clearInterval(this.updater);\n    }\n\n    startUpdater() {\n        this.updater = setInterval(this.update.bind(this), this.sliderUpdateFrequency);\n    }\n\n    update() {\n        this.progress = this.playerAPI.getCurrentTime();\n        this.progressElement.value = Math.ceil(this.progress);\n\n        const current = this.getPrettyTimestamp(this.progress);\n        const max = this.getPrettyTimestamp(this.duration);\n\n        this.timestampElement.innerText = `${ current } / ${ max }`;\n    }\n\n    updateCrop() {\n        const startValue = this.fields.video_start;\n        const endValue = this.fields.video_end || this.duration;\n\n        const start = this.getPrettyTimestamp(startValue);\n        const end = this.getPrettyTimestamp(endValue);\n\n        this.croppedVideoLabel.innerText = `${ start } - ${ end }`;\n\n        this.startMarker.style.left = `${ startValue / this.duration * 100  }%`;\n        this.endMarker.style.left = `${ endValue / this.duration * 100  }%`;\n    }\n\n    save() {\n        this.model.set('fields.video_start', this.fields.video_start);\n        this.model.set('fields.video_end', this.fields.video_end);\n    }\n\n}\n","import template from './template.js';\nimport { YouTubeEditor } from './YouTubeEditor.js';\n\nexport default (menu, event) => {\n    const { model, view } = menu;\n\n    const editor = new YouTubeEditor(model, view);\n\n    const dialog = lab_api.v1.ui.modal.dialog({\n        container: {\n            width: 750\n        },\n        content: {\n            markup: template\n        },\n        callbacks: {\n            didDisplay: ({ markup }) => {\n                const success = editor.run(markup);\n                if (!success) {\n                    dialog.close();\n                }\n            }\n        }\n    });\n};\n","export default `\n<div class=\"iframe-container\" style=\"padding-top: 56.25%; width: 100%; position: relative; overflow: hidden;\">\n    <div id=\"YouTubeEditorContainer\" class=\"youtube-preview container\" style=\"display: block; position: absolute; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%;\"></div>\n</div>\n\n<div class=\"youtube-controls\">\n    <div class=\"lab-grid lab-relative lab-margin-top-1\">\n        <div id=\"startMarkerYouTube\" class=\"lab-absolute labicon-start_point\"></div>\n        <input id=\"progressYouTube\" type=\"range\" value=\"0\" min=\"0\">\n        <div id=\"endMarkerYouTube\" class=\"lab-absolute labicon-end_point\"></div>\n    </div>\n    <div class=\"lab-grid\">\n        <div class=\"lab-padding-top-1 lab-grid lab-grid-large-5\">\n            <div class=\"lab-btn-group lab-grid-large-12\">\n                <button title=\"Skip backward 5 seconds\" id=\"backwardYouTube\" class=\"lab-btn lab-grid-gap labicon-backward\"></button>\n                <button title=\"Play/Pause video\" id=\"playYouTube\" class=\"lab-btn lab-grid-gap labicon-play\"></button>\n                <button title=\"Skip forward 5 seconds\" id=\"forwardYouTube\" class=\"lab-btn lab-grid-gap labicon-forward\"></button>\n            </div>\n            <div class=\"lab-grid lab-grid-large-12\">\n                <span class=\"lab-padding-right-1\">Timestamp:</span>\n                <span id=\"timestampYouTube\">00:00 / 10:00</span>\n            </div>\n        </div>\n        <div class=\"lab-padding-top-1 lab-grid lab-grid-large-7\">\n            <div class=\"lab-btn-group lab-grid lab-grid-large-12 lab-align-right\">\n                <button title=\"Set the start of the video\" id=\"setStartYouTube\" class=\"lab-btn labicon-start_point\"></button>\n                <button title=\"Reset the crop\" id=\"resetYouTube\" class=\"lab-btn labicon-refresh\"></button>\n                <button title=\"Set the end of the video\" id=\"setEndYouTube\" class=\"lab-btn labicon-end_point\"></button>\n            </div>\n            <div class=\"lab-grid lab-grid-large-12 lab-align-right\">\n                <span class=\"lab-padding-right-1\">Cropped:</span>\n                <span id=\"cropLabelYouTube\">00:00 - 00:00</span>\n            </div>\n        </div>\n    </div>\n</div>\n`;\n","import properties from './properties.js';\n\nexport default {\n    name: 'YouTube',\n    description: 'Set start- & endpoint on a YouTube video.',\n    version: '1.0.0',\n    entry: class {\n\n        onReady() {\n            const script = document.createElement('script');\n            script.setAttribute('src', 'https://www.youtube.com/iframe_api');\n            document.head.appendChild(script);\n        }\n\n    },\n    elements: {\n        youtube: {\n            properties\n        }\n    }\n};\n","import callback from './callback/index.js';\n\nexport default {\n    contentMenus: {\n        plugins: {\n            position: 'right',\n            snapToTop: true,\n            items: {\n                youtube: {\n                    icon: 'labicon-video_edit',\n                    title: 'YouTube Editor',\n                    callback\n                }\n            }\n        }\n    }\n};\n","/**\n * Holds data for mappers. Are passed over from mapper to mapper\n * Each mapper returns an instance of this class\n */\nexport class ClientData {\n\n    constructor() {\n        this.totalCount = 0;  // Total number of results, dependent of source\n        this.count = 0;       // Number of results\n        this.data = [];       // Transformed data\n        this.markups = [];    // List of markup\n    }\n\n    setMarkups(content) {\n        this.markups = content;\n    }\n\n    setData(data) {\n        this.data = data;\n        this.count = this.data.length;\n    }\n\n    setTotalCount(count) {\n        this.totalCount = count;\n    }\n\n    getData() {\n        return this.data;\n    }\n\n}\n","/*! For license information please see Core.js.LICENSE.txt */\nvar e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},t={};e.d(t,{Q:()=>q});var r={};e.r(r),e.d(r,{defaults:()=>n,functionHelper:()=>C,grid:()=>P,interpolation:()=>o,objectHelper:()=>s,stringHelper:()=>y,uuid:()=>$});const i={state:\"\",version:\"4.2.8\",build:{styleguide:4,releasenotes:\"40208:1\",userReleasenotes:\"40208:1\",browsers:{chrome:94},version:489}},s={get:(e,t,r)=>e.split(\".\").reduce(((e,t)=>e&&void 0!==e[t]?e[t]:r?void 0:null),t),set:(e,t,r)=>(e.split(\".\").reduce(((e,r,i,n)=>{if(i!==n.length-1)return s.isObject(e[r])?e[r]:e[r]={};e[r]=t}),r),r),delete:(e,t)=>{e.split(\".\").reduce(((e,t,r,i)=>{if(r!==i.length-1)return s.isObject(e[t])?e[t]:e[t]={};delete e[t]}),t)},isObject:e=>e&&\"object\"==typeof e&&!Array.isArray(e),hasContent:e=>!!s.isObject(e)&&!!Object.keys(e).length,merge:(e,t)=>{if(Array.isArray(e)&&Array.isArray(t))return t;const r=Object.assign(Array.isArray(e)?[]:{},e);if(s.isObject(e)&&s.isObject(t))for(const i of Object.keys(t))s.isObject(t[i])?i in e&&s.isObject(e[i])?r[i]=s.merge(e[i],t[i]):Object.assign(r,{[i]:t[i]}):Object.assign(r,{[i]:t[i]});return r},mergeArray:(e,t,r=!0)=>{const i=[...e||[],...t||[]];return r?[...new Set(i)]:i},clone:(e,t)=>{if(!e)return e;let r;if(!t&&e instanceof Array)r=e.slice(0);else{r=e instanceof Array?[]:{};for(const i in e)e.hasOwnProperty(i)&&(t&&\"object\"==typeof e[i]&&null!==e[i]?r[i]=s.clone(e[i],t):r[i]=e[i])}return r},serialize(e,t=\"=\",r=\"&\"){const i=[];for(const r of Object.keys(e))i.push(r+t+e[r]);return i.length?i.join(r):null}},n={true:e=>void 0===e||!!e,false:e=>!!e,string:(e,t=\"\")=>\"string\"==typeof e?e:t,stringRestricted:(e,t=\"\",r=[])=>\"string\"!=typeof e?t:r.includes(e)?e:t,pixelString:(e,t=\"\")=>{if(\"number\"==typeof e)return`${e}px`;if(\"string\"!=typeof e)return t;const r=e.trim().split(\"px\");return 2!==r.length||isNaN(r[0])?t:`${r[0]}px`},stringOrNull:e=>\"string\"==typeof e?e:null,stringOrUndefined:e=>\"string\"==typeof e?e:void 0,numberOrDefault:(e,t=0)=>\"number\"==typeof e?e:t,array:(e,t=[])=>Array.isArray(e)?e:t,arrayOrNull:e=>Array.isArray(e)?e:null,object:(e,t={},r=t)=>!e||\"object\"!=typeof e||Array.isArray(e)?t:{...r,...e},objectOrArray:(e,t={})=>Array.isArray(e)?e:n.object(e,t),notNullOrUndefined:(e,t)=>null==e?t:e,notUndefined:(e,t)=>void 0===e?t:e},o={resolve:(e,t,r)=>\"object\"==typeof e?o.resolveObject(e,t,r):\"string\"==typeof e?o.resolveString(e,t,r):e,resolveObject:(e,t,r)=>{for(const i in e)\"object\"==typeof e[i]?e[i]=o.resolveObject(e[i],t,r):\"string\"==typeof e[i]&&(e[i]=o.resolveString(e[i],t,r));return e},resolveString:(e,t,r)=>{if(-1===e.indexOf(\"${\"))return e;return e.replace(/\\${([^{}]*)}/g,((e,i)=>{const s=r.getCms(i.trim());return\"string\"==typeof s||\"number\"==typeof s?s:(\"undefined\"!=typeof Sys&&Sys.logger.warn(`Cannot interpolate config value \"${e}\". Description: ${t}.`),e)}))}};class a{constructor(e,t){this.logger=t,this.log(\"Setup\"),this.config=e,this.siteAlias=this.config.site&&this.config.site.alias||null,this.fallbackSites=this.resolveSiteAliases(this.siteAlias),this.log(`Site-alias: ${this.siteAlias}`),this.log(`Will use site(s): ${this.fallbackSites}`),this.resources=[{name:\"config\",source:\"config\",path:\"customer\",sitesPrefix:\"customer.site_config_\",storeSitesPrefix:null,siteOverride:{},paths:[],content:[],resolved:!1},{name:\"cmsConfig\",source:\"config\",path:\"\",sitesPrefix:null,storeSitesPrefix:null,paths:[],content:[],resolved:!1},{name:\"viewConfig\",source:\"configObject\",path:\"ConfigObject.viewConfig.config.customer\",sitesPrefix:\"ConfigObject.viewConfig.config.customer.site_config.\",storeSitesPrefix:\"config.customer.site_config.\",siteOverride:{},paths:[],content:[],resolved:!1},{name:\"featureFlags\",source:\"configObject\",path:\"ConfigObject.featureFlags\",sitesPrefix:\"ConfigObject.featureFlags.site.\",storeSitesPrefix:\"site.\",siteOverride:{},paths:[],content:[],resolved:!1},{name:\"content\",source:\"configObject\",path:\"ConfigObject.content\",sitesPrefix:null,storeSitesPrefix:null,paths:[],content:[],resolved:!1},{name:\"localisation\",source:\"configObject\",path:\"ConfigObject.localisation\",sitesPrefix:null,storeSitesPrefix:null,paths:[],content:[],resolved:!1}],this.resourceObject={},this.cache={get:{},debug:{getter:{},reload:{},update:{},resetCache:{}}},this.setupResources()}static resolveFullConfig(e={},t={}){const r={ConfigObject:{},app:{mode:\"presentation\",version:\"[unversioned cms]\"},mainViewport:n.string(e.deviceMain,e.device||\"desktop\"),isTouchDevice:n.false(e.isTouchDevice),sites:n.array(e.sites),...e};return r.app.version=t.version||r.app.version,r.buildInfo=t.build||e.build,r.customer=a.resolveConfig(e.customer),r}static resolveConfig(e={}){const t={grid:{},...e};t.resourceAllocation=n.object(t.resourceAllocation,{resourceMaps:[\"_resources\"],mergeMaps:!0});const r=t.viewHelper||{};return t.viewHelper={image:n.object(r.image,{viewports:[\"desktop\"],pixelDensityFactor:1})},t.appMapper=n.objectOrArray(t.appMapper),t.view_name=n.string(t.view_name,\"[unnamed view]\"),t.view_version=n.string(t.view_version,\"[unversioned view]\"),t.grid.total_grid_spans=n.numberOrDefault(t.grid.total_grid_spans,12),t.grid.grid_prefix=n.object(t.grid.grid_prefix),t.grid.abs_grid_prefix=n.object(t.grid.abs_grid_prefix,null),t.preload=n.array(t.preload),t.preloadObject=n.object(t.preloadObject),t.viewports=n.object(t.viewports),t.viewport=n.string(t.viewport),t.touchEditingViewport=n.string(t.touchEditingViewport),t.style=n.object(t.style,{definitions:{},collections:[],presets:[],copyDefinitions:[]}),t.image=n.object(t.image,{defaultAspectRatio:.45,defaultBoundingBoxWidthRatio:1}),t.imageUrlOptions=n.object(t.imageUrlOptions),t.tags=n.object(t.tags,{},{section:[]}),t.elementList=n.object(t.elementList,{all:[],favourites:[]}),t.elementListAdditions=n.object(t.elementListAdditions,{all:[],favourites:[]}),t.elementListRemovals=n.object(t.elementListRemovals,{all:[],favourites:[]}),t.autoscroll=n.object(t.autoscroll,{scrollDistance:100,scrollBuffer:50,accelerator:{max:3,step:.2}}),t.markLockedPaths=n.true(t.markLockedPaths),t.minimap=n.object(t.minimap,{structure:null,pageType:[]}),t.exitWarning=n.stringOrNull(t.exitWarning),t.publish=n.object(t.publish,{retry:{count:4,delay:2e3},options:{article:{hidden:!0,defaultHidden:!1}}}),t.autolock=n.object(t.autolock,{timeout:18e5}),t.networkWarning=n.object(t.networkWarning,null,{offline:{alert:!0,lockPage:!0},online:{alert:!0}}),t.image_preview=n.object(t.image_preview,{width:1600,compression:50}),t.textTools=n.object(t.textTools,{characterBlacklists:{utf:[]},text_size:{min:{default:14},max:{default:150,mobile:80}}}),t.structure_map=n.object(t.structure_map),t.shapes=n.object(t.shapes),t.requiredElements=n.array(t.requiredElements),t.requiredElementsAdditions=n.array(t.requiredElementsAdditions),t.data=n.object(t.data,{elements:{},presets:{},presetBlacklist:{},blacklist:[],blacklistOptions:{}}),t.pageElements=n.object(t.pageElements),t.drawer=n.array(t.drawer),t.drawerAdditions=n.array(t.drawerAdditions),t.drawerRemovals=n.array(t.drawerRemovals),t.maxChildCount=n.numberOrDefault(t.maxChildCount,150),t}log(e,t=null){this.logger&&(t?this.logger.debug(`[ConfigReader] ${e}`,[t]):this.logger.debug(`[ConfigReader] ${e}`))}setupResources(){for(const e of this.resources)this.resourceObject[e.name]=e}setupResource(e,t=null){const r=!!t&&t!==this.siteAlias,i=this.resourceObject[e];this.log(`Settings up resource \"${e}\". Site: \"${t||this.siteAlias}\". Site-override: ${i.sitesPrefix?r:\"n/a\"}`),t&&!i.siteOverride[t]&&(i.siteOverride[t]={content:[],paths:[],resolved:!1});const s=t?i.siteOverride[t]:i,n=r?this.resolveSiteAliases(t):this.fallbackSites;for(const e of this.calculateResourcePaths(i,n)){s.paths.push(e);const t=this.getPath(e,this.config);s.content.push({path:e,value:t||{}})}return s.resolved=!0,s}reloadResourceBySite(e,t,r){if(e&&this.resourceObject[e]&&r){this.cache.debug.reload[`${e}|${t||\"no-site\"}`]=this.cache.debug.reload[`${e}|${t||\"no-site\"}`]?this.cache.debug.reload[`${e}|${t||\"no-site\"}`]+1:1;const i=o.resolve(r,\"reload_resouce\"),n=t?this.resourceObject[e].sitesPrefix+t:this.resourceObject[e].path;s.set(n,i,this.config),this.resourceObject[e].siteOverride[t]?delete this.resourceObject[e].siteOverride[t]:t||(this.setupResource(e),this.resourceObject[e].siteOverride={})}}updateConfigByPath(e,t){this.cache.debug.update[e]=this.cache.debug.update[e]?this.cache.debug.update[e]+1:1,s.set(e,t,this.config),this.resetCache(e)}getCacheKey(e=\"\",t={}){const r=[e,t.mergeStrategy,t.orderStrategy];for(const e of t.resourceList)r.push(e.name,e.useSites?1:0,e.site||\"-\");return r.join(\"|\")}getCache(e){return this.cache.debug.getter[e]=this.cache.debug.getter[e]?this.cache.debug.getter[e]+1:1,{isSet:e in this.cache.get,value:this.cache.get[e]}}setCache(e,t){this.cache.get[e]=t}resetCache(e){for(const t of Object.keys(this.cache.get))t.startsWith(`${e}|`)&&(this.cache.debug.resetCache[t]=this.cache.debug.resetCache[t]?this.cache.debug.resetCache[t]+1:1,this.log(`Deleting cache for key \"${e}\" (\"${t}\")`),delete this.cache.get[t])}calculateResourcePaths(e,t=this.fallbackSites){const r=e.sitesPrefix?t.map((t=>e.sitesPrefix+t)):[];return r.push(e.path),r}resolveSiteAliases(e,t=[]){if(!e)return t;t.push(e);const r=this.getFallbackSite(e);return r&&this.resolveSiteAliases(r,t),t}getFallbackSite(e){return this.getPath(`customer.site_config_${e}.lab_fallback_site`,this.config)}getResource(e){let t=e.site?this.resourceObject[e.name].siteOverride[e.site]:this.resourceObject[e.name];return t&&t.resolved||(t=this.setupResource(e.name,e.site)),t}getPath(e,t,r=!1){return e?r?o.resolve(s.get(e,t,!0),e,{getCms:e=>s.get(e,this.config,!0)}):s.get(e,t,!0):t}getPaths(e,t,r=!1){const i=[],s=this.getResource(t),n=t.useSites?s.content:[s.content[s.content.length-1]];for(const s of n){const o=this.getPath(e,s.value,r);void 0!==o&&i.push({source:t.name,path:s.path,value:o,sourceIndex:n.indexOf(s)})}return i}getValueType(e){for(const t of e)if(null!==t.value)return Array.isArray(t.value)?\"array\":s.isObject(t.value)?\"object\":\"other\";return\"other\"}mergeResources(e,t,r){let i=t;const n=this.orderResources(e,r);if(!n.length)return{payload:null,paths:[],resetPaths:[]};const o=this.getValueType(n);if(\"default\"===i&&(i=\"object\"===o?\"merge\":\"replace\"),\"replace\"===i)return{payload:n[0].value,paths:[n[0].path],resetPaths:[]};n.reverse();const a=Array.isArray(n[0].value)?[]:{};let l=a;const d=[],h=[];for(const e of n){null===e.value&&(l=a,h.push(e.path));let r=s.merge;\"merge\"===t&&\"array\"===o&&(r=s.mergeArray),l=r(l,e.value),d.push(e.path)}return{payload:l,paths:d,resetPaths:h}}orderResources(e,t){if(1===e.length)return e[0].payload;let r=[];for(const t of e)r=r.concat(...t.payload);return\"site\"===t&&r.sort(((e,t)=>e.sourceIndex-t.sourceIndex)),r}prepareReturnValue(e){return e&&\"object\"==typeof e?s.clone(e,!0):e}getter(e,t=[],{mergeStrategy:r=null,orderStrategy:i=null,raw:s=!1,noCache:o=!1,interpolate:a=!0}){const l={mergeStrategy:n.stringRestricted(r,\"default\",[\"default\",\"merge\",\"replace\"]),orderStrategy:n.stringRestricted(i,\"site\",[\"site\",\"type\"]),raw:n.false(s),noCache:n.false(o),resourceList:[]};for(const e of t)l.resourceList.push({name:e.name,useSites:!!e.useSites,site:n.stringOrNull(e.site)});const d=this.getCacheKey(e,l),h=this.getCache(d);if(!l.noCache&&h.isSet)return l.raw?{cached:!0,options:l,data:{raw:h.value.raw,merged:h.value.merged}}:this.prepareReturnValue(h.value.merged.payload);const g=l.resourceList.map((t=>({name:t.name,payload:this.getPaths(e,t,a)}))),c=this.mergeResources(g,l.mergeStrategy,l.orderStrategy);return this.setCache(d,{raw:g,merged:c}),l.raw?{cached:!1,options:l,data:{raw:g,merged:c}}:this.prepareReturnValue(c.payload)}get(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null,orderStrategy:o=null}={}){return this.getter(e,[{name:\"viewConfig\",useSites:t,site:r},{name:\"config\",useSites:t,site:r}],{mergeStrategy:n,orderStrategy:o,raw:i,noCache:s})}getConfig(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:\"config\",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s})}getCms(e,{raw:t=!1,noCache:r=!1}={}){return this.getter(e,[{name:\"cmsConfig\"}],{raw:t,noCache:r})}getView(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:\"viewConfig\",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s})}getFeatureFlags(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:\"featureFlags\",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s,interpolate:!1})}getContent(e,{raw:t=!1}={}){return this.getter(e,[{name:\"content\"}],{raw:t})}getLocal(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:\"localisation\",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s,interpolate:!1})}getPathForSite(e,t,r=\"\"){return e&&t&&this.resourceObject[e]&&this.resourceObject[e].sitesPrefix?this.resourceObject[e].sitesPrefix+t+(r?`.${r}`:\"\"):null}getStorePathForSite(e,t,r=\"\"){return e&&t&&this.resourceObject[e]&&this.resourceObject[e].sitesPrefix?this.resourceObject[e].storeSitesPrefix+t+(r?`.${r}`:\"\"):null}debug(){return this.cache.debug}}class l{constructor(e,t,r=!1,i=\"\",s=\"\"){this.configReader=e,this.viewport=t,this.fragmentMode=r,this.pageType=i,this.simulatedMode=s,this.cache=new Map,this.isEditor=\"edit\"===this.getAppMode(),this.pixelDensityFactor=this.isEditor?1:this.configReader.get(\"viewHelper.image.pixelDensityFactor\"),this.pixelDensityFactors={}}resetCache(){this.cache.clear()}getViewport(){return this.viewport}getViewports(){const e=\"getViewports\";return this.cache.has(e)||this.cache.set(e,Object.keys(this.configReader.get(\"viewports\")||{})),this.cache.get(e)}getMainViewport(){const e=\"getMainViewport\";return this.cache.has(e)||this.cache.set(e,this.configReader.getCms(\"mainViewport\")),this.cache.get(e)}getPageType(){return this.pageType}getSimulatedMode(){return this.simulatedMode}isFragmentMode(){return!!this.fragmentMode}isMainViewport(){return this.viewport===this.getMainViewport()}isTouchDevice(e=this.viewport){return this.configReader.getCms(\"isTouchDevice\")}getSubViewports(){const e=\"getSubViewports\";if(!this.cache.has(e)){const t=this.getMainViewport();this.cache.set(e,this.getViewports().filter((e=>e!==t)))}return this.cache.get(e)}isSubViewport(e=this.viewport){return e!==this.getMainViewport()}getEditableViewports(e=!1){const t=`getEditableViewports_${e}`;if(!this.cache.has(t)){const r=this.configReader.get(\"viewports\"),i=e?{}:[];for(const t of Object.keys(r))r[t].noEdit||(e?i[t]=r[t]:i.push(t));this.cache.set(t,i)}return this.cache.get(t)}getViewportWidth(e=this.viewport){const t=this.configReader.get(`viewports.${e}.deviceWidth`);return t?parseInt(t,10):null}getEditViewportWidth(e=this.viewport){const t=this.configReader.get(`viewports.${e}.editSlotWidth`)||this.configReader.get(`viewports.${e}.deviceWidth`);return t?parseInt(t,10):null}getSite(e=null){const t={},r=`getSite_${e}`;if(!this.cache.has(r)){if(e){for(const t of this.configReader.getCms(\"sites\"))if(t.alias===e)return this.cache.set(r,t),t;return this.cache.set(r,t),t}this.cache.set(r,this.configReader.getCms(\"site\")||t)}return this.cache.get(r)}getSiteById(e){if(!e)return null;const t=`getSiteById_${e}`;if(!this.cache.has(t)){const r=parseInt(e,10);for(const e of this.configReader.getCms(\"sites\"))if(e.id===r)return this.cache.set(t,e),e;return this.cache.set(t,null),null}return this.cache.get(t)}getSites(){const e=\"getSites\";return this.cache.has(e)||this.cache.set(e,this.configReader.getCms(\"sites\")||[]),this.cache.get(e)}getAppMode(){const e=\"getAppMode\";return this.cache.has(e)||this.cache.set(e,this.configReader.getCms(\"app.mode\")||\"presentation\"),this.cache.get(e)}isPresentationMode(){return!this.isEditor}isEditMode(){return this.isEditor}getPixelDensityFactor(e){return e?(this.pixelDensityFactors[e]||(this.pixelDensityFactors[e]=this.isEditor?1:this.configReader.get(`viewHelper.image.pixelDensity.${e}`)||this.configReader.get(\"viewHelper.image.pixelDensityFactor\")),this.pixelDensityFactors[e]):this.pixelDensityFactor}getPreferredImageFormat(){return(this.configReader.get(\"imageUrlOptions.extension\")||\"\").replace(\".\",\"\")||null}}class d{constructor(e){this.debug=e&&\"object\"==typeof performance,this.logs={}}getLogs(){return this.logs}resetLogs(){this.logs={}}log(e,t){const r=e.pop();let i=this.logs;for(const t of e)i[t]||(i[t]={}),i=i[t];i[r]||(i[r]={count:0,time:0}),i=i[r],i.count++,i.time+=t}start(e){if(this.debug)return{paths:e,time:this.getTimestamp()}}end(e){this.debug&&this.log(e.paths,this.getTimestamp()-e.time)}getTimestamp(){return performance.now()}}class h{constructor({entries:e=[],behaviours:t={},debug:r=!1}={}){this.entries=e,this.behaviours=t,this.debug=r,this.events={},this.logs={},this.performanceLogger=new d(this.debug)}getLogs(){return this.performanceLogger.getLogs()}resetLogs(){this.performanceLogger.resetLogs()}on(e,t){return this.events[e]||(this.events[e]=[]),this.events[e].push(t),!0}off(e,t){return!(!this.events[e]||!this.events[e].includes(t))&&(this.events[e]=this.events[e].filter((e=>e!==t)),!0)}emitEntry(e,...t){const r=this.performanceLogger.start([\"entry\",e]),i=this.callTargets(e,\"entry\",this.entries,...t);return this.performanceLogger.end(r),i}emitBehaviour(e,t,...r){const i=this.behaviours[t.getType()];if(!i||!i.length)return[];const s=this.performanceLogger.start([\"behaviour\",e,t.getType()]),n=this.callTargets(e,\"behaviour\",i,t,...r);return this.performanceLogger.end(s),n}emitCollectionBehaviour(e,t,...r){const i=this.behaviours[t.getType()];return i&&i.length?this.callTargets(e,\"collection\",i,t,...r):[]}emitEvent(e,...t){this.events[e]&&this.callEvents(e,this.events[e],...t)}requestEvent(e,...t){return this.events[e]?this.requestEvents(e,this.events[e],...t):[]}callEvents(e,t,...r){for(const i of t)try{i(...r)}catch(t){Sys.logger.error(`[Emitter] Failed to run method on listener for message \"${e}\"`),Sys.logger.debug(t.toString()),lab_api.v1.app.logError(t)}}requestEvents(e,t,...r){const i=[];for(const s of t)try{const e=s(...r);void 0!==e&&i.push(e)}catch(t){Sys.logger.error(`[Emitter] Failed to run method on listener for message \"${e}\"`),Sys.logger.debug(t.toString()),lab_api.v1.app.logError(t)}return i}callTargets(e,t,r,...i){const s=[];for(const n of r)try{if(n.isEnabled){const t=n.call(e,...i);null!=t&&s.push(t)}}catch(r){Sys.logger.error(`[Emitter] Call to method ${e} on '${n.name}' failed:`),console.error(r),lab_api.v1.app.logViewError(r,t)}return s}registerEntry(e){return!this.entries.includes(e)&&(this.entries.push(e),!0)}registerBehaviour(e,t){return this.behaviours[e]||(this.behaviours[e]=[]),!this.behaviours[e].includes(t)&&(this.behaviours[e].push(t),!0)}}class g{static build(e,t,r){let i;const s=[],n=r||\"&\",o=(e,t,r)=>{let i,s=t;const n=[];if(!0===s?s=\"1\":!1===s&&(s=\"0\"),null!=s){if(\"object\"==typeof s){for(i in s)null!=s[i]&&n.push(o(`${e}[${i}]`,s[i],r));return n.join(r)}if(\"function\"!=typeof s)return`${this.urlencode(e)}=${this.urlencode(s)}`;throw new Error(\"There was an error processing for http_build_query().\")}return\"\"};for(const r of Object.keys(e)){i=e[r];let a=r;t&&!Number.isNaN(a)&&(a=String(t)+a);const l=o(a,i,n);\"\"!==l&&s.push(l)}return s.join(n)}static urlencode(e){return encodeURIComponent(`${e}`).replace(/!/g,\"%21\").replace(/'/g,\"%27\").replace(/\\(/g,\"%28\").replace(/\\)/g,\"%29\").replace(/\\*/g,\"%2A\").replace(/%20/g,\"+\")}}class c extends h{constructor(e,t,r,i,s,n,o=!1){super({behaviours:s,debug:o}),this.properties=e,this.templates=t,this.configReader=r,this.propertyValidator=i,this.pathHelper=n,this.resolved={properties:new Map,templates:new Map,resourceMaps:new Map},this.appMode=r.getCms(\"app.mode\"),this.pageTemplateName=\"default\",this.resourceSettings=this.resolveResourceSettings(),this.viewportList=new Map,this.rootId=null,this.feedBaseUrl=`${this.configReader.getCms(\"front_api_url\")}/feed/item`,this.isFragmentMode=!1,this.feedCounter={}}getPathInfo(e,t,r=\"stage\"){const i=e.split(\"/\"),s=i.pop();let n;return n=s.startsWith(\"page_\")?`${s.replace(\"page_\",\"page/\")}/${this.pageTemplateName}`:`content/${s}`,{type:s,resourceType:n,area:r,modeList:this.getPrioritizedModes(),viewportList:this.getPrioritizedViewports(t),contextList:this.getPrioritizedContexts(`${i.join(\"/\")}/`)}}resolveResourceSettings(){const e=n.object(this.configReader.get(\"resourceAllocation\",{useSites:!1}),{resourceMaps:[\"_resources\"]});\"string\"==typeof e.resourceMaps&&(e.resourceMaps=[e.resourceMaps]);const t=this.configReader.getCms(\"site.alias\"),r=n.object(this.configReader.get(\"resourceAllocation\",{site:t}));let i=[];if(Array.isArray(r.resourceMaps)&&i.push(...r.resourceMaps),!i.length||n.true(r.mergeMaps)){const t=[];for(const r of e.resourceMaps)i.includes(r)||t.includes(r)||t.push(r);t.length&&(i=[...t,...i])}return{names:i}}getResourceMap(e,t){if(this.resolved.resourceMaps.has(e.type))return this.resolved.resourceMaps.get(e.type);let r={labPaths:this.getEmptyPathObject()};for(const t of this.resourceSettings.names){const i=`${e.resourceType}/${t}.json`,s=this.getPropertyFile(i);s?(r.labPaths.maps.push(i),r=this.mergeObject(r,s)):Sys.logger.warn(`[ResourceManager] Cannot find resource-map for element \"${e.type}\". Tried \"${i}\".`)}if(t){const i=this.emitBehaviour(\"onResourceMap\",t,{...r},{type:e.type,resourceType:e.resourceType});i.length&&(Sys.logger.warn(`[ResourceManager] Resource-map is overridden by a bahaviour for model \"${t.getPositionedPath()}\".`),r=i.pop())}return this.resolved.resourceMaps.set(e.type,r),r}getPaths(e,t,r){let i=[];for(const s of r.modeList){const n=this.getContextsForModeAndArea(e,s,r);if(n)for(const e of r.contextList){const o=this.getContexts(n,t,e);if(o.length)for(const e of o){const t=this.getPathForViewports(e.match,r);if(t)for(const r of Array.isArray(t.resources)?t.resources:[t.resources])i=i.filter((e=>e.path!==r)),i.push(this.getPathDescription({path:r,context:e.context,viewport:t.viewport,mode:s}))}}}return i.length||Sys.logger.debug(`ResourceManager: Cannot get ${t} for ${r.type}. Context-list: ${r.contextList.join(\", \")}, area: ${r.area}`),i}getPathForViewports(e,t){for(const r of t.viewportList)if(e[r])return{resources:e[r],viewport:r};return null}getPathLength(e=\"\"){return this.trimPath(e).replace(/\\/\\//g,\"/||/\").split(\"/\").map((e=>e?\"||\"===e?.2:\"*\"===e?.6:1:0)).reduce(((e,t)=>e+t))}sortContexts(e){const t=e.sort(((e,t)=>this.getPathLength(e)-this.getPathLength(t)||e.localeCompare(t))),r=t.indexOf(\"lab-default\");return r>0&&(t.splice(r,1),t.unshift(\"lab-default\")),t}trimPath(e){let t=e;return t.startsWith(\"/\")&&!t.startsWith(\"//\")&&(t=t.substring(1)),t.endsWith(\"/\")&&!t.endsWith(\"//\")&&(t=t.substr(0,t.length-1)),t}getContexts(e,t,r){const i=this.sortContexts(Object.keys(e)),s=[];for(const n of i)if(e[n][t]){const i=this.pathHelper.pathMatch(n,r);i&&s.push({match:e[i][t],context:n})}return s}getContextsForModeAndArea(e,t,r){return s.get(`${t}.${r.area}`,e)||null}getPropertyFile(e){if(this.properties[e]){return{...this.properties[e]}}return null}getEmptyPathObject(){return{maps:[],properties:[],map:[]}}getPathDescription(e={}){return{path:e.path||null,context:e.context||null,viewport:e.viewport||null,mode:e.mode||null,requiredBy:e.requiredBy||null}}resolveInheritance(e,t){if(!e.includeFiles)return e;let r=e;for(const i of e.includeFiles)if(!r.labPaths.properties.includes(i)){const e=this.getPathDescription(t);e.requiredBy=e.path,e.path=i;const s=this.resolvePropertyFileWithDescription(e);s&&(r=this.mergeObject(s,r))}return r}getTemplateFile(e){return this.templates[e]||null}getPrioritizedViewports(e){if(!this.viewportList.get(e)){const t=e?[e]:[];this.configReader.get(`viewports.${e||\"default \"}.noFallback`)||t.push(\"default\"),this.viewportList.set(e,t)}return this.viewportList.get(e)}getPrioritizedModes(){const e=[this.appMode];return\"edit\"===this.appMode&&e.unshift(\"presentation\"),e}getPrioritizedContexts(e){return[\"lab-default\",e]}mergeObject(e,t){const r=s.merge(e,t);return e.labPaths&&t.labPaths&&(r.labPaths.properties=e.labPaths.properties.concat(t.labPaths.properties),r.labPaths.map=e.labPaths.map.concat(t.labPaths.map)),r}getCacheKey(e,t,r){return`${e||\"no-path\"}-${t}-${r}`}rootModelReady(e){this.isFragmentMode=lab_api.v1.app.mode.isFragmentMode(),e&&(this.rootId=e.get(\"id\"),e&&e.getType().startsWith(\"page_\")&&this.setPageTemplateName(e.get(\"fields.page_template_alias\")||\"default\"))}setPageTemplateName(e=\"default\"){Sys.logger.debug(`[ResourceManager] Will use page-template \"${e}\".`),\"undefined\"===e?(Sys.logger.warn(\"[ResourceManager] Invalid page_template_alias detected. Will override template to 'default'.\"),this.pageTemplateName=\"default\"):this.pageTemplateName=e}getAreaFromPath(e,t){return e&&e.includes(\"pasteboard/\")?\"pasteboard\":\"stage\"}getPropertiesForPath(e,t,r,i=this.getAreaFromPath(e)){e||Sys.logger.warn('ResourceManager.getPropertiesForPath: Missing required param \"path\". Will return default properties.');const s=this.getCacheKey(e,r,i);if(this.resolved.properties.has(s))return this.resolved.properties.get(s);let n={labPaths:this.getEmptyPathObject()};const o=this.getPathInfo(e,r,i),a=this.getResourceMap(o,t),l=this.getPaths(a,\"properties\",o);for(const e of l){const t=this.resolvePropertyFileWithDescription(e);t&&(n=this.mergeObject(n,t))}return n.labPaths.maps=a.labPaths.maps,this.resolved.properties.set(s,this.propertyValidator(n)),this.resolved.properties.get(s)}resolvePropertyFile(e){return this.resolvePropertyFileWithDescription(this.getPathDescription({path:e}))}resolvePropertyFileWithDescription(e){const t=this.getPropertyFile(e.path);return t?(t.labPaths=this.getEmptyPathObject(),t.labPaths.properties.push(e.path),t.labPaths.map.push(e),this.resolveInheritance(o.resolve(t,e.path,this.configReader),e)):(Sys.logger.warn(`ResourceManager: Cannot find property-file for path: ${e.path}.`),null)}getTemplateForPath(e,t,r,i=this.getAreaFromPath(e)){const s=this.getCacheKey(e,r,i);if(this.resolved.templates.has(s))return this.resolved.templates.get(s);const n={paths:null,resource:null},o=this.getPathInfo(e,r,i),a=this.getResourceMap(o,t);return n.paths=this.getPaths(a,\"template\",o),n.paths.length&&(n.resource=this.getTemplateFile([...n.paths].pop().path)),n.resource||(Sys.logger.debug(`ResourceManager: Cannot find template for path: ${e}, viewport: ${r}, area: ${o.area}. Will assign default template.`),n.resource=this.getDefaultTemplate(e)),this.resolved.templates.set(s,n),n}getDefaultTemplate(e){return\"edit\"===this.appMode?\"<div>{{{ children.all }}}</div>\":\"{{{ children.all }}}\"}getPropertiesForModel(e,t,r){return this.getPropertiesForPath(e.getPath(),e,t.viewport,r)}getTemplateForModel(e,t,r){if(\"presentation\"===this.appMode&&!this.isFragmentMode&&\"1\"===e.get(\"fields.isAutomatic\"))return`<div data-lab-placeholder=\"include\" src=\"${this.getFeedUrl(e,t)}\" ></div>`;const i=this.getTemplateForPath(e.getPath(),e,t.viewport,r);return i.paths.length&&t.setTemplatePath([...i.paths].pop().path),i.resource}getFeedUrl(e,t){const r=e.get(\"fields.feedId\"),i=e.get(\"fields.feedParams\")||{};let s=\"\";Object.keys(i).length&&(s=`?${g.build(i)}`),void 0===this.feedCounter[r]&&(this.feedCounter[r]=0);const n=this.feedCounter[r]++;return`${this.feedBaseUrl}/${r}/${this.rootId}/${n}${s}`}}class p{constructor(e,t,r){this.viewport=e,this.model=t,this.eventPipe=r,this.markup=null,this.markupString=null,this.template=null,this.templatePath=null,this.properties=null,this.data=null,this.size=this.getEmptySizeObject(),this.proxies={current:null,child:null,children:null,childMarkup:null,childrenMarkup:null,store:{get:null,set:null}},this.cache=new Map}static resolveConfig(e={}){return lab_api.v1.app.dbg.logger.add(\"LabView\",\"resolveConfig\"),{labPaths:e.labPaths||{maps:[],properties:[],map:[]},boxTitle:e.boxTitle||\"\",boxDescription:e.boxDescription||\"\",boxKeywords:e.boxKeywords||\"\",childLimit:e.childLimit||null,includeFiles:n.array(e.includeFiles,null),gridRules:e.gridRules||[],viewHelper:e.viewHelper||null,viewportMap:n.object(e.viewportMap),bodytextElements:n.array(e.bodytextElements),bodytextHeadingElements:n.array(e.bodytextHeadingElements),overrideImageSize:n.object(e.overrideImageSize),image:n.object(e.image,null,{defaultAspectRatio:null}),external:n.object(e.external,null,{url:null,type:\"html\",headers:null})}}getEmptySizeObject(){return{grid:null,pixelWidths:null,gridWidth:null,absGridWidths:null,absGridCss:null}}isPrepared(){return!1}setPreparedState(e){}setMarkupString(e){this.markupString=e}getMarkup(){return null}getMarkupString(){return this.markupString||\"\"}setGrid(e){this.size.grid=e}getGrid(){return this.size.grid}setPixelWidths(e){this.size.pixelWidths=e}getPixelWidth(){return this.size.pixelWidths[this.viewport]}getPixelWidths(){return this.size.pixelWidths}setGridWidth(e){this.size.gridWidth=e}getGridWidth(){return this.size.gridWidth}getAbsoluteGridWidth(){return this.size.absGridWidths?this.size.absGridWidths[this.viewport]:null}setAbsoluteGridWidths(e){this.size.absGridWidths=e}getAbsoluteGridWidths(){return this.size.absGridWidths}getAbsGridCss(){return this.size.absGridCss}setAbsGridCss(e){this.size.absGridCss=e}getWidth(){return this.get(\"width\")}setWidth(e,t=!1){this.set(\"width\",e,t)}setData(e){this.data=e}getData(){return this.data}getProxy(){return this.proxies.current}setProxy(e){this.proxies.current=e}getChildrenProxy(){return this.proxies.children}setChildrenProxy(e){this.proxies.children=e}getChildProxy(){return this.proxies.child}setChildProxy(e){this.proxies.child=e}getChildMarkupProxy(){return this.proxies.childMarkup}setChildMarkupProxy(e){this.proxies.childMarkup=e}getChildrenMarkupProxy(){return this.proxies.childrenMarkup}setChildrenMarkupProxy(e){this.proxies.childrenMarkup=e}getStoreProxy(e){return this.proxies.store.set&&this.proxies.store.get?e?this.proxies.store.set:this.proxies.store.get:null}setStoreProxy({get:e,set:t}){this.proxies.store.get=e,this.proxies.store.set=t}setTemplate(e){this.template=e}getTemplate(){return this.template}setTemplatePath(e){this.templatePath=e}getTemplatePath(){return this.templatePath}setProperties(e,t=!1){this.properties=t?e:this.constructor.resolveConfig(e)}getProperties(){return this.properties}getProperty(e,t){return s.get(e,this.properties,t)}getViewport(){return this.viewport}getviewportOrder(e,t=null,r=this.viewport){return this.eventPipe.getViewportOrder(this,this.model.getPath(),e,t,r)}getCacheKey(e,t,r=!1){return`${e}|${r?1:0}|${t}`}get(e,t=!1,r=this.viewport){lab_api.v1.app.dbg.logger.add(this.constructor.name,\"get\",this.viewport);const i=this.getCacheKey(e,r,t);if(this.cache.has(i))return this.getCache(i);const s=this.model.buildQuery(e),n=this.getviewportOrder(s.path,s.attribute,r);if(!n.length){const e=this.model.get(s.key,null,t);return this.setCache(i,e)}for(const e of n){const t=this.model.get(s.key,e,!0);if(void 0!==t)return this.setCache(i,t)}return this.setCache(i,t?void 0:null)}set(e,t,r=!1){if(lab_api.v1.app.dbg.logger.add(this.constructor.name,\"set\",this.viewport),!e)return!1;const i=this.model.buildQuery(e),s=this.getviewportOrder(i.path,i.attribute);return this.model.set(i.key,t,{save:!r,viewport:s[0]})}setAll(e,t=!0){if(e&&\"object\"==typeof e&&!Array.isArray(e)){for(const t of Object.keys(e))this.set(t,e[t],!0);t&&lab_api.v1.app.save()}else Sys.logger.warn(\"[LabView] Method setAll expect an object containing key/value pars of data to store. Non-object given.\")}setTransparent(e,t){const r=this.model.buildQuery(e),i=this.getviewportOrder(r.path,r.attribute),n=this.model.buildQuery(e,i[0]);let{path:o}=n;return n.attribute&&(o=\"fields\"===n.type?`${n.path}.attributes.${n.attribute}`:`${n.path}.${n.attribute}`),s.get(o,s.set(n.fullPath,t,{}))}setCache(e,t){return this.cache.set(e,t),this.getCache(e)}getCache(e){const t=this.cache.get(e);return t&&\"object\"==typeof t?Array.isArray(t)?[...t]:{...t}:t}resetCache(e,t=this.getViewport()){const r=this.getCacheKey(e,t);this.cache.delete(r),this.cache.forEach(((r,i,s)=>{i.startsWith(`${e}.`)&&i.endsWith(`|${t}`)&&this.cache.delete(i)}))}}class u{static generateShapes(e,t){if(!e)return\"\";const r=JSON.parse(e);let i=\"\";for(const e of r)i+=this.createShape(e,t);return i}static createShape(e,t){return`<div class=\"imageShape\" style=\"${this.getStyle(e,t)}\"></div>`}static getStyle(e,t){const r=this.getPosition(e,t),i=this.getSize(e,t);return`position: absolute;\\n        width: ${i.w}%;\\n        height: ${i.h}%;\\n        top: ${r.y}%;\\n        left: ${r.x}%;\\n        border-width: ${e.borderwidth}px;\\n        border-color: ${e.bordercolor};\\n        border-style: ${e.borderstyle};\\n        border-radius: ${\"circle\"===e.shape?\"50%\":\"0\"};\\n        background: ${e.background||\"transparent\"};`}static getPosition(e,t){return{x:(e.x-t.x)*(100/t.cropw),y:(e.y-t.y)*(100/t.croph)}}static getSize(e,t){return{w:e.width*(100/t.cropw),h:e.height*(100/t.croph)}}}class f{constructor(e,t){this.api=e,this.isEditor=this.api.v1.app.mode.isEditor(),this.viewport=t.viewport,this.viewports=this.api.v1.config.get(\"viewHelper.image.viewports\"),this.viewports.includes(this.viewport)||this.viewports.push(this.viewport),this.logger=t.logger,this.imageServer=this.api.v1.properties.get(\"image_server\"),this.cropParamsFloat=[\"x\",\"y\",\"cropw\",\"croph\",\"panox\",\"panoy\",\"panow\",\"panoh\",\"heightx\",\"heighty\",\"heightw\",\"heighth\"],this.cropParamsString=[\"float\",\"shapes\"],this.privateCropParams=[\"bbRatio\",\"whRatio\",\"viewports_json\",\"metadata_key\"],this.allFields=[...this.cropParamsFloat,...this.cropParamsString,...this.privateCropParams],this.imageUrlOptions=this.api.v1.config.get(\"imageUrlOptions\")||{},this.preferWebp=\".webp\"===this.api.v1.config.get(\"imageUrlOptions.extension\"),this.maxDimension=3e3,this.pixelDensityFactors=this.readPixelDensity(),this.logger.debug(`Image-helper created. Will prepare image-data for viewports: ${this.viewports.join(\", \")}.`)}static getImageProperties(e={}){const t=e.crop||{},r=t.pano||{},i=t.height||{};return{cropw:r.cropw||0,croph:r.croph||0,x:r.x||0,y:r.y||0,heightw:i.cropw||0,heighth:i.croph||0,heightx:i.x||0,heighty:i.y||0,imageCaption:e.imageCaption||\"\"}}run(e,t){if(!e.hasNodeData())return this.logger.debug(`Image has no node-data, skipping. Path: \"${e.getPositionedPath()}\"`),void this.api.v1.model.noRender(e);const r=t.getProperty(\"image.defaultAspectRatio\")||this.api.v1.config.get(\"image.defaultAspectRatio\")||.5,i=t.getProperty(\"image.defaultBoundingBoxWidthRatio\")||this.api.v1.config.get(\"image.defaultBoundingBoxWidthRatio\")||1,s=t.getPixelWidths(),n=e.getData(\"instance_of\"),o=e.get(\"fields.imageurl\"),a=e.get(\"fields.forceImageUrl\"),l={},d=[],h=this.imageUrlOptions.nameField?e.get(this.imageUrlOptions.nameField):null,g=\"_articlefeed\"===e.get(\"fields.source\"),c=\"1\"===e.get(\"fields.isLabradorImageUrl\"),p=this.preferWebp&&g?\"webp\":null,f=[];if((this.preferWebp||\"webp\"===p)&&f.push({format:\"webp\",type:\"image/webp\"}),f.push({format:\"jpg\",type:\"image/jpeg\"}),!o&&!n)return this.isEditor?e.setFiltered(\"image\",\"/images/lab-head_1000.png\"):e.setFiltered(\"image\",`${this.api.v1.config.get(\"image.fallbackUrl\")||\"/404-image.png\"}?noImageFound`),void(e.get(\"state.isUploading\")?e.setFiltered(\"imageLoadingClass\",\"lab-uploading-image labicon-cloud_up\"):e.setFiltered(\"imageLoadingClass\",\"lab-missing-image\"));for(const e of this.viewports){const y={width:t.get(\"fields.width\",!1,e)||t.getProperty(\"overrideImageSize.width\"),height:t.get(\"fields.height\",!1,e)||t.getProperty(\"overrideImageSize.height\")},m=s[e],b={};for(const r of this.allFields){const i=t.get(`fields.${r}`,null,e);(i||\"0\"===i||0===i)&&(b[r]=i)}const w={imageId:g?void 0:n,format:p,bbRatio:t.get(\"filtered.bbRatio\",null,e)||b.bbRatio||i,whRatio:t.get(\"filtered.whRatio\",null,e)||b.whRatio||r},v={float:null,border:null,shapes:null};for(const e of this.cropParamsFloat)if(void 0!==b[e]){const t=parseFloat(b[e]||0);w[e]=t.toFixed(2)}for(const e of this.cropParamsString){const t=b[e]||null;t&&\"null\"!==t&&(v[e]=t)}w.width=t.get(`filtered.width.${e}`,null,e)||y.width||Math.ceil(m*w.bbRatio),w.height=t.get(`filtered.height.${e}`,null,e)||y.height||Math.ceil(w.width*w.whRatio);const P={width:w.width,height:w.height};w.width=Math.round(w.width*this.pixelDensityFactors[e]),w.height=Math.round(w.height*this.pixelDensityFactors[e]);if(w.width/w.height>1){if(w.width>this.maxDimension){const e=this.maxDimension/w.width;w.width=Math.floor(w.width*e),w.height=Math.floor(w.height*e)}}else if(w.height>this.maxDimension){const e=this.maxDimension/w.height;w.height=Math.floor(w.height*e),w.width=Math.floor(w.width*e)}const x=this.generateUrl(w,{imageurl:o,forceImageUrl:a,instanceOf:n,isLabradorImageUrl:c,imageUrlOptionsNameValue:h}),M=v.shapes?u.generateShapes(v.shapes,b):\"\";l[e]={viewport:e,url:x,formats:f,width:P.width,height:P.height,shapes:M,borderClass:\"on\"===v.border?\"borderOn\":\"\"},d.push(l[e])}const y=l[this.viewport];e.setFiltered(\"viewport_list\",l),e.setFiltered(\"viewport_array\",d),e.setFiltered(\"image\",y.url),e.setFiltered(\"imageWidth\",y.width),e.setFiltered(\"imageHeight\",y.height),e.setFiltered(\"imageCleanUrl\",y.url.replace(/&(width|height)=\\d+/g,\"\")),e.setFiltered(\"borderClass\",y.borderClass),e.setFiltered(\"shapes\",y.shapes),e.setFiltered(\"imageLoadingClass\",n?\"\":o?\"lab-content-busy\":\"lab-is-dummy-image\")}generateUrl(e,t={}){const r=[],i={width:e.width||t.width||150,height:e.height||t.height||100},s={imageId:e.imageId||t.imageId,x:e.x,y:e.y,cropw:e.cropw,croph:e.croph,panox:e.panox,panoy:e.panoy,panow:e.panow,panoh:e.panoh,heightx:e.heightx,heighty:e.heighty,heightw:e.heightw,heighth:e.heighth,width:i.width,height:i.height,format:e.format||void 0};for(const e of Object.keys(s))void 0!==s[e]&&r.push(`${e}=${s[e]}`);let n=this.imageServer,o=\"?\";return!t.imageurl||!t.forceImageUrl&&t.instanceOf?t.instanceOf?this.imageUrlOptions&&t.imageUrlOptionsNameValue&&(n+=`/${t.imageUrlOptionsNameValue}${t.format?`.${t.format}`:this.imageUrlOptions.extension}`):n=\"\":(-1!==t.imageurl.indexOf(this.imageServer)||t.isLabradorImageUrl?n=t.imageurl:n+=`?imageUrl=${t.imageurl}`,o=\"&\"),n&&(n+=o+r.join(\"&\")),n}readPixelDensity(){const e={};for(const t of this.viewports)e[t]=this.api.v1.view.getPixelDensityFactor(t);return e}}const y={unique:(e=8)=>{const t=`0x${Math.pow(10,e-1)}`;return Math.floor((1+Math.random())*t).toString(16)},async digestString(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest(\"SHA-256\",t);return Array.from(new Uint8Array(r)).map((e=>e.toString(16).padStart(2,\"0\"))).join(\"\")},trim(e,t){let r=(e||\"\").trim(),i=[];void 0===t?i.push(\" \"):\"string\"==typeof t?i.push(t):i=t;for(let e=0;e<i.length;e++)0===r.indexOf(i[e])&&(r=r.slice(i[e].length)),r.lastIndexOf(i[e])>-1&&r.lastIndexOf(i[e])===r.length-i[e].length&&(r=r.slice(0,r.length-i[e].length));return r.trim()},stripTags:(e=\"\",t=\"\")=>(e||\"\").replace(/<(?:.|\\n)*?>/gm,t).trim(),stripLinks:(e=\"\")=>(e||\"\").replace(/<a[^>]*>(.*?)<\\/a>/gm,\"$1\"),sanitizeString:(e=\"\")=>y.stripTags(y.unescapeEntities(e)).replace(/\"/g,\"'\"),unescapeEntities:(e=\"\")=>(e||\"\").replace(/&nbsp;/gi,\" \").replace(/&amp;/gi,\"&\"),toFileName:(e=\"\")=>e.replace(/\\s+/gi,\"-\").replace(/[^a-zA-Z0-9\\-._]/gi,\"\"),ucFirst(e=\"\"){const t=e||\"\";return t.charAt(0).toUpperCase()+t.slice(1)},parsePath(e=\"\"){const t=this.trim(e,\"/\").split(\"/\"),r=/\\[([0-9]+)\\]/;return t.map((e=>{const t={base:e,index:null,path:e},i=r.exec(e);return i&&(t.index=parseInt(i[1],10),t.base=e.replace(`[${t.index}]`,\"\")),t}))},insertAtPosition:(e,t,r)=>[e.slice(0,t),r,e.slice(t)].join(\"\"),labCtrlKey:()=>navigator.platform.toLowerCase().indexOf(\"mac\")>=0?\"⌘\":\"⊞\",shiftKey:()=>\"⇧\",altKey:()=>navigator.platform.toLowerCase().indexOf(\"mac\")>=0?\"⌥\":\"alt\",arrowUp:()=>\"↑\",arrowDown:()=>\"↓\",arrowLeft:()=>\"←\",arrowRight:()=>\"→\",keyMapper(e){if(!e)return\"\";switch(e){case\" \":return\"space\";case\"labCtrlKey\":case\"metaKey\":return y.labCtrlKey();case\"shiftKey\":return y.shiftKey();case\"altKey\":return y.altKey();case\"ArrowUp\":return y.arrowUp();case\"ArrowDown\":return y.arrowDown();case\"ArrowLeft\":return y.arrowLeft();case\"ArrowRight\":return y.arrowRight();default:return y.ucFirst(e.replace(\"Key\",\"\"))}},hotkeyString(e={}){const t=(e.controlkeys||[]).map((e=>y.keyMapper(e)));return[...t,y.keyMapper(e.key)].map((e=>`<span class=\"lab-label-hotkey\">${e}</span>`)).join(\"+\")},niceNumber(e,t=\" \"){let r=`${e}`;const i=r.split(\".\");r=i.shift();let s=\"\";for(;r.length>3;)s=`${t}${r.slice(-3)}${s}`,r=r.slice(0,-3);return(r+s).trim()+(i.length?\".\":\"\")+i.join(\".\")}};class m{static getLineData(e,t,r=!1){const i={};i.bodytext=this.getBodytext(e,t,r),i.tags=t.getProperty(\"bodytextElements\")||[\"p\"],i.headingTags=t.getProperty(\"bodytextHeadingElements\")||[\"h1\",\"h2\",\"h3\"],i.indexRegister=[];let s=0,n=0;m.analyze(i.bodytext).forEach((e=>{if(i.tags.indexOf(e.tag)>-1){const t={charIndex:e.index,bodytextIndex:s++};i.headingTags.indexOf(e.tag)>-1&&(t.bodytextHeadingIndex=n++),i.indexRegister.push(t)}})),i.indexRegister.reverse();for(const e of i.indexRegister)if(\"number\"==typeof e.bodytextHeadingIndex){e.lastHeading=!0;break}return i}static getBodytext(e,t,r=!1){const i=e.get(\"fields.bodytext\")||\"\";return!r||i?i:t.data.placeholder.bodytext||\"\"}static analyze(e=\"\"){const t=[],r=new RegExp(\"<([\\\\/a-zA-Z0-9\\\\-]*?)(?: .*?)?>\",\"g\"),i={tag:null,index:0,level:0};return e.replace(r,((e,r,s)=>{const n=r.indexOf(\"/\"),o=n>-1?r.replace(\"/\",\"\"):r;i.tag?o===i.tag&&(n<0?i.level++:i.level>0?i.level--:(t.push({tag:i.tag,index:i.index,length:s+e.length-i.index}),i.tag=null)):(i.tag=o,i.index=s)})),t}}class b{constructor(e,t){this.api=e,this.viewport=t.viewport,this.allViewports=this.api.v1.viewport.getAll(),this.mainViewport=this.api.v1.viewport.getMain(),this.logger=t.logger,this.viewManager=t.viewManager,this.lineClassSelector=\"lab-bodytext-line\",this.logger.debug(`Bodytext-helper created. Will prepare data for viewports: ${this.allViewports.join(\", \")}.`)}run(e,t){this.insertContent(e,t)}insertContent(e,t){const r={bodyText:[],bodyTextHeading:[],lastBodyTextHeading:[]};let i=0;const s=m.getLineData(e,t,this.api.v1.app.mode.isEditor());for(const t of e.children){const e=this.viewManager.getView(t),i=e.get(\"metadata.bodyTextIndex\"),n=\"number\"==typeof i?i:null,o=e.get(\"metadata.bodyTextHeadingIndex\");if(e.get(\"metadata.lastBodyTextHeading\")||!1)r.lastBodyTextHeading.push(t);else if(\"number\"==typeof o)r.bodyTextHeading[o]=r.bodyTextHeading[o]||[],r.bodyTextHeading[o].push(t);else if(\"number\"==typeof n)r.bodyText[n]=r.bodyText[n]||[],r.bodyText[n].push(t);else{const e=s.indexRegister[0]?s.indexRegister[0].bodytextIndex+1:0;r.bodyText[e]=r.bodyText[e]||[],r.bodyText[e].push(t)}}let{bodytext:n}=s;for(const e of s.indexRegister){if(void 0!==r.bodyText[e.bodytextIndex]){const t=this.createMarkup(r.bodyText[e.bodytextIndex],e.charIndex,n);n=t.bodytext,i+=t.count}if(void 0!==e.bodytextHeadingIndex&&void 0!==r.bodyTextHeading[e.bodytextHeadingIndex]){const t=this.createMarkup(r.bodyTextHeading[e.bodytextHeadingIndex],e.charIndex,n);n=t.bodytext,i+=t.count}if(e.lastHeading&&r.lastBodyTextHeading.length){const t=this.createMarkup(r.lastBodyTextHeading,e.charIndex,n);n=t.bodytext,i+=t.count}}for(const e of Object.keys(r.bodyText)){const t=r.bodyText[e];if(t&&t.length)for(const e of t){const t=this.viewManager.getView(e);!0!==t.get(\"metadata.skipIfOutOfBounds\")&&(n+=t.getMarkupString(),i++)}}for(const e of r.lastBodyTextHeading){const t=this.viewManager.getView(e);!0!==t.get(\"metadata.skipIfOutOfBounds\")&&(n+=t.getMarkupString(),i++)}Sys.logger.debug(`Bodytext: Parsed bodytext. Inserted ${i} of ${e.children.length} structures. Tags: [${s.tags.join(\", \")}]. Line-count: ${s.indexRegister.length}.`),e.setFiltered(\"lineData\",s),e.setFiltered(\"bodytext\",n)}createMarkup(e,t,r){let i=0,s=\"\";for(;e.length;){const t=e.shift();s+=this.viewManager.getView(t).getMarkupString(),i++}return{count:i,bodytext:y.insertAtPosition(r,t,s)}}getIndexes(e,t){const{indexRegister:r}=m.getLineData(e,t,this.api.v1.app.mode.isEditor());return r.map((e=>e.bodytextIndex))}isBodytextLine(e,t){return e===t||(!!this.api.v1.util.dom.getParentByClass(e,t,this.lineClassSelector)||e.classList.contains(this.lineClassSelector))}getLineClassSelector(){return this.lineClassSelector}}class w{constructor(e,t){this.api=e,this.viewport=t.viewport,this.logger=t.logger,this.viewManager=t.viewManager,this.settings=t.settings,this.isEditor=t.isEditor,this.apiUrl=this.api.v1.properties.get(\"front_api_url\")}prepare(e,t){if(this.isEditor&&e.isPseudo())return;const r=t.getProperty(\"external\");r&&r.fetchInPrepare&&r.url?this.fetchExternalData(e,t,r):r&&r.url||this.logger.warning(`[External] Missing required config \"external\" or \"external.url\" for model ${e.getPositionedPath()}. No external content will be fetched.`)}run(e,t){if(this.isEditor&&e.isPseudo())return;const r=t.getProperty(\"external\");r&&!r.fetchInPrepare&&r.url?this.fetchExternalData(e,t,r):r&&r.url||this.logger.warning(`[External] Missing required config \"external\" or \"external.url\" for model ${e.getPositionedPath()}. No external content will be fetched.`)}fetchExternalData(e,t,r){if(this.settings.fragmentMode){let t;const i=e.isNonPersistent();if(i){const r=this.api.v1.model.query.getRootModel(),i=e.getPositionedPath();r.get(\"fields.labExternalPath\")===i&&(t=r.get(\"fields.labExternalData\"),t&&(e.set(\"fields.isFragment\",\"1\",{notify:!1,registerModified:!1,save:!1,undoable:!1}),e.set(\"metadata.isFragment\",\"1\",{notify:!1,registerModified:!1,save:!1,undoable:!1})))}else t=e.get(\"fields.labExternalData\");if(t){this.logger.debug(`[External] Data is available for ${i?\"non-persistent\":\"persistent\"} element ${e.getPositionedPath()}.`);let s=t;if(t&&this.isExternalData(r))try{s=JSON.parse(t)}catch(t){this.logger.warn(`[External] Cannot parse fetched external data for model ${e.getPositionedPath()}.`),s={}}return void e.set(\"external\",s,{save:!1,undoable:!1})}}const i=this.getUrl(e,t,r,this.isEditor);if(i){if(this.isEditor){const s=e.get(\"state.requireExternal\")||{},n=!0===s[t.getViewport()];return this.viewManager.getExternalContent(e,t,i,r,n),void(n&&(s[t.getViewport()]=!1,e.set(\"state.requireExternal\",s,{save:!1,undoable:!1,notify:!1})))}t.setTemplate(`<div data-lab-placeholder=\"include\" src=\"${i}\" ></div>`)}}isExternalData(e){return\"json\"===e.type}getUrl(e,t,r,i){const s=this.viewManager.getDataForView(e,t),n=Mustache.render(r.url,s);if(!n)return this.logger.debug(`[External] Resolved empty url for model ${e.getPositionedPath()}`),null;lab_api.v1.app.dbg.extensiveLogging&&this.logger.debug(`[External] Resolved url for model ${e.getPositionedPath()}: \"${n}\"`);const o=encodeURIComponent(n),a=[`lab_viewport=${this.viewport}`];if(r.headers){const e={};for(const t of Object.keys(r.headers))e[t]=Mustache.render(r.headers[t],s);a.push(`headers=${encodeURIComponent(JSON.stringify(e))}`)}return this.buildUrl(e,o,i,a)}buildUrl(e,t,r,i){const s=i.length?i.join(\"&\"):null;return r?`${this.api.v1.properties.get(\"proxy\")}?query=${t}${s?`&${s}`:\"\"}`:e.isNonPersistent()?`${this.apiUrl}/external/dynamic-data/${this.settings.contentId}/?path=${encodeURIComponent(e.getPositionedPath())}&url=${t}${s?`&${s}`:\"\"}`:`${this.apiUrl}/external/node/${e.getId()}/${this.settings.contentId}/${t}${s?`?${s}`:\"\"}`}}class v{constructor(e){this.description=e,this.startTime=this.getTime(),this.steps=[]}getTime(){return(new Date).getTime()}start(e=\"[default]\"){return{time:this.getTime(),description:e,duration:0}}stop(e){return e.duration=this.getTime()-e.time,this.steps.push(e),e.duration}step(e=\"[default]\"){const t={time:this.getTime(),description:e};return t.duration=this.steps.length>0?t.time-this.steps[this.steps.length-1].time:t.time-this.startTime,this.steps.push(t),t.duration}getMin(){let e=null,t=null;for(const r of this.steps)(null===e||r.duration<e)&&(e=r.duration,t=r);return{time:e,step:t}}getMax(){let e=0,t=null;for(const r of this.steps)(null===t||r.duration>e)&&(e=r.duration,t=r);return{time:e,step:t}}getSteps(){let e=0,t=0,r=null,i=null,s=null;for(const n of this.steps)e+=n.duration,(null===i||n.duration>t)&&(t=n.duration,i=n),(null===r||n.duration<r)&&(r=n.duration,s=n);return{description:this.description,totalTime:e,minTime:r,maxTime:t,meanTime:Math.round(e/this.steps.length),minTimeStep:s,maxTimeStep:i,steps:this.steps}}}const P={percentToGrid:(e,t=12)=>Math.round(e/100*t),gridToPercent:(e,t=12)=>P.floatPrecision(e/t*100),floatPrecision:e=>parseFloat(parseFloat(e).toFixed(2)),distributePercent:(e,t,r=12)=>P.distributeGrid(P.percentToGrid(e,r),t).map((e=>P.gridToPercent(e,r))),distributeGrid:(e,t)=>{let r=t;r>e&&(r=e,Sys.logger.warn(`grid.distributeGrid: Requested count ${t} is larger than gridSize ${e}. Will use count ${r}.`));const i=e/r;if(Number.isInteger(i))return Array(r).fill(i);let s=0,n=!0,o=[];for(let e=0;e<r;e++){const e=n?Math.ceil(i):Math.floor(i);o.push(e),s+=e,n=!n}let a=s-e;if(s!==e){const e=[];for(;a>0&&o.length;){let t=o.shift();t>1&&(t--,a-=1),e.push(t)}o=o.concat(e)}return o.length!==r&&Sys.logger.warn(`Utility-method grid.distributeGrid will return a faulty array. Excpected a count of ${r}, got ${o.length} ...`),o}},x={getData:(e,t,r,i,s,n)=>{const o=P.percentToGrid(e||100,i.span),a={};for(const e of Object.keys(t))t[e]&&(a[e]=P.percentToGrid(t[e],i.span));const l={width:o,css:\"\",vp:{},cssVp:{}},d=x.getMatchingRule(s,r,i.span);l.vp=x.applyRule(o,a,s.length,d.values,i,n);for(const e of Object.keys(i.prefix))l.cssVp[e]=i.prefix[e]+l.vp[e];return l.css=Object.values(l.cssVp).join(\" \"),l},applyRule:(e,t,r,i,s,n)=>{const o={};for(const a of Object.keys(s.prefix)){let s=null;t[a]?s=t[a]:i[a]&&(s=x.getMatchingRuleValue(i[a],n,r,e)),o[a]=s?parseInt(s,10):e}return o},getMatchingRuleValue:(e,t,r,i)=>{for(const s of Object.keys(e)){if(\"first-child\"===s&&0===t)return e[s];if(\"last-child\"===s&&t===r-1)return e[s];if(\"inherit\"===s&&e[s])return i;if(x.getNthChild(s)===t+1)return e[s]}return e.default?e.default:null},getNthChild:e=>\"nth-child(\"===e.substring(0,10)?parseInt(e.substring(0,e.length-1).substring(10),10):null,getMatchingRule:(e,t,r)=>{const i=e.length;for(let s=t.length-1;s>=0;s--){if(\"odd\"===t[s].condition&&!x.isEven(i))return t[s];if(\"even\"===t[s].condition&&x.isEven(i))return t[s];if(\"number\"==typeof t[s].condition&&t[s].condition===i)return t[s];if(Array.isArray(t[s].condition)&&t[s].condition.length===i){const n=[];for(let t=0;t<i;t++)n.push(P.percentToGrid(e[t],r));if(x.hasArrayMatch(t[s].condition,n))return t[s]}}return{values:{}}},isEven:e=>!(e%2),hasArrayMatch:(e,t)=>{if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(\"*\"!==e[r]&&e[r]!==t[r])return!1;return!0}};class M{constructor(e={}){this.viewportInfo=e,this.cache=new Map,this.buildtin={width:{viewport:{default:!0},fallback:{default:this.viewportInfo.main}},external:{viewport:{default:!0},fallback:{default:this.viewportInfo.main},attributes:{\"*\":{viewport:{default:!0},fallback:{default:this.viewportInfo.main}}}}}}resetCache(){this.cache.clear()}get(e,t,r,i=null,s){const n=this.getCacheKey(t,r,i,s);if(!this.cache.has(n)){let t=e.getProperty(`viewportMap.${r}`);!t&&this.buildtin[r]&&(t=this.buildtin[r]),\"string\"==typeof t&&(t=e.getProperty(`viewportMap.${t}`)),t&&i&&\"string\"==typeof t.attributes&&(t.attributes=e.getProperty(`viewportMap.${t.attributes}`)),this.cache.set(n,this.defineOrder(s,i,t))}return this.cache.get(n)}defineOrder(e,t,r){if(!r)return[];if(t&&(!r.attributes||!r.attributes[t]&&!r.attributes[\"*\"]))return[];const i={viewport:{},fallback:{},...t?r.attributes[t]||r.attributes[\"*\"]:r},s=this.parseMap(e,i);return s.length&&!1!==i.fallback.no_viewport&&s.push(null),s}parseMap(e,t,r=[]){if(!t)return r;if(!1===t.viewport[e])return r;if((!0===t.viewport[e]||t.viewport.default)&&(r.includes(e)||r.push(e)),t.fallback){if(t.fallback[e]&&t.fallback[e]!==e){const i=t.fallback[e];return t.fallback={...t.fallback},delete t.fallback[e],this.parseMap(i,t,r)}if(t.fallback.default&&t.fallback.default!==e){const e=t.fallback.default;return t.fallback={...t.fallback},delete t.fallback.default,this.parseMap(e,t,r)}}return r}getCacheKey(e,t,r,i){return[e,t,r,i].join(\"|\")}}const C={functionMap:{},isValidFunction:e=>{if(void 0!==C.functionMap[e])return C.hasFunction(e);let t;try{t=eval.call(null,e)}catch(e){t=null}return C.functionMap[e]=t,C.hasFunction(e)},hasFunction:e=>typeof C.functionMap[e]==typeof Function,getFunction:e=>!!e&&(C.isValidFunction(e)?C.functionMap[e]:lab_api.v1.ns.get(e)||!1)};class S{constructor(){this.resolved={pathMatch:new Map}}static getPropertyTypeAndIndex(e){const t=/(.+)\\[(.*)\\]/.exec(e);if(!t||t.length<3)return[e,null,!1];const r=t[1],i=t[2]?parseInt(t[2].trim(),10):null;return[r,Number.isInteger(i)?i:null,\"\"===t[2].trim()]}pathMatch(e,t){const r=`${e}||${t}`;if(this.resolved.pathMatch.has(r))return this.resolved.pathMatch.get(r);let i=null;return(this.exactMatch(t,e)||this.wildcardMatch(t,e))&&(i=e),this.resolved.pathMatch.set(r,i),i}exactMatch(e,t){return t.endsWith(\"//\")?e.endsWith(t.slice(0,-1)):t.endsWith(\"/\")?e.endsWith(t):e.endsWith(`${t}/`)}wildcardMatch(e,t){const r=y.trim(t,[\" \",\"/\"]).split(\"/\").reverse(),i=y.trim(e,[\" \",\"/\"]).split(\"/\").reverse();return this.arrayMatch(i,r)}arrayMatch(e,t,r){const i=e.shift(),s=t.shift();return i===s||\"*\"===s?!t.length||this.arrayMatch(e,t):\"\"===s?(e.unshift(i),this.arrayMatch(e,t,!0)):!(!r||!e.length)&&(t.unshift(s),this.arrayMatch(e,t,!0))}static getViewForMenuItem(e){return S.getTarget(e.getModel(),e.getView(),{pathHelper:e.getConfig(\"pathHelper\")}).view}static getTarget(e,t,r={}){const i={model:e,view:t};if(r.pathHelper&&r.pathHelper.type){const e=Array.isArray(r.pathHelper.type)?r.pathHelper.type:[r.pathHelper.type];for(const r of e){const e=this.getTargetForPath(i.model,r);if(e)return i.model=e,i.view=lab_api.v1.view.getView(i.model,t.getViewport()),i}return Sys.logger.warn(`[PathHelper] Cannot get target for source. Check config. Tried \"${r.pathHelper.type}\". Will return original result.`),i}if(r.source&&\"model\"!==r.source){const e=C.getFunction(r.source);if(!e)return Sys.logger.warn(`[PathHelper] Cannot get function for source. Check config. Tried \"${r.source}\". Will return original result.`),i;if(i.model=e(),!i.model)return Sys.logger.warn(`[PathHelper] Cannot get bound source from supplied function. Check config. Tried \"${r.source}\". Will return original result.`),i;i.view=i.model}return i}static getTargetForPath(e,t){const r=t.split(\".\");if(![\"parent\",\"child\",\"root\"].includes(r[0]))return Sys.logger.warn(`[PathHelper] Supplied path not valid. Check config. Tried \"${t}\". Will return original result.`),null;let i;if(\"parent\"===r[0])i=e.getParent();else if(\"root\"===r[0])i=lab_api.v1.model.query.getRootModel();else{const t=r[1],[s,n]=S.getPropertyTypeAndIndex(t);if(null===n)i=lab_api.v1.model.query.getChildOfType(e,s);else{i=lab_api.v1.model.query.getModelsByType(s,e.children)[n]||null}}return i}}class T{constructor(e){this.getView=e.getView,this.getMarkupForModels=e.getMarkupForModels,this.getMarkupString=e.getMarkupString,this.configReader=e.configReader,this.localisation=e.localisation,this.proxies={config:null,cmsConfig:null,root:null,selector:null,preload:null,localisation:null},this.parsedProps=new Map,this.isEditor=this.configReader.getCms(\"app.isEditMode\")}parseProp(e){return this.parsedProps.has(e)||this.parsedProps.set(e,this.doParseProp(e)),this.parsedProps.get(e)}doParseProp(e){const t={prop:e,attr:void 0};if(!e.endsWith(\"]\"))return t;const r=/(.+)\\[(.*)\\]/.exec(e);return!r||r.length<3?t:{prop:r[1],attr:r[2]}}getProxy(e,t=this.getView(e)){return t.getProxy()||t.setProxy(this.createProxy(e,t)),t.getProxy()}createProxy(e,t){const r=(e,r)=>{const i=this.parseProp(r);return i.attr?t.get(`${e}.${i.prop}.${i.attr}`):t.get(`${e}.${i.prop}`)},i=new Proxy({},{get:(e,t)=>r(\"fields\",t),has:(e,t)=>!!r(\"fields\",t)}),s=new Proxy({},{get:(e,r)=>t.get(`metadata.${r}`),has:(e,r)=>!!t.get(`metadata.${r}`)}),n=new Proxy({},{get:(e,r)=>t.get(`filtered.${r}`),has:(e,r)=>!!t.get(`filtered.${r}`)});return new Proxy({},{get:(e,r)=>\"fields\"===r?i:\"metadata\"===r?s:\"filtered\"===r?n:t.get(r),has:(e,r)=>!!t.get(r)})}getRootProxy(){return this.proxies.root||(lab_api.v1.model.query.getRootModel()?this.proxies.root=this.getProxy(lab_api.v1.model.query.getRootModel()):this.proxies.root={}),this.proxies.root}getParentProxy(e,t){return e.parent?this.isEditor?e.parent.isMarkedForDeletion()?null:(t.getParentProxy()||t.setParentProxy(new Proxy(this.getProxy(e.parent),{get:(t,r)=>(e.parent.addToRedrawDependencies(e),t[r]),has:(e,t)=>t in e})),t.getParentProxy()):this.getProxy(e.parent):null}getChildrenProxy(e,t){return t.getChildrenProxy()||t.setChildrenProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith(\"+\")&&(s=!0,i=i.substring(0,i.length-1));const n=\"all\"===i?e.children:lab_api.v1.model.query.getModelsByType(i,e.children,s);return this.getProxiesForModels(n,!0)},has:(e,t)=>!0})),t.getChildrenProxy()}getChildProxy(e,t){return t.getChildProxy()||t.setChildProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith(\"+\")&&(s=!0,i=i.substring(0,i.length-1));let[n,o]=[i,null,!1];if(i.endsWith(\"]\")&&([n,o]=S.getPropertyTypeAndIndex(i)),null===o){const t=lab_api.v1.model.query.getChildOfType(e,n,s);return t?this.getProxiesForModels([t],!1):null}const a=lab_api.v1.model.query.getModelsByType(n,e.children,s);return a[o]?this.getProxiesForModels([a[o]],!1):null},has:(e,t)=>!0})),t.getChildProxy()}getStoreProxy(e,t,r=!1){if(!t.getStoreProxy(r)){const e={};t.setStoreProxy({get:new Proxy(e,{has:()=>!0,get:(e,t)=>t in e?e[t]:\"\"}),set:new Proxy(e,{has:()=>!0,get:(e,t)=>()=>(r,i)=>(e[t]=i(r),\"\")})})}return t.getStoreProxy(r)}getPreloadProxy(e){return this.proxies.preload||(this.proxies.preload=this.createPreloadProxy(e)),this.proxies.preload}createPreloadProxy(e){return new Proxy({},{get:(t,r)=>e.getObject(r),has:(e,t)=>!0})}getChildrenMarkupProxy(e,t){return t.getChildrenMarkupProxy()||t.setChildrenMarkupProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith(\"+\")&&(s=!0,i=i.substring(0,i.length-1));let[n,o,a]=[i,null,!1];i.endsWith(\"]\")&&([n,o,a]=S.getPropertyTypeAndIndex(i));const l=\"all\"===n?e.children:lab_api.v1.model.query.getModelsByType(n,e.children,s);return null===o?this.getMarkupForModels(l,a):this.getMarkupForModels(l[o]?[l[o]]:[],!1)},has:(e,t)=>!0})),t.getChildrenMarkupProxy()}getChildMarkupProxy(e,t){return t.getChildMarkupProxy()||t.setChildMarkupProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith(\"+\")&&(s=!0,i=i.substring(0,i.length-1));let[n,o]=[i,null];i.endsWith(\"]\")&&([n,o]=S.getPropertyTypeAndIndex(i));const a=lab_api.v1.model.query.getModelsByType(n,e.children,s);return a.length?null===o||0===o?this.getMarkupForModels([a[0]],!1):this.getMarkupForModels(a[o]?[a[o]]:[],!1):\"\"},has:(e,t)=>!0})),t.getChildMarkupProxy()}getSelectorProxy(){if(!this.proxies.selector){const e={get:(e,t)=>{const r=lab_api.v1.model.query.getModelBySelector(t);return r?this.getMarkupString(r,this.getView(r)):\"\"},has:(e,t)=>!0};this.proxies.selector=new Proxy({},e)}return this.proxies.selector}getConfigProxy(){if(!this.proxies.config){const e={get:(e,t)=>this.configReader.get(t),has:(e,t)=>!0};this.proxies.config=new Proxy({},e)}return this.proxies.config}getCmsConfigProxy(){if(!this.proxies.cmsConfig){const e={get:(e,t)=>this.configReader.getCms(t),has:(e,t)=>!0};this.proxies.cmsConfig=new Proxy({},e)}return this.proxies.cmsConfig}getLocalisationProxy(){return this.proxies.localisation||(this.proxies.localisation=()=>(e,t)=>this.localisation.get(e,{fallbackValue:\"\"})),this.proxies.localisation}getProxiesForModels(e,t=!0){const r=e.map((e=>this.getProxy(e)));return t?r:r[0]}}class k extends h{constructor(e){super({behaviours:e.behaviours,entries:e.entries,debug:e.settings.debug}),this.logger=e.logger,this.state={isEditor:!1},this.settings=e.settings,this.logger.debug(`Creating instance of ViewManager for viewport ${e.viewport}.`),this.resourceManager=e.resourceManager,this.configReader=e.configReader,this.configProcessor=e.configProcessor,this.viewMap=new Map,this.gridSettings=this.getGridSettings(),this.viewport={name:e.viewport,main:this.configProcessor.getMainViewport(),isMain:this.configProcessor.isMainViewport(),width:this.configProcessor.getViewportWidth()},this.styleManager=e.styleManager,this.preloadHandler=e.preloadHandler,this.localisation=e.localisation,this.viewportsSettings=this.configReader.get(\"viewports\")||{},this.ViewHelpers={};const t=new M(this.viewport);this.viewEventPipe={getViewportOrder:t.get.bind(t)},this.rootModel=null,this.proxyManager=new T({configReader:this.configReader,localisation:this.localisation,getView:this.getView.bind(this),getMarkupForModels:this.getMarkupForModels.bind(this),getMarkupString:this.getMarkupString.bind(this)}),this.renderers={renderViewTemplate:this.renderViewTemplate.bind(this),renderViewPartial:this.renderViewPartial.bind(this),renderPartial:this.renderPartial.bind(this),renderPageElement:this.renderPageElement.bind(this)},this.renderHelpers={trim:()=>(e,t)=>t(e).replace(/\\t|\\r\\n|\\n|\\r/gm,\" \").replace(/ +/gm,\" \").trim(),sanitizeString:()=>(e,t)=>y.sanitizeString(t(e)),stripTags:()=>(e,t)=>y.stripTags(t(e)),stripLinks:()=>(e,t)=>y.stripLinks(t(e)),encodeURIComponent:()=>(e,t)=>encodeURIComponent(t(e)),cachebuster:()=>e=>{const t=e.split(\",\"),r=\"cms\"===t[0]?\"cms\":\"view\",i=this.configReader.getCms(`deployTimestamps.${r}`);if(!i)return\"\";return`${(t[1]||\"?\")+(t[2]||\"v\")}=${i}-L4`},toFixed:()=>(e,t)=>{const[r,i]=t(e).trim().split(\" \");return parseFloat(r).toFixed(i)}}}apiReady(e){this.ViewHelpers={image:new f(e,this.getViewHelperParams()),bodytext:new b(e,this.getViewHelperParams()),external:this.getExternalViewHelper(e)}}getGridSettings(){const e=this.configProcessor.getViewport(),t={prefix:this.configReader.get(\"grid.grid_prefix\"),absPrefix:this.configReader.get(\"grid.abs_grid_prefix\"),span:this.configReader.get(\"grid.total_grid_spans\")};return t.prefix[e]||(t.prefix[e]=\"\"),t}getViewHelperParams(){return{viewport:this.viewport.name,logger:this.logger,viewManager:this,isEditor:this.state.isEditor,settings:this.settings}}getViewHelper(e){return e in this.ViewHelpers?this.ViewHelpers[e]:null}getExternalViewHelper(e){return new w(e,this.getViewHelperParams())}allowViewport(e){const t=e.get(\"metadata.viewportBlacklist\");return!t||!Array.isArray(t)||!t.includes(this.viewport.name)}draw(e=[],t=null){this.emitEvent(\"render\",this.viewport.name),this.logger.debug(`[ViewManager] Start rendering for viewport ${this.viewport.name}.`);const r=new v(\"ViewManager.draw\");for(const t of e)this.drawModel(t);this.logger.debug(`[ViewManager] Rendering finished for viewport ${this.viewport.name}. Element-count: ${lab_api.v1.model.query.getModelsFromCache().length}. Duration ${r.step()} ms.`);let i=[];for(const t of e){const e=this.getView(t);i.push(e.getMarkupString())}const s=this.notifyFrontRendered(i);return s.length&&(this.logger.warn('[ViewManager] Listener for event \"app-rendered\" has modified markup returned from rendering engine.'),i=s.pop()),\"function\"==typeof t&&t(i),i}notifyFrontRendered(e){return this.requestEvent(\"rendered\",e,this.viewport.name)}drawModel(e,t=!0){if(lab_api.v1.app.dbg.logger.add(this.constructor.name,\"drawModel\",this.viewport.name),!this.allowViewport(e))return void this.logger.debug(`[ViewManager] Element ${e.getPositionedPath()} is not allowed on viewport ${this.viewport.name}.`);const r=this.getView(e);if(this.prepareDrawing(e,r),t){const t=r.getProperty(\"childLimit\");for(const r of e.children)this.allowChild(e,r,t)&&this.drawModel(r)}this.drawPrepared(e,r)}allowChild(e,t,r){return t.get(\"metadata.hideViewport\",this.viewport.name)?(this.logger.warn(`[ViewManager] Metadata \"hideViewport\" has cancelled rendering of element \"${t.getPositionedPath()}\" for viewport \"${this.viewport.name}\".`),this.hideViewportDetected(t)):!(r&&e.children.indexOf(t)>=r)||(this.logger.warn(`[ViewManager] Child-limit (${r}) reached for \"${e.getType()}\". Child: \"${t.getPositionedPath()}\". Viewport \"${this.viewport.name}\".`),this.childLimitDetected(e,t,r))}childLimitDetected(e,t,r){const i=this.requestEvent(\"childLimitReached\",e,t,this.viewport.name,r);return!!i.length&&!!i.pop()}hideViewportDetected(e){const t=this.requestEvent(\"elementHidden\",e,this.viewport.name);return!!t.length&&!!t.pop()}prepareDrawing(e,t){const r=this.performanceLogger.start([\"prepare\",e.getType()]);this.prepareView(e,t),t.getGrid()||(this.getAndSetGridData(e,t),this.gridIsDefined(e,t)),this.proxyManager.getProxy(e,t),this.notifyOnPrepareViewHelper(e,t),this.prepareViewHelper(e,t),this.notifyOnReady(e,t),this.performanceLogger.end(r)}gridIsDefined(e,t){}drawPrepared(e,t){let r=this.performanceLogger.start([\"assembleData\",e.getType()]);const i=this.getDataForView(e,t);this.performanceLogger.end(r),this.runViewHelper(e,t),this.notifyBeforeElementDraw(e,t),r=this.performanceLogger.start([\"template\",e.getType()]),this.renderTemplate(e,t,i),this.performanceLogger.end(r),this.markupStringReady(e,t)}markupStringReady(e,t){this.notifyOnRendered(e,t)}notifyOnPrepareViewHelper(e,t){e.isPseudo()||this.emitBehaviour(\"onPrepareViewHelper\",e,t)}notifyOnReady(e,t){e.isPseudo()||this.emitBehaviour(\"onReady\",e,t)}notifyOnViewHelper(e,t){e.isPseudo()||this.emitBehaviour(\"onViewHelper\",e,t)}notifyBeforeElementDraw(e,t){e.isPseudo()||(this.emitBehaviour(\"onRender\",e,t),this.emitEntry(\"onRender\",e,t))}notifyOnRendered(e,t){this.emitBehaviour(\"onRendered\",e,t),this.emitEntry(\"onRendered\",e,t)}getDataForView(e,t){return t.getData()||this.getAndSetViewData(e,t)}createView(e){const t=e.getGuid();return this.viewMap.get(t)||this.viewMap.set(t,this.newViewInstance(e)),this.viewMap.get(t)}newViewInstance(e){return new p(this.viewport.name,e,this.viewEventPipe)}getView(e){return this.viewMap.get(e.getGuid())||this.createView(e)}getViews(){return this.viewMap.values()}prepareView(e,t){t.isPrepared()||(lab_api.v1.app.dbg.logger.add(this.constructor.name,\"prepareView\",this.viewport.name),this.setTemplate(e,t),this.setProperties(e,t),this.viewIsResolved(e,t))}setTemplate(e,t){t.setTemplate(this.resourceManager.getTemplateForModel(e,t))}setProperties(e,t){t.setProperties(this.resourceManager.getPropertiesForModel(e,t),!0)}viewIsResolved(e,t){t.setPreparedState(!0)}prepareViewHelper(e,t){if(e.isPseudo())return;const r=t.getProperty(\"viewHelper\");if(!r)return;const i=this.getViewHelper(r);if(i){if(i.prepare){const r=this.performanceLogger.start([\"viewhelper-prepare\",e.getType()]);i.prepare(e,t),this.performanceLogger.end(r)}}else this.logger.warning(`[ViewManager] Cannot find view-helper ${r} for model ${e.getPositionedPath()}.`)}runViewHelper(e,t){if(e.isPseudo())return;const r=t.getProperty(\"viewHelper\");if(!r)return;const i=this.getViewHelper(r);if(i){this.notifyOnViewHelper(e,t);const r=this.performanceLogger.start([\"viewhelper-run\",e.getType()]);i.run(e,t),this.performanceLogger.end(r)}else this.logger.warning(`[ViewManager] Cannot find view-helper ${r} for model ${e.getPositionedPath()}.`)}renderTemplate(e,t,r){lab_api.v1.app.dbg.extensiveLogging&&this.logger.debug(`[ViewManager] Start renderTemplate for model ${e.getPositionedPath()}`),e.getNoRenderState()?this.logger.debug(`[ViewManager] Model-state disallows rendering model \"${e.getPositionedPath()}\".`):this.renderTemplateAndData(e,t,r)}getAndSetViewData(e,t){const r=this.getViewData(e,t);return t.setData(r),r}getGridData(e){const t=e.getGrid()||{};return{width:t.width,absWidth:e.getAbsoluteGridWidth(),css:t.css,absCss:e.getAbsGridCss(),vp:t.vp,absVp:e.getAbsoluteGridWidths(),cssVp:t.cssVp,percentage:P.gridToPercent(t.width)}}getViewData(e,t){const r=lab_api.v1.model.query.getRootModel()||e.getRootParent(),i=lab_api.v1.view.getView(r,t.getViewport());return{get:{current:this.proxyManager.getProxy(e,t),parent:this.proxyManager.getParentProxy(e,t),root:this.proxyManager.getRootProxy(),child:this.proxyManager.getChildProxy(e,t),children:this.proxyManager.getChildrenProxy(e,t),store:this.proxyManager.getStoreProxy(e,t)},set:{store:this.proxyManager.getStoreProxy(e,t,!0)},getPreload:this.proxyManager.getPreloadProxy(this.preloadHandler),child:this.proxyManager.getChildMarkupProxy(e,t),childByIndex:()=>(t,r)=>{const[i,s]=r(t).trim().split(\" \"),n=parseInt(i,10)||0,o=s?lab_api.v1.model.query.getChildrenOfType(e,s):e.getChildren();return o[n]?this.getMarkupString(o[n],this.getView(o[n])):null},children:this.proxyManager.getChildrenMarkupProxy(e,t),selector:this.proxyManager.getSelectorProxy(e,t),size:{grid:this.getGridData(t),pixelWidth:t.getPixelWidth(),pixelWidths:t.getPixelWidths()},style:{definition:()=>(r,i)=>this.styleManager.getStyleFromDefinition(e,t,i(r)),collection:()=>(r,i)=>this.styleManager.getStyle(e,t,i(r))},app:{viewport:{name:this.viewport.name,width:this.viewport.width,main:this.viewport.main,isMain:this.viewport.isMain},isEditor:this.state.isEditor,isFront:!this.state.isEditor},render:{template:this.renderers.renderViewTemplate,partial:this.renderers.renderViewPartial,sitePartial:this.renderers.renderPartial,pageElement:this.renderers.renderPageElement},helper:{trim:this.renderHelpers.trim,sanitizeString:this.renderHelpers.sanitizeString,stripTags:this.renderHelpers.stripTags,stripLinks:this.renderHelpers.stripLinks,encodeURIComponent:this.renderHelpers.encodeURIComponent,cachebuster:this.renderHelpers.cachebuster,toFixed:this.renderHelpers.toFixed},calculator:{add:()=>(e,t)=>{const[r,i]=t(e).trim().split(\" \");return parseFloat(r)+parseFloat(i)},subtract:()=>(e,t)=>{const[r,i]=t(e).trim().split(\" \");return parseFloat(r)-parseFloat(i)},divide:()=>(e,t)=>{const[r,i]=t(e).trim().split(\" \");return parseFloat(r)/parseFloat(i)},multiply:()=>(e,t)=>{const[r,i]=t(e).trim().split(\" \");return parseFloat(r)*parseFloat(i)}},if:()=>(e,t)=>{const r={\"=\":(e,t)=>e==t,\"!=\":(e,t)=>e!=t,\"<\":(e,t)=>e<t,\">\":(e,t)=>e>t,\"[]\":(e,t)=>e.includes(t)};let i=0,s=null,n=[];for(;n.length<2&&i<Object.keys(r).length;)s=Object.keys(r)[i++],n=e.split(s);if(n.length>1){const[e,i]=n.map((e=>t(e).trim()));if(r[s](e,i))return\"1\"}return\"\"},getConfig:this.proxyManager.getConfigProxy(),getCmsConfig:this.proxyManager.getCmsConfigProxy(),image:{getFrontCropUrl:this.getFrontCropUrlHelper(r,i)},lang:this.proxyManager.getLocalisationProxy()}}getFrontCropUrlHelper(e,t){return()=>(t,r)=>{const i=e.get(\"frontCrop\");if(i&&i.pano){const e=r(t).split(\",\"),s=parseInt(e[0],10),n=parseInt(e[1],10),o=e[2]||void 0,a=this.getViewHelper(\"image\").generateUrl(i.pano.fields,{instanceOf:i.pano.instance_of,imageUrlOptionsNameValue:i.pano.instance_of,imageId:i.pano.instance_of,width:s,height:n,format:o});if(a)return a}const s=(lab_api.v1.config.get(\"faviconList\")||[]).pop();return s&&s.iconPath?s.iconPath.startsWith(\"http\")?s.iconPath:lab_api.v1.properties.get(\"customer_front_url\")+s.iconPath:\"\"}}renderPageElement(){return(e,t)=>{const r=e.trim().split(\" \"),i=t(r.shift()),s=t(r.shift())||i,n=lab_api.v1.config.get(`pageElements.${i}`);if(!n)return this.renderViewPartial()(s,t);const o=this.getTemplate(\"widgets/structures/root\");return o?t(this.renderPageElementRecursive(o,n)):(this.logger.warn('[ViewManager] Cannot find root-widget at \"widgets/structures/root\". Widget not rendered.'),\"\")}}getTemplate(e){return this.resourceManager.templates[e]}renderPageElementRecursive(e,t,r={value:1}){const{viewport:i,pageType:s,flag:n}=t.requirements||{};if((!i||i===this.viewport.name)&&(!s||s===this.configProcessor.getPageType())&&(!n||lab_api.v1.util.featureFlags.enabled(n,this.settings.contentId))){const i=r.value,s=t.settings||{},n=[];if(t.children)for(let e=0;e<t.children.length;e++){const i=t.children[e],s=this.getTemplate(`widgets/${i.type}`);if(s){r.value++;const e=this.renderPageElementRecursive(s,i,r);e&&n.push(e)}else this.logger.warn(`[ViewManager] Cannot find widget at \"widgets/${i.type}\". Widget not rendered.`)}const{tags:o}=Mustache;Mustache.tags=[\"[[\",\"]]\"];const a=Mustache.render(e,{children:n.join(\"\"),settings:s,id:i});return Mustache.tags=o,a}return null}renderViewTemplate(){return(e,t)=>{const r=t(e.trim());return r&&this.getTemplate(r)?t(this.getTemplate(r)):(this.logger.debug(`Render template: Path is not valid: '${r}'`),\"\")}}renderViewPartial(){return(e,t)=>this.renderPartialWithFallback(e.trim(),t)}renderPartial(){return(e,t)=>this.renderPartialWithOutFallback(e.trim(),t)}renderPartialWithOutFallback(e,t){return this.renderViewTemplate()(`partial/${e}`,t)}renderPartialWithFallback(e,t,r=null,i=[]){const s=r||lab_api.v1.site.getSite().alias,n=this.renderViewTemplate(),o=n(`partial/site/${s}/${e}`,t);if(!o){i.push(s);const r=lab_api.v1.config.get(\"lab_fallback_site\",s);return r&&!i.includes(r)?this.renderPartialWithFallback(e,t,r,i):n(`partial/${e}`,t)}return o}getPixelWidths(e,t){const r=t.getPixelWidths();if(r)return r;const i=t.getAbsoluteGridWidths(),s=i[this.viewport.main],n={};for(const e in this.viewportsSettings)if(this.viewportsSettings[e]){const t=i[e]?i[e]:s;n[e]=Math.ceil(t/this.gridSettings.span*this.viewportsSettings[e].deviceWidth)}return n}calculateGridData(e,t){const r=this.viewport.main,i=t.getWidth(),s=e.getViewportWidths();let n=[i],o=t.getProperty(\"gridRules\")||[];if(Array.isArray(o)||(o=Object.values(o)),o.length){const t=e.parent?e.parent.getPersistentChildren():null;t&&(n=t.map((e=>e.getWidth(r)||e.getWidth())))}return x.getData(i,s,o,this.gridSettings,n,e.getModelIndex(!0))}calculateAbsoluteGridWidths(e,t){const r=t.getGrid().vp;r||this.logger.error(\"gridWidths do not exist. It should ...\");let i={};if(e.parent){const t=this.getView(e.parent);i=this.getAbsoluteGridWidths(e.parent,t)||i}const s={};for(const e of Object.keys(r))s[e]=P.floatPrecision(r[e]/this.gridSettings.span*(i[e]||this.gridSettings.span));return s}getAbsoluteGridWidths(e,t){return t.getAbsoluteGridWidths()}getAbsoluteGridCss(e,t){if(!this.gridSettings.absPrefix)return\"\";const r=t.getAbsoluteGridWidths();return Object.keys(r).map((e=>this.gridSettings.absPrefix[e]?this.gridSettings.absPrefix[e]+r[e]:\"\")).join(\" \")}getAndSetGridData(e,t){const r=this.calculateGridData(e,t);t.setGrid(r),t.setGridWidth(r.vp[this.viewport.name]),t.setAbsoluteGridWidths(this.calculateAbsoluteGridWidths(e,t)),t.setAbsGridCss(this.getAbsoluteGridCss(e,t)),t.setPixelWidths(this.getPixelWidths(e,t))}renderTemplateAndData(e,t,r){t.setMarkupString(Mustache.render(t.getTemplate(),r,this.resourceManager.templates))}getMarkupForModels(e,t=!0){const r=e.map((e=>this.getMarkupString(e,this.getView(e))));return t?r:r.join(\"\")}getMarkupString(e,t){return t.getMarkupString()}getPlaceholders(){return{}}getMarkup(e){return this.getView(e).getMarkup()}}const $={create(){if(\"undefined\"!=typeof crypto&&crypto.randomUUID)return crypto.randomUUID();let e=(new Date).getTime();return\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,(t=>{const r=(e+16*Math.random())%16|0;return e=Math.floor(e/16),(\"x\"===t?r:7&r|8).toString(16)}))}};class R{constructor(e,t={}){this.parent=null,this.children=[],this.path=e.path,this.data={type:e.type,metadata:e.metadata,contentdata:e.contentdata,width:R.validateInputWidth(e.width),guid:e.guid||$.create(),selector:e.selector},this.fallbackData=e.fallback,this.source={model:null,targets:[],keys:[]};const r=e.state||{};this.state={isNonPersistent:!!r.isNonPersistent,isPseudo:!!r.isPseudo,noRender:!1},this.cache={serialized:null,filtered:e.filtered||{},external:e.external||null,getter:new Map,path:null,positionedPath:{persistent:null,nonPersistent:null},childCount:{value:0}},this.eventPipe={keyModified:t.keyModified,childAdded:t.childAdded}}static validateInputWidth(e){const t=R.getEmptyDataObject();t.value=\"number\"==typeof e?e:100;const r=n.object(e,t);return r.value||0!==Object.keys(r.vp).length||(r.value=100),r}static getEmptyDataObject(){return{value:null,vp:{}}}getNoRenderState(){return this.state.noRender}setNoRenderState(e){this.state.noRender=!!e}setDataProperty(e,t){this.data[e]=t}getId(){return this.data.contentdata&&this.data.contentdata.id||null}getGuid(){return this.data.guid}isNonPersistent(){return this.state.isNonPersistent||this.state.isPseudo}isPseudo(){return this.state.isPseudo}isDerived(){return!!this.source.model}hasNodeData(e=!1){if(this.data.contentdata)return!0;if(e)for(const t of this.children)if(t.hasNodeData(e))return!0;return!1}getSourceModel(){return this.source.model}setSourceModel(e,t){this.source.model=e,this.source.keys=t}addSourceTarget(e){this.source.targets.includes(e)||this.source.targets.push(e)}getSourceTargets(){return this.source.targets}hasSourceKey(e){if(!this.source.model)return!1;if(!this.source.keys.length)return!0;const t=e.split(\".\");for(;t.length;){if(this.source.keys.includes(t.join(\".\")))return!0;t.pop()}return!1}hasKeyInTarget(e){for(const t of this.source.targets)if(t.hasSourceKey(e))return!0;return!1}isSourceKey(e){return this.source.keys.includes(e)}setParent(e){this.parent=e}getParent(){return this.parent}getRootParent(){return this.parent?this.parent.getRootParent():this}getChildren(){return this.children}getPersistentChildren(){return this.children.filter((e=>!e.isNonPersistent()))}getNonpersistentChildren(){return this.children.filter((e=>e.isNonPersistent()))}getPersistentSiblings(){return this.parent?this.parent.getPersistentChildren():null}addChild(e,t,r=!1){this.addChildAtIndex(e,r?0:this.children.length,t)}addChildAtIndex(e,t,r=!0,i=!1){return e.setParent(this),this.children.length<=t?this.children.push(e):this.children.splice(t,0,e),e.resetPath(),!i&&this.eventPipe.childAdded&&this.eventPipe.childAdded(this,e,t),this.children}getPath(e=!1){return null===this.cache.path&&(this.cache.path=this.parent?`${this.parent.getPath()}/`:this.path),this.cache.path+(e?\"\":this.getType())}getArrayPath(e=!1){return this.getPath(e).split(\"/\").filter((e=>!!e))}getPositionedPath(e=!1){return e?this.getPersistentPositionedPath():this.getNonPersistentPositionedPath()}getPersistentPositionedPath(){if(null===this.cache.positionedPath.persistent){let e=this.getModelIndexByType(!0);-1===e&&(e=0),this.cache.positionedPath.persistent=`${(this.parent?`${this.parent.getPersistentPositionedPath()}/`:this.path)+this.getType()}[${e}]`}return this.cache.positionedPath.persistent}getNonPersistentPositionedPath(){if(null===this.cache.positionedPath.nonPersistent){let e=this.getModelIndexByType(!1);-1===e&&(e=0),this.cache.positionedPath.nonPersistent=`${(this.parent?`${this.parent.getNonPersistentPositionedPath()}/`:this.path)+this.getType()}[${e}]`}return this.cache.positionedPath.nonPersistent}resetPath(){this.cache.path=null,this.cache.positionedPath={persistent:null,nonPersistent:null};for(const e of this.children)e.resetPath()}isStage(){return this.getRootParent().getType().startsWith(\"page_\")}getModelIndex(e=!1){if(!this.parent)return-1;return(e?this.parent.getPersistentChildren():this.parent.children).indexOf(this)}getModelIndexByType(e=!1){if(!this.parent)return-1;const t=this.getType();let r=-1;for(const i of e?this.parent.getPersistentChildren():this.parent.getChildren())if(i.getType()===t&&(r++,i===this))return r;return r}getType(){return this.data.type}getWidth(e){return e?this.data.width.vp[e]||null:this.data.width.value||100}getViewportWidths(){return this.getRaw(\"width.vp\")||{}}setSelector(e){this.data.selector=e}getSelector(){return this.data.selector}getData(e,t){return e?s.get(e,this.data.contentdata,t):this.data.contentdata}getDataObjectForKey(e,t=!1){if(!t&&this.hasSourceKey(e)){const t=this.source.model.getDataObjectForKey(e);return t.sourceModel=this.source.model,t}const r=e.split(\".\")[0];return\"fields\"===r?{base:r,data:this.data.contentdata,fallback:this.fallbackData?this.fallbackData.contentdata:void 0}:\"filtered\"===r||\"external\"===r||\"childCount\"===r?{base:r,data:this.cache,fallback:void 0}:\"metadata\"===r||\"width\"===r||\"type\"===r||\"guid\"===r?{base:r,data:this.data,fallback:this.fallbackData?this.fallbackData:void 0}:\"state\"===r?{base:r,data:this,fallback:void 0}:{base:\"\",data:this.data.contentdata,fallback:void 0}}getRaw(e,t){return e?s.get(e,this.data,t):this.data}setRaw(e,t,r){const i=this.buildQuery(e);if(!i.isVpObj)return void Sys.logger.warn(`LabModel: Cannot set raw value for key \"${e}\". Not supported.`);const n={...r};delete n.viewport;const o=this.getRaw(e);if(!o&&!t)return;const a=Object.keys(t&&t.vp||{}),l=Object.keys(o&&o.vp||{});for(const r of l)a.includes(r)&&t||this.set(e,void 0,{...n,viewport:r});for(const r of a)this.set(e,t.vp[r],{...n,viewport:r});this.set(e,t?t.value||null:void 0,{...n,predefinedQuery:i}),t||s.delete(e,this.data)}validateVpModelData(e){return!!e&&(\"object\"==typeof e&&(void 0!==e.value||void 0!==e.vp))}buildQuery(e,t){const r=e.split(\".\"),i={min:\"width\"===r[0]||\"external\"===r[0]||\"childCount\"===r[0]?1:2,max:\"fields\"===r[0]||\"filtered\"===r[0]?2:1},s=\"metadata\"===r[0]||\"fields\"===r[0]||\"width\"===r[0]||\"external\"===r[0]||\"childCount\"===r[0],n=\"external\"===r[0],o={path:r.slice(0,i.max).join(\".\"),allowSource:![\"childCount\",\"filtered\",\"metadata\"].includes(r[0]),attribute:r.length>i.max?r[i.max]:null,key:r.slice(0,i.max+1).join(\".\"),fullPath:e,raw:e,type:s?r[0]:null,isVpObj:s,isValidated:!(s&&!n)||r.length<=i.max+1&&r.length>=i.min};return n&&(o.attribute=r.slice(i.min).join(\".\"),o.key=e),o.isVpObj&&(n?o.fullPath=t?`${r.slice(0,i.max).join(\".\")}.vp.${t}${o.attribute?`.${o.attribute}`:\"\"}`:`${r.slice(0,i.max).join(\".\")}.value${o.attribute?`.${o.attribute}`:\"\"}`:\"fields\"===o.type&&o.path.endsWith(\"_json\")?(o.fullPath=`${o.path}.value${o.attribute?\".\":\"\"}${r.slice(2).join(\".\")}`,o.isValidated=!0):(o.fullPath=o.attribute?`${o.path}.${\"fields\"===o.type?\"attributes.\":\"\"}${o.attribute}`:o.path,o.fullPath+=t?`.vp.${t}`:\".value\")),o}get(e,t,r,i){lab_api.v1.app.dbg.logger.add(this.constructor.name,\"get\");const n=this.getCacheKey(e,t,r),o=r?void 0:null;if(this.cache.getter.has(n))return this.getCacheValue(n);const a=i||this.buildQuery(e,t);if(!a.isValidated)return Sys.logger.warn(`LabModel: Cannot get unvalid key: \"${e}\".`),this.cache.getter.set(n,o),o;const l=this.getDataObjectForKey(e,!a.allowSource);let d=s.get(a.fullPath,l.data,!0);return void 0===d&&l.fallback&&(d=s.get(a.fullPath,l.fallback,!0)),void 0===d?(this.cache.getter.set(n,o),o):(this.cache.getter.set(n,d),this.getCacheValue(n))}getCacheValue(e){const t=this.cache.getter.get(e);return t&&\"object\"==typeof t?Array.isArray(t)?[...t]:{...t}:t}getCacheKey(e,t=\"lab_main\",r=!1){return`${e}-${r?1:0}-${t||\"lab_main\"}`}getAttributeObject(e){const t=this.buildQuery(e);if(!t.isVpObj)return null;const r=this.getDataObjectForKey(e,!0),i=s.get(t.path,r.data,!0);if(!i)return null;const n=\"fields\"===t.type?i.attributes:i;return t.attribute&&!n[t.attribute]?null:t.attribute?{[t.attribute]:n[t.attribute]}:n}set(e,t,{viewport:r=null,notify:i=!0,checkDerived:n=!0,registerModified:o=!0,save:a=!0,predefinedQuery:l=null,undoable:d=!0}={}){if(lab_api.v1.app.dbg.logger.add(this.constructor.name,\"set\"),!e)return!1;let h=t;const g=l||this.buildQuery(e,r);if(!g.isValidated)return Sys.logger.warn(`LabModel: Cannot set value for key. Key not valid: ${e}.`),!1;const c=this.getDataObjectForKey(e,!g.allowSource);if(!c.data)return Sys.logger.warn(`LabModel: Trying to set data on a non-existing object. Skipping. Key: \"${e}\". Model-path: \"${this.getPath()}\".`),!1;const p=s.get(g.fullPath,c.data,!0);if(p===h)return!1;if(p&&void 0===h&&\"fields\"===g.type&&(h=null),g.isVpObj&&void 0===p&&void 0===s.get(g.path,c.data,!0)&&s.set(g.path,R.getEmptyDataObject(),c.data),i){if(!this.dataWillSet(g.key,h))return Sys.logger.debug(`Pre-set listener has cancelled setting data for path ${e} at model ${this.getPath()}.`),!1;d&&lab_api.v1.history&&lab_api.v1.history.getManager().add(lab_api.v1.history.getManager(),\"modelSetter\",[this.getGuid(),e,p,{viewport:r,notify:i,registerModified:o,save:!1,predefinedQuery:g,undoable:!1}])}return s.set(g.fullPath,h,c.data),this.keyModified(g.key,r),o&&(this.registerModified(e),c.sourceModel&&c.sourceModel.registerModified(e)),i&&this.dataIsSet(g.key,h,e,a,n),!0}keyModified(e,t){this.eventPipe.keyModified&&this.eventPipe.keyModified(this,e,t)}setFiltered(e,t){return this.set(`filtered.${e}`,t,{notify:!1,save:!1,registerModified:!1})}getSerializedCache(){return this.cache.serialized}setSerializedCache(e){this.cache.serialized=e}dataWillSet(e,t,r){return!0}dataIsSet(e,t,r){}registerModified(e){}}const j={internalToBackend(e,t=!0){const r={...e};r.type=e.type||null,r.id=e.id||null,r.tmpId=e.tmpId||null,r.instance_of=e.instance_of||null,r.parent=e.parent||null,e.status&&(r.status=e.status),r.site_id=e.site_id||null;const i={viewports_json:{}};for(const e of Object.keys(r.fields||{})){let t=r.fields[e];\"object\"==typeof t&&null!==t||(t={value:t}),this.internalFieldToBackend(e,t,i)}return r.fields=i,r},backendToInternal(e,t=[],r=!0){const i=this.backendToInternalStructure(e.structure,t);return e.contentdata&&(i.contentdata=this.backendToInternalNode(e.contentdata)),i},viewToInternal(e,t,r=lab_api.v1.viewport.getEditable()){let i=!0,n=e;Array.isArray(e)||(i=!1,n=[e]);const o=[],a=[\"contentdata\",\"metadata\",\"children\",\"width\"];for(const e of n){const i=t?s.merge(t,e):e,n={width:{value:null,vp:{}}};i.width&&(\"object\"==typeof i.width?n.width.vp=i.width:(n.width.value=i.width,i.metadata&&\"object\"==typeof i.metadata.width&&(n.width.vp=i.metadata.width)));for(const e in i)a.includes(e)||(n[e]=i[e]);i.children&&(n.children=this.viewToInternal(i.children,t)),i.contentdata&&(n.contentdata=this.backendToInternalNode(i.contentdata)),i.metadata&&(n.metadata=this.backendToInternalStructureMeta(i.metadata,r)),o.push(n)}return i?o:o[0]},backendToView(e,t=!1){const r=e.fields?{fields:e.fields}:null;r&&(r.type=e.type||null,r.tags=e.tags||void 0,r.instance_of=e.instance_of||null,r.apiResult=e.apiResult,t||(r.id=e.id||void 0));const i=e.width&&\"object\"==typeof e.width?e.width.value:e.width||null;return{type:e.type||null,metadata:e.metadata||{},width:i,contentdata:r,children:(e.children||[]).map((e=>this.backendToView(e)))}},apiToData(e,t,r){const i={},s={...t.field||{}},{viewports_json:n}=s;delete s[\"@attributes\"],delete s.viewports_json;for(const e of Object.keys(s))t.field[e]&&(\"object\"==typeof s[e]&&0===Object.keys(s[e]).length?i[e]=\"\":i[e]=s[e]);if(n)try{i.viewports_json=JSON.parse(n)}catch(e){Sys.logger.error(`[serializer] Failed to parse viewports_json: ${e.toString()}`)}return{type:e,id:r&&r.removeId?void 0:t.attribute.id,instance_of:t.attribute?t.attribute.instanceof_id:null,fields:i}},apiToInternal(e,t,r){const i=this.backendToInternalNode(j.apiToData(e,t));return r&&r.removeId&&delete i.id,i},backendToInternalNode(e){const t={...e},r={};if(t.fields&&t.fields.viewports_json)for(const e of Object.keys(t.fields.viewports_json))for(const r of Object.keys(t.fields.viewports_json[e].fields||{}))void 0===t.fields[r]&&(t.fields[r]=null);if(t.fields)for(const e of Object.keys(t.fields||{}))if(e.endsWith(\"_style_json\")){const r=e.replace(\"_style_json\",\"\");t.fields[r]||(t.fields[r]=null)}for(const e of Object.keys(t.fields||{}))if(!e.endsWith(\"_style_json\")&&\"viewports_json\"!==e){r[e]={value:t.fields[e],vp:this.getViewportKey(e,t.fields),attributes:{}};for(const i in t.fields[`${e}_style_json`]||{})void 0!==t.fields[`${e}_style_json`][i]&&(r[e].attributes[i]={value:t.fields[`${e}_style_json`][i],vp:{}});for(const i in t.fields.viewports_json||{})if(t.fields.viewports_json[i].fields&&void 0!==t.fields.viewports_json[i].fields[`${e}_style_json`])for(const s in t.fields.viewports_json[i].fields[`${e}_style_json`])void 0!==t.fields.viewports_json[i].fields[`${e}_style_json`]&&(r[e].attributes[s]||(r[e].attributes[s]={value:null,vp:{}}),r[e].attributes[s].vp[i]=t.fields.viewports_json[i].fields[`${e}_style_json`][s])}return t.fields=r,t},backendToInternalStructure(e,t){const r=e.metadata?this.backendToInternalStructureMeta(e.metadata,t):{},i={guid:e.id||$.create(),selector:e.selector||null,metadata:r,type:e.type||null,width:{value:e.width?P.floatPrecision(e.width):100,vp:r.width?r.width.vp:{}},children:[]};return delete i.metadata.width,i},backendToInternalStructureMeta(e,t){const r={};for(const i of Object.keys(e))if(r[i]={value:null,vp:{}},\"object\"!=typeof e[i]||Array.isArray(e[i]))r[i].value=e[i];else for(const s of Object.keys(e[i]||{}))t.includes(s)?r[i].vp[s]=e[i][s]:(r[i].value||(r[i].value={}),r[i].value[s]=e[i][s]);return r},internalToBackendStructureMeta(e){const t={};for(const r of Object.keys(e)){const i=e[r];let s=!1;for(const e of Object.keys(i.vp||{}))s=!0,t[r]||(t[r]={}),t[r][e]=i.vp[e];s||void 0===i.value||(t[r]=i.value)}return t},getViewportKey(e,t){const r={};if(!t.viewports_json)return r;for(const i in t.viewports_json)t.viewports_json[i].fields&&void 0!==t.viewports_json[i].fields[e]&&(r[i]=t.viewports_json[i].fields[e]);return r},internalFieldToBackend(e,t,r){if(!t)return;const i=r;i[e]=t.value;for(const r of Object.keys(t.vp||{}))i.viewports_json||(i.viewports_json={}),i.viewports_json[r]||(i.viewports_json[r]={fields:{}}),i.viewports_json[r].fields[e]=t.vp[r];if(t.attributes){const r=`${e}_style_json`;for(const e of Object.keys(t.attributes)){void 0!==t.attributes[e].value&&(i[r]||(i[r]={}),i[r][e]=t.attributes[e].value);for(const s of Object.keys(t.attributes[e].vp||{}))i.viewports_json||(i.viewports_json={}),i.viewports_json[s]||(i.viewports_json[s]={fields:{}}),i.viewports_json[s].fields[r]||(i.viewports_json[s].fields[r]={}),i.viewports_json[s].fields[r][e]=t.attributes[e].vp[s]}}},filterModifiedContent(e,t){const r={fields:{}},i=e.getModifiedPaths(),n=e.data.contentdata.fields||{};for(const e of i)if(e.startsWith(\"fields.\")){const t=e.replace(\"fields.\",\"\"),i=n[t];this.internalFieldToBackend(t,i,r.fields)}else e.startsWith(\"state.\")||s.set(e,s.get(e,t),r);return r}};class O extends h{constructor(e,t,r,i,s=!1){super({entries:r,behaviours:i,debug:s}),this.configReader=e,this.resourceManager=t,this.models=[],this.cache={id:new Map,guid:new Map},this.eventPipe={keyModified:this.keyModified.bind(this),childAdded:this.childAdded.bind(this)},this.cacheHandler=null}static validateViewInput(e={},t=[],{useExisting:r=!1,intermediateUseExisting:i=!0}={}){for(const r of t)if(!e[r])return null;if(!e.data)return null;if(!e.data.type)return null;const s={...e};return s.options={...s.options||{}},s.options.front=!1!==s.options.front,s.options.editor=!1!==s.options.editor,s.options.frontpage=!0===s.options.frontpage,s.options.articlepage=!0===s.options.articlepage,s.options.template=s.options.template||null,s.options.useExisting=void 0===s.options.useExisting?r:s.options.useExisting,s.options.intermediate=s.options.intermediate||{},s.options.intermediate.useExisting=void 0===s.options.intermediate.useExisting?i:s.options.intermediate.useExisting,s.options.persistentTarget=!!s.options.persistentTarget,s.options.append&&(s.options.append=n.object(s.options.append,{match:\"\",index:0})),s.options.prepend&&(s.options.prepend=n.object(s.options.prepend,{match:\"\",index:0})),s}setCacheHandler(e){this.cacheHandler=e}getModelsFromCache(){return Array.from(this.cache.guid.values())}getChildModels(e){const t=[],r=e=>{for(const t of e.children)r(t);t.push(e)};return r(e),t}getModels(){return this.models}getModelById(e){return this.cache.id.get(e)||null}getModelByGuid(e){return this.cache.guid.get(e)||null}getModelBySelector(e){for(const t of this.getModelsFromCache())if(t.getSelector()===e)return t;return null}getModelTypes(e){return e?[...new Set(this.getChildModels(e).map((e=>e.getType())))]:[...new Set(this.getModelsFromCache().map((e=>e.getType())))]}recursiveGetModelByAttribute(e,t,r){}getRootModel(){return this.models[0]}getParentNodeId(e){if(e.parent)return e.parent.hasNodeData()?e.parent.getId():this.getParentNodeId(e.parent);const t=this.getRootModel();return t===e?null:t.getId()}getModelByType(e,t=this.getModelsAsArray()){for(const r of t)if(r.getType()===e)return r;return null}getChildOfType(e,t,r=!1){const i=Array.isArray(t)?t:[t];for(const t of e.children)if(i.includes(t.getType()))return t;if(!r)return null;for(const r of e.children){const e=this.getChildOfType(r,t,!0);if(e)return e}return null}getChildrenOfType(e,t,r=!1,i=!1){const s=[],n=Array.isArray(t)?t:[t];for(const t of e.children)!n.includes(t.getType())||t.isNonPersistent()&&i||s.push(t);if(!r)return s;for(const r of e.children){const e=this.getChildrenOfType(r,t,!0,i);e&&s.push(...e)}return s}getModelsByKeyAndValue(e,t,r=this.getModelsAsArray()){return r.filter((r=>r.get(e)==t))}getModelsByPath(e,t=!0,r=!1,i=null){let s=[];const n=y.trim(e,\"/\").split(\"/\");let o=n.shift();const a=y.parsePath(o).shift(),l=null!==a.index;l&&(o=a.base);let d=i;i||(d=\"*\"===o?this.models:this.getModelsByType(o,this.models));const h=[];for(let e=0;e<d.length;e++)\"*\"!==o&&d[e].getType()!==o||d[e].isNonPersistent()&&!r||h.push(d[e]);if(l?h[a.index]?s.push(h[a.index]):!t&&h.length&&(a.index>=h.length?s.push(h[h.length-1]):s.push(h[0])):s=h,!s.length)return[];if(n.length){let e=[];for(let i=0;i<s.length;i++)s[i].children.length&&(e=e.concat(this.getModelsByPath(n.join(\"/\"),t,r,s[i].children)));return e}return s}getModelByPath(e,t=!0,r=!1,i=null){const s=this.getModelsByPath(e,t,r,i);return s.length?s[0]:null}getModelsByQuery(e=\"\",t=this.getModelsAsArray()){const r=e.trim().toLowerCase();return t.filter((e=>e.getType().toLowerCase().indexOf(r)>-1))}getModelsByType(e,t=this.models,r=!0){const i=[];return t.forEach((t=>{t.getType()===e&&i.push(t),r&&i.push(...this.getModelsByType(e,t.children,r))})),i}getNextContentModel(e){let t=this.getRightSibling(e);if(t){const e=this.getFirstContentModel(t);if(e)return e}return e.getParent()&&(t=this.getNextContentModel(e.getParent()),t)?t:null}getParentOfType(e,t,r=!0){const i=e.getParent();return i?i.getType()===t?i:r?this.getParentOfType(i,t,!0):null:null}getLeftSibling(e){if(!e.getParent())return null;const t=e.getModelIndex(!0);if(0===t)return null;return e.getParent().getPersistentChildren()[t-1]||null}getRightSibling(e){if(!e.getParent())return null;const t=e.getModelIndex(!0),r=e.getParent().getPersistentChildren();return r[t+1]?r[t+1]:null}hasChildOfType(e,t,r=!1){return!!this.getChildOfType(e,t,r)}hasChildOfTypes(e,t,r=!1){for(const i of t)if(this.getChildOfType(e,i,r))return!0;return!1}hasChild(e,t){if(!e.children.length)return!1;for(const r of e.children){if(this.is(r,t))return!0;if(this.hasChild(r,t))return!0}return!1}hasParentOfType(e,t,r=!1){return!!this.getParentOfType(e,t,r)}hasParentOfTypes(e,t,r=!1){if(!e||!Array.isArray(t))return!1;for(const i of t)if(this.getParentOfType(e,i,r))return!0;return!1}hasParent(e,t){return!!e.parent&&(!!this.is(e.parent,t)||this.hasParent(e.parent,t))}getModelsAsArray(e=null){let t=[];for(const r of e||this.models)t=t.concat(this.getChildModels(r));return t}getIndex(e,t=!1){return e?e.getModelIndex(t):null}getPath(e,t=!1){return e?e.getPath(t):null}getArrayPath(e,t=!1){return e?e.getArrayPath(t):[]}resetCache(){this.cache.id.clear(),this.cache.guid.clear()}addToCache(e,t=!0){if(e.isPseudo())return;t&&e.children.forEach((e=>this.addToCache(e))),this.cache.guid.set(e.getGuid(),e);const r=e.getId();r&&this.cache.id.set(r,e)}setData(e=[],t=!0){this.resetCache(),this.models=this.newModels(e,!1)}newModels(e=[],t=!0){const r=[];for(const t of e){const e=this.newModel(t);e&&r.push(e)}return r}newModelInstance(e){return new R(e,this.eventPipe)}modelCreated(e){this.addToCache(e)}modelsAdded(e){}newModel(e,t=!0){const r=this.modelData(e);if(!r)return Sys.logger.warn(\"ModelController: Data do not validate. Cannot create new instance of LabModel.\"),null;const i=this.newModelInstance(r);if(e.children)for(const r of e.children){const e=this.newModel(r,t);e&&i.addChild(e,t)}return this.modelCreated(i),i}modelData(e){if(!e.type)return Sys.logger.warn('ModelController: Required attribute \"type\" is missing. Cannot create data for new LabModel.'),null;const t=e;let r=\"\";t.path&&(r=`${y.trim(t.path,[\"/\"])}/`);const i=this.configReader.get(`data.elements.${t.type}.fallbackData`);return{uncreated:!1,type:t.type,path:r,width:\"width\"in t?t.width:null,metadata:\"metadata\"in t?{...t.metadata}:{},state:\"state\"in t?{...t.state}:{},contentdata:\"contentdata\"in t&&t.contentdata?{...t.contentdata}:null,filtered:\"filtered\"in t&&t.filtered?{...t.filtered}:null,selector:\"selector\"in t?t.selector:null,external:\"external\"in t?t.external:null,guid:\"guid\"in t?t.guid:null,fallback:i?j.viewToInternal(i):null}}insertAtPath(e){const t=O.validateViewInput(e,[\"path\"],{useExisting:!1});if(!t)return Sys.logger.warn('ModelController: Cannot insert model at path. Missing required input \"path\", \"data\", or \"data.type\".'),null;Sys.logger.debug(`ModelController: Will insert model of type ${t.data.type} at path ${t.path}.`);const r=this.ensurePath(t.path,t.options.persistentTarget,t.options.intermediate.useExisting);if(!r)return Sys.logger.warn(`ModelController: No model inserted at path ${t.path}. Parent not found and could not be created.`),null;const i=this.insertAtParent(r,t.data,t.options);return Sys.logger.debug(`ModelController: Did insert model at path ${t.path}. Type: ${i.getType()}, path: ${i.getPositionedPath()}.`),i}insertBySelector(e){const t=O.validateViewInput(e,[\"selector\"],{useExisting:!1});if(!t)return Sys.logger.warn('ModelController: Cannot insert model by selector. Missing required input \"selector\", \"data\", or \"data.type\".'),null;Sys.logger.debug(`ModelController: Will insert model of type ${t.data.type} at selector ${t.selector}.`);const r=this.getModelBySelector(t.selector);if(!r)return Sys.logger.warn(`ModelController: No model inserted at selector ${t.selector}. Model not found.`),null;const i=this.insertAtParent(r,t.data,t.options);return Sys.logger.debug(`ModelController: Did insert model at selector ${t.selector}. Type: ${i.getType()}, path: ${i.getPositionedPath()}.`),i}insertAtParent(e,t,r={}){const i={};t.state&&t.state.isNonPersistent&&(i.state={isNonPersistent:!0});const s=this.newModel(j.viewToInternal(t,i));if(e)if(\"number\"==typeof r.index){let{index:t}=r;if(r.persistentTarget){const i=(r.match?this.getModelsByType(r.match,e.children||[],!1):e.children||[]).filter((e=>!e.isNonPersistent())),s=r.index<i.length&&r.index>=0?i[r.index]:i[i.length-1];t=this.getIndex(s)}e.addChildAtIndex(s,t)}else e.addChild(s,!0,r.prepend);else r.prepend?this.models.unshift(s):this.models.push(s);return this.modelsAdded([s],r.silent),s}addElement(e){const t={};e.data.state&&e.data.state.isNonPersistent&&(t.state={isNonPersistent:!0});const r=this.ensurePath(e.path,e.options.persistentTarget,e.options.intermediate.useExisting,t);return r&&e.options.useExisting&&(e.data.selector?this.getModelBySelector(e.data.selector):this.getChildOfType(r,e.data.type))?null:this.insertAtParent(r,e.data,e.options)}allowInsetion(e){const t={frontpage:()=>\"page_front\"===lab_api.v1.model.query.getRootModel().getType(),articlepage:()=>\"page_article\"===lab_api.v1.model.query.getRootModel().getType(),noticepage:()=>\"page_notice\"===lab_api.v1.model.query.getRootModel().getType(),template:e=>lab_api.v1.model.query.getRootModel().get(\"fields.page_template_alias\")===e,front:lab_api.v1.app.mode.isFront,editor:lab_api.v1.app.mode.isEditor},r=r=>{for(const i of r)if(e.options[i]&&t[i](e.options[i]))return!0;return!1};return!!r([\"front\",\"editor\"])&&(!(e.options.template&&!r([\"template\"]))&&r([\"frontpage\",\"articlepage\",\"noticepage\"]))}ensurePath(e,t,r=!0,i=null){const s=r?this.getModelsByPath(e,!0,!t).shift():null;if(s)return s;let n=\"\",o=null;const a=y.parsePath(e);for(;a.length;){const e=a.shift();if(!e.base)return o;const s=e.index||0;let l=0,d=!1;const h=`${n}${e.base}[${s}]`;for(;l<=s;){if(!r&&!a.length&&l===s||!this.getModelsByPath(h,!0,!t).length){const t=i?{...i}:{};t.type=e.base;const r=this.newModel(t,!1);o?null!==e.index?o.addChildAtIndex(r,e.index):o.addChild(r):this.models.push(r),this.modelsAdded([r]),l===s&&(o=r,d=!0),Sys.logger.debug(`ModelController: Inserted intermediate model type ${e.base} at path ${r.getPositionedPath()}.`)}l++}n+=`${e.path}/`,o=d?o:this.getModelsByPath(n,!0,!t).shift()}return o}keyModified(e,t,r,i=!0){if(i){if(e.hasKeyInTarget(t))for(const i of e.getSourceTargets())this.keyModified(i,t,r,!1);e.hasSourceKey(t)&&this.keyModified(e.getSourceModel(),t,r)}this.cacheHandler.resetKey(e,t,r),this.triggerRedrawByKey(e,t,r)}childAdded(){}triggerRedrawByKey(e,t,r){}noRender(e){e&&e.setNoRenderState(!0)}notifyOnAcceptContent(e=this.getRootModel(),t=!0){this.emitBehaviour(\"onAcceptContent\",e),t&&e.children.forEach((e=>{this.notifyOnAcceptContent(e,t)}))}}class V{constructor(e){this.totalGridSpans=e||12,this.backendNodes=new Map,this.nodeChildren={},this.activeNodes=[],this.offstageTypes=[\"pasteboard\"],this.requireContentdata=[\"article\"]}backendToInternal(e={},t={}){if(!e.data||!e.structure)return Sys.logger.debug(\"[DataTransformer] Unsupported input data. Require { data: {...}, structure: []\"),[];const r=e.data,i=e.structure;this.registerBackendNodes(r);const s=lab_api.v1.viewport.getEditable(),n=j.backendToInternal({contentdata:this.backendNodes.get(r.id),structure:{type:`page_${r.type}`}},s,!1),o=[n];for(const e of i)if(t.skipOffstage&&this.offstageTypes.includes(e.type))Sys.logger.debug(`[DataTransformer] Skipping offstage-element \"${e.type}\".`);else{const r=this.createModelData(e,t.blacklist||[],t.blacklistOptions||{},s);r&&(this.offstageTypes.includes(e.type)?o.push(r):n.children.push(r))}return this.activeNodes.push(r.id),o}modelsToFragmentApi(e,{viewport:t=null,stringify:r=!1,recursive:i=!0}={}){const s=e.map((e=>this.modelToFragmentApi(e,i,t)));return r?s.map((e=>JSON.stringify(e))):s}modelToFragmentApi(e,t,r){const i={nodedata:this.modelToBackend(e,t),isNonPersistent:e.isNonPersistent(),type:e.getType(),width:e.getWidth(r),id:e.getGuid(),node_id:e.getId(),guid:e.getGuid()};if(t){i.children=[];for(const t of e.children)i.children.push(this.modelToFragmentApi(t))}return i}modelToBackend(e,t=!1){let r;const i=e.getSerializedCache();if(i?(lab_api.v1.app.dbg.logger.add(e.constructor.name,\"modelToBackend[cache]\"),r=i):(lab_api.v1.app.dbg.logger.add(e.constructor.name,\"modelToBackend\"),r=e.data.contentdata?{...j.internalToBackend(e.data.contentdata)}:{},e.data.contentdata&&(r.parent=lab_api.v1.model.query.getParentNodeId(e)),r.guid=e.data.guid,r.metadata=j.internalToBackendStructureMeta(e.data.metadata),r.metadata.width=e.getViewportWidths(),r.width=e.getWidth(),e.data.selector&&(r.selector=e.data.selector),r.type=e.data.type.replace(\"page_\",\"\"),e.data.tmpId&&(r.tmpId=e.data.tmpId),e.setSerializedCache({...r})),t&&e.children.length){r.children=[];for(const t of e.children)t.isNonPersistent()||r.children.push(this.modelToBackend(t,!0))}return r}apiToInternal({type:e,data:t={},meta:r={},options:i={removeId:!1}}={}){const s=j.apiToInternal(e,t,i),{metadata:n,width:o}=j.viewToInternal({metadata:r,width:r.width});return{type:s.type,contentdata:s,width:o,metadata:n}}apiToView({type:e,data:t={},meta:r={},options:i={removeId:!1}}={}){const s=j.apiToData(e,t,i),n=j.internalToBackend(s);return{type:n.type,contentdata:n,width:r.width,metadata:r}}modelToInternal(e,t=!0,r=!1){const i=JSON.parse(JSON.stringify(e.data));if(r&&(i.contentdata&&delete i.contentdata.id,delete i.guid),i.children=[],!t)return i;for(const t of e.children)i.children.push(this.modelToInternal(t,!0,r));return i}modelToView(e,t=!0,r=!1){const i=this.modelToBackend(e,t);return j.backendToView(i,r)}modelsToView(e,t=!0){return e.map((e=>this.modelToView(e,t)))}modifiedToBackend(e,t,r=!0,i=!1){const s=[];for(const e of t)e.getType().startsWith(\"page_\")?s.push(...e.getPersistentChildren()):s.push(e);const n=this.removeFrontCrops(s);return{node:e.map((e=>this.modelNodeToBackend(e,r,i))),structure:n.map((e=>this.modelStructureToBackend(e)))}}removeFrontCrops(e){return e.filter((e=>!e.get(\"fields.metadata_key\")))}modelNodeToBackend(e,t=!1,r=!1){const i=this.modelToBackend(e,r);if(t&&!e.isDirty()){const t=j.filterModifiedContent(e,i),r=this.modelNodeBaseToBackend(e);return s.merge(r,t)}return delete i.metadata,delete i.width,i}modelNodeBaseToBackend(e){if(Array.isArray(e))return e.map((e=>this.modelNodeBaseToBackend(e)));const t=this.modelToBackend(e),r={type:t.type||null,id:t.id||null,guid:t.guid||null,tmpId:t.tmpId||null,instance_of:t.instance_of||null,parent:t.parent||null,status:t.status||null,site_id:t.site_id||null};return t.primaryTags&&(r.primaryTags=t.primaryTags),t.tags&&(r.tags=t.tags),r}modelStructureToBackend(e,t=!1){const r=this.modelToBackend(e),i={type:r.type,width:r.width,metadata:r.metadata,id:r.guid,selector:r.selector,children:[]};return r.id&&(i.node_id=r.id),e.isNonPersistent()&&(i.isNonPersistent=!0),e.children.forEach((e=>{!t&&e.isNonPersistent()||i.children.push(this.modelStructureToBackend(e,t))})),i}registerBackendNodes(e){if(e.id&&this.backendNodes.set(e.id,this.prepareBackendNode(e)),e.children){this.nodeChildren[e.id]=[];for(const t of e.children)this.registerBackendNodes(t),t.id&&this.nodeChildren[e.id].push(t.id)}}prepareBackendNode(e){const t={};for(const r in e)\"children\"!==r&&(t[r]=e[r]);return t}createModelData(e,t,r,i,s={}){if(t.includes(e.type)){if(r[e.type]&&r[e.type].includeChildren&&e.children&&s.children){Sys.logger.warn(`[DataTransformer] Found blacklisted element \"${e.type}\". Skipping. Will include and move children to parent element.`);for(const n of e.children){const e=this.createModelData(n,t,r,i);e&&s.children.push(e)}}else Sys.logger.warn(`[DataTransformer] Found blacklisted element \"${e.type}\". Skipping.`);return null}const n=j.backendToInternal({contentdata:e.node_id?this.backendNodes.get(e.node_id):null,structure:e},i,!1);if(this.requireContentdata.includes(n.type)&&!n.contentdata)return Sys.logger.debug(`[DataTransformer] Found \"${n.type}\" without node-data. Skipping.`),null;n.contentdata&&this.activeNodes.push(n.contentdata.id);for(const t in n.width.vp)n.width.vp[t]?n.width.vp[t]&&n.width.vp[t]<=this.totalGridSpans&&Number.isInteger(parseFloat(n.width.vp[t],10))&&(Sys.logger.warn(`[DataTransformer] Will modify Lab3-width for element \"${e.type}\", viewport \"${t}\". Was: \"${n.width.vp[t]}\", New value: \"${P.gridToPercent(n.width.vp[t],this.totalGridSpans)}\"`),n.width.vp[t]=P.gridToPercent(n.width.vp[t],this.totalGridSpans)):delete n.width.vp[t];if(!e.children){if(!(n.contentdata&&n.contentdata.id&&this.nodeChildren[n.contentdata.id]))return n;e.children=[];for(const t of this.nodeChildren[n.contentdata.id])if(!this.activeNodes.includes(t)){const r=this.backendNodes.get(t);r&&(e.children.push({type:r.type,node_id:t}),Sys.logger.warn(`[DataTransformer] Adding structure-data for deprecated node-child. Type: ${r.type}, id: ${t}`))}}for(const s of e.children){const e=this.createModelData(s,t,r,i,n);e&&n.children.push(e)}return n}}class F{constructor(e,t,r){this.renderer=t,this.log=r,this.styles={definitions:new Map,collections:new Map},this.setupStyles(F.resolveConfig(e||{})),this.styleByKey={},this.defaultItemTemplate=\"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}\"}static resolveConfig(e={}){const t={definitions:{},collections:[]};for(const r of Object.keys(e.definitions||{})){const i=F.resolveDefinition(e.definitions[r]);i&&(t.definitions[r]=i)}const r=Array.isArray(e.collections)?e.collections:Object.values(e.collections||{});for(const e of r){const r=F.resolveCollection(e);r&&t.collections.push(r)}return t}static resolveDefinition(e={}){if(!Array.isArray(e.items)||!e.items.length)return null;const t={requirePath:n.false(e.requirePath),path:n.string(e.path),template:n.stringOrNull(e.template),items:[]};for(const r of e.items){const e=F.resolveItem(r);e&&t.items.push(e)}return t}static resolveItem(e={}){const t=Array.isArray(e.fallback)?e.fallback:[];return\"string\"==typeof e.fallback&&t.push(e.fallback),{prefix:n.string(e.prefix),postfix:n.string(e.postfix),viewport:n.string(e.viewport),value:n.string(e.value),fallback:t,nullValue:n.stringOrUndefined(e.nullValue)}}static resolveCollection(e){const t=n.string(e.name),r=n.array(e.definitions),i=n.array(e.additions);if(!t||!r.length&&!i.length)return null;const s=[];for(const e of[...r,...i])if(\"string\"==typeof e)s.includes(e)||s.push(e);else{const t=F.resolveDefinition(e);t&&s.push(t)}return{name:t,definitions:s}}setupStyles(e={}){for(const t of Object.keys(e.definitions))this.styles.definitions.set(t,e.definitions[t]);for(const t of e.collections)this.styles.collections.set(t.name,t.definitions);this.log.debug(`StyleManager: Set up and ready. Holds ${this.styles.definitions.size} definitions and ${this.styles.collections.size} collections.`)}getStyleFromDefinition(e,t,r=\"\",i){if(!this.styles.definitions.size)return\"\";const{name:s,path:n,target:o,targetType:a,index:l}=this.getInputValues(r),d=this.getTargetModel(e,o,a,l);return d?this.getStyleFromDefinitionNamePath(d,s,n,null,i):\"\"}getStyleFromDefinitionNamePath(e,t,r,i,s){const n=this.getDefinition(t);return n?this.parseDefinition(e,t,r,n,i,s):(this.log.warn(`StyleManager: Cannot find style-definition \"${t}\". Empty string returned.`),\"\")}getStyle(e,t,r=\"\",i){if(!this.styles.collections.size)return\"\";const{name:s,path:n,target:o,targetType:a,index:l}=this.getInputValues(r),d=this.getTargetModel(e,o,a,l);if(!d)return this.log.warn(`StyleManager: Cannot find target-model \"${o}\". Empty string returned. Model: ${e.getPositionedPath()}`),\"\";const h=this.getCollection(s);if(!h)return this.log.warn(`StyleManager: Cannot find style-collection \"${s}\". Empty string returned.`),\"\";const g=[];for(const e of h){const t=this.parseDefinition(d,s,n,e,null,i);t&&g.push(t)}return g.join(\" \").trim()}getCollection(e){return this.styles.collections.get(e)}getDefinition(e){return this.styles.definitions.get(e)}getTargetModel(e,t,r,i){if(\"current\"===t)return e;if(\"parent\"===t)return e.getParent();if(\"root\"===t)return lab_api.v1.model.query.getRootModel();if(\"child\"===t){if(null===i)return lab_api.v1.model.query.getChildOfType(e,r);return lab_api.v1.model.query.getModelsByType(r,e.children)[i]||null}return e}getInputValues(e=\"\"){const t=(e||\"\").split(\" \").map((e=>e.trim())).filter((e=>!!e)),r=t.shift();let i=t.shift()||\"\",s=\"current\",n=null,o=null;if(i.startsWith(\"parent.\"))s=\"parent\",i=i.replace(\"parent.\",\"\");else if(i.startsWith(\"root.\"))s=\"root\",i=i.replace(\"root.\",\"\");else if(i.startsWith(\"current.\"))i=i.replace(\"current.\",\"\");else if(i.startsWith(\"child.\")){const e=i.split(\".\");s=e.shift();const t=e.shift();i=e.join(\".\"),[o,n]=S.getPropertyTypeAndIndex(t)}return{name:r,path:i||null,target:s,targetType:o,index:n}}getItemsViewports(e){const t={};for(const r of e)if(r.viewport&&(t[r.viewport]=!0),r.fallback)for(const e of r.fallback)t[e]=!0;return Object.keys(t)}parseDefinition(e,t,r,i,s,n){let o=i;if(\"string\"==typeof i&&(o=this.getDefinition(i),!o))return this.log.warn(`StyleManager: Cannot find style-definition \"${i}\". Empty string returned.`),\"\";const a=[];if(o.requirePath&&!r)return this.log.warn(`StyleManager: Missing required path for style \"${t}\".`),\"\";const l=o.requirePath?r:\"\";for(const t of o.items){const r=this.getItemValueWithFallback(e,o.path,t,l,o.items,s,n);null!=r&&\"\"!==r&&a.push({...t,value:r})}if(!a.length)return\"\";return this.renderer(o.template||this.defaultItemTemplate,{items:a}).trim().split(\" \").filter(((e,t,r)=>r.indexOf(e)===t)).join(\" \")}getItemValueWithFallback(e,t,r,i,s,n,o){const a=i+(i&&t?\".\":\"\")+t,l=this.getItemValue(e,r,a,n,o);if(void 0!==l||\"current_viewport\"===r.viewport)return l;const d={...r};for(d.fallback=[...d.fallback];d.fallback.length;){const t=d.fallback.shift();d.viewport=t;const r=this.getItemValue(e,d,a,n,o);if(r)return r}}getItemValue(e,t,r,i,s){let n,{viewport:o}=t;if(\"no_viewport\"===o?o=\"\":\"current_viewport\"===o&&(o=s),i)if(o){n=(i.vp||{})[o]}else n=i.value;else n=e.get(r,o,!0);return null!==n&&\"\"!==n&&!1!==n||void 0===t.nullValue?n&&t.value?t.value:n:t.nullValue}}class A{constructor(e){this.headers=e.Headers||{},this.queryString=e.queryString||\"\",this.params=this.parseQueryString(this.queryString)}parseQueryString(e){const t={},r=e.split(\"&\");for(const e of r){const r=e.split(\"=\");2===r.length&&(t[r[0]]=r[1])}return t}getHeaders(){return this.headers}getHeader(e){return this.headers[e]||null}getQueryString(){return this.queryString}getQueryParam(e){return this.params[e]}hasQueryParam(e){return void 0!==this.getQueryParam(e)}hasQueryValue(e,t){return(this.getQueryParam(e)||\"\").split(\",\").includes(t)}}class _{constructor(e,t){this.logger=t,this.siteAlias=e,this.log(`Site-alias: ${this.siteAlias}`),this.featureFlags=[],this.cache={}}prepareFlags(e){const t=[];return Array.isArray(e)&&e.forEach((e=>{if(\"group\"===e.type){const r=e.enabled;e.flags.forEach((e=>{e.enabled=r&&e.enabled,t.push(e)}))}else t.push(e)})),this.cache[this.siteAlias]=t,t}enabled(e,t=\"\"){this.featureFlags=this.cache[this.siteAlias]||this.prepareFlags(lab_api.v1.config.getFeatureFlags().flags||[]);return this.featureFlags.filter((r=>{if(Array.isArray(t)){const i=t.map(String);return r.key===e&&(!r.nodeId||i.indexOf(r.nodeId)>-1)&&!0===r.enabled}return r.key===e&&(!r.nodeId||r.nodeId===t.toString())&&!0===r.enabled})).length>0}get(e,t=\"\"){return this.featureFlags.filter((r=>r.key===e&&r.nodeId===t.toString()))}log(e,t=null){this.logger&&(t?this.logger.debug(`FeatureFlags: ${e}`,[t]):this.logger.debug(`FeatureFlags: ${e}`))}}class I{static getWords(e){return e.replaceAll(\".\",\" \").replaceAll(\"!\",\" \").split(\" \").filter((e=>\"\"!==e))}static getSentences(e){return e.replaceAll(\"!\",\".\").split(\".\").filter((e=>\"\"!==e))}static getReadTime(e,t){const r=I.getWords(e).length/(t||250);return r<.5?.5:Math.round(r)}static lix(e){if(!e)return null;const t=I.getWords(e),r=I.getSentences(e),i=t.filter((e=>e.length>6));return t.length/r.length+100*i.length/t.length}}class D{constructor(){this.ns={}}create(e={}){return{app:{dbg:{logger:{add:()=>{}}},logError:(e={})=>{e&&e.toString&&Sys.logger.debug(`CMS-error: ${e.toString()}`)},logViewError:(e={},t)=>{e&&e.toString&&Sys.logger.debug(`View-error: ${e.toString()}`)},mode:{get:e.configProcessor.getAppMode.bind(e.configProcessor),getSimulatedMode:e.configProcessor.getSimulatedMode.bind(e.configProcessor),isEditor:e.configProcessor.isEditMode.bind(e.configProcessor),isFragmentMode:e.configProcessor.isFragmentMode.bind(e.configProcessor),isFront:e.configProcessor.isPresentationMode.bind(e.configProcessor)},off:e.appManager.off.bind(e.appManager),on:e.appManager.on.bind(e.appManager)},config:{debug:e.configReader.debug.bind(e.configReader),get:e.configReader.get.bind(e.configReader),getConfig:e.configReader.getConfig.bind(e.configReader),getContent:e.configReader.getContent.bind(e.configReader),getFeatureFlags:e.configReader.getFeatureFlags.bind(e.configReader),getPathForSite:e.configReader.getPathForSite.bind(e.configReader),getStorePathForSite:e.configReader.getStorePathForSite.bind(e.configReader),getView:e.configReader.getView.bind(e.configReader),reloadResourceBySite:e.configReader.reloadResourceBySite.bind(e.configReader)},grid:{gridToPercent:P.gridToPercent,percentToGrid:P.percentToGrid},image:{getPreferredImageFormat:e.configProcessor.getPreferredImageFormat.bind(e.configProcessor)},locale:{get:e.localisation.get.bind(e.localisation),off:e.localisation.off.bind(e.localisation),on:e.localisation.on.bind(e.localisation)},model:{getArrayPath:e.modelController.getArrayPath,getPageType:e.configProcessor.getPageType.bind(e.configProcessor),getPath:e.modelController.getPath,insert:{atPath:e.modelController.insertAtPath.bind(e.modelController),bySelector:e.modelController.insertBySelector.bind(e.modelController)},noRender:e.modelController.noRender,off:e.modelController.off.bind(e.modelController),on:e.modelController.on.bind(e.modelController),query:{getChildOfType:e.modelController.getChildOfType.bind(e.modelController),getChildrenOfType:e.modelController.getChildrenOfType.bind(e.modelController),getIndex:e.modelController.getIndex.bind(e.modelController),getModelByGuid:e.modelController.getModelByGuid.bind(e.modelController),getModelById:e.modelController.getModelById.bind(e.modelController),getModelByPath:e.modelController.getModelByPath.bind(e.modelController),getModelBySelector:e.modelController.getModelBySelector.bind(e.modelController),getModelByType:e.modelController.getModelByType.bind(e.modelController),getModels:e.modelController.getModels.bind(e.modelController),getModelsAsArray:e.modelController.getModelsAsArray.bind(e.modelController),getModelsByKeyAndValue:e.modelController.getModelsByKeyAndValue.bind(e.modelController),getModelsByPath:e.modelController.getModelsByPath.bind(e.modelController),getModelsByQuery:e.modelController.getModelsByQuery.bind(e.modelController),getModelsByType:e.modelController.getModelsByType.bind(e.modelController),getModelsFromCache:e.modelController.getModelsFromCache.bind(e.modelController),getModelTypes:e.modelController.getModelTypes.bind(e.modelController),getNextContentModel:e.modelController.getNextContentModel.bind(e.modelController),getParentNodeId:e.modelController.getParentNodeId.bind(e.modelController),getParentOfType:e.modelController.getParentOfType.bind(e.modelController),getRootModel:e.modelController.getRootModel.bind(e.modelController),getSiblingLeft:e.modelController.getLeftSibling.bind(e.modelController),getSiblingRight:e.modelController.getRightSibling.bind(e.modelController),hasChild:e.modelController.hasChild.bind(e.modelController),hasChildOfType:e.modelController.hasChildOfType.bind(e.modelController),hasChildOfTypes:e.modelController.hasChildOfTypes.bind(e.modelController),hasParent:e.modelController.hasParent.bind(e.modelController),hasParentOfType:e.modelController.hasParentOfType.bind(e.modelController),hasParentOfTypes:e.modelController.hasParentOfTypes.bind(e.modelController)},root:{getType:()=>e.modelController.getRootModel()?e.modelController.getRootModel().get(\"type\"):\"\"},serialize:{apiToInternal:e.dataTransformer.apiToInternal.bind(e.dataTransformer),apiToView:e.dataTransformer.apiToView.bind(e.dataTransformer),model:e.dataTransformer.modelToBackend.bind(e.dataTransformer),modelToInternal:e.dataTransformer.modelToInternal.bind(e.dataTransformer),modelToView:e.dataTransformer.modelToView.bind(e.dataTransformer)}},ns:{get:(e=\"\")=>s.get(e,this.ns),set:(e,t)=>s.set(e,t,this.ns)},preload:{get:e.preloadHandler.get.bind(e.preloadHandler),getHeader:e.preloadHandler.getHeader.bind(e.preloadHandler)},properties:{get:e.configReader.getCms.bind(e.configReader),update:e.configReader.updateConfigByPath.bind(e.configReader)},templates:{get:e.resourceManager.getTemplateFile.bind(e.resourceManager)},site:{getSite:e.configProcessor.getSite.bind(e.configProcessor),getSiteById:e.configProcessor.getSiteById.bind(e.configProcessor),getSites:e.configProcessor.getSites.bind(e.configProcessor)},style:{getNamedStyle:e.styleManager.getStyleFromDefinitionNamePath.bind(e.styleManager),getStyle:e.styleManager.getStyleFromDefinition.bind(e.styleManager),getStyles:e.styleManager.getStyle.bind(e.styleManager)},util:{defaults:e.utils.defaults,featureFlags:{enabled:e.featureFlags.enabled.bind(e.featureFlags),get:e.featureFlags.get.bind(e.featureFlags)},functionHelper:{getFunction:e.utils.functionHelper.getFunction,isValidFunction:e.utils.functionHelper.isValidFunction},object:s,request:{getHeader:e.requestUtil.getHeader.bind(e.requestUtil),getHeaders:e.requestUtil.getHeaders.bind(e.requestUtil),getQueryParam:e.requestUtil.getQueryParam.bind(e.requestUtil),getQueryString:e.requestUtil.getQueryString.bind(e.requestUtil),hasQueryParam:e.requestUtil.hasQueryParam.bind(e.requestUtil),hasQueryValue:e.requestUtil.hasQueryValue.bind(e.requestUtil),parseQueryString:e.requestUtil.parseQueryString.bind(e.requestUtil)},string:e.utils.stringHelper},view:{getHelper:e.viewManager?e.viewManager.getViewHelper.bind(e.viewManager):()=>{},getPixelDensityFactor:e.configProcessor.getPixelDensityFactor.bind(e.configProcessor),getView:e.viewManager?e.viewManager.getView.bind(e.viewManager):null,off:e.viewManager?e.viewManager.off.bind(e.viewManager):null,on:e.viewManager?e.viewManager.on.bind(e.viewManager):null,render:({template:t,model:r,viewManager:i=e.viewManager}={})=>{const s=i.getView(r),n=i.getDataForView(r,s);return Mustache.render(t,n,e.resourceManager.templates)}},viewHeaders:{get:t=>e.viewHeaders.get?e.viewHeaders.get(t):\"\",getAll:()=>e.viewHeaders.getAll?e.viewHeaders.getAll():\"\",set:(t,r)=>{e.viewHeaders.set&&e.viewHeaders.set(t,r)}},viewport:{getActive:()=>[e.configProcessor.getViewport()],getAll:e.configProcessor.getViewports.bind(e.configProcessor),getEditable:e.configProcessor.getEditableViewports.bind(e.configProcessor),getMain:e.configProcessor.getMainViewport.bind(e.configProcessor),getName:e.configProcessor.getViewport.bind(e.configProcessor),getSubViewports:e.configProcessor.getSubViewports.bind(e.configProcessor),getWidth:e.configProcessor.getViewportWidth.bind(e.configProcessor),isMain:e.configProcessor.isMainViewport.bind(e.configProcessor),isSubViewport:e.configProcessor.isSubViewport.bind(e.configProcessor),isTouchDevice:e.configProcessor.isTouchDevice.bind(e.configProcessor)},text:{getWords:I.getWords,getSentences:I.getSentences,getReadTime:I.getReadTime,lix:I.lix}}}}class E{constructor(e=[]){this.viewManagers=e,Sys.logger.debug(`CacheHandler: Ready to support view-manager(s) for viewport(s): ${this.viewManagers.map((e=>e.viewport.name)).join(\", \")}`)}setViewManagers(e){this.viewManagers=e}resetKey(e,t,r){this.resetModelCacheForKey(e,t,r),this.resetViewCacheForKey(e,t)}resetModelCacheForKey(e,t,r){e.cache.getter.delete(e.getCacheKey(t,r)),e.cache.getter.delete(e.getCacheKey(t,r,!0)),e.cache.getter.forEach(((i,s)=>{s.startsWith(`${t}.`)&&s.endsWith(`-${r||\"lab_main\"}`)&&e.cache.getter.delete(s)}))}resetViewCacheForKey(e,t){for(const r of this.viewManagers)r.getView(e).resetCache(t)}}class W{constructor(e,t=null){this.isEnabled=!0,this.Implementation=e,this.instance=null,this.name=t}initialize(){this.instance=new this.Implementation}disable(){this.isEnabled=!1}enable(){this.isEnabled=!0}call(e,...t){if(this.isEnabled){if(!this.instance){if(!this.Implementation)return;this.initialize(),this.instance.name&&(this.name=this.instance.name)}if(e in this.instance)return this.instance[e](...t)||null}}}class B extends W{}class H extends W{initialize(){this.instance=new this.Implementation(lab_api)}}class L{constructor(e){this.data=e}get(e=\"\"){const t=e.split(\".\"),r=this.getObject(t.shift());return r?t.length?s.get(t.join(\".\"),r):r:null}getObject(e){return e?this.data[e]||null:this.data}getHeader(e){if(e){const t=this.getObject(e);return t?t.responseHeaders:null}return null}}class N extends h{constructor({configReader:e,language:t,siteAlias:r,renderFn:i,configPrefix:n}){super(),this.configReader=e,this.language=t||this.configReader.get(\"contentLanguage\")||\"en-GB\",this.secondaryLanguage=this.configReader.get(\"contentLanguageFallback\")||this.language,this.siteAlias=r||this.configReader.siteAlias,this.fallbackLanguage=\"en-GB\",this.renderFn=i,this.objectHelper=s,this.configPrefix=n||\"int_\",this.cache=new Map}overrideLanguage(e){e&&(this.secondaryLanguage===this.language&&(this.secondaryLanguage=e),this.language=e)}get(e,{language:t,siteAlias:r,data:i={},fallbackValue:s,noRender:n=!1}={}){const o=(e||\"\").trim(),a=i||{},l=t||this.language,d=`${o}_${l}_${r}_${JSON.stringify(a||{})}_${n?\"1\":\"0\"}`;return this.cache.has(d)||this.cache.set(d,this.getKey(o,l,r,a,n,s)),this.cache.get(d)}getKey(e,t,r,i,s,n){const o=this.readConfigObject(e,r,t);if(o)return this.returnValue(e,o,i,t,r,\"config\",s);const a=this.readConfig(e,t,r);return a?this.returnValue(e,a,i,t,r,\"configObject\",s):t!==this.fallbackLanguage&&t!==this.secondaryLanguage&&this.secondaryLanguage!==this.language?this.getKey(e,this.secondaryLanguage,r,i,s,n):t!==this.fallbackLanguage?this.getKey(e,this.fallbackLanguage,r,i,s,n):void 0===n?e:n}returnValue(e,t,r,i,s,n,o){const a={value:t,data:r},l=this.requestEvent(\"localisation\",{key:e,value:t,data:r,language:i,siteAlias:s,type:n});if(l.length){const e=l.pop();\"string\"==typeof e.value&&(a.value=e.value,a.data=e.data)}return a.value?o?a.value:this.renderFn(a.value,a.data).trim():e}readConfig(e,t,r){const i=this.configReader.getConfig(`${this.configPrefix}${t}.${e}`,{site:r});return\"string\"==typeof i?i:void 0}readConfigObject(e,t,r){const i=t||this.siteAlias,s=r||this.language,n=this.configReader.getLocal(`lang.${i}.${s}.${e}`);return\"string\"==typeof n?n:void 0}}class q extends h{constructor({logger:e={},settings:{siteAlias:t=\"default\",pageType:r=\"front\",contentId:s=null,device:n=\"desktop\",runtime:o={Request:!1},transform:d,fragmentMode:h=null,debug:g=!1,simulatedMode:u=\"\"},resources:{config:f={},templates:y={view:{},editor:{}},properties:m={},data:b=null,preload:w={},viewHeaders:v={},views:P=[]},globals:x={},callbacks:M={},entries:C=[],behaviours:T={}}={}){super({entries:C.map((e=>new B(e))),behaviours:Object.keys(T).reduce(((e,t)=>({...e,[t]:T[t].map((e=>new H(e,t)))})),{}),debug:g}),this.settings={debug:g,fragmentMode:h,simulatedMode:u,pageType:r,contentId:s,siteAlias:t,device:n,request:o.Request,transform:void 0===d||!!d},this.resources={properties:m,data:b,templates:y?y.view:{},viewHeaders:v},this.logger=e,this.settings.fragmentMode&&this.logger.debug(`[Core] Running fragmentMode: \"${h}\"`),this.configReader=new a(a.resolveFullConfig(f,i),this.logger),this.configProcessor=new l(this.configReader,this.settings.device,this.settings.fragmentMode,this.settings.pageType,this.settings.simulatedMode),this.logger.debug(\"---------------------------------------------------------\"),this.logger.debug(\"[Core] Labrador rendering engine\"),this.logger.debug(`Version ${this.configReader.getCms(\"app.version\")} - build ${this.configReader.getCms(\"buildInfo.version\")} - views: ${P.join(\", \")}`),this.logger.debug(\"(c) Labrador CMS AS. Use require a valid licence\"),this.logger.debug(\"---------------------------------------------------------\"),this.localisation=new N({configReader:this.configReader,renderFn:Mustache.render}),this.viewManager=null,this.pathHelper=new S,this.resourceManager=new c(this.resources.properties,this.resources.templates,this.configReader,p.resolveConfig,this.behaviours,this.pathHelper,this.settings.debug),this.dataTransformer=new V(this.configReader.get(\"grid.total_grid_spans\")),this.modelController=new O(this.configReader,this.resourceManager,this.entries,this.behaviours),this.styleManager=new F(this.configReader.get(\"style\"),Mustache.render,this.logger),this.preloadHandler=new L(w),this.viewManager=new k({resourceManager:this.resourceManager,configReader:this.configReader,configProcessor:this.configProcessor,logger:this.logger,viewport:this.settings.device,styleManager:this.styleManager,entries:this.entries,behaviours:this.behaviours,settings:this.settings,localisation:this.localisation,preloadHandler:this.preloadHandler}),this.api={v1:this.createApi()},x.lab_api=this.api,M.apiReady&&M.apiReady(this.api.v1),this.apiReady(this.api),this.resources.data&&this.setData(this.resources.data)}getApi(){return this.api}createApi(){this.logger.debug(\"Core: Creating api using CoreApi.\");const e=new D,t={appManager:this,configReader:this.configReader,configProcessor:this.configProcessor,modelController:this.modelController,viewManager:this.viewManager,styleManager:this.styleManager,dataTransformer:this.dataTransformer,utils:r,requestUtil:new A(this.settings.request),featureFlags:new _(this.settings.siteAlias,this.logger),preloadHandler:this.preloadHandler,viewHeaders:this.resources.viewHeaders,localisation:this.localisation,resourceManager:this.resourceManager};return e.create(t)}getAllLogs(){return{front:this.getLogs(),view:this.viewManager.getLogs(),resource:this.resourceManager.getLogs(),model:this.modelController.getLogs()}}setSite(e){this.configReader.updateConfigByPath(\"site\",e),this.configReader.getCms(\"site\",{noCache:!0}),this.configProcessor.resetCache()}apiReady(e){this.logger.debug(\"Core: Api ready.\"),this.viewManager.apiReady(e),this.modelController.setCacheHandler(new E([this.viewManager])),this.onReady(e)}onReady(e){this.emitEntry(\"onReady\",e)}setData(e){if(!e||!this.settings.transform&&!Array.isArray(e)||this.settings.transform&&!e.data)throw new Error(\"[Core] Cannot set data. Invalid input. \"+(this.settings.transform?\"Expecting property data, none given.\":`Expecting an array, ${typeof e} given.`));this.viewManager.viewMap.clear();const t=this.settings.transform?this.dataTransformer.backendToInternal(e,{blacklist:this.configReader.get(\"data.blacklist\")||[],skipOffstage:!0}):e;let r=null;const i=this.emitEntry(\"onDataReady\",t);i.length&&(this.logger.warn(\"[Core] Entry-hook 'onDataReady' has modifyed input-data.\"),r=i.pop()),this.modelController.setData(r||t),this.resourceManager.rootModelReady(this.modelController.getRootModel()),this.localisation.overrideLanguage(this.modelController.getRootModel().get(\"fields.seolanguage\")),this.modelController.notifyOnAcceptContent(),this.emitEntry(\"onAcceptContent\"),this.emitEvent(\"acceptContent\")}serializeView(e=this.modelController.models){return this.dataTransformer.modelsToView(e)}serializeForFragmentApi(e=this.modelController.models,{device:t=this.settings.device,stringify:r=!0,recursive:i=!0}={}){return this.dataTransformer.modelsToFragmentApi(e,{device:t,stringify:r,recursive:i})}render(e,{transform:t}={}){return new Promise(((r,i)=>{void 0!==t&&(this.settings.transform=!!t),this.setData(e),r(this.draw())}))}draw(e){return this.viewManager.draw(this.modelController.models,(t=>{e&&e(t)}))}getMarkup(e){if(!e)return this.logger.warn(\"Core: No model supplied. Will return empty string.\"),\"\";const t=this.viewManager.getView(e);return t?t.getMarkupString()||\"\":(this.logger.warn(`Core: Cannot get view for model ${e.getPositionedPath()}. Will return empty string.`),\"\")}}var U=t.Q;export{U as Core};\n//# sourceMappingURL=Core.js.map","/**\n * Transform JSON from named source to internal format\n * Todo: Add LabradorJSON, Kilkaya, etc\n */\nimport { ClientData } from './ClientData.js';\nimport { LabradorApi } from './transformers/source/LabradorApi.js';\nimport { DachserJson } from './transformers/source/DachserJson.js';\nimport { KilkayaStreams } from './transformers/source/KilkayaStreams.js';\n\nexport class Mapper {\n\n    constructor({\n        source, image_server, mapperSettings = {}, settings = { useEditorProxy: false }\n    } = {}) {\n        this.source = source;\n        this.useEditorProxy = settings.useEditorProxy;\n        this.image_server = image_server;\n        this.mapperSettings = mapperSettings;\n    }\n\n    // (array / ClientData)\n    map(data) {\n        const clientData = new ClientData();\n        switch (this.source) {\n            case 'LabradorApi':\n                return this.mapLabradorApi(data, clientData);\n            case 'DachserJson':\n                return this.mapDachserJson(data, clientData);\n            case 'KilkayaStreams':\n                return this.mapKilkayaStreams(data, clientData);\n            default:\n                console.warn(`[Mapper] Unsupported source ${ this.source }`);\n                return [];\n        }\n    }\n\n    // Data is Labrador API-format\n    mapLabradorApi(rawInput, clientData) {\n        const input = this.resolveProxy(rawInput);\n        if (!input || !input.result || !input.result.length) {\n            return clientData;\n        }\n        const mapper = new LabradorApi(this.mapperSettings);\n        clientData.setData(mapper.map(input));\n        clientData.setTotalCount(input.totalCount);\n        return clientData;\n    }\n\n    mapDachserJson(rawInput, clientData) {\n        const input = this.resolveProxy(rawInput);\n        if (!input || !input.result || !input.result.length) {\n            return clientData;\n        }\n        const mapper = new DachserJson(this.mapperSettings);\n        clientData.setData(mapper.map(input));\n        clientData.setTotalCount(input.totalCount);\n        return clientData;\n    }\n\n    mapKilkayaStreams(input, clientData) {\n        if (!input || !input.stream || !input.stream.length) {\n            return clientData;\n        }\n        const mapper = new KilkayaStreams(this.mapperSettings);\n        clientData.setData(mapper.map(input.stream));\n        clientData.setTotalCount(input.stream.length);\n        return clientData;\n    }\n\n    // Editor may use a proxy returning a JSON-string @ input.value\n    resolveProxy(input) {\n        if (!this.useEditorProxy) {\n            return input;\n        }\n        return JSON.parse(input.value);\n    }\n\n}\n","/**\n * Fetch data and transform to internal format.\n * Pagination etc. must be handled by consumer.\n * Requests are cached.\n */\n\nexport class Reader {\n\n    constructor({ url, mappers = [] } = {}) {\n        this.url = url;\n        this.mappers = mappers;\n        this.modifiedUrl = this.url;\n        this.cache = new Map(); // Key: url, value: Instance of ClientData\n    }\n\n    // (Promise)\n    read() {\n        return new Promise((resolve, reject) => {\n            if (this.cache.has(this.modifiedUrl)) {\n                resolve(this.mapData(this.cache.get(this.modifiedUrl)));\n                return;\n            }\n            fetch(this.modifiedUrl)\n                .then((response) => response.json())\n                .then((data) => {\n                    this.cache.set(this.modifiedUrl, data);\n                    const result = this.mapData(data);\n                    resolve(result);\n                }).catch((error) => {\n                    console.log(`[Reader] Failed to fetch/transform data. Please check input params. Error:`);\n                    console.error(error);\n                });\n        });\n    }\n\n    // (ClientData)\n    mapData(data) {\n        let result = data;\n        for (const mapper of this.mappers) {\n            result = mapper.map(result);\n        }\n        return result;\n    }\n\n    // (void)\n    updateUrl(url) {\n        this.modifiedUrl = url;\n    }\n\n    // (promise)\n    reload(clearCache = false) {\n        if (clearCache) {\n            this.cache.delete(this.modifiedUrl);\n        }\n        return this.read();\n    }\n\n    // nextPage() {\n    //     // ...\n    // }\n\n    // previousPage() {\n    //     // ...\n    // }\n\n}\n","/**\n * Create an instance of Labrador rendering engine\n * Uses view-resources from Baseview\n */\n\nimport { Core } from './Core.js';\nimport { behaviours as baseviewBehaviours, Entry } from '../../../build/modules/client_modules.js';\nimport { config, properties, templates } from '../../../build/modules/client_package.js';\n\nexport class Renderer {\n\n    constructor(settings) {\n\n        console.group('[Labrador] Setup rendering engine');\n\n        const input = Renderer.resolveConfig(settings);\n\n        // Javascript modules\n        const behaviours = {};\n\n        // Multiview: Add entries from subsequent views to the entries-array\n        const entries = [Entry];\n\n        for (const key of Object.keys(baseviewBehaviours)) {\n            // Multiview: Add behaviours from subsequent views to the behaviours[key]-array\n            behaviours[key] = [baseviewBehaviours[key]];\n        }\n\n        let debug = false;\n        if (new URLSearchParams(window.location.search).get('debug')) {\n            debug = true;\n        }\n\n        window.Sys = { logger: console };\n\n        this.renderer = new Core({\n            logger: window.Sys.logger,\n            settings: {\n                siteAlias: input.site.alias,\n                device: input.app.device,\n                debug,\n                transform: input.app.transform // Will require data in internal format\n            },\n            resources: {\n                config: {\n                    site: {\n                        alias: input.site.alias,\n                        display_name: input.site.display_name,\n                        domain: input.site.domain,\n                        id: input.site.id\n                    },\n                    image_server: input.app.image_server,\n                    app: {\n                        mode: 'presentation',\n                        abc: 123\n                    },\n                    customer: { ...config, ...input.config },\n                    ConfigObject: { ...input.ConfigObject || {} }\n                },\n                templates: {\n                    view: templates\n                },\n                properties,\n                views: ['baseview_client']\n            },\n            globals: window,\n            callbacks: {},\n            entries,\n            behaviours\n        });\n        this.api = this.renderer.getApi();\n        console.groupEnd();\n    }\n\n    // (object)\n    static resolveConfig(conf) {\n        const site = conf.site || {};\n        const app = conf.app || {};\n        return {\n            config: conf.config || {},\n            ConfigObject: conf.ConfigObject || {},\n            site: {\n                alias: site.alias,\n                display_name: site.display_name,\n                id: site.id,\n                domain: site.domain,\n            },\n            app: {\n                debug: !!app.debug,\n                image_server: app.image_server,\n                device: app.device,\n                transform: !!app.transform\n            }\n        };\n    }\n\n    // (void) data: ClientData or array\n    setData(data) {\n        return this.renderer.setData(typeof data.getData === 'function' ? data.getData() : data);\n    }\n\n    // (Promise)\n    render() {\n        return new Promise((resolve, reject) => {\n            console.group('[Labrador] Render data');\n            this.renderer.draw((result) => {\n                resolve(result);\n                console.groupEnd();\n            });\n        });\n    }\n\n}\n","/**\n * Modify data for each article in the search result\n * Set styling and content\n * Input is an array of articles\n * Output is an array of rows\n */\nexport class FrontContentMapper {\n\n    constructor(settings) {\n        this.layout = settings.layout || {};\n        this.hide_items = this.layout.hide_items || [];\n        this.alignImage = settings.alignImage ? `float${ settings.alignImage.charAt(0).toUpperCase() + settings.alignImage.slice(1) }` : '';\n        this.fallbackImage = settings.fallbackImage; // Define in admin: /settings/cp?page=fallback_image\n        this.imageWidth = settings.imageWidth;\n    }\n\n    // (ClientData)\n    map(clientData) {\n        clientData.setData(\n            clientData.getData().map((itm) => {\n                const item = { ...itm };\n                if (item.children && item.children[0]) {\n                    const image = item.children[0];\n                    image.contentdata.fields.float = { vp: { desktop: this.alignImage } };\n                    image.contentdata.fields.whRatio = { vp: { desktop: this.layout.imageAspectRatio || 0.5 } };\n                    image.width = { vp: { desktop: this.imageWidth, mobile: 100 } };\n                } else if (this.fallbackImage) {\n                    item.children.push({\n                        type: 'image',\n                        contentdata: {\n                            fields: {\n                                imageurl: { value: `${ this.fallbackImage }` },\n                                float: { vp: { desktop: this.alignImage } },\n                                whRatio: { vp: { desktop: this.layout.imageAspectRatio || 0.5 } }\n                            }\n                        },\n                        width: { vp: { desktop: this.imageWidth, mobile: 100 } },\n                        metadata: {\n                            style_preset: { value: 'fallbackImage' }\n                        }\n                    });\n                }\n                for (const part of this.hide_items) {\n                    switch (part) {\n                        case 'title':\n                            item.metadata.hideTitle = { value: true };\n                            break;\n                        case 'subtitle':\n                            item.metadata.hidesubtitle = { value: true };\n                            break;\n                        case 'image':\n                            item.metadata.hideimage = { value: true };\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                if (!this.hide_items.includes('kicker')) {\n                    item.metadata.showKicker = { value: true };\n                }\n                // Set teaser title and subtitle as title and subtitle if they exist. \n                item.contentdata.fields.teaserTitle.value && (item.contentdata.fields.title = item.contentdata.fields.teaserTitle);\n                item.contentdata.fields.teaserSubtitle.value && (item.contentdata.fields.subtitle = item.contentdata.fields.teaserSubtitle);\n\n                return item;\n            })\n\n// 0\n// : \n// \"title\"\n// 1\n// : \n// \"subtitle\"\n// 2\n// : \n// \"image\"\n// 3\n// : \n// \"kicker\"\n        );\n        return clientData;\n    }\n\n}\n","/**\n * Handle data and rendering engine for tagboard\n */\n\nimport { Mapper } from '../Mapper.js';\nimport { Reader } from '../Reader.js';\nimport { Renderer } from '../Renderer.js';\nimport { FrontContentMapper } from './FrontContentMapper.js';\nimport { Filter } from '../transformers/prosessors/Filter.js';\nimport { Tags } from '../transformers/prosessors/Tags.js';\nimport { RowLines } from '../transformers/prosessors/RowLines.js';\nimport { Setter } from '../transformers/prosessors/Setter.js';\nimport { RowsAndColumns } from '../transformers/layout/RowsAndColumns.js';\nimport { RandomRows } from '../transformers/layout/RandomRows.js';\n\nexport class FrontContentRenderer {\n\n    constructor({\n        url, app = {}, site = {}, settings = {}\n    } = {}) {\n        this.mappers = {\n            api: new Mapper({ source: settings.sourceType, image_server: app.image_server, settings: { useEditorProxy: settings.isEditor && (settings.sourceType !== 'LabradorApi' || !!settings.useProxy) } }),\n            tagboard: new FrontContentMapper(settings),\n            filter: new Filter({ data: settings.articleFilterList }),\n            tags: new Tags({ tagGroups: [], articleCount: settings.articleCount }),\n            setter: new Setter({ data: settings.style }),\n            rows: settings.organizer === 'RowsAndColumns' ? new RowsAndColumns({ layout: settings.layout }) : new RandomRows({ layout: settings.layout }),\n            lines: new RowLines(settings)\n        };\n\n        this.reader = new Reader({\n            url,\n            mappers: [\n                this.mappers.api,\n                this.mappers.tagboard,\n                this.mappers.filter,\n                this.mappers.tags,\n                this.mappers.setter,\n                this.mappers.rows,\n                this.mappers.lines\n            ]\n        });\n        this.renderer = new Renderer({\n            app,\n            site,\n            ConfigObject: settings.ConfigObject || {}\n        });\n    }\n\n    // (Promise)\n    read() {\n        return new Promise((resolve, reject) => {\n            this.reader.read().then((result) => {\n                if (!result.data.count === 0) {\n                    reject();\n                    return;\n                }\n                this.render(result).then((res) => {\n                    resolve(res);\n                }).catch((error) => {\n                    reject(error);\n                });\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    render(result) {\n        return new Promise((resolve, reject) => {\n            if (!result.data.count === 0) {\n                reject();\n                return;\n            }\n            this.renderer.setData(result);\n            this.renderer.render().then((markups) => {\n                result.setMarkups(markups);\n                resolve(result);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    filter(tags) {\n        if (Array.isArray(tags) && tags.length) {\n            // this.tagGroups = [...tags];\n            this.mappers.tags.tagGroups = [...tags];\n            // return this.read();\n        }\n        // return new Promise.reject();\n    }\n\n    updateUrl(url) {\n        this.reader.updateUrl(url);\n    }\n\n}\n","export const datatype = {\n\n    object: {\n\n        /**\n         * Get member of object by dot-notated string\n         * @param  {string} key    The key to get from the object. Support dot-notation\n         * @param  {object} object The object to query for the key\n         * @param  {boolean} allowUndefined If set to true return undefined if member do not exist. Can be used to check if sometning actually exist.\n         * @example object.get(\"a.b\", { a: { b: 2 } }) // will return 2.\n         * @return {mixed}         The value from the query or null\n         */\n        get: (key = '', object = {}, allowUndefined = false) => {\n            const callback = (obj, i) => (obj && (typeof (obj[i]) !== 'undefined') ? obj[i] : (allowUndefined ? undefined : null));\n            return key.split('.').reduce(callback, object);\n        },\n\n        /**\n         * Set a value to an object\n         * @example objectHelper.set(\"b.c\", [1,2], {a: 1}). Result: {a:1, b:{c: [1,2]}}.\n         * @param {string} path  Path for value. Support dot-notation (fields.title)\n         * @param {mixed}  value The value to set\n         * @param {object} obj   The object to set value on\n         */\n        set: (path, value, obj) => {\n            path.split('.').reduce((prev, cur, idx, arr) => {\n                const isLast = (idx === arr.length - 1);\n                if (isLast) {\n                    prev[cur] = value;\n                    return;\n                }\n                return (datatype.object.isObject(prev[cur])) ? prev[cur] : (prev[cur] = {});\n            }, obj);\n            return obj;\n        },\n\n        /**\n         * Check if argument is an object\n         * @return {Boolean}\n         */\n        isObject: (item) => item && typeof (item) === 'object' && !Array.isArray(item),\n\n        // Deep merge\n        // If any key contains an array this will not be merged but overridden.\n        // source overrides target\n        merge: (target, source) => {\n            if (Array.isArray(target) && Array.isArray(source)) {\n                return source;\n            }\n            const output = Object.assign(Array.isArray(target) ? [] : {}, target);\n            if (datatype.object.isObject(target) && datatype.object.isObject(source)) {\n                for (const key of Object.keys(source)) {\n                    if (datatype.object.isObject(source[key])) {\n                        // Case: target[key] = 'string', source[key] = {object} - Override\n                        if (!(key in target) || !datatype.object.isObject(target[key])) {\n                            Object.assign(output, { [key]: source[key] });\n                        } else {\n                            output[key] = datatype.object.merge(target[key], source[key]);\n                        }\n                    } else {\n                        Object.assign(output, { [key]: source[key] });\n                    }\n                }\n            }\n            return output;\n        }\n\n    },\n\n    string: {\n        unique: (chars) => {\n            const multiplier = `0x${ 10 ** (chars - 1) }`;\n            return Math.floor((1 + Math.random()) * multiplier).toString(16);\n        },\n        strip_tags: (str = '') => (str || '').replace(/<(?:.|\\n)*?>/gm, '').trim()\n    }\n};\n","import { utils } from '../utils.js';\n\nexport class RandomRows {\n\n    constructor(options) {\n        const layout = options.layout || {};\n        this.options = {\n            maxPixelWidth: layout.maxPixelWidth || 1000,\n            imageAspectRatio: layout.imageAspectRatio || 0.6, // height / width\n            maxRowSize: layout.maxRowSize || 4,\n            minRowSize: layout.minRowSize || 1,\n            selector: layout.selector || '',\n            grid_size: layout.grid_size || 12\n        };\n    }\n\n    // (ClientData) Add all supplied articles to rows.\n    // Input is an array of articles\n    // Use randow numer of columns for each row:\n    // Range: [this.options.minRowSize - this.options.maxRowSize]\n    map(clientData) {\n        const data = clientData.getData();\n        const result = [];\n        if (!data.length) {\n            return clientData;\n        }\n        const rows = [];\n        let currentRow = [];\n        let count = this.getRandomInt(this.options.minRowSize, this.options.maxRowSize);\n\n        for (const article of data) {\n            if (currentRow.length >= count) {\n                rows.push(currentRow);\n                currentRow = [];\n                const lastCount = count;\n                count = this.getRandomInt(this.options.minRowSize, this.options.maxRowSize);\n                if (count === lastCount) {\n                    // Try to avoid two following rows with same column-count\n                    count = this.getRandomInt(this.options.minRowSize, this.options.maxRowSize);\n                }\n            }\n            currentRow.push(article);\n        }\n        rows.push(currentRow);\n\n        for (const articles of rows) {\n            // Set width of each article/image in row:\n            utils.decorateRow(articles, this.options);\n            result.push({\n                type: 'row',\n                selector: this.options.selector || '',\n                children: articles\n            });\n        }\n        clientData.setData(result);\n        return clientData;\n    }\n\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n}\n","import { utils } from '../utils.js';\n\nexport class RowsAndColumns {\n\n    constructor(options) {\n        const layout = options.layout || {};\n        this.options = {\n            columnCount: layout.columnCount || 3,\n            rowCount: layout.rowCount || 4,\n            grid_size: layout.grid_size || 12,\n            maxPixelWidth: layout.maxPixelWidth || 1000,\n            imageAspectRatio: layout.imageAspectRatio || 0.6, // height / width\n            selector: layout.selector || ''\n        };\n    }\n\n    // (ClientData)\n    map(clientData) {\n        const decoratedRows = [];\n        const rows = utils.groupRowsAndColums(clientData.getData(), this.options);\n        for (const articles of rows) {\n            utils.decorateRow(articles, this.options);\n            decoratedRows.push({\n                type: 'row',\n                selector: this.options.selector || '',\n                children: articles\n            });\n        }\n        clientData.setData(decoratedRows);\n        return clientData;\n    }\n\n}\n","import { datatype } from '../datatype.js';\n\n// Remove articles that contain defined key/value pair(s).\nexport class Filter {\n\n    constructor(options) {\n        this.options = {\n            data: options.data || [] // Array of objects: [{ path: 'id', values: [123, 456] }, { path: 'fields.title', values: ['ignore me', 'and me'] }, ...]\n        };\n    }\n\n    // (ClientData) Remove articles that match a specified value\n    // Input: array of articles\n    // Output: array of articles\n    map(clientData) {\n        const data = clientData.getData();\n        if (!Array.isArray(data) || !this.options.data.length) {\n            return clientData;\n        }\n        clientData.setData(data.filter((article) => {\n            for (const opts of this.options.data) {\n                if (Array.isArray(opts.values)) {\n                    if (opts.values.includes(datatype.object.get(opts.path, article))) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }));\n        return clientData;\n    }\n\n}\n","/**\n * Get any number of articles and place them in rows.\n * Try to resize images and text to give each article the same height.\n * Note: Require a style-definition to generate css for text-size.\n */\n\nimport { datatype } from '../datatype.js';\n\nexport class RowLines {\n\n    constructor(settings) {\n        this.active = settings.postprocessor === 'RowLines';\n        this.aspectRatio = settings.layout.imageAspectRatio || 0.45;\n        this.options = {\n            ratioOptionsSource: {\n                title: 1.4, subtitle: 1, kicker: 1, image: 1\n            },\n            ratioOptionsTarget: {\n                title: 1.4, subtitle: 1, kicker: 1, image: 1\n            },\n            text_size: {\n                min: 16, max: 70, base: 30\n            },\n            fieldSuffix: {\n                size: 'text_size'\n            }\n        };\n    }\n\n    // Data is a list of rows\n    // Group in rows and apply layout for each article in each row.\n    // Todo: Remove grouping from this class and add an extra step in the transformer to group content.\n    map(clientData) {\n        if (!this.active) {\n            return clientData;\n        }\n        const data = clientData.getData();\n        this.autoLayoutRows(data, this.options);\n        clientData.setData(data);\n        return clientData;\n    }\n\n    autoLayoutRows(data, options) {\n        data.forEach((row) => this.autoLayoutRow(row, options));\n        return data;\n    }\n\n    autoLayoutRow(data, options) {\n        const rowLength = data.children.length;\n\n        // Get character length of each element in row:\n        const contentLength = {\n            kicker: data.children.map((child) => Math.max((child.contentdata.fields.kicker.value || '').length, 10)),\n            title: data.children.map((child) => Math.max((datatype.string.strip_tags(child.contentdata.fields.title.value || '')).length, 10)),\n            subtitle: data.children.map((child) => Math.max((child.contentdata.fields.subtitle.value || '').length, 50)),\n            image: data.children.map((child) => (child.children.length ? 177 : 0))\n        };\n        const keys = Object.keys(contentLength);\n\n        const templateSizes = {\n            title: 3, // Pixel-height per character\n            kicker: 1.5, // Pixel-height per character\n            subtitle: 0.54, // Pixel-height per character\n            image: 0.5 // Pixel-height per character (based on height = 177px)\n        };\n\n        const ratioOptionsSource = options.ratioOptionsSource || {};\n        const ratioOptionsTarget = options.ratioOptionsTarget || {};\n        // const ratioLimits = options.ratioLimits || {};\n\n        // Assure options. Set defaults:\n        for (const key of keys) {\n            ratioOptionsSource[key] = ratioOptionsSource[key] || 1; // Range: 0.1 - 1.9\n            ratioOptionsTarget[key] = ratioOptionsTarget[key] || 1; // Range: 0.1 - 1.9\n            // ratioLimits[key] = ratioLimits[key] || [0.5, 1.5];  // Range: [0.1 - 1.9, 0.1 - 1.9]\n        }\n\n        // Get calculated pixel-height of each element in row\n        // This should match actual layout using image-height = 177px and title-size = text_size.base.\n        const heights = [];\n        for (let i = 0; i < rowLength; i++) {\n            heights.push(\n                parseInt((contentLength.title[i] * templateSizes.title * ratioOptionsSource.title)\n                    + (contentLength.kicker[i] * templateSizes.kicker * ratioOptionsSource.kicker)\n                    + (contentLength.subtitle[i] * templateSizes.subtitle * ratioOptionsSource.subtitle)\n                    + (contentLength.image[i] * templateSizes.image * ratioOptionsSource.image), 10)\n            );\n        }\n\n        // Get average height for elements in the row\n        const avgHeight = this.getAvg(heights);\n\n        // Get a list of what amount each element needs to resize in percent (1 = 100%, no resizing. 0.5 = 50%, shrink by half. ...).\n        // Use the average height as base:\n        // Todo: This data may be pre-processed to normalize against all rows ...\n        const resize = heights.map((height) => avgHeight / height);\n\n        for (const child of data.children) {\n            const index = data.children.indexOf(child);\n            const hasImage = contentLength.image[index] > 0;\n\n            // 1.4 = 1.2 on each\n            // 0.6 = 0.8 on each\n            const elementResize = hasImage ? (resize[index] - 1) / 2 + 1 : resize[index];\n\n            if (hasImage) {\n                const elementDiffImage = elementResize * ratioOptionsTarget.image;\n                child.children[0].contentdata.fields.whRatio = {\n                    value: this.aspectRatio * elementDiffImage\n                };\n            }\n\n            let size = Math.round(options.text_size.base * elementResize * ratioOptionsTarget.title);\n            if (size < options.text_size.min) {\n                size = options.text_size.min;\n            }\n            if (size > options.text_size.max) {\n                size = options.text_size.max;\n            }\n            datatype.object.set(`attributes.${ this.options.fieldSuffix.size }.value`, size, child.contentdata.fields.title)\n        }\n    }\n\n    getAvg(data) {\n        return Math.round(data.reduce((a, b) => a + b, 0) / data.length);\n    }\n\n}\n","import { datatype } from '../datatype.js';\n// Set data specified in options on every article.\nexport class Setter {\n\n    constructor(options) {\n        this.options = {\n            data: options.data || [] // Array of objects: [{ path: 'metadata.background_color', value: 'red' }, ...]\n        };\n    }\n\n    // (array) Set data specified in options on every article.\n    // Input: array of articles\n    // Output: array of articles\n    map(clientData) {\n        if (!this.options.data.length) {\n            return clientData;\n        }\n        const data = clientData.getData();\n        for (const article of data) {\n            for (const opts of this.options.data) {\n                if (opts.path && opts.value !== undefined) {\n                    datatype.object.set(opts.path, opts.value, article);\n                }\n            }\n        }\n        clientData.setData(data);\n        return clientData;\n    }\n\n}\n","// Filter articles based on tags\nexport class Tags {\n\n    constructor({ tagGroups = [], articleCount } = {}) {\n        // Array of arrays with tags. [[tag1, tag2], [tag3, tag4]]\n        // Use OR inside each tag group and AND between them\n        // Example above will return articles with tag (tag1 OR tag2) AND (tag3 OR tag4)\n        this.tagGroups = Array.isArray(tagGroups) ? tagGroups : [];\n        this.articleCount = articleCount;\n    }\n\n    // (ClientData)\n    // Input: array of articles\n    // Output: array of articles\n    map(clientData) {\n        const data = clientData.getData();\n        if (!Array.isArray(data)) { // || !this.tagGroups.length this for some reason breaks it\n            return clientData;\n        }\n        let filteredData = data;\n        if (this.tagGroups.length) {\n            filteredData = data.filter((article) => {\n                for (const group of this.tagGroups) {\n                    if (!this.tagGroupMatch(group, article)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n\n        if (this.articleCount) {\n            filteredData = filteredData.slice(0, this.articleCount);\n        }\n\n        clientData.setData(filteredData);\n        return clientData;\n    }\n\n    tagGroupMatch(tagGroup, data) {\n        if (!tagGroup.length) {\n            return true;\n        }\n        for (const tag of tagGroup) {\n            if (data.contentdata.tags.includes(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n","/*\nInput from Dachser JSON feed.\n(https://example.com?lab_viewport=json)\nData-format:\n{\n    result: [\n        {\n            \"type\": \"article\",\n            \"id\": 101611,\n            \"instance_of\": 101547,\n            \"parent\": 101610,\n            \"status\": \"A\",\n            \"tags\": [\n                \"nyheter\"\n            ],\n            \"byline\": \"Stian Andersen\",\n            \"bylineImage\": \"/?imageId=100196&cropw=35.175879396985&whRatio=1&x=50&bbRatio=0.13232514177694&croph=52.238805970149\",\n            \"displayByline\": \"\",\n            \"hideAds\": \"\",\n            \"kicker\": \"\",\n            \"lab_site_id\": \"1\",\n            \"paywall\": \"\",\n            \"published\": \"2020-09-20T21:41:41+02:00\",\n            \"url\": \"/m24/101547\",\n            \"section\": \"nyheter\",\n            \"showcomments\": \"\",\n            \"site_alias\": \"medier24_event\",\n            \"site_id\": \"14\",\n            \"description\": \"subtitle Artikkel fra feed-forside #1\",\n            \"title\": \"Artikkel fra feed-forside #1\",\n            \"images\": [\n                {\n                    \"url\": \"http://image-www-default.localhost?imageId=100240&x=0&y=0&cropw=100&croph=85.774647887324&heightw=100&heighth=85.774647887324&heightx=0&heighty=0\",\n                    \"url_size\": \"http://image-www-default.localhost/100240.jpg?imageId=100240&x=0&y=0&cropw=100&croph=85.774647887324&width=353&height=159\",\n                    \"default\": \"1\"\n                }\n            ]\n        },\n        ...\n    ]\n}\n*/\n\nexport class DachserJson {\n\n    constructor(options) {\n        this.options = {\n            ignore: options.ignore || [] // Parts of article to ignore (['image', 'subtitle'])\n        };\n    }\n\n    // Input: Object from API.\n    // Output: Array of articles.\n    map(data) {\n        return (data.result || []).map((article) => this.transformArticle(article));\n    }\n\n    allowFragment(name) {\n        return !this.options.ignore.includes(name);\n    }\n\n    transformArticle(article) {\n        const result = {\n            type: 'article',\n            contentdata: {\n                id: article.id,\n                fields: {\n                    title: this.allowFragment('title') ? { value: article.title } : null,\n                    subtitle: this.allowFragment('subtitle') ? { value: article.description } : null,\n                    kicker: this.allowFragment('kicker') ? { value: article.kicker } : null,\n                    published_url: { value: article.url }\n                },\n                tags: Array.isArray(article.tags) ? article.tags : []\n            },\n            metadata: article.metadata || {},\n            width: article.width || 100,\n            widthVp: article.widthVp || {},\n            children: []\n        };\n        if (article.images && article.images.length && this.allowFragment('image')) {\n            result.children.push(this.transformImage(article.images[0]));\n        }\n        return result;\n    }\n\n    transformImage(data) {\n        return {\n            type: 'image',\n            contentdata: {\n                fields: {},\n                instance_of: data.id,\n                metadata: {}\n            }\n        };\n    }\n\n}\n","/*\nInput: Articles from Kilkaya Streams (personalized content)\nOutput: (Array) List of articles, internal format\n\nData-format:\n[{\n    \"url\": \"www.kk.no/underholdning/80465481\",\n    \"score\": 100,\n    \"streamitem\": \"item_0\",\n    \"title\": \"Nettet koker av Amunds drikkeflaske\",\n    \"image\": \"https://labrador-www.kk.no/images/80435897.jpg?imageId=80435897&panow=100.18957345972&panoh=30.420168067227&panox=0.18957345971564&panoy=10.053277310924&heightw=47.113402061856&heighth=68.219178082192&heightx=43.120257731959&heighty=0&width=1200&height=630\",\n    \"desc\": \"\",\n    \"tags\": \"\",\n    \"section\": \"underholdning\",\n    \"paid\": false\n}, ...]\n*/\nexport class KilkayaStreams {\n\n    constructor(options) {\n        this.options = {\n            ignore: options.ignore || [] // Parts of article to ignore (['image', 'subtitle'])\n        };\n    }\n\n    map(data) {\n        return (data || []).map((article) => this.transformArticle(article));\n    }\n\n    allowFragment(name) {\n        return !this.options.ignore.includes(name);\n    }\n\n    transformArticle(article) {\n        const result = {\n            type: 'article',\n            contentdata: {\n                fields: {\n                    title: { value: this.allowFragment('title') ? article.title : null },\n                    subtitle: { value: this.allowFragment('subtitle') ? article.desc : null },\n                    published_url: { value: this.ensureUrlProtocol(article.url) },\n                    paywall: { value: article.paid ? '1' : '' }\n                },\n                primaryTags: {\n                    section: article.section\n                }\n            },\n            metadata: {},\n            children: []\n        };\n        if (article.image && this.allowFragment('image')) {\n            result.children.push(this.transformImage(this.ensureUrlProtocol(article.image)));\n        }\n        return result;\n    }\n\n    ensureUrlProtocol(url = '', protocol = 'https') {\n        if (url.startsWith('//')) {\n            return url;\n        }\n        const newUrl = url.replace('http://', '').replace('https://', '');\n        return `${ protocol }://${ newUrl }`;\n    }\n\n    transformImage(url) {\n        return {\n            type: 'image',\n            contentdata: {\n                fields: {\n                    imageurl: { value: url ? encodeURIComponent(url) : '' }\n                }\n            },\n            metadata: {}\n        };\n    }\n\n}\n","/*\nInput: Article from Labrador Search API\nOutput: (Array) List of articles, internal format\n*/\n\nexport class LabradorApi {\n\n    constructor(options) {\n        this.options = {\n            imageServer: options.imageServer || '',\n            ignore: options.ignore || [], // Parts of article to ignore (['image', 'subtitle'])\n            extraFields: Array.isArray(options.extraFields) ? options.extraFields : []\n        };\n    }\n\n    // Input: Object from API.\n    // Output: Array of articles.\n    map(data) {\n        return (data.result || []).map((article) => this.transformArticle(article));\n    }\n\n    transformArticle(item) {\n        const result = {\n            type: item.type,\n            contentdata: {\n                id: item.id,\n                fields: {\n                    title: { value: item.titleHTML || item.title || null },\n                    teaserTitle: { value: item.teaserTitle || null },\n                    subtitle: { value: item.subtitleHTML || item.subtitle || null },\n                    teaserSubtitle: { value: item.teaserSubtitle || null },\n                    kicker: { value: item.teaserKicker || item.kicker || null },\n                    teaserKicker: { value: item.teaserKicker || null },\n                    published_url: { value: item.siteDomain + item.published_url },\n                    byline: { value: item.byline_names },\n                    bylineImage: { value: item.full_bylines && item.full_bylines[0] ? item.full_bylines[0].imageUrl : '' },\n                    seotitle: { value: item.seotitle },\n                    seodescription: { value: item.seodescription },\n                    paywall: { value: item.paywall },\n                    bodytext: { value: item.bodytext },\n                    site_id: { value: item.site_id },\n                    published: { value: item.published },\n                    modified: { value: item.modified },\n                    created: { value: item.created }\n                },\n                primaryTags: {\n                    section: item.section_tag\n                },\n                tags: (item.tags || '').split(', ')\n            },\n            metadata: {},\n            width: 100,\n            widthVp: {},\n            children: []\n        };\n        for (const field of this.options.extraFields) {\n            if (item[field] !== undefined && result.contentdata.fields[field] === undefined) {\n                result.contentdata.fields[field] = {\n                    value: item[field]\n                };\n            }\n        }\n        if (item.frontCropUrl) {\n            result.children.push(this.transformImage(item));\n        }\n        return result;\n    }\n\n    transformImage(item) {\n        const fields = {\n            caption: { value: item.imageCaption }\n        };\n        if (item.frontCropUrl) {\n            // \"?imageId=128902&panoh=21.25&panow=29.56&panox=27.75&panoy=35.62&heighth=100&heightw=100&heightx=0&heighty=0\"\n            const parts = item.frontCropUrl.split('?');\n            if (parts.length === 2) {\n                const ignored = ['imageId'];\n                const items = parts[1].split('&');\n                for (const imgParts of items) {\n                    const [key, value] = imgParts.split('=');\n                    if (key && !ignored.includes(key)) {\n                        fields[key] = { value };\n                    }\n                }\n                // Transform params in front crop url to standard params used in the rest of Labrador:\n                const transform = {\n                    panox: 'x', panoy: 'y', panow: 'cropw', panoh: 'croph'\n                };\n                for (const [key, value] of Object.entries(transform)) {\n                    if (fields[key] !== undefined) {\n                        fields[value] = fields[key];\n                        delete fields[key];\n                    }\n                }\n            }\n        }\n        return {\n            type: 'image',\n            contentdata: {\n                instance_of: item.image,\n                fields\n            },\n            metadata: {}\n        };\n    }\n\n}\n","export const utils = {\n\n    // (void) Set article and image sizes.\n    // Modify data in place.\n    decorateRow: (row, options) => {\n        const widths = utils.distributePercent(100, row.length, options.grid_size);\n        for (const article of row) {\n            article.width = widths.shift();\n        }\n    },\n\n    // (array) Add articles to columns in rows.\n    groupRowsAndColums: (data, options) => {\n        const rows = [];\n        let currentRow = [];\n        for (const article of data) {\n            if (currentRow.length >= options.columnCount) {\n                rows.push(currentRow);\n                if (rows.length >= options.rowCount) {\n                    return rows;\n                }\n                currentRow = [];\n            }\n            currentRow.push(article);\n        }\n        rows.push(currentRow);\n        return rows;\n    },\n\n    // (int) Convert a percent-value to a grid-value\n    // Example for 12-grid system: 50 -> 6\n    percentToGrid: (percentValue, totalGridSize = 12) => Math.round((percentValue / 100) * totalGridSize),\n\n    // (float) Convert a grid-value to a percent value.\n    // Example for 12-grid system: 6 -> 50\n    gridToPercent: (gridValue, totalGridSize = 12) => utils.floatPrecision((gridValue / totalGridSize) * 100),\n\n    // (float) Precision: 2 decimals. Always use this method to set grid-widths to keep format consistent.\n    // Examples: 33.333333 -> 33.33, 50 -> 50\n    floatPrecision: (size) => parseFloat(parseFloat(size).toFixed(2)),\n\n    // (array) How to space for example 5 items in 100% in a 12-grid system?\n    // 100/5 = 20, this will result in 5 items using grid-2 ... 2 short ...\n    distributePercent: (size, count, totalGridSize = 12) => {\n        const grids = utils.distributeGrid(utils.percentToGrid(size, totalGridSize), count);\n        return grids.map((g) => utils.gridToPercent(g, totalGridSize));\n    },\n\n    // (array)\n    distributeGrid: (gridSize, requestedCount) => {\n        let count = requestedCount;\n        if (count > gridSize) {\n            count = gridSize;\n            Sys.logger.warn(`grid.distributeGrid: Requested count ${ requestedCount } is larger than gridSize ${ gridSize }. Will use count ${ count }.`);\n        }\n        const oneGrid = gridSize / count;\n        if (Number.isInteger(oneGrid)) {\n            return Array(count).fill(oneGrid);\n        }\n        let used = 0;\n        let up = true;\n        let result = [];\n        for (let i = 0; i < count; i++) {\n            const fullGridValue = up ? Math.ceil(oneGrid) : Math.floor(oneGrid);\n            result.push(fullGridValue);\n            used += fullGridValue;\n            up = !up;\n        }\n        let diff = used - gridSize;\n        if (used !== gridSize) {\n            const newResult = [];\n            while (diff > 0 && result.length) {\n                let n = result.shift();\n                if (n > 1) {\n                    n--;\n                    diff -= 1;\n                }\n                newResult.push(n);\n            }\n            result = result.concat(newResult);\n        }\n        if (result.length !== count) {\n            Sys.logger.warn(`Utility-method grid.distributeGrid will return a faulty array. Excpected a count of ${ count }, got ${ result.length } ...`);\n        }\n        return result;\n    }\n\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Expose resources for Labrador editor\n\nexport * as behaviours from './behaviours/index.js';\nexport { default as Entry } from './Editor.js';\nexport * as collections from './collections/index.js';\nexport * as plugins from './plugins/index.js';\nexport { default as appsModules } from './apps/index.js';\n"],"names":[],"sourceRoot":""}