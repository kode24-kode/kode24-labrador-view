/*!
 * Baseview.
 * Build: f91165f8a6ae08229d32
 * (c) Labrador CMS AS
 * https://www.labradorcms.com
 *
 */
/******/ var __webpack_modules__ = ({

/***/ "./build/modules/client_modules.js":
/*!*****************************************!*\
  !*** ./build/modules/client_modules.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Entry": () => (/* binding */ O),
/* harmony export */   "behaviours": () => (/* binding */ q)
/* harmony export */ });
var e={d:(t,i)=>{for(var s in i)e.o(i,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.d(t,{k:()=>A,B:()=>i});var i={};e.r(i),e.d(i,{adnuntiusAd:()=>F,article:()=>v,googleAd:()=>$,image:()=>k,livefeed:()=>T,notice:()=>w,page_article:()=>h,page_front:()=>f});class s{static getSiteStyles(e,t=[]){const i=lab_api.v1.config.get(`site_styles.${e}`)||t;return Sys.logger.debug(`ViewSupport: Found ${Array.isArray(i)?i.length:0} stylesheet(s) for site "${e}".`),i}static getSiteStylesWithFallback(e,t=[]){const i=this.getSiteStyles(e,null);if(null===i){t.push(e);const i=lab_api.v1.config.get("lab_fallback_site",{site:e});if(i&&!t.includes(i))return this.getSiteStylesWithFallback(i,t)}return i||[]}static getSiteScripts(e,t,i){const s=this.filterScriptListByPageType(lab_api.v1.config.get(`site_scripts.${e}`)||[],t,i);return Sys.logger.debug(`ViewSupport: Found ${s.length} script-path(s) for site "${e}".`),s}static getSiteScriptsWithFallback(e,t,i,s=[]){let a=this.getSiteScripts(e,t,i);if(s.length&&(a=this.removeWithInheritFalse(a)),!a.length){s.push(e);const a=lab_api.v1.config.get("lab_fallback_site",{site:e});if(a&&!s.includes(a))return this.getSiteScriptsWithFallback(a,t,i,s).filter((e=>!1!==e.inherit))}return a}static getCommonScripts(e,t,i=!1){const s=this.filterScriptListByPageType(lab_api.v1.config.get("site_scripts_common")||[],e,t,i);return Sys.logger.debug(`ViewSupport: Found ${s.length} common ${i?"script-path(s)":"JS modules"}`),s}static filterScriptListByPageType(e,t,i,s=!1){return e.filter((e=>(!e.isModule&&!s||e.isModule&&s)&&(!e.pageType||e.pageType===t)&&(!i||i&&!e.skipEditor)))}static removeWithInheritFalse(e){return Array.isArray(e)&&e.length>0?e.filter((e=>!1!==e.inherit)):e}static getSiteFilesForContentboxes(e,t,i,s=[]){const a=[],n=lab_api.v1.model.query.getModelTypes();Sys.logger.debug(`ViewSupport sitefiles: Will register ${i}-file(s) for contentbox-types ${n.join(", ")}.`);for(const e of n){const t=lab_api.v1.config.get(`contentbox_settings.${e}.require.${i}`);if(Array.isArray(t))for(const n of t)a.includes(n)||s.includes(n)||(Sys.logger.debug(`ViewSupport sitefiles: Will include ${i}-file "${n}" for contentbox "${e}".`),a.push(n))}return Sys.logger.debug(`ViewSupport sitefiles: Finished registering ${i}-file(s). Found ${a.length} file(s).`),a}}class a{constructor(e){this.api=e,this.pageType=this.api.v1.model.root.getType()}get media(){return{getLogo:(e=this.api.v1.viewport.getName())=>{const t=this.api.v1.config.get("logo")||{},i=t.uploadedFileUrl?{src:t.uploadedFileUrl,href:t.default.href,type:"img",size:{width:t.logoWidth},title:t.default.title,isCustom:!0}:t[e]||t.default||null;i&&("img"===i.type?i.is_img=!0:"svg"===i.type&&(i.is_svg=!0));return{current:i,sm:t.uploadedFileUrl?{src:t.uploadedFileUrl,href:t.default.href,size:{width:t.logoWidth},title:t.default.title,isCustom:!0}:t.standalone||t.mailmojo||null,mm:t.uploadedMailmojoFileUrl?{src:t.uploadedMailmojoFileUrl,href:t.default.href,size:{width:t.mailmojoLogoWidth},title:t.default.title,isCustom:!0}:t.mailmojo||t.standalone||null}}}}get menus(){return{get:({section:e,defaultSection:t}={},i)=>{const s={},a=Object.values(this.api.v1.config.get("menus")||{});if(a.length<1)return null;const n=i=>{i.forEach((i=>{i.selected=i.section===e||i.section===t,"target"in i||(i.target="_self"),"selector"in i||(i.selector=""),"children"in i||(i.children=[]),i.children.length>0&&(i.hasChildren=!0,n(i.children))}))};return a.forEach((e=>{n(e.menuItems);const t=e.type||e.menuName;s[t]={items:e.menuItems,type:e.type,selector:e.selector||""}})),i?s[i]:s}}}get misc(){return{}}get resources(){const e={required:[],getProgressReader:()=>(e.required.push({url:"/view-resources/public/common/ReadProgress.js",requireDom:!1}),{active:!0,minElementCount:lab_api.v1.config.get("displayReadProgress.minElementCount")||25}),getSiteFiles(t,i,a,n,o){const r=s.getSiteScriptsWithFallback(a,n,o),l=s.getCommonScripts(n,o);return e.required.push(...r,...l),{js:s.getSiteFilesForContentboxes(t,i,"js",e.required.map((e=>e.url))),css:s.getSiteFilesForContentboxes(t,i,"css")}},getModules:(e,t,i,a,n)=>s.getCommonScripts(a,n,!0)},t={get:e=>{const i=(lab_api.v1.config.get("analytics.kilkaya")||[]).map((e=>{const t={...e};return t.id&&"string"==typeof t.id&&t.id.trim().endsWith(".js")&&(t.url=t.id),t}));let s=this.api.v1.config.get("analytics.adnuntiusConnect");s&&"object"==typeof s&&!Array.isArray(s)&&Object.keys(s).length&&(s=new Array(s));const a={google:this.api.v1.config.get("analytics.google.tracking_id"),google_gtm:this.api.v1.config.get("analytics.google.gtm"),comscore:this.api.v1.config.get("analytics.comscore.comscore_id"),adnuntiusConnect:s,adnuntiusConnectCMP:this.api.v1.config.get("analytics.adnuntiusConnectCMP"),kilkaya:i,kilkayaSettings:this.api.v1.config.get("analytics.kilkayaSettings"),io:this.api.v1.config.get("analytics.io.tracking_id")},n=t.getDataLayer(e);return n.dataLayer&&(a.dataLayer=n.dataLayer),n.usesJWTCookieData&&(a.usesJWTCookieData=n.usesJWTCookieData),a},getDataLayer:e=>{const t=this.api.v1.config.get("analytics.google.dataLayer");let i=!1;if(t&&Array.isArray(t)&&t.length){t.forEach((t=>{let s=null;switch(t.source){case"fixed":s=(t.value||"").trim();break;case"config":s=this.api.v1.properties.get(t.value);break;case"jwtcookie":t.isJWTCookie=!0,s=t.value,i=!0;break;case"article_authors":s=`${(e.bylinesStringCommaSeparated||"").replace(/"/g,"")}`;break;case this.pageType.replace("page_",""):s=this.api.v1.model.query.getRootModel().get(t.value);break;default:Sys.logger.warn(`Unsupported dataLayer source: "${t.source}"`)}t.value=null===s?"":s.toString()}));const s=t.map((e=>e.value.length>0)).lastIndexOf(!0);t[s]&&(t[s].last=!0)}return{dataLayer:t,usesJWTCookieData:i}}};return{scripts:e,analytics:t}}get settings(){return{get:(e={})=>{const t=this.api.v1.config.get(`page_settings.${e.pageType}.social.display`)||{},i=this.api.v1.model.query.getRootModel().get("fields.show_social_bodytext_before"),s=this.api.v1.model.query.getRootModel().get("fields.show_social_bodytext_after"),a=this.api.v1.model.query.getRootModel().get("fields.show_social_header");null!==i&&(t.bodytext_before=!!i),null!==s&&(t.bodytext_after=!!s),null!==a&&(t.header=!!a);const n=this.api.v1.config.get(`page_settings.${e.pageType}.social.items`)||{},o=this.api.v1.config.get(`page_settings.${e.pageType}.showTags`),r=Object.keys(n).filter((e=>!!n[e].display)).map((t=>({name:t,icon:n[t].icon||"",url:e.socialLinks[t]||"",shareText:n[t].shareText||"",isButton:n[t].isButton||!1})));return{page_type:e.pageType,social:{display:{bodytext_before:r.length>0&&!!t.bodytext_before,bodytext_after:r.length>0&&!!t.bodytext_after,header:r.length>0&&!!t.header},items:r},showTags:!1!==o}}}}}class n{static getStyleDefinitions(e){const t=e.v1.properties.get("site.alias"),i=e.v1.config.get("style_definitions",t),s=[];(i.rules||[]).forEach((e=>s.push(e))),(i.fontface||[]).forEach((e=>{const t=`.font-${e.family.replace(/ /g,"")}`;s.push(n.getFamilyDefinition(t,e.family));const i={light:{keys:["light","200","100","300"],used:!1},normal:{keys:["regular","normal","400","500"],used:!1},bold:{keys:["bold","600","700"],used:!1},black:{keys:["black","800","900"],used:!1}};e.variants.forEach((e=>{for(const a of Object.keys(i)){const o=i[a];o&&!o.used&&o.keys.indexOf(e)>-1&&(s.push(n.getWeightDefinition(t,e,a)),o.used=!0)}}))}));const a={fontface:i.fontface||[],parsedRules:n.CSSRuleParser(s)};return a.hasRules=!!a.parsedRules.length,a}static getFamilyDefinition(e,t){return{selector:e,declarations:[{key:"font-family",value:`"${t}" !important`}]}}static getWeightDefinition(e,t,i){let s=t;return"regular"===t&&(s="normal"),{selector:`${e}.font-weight-${i}`,declarations:[{key:"font-weight",value:`${s} !important`}]}}static CSSRuleParser(e){const t=[];return e.forEach((e=>{let i,s,a=`${e.selector} { `;e.declarations.forEach((e=>{"font-size-desktop"===e.key?"default"!==e.value&&(a+=`font-size: ${e.value.slice(0,-2)/16}rem; `):"font-size-mobile"===e.key?"default"!==e.value&&(i=`calc(0.262vw * ${e.value.slice(0,-2)})`):"line-height-desktop"===e.key?"default"!==e.value&&(a+=`line-height: ${e.value}; `):"line-height-mobile"===e.key?"default"!==e.value&&(s=e.value):"font-family"===e.key?e.value.includes("!important")?a+=`${e.key}: ${e.value}; `:a+=`${e.key}: "${e.value}"; `:a+=`${e.key}: ${e.value}; `})),a+="}",(i||s)&&(a+=`@media (max-width: 767px) { .resp_fonts ${e.selector} {`,i&&(a+=`font-size: ${i}; `),s&&(a+=`line-height: ${s}; `),a+="} }"),t.push(a)})),t}static getInlineCSS(e,t){return[{key:"custom_properties",value:e.v1.config.get("css_build.custom_properties",{site:t})||""},{key:"background_colors",value:e.v1.config.get("css_build.background_colors",{site:t})||""},{key:"background_colors_opacity",value:e.v1.config.get("css_build.background_colors_opacity",{site:t})||""},{key:"border_colors",value:e.v1.config.get("css_build.border_colors",{site:t})||""},{key:"font_colors",value:e.v1.config.get("css_build.font_colors",{site:t})||""},{key:"image_gradient",value:e.v1.config.get("css_build.image_gradient",{site:t})||""}]}static getCssVariables(e){const t=e.v1.config.get("custom_css_variables")||{},i={no_viewport:[],desktop:[],mobile:[]};for(const e of Object.keys(t))for(const s of Object.keys(t[e]))i[s].push({key:e,value:(t[e][s]||{}).value});return i}}const o={sunday:{en:"sunday",sv:"söndag",dk:"søndag",no:"søndag",nl:"zondag",kl:"sapaat"},monday:{en:"monday",sv:"måndag",dk:"mandag",no:"mandag",nl:"maandag",kl:"ataasinngorneq"},tuesday:{en:"tuesday",sv:"tisdag",dk:"tirsdag",no:"tirsdag",nl:"dinsdag",kl:"marlunngorneq"},wednesday:{en:"wednesday",sv:"onsdag",dk:"onsdag",no:"onsdag",nl:"woensdag",kl:"pingasunngorneq"},thursday:{en:"thursday",sv:"torsdag",dk:"torsdag",no:"torsdag",nl:"donderdag",kl:"sisamanngorneq"},friday:{en:"friday",sv:"fredag",dk:"fredag",no:"fredag",nl:"vrijdag",kl:"tallimanngorneq"},saturday:{en:"saturday",sv:"lördag",dk:"lørdag",no:"lørdag",nl:"zaterdag",kl:"arfininngorneq"},january:{en:"January",sv:"januari",dk:"januar",no:"januar",nl:"januari",kl:"ukiortaarsiorneq"},february:{en:"February",sv:"februari",dk:"februar",no:"februar",nl:"februari",kl:"ukiortaami"},mars:{en:"March",sv:"mars",dk:"marts",no:"mars",nl:"maart",kl:"marsi"},april:{en:"April",sv:"april",dk:"april",no:"april",nl:"april",kl:"apriili"},may:{en:"May",sv:"maj",dk:"maj",no:"mai",nl:"mei",kl:"maajii"},june:{en:"June",sv:"juni",dk:"juni",no:"juni",nl:"juni",kl:"juuni"},july:{en:"July",sv:"juli",dk:"juli",no:"juli",nl:"juli",kl:"juuli"},august:{en:"August",sv:"augusti",dk:"august",no:"august",nl:"augustus",kl:"aggusti"},september:{en:"September",sv:"september",dk:"september",no:"september",nl:"september",kl:"septembari"},october:{en:"October",sv:"oktober",dk:"oktober",no:"oktober",nl:"oktober",kl:"oktobari"},november:{en:"November",sv:"november",dk:"november",no:"november",nl:"november",kl:"novembari"},december:{en:"December",sv:"december",dk:"december",no:"desember",nl:"december",kl:"decembari"},ago:{en:"ago",sv:"sedan",dk:"siden",no:"siden",nl:"geleden",kl:"matuma siorna"},now:{en:"now",sv:"nu",dk:"nu",no:"nå",nl:"nu",kl:"maanna"},min:{en:"min"},minutes:{en:"minutes",sv:"minuter",dk:"minutter",no:"minutter",nl:"minuten",kl:"minutsi"},hour:{en:"hour",sv:"timme",dk:"time",no:"time",nl:"uur",kl:"akunnera"},hours:{en:"hours",sv:"timmar",dk:"timer",no:"timer",nl:"uren",kl:"akunnerit"},day:{en:"day",sv:"dag",dk:"dag",no:"dag",nl:"dag",kl:"ulloq"},days:{en:"days",sv:"dagar",dk:"dage",no:"dager",nl:"dagen",kl:"ullut"},monthdayyear:{en:"{{MMMM}} {{DD}}. {{YYYY}}",sv:"{{DD}}/{{MM}} {{YYYY}}",dk:"{{DD}}/{{MM}} {{YYYY}}",no:"{{DD}}/{{MM}} {{YYYY}}",nl:"{{DD}}/{{MM}} {{YYYY}}"},hourminute:{en:"{{HH}}:{{mm}}"}};class r{constructor(e="en",t="en"){this.fallbackLanguage=t,this.language=e||t,this.words=o,this.timezone=this.getTimezone()}getTimezone(){const e=lab_api.v1.config.get("timezone");return void 0===e||Number.isNaN(e)||Number.isNaN(parseFloat(e))?1:parseInt(e,10)}str(e){let{language:t}=this;return e in this.words?(t in this.words[e]||(t=this.fallbackLanguage),t in this.words[e]?this.words[e][t]:null):null}format(e,t){return Mustache.render(t,{YYYY:()=>e.getFullYear(),YY:()=>`${e.getFullYear()}`.slice(-2),MM:()=>(e.getMonth()<9?"0":"")+(e.getMonth()+1),M:()=>e.getMonth()+1,D:()=>e.getDate(),DD:()=>(e.getDate()<10?"0":"")+e.getDate(),H:()=>e.getHours(),HH:()=>(e.getHours()<10?"0":"")+e.getHours(),m:()=>e.getMinutes(),mm:()=>(e.getMinutes()<10?"0":"")+e.getMinutes(),s:()=>e.getSeconds(),ss:()=>(e.getSeconds()<10?"0":"")+e.getSeconds(),dddd:()=>this.weekday(e,!1),ddd:()=>this.weekday(e,!1,3),MMMM:()=>this.monthName(e,!1),MMM:()=>this.monthName(e,!1,3),W:()=>this.weekNumber(e,!0,!0),WW:()=>this.weekNumber(e,!0,!1)})}utcFormat(e,t){const i=this.correctDate(e);return Mustache.render(t,{YYYY:()=>i.getUTCFullYear(),YY:()=>`${i.getUTCFullYear()}`.slice(-2),MM:()=>(i.getUTCMonth()<9?"0":"")+(i.getUTCMonth()+1),M:()=>i.getUTCMonth()+1,D:()=>i.getUTCDate(),DD:()=>(i.getUTCDate()<10?"0":"")+i.getUTCDate(),H:()=>i.getUTCHours(),HH:()=>(i.getUTCHours()<10?"0":"")+i.getUTCHours(),m:()=>i.getUTCMinutes(),mm:()=>(i.getUTCMinutes()<10?"0":"")+i.getUTCMinutes(),s:()=>i.getUTCSeconds(),ss:()=>(i.getUTCSeconds()<10?"0":"")+i.getUTCSeconds(),dddd:()=>this.weekday(i,!0),ddd:()=>this.weekday(i,!0,3),MMMM:()=>this.monthName(i,!0),MMM:()=>this.monthName(i,!0,3),W:()=>this.weekNumber(i,!0,!0),WW:()=>this.weekNumber(i,!0,!1)})}formattedDate(e,t,i=!0,s=!0){let a=t||"";return a=a.replace("Y",e.getFullYear()),a=a.replace("m",(i&&e.getMonth()<9?"0":"")+(e.getMonth()+1)),a=a.replace("d",(i&&e.getDate()<10?"0":"")+e.getDate()),a=a.replace("H",(s&&e.getHours()<10?"0":"")+e.getHours()),a=a.replace("i",(s&&e.getMinutes()<10?"0":"")+e.getMinutes()),a=a.replace("s",e.getSeconds()),a=a.replace("l",this.weekday(e,!1)),a=a.replace("D",this.weekday(e,!1,3)),a=a.replace("F",this.monthName(e,!1)),a=a.replace("M",this.monthName(e,!1,3)),a}formattedUtcDate(e,t,i=!0,s=!0){const a=this.correctDate(e);let n=t||"";return n=n.replace("Y",a.getUTCFullYear()),n=n.replace("m",(i&&a.getUTCMonth()<9?"0":"")+(a.getUTCMonth()+1)),n=n.replace("d",(i&&a.getUTCDate()<10?"0":"")+a.getUTCDate()),n=n.replace("H",(s&&a.getUTCHours()<10?"0":"")+a.getUTCHours()),n=n.replace("i",(s&&a.getUTCMinutes()<10?"0":"")+a.getUTCMinutes()),n=n.replace("s",a.getUTCSeconds()),n=n.replace("l",this.weekday(a,!0)),n=n.replace("D",this.weekday(a,!0,3)),n=n.replace("F",this.monthName(a,!0)),n=n.replace("M",this.monthName(a,!0,3)),n}correctDate(e){return this.manipulateTime(e,this.isSummerTime(e)?this.timezone+1:this.timezone)}utcDate(e){return this.unmanipulateTime(e,this.isSummerTime(e)?this.timezone+1:this.timezone)}timestampToDate(e){return new Date(1e3*e)}toTimestamp(e){return Math.round(e.getTime()/1e3)}parseDate(e){const t=e.substr(0,4),i=e.substr(4,2)-1,s=e.substr(6,2),a=new Date(t,i,s),n=a.getFullYear()==t,o=a.getMonth()==i,r=a.getDate()==s;return n&&o&&r?a:"invalid date"}weekday(e,t=!1,i=9){return([this.str("sunday"),this.str("monday"),this.str("tuesday"),this.str("wednesday"),this.str("thursday"),this.str("friday"),this.str("saturday")][t?e.getUTCDay():e.getDay()]||"").substr(0,i)}monthName(e,t=!1,i=10){return([this.str("january"),this.str("february"),this.str("mars"),this.str("april"),this.str("may"),this.str("june"),this.str("july"),this.str("august"),this.str("september"),this.str("october"),this.str("november"),this.str("december")][t?e.getUTCMonth():e.getMonth()]||"").substr(0,i)}weekNumber(e,t=!1,i=!0){const s=new Date(e.valueOf()),a=((t?e.getUTCDay():e.getDay())+6)%7;s.setDate(s.getDate()-a+3);const n=s.valueOf();s.setMonth(0,1),4!==s.getDay()&&s.setMonth(0,1+(4-s.getDay()+7)%7);const o=1+Math.ceil((n-s)/6048e5);return(!i&&o<10?"0":"")+o}timestampToNiceDate(e,t=!1){const i={ago:t?"":this.str("ago"),now:this.str("now"),minute:t?this.str("min"):this.str("minutes"),minutes:t?this.str("min"):this.str("minutes"),hour:this.str("hour"),hours:this.str("hours"),day:this.str("day"),days:this.str("days")},s=(new Date).getTime(),a=new Date(1e3*e).getTime()-0,n=parseInt((s-a)/1e3/60,10);return n<60?n<1?i.now:1==n?`1 ${i.minute} ${i.ago}`:`${n} ${i.minutes} ${i.ago}`:n<1440?1==parseInt(n/60,10)?`1 ${i.hour} ${i.ago}`:`${parseInt(n/60,10)} ${i.hours} ${i.ago}`:parseInt(n/1440,10)<30?1==parseInt(n/1440,10)?`1 ${i.day} ${i.ago}`:`${parseInt(n/1440,10)} ${i.days} ${i.ago}`:this.format(this.timestampToDate(e),this.str("monthdayyear"))}isSummerTime(e){function t(e,t){const i=new Date,s=new Date(Date.UTC(t||i.getFullYear(),e+1,0)),a=s.getDay();return new Date(Date.UTC(s.getFullYear(),s.getMonth(),s.getDate()-a))}const i=e||new Date,s=t(2,i.getFullYear());s.setHours(1);const a=t(9,i.getFullYear());return s.setHours(1),i.getTime()>=s.getTime()&&i.getTime()<a.getTime()}manipulateTime(e,t){return new Date(e.getTime()+60*t*60*1e3)}unmanipulateTime(e,t){return new Date(e.getTime()-60*t*60*1e3)}}class l{static getAdnuntiusSettings(e,t,i,s,a,n=!1,o=!1){const l=(e.v1.config.get("contentbox_settings.adnuntiusAd.bidding")||{}).enabled||!1;function d(e,t){let i="";return l&&e.prebidConfig&&(i=JSON.parse(e.prebidConfig),Array.isArray(i)&&([i]=i),i=JSON.stringify(i)),{...e,prebidConfig:i,metadata:t.metadata||[]}}const g=e.v1.config.get("contentbox_settings.adnuntiusAd.formats")||[],c=e.v1.config.getView(`insertDynamic.${e.v1.model.root.getType().replace("page_","")}.${i.getViewport()}`,a.alias)||[],p=e.v1.model.query.getChildrenOfType(t,"adnuntiusAd",!0,!0),u=[];for(const e of c){const[t]=g.filter((t=>e.content_data.fields.format===t.format));t&&(!1===e.placement.key.includes("skyscraper_")&&"topbanner"!==e.placement.key||e.placement.key.includes("skyscraper_")&&!n||"topbanner"===e.placement.key&&!o)&&u.push(d(t,e))}for(const e of p){const[t]=g.filter((t=>e.get("fields.format")===t.format));t&&u.push(d(t,e))}const h=(new r).utcFormat(new Date,"&tag=week_{{ W }}_{{ YYYY }}");return{enabled:g.length>0,lazyload:e.v1.config.get("contentbox_settings.adnuntiusAd.lazyload")||!1,adUnits:u,spacingTop:e.v1.config.get("contentbox_settings.adnuntiusAd.spacingTop")||120,fetchMarginPercent:s.fetchMarginPercent||150,renderMarginPercent:s.renderMarginPercent||150,bidding:{enabled:l},hideOnTabletWidth:s.hideOnTabletWidth||1316,refreshdelay:e.v1.config.get("contentbox_settings.adnuntiusAd.refreshdelay")||5,refreshcount:e.v1.config.get("contentbox_settings.adnuntiusAd.refreshcount")||1,connectLoading:e.v1.config.get("contentbox_settings.adnuntiusAd.connectLoading")||!1,contkitEnabled:e.v1.config.get("contentbox_settings.adnuntiusAd.contkitEnabled")||!1,newsletter:{targeting:h}}}static getGoogleSettings(e,t,i,s,a,n=!1,o=!1){function r(e,t){const{sizes:i=[]}=e;return{...e,sizesString:`[${i.map((e=>`[${e.width},${e.height}]`)).join(", ")}]`,metadata:t.metadata||[]}}const l=e.v1.config.get("contentbox_settings.googleAd.formats")||[],d=e.v1.config.get("contentbox_settings.googleAd.anchor")||{enabled:!1,code:"",type:"TOP_ANCHOR"},g=e.v1.config.getView(`insertDynamic.${e.v1.model.root.getType().replace("page_","")}.${i.getViewport()}`,a.alias)||[],c=e.v1.model.query.getChildrenOfType(t,"googleAd",!0,!0),p=[];for(const e of g){const[t]=l.filter((t=>e.content_data.fields.format===t.format));t&&(!1===e.placement.key.includes("skyscraper_")&&"topbanner"!==e.placement.key||e.placement.key.includes("skyscraper_")&&!n||"topbanner"===e.placement.key&&!o)&&p.push(r(t,e))}for(const e of c){const[t]=l.filter((t=>e.get("fields.format")===t.format));t&&p.push(r(t,e))}return{enabled:l.length>0,lazyload:s.lazyload||!1,spacingTop:e.v1.config.get("contentbox_settings.googleAd.spacingTop")||120,fetchMarginPercent:s.fetchMarginPercent||150,renderMarginPercent:s.renderMarginPercent||150,adUnits:p,anchor:d,dfpid:s.dfpid||!1,debugmode:s.debugmode||!1,disableInitialLoad:s.disableInitialLoad||!1,bidding:s.bidding,hideOnTabletWidth:s.hideOnTabletWidth||1316}}}class d{constructor({pageType:e="",canonical:t="",isTagpage:i=!1,isTagpageWithFrontpage:s=!1,tagpagePath:a="/tag/"}={}){this.settings={pageType:e,canonical:t,isTagpage:i,isTagpageWithFrontpage:s,tagpagePath:a},this.cache={seoData:null}}getStructuredData(e){return e.get("fields.jsonld_json")?e.get("fields.custom_jsonld"):"front"===this.settings.pageType?this.generateFrontData(e):"article"===this.settings.pageType||"notice"===this.settings.pageType?this.generateArticleData(e):null}generateSiteData(e){return{"@context":"http://schema.org","@type":"WebSite",name:lab_api.v1.properties.get("site.display_name"),url:lab_api.v1.properties.get("site.domain")||""}}generateFrontData(e){const t=this.getSEOData(e);return{"@context":"https://schema.org","@type":"WebPage",name:t.title,description:t.description}}generateArticleData(e){const t=this.getSEOData(e),i={"@context":"https://schema.org","@type":"NewsArticle",headline:t.title||e.get("fields.title"),description:t.description,availableLanguage:[{"@type":"Language",alternateName:t.language}],images:lab_api.v1.model.query.getChildrenOfType(e,"image",!0).map((e=>(e.get("fields.imageurl")||"").includes("width=")?`${e.get("fields.imageurl")}1200`:`${e.get("fields.imageurl")}&width=1200`)),author:lab_api.v1.model.query.getChildrenOfType(e,"byline",!0).map((e=>{let t=e.get("fields.firstname");"Byline first name"===t&&(t="");let i=e.get("fields.lastname");"Byline last name"===i&&(i="");const s={"@type":"Person",name:`${t} ${i}`},a=e.get("fields.public_url");a&&(s.url=a);const n=(e.children||[]).filter((e=>"image"===e.type))[0];n&&(s.image={"@type":"ImageObject",url:`${n.get("fields.imageurl")}&width=250`});const o=e.get("fields.public_email");return o&&(s.email=o),s})),publisher:{"@type":"Organization",name:lab_api.v1.properties.get("site.display_name"),logo:{"@type":"ImageObject",url:lab_api.v1.config.get("logo.default.src")}}};return e.get("fields.published")&&(i.datePublished=new Date(1e3*parseInt(e.get("fields.published"),10)).toISOString()),e.get("fields.modified")&&(i.dateModified=new Date(1e3*parseInt(e.get("fields.modified"),10)).toISOString()),"1"===e.get("fields.paywall")&&(i.isAccessibleForFree=!0,i.hasPart={"@type":"WebPageElement",isAccessibleForFree:!1,cssSelector:".teaserContent"}),i}getSEOData(e){if(this.cache.seoData)return this.cache.seoData;let t,i,s;if("article"===this.settings.pageType||"notice"===this.settings.pageType)i=lab_api.v1.util.string.sanitizeString(e.get("fields.seotitle")||e.get("fields.title")||""),s=lab_api.v1.util.string.sanitizeString(e.get("fields.seodescription")||e.get("fields.subtitle")||""),t=e.get("fields.seolanguage")||lab_api.v1.config.get("contentLanguage");else{if(this.settings.isTagpage&&!this.settings.isTagpageWithFrontpage){const e=this.settings.tagpagePath.replace(/\//g,""),t=(this.settings.canonical.split(this.settings.tagpagePath)[1]||"").split("/").filter((e=>!!e)),s={tag:t[t.length-1],tags:t,tagPath:e};i=lab_api.v1.locale.get("tags.title_text",{data:s})}else i=lab_api.v1.util.string.sanitizeString(e.get("fields.seotitle")||e.get("fields.name")||"");s=lab_api.v1.util.string.sanitizeString(e.get("fields.seodescription")||"")}return this.cache.seoData={title:i.charAt(0).toUpperCase()+i.slice(1),description:s,language:t},this.cache.seoData}}class g{static prepareForTemplate(e,t,i){const s={meta:{head_top:[],head_bottom:[]},script:{head_top:[],head_bottom:[],body_top:[],body_bottom:[]},style:{head_top:[],head_bottom:[]},link:{head_top:[],head_bottom:[]}},a=e.filter((e=>!(e.pageType&&e.pageType!==t||e.skipEditor&&i)));for(const e of Object.keys(s))for(const t of Object.keys(s[e]))s.meta[t]=a.filter((e=>"meta"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e))),s.script[t]=a.filter((e=>"script"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e))),s.style[t]=a.filter((e=>"style"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e))),s.link[t]=a.filter((e=>"link"===e.tag)).filter((e=>e.placement===t)).map((e=>this.createCustomTag(e)));return console.log(s),s}static createCustomTag(e){switch(e.tag){case"link":return this.createLinkTag(e);case"script":return this.createScriptTag(e);case"style":return this.createStyleTag(e);default:return this.createMetaTag(e)}}static fetchDynamicAttribute(e){return lab_api.v1.view.render({model:lab_api.v1.model.query.getRootModel(),template:e})||null}static parseAttributes(e){return e.filter((e=>!!e.key)).map((e=>e.value?`${e.key}="${e.value.match(/\{\{.*\}\}/g)?this.fetchDynamicAttribute(e.value):e.value}"`:e.key)).join(" ")}static parseVariables(e){return e.replace(/\{\{\{?.*?\}\}\}?/g,this.fetchDynamicAttribute)}static createLinkTag(e){return`<link ${this.parseAttributes(e.attributes)}>`}static createScriptTag(e){return`<script ${this.parseAttributes(e.attributes)}>${e.value?this.parseVariables(e.value):""}<\/script>`}static createMetaTag(e){return`<meta ${this.parseAttributes(e.attributes)}>`}static createStyleTag(e){return`<style ${this.parseAttributes(e.attributes)}>${e.value?this.parseVariables(e.value):""}</style>`}}class c{static buildConfig(e){return{viewConfig:{config:{customer:{paywall:{label:lab_api.v1.config.get("paywall.label")||{}},image:{defaultAspectRatio:lab_api.v1.config.get("image.defaultAspectRatio")||void 0}}}}}}}class p{constructor(e,t){this.api=e,this.page=t}set(e,t){const i=this.export(e,t);for(const t of Object.keys(i))e.setFiltered(t,i[t])}export(e,t){const i={},a=new Date,o=t.get("type").replace("page_",""),r=t.get("id"),p=this.api.v1.site.getSite().domain||this.api.v1.properties.get("customer_front_url"),u=p+t.get("fields.published_url"),h=encodeURIComponent(u),f=this.api.v1.properties.get("image_server"),m=this.api.v1.app.mode.isEditor(),y=this.getCanonicalUrl(e,o,r,p),b=this.api.v1.config.get("tagPagePath")||"/tag/",v="front"===o&&(u.endsWith(b.slice(0,-1))||u.indexOf(b)>-1),_=v&&!u.endsWith(b.slice(0,-1));i.customer_front_url=p,i.isEditMode=m,i.url=u,i.urlEncoded=h,i.specificUrl=y,i.image_server=f,i.pageType=o,i.pageId=r,i.is_article="article"===o,i.is_notice="notice"===o,i.is_front="front"===o,i.section=t.get("primaryTags.section")||t.get("fields.defaultsection"),i.device=this.api.v1.viewport.getName(),i.cmsVersion=this.api.v1.properties.get("app.version"),i.front_api_url=this.api.v1.properties.get("front_api_url"),i.xUaDevice=this.api.v1.properties.get("xUaDevice"),i.favicons=this.api.v1.config.get("favicons"),i.faviconList=this.api.v1.config.get("faviconList"),i.skipDefaultFont=this.api.v1.config.get("skipDefaultFont"),i.isDebug=this.api.v1.util.request.hasQueryParam("debug"),i.staticUrl=this.getStaticUrl(e,o,r,p),i.customMetatags=this.getCustomMetatags(),i.customTags=g.prepareForTemplate(this.api.v1.config.get("customTags")||[],o,m),i.footerSettings=this.api.v1.config.get("page_settings.footer"),i.rssDescriptionPrefix=this.api.v1.config.get("viewports.rss.descriptionPrefix"),i.is_tagpage=v,i.contentLanguage=lab_api.v1.config.get("contentLanguage");const k=this.page.media.getLogo(t.getViewport());i.logo=k.current,i.logo_sm=k.sm,i.logo_mm=k.mm,i.misc=this.api.v1.config.get("misc");const S={active:!1,lang:this.api.v1.config.get("google_translate")};S.lang&&Array.isArray(S.lang)&&S.lang.length&&(S.active=!0),i.google_translate=S;const w=new d({pageType:o,canonical:y,isTagpage:v,isTagpageWithFrontpage:_,tagpagePath:b}),T=w.generateSiteData(e),F=w.getStructuredData(e);i.jsonld=JSON.stringify([T,F]);const $=w.getSEOData(e);if(i.seotitle=$.title,i.seodescription=$.description,i.seolanguage=$.language,"article"===o||"notice"===o){const t=e.get("fields.sometitle")||e.get("fields.teaserTitle")||e.get("fields.title");t&&(i.sometitle=this.api.v1.util.string.stripTags(t));const s=e.get("fields.somedescription")||e.get("fields.teaserSubtitle")||e.get("fields.subtitle");if(s&&s.length>0)i.somedescription=this.api.v1.util.string.stripTags(s);else{let t=e.get("fields.bodytext")||"";t=this.api.v1.util.string.stripTags(t),i.somedescription=`${t.substring(0,100)} ...`}}else if("front"===o){const t=e.get("fields.someimage");null!=t&&""!==t&&(i.someimage=`${f}/${t}.webp?width=1200&height=630`),i.sometitle=e.get("fields.sometitle")||e.get("fields.name"),i.somedescription=e.get("fields.somedescription")||""}if(i.social={facebook:`https://www.facebook.com/sharer.php?u=${h}`,twitter:`https://twitter.com/intent/tweet?url=${h}`,mail:`mailto:?subject=${encodeURIComponent(this.api.v1.util.string.stripTags(t.get("fields.title")))}&body=${encodeURIComponent(this.api.v1.util.string.stripTags(t.get("fields.subtitle")))}%0D${h}`,linkedin:`https://www.linkedin.com/sharing/share-offsite/?url=${h}`,threads:`https://threads.net/intent/post?text=${h}`,copyLink:`navigator.clipboard.writeText("${u}");`,glimta:`https://glimta.com/unlock?link=${h}`,talandeWebb:"ReachDeck.panel.toggleBar();",bluesky:`https://bsky.app/intent/compose?text=${encodeURIComponent(`${i.sometitle}\n`)}${h}`},"article"===o){const t=this.api.v1.config.get("page_settings.article.ignoredTags")||[],s=this.api.v1.config.get("page_settings.article.ignoredTagPrefix")||[],a=(e.get("tags")||[]).filter((e=>!t.includes(e))).filter((e=>{for(const t of s)if(e.startsWith(t))return!1;return!0}));i.tagsString=a.toString();let n="";a.forEach(((e,t)=>{n+=`"${e.replace('"',"'")}"`,t<a.length-1&&(n+=", ")})),i.tagsStringCommaSeparated=n;const o=this.api.v1.model.query.getChildrenOfType(e,"byline",!0);if(o){const e=o.map((e=>`"${e.get("fields.firstname")} ${e.get("fields.lastname")}"`)).join(", ");i.bylinesStringCommaSeparated=e}}"article"===o&&e.get("fields.published")&&(i.published=new Date(1e3*parseInt(e.get("fields.published"),10)).toISOString(),i.publishedTimestamp=e.get("fields.published")),i.site=this.api.v1.site.getSite(),i.siteJSON=JSON.stringify(i.site),i["site.domain_no_protocol"]=i.site.domain.split("://").pop(),i.siteAlias=i.site.alias,i.fullUrl=i.site.domain,i[`site_is_${i.siteAlias}`]=!0;const D=this.page.resources;if(!m&&i.is_article&&this.api.v1.config.get("displayReadProgress.active")&&t.get("fields.displayReadProgress")&&(i.readProgress=D.scripts.getProgressReader()),i.siteStylesheetList=s.getSiteStylesWithFallback(i.siteAlias),Sys.logger.debug(`ViewSupport: Will include ${i.siteStylesheetList.length} configured stylesheet(s): "${i.siteStylesheetList.join(", ")}".`),i.siteFiles=D.scripts.getSiteFiles(e,t,i.siteAlias,o,m),i.modules=D.scripts.getModules(e,t,i.siteAlias,o,m),!m){i.analytics=D.analytics.get(i),i.widgets={strossle:this.api.v1.config.get("widgets.strossle.strossle_id")},i.consent={cookieconsent:this.api.v1.config.get("consent.cookieconsent.show"),cookieconsent_culture:this.api.v1.config.get("consent.cookieconsent.culture")||"NB"},this.api.v1.config.get("cookieConsent.enabled")&&D.scripts.required.push({url:"/view-resources/public/common/cookieConsent.js",requireDom:!1}),"desktop"===this.api.v1.viewport.getName()&&t.get("fields.style_slidein")&&(i.style_slidein=!0,D.scripts.required.push({url:"/view-resources/public/common/SlideIn/SlideIn.js",requireDom:!1}));const s=this.api.v1.config.get("adEnvironment")||{},a="1"===t.get("fields.hideAds"),n="1"===t.get("fields.hideSkyscraperAds")||!1,o="1"===t.get("fields.hideTopBannerAd")||!1;if(!a&&s&&"adnuntius"===s.name)try{i.adnuntius=l.getAdnuntiusSettings(this.api,e,t,s,i.site,n,o)}catch(e){Sys.logger.warn(`[PageData] Failed to prepare Adnuntius ads: ${e.toString()}`)}if(!a&&s&&"google"===s.name)try{i.googleAds=l.getGoogleSettings(this.api,e,t,s,i.site,n,o)}catch(e){Sys.logger.warn(`[PageData] Failed to prepare Google ads: ${e.toString()}`)}}if(this.api.v1.util.request.hasQueryParam("fontpreview")&&(i.fontpreview=this.api.v1.util.request.getQueryParam("fontpreview"),i.analytics=null),i.page_settings=this.page.settings.get({pageType:"notice"===o?"article":o,socialLinks:i.social}),"article"===o){const s=this.api.v1.config.get("comments_provider.hideCommentsIfPaywall")||!1,a=this.api.v1.properties.get("paywall")||{},n=lab_api.v1.app.mode.isFront()&&a.active&&!a.hasAccess&&s,l=!1===m&&!1===n;if(t.get("fields.showcomments")&&!n){if(this.api.v1.config.get("comments_provider.facebook")){const e=this.api.v1.config.get("comments_provider.facebook.app_id");e&&(i.facebook={display:l,displayPlaceholder:m,appId:e,pageId:r,url:i.fullUrl+("article"===o?`/a/${r}`:"")},i.displayComments=!0)}if(this.api.v1.config.get("comments_provider.disqus")){const e=this.api.v1.config.get("comments_provider.disqus.enable"),t=this.api.v1.config.get("comments_provider.disqus.script");e&&(i.disqus={display:l,displayPlaceholder:m,canonical:y,pageId:r,script:t},i.displayComments=!0)}const t=this.api.v1.config.get("comments_provider.commento");t&&t.enable&&(i.commento={display:l,displayPlaceholder:m,canonical:y,usePageId:t.usePageId,pageId:r,script:t.script,cssOverride:t.cssOverride,descriptionText:t.descriptionText},i.displayComments=!0);const s=lab_api.v1.config.get("comments_provider.hyvor");if(s&&s.websiteId){const t=e.get("fields.published")||0;i.hyvor={display:l,displayPlaceholder:m,websiteId:s.websiteId,pageId:t>1646908200&&r},s.hidePageIdBeforeDate&&t<s.hidePageIdBeforeDate&&(i.hyvor.pageId=""),i.displayComments=!0}const a=lab_api.v1.config.get("comments_provider.ifragasatt");a&&(i.ifragasatt={display:l,displayPlaceholder:m,customerId:a.customer_id,articleId:`article${r}`},i.displayComments=!0)}}i.menus=this.page.menus.get({defaultSection:t.get("fields.defaultsection"),section:t.get("primaryTags.section")}),i.style_definitions=n.getStyleDefinitions(this.api),i.css_build=n.getInlineCSS(this.api),i.css_variables=n.getCssVariables(this.api),i.contact=this.api.v1.config.get("contact");const x=!!t.get("fields.norobots"),M=t.get("fields.hidefromfp_time"),C=Math.round(a.getTime()/1e3);if(i.norobots=x||M&&M<=C||!1,"article"===o&&this.api.v1.config.get("embeddable.active")&&(i.embeddable={active:!0,display:!!t.get("fields.displayEmbedButton")&&"embed"!==i.device,aboveBodytext:!!t.get("fields.displayEmbedButtonAboveBodytext")&&"embed"!==i.device,isFullContent:this.api.v1.util.request.getQueryString().indexOf("lab_content=full")>-1,hasParallax:this.api.v1.model.query.hasChildOfType(e,"parallax",!0)}),Sys.logger.debug(`ViewSupport: Will include ${D.scripts.required.length} configured script(s): "${D.scripts.required.map((e=>e.url)).join(", ")}".`),D.scripts.required.forEach((e=>{if(!e.placeholderKey&&e.requireDom&&(e.placeholderKey="requireDom"),e.placeholderKey){const{placeholderKey:t}=e;e.placeholderKey={},e.placeholderKey[t]=!0}})),i.siteScriptList=D.scripts.required,i.paywall=this.getPaywallInfo(e,m),i.simplestreamEnabled=lab_api.v1.config.get("contentbox_settings.simplestream")||!1,"mailmojo"===i.device&&this.setDefaultMailmojoData(e,t),"article"===o){const t=lab_api.v1.config.get("page_settings.article.ageWarnings");if(Array.isArray(t)){const i=e.get("fields.published");if(i){const s=this.getAgeWarningItem(i,t);s&&e.setFiltered("ageWarning",s)}}}return i.featureFlags={responsive_mobile_fonts:!lab_api.v1.util.featureFlags.enabled("Disable responsive mobile fonts",o)},i.clientSideConfig=JSON.stringify(c.buildConfig(this.api)),i}getAgeWarningItem(e,t){const i=Object.values(t).filter((e=>!!e.years&&!!e.label)).sort(((e,t)=>t.years-e.years)),s=new Date(1e3*e),a=Date.now()-s,n=new Date(a),o=Math.abs(n.getUTCFullYear()-1970);for(const e of i)if(o>=e.years)return e;return null}setDefaultMailmojoData(e,t){const i=lab_api.v1.config.get("lang")||"no";e.setFiltered("lang",i)}getCanonicalUrl(e,t,i,s){const a=e.get("fields.lab_canonical");if(a)return a;if("front"===t){const t=e.get("fields.hostpath");if(t)return`${s}/${"index"===t?"":t}`}return`${s+e.get("fields.published_url")}`}getStaticUrl(e,t,i,s){if("front"===t){const t=lab_api.v1.util.request.getHeader("X-Labrador-404-Referer");if(t)return`${s}${t}`;const i=e.get("fields.hostpath");return i?`${s}/${"index"===i?"":i}`:`${s+e.get("fields.published_url")}`}return`${lab_api.v1.properties.get("site").domain}/a/${i}`}getCustomMetatags(){const e=lab_api.v1.config.get("customMetatags")||[],t=lab_api.v1.config.get("customMetatagsKeyVal")||[],i=[];for(const t of e){const e=Object.keys(t).map((e=>({key:e,value:t[e]})));i.push(e)}for(const e of t)e.length&&i.push(e);return i}getPaywallInfo(e,t){const i=lab_api.v1.properties.get("paywall"),s=!t&&"1"===e.get("fields.paywall"),a=lab_api.v1.config.get("paywall.provider",{site:lab_api.v1.site.getSite().alias})||"internal",n=(!t&&e.get("fields.paywallSalesImage"),!t&&s&&i.hasAccess&&"1"===e.get("fields.paywallShareable"));let o;if("1"===e.get("fields.paywallShareable")){o=lab_api.v1.config.getConfig("pages.localisation.data.items.paywall.items.shareableArticle.items")||{};for(const e of Object.keys(o))o[e]=lab_api.v1.locale.get(`paywall.shareableArticle.${e}`)||""}return{enabled:s,settings:i,provider:a,shareable:n,shareableArticle:o,hasAccess:!s||!i.active||i.hasAccess,hidePaywallOffers:this.api.v1.util.request.hasQueryValue("lab_opts","paywall_loginonly"),paywallSalesImage:e.get("fields.paywallSalesImage"),paywallSalesPitchContent:e.get("fields.paywallSalesPitchContent"),paywallSalesPitchTitle:e.get("fields.paywallSalesPitchTitle"),paywallLayoutType:e.get("fields.paywallPreview.paywallLayoutType"),requiredProducts:JSON.stringify(this.api.v1.properties.get("app.paywall.requiredProducts")||[])}}}class u{static parseCss(e,t="filtered.autodata"){const i=e.get(t);if(!i||"object"!=typeof i)return;return[Object.values(i.cssObject||{}).join(" "),i.cssString||"",(i.cssArray||[]).join(" ")].join(" ").trim()}static parseAttributes(e){const t=e.get("filtered.autodata.attributesObject");if(!t||"object"!=typeof t)return;return Object.keys(t).map((e=>({key:e,value:t[e]})))}static parseCustomData(e){const t=e.get("filtered.autodata.custom");if(!t||"object"!=typeof t)return;const i={};for(const e of Object.keys(t))i[e]=Object.keys(t[e]).map((i=>({key:i,value:t[e][i]})));return i}static parseCustomDataFromFeed(e,t){const i=lab_api.v1.config.get(`${t}.autodata.mapping`)||{};if(!i||"object"!=typeof i)return;const s={labels:[]};if(i.labels)for(const t of Object.keys(i.labels))e[i.labels[t]]&&s.labels.push({key:t,value:e[i.labels[t]]});return s}}class h{constructor(e){this.api=e,this.pageData=new p(this.api,new a(this.api))}onReady(e,t){this.pageData.set(e,t),e.setFiltered("autodata_css",u.parseCss(e)),e.setFiltered("autodata_attributes",u.parseAttributes(e)),e.setFiltered("autodata_custom",u.parseCustomData(e))}}class f{constructor(e){this.api=e,this.pageData=new p(this.api,new a(this.api))}onReady(e,t){this.pageData.set(e,t)}}class m{static textElements(e,t){const i={top:[],floating:[],bottom:[],positions:{kicker:"",title:""}};let s="",a="";if(e.get("metadata.showKicker")&&(t||e.get("fields.kicker")||e.get("fields.origin_data_json.teaserKicker")||e.get("fields.origin_data_json.kicker"))&&(e.get("metadata.floatingKicker")?(i.floating.push("kicker"),i.positions.kicker="floating",s="floating"):e.get("metadata.kickerBelowImage")?(i.bottom.push("kicker"),i.positions.kicker="below",s="bottom"):(i.top.push("kicker"),i.positions.kicker="above",s="top")),e.get("metadata.hideTitle")||!t&&!e.get("fields.title")||(e.get("metadata.floatingTitle")?(i.floating.push("title"),i.positions.title="floating",a="floating"):e.get("metadata.titleAboveImage")?(i.top.push("title"),i.positions.title="above",a="top"):(i.bottom.push("title"),i.positions.title="below",a="bottom")),e.get("metadata.kickerBelowTitle")&&e.get("metadata.showKicker")&&a){if(s){const e=i[s].indexOf("kicker");-1!==e&&i[s].splice(e,1)}const e=i[a],t=e.indexOf("title");-1!==t?e.splice(t+1,0,"kicker"):e.push("kicker"),i.positions.kicker="belowTitle",s=a}return!e.get("metadata.hidesubtitle")&&(t||e.get("fields.subtitle")||e.get("fields.origin_data_json.teaserSubtitle"))&&(e.get("metadata.floatingSubtitle")?i.floating.push("subtitle"):e.get("metadata.subtitleAboveImage")?i.top.push("subtitle"):i.bottom.push("subtitle")),i}}class y{static convertToIso639(e){let t="";return e&&(t=3===e.length?e.toLowerCase():e.includes("-")?e.split("-")[0].toLowerCase():e.toLowerCase()),t}}class b{static autoSizeText(e,t){const i={1:100,2:70,3:50,4:45,5:40,6:35,7:30,8:26,9:22,10:20,11:18,12:17,13:16,14:15,15:14,16:13,17:12,18:11,19:10,20:9,21:8,22:7,23:6,24:5,25:4},s=e.innerHTML.replace(/&nbsp;/,"");if(e.querySelector("br")||e.querySelector(".auto-font-size-line-br")){const t=this.handleBreaks(s);e.innerHTML="",t.forEach(((i,s)=>{e.innerHTML+=`<span class="auto-font-size-line${s<t.length?" auto-font-size-line-br":""}">${i} </span>`}))}else{const i=this.removeHTMLTags(s),a=this.splitSentence(i,t,"default");e.innerHTML="";for(const t of a)e.innerHTML+=`<span class="auto-font-size-line">${t} </span>`}const a=e.querySelectorAll(".auto-font-size-line"),n=e.clientWidth;for(const e of a){const t=i[e.innerText.length]||5;e.clientWidth<n?this.enlargeTitle(e,n,t):e.clientWidth>n&&this.shrinkTitle(e,n,t)}return e.innerHTML}static handleBreaks(e){let t=this.removeHTMLTags(e).split(/<br\s*[^>]*>/gi);return t=t.filter((e=>e.trim().length>0)),t}static removeFontSize(e){const t=e.innerHTML;return this.removeHTMLTags(t)}static removeHTMLTags(e){let t=e.replace(/<span class="auto-font-size-hyphen">-<\/span>\s?/g,"");return t=t.replace(/<span class="[^"]*\bauto-font-size-line-br\b[^"]*"[^>]*>(.*?)<\/span>/g,"$1<br>"),t=t.replace(/<span class="[^"]*\bauto-font-size-line\b[^"]*"[^>]*>(.*?)<\/span>/g,"$1"),t=t.replace(/<span[^>]*>([^<]*)<\/span>/g,"$1"),t=t.replace(/(\r\n|\n|\r)/g,""),t}static enlargeTitle(e,t,i,s=100){let a=i;for(;e.clientWidth<t&&a<=s;)a+=1,e.style.setProperty("--lab-auto-font-size",`${a}cqi`);for(;e.clientWidth>=t||a>s;)a-=.1,e.style.setProperty("--lab-auto-font-size",`${a}cqi`)}static shrinkTitle(e,t,i){let s=i;for(;e.clientWidth>t;)s-=.1,e.style.setProperty("--lab-auto-font-size",`${s}cqi`)}static splitSentence(e,t,i){const{length:s}=e,a=this.findRules(t,i),n=this.findNumberOfLines(a.ranges,s)||1,o=a.maxWordLength||null,r=a.minLineLength||null;return this.splitTextEvenly(e,n,o,r,t.regex)||[]}static findRules(e,t){return{...e.formats[t]}}static findNumberOfLines(e,t){const i={maxLineLength:20,numberOfLines:1};for(const s of e)if(t<=s.maxCharacters){i.numberOfLines=s.numberOfLines,i.maxLineLength=s.maxCharacters/s.numberOfLines;break}return i}static checkRegex(e,t,i){let s=t;const a=[];return Array.from(Object.entries(e),(([,e])=>e)).forEach((e=>{const t=new RegExp(e,"g"),i=s.match(t);i&&a.push(...i)})),a.forEach((e=>{const t=e.replace(/ /g,i);s=s.replace(e,t)})),s}static splitStringIntoParts(e,t,i,s,a){const n=this.checkRegex(i,e,"___").split(" "),o=[];let r="";return n.forEach((e=>{const i=e.trim().replace(new RegExp("___","g")," ");if(i.includes("-"))r.length+i.length+1>t?(o.push(r),r=i):r+=(r.length>0?" ":"")+i;else{const e=this.splitWord(i,s);e.forEach(((i,s)=>{r.length+i.length+1>t?(o.push(r),r=i):r+=(r.length>0?" ":"")+i,s<e.length-1&&(r+='<span class="auto-font-size-hyphen">-</span>')}))}})),r.length>0&&o.push(r),o}static splitWord(e,t){const i=[];let s=e;for(;s.length>t;)i.push(s.substring(0,t)),s=s.substring(t);return s.length>0&&i.push(s),i}static splitTextEvenly(e,t,i,s,a){const n=e.trim(),o=Math.ceil(n.length/t.numberOfLines);let r=this.splitStringIntoParts(n,o,a,i,t.numberOfLines);if(s&&(r=this.mergeShortLines(r,s)),r.length>t.numberOfLines){const e=/<span class="auto-font-size-hyphen">-<\/span>$/,t=r.pop();e.test(r[r.length-1])?r[r.length-1]=r[r.length-1].replace(e,"")+t:r[r.length-1]+=` ${t}`}return r}static mergeShortLines(e,t){const i=[];for(let s=0;s<e.length;s++){let a=e[s].trim();a.length<t&&s<e.length-1&&(a+=` ${e[s+1]}`,s++),i.push(a)}if(i.length>1){const e=i[i.length-1];e.length<t&&(i[i.length-2]+=` ${e}`,i.pop())}return i}}class v{constructor(e){this.api=e,this.imageServer=this.api.v1.properties.get("image_server"),this.rootModel=this.api.v1.model.query.getRootModel(),this.domain=this.api.v1.site.getSite().domain||this.api.v1.properties.get("customer_front_url"),this.fallbackLanguage=this.api.v1.config.get("contentLanguage")||"",this.autoFontSizeConfig=this.api.v1.config.get("autoFontSize")||[],this.autoFontSizePageSettings=Boolean(!!this.rootModel&&this.rootModel.get("fields.autoFontSize")),this.hasAutoFontSize=this.autoFontSizePageSettings&&this.autoFontSizeConfig.enabled,this.autoFontSizeDone=!1,this.dateTimeHelper=new r(this.api.v1.config.get("lang")||void 0)}onInserted(e){if(this.api.v1.app.mode.isEditor()&&this.hasAutoFontSize){e.set("state.autoFontSizeReRender",!0,{notify:!1});const t=(e,t,i)=>{e.get("fields.title")===e.get("state.title")?e.set("state.autoFontSizeReRender",!1,{notify:!1}):(e.set("state.autoFontSizeReRender",!0,{notify:!1}),e.set("metadata.autoFontSizeDone",!1,{notify:!1}))};this.api.v1.model.bindings.bind(e,"fields.title",t)}}onReady(e,t){e.setFiltered("layout",m.textElements(t,this.api.v1.app.mode.isEditor()));let i=e.get("fields.published_url")||"";!/^https?/.test(i)&&i&&(i=this.domain+i),e.setFiltered("published_url",i),e.setFiltered("published_url_rss",i.replace(/&/g,"&amp;"))}onRender(e,t){const i=e.get("instance_of")||e.get("fields.origin_data_json.id"),s=e.get("fields.published")||e.get("fields.origin_data_json.published"),a=e.get("fields.origin_data_json.teaserTitle")||t.get("fields.title")||"",n=e.get("fields.origin_data_json.teaserSubtitle")||t.get("fields.subtitle")||"",o=e.get("fields.origin_data_json.published")||e.get("fields.published"),r=e.get("fields.origin_data_json.teaserKicker")||e.get("fields.origin_data_json.kicker")||t.get("fields.kicker"),l=e.get("fields.site_id")||e.get("fields.origin_data_json.site_id"),d=e.get("fields.origin_data_json.seolanguage")||e.get("fields.seolanguage")||this.fallbackLanguage,g=e.get("fields.origin_data_json.teaserAudio")||e.get("fields.audio"),c=e.get("fields.origin_data_json.teaserAudio_style_json")||e.get("fields.audioInfo")||{},p=e.get("fields.origin_data_json.addRelNoFollow")||e.get("fields.addRelNoFollow")||!1,h=e.get("fields.origin_data_json.addRelSponsored")||e.get("fields.addRelSponsored")||!1,f=e.get("fields.origin_data_json.addRelUgc")||e.get("fields.addRelUgc")||!1;e.setFiltered("published",s),e.setFiltered("title",a),e.setFiltered("kicker",r),e.setFiltered("subtitle",n),e.setFiltered("articleId",i),e.setFiltered("section",e.get("fields.origin_data_json.section_tag")||e.get("fields.section")||""),e.setFiltered("base_url",this.domain),e.setFiltered("published_sitemap",o),e.setFiltered("canonical_url",`${this.getSiteDomain(l)}/a/${i}`),e.setFiltered("tags",e.get("tags")||[]),e.setFiltered("languageIso639",y.convertToIso639(d));const m=(new Date).getTime()-1728e5;if(e.setFiltered("articleOutOfDate_sitemap",m>Math.floor(new Date(o).getTime())),e.setFiltered("addRelNoFollow",p),e.setFiltered("addRelSponsored",h),e.setFiltered("addRelUgc",f),!this.api.v1.config.get("showHiddenTagsOnFront")){const t=(this.api.v1.config.get("tagsToHide")||"").split(",").map((e=>e.trim()))||[],i=(e.get("tags")||[]).filter((e=>!t.includes(e)));e.setFiltered("tags",i)}if(l){const t=this.api.v1.site.getSiteById(l);t&&e.setFiltered("site_alias",t.alias)}if(g){const t={url:g};if(c){const e=JSON.parse(c);t.title=e.title||null,t.fileType=e.fileType||null,t.playTime=e.playTime||null}e.setFiltered("audio",t)}const b=e.get("fields.origin_data_json.showbylineonfp")||t.get("fields.displayByline")||!1;if(b){const i=t.get("fields.byline")||e.get("fields.origin_data_json.byline"),s=t.get("fields.bylineImage")||e.get("fields.origin_data_json.bylineImage"),a=(e.get("fields.origin_data_json.full_bylines")||e.get("fields.full_bylines_json")||[]).map((e=>({firstname:e.firstname,lastname:e.lastname,description:e.description,imageUrl:e.imageUrl?this.getImageUrl(`${e.imageUrl}&width=90&height=90`):""})));a.length||!i&&!s||a.push({firstname:i,lastname:"",imageUrl:s?this.getImageUrl(`${s}&width=90&height=90`):""}),e.setFiltered("bylines",a),s&&e.setFiltered("bylineImage",`${s}&width=90&height=90`)}e.setFiltered("displayByline",b);const v=t.get("fields.displayPublishedDate")||!1,_=this.api.v1.locale.get("dates.monthdayyear",{noRender:!0});if(e.setFiltered("displayPublishedDate",v),v)if(this.api.v1.app.mode.isEditor()&&!s)e.setFiltered("publishedDate",_);else if(this.api.v1.app.mode.isEditor()||s){const t=new Date(s),i=this.dateTimeHelper.format(t,_);e.setFiltered("publishedDate",i)}else e.setFiltered("displayPublishedDate",!1);let k=e.get("fields.origin_data_json.paywall")||e.get("fields.paywall")||!1;if(k=1===k||"1"===k||!0===k||null,k){const i={display:!0,displayInNewsletter:!0,...this.api.v1.config.get("paywall.label")},s=this.api.v1.config.get("paywall.label.text.content"),a=this.api.v1.config.get("paywall.label.icon.content"),n={text:{content:null==s?"Plus":this.api.v1.config.get("paywall.label.text.content")},icon:{content:null==a?"fi-plus":this.api.v1.config.get("paywall.label.icon.content")}};if(Object.assign(i,n),i.display){i.layout={noImage:!0,float:null};const s=this.api.v1.model.query.getChildOfType(e,"image")||this.api.v1.model.query.getChildOfType(e,"graphic");if(s&&s.get("instance_of")){const e=this.api.v1.view.getView(s,t.getViewport());i.layout.float=this.api.v1.config.get("paywall.label.labelPosition")||e.get("fields.float"),i.layout.noImage=!!t.get("metadata.hideimage")}e.setFiltered("paywallLabel",i)}}else e.setFiltered("paywallLabel",null);e.setFiltered("paywall",k);const S=e.get("metadata.tagPlacement")||"underImage";e.setFiltered("tagPlacement.underImage","underImage"===S),e.setFiltered("tagPlacement.underText","underText"===S);const w=e.get("metadata.sectionPlacement")||"floating";e.setFiltered("sectionPlacement.floating","floating"===w),e.setFiltered("sectionPlacement.underImage","underImage"===w),e.setFiltered("sectionPlacement.underText","underText"===w),e.setFiltered("articleWidth",t.getPixelWidth()),e.setFiltered("autodata_css",u.parseCss(e)),e.setFiltered("autodata_content_css",u.parseCss(e,"filtered.autodata_content")),e.setFiltered("autodata_attributes",u.parseAttributes(e)),e.setFiltered("autodata_custom",u.parseCustomData(e)),this.autoFontSizeConfig.enabled&&(this.autoFontSizeDone=e.get("metadata.autoFontSizeDone"))}onRendered(e,t){if(this.api.v1.app.mode.isEditor()&&this.autoFontSizeConfig.enabled){const i=()=>{const e=t.getMarkup().querySelector(".headline");b.removeFontSize(e),this.api.v1.tool.off("ended",i)};if("desktop"===t.viewport&&this.hasAutoFontSize&&e.get("metadata.autoFontSizeEnabled")&&(this.api.v1.tool.on("started",(t=>{"fields.title"===t.key&&t.model===e&&i()})),e.get("state.autoFontSizeReRender")&&e.get("fields.title")&&!this.autoFontSizeDone&&e.get("metadata.autoFontSizeEnabled"))){const i=t.getMarkup().querySelector(".headline"),s=b.autoSizeText(i,this.autoFontSizeConfig);e.set("state.autoFontSizeReRender",!1,{notify:!1}),e.set("state.title",s,{notify:!1}),e.set("metadata.autoFontSizeDone",!0,{notify:!1}),e.set("fields.title",s)}}}onCreated(e){this.hasAutoFontSize&&null===e.get("metadata.autoFontSizeEnabled")&&e.set("metadata.autoFontSizeEnabled",!0,{notify:!1})}getSiteDomain(e){if(!e)return"";const t=this.api.v1.site.getSiteById(e);return t?t.domain:""}getImageUrl(e){return e?e.startsWith("http")?e:this.imageServer+e:""}}class _{constructor(e){this.api=e,this.isEditor=this.api.v1.app.mode.isEditor(),this.isFragmentMode=this.api.v1.app.mode.isFragmentMode(),this.lazyloadImages=!this.isEditor&&!!this.api.v1.config.get("imageLoading.lazy")}check(e,t){if(!this.lazyloadImages||t.getProperty("image.noLazy"))return!1;const i=lab_api.v1.model.query.getParentOfType(e,"row");return!(i&&!this.isFragmentMode&&i.getModelIndex()<5)}}class k{constructor(e){this.api=e,this.lazyloadHelper=new _(e),this.api.v1.app.mode.isEditor()&&(this.cropIds=[],this.rootModel=this.api.v1.model.query.getRootModel(),this.frontcropBinding=this.frontCropChanged.bind(this),this.api.v1.model.bindings.bind(this.rootModel,"frontCrop",this.frontcropBinding),this.frontcropBinding(this.rootModel,"frontCrop",this.rootModel.get("frontCrop")),this.api.v1.ns.set("imageFilter.preview",this.prepareVisualFilters)),this.isFragmentMode=this.api.v1.app.mode.isFragmentMode()}onViewHelper(e,t){if(e.parent){this.prepareForSlideshow(e,t);const i=t.getViewport();if(this.api.v1.view.getView(e.parent,i).get("metadata.hasFullWidth")){const t="mobile"===i?600:1800;e.setFiltered(`width.${i}`,t)}else e.setFiltered(`width.${i}`,null);e.setFiltered("allowFullwidth","image"!==e.parent.getType())}}onRender(e,t){this.setVisualFilters(e,t),e.setFiltered("lazyloadImages",this.lazyloadHelper.check(e,t)),this.setCaptionOptions(e.getParent(),e,t);const i=t.get("fields.float");e.setFiltered("hasFloat",!!i&&"floatNone"!==i)}onRendered(e,t){if(!this.api.v1.app.mode.isEditor()||!this.cropIds.length)return;const i=parseInt(e.get("instance_of"),10);this.cropIds.includes(i)&&this.markFrontCrop(t,i)}setVisualFilters(e,t){e.setFiltered("filters",this.prepareVisualFilters(e,t))}prepareVisualFilters(e,t,i=!1){const s=[],a=e.get("metadata.filter_blur_active")?e.get("metadata.filter_blur_value")||0:null,n=e.get("metadata.filter_sepia_active")?e.get("metadata.filter_sepia_value")||0:null,o=e.get("metadata.filter_saturate_active")?e.get("metadata.filter_saturate_value")||1:null,r=e.get("metadata.filter_brightness_active")?e.get("metadata.filter_brightness_value")||1:null,l=e.get("metadata.filter_contrast_active")?e.get("metadata.filter_contrast_value")||1:null;return null!==a&&s.push(`blur(${a}px)`),null!==n&&s.push(`sepia(${n})`),null!==o&&s.push(`saturate(${o})`),null!==r&&s.push(`brightness(${r})`),null!==l&&s.push(`contrast(${l})`),i?{filter:s.join(" ")}:s.length?`filter: ${s.join(" ")};`:null}markFrontCrop(e,t){const i=document.createElement("span");i.classList.add("labicon-imgFrontCrop","is-frontcrop"),i.setAttribute("title","Image used as front crop. Click to edit"),i.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.api.v1.apps.start("ArticleSettings")}),!1),e.getMarkup().appendChild(i)}frontCropChanged(e,t,i){let s=this.getImages(this.cropIds);this.cropIds=[],this.updateImages(s),i&&(i.pano&&i.pano.instance_of&&this.cropIds.push(i.pano.instance_of),i.height&&i.height.instance_of&&!this.cropIds.includes(i.height.instance_of)&&this.cropIds.push(i.height.instance_of),s=this.getImages(this.cropIds),this.updateImages(s))}getImages(e){const t=[];for(const i of e)t.push(...this.api.v1.model.query.getModelsByKeyAndValue("instance_of",i));return t}updateImages(e){for(const t of e)this.api.v1.model.addToRedrawQueue(t)}setCaptionOptions(e,t,i){const s=e?this.api.v1.view.getView(e,i.getViewport()):null,a=(e,t,i)=>{if(e){const t=e.get(i);if(!t&&null!==t)return!1;if(t)return!0}return!!t.get(i)};let n=a(s,i,"fields.displayCaption"),o=n||null===i.get("fields.displayCaption")&&!i.get("metadata.hidecaption");!this.api.v1.app.mode.isFront()||t.get("fields.imageCaption")||t.get("fields.byline")||(n=!1,o=!1);const r=a(s,i,"fields.expandableCaption"),l=a(s,i,"fields.truncateCaption");let d=t.get("fields.imageCaption");!t.parent||i.getProperty("image.useCaptionForTitle")&&d||(d=t.parent.get("fields.title")||"");const g={title:d,display:n,displayDefault:o,truncate:l,expandable:r||l};t.setFiltered("captionOptions",g)}prepareForSlideshow(e,t){if(!e.parent||"slideshow"!==e.parent.getType())return;if(t.get("fields.whRatio"))return void e.setFiltered("whRatio",null);const i=e.get("fields.originalWidth"),s=e.get("fields.originalHeight");if(s&&i){const t=s/i;e.setFiltered("whRatio",t)}}}class S extends r{constructor({languageCode:e}={}){super("en"),this.languageCode=e||lab_api.v1.config.get("contentLanguage")}str(e,{data:t,noRender:i}={}){return lab_api.v1.locale.get(`dates.${e}`,{data:t,noRender:i})}timestampToNiceDate(e,t=!1){const i=(new Date).getTime(),s=new Date(1e3*e).getTime()-0,a=parseInt((i-s)/1e3/60,10);if(a<60)return a<1?this.str("now"):this.str("durationSince",{data:{count:a,period:t?this.str("min"):1===a?this.str("minute"):this.str("minutes"),ago:t?"":this.str("ago")}});if(a<1440){const e=parseInt(a/60,10);return this.str("durationSince",{data:{count:e,period:1===e?this.str("hour"):this.str("hours"),ago:t?"":this.str("ago")}})}if(parseInt(a/1440,10)<30){const e=parseInt(a/1440,10);return this.str("durationSince",{data:{count:e,period:1===e?this.str("day"):this.str("days"),ago:t?"":this.str("ago")}})}return this.format(this.timestampToDate(e),this.str("monthdayyear",{noRender:!0}))}}class w{constructor(e){this.api=e,this.dateTimeHelper=new S}onRender(e,t){const i=e.get("fields.modified")||e.get("fields.published");if(null!=i){const t=new Date(1e3*i);e.setFiltered("niceDate",this.dateTimeHelper.timestampToNiceDate(i)),e.setFiltered("publishedDate",this.dateTimeHelper.utcFormat(t,`${this.api.v1.locale.get("dates.monthdayyear",{noRender:!0})} ${this.api.v1.locale.get("dates.hourminute",{noRender:!0})}`)),e.setFiltered("isoDate",t.toISOString())}}}class T{constructor(e){this.api=e,this.baseApiUrl=this.api.v1.properties.get("front_api_url"),this.siteId=this.api.v1.properties.get("site.id"),this.cache=new Map,this.defaultMaxCount=100,this.isEditor=this.api.v1.app.mode.isEditor()}onPrepareViewHelper(e,t){const i=e.get("fields.site")||this.siteId,s=t.get("fields.maxNoticesCount")||this.defaultMaxCount,a=(e.get("fields.tags")||"").toLowerCase().split(",").filter((e=>""!==e)),n=this.prepareTags(a),o=this.prepareQuery(n,!1),r=this.prepareQuery(n,!0),l=`${this.baseApiUrl}/notice?content=full&site_id=${i}&limit=${s}`;e.setFiltered("query",o),e.setFiltered("clientQuery",r),e.setFiltered("url",l)}onReady(e,t){const i=t.get("external"),s=e.get("filtered.noFetch")||!1,a=e.get("metadata.blacklist")||[],n=t.get("fields.maxNoticesCount")||this.defaultMaxCount;if(!s&&i){e.setFiltered("noFetch",!0);const t=e.get("fields.pinnedNotices_json")||[];let s=i.result;if(this.api.v1.app.mode.isEditor()){const t=this.api.v1.model.query.getModelsByType("notice",e.children);for(const e of t)this.api.v1.model.delete(e,!0,!0)}s=s.slice(0,n),s.forEach((i=>{const{attribute:s={},field:n={}}=i.notice;if(a.includes(parseInt(s.id||0,10)))return void Sys.logger.warn(`Notice with id ${s.id} is blacklisted from Livefeed and will not be displayed.`);"object"==typeof n.bodytext&&(n.bodytext="");const{title:o,bodytext:r,published:l,modified:d,published_url:g,userName:c}=n,p=[];if(i.notice.children&&i.notice.children.image){const e=Array.isArray(i.notice.children.image)?i.notice.children.image:[i.notice.children.image];for(const t of e){let e={};if(n.structure_json&&t.attribute.id)try{const i=JSON.parse(n.structure_json);for(const s of i)if("bodytext"===s.type){const i=this.getStructure(s.children||[],t.attribute.id);e=i?i.metadata:{};break}}catch(e){Sys.logger.warn(`Failed to parse structure data: ${e.toString()}`)}e.hasFullWidth={desktop:!1,mobile:!1},p.push(this.getImageData(t,e||{}))}}this.api.v1.model.insert.atPath({path:e.getPositionedPath(),data:{type:"notice",contentdata:{id:s.id,fields:{title:o,bodytext:r,published:l,modified:d,published_url:g,userName:c,pinned:t.includes(s.id)},tags:i.notice.tag?i.notice.tag.tag:""},state:{isNonPersistent:!0,editNonPersistent:!0},children:p},options:{silent:!0,index:t.includes(s.id)?0:void 0}})})),e.children.sort(((e,i)=>t.includes(e.getId())?-1:t.includes(i.getId())?1:i.getId()-e.getId())),this.api.v1.app.mode.isEditor()&&(this.api.v1.model.addToRedrawQueue(e,!0),this.api.v1.app.save())}const o=this.api.v1.config.get("contentbox_settings.livefeed.updateFrequency")||[{range:[0,600],interval:10},{range:[600,1200],interval:30},{range:[1200],interval:60}];e.setFiltered("updateFrequency",JSON.stringify(o))}onRender(e,t){const i=t.get("fields.placeholder");e.setFiltered("placeholder",i||this.api.v1.locale.get("emptyState.noContentText",{noRender:!0})),e.setFiltered("initialRenderTime",(new Date).getTime()),e.setFiltered("dateStrings",JSON.stringify({now:this.api.v1.locale.get("dates.now",{noRender:!0}),monthdayyear:this.api.v1.locale.get("dates.monthdayyear",{noRender:!0}),hourminute:this.api.v1.locale.get("dates.hourminute",{noRender:!0}),durationSince:this.api.v1.locale.get("dates.durationSince",{noRender:!0}),minute:this.api.v1.locale.get("dates.minute",{noRender:!0}),minutes:this.api.v1.locale.get("dates.minutes",{noRender:!0}),hour:this.api.v1.locale.get("dates.hour",{noRender:!0}),hours:this.api.v1.locale.get("dates.hours",{noRender:!0}),day:this.api.v1.locale.get("dates.day",{noRender:!0}),days:this.api.v1.locale.get("dates.days",{noRender:!0}),ago:this.api.v1.locale.get("dates.ago",{noRender:!0})}))}onChildAdded(e,t){if(this.isEditor&&"notice"!==t.getType()){if(e.children.indexOf(t)>0)return;const i=this.api.v1.model.query.getModelsByType("notice",e.children).filter((e=>e.get("fields.pinned")));if(!i.length)return;let s=0;for(const t of i)e.children.indexOf(t)>s&&(s=e.children.indexOf(t));s>0&&this.api.v1.model.addChild(e,t,s,!1)}}prepareQuery(e,t=!1){const i=t?["(visibility_status:P OR visibility_status:H)"]:["visibility_status:P"];return e.length>0&&i.push(`(${e.join(" OR ")})`),`&query=${encodeURIComponent(i.join(" AND "))}`}prepareTags(e){return e.map((e=>{let t=e.trim();return t.indexOf(" ")>-1&&(t=`"${t}"`),`tag:${t}`}))}getImageData(e,t){return this.api.v1.model.serialize.apiToView({type:"image",data:e,meta:t})}onSettingsPanel(e,t,i){const s={layout:null,container:null};return{onDisplay:({model:e,view:t,config:i,markup:a,modal:n})=>{s.layout=a.querySelector("#layout"),s.container=a.querySelector(".horizontalOptions"),s.layout&&s.container&&s.layout.addEventListener("change",(e=>{"1"===s.layout.value?s.container.classList.remove("lab-hidden"):s.container.classList.add("lab-hidden")}))},onHide:({model:e,view:t,config:i,markup:a,modal:n})=>{s.layout=null,s.container=null,e.setFiltered("noFetch",!1)}}}getStructure(e,t){for(const i of e){if("image"===i.type&&i.node_id==t)return i;if(i.children){const e=this.getStructure(i.children,t);if(e)return e.metadata&&!e.metadata.bodyTextIndex&&i.metadata&&i.metadata.bodyTextIndex&&(e.metadata.bodyTextIndex=i.metadata.bodyTextIndex),e}}return null}}class F{constructor(e){this.api=e}onRender(e,t){const i=this.api.v1.config.get("contentbox_settings.adnuntiusAd.formats")||[],s=e.get("fields.format"),a=i.filter((e=>e.format===s))[0]||{};if(e.setFiltered("adData",a),e.setFiltered("isDebug",this.api.v1.util.request.hasQueryParam("debug")||e.get("metadata.isDebug")),!this.api.v1.app.mode.isEditor()){const t=e.parent&&!0===e.parent.get("metadata.hideOnTablet")&&"tablet"===this.api.v1.config.get("xUaDevice");e.setFiltered("hideOnTablet",t)}if(this.api.v1.app.mode.isEditor()){const t=this.api.v1.model.root.getType().replace("page_",""),a=[];i.forEach((e=>{if(e.selectable&&e.selectable.indexOf(t)>-1||e.selectableOn&&!0===e.selectableOn[t])if(e.format===s){const t={...e};t.selected=!0,a.push(t)}else a.push(e)})),e.setFiltered("formatConfigKeys",a)}const n=this.api.v1.config.get("contentbox_settings.adnuntiusAd.label")||"Annonse",o=e.get("fields.label")||n;e.setFiltered("label",o),e.setFiltered("displayLabel",o&&(e.get("metadata.css")||"").includes("display-label"));if((e.get("metadata.css")||"").includes("sticky")){const t=`top: ${this.api.v1.config.get("contentbox_settings.adnuntiusAd.spacingTop")||120}px;`;e.setFiltered("spacingTop",t)}}}class ${constructor(e){this.api=e}onRender(e,t){const i=this.api.v1.model.query.getRootModel(),s=this.api.v1.config.get("contentbox_settings.googleAd.formats")||[],a=e.get("fields.format"),n=this.api.v1.config.get("adEnvironment")||{},o={bidding:n.bidding,hideOnTabletWidth:n.hideOnTabletWidth||1316,fetchMarginPercent:n.fetchMarginPercent||150,renderMarginPercent:n.renderMarginPercent||150};e.setFiltered("googleAds",o);const r=((e,t)=>{for(let i=0;i<t.length;i++)if(t[i].format===e)return{...t[i]};return{}})(a,s);if(r.key=e.get("metadata.key")||"row",o.bidding&&o.bidding.enabled&&o.bidding.provider&&o.bidding.provider.name&&"livewrapped"===o.bidding.provider.name){const e=()=>{const e=()=>(65536*(1+Math.random())|0).toString(16).substring(1);return`${e()+e()}-${e()}-${e()}-${e()}-${e()}${e()}${e()}`};r.code&&r.code.endsWith("-1")&&(r.code+=`_${e()}`)}"mpu_top"===r.code&&(r.isMpuTop=!0),e.setFiltered("adData",r),e.setFiltered("isDebug",this.api.v1.util.request.hasQueryParam("debug")||e.get("metadata.isDebug"));const l=this.api.v1.config.get("contentbox_settings.googleAd.label")||"Annonse",d=e.get("fields.label")||l;if(e.setFiltered("label",d),!this.api.v1.app.mode.isEditor()){const t=e.parent&&!0===e.parent.get("metadata.hideOnTablet")&&"tablet"===this.api.v1.properties.get("xUaDevice");e.setFiltered("hideOnTablet",t)}if(this.api.v1.app.mode.isEditor()){const t=i.get("type").replace("page_",""),a=[];s.forEach((e=>{(e.selectable&&e.selectable.indexOf(t)>-1||e.selectableOn&&!0===e.selectableOn[t])&&a.push(e)})),e.setFiltered("formatConfigKeys",a)}if((e.get("metadata.css")||"").includes("sticky")){const t=`top: ${this.api.v1.config.get("contentbox_settings.googleAd.spacingTop")||120}px;`;e.setFiltered("spacingTop",t)}}}class D{constructor({path:e=null,selector:t=null,data:i={},options:s={}}={}){this.path=e,this.selector=t,this.data=i,this.options={persistentTarget:!0,intermediate:{useExisting:!0},...s}}}class x{constructor({key:e=null,path:t=null,selector:i=null,placeholder:s=null,metadata:a={},options:{shouldInsert:n=!0,wrap:o=null,skipIfOutOfBounds:r=!1,useIndex:l=!1,useBodyTextIndex:d=!1,useBodyTextHeadingIndex:g=!1,lastBodyTextHeading:c=!1}={}}={}){this.key=e,this.path=t,this.selector=i,this.placeholder=s,this.metadata=a,this.options={shouldInsert:n,wrap:o,skipIfOutOfBounds:r,useIndex:l,useBodyTextIndex:d,useBodyTextHeadingIndex:g,lastBodyTextHeading:c}}}class M{constructor({type:e=null,contentdata:t=null,content_data:i=null,cssSettings:s={},children:a=[],metadata:n={}}={}){this.type=e,this.contentdata=t||i,this.children=a,this.metadata={...n},this.state={};const o=[];this.metadata.css&&o.push(this.metadata.css);for(const e of Object.keys(s))s[e]&&o.push(e);this.metadata.css=o.join(" ")}}class C{constructor(e){this.api=e,this.page=this.api.v1.model.query.getRootModel(),this.pageType=this.api.v1.model.root.getType().replace("page_",""),this.viewports=this.api.v1.viewport.getActive(),this.isEditor=this.api.v1.app.mode.isEditor(),this.cache=new Map,this.pageElements={},this.hideAds="1"===this.page.get("fields.hideAds")||!0===this.page.get("fields.hideAds")}hasRequiredElement(e){return void 0===this.pageElements[e]&&(this.pageElements[e]=!!this.api.v1.model.query.getModelByType(e)),this.pageElements[e]}insert(e,t=null){const i=[],s={},a=`insertDynamic.${this.pageType}.${e}`,n=`placements.${this.pageType}.${e}`;let o=!1;const r=(this.api.v1.config.get(n)||[]).filter((e=>!e.client||(e.requireElement&&!this.hasRequiredElement(e.requireElement)||(s[e.key]=e),!1)));if(!this.cache.has(a)){const e=`insertDynamicAdditions.${this.pageType}`,t=this.api.v1.config.get(a)||[],n=this.validateConditions(this.api.v1.config.get(e)||[]).reverse();o=n.length>0;const r=[...t,...n],l=(this.isEditor?r.filter((e=>!e.dynamicDataSettings||!e.dynamicDataSettings.hideInEditMode)):r).filter((e=>{if(e.placement&&e.placement.key&&s[e.placement.key]){const t={...e,placementData:s[e.placement.key]};return i.push(t),!1}return!0}));this.cache.set(a,l)}if(!this.cache.has(n)){if(o){const e=`placementsAdditions.${this.pageType}`,t=this.api.v1.config.get(e)||[];r.push(...t)}this.cache.set(n,r.map((e=>new x(e))))}const l=this.parse(this.cache.get(a),this.cache.get(n),e,t);for(const e of l)e.selector?this.api.v1.model.insert.bySelector({selector:e.selector,data:e.data,options:e.options}):e.path&&this.api.v1.model.insert.atPath({path:e.path,data:e.data,options:e.options});return i}validateConditions(e){return e.filter((e=>{if(e.excludeDuplicates&&this.api.v1.model.query.getModelByType(e.type))return Sys.logger.debug(`[DynamicDataHelper]: Element of type "${e.type}" already exist on page. Skipping.`),!1;if(e&&e.conditions){const{conditions:t}=e;for(const i of t){const{field:t,operator:s,value:a=""}=i,n=this.page.get(t||"",void 0,!0);if(void 0!==n)switch(s){case"equals":if(n!==a)return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${e.type}" failed. Field: "${t}", operator "${s}", value: "${a}", page value: "${n}".`),!1;break;case"notEquals":if(n===a)return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${e.type}" failed. Field: "${t}", operator "${s}", value: "${a}", page value: "${n}".`),!1;break;case"contains":if(!n.includes(a))return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${e.type}" failed. Field: "${t}", operator "${s}", value: "${a}", page value: "${n}".`),!1;break;case"notContains":if(n.includes(a))return Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${e.type}" failed. Field: "${t}", operator "${s}", value: "${a}", page value: "${n}".`),!1;break;default:return Sys.logger.warning(`[DynamicDataHelper]: Operator "${s}" is not valid. The condition fails and the item is not inserted onto the page.`),!1}else Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${e.type}" ignored. Value of field: "${t}" is undefined.`)}return Sys.logger.debug(`[DynamicDataHelper]: All conditions (${t.length}) for inserting element type "${e.type}" accepted. Will insert.`),!0}return Sys.logger.debug(`[DynamicDataHelper]: No validation specified for inserting element type "${e.type}". Will insert.`),!0}))}parse(e=[],t=[],i="desktop",s=null){const a=[];for(const n of e){const[o]=t.filter((({key:e})=>e===n.placement.key));if(o)if(this.acceptPath(o.path,s)){const t=this.create(n,o,e,i);null!==t&&(t.data.metadata.viewportBlacklist=this.viewports.filter((e=>e!==i)),a.unshift(t))}else Sys.logger.debug(`[DynamicDataHelper]: Path "${o.path}" not allowed. Filter: "${s}", key: "${n.placement.key}"`);else Sys.logger.debug(`[DynamicDataHelper]: No placement found with key "${n.placement.key}"`)}return a}create(e,t,i,s="desktop"){if(this.filter(e)){const a=this.assemble(e,t);if(t.path&&t.selector){this.api.v1.model.query.getModelBySelector(t.selector)||this.api.v1.model.insert.atPath({path:t.path,data:{type:"placeholder",selector:t.selector,metadata:{...t.metadata||{},key:t.key},state:{isNonPersistent:!0}},options:{index:0,useExisting:!0,prepend:!0,silent:!0}})}const n={...e.options,prepend:!0,silent:!0};let{path:o}=t,r=e.placement.index||0,l=null;if(t.selector)l=this.api.v1.model.query.getModelBySelector(t.selector);else if(t.path){const e=this.getModelsByPath(t.path,s);e.length&&(l=t.options.useBodyTextIndex||t.options.useBodyTextHeadingIndex||t.options.lastBodyTextHeading?e.find((e=>"bodytext"===e.getType())):t.options.shouldInsert?e[0].children[r]:e[r])}if(l||!t.options.skipIfOutOfBounds){if(l){r=this.api.v1.model.query.getIndex(l);let e=l.getParent();if("mobile"===s){if(r>0&&r<e.children.length){let t=e.children[r];for(;t;){const i=l.get("width",s,!0);if(void 0===i||100===i)break;t=e.children[++r]}}e.get("metadata.hasRowTitle")&&(0===r||r>=e.children.length)&&(l=e,e=l.getParent(),r=this.api.v1.model.query.getIndex(l),o=e.getPositionedPath())}if(t.options.useIndex&&r<e.children.length)if(e.children[r-1]&&e.children[r-1].getNoRenderState()){if(i[r+1]&&i[r+1].placement.index===r+1)return null;n.index=r+1}else n.index=r;t.options.shouldInsert||(o=e.getPositionedPath())}else n.prepend=!1;return new D({data:a,options:n,selector:t.selector,path:o})}}return null}assemble(e,t){let i=new M(e);return t.selector||(i.metadata={...i.metadata,...t.metadata,css:t.metadata.css?`${i.metadata.css} ${t.metadata.css}`:i.metadata.css||""}),t.options.wrap&&(i=new M({type:t.options.wrap.type,metadata:t.options.wrap.metadata,children:[i]})),t.options.skipIfOutOfBounds&&(i.metadata.skipIfOutOfBounds=!0),t.options.useBodyTextIndex?i.metadata.bodyTextIndex=e.placement.index||0:t.options.useBodyTextHeadingIndex&&(i.metadata.bodyTextHeadingIndex=e.placement.index||0),t.options.lastBodyTextHeading&&(i.metadata.lastBodyTextHeading=!0),i.state.isNonPersistent=!0,i}acceptPath(e,t){return!e||!t||e===t}filter(e){return"googleAd"!==e.type&&"adnuntiusAd"!==e.type||!this.hideAds}getModelsByPath(e,t){const i=`getByPath-${e}`;return this.cache.has(i)||this.cache.set(i,(this.api.v1.model.query.getModelsByPath(e)||[]).filter((e=>!e.get("metadata.hideViewport",t)&&!e.isNonPersistent()))),this.cache.get(i)}}class I{constructor(e){this.api=e,this.request=this.api.v1.util.request}listen(){const e={selector:this.request.getQueryParam("lab_selector")||"contentFromPath",path:this.request.getQueryParam("lab_path"),guid:this.request.getQueryParam("lab_guid")};(e.guid||e.path)&&this.api.v1.model.on("insert",(t=>{const i=e.guid?this.getModelByGuid(e.guid,t):this.getModelByPath(e.path,t);if(i)return Sys.logger.debug(`[FragmentHelper] Element found. Path: ${i.getPositionedPath()}, GUID: ${i.getGuid()}.`),i.setSelector(e.selector),"embed"===lab_api.v1.viewport.getName()?this.appendToRoot(t,i):[i]}))}getModelByGuid(e){return Sys.logger.debug(`[FragmentHelper] Will filter elements by guid: "${e}".`),this.api.v1.model.query.getModelByGuid(e)}getModelByPath(e,t){Sys.logger.debug(`[FragmentHelper] Will filter elements by path: "${e}".`);const i=this.api.v1.util.string.parsePath(e);if(!i[0])return null;const s=this.api.v1.model.query.getModelsByType(i[0].base,t);return this.api.v1.model.query.getModelByPath(e,!0,!1,s)}appendToRoot(e,t){const i=e[0];return i.children=[t],[i]}}class P{constructor(e){this.api=e,this.paths={main:["parent","guid","type","tags"],fields:["feedId","byline","bylineImage","paywall","published","published_url","site_alias","site_id","subtitle","subtitleHTML","teaserSubtitle","somedescription","title","teaserTitle","titleHTML","seolanguage","seotitle","sometitle","kicker","teaserKicker","showcomments"],fieldsAuto:["section_tag","tags"],fieldsNative:["section"],fieldMap:{subtitle:"description",subtitleHTML:"descriptionHTML",somedescription:"someDescription",teaserSubtitle:"teaserDescription",seolanguage:"seolanguage",seotitle:"seoTitle",sometitle:"someTitle",published_url:"url",section_tag:"section"},fallback:{url:"url"}},this.frontUrl=this.api.v1.site.getSite().domain||this.api.v1.properties.get("customer_front_url"),this.imageServer=this.api.v1.properties.get("image_server")}jsonData(e){Sys.logger.debug("[PageExport] Will export page as JSON-data");const t=this.api.v1.model.serialize.model(e);delete t.guid;return{page:t,result:"page_article"===e.getType()?this.exportArticle():this.exportFront()}}oembed(e){return"page_article"!==e.getType()?(Sys.logger.warn("[PageExport] Will not export current page type as oEmbed."),{}):(Sys.logger.debug("[PageExport] Will export page as oEmbed"),{version:"1.0",type:"rich",width:"",height:"",title:this.api.v1.util.string.sanitizeString(e.get("fields.title")||""),url:e.get("filtered.url")||"",author_name:this.api.v1.site.getSite().display_name||this.api.v1.site.getSite().alias,author_url:this.frontUrl,provider_name:"Labrador",provider_url:"http://www.labradorcms.com/",html:`<div class="labrador-cms-embed" data-lab-style="dac-no-sitelink dac-no-sitelink-logo dac-no-poweredby dac-embed-full" data-lab-content="full" data-lab-id="${e.get("id")}" data-lab-site="${e.get("filtered.site.domain_no_protocol")}"><script async defer src="${this.frontUrl}/embed.js?v=335"><\/script></div>`})}exportArticle(){}exportFront(){const e=this.api.v1.model.query.getModelByType("dropZone");return this.api.v1.model.query.getModelsByType("article",[e]).map((e=>this.serialize(e))).filter((e=>!!e))}serialize(e){const t=this.api.v1.model.serialize.model(e);if(!t||!t.fields)return null;const i=!!t.fields.origin_data_json,s={images:[],width:e.getWidth("desktop"),metadata:t.metadata,isAutomatic:i,siteDomain:this.frontUrl},a=i?t.fields.origin_data_json:t.fields,n=[...this.paths.fields,...i?this.paths.fieldsAuto:this.paths.fieldsNative];for(const e of this.paths.main)s[e]=t[e]||"";for(const e of n)s[this.paths.fieldMap[e]||e]=a[e]||"";if(s.teaserSubtitle=a.teaserSubtitle||"",i){if(!s.byline){const e=(a.full_bylines||[]).shift();s.byline=e?`${e.firstname} ${e.lastname}`:"",s.bylineImage=s.bylineImage||(e||{}).imageUrl}"string"==typeof s.tags&&(s.tags=s.tags.split(",").map((e=>(e||"").trim()))),s.site_alias=(this.api.v1.site.getSiteById(a.site_id)||{}).alias,s.id=parseInt(a.id,10)}else s.titleHTML=s.title,s.title=this.cleanText(s.title),s.descriptionHTML=s.description,s.description=this.cleanText(s.description),s.kickerHTML=s.kicker,s.kicker=this.cleanText(s.kicker),s.id=t.id;s.section_tag=s.section,s.url&&!s.url.startsWith("http")&&(s.url=this.frontUrl+s.url);for(const e of Object.keys(this.paths.fallback))s[e]||(s[e]=a[this.paths.fallback[e]]||"");s.full_bylines=(i?a.full_bylines:a.full_bylines_json)||[],s.full_bylines=s.full_bylines.map((e=>({firstname:e.firstname,lastname:e.lastname,description:e.description,imageUrl:this.getImageUrl(e.imageUrl)}))),i&&s.byline&&s.full_bylines.unshift({firstname:s.byline,lastname:"",imageUrl:this.getImageUrl(s.bylineImage)}),!s.byline&&s.full_bylines.length&&(s.byline=`${s.full_bylines[0].firstname} ${s.full_bylines[0].lastname}`,s.bylineImage=s.full_bylines[0].imageUrl.replace(this.imageServer,""));const o=lab_api.v1.config.get("customAdapterFields.article")||[];if(o)for(const e of o)if(e){let i=t.fields[e]||"";!i&&t.fields.origin_data_json&&(i=t.fields.origin_data_json[e]||""),i&&(s[e]=i)}s.paywall="0"!==s.paywall&&!!s.paywall;const r=this.api.v1.model.query.getChildOfType(e,"image");if(r){const e=r.get("filtered.image");e&&s.images.push({url:e,jpg:`${e}&format=jpg`,webp:`${e}&format=webp`,url_size:e,default:"1",id:r.get("instance_of")})}return s}cleanText(e){return this.api.v1.util.string.sanitizeString(e).replace(/&amp;/g,"&")}getImageUrl(e){return e?e.startsWith("http")?e:this.imageServer+e:""}}class j{constructor(e){this.api=e}register(e,t){if(this.api.v1.app.mode.isFragmentMode())return void Sys.logger.debug("[EsiHelper] Labrador is is fragment-mode. Will not register ESI. Skipping.");if(!e)return void Sys.logger.debug("[EsiHelper] Missing model, cannot process. Skipping.");const i=this.api.v1.config.get("footer.include");if(i&&i.pageId){const t=this.getEsiUrl(i);t?"client"===i.render?e.setFiltered("renderFooter.url",t):this.insertEsi(e,t,"esi_footer"):Sys.logger.warning("[EsiHelper] Cannot prepare url for footer-fragment. Missing url.")}const s=this.api.v1.config.get("header.include"),a=this.api.v1.config.get("header.includes")||[],n=[];if(s&&s.pageId){const t=this.insertHeader(s,e);t&&n.push(t)}for(const t of a)if(t&&t.pageId){const i=this.insertHeader(t,e);i&&n.push(i)}e.setFiltered("renderHeader.urls",n.map((e=>`'${e}'`)).join(", "))}getEsiUrl(e){if(!e.pageId)return null;const t=["pageId","path","structureType","start","count"],i=[];if(t.forEach((t=>{void 0!==e[t]&&""!==e[t]&&null!==e[t]&&i.push(`${t}=${e[t]}`)})),i.length===t.length){let e=this.api.v1.properties.get("front_api_url");return this.api.v1.app.mode.isEditor()&&"https:"===document.location.protocol&&(e=e.replace("http:","https:")),`${e}/fragment/structure/?${i.join("&")}`}return null}insertEsi(e,t,i){Sys.logger.debug(`[EsiHelper] Will insert fragment for selector: "${i}", url: "${t}".`),this.api.v1.model.insert.atPath({path:e.getPath(),data:{type:"esi",selector:i,contentdata:{fields:{url:t,identifier:i}},state:{isNonPersistent:!0}},options:{frontpage:!0,articlepage:!0}}),this.api.v1.app.mode.isEditor()&&this.fetchEditorEsi(t,`${i}`)}insertHeader(e,t){const i=this.getEsiUrl(e);if(i){if("client"===e.render)return Sys.logger.debug(`[EsiHelper] Found url for header-fragment to render in client: "${i}".`),i;this.insertEsi(t,i,"esi_header")}else Sys.logger.warning("[EsiHelper] Cannot prepare url for header-fragment. Missing url.");return null}fetchEditorEsi(e,t){this.api.v1.view.on("domRendered",((i,s)=>{const a=this.api.v1.model.query.getModelBySelector(t);a&&(Sys.logger.debug(`EsiHelper.fetchEditorEsi: Will fetch esi-substitute for editor. Selector: ${t}, url: ${e}`),this.api.v1.util.httpClient.get(e,{credentials:"omit",type:"text"}).then((e=>{const i=lab_api.v1.view.getView(a,s),n=document.createElement("template");if(n.innerHTML=e,Sys.logger.debug(`EsiHelper.fetchEditorEsi: Esi-substitute fetched. Selector: ${t}, element-count: ${n.content.children.length}`),i.markup){for(const e of[...n.content.children])i.markup.parentElement.insertBefore(e,i.markup);i.markup.remove()}else Sys.logger.warn(`EsiHelper.fetchEditorEsi: Element markup not found. Cannot insert dom-element(s). Selector: ${t}`)})).catch((e=>{Sys.logger.warning(`EsiHelper.fetchEditorEsi: Esi-substitute could not be fetched. Selector: ${t}, error: ${e}`)})))}))}}class E{static mediaQueries={desktop:"(min-width:1024px)",mobile:"(max-width: 1023px)"};static createStyle({model:e,view:t,viewports:i,styleCollection:s="content_inline_spacing",mediaQueries:a=this.mediaQueries,returnArray:n=!1}){const o=[],r=`[data-element-guid="${e.getGuid()}"] .content`;for(const n of i)if(a[n]){const i=lab_api.v1.style.getStyles(e,t,s,n);i&&o.push(`@media ${a[n]} { ${r} { ${i} } }`)}return n?o:`<style>${o.join("\n")}</style>`}}const A=class{constructor(){this.name="Baseview",this.api=null,this.pageAPI=null,this.useSpacing=!1}onReady(e){if(this.api=e,Sys.logger.debug(`[Front] Running Baseview version ${this.api.v1.config.get("view_version")}, build ${this.api.v1.config.get("view_build.baseview.version")}`),"json"===this.api.v1.viewport.getName()&&"PageExport.jsonData"===this.api.v1.config.get("viewports.json.renderer")){const e=new P(this.api);this.api.v1.view.on("rendered",((t,i)=>[JSON.stringify(e.jsonData(this.api.v1.model.query.getRootModel()),null,4)]))}if("oembed"===this.api.v1.viewport.getName()&&"PageExport.oembed"===this.api.v1.config.get("viewports.oembed.renderer")){const e=new P(this.api);this.api.v1.view.on("rendered",((t,i)=>[JSON.stringify(e.oembed(this.api.v1.model.query.getRootModel()),null,4)]))}new I(this.api,this.api.v1.util.request).listen()}onAcceptContent(){const e=this.api.v1.model.query.getRootModel();if(this.useSpacing=!(!e||!e.get("fields.style_spacing")),"editor"===this.api.v1.app.mode.getSimulatedMode())return void Sys.logger.debug("[Front] Labrador is running in simulated editor-mode. Skipping DynamicDataHelper and EsiHelper.");const t=new C(this.api).insert(this.api.v1.viewport.getName());t.length>0&&!e.get("fields.hideAds")&&(e.setFiltered("clientSidePlacements",JSON.stringify(t)),e.setFiltered("clientSideResources",JSON.stringify({configObject:{viewConfig:{config:{customer:{contentbox_settings:{adnuntiusAd:this.api.v1.config.get("contentbox_settings.adnuntiusAd")||{},googleAd:this.api.v1.config.get("contentbox_settings.googleAd")||{}},adEnvironment:this.api.v1.config.get("adEnvironment")||{}}}}},site:this.api.v1.site.getSite(),device:this.api.v1.properties.get("device"),debug:this.api.v1.util.request.hasQueryParam("debug")||!1})));new j(this.api).register(e,this.api.v1.site.getSite().alias),this.api.v1.util.request.hasQueryValue("lab_opts","hideHeader")&&(Sys.logger.debug("[Front] Hiding header and logo based on url param lab_opts=hideHeader ..."),e.setFiltered("pageHeaderDisplay","hideHeaderAndLogo")),this.api.v1.util.request.hasQueryValue("lab_opts","hideFooter")&&(Sys.logger.debug("[Front] Hiding footer based on url param lab_opts=hideFooter ..."),e.setFiltered("pageFooterDisplay","hideFooter")),this.api.v1.util.request.hasQueryValue("lab_opts","hideComments")&&(Sys.logger.debug("[Front] Hiding Hyvor comments based on url param lab_opts=hideComments ..."),e.setFiltered("pageCommentsDisplay","hideComments"))}onRender(e,t){this.useSpacing&&e.setFiltered("styleSheets",E.createStyle({model:e,view:t,viewports:["desktop","mobile"],returnArray:!1}))}onMapData(e){if("text_title"===e.type||"text_subtitle"===e.type){if(!e.contentdata||!e.contentdata.fields)return;const t={...e};return t.type="text_singleline",t.contentdata.fields.text=t.contentdata.fields.title||t.contentdata.fields.subtitle,"text_subtitle"===e.type?(t.contentdata.fields.elementType={value:"h3"},delete t.contentdata.fields.subtitle):(t.contentdata.fields.elementType={value:"h2"},lab_api.v1.util.object.set("attributes.text_size.vp.desktop",lab_api.v1.util.object.get("attributes.text_size.vp.desktop",t.contentdata.fields.text)||44,t.contentdata.fields.text),delete t.contentdata.fields.title),t.lab_internal_format=!0,t}}};var O=t.k,q=t.B;

/***/ }),

/***/ "./build/modules/client_package.js":
/*!*****************************************!*\
  !*** ./build/modules/client_package.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "config": () => (/* binding */ config),
/* harmony export */   "properties": () => (/* binding */ properties),
/* harmony export */   "templates": () => (/* binding */ templates)
/* harmony export */ });
// View export from Baseview
// Version: 1.4.9, build: 366
const config = {"view_version":"1.4.9","view_version_number":149,"view_name":"Baseview","view_build":{"baseview":{"releasenotes":"145:6","userReleasenotes":"149:4","version":366}},"viewports":{"mobile":{"deviceWidth":480},"desktop":{"deviceWidth":1058}},"imageUrlOptions":{"extension":".webp","nameField":"instance_of"},"viewHelper":{"image":{"viewports":["desktop","mobile"],"pixelDensityFactor":2}},"grid":{"total_grid_spans":12,"grid_prefix":{"mobile":"small-","desktop":"large-"},"abs_grid_prefix":{"mobile":"small-abs-","desktop":"large-abs-"}},"style":{"definitions":{"css_style":{"requirePath":false,"path":"metadata.css_style","items":[{"prefix":"style-","postfix":""}]},"style_preset":{"path":"metadata.style_preset","items":[{"viewport":"no_viewport"}]},"text_size":{"requirePath":true,"path":"text_size","items":[{"viewport":"desktop","fallback":"no_viewport","prefix":"t"},{"viewport":"mobile","prefix":"tm"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"font_weight":{"requirePath":true,"path":"font_weight","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"m-"}]},"bold":{"requirePath":true,"path":"bold","items":[{"viewport":"no_viewport"}]},"text_background_color":{"requirePath":true,"path":"text_background_color","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_","nullValue":"no_bg_color"}]},"text_background_color_op":{"requirePath":true,"path":"text_background_color_op","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_","nullValue":"no_bg_color"}]},"custom_text_background_color":{"requirePath":true,"path":"custom_text_background_color","items":[{"prefix":"background-color:","postfix":" !important;"}]},"custom_text_color":{"requirePath":true,"path":"custom_text_color","items":[{"prefix":"color:","postfix":" !important;"}]},"custom_text_shadow":{"requirePath":true,"path":"custom_text_shadow","items":[{"prefix":"text-shadow:"}]},"text_color":{"requirePath":true,"path":"text_color","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_"}]},"text_align":{"requirePath":true,"path":"text_align","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"],"prefix":"align-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_text_align_align-"}]},"fontface":{"requirePath":true,"path":"fontface","items":[{"prefix":"font-"}]},"italic":{"requirePath":true,"path":"italic","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"],"nullValue":"no_italic"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"m-","nullValue":"no_italic"}]},"underline":{"requirePath":true,"path":"underline","items":[{"viewport":"no_viewport"}]},"texttransform":{"requirePath":true,"path":"texttransform","items":[{"viewport":"no_viewport"}]},"strikethrough":{"requirePath":true,"path":"strikethrough","items":[{"viewport":"no_viewport"}]},"text_shadow":{"requirePath":true,"path":"text_shadow","items":[{"viewport":"no_viewport"}]},"animate":{"requirePath":true,"path":"animate","items":[{"viewport":"no_viewport"}]},"background_color":{"requirePath":false,"path":"metadata.background_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"","postfix":""},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_","postfix":"","nullValue":"no_bg_color"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"background_opacity":{"requirePath":false,"path":"metadata.background_color_op","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"","postfix":""},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_","postfix":""}]},"background_gradient":{"requirePath":false,"path":"metadata.gradient","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_"}]},"border_color":{"requirePath":false,"path":"metadata.border_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_","nullValue":"no_border_color"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"border_side":{"requirePath":false,"path":"metadata.border_side","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_","nullValue":"no_border_side"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"border_width":{"requirePath":false,"path":"metadata.border_width","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"border_width_","nullValue":"no_border_width"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"border_width_mobile_","nullValue":"no_border_width"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"layout":{"requirePath":false,"path":"metadata.layout","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"layout_mobile_"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"fitContent":{"requirePath":false,"path":"metadata.fitContent","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"fitContent_mobile_"}],"template":"{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"},"shadow":{"requirePath":false,"path":"metadata.shadow","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"shadow_mobile_"}]},"metadata_text_color":{"requirePath":false,"path":"metadata.text_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_text_color-_"}]},"hover_text_color":{"requirePath":false,"path":"metadata.hover_text_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_hover_text_color-_"}]},"hover_bg_color":{"requirePath":false,"path":"metadata.hover_bg_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_hover_bg_color-_"}]},"hover_border_color":{"requirePath":false,"path":"metadata.hover_border_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_hover_border_color-_"}]},"image_overlay":{"requirePath":false,"path":"metadata.image_overlay","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_"}]},"image_overlay_opacity":{"requirePath":false,"path":"metadata.image_overlay_opacity","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_"}]},"image_gradient":{"requirePath":false,"path":"metadata.image_gradient","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_"}]},"image_gradient_opacity":{"requirePath":false,"path":"metadata.image_gradient_opacity","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"]},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"color_mobile_"}]},"float":{"requirePath":false,"path":"metadata.float","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"desktop-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-"}]},"spacing":{"requirePath":false,"path":"fields.spacing","items":[{"prefix":"spacing-","nullValue":"default"}]},"spacing_outer_top":{"requirePath":false,"path":"metadata.spacing_outer_top","items":[{"viewport":"current_viewport","prefix":"margin-top:","postfix":"% !important;"}]},"spacing_outer_right":{"requirePath":false,"path":"metadata.spacing_outer_right","items":[{"viewport":"current_viewport","prefix":"margin-right:","postfix":"% !important;"}]},"spacing_outer_bottom":{"requirePath":false,"path":"metadata.spacing_outer_bottom","items":[{"viewport":"current_viewport","prefix":"margin-bottom:","postfix":"% !important;"}]},"spacing_outer_left":{"requirePath":false,"path":"metadata.spacing_outer_left","items":[{"viewport":"current_viewport","prefix":"margin-left:","postfix":"% !important;"}]},"spacing_inner_top":{"requirePath":false,"path":"metadata.spacing_inner_top","items":[{"viewport":"current_viewport","prefix":"padding-top:","postfix":"% !important;"}]},"spacing_inner_right":{"requirePath":false,"path":"metadata.spacing_inner_right","items":[{"viewport":"current_viewport","prefix":"padding-right:","postfix":"% !important;"}]},"spacing_inner_bottom":{"requirePath":false,"path":"metadata.spacing_inner_bottom","items":[{"viewport":"current_viewport","prefix":"padding-bottom:","postfix":"% !important;"}]},"spacing_inner_left":{"requirePath":false,"path":"metadata.spacing_inner_left","items":[{"viewport":"current_viewport","prefix":"padding-left:","postfix":"% !important;"}]},"pull_up":{"requirePath":false,"path":"metadata.pull_up","items":[{"viewport":"desktop","prefix":"large-pull-"},{"viewport":"mobile","prefix":"small-pull-"}]},"content_text_align":{"requirePath":false,"path":"metadata.text_align","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"align-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_text_align_align-"}]},"content_vertical_text_align":{"requirePath":false,"path":"metadata.vertical_text_align","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"vertical-text-align-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-vertical-text-align-"}]},"text_align_row":{"requirePath":false,"path":"metadata.text_align_row","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"align-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile_text_align_align-"}]},"vertical_align":{"requirePath":false,"path":"metadata.vertical_align","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"grid-vas-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-grid-vas-"}]},"vertical_align_content":{"requirePath":false,"path":"metadata.vertical_align_content","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"grid-align-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-grid-align-"}]},"custom_background_color":{"requirePath":false,"path":"metadata.custom_background_color","items":[{"prefix":"background-color:","postfix":";"}]},"custom_background_color_L3":{"requirePath":false,"path":"metadata.box_custom_background","items":[{"prefix":"background-color:","postfix":";"}]},"custom_border_color":{"requirePath":false,"path":"metadata.custom_border_color","items":[{"prefix":"border-color:","postfix":" !important;"}]},"movableContainer":{"requirePath":true,"items":[{"viewport":"desktop","value":"desktop-movable-container","nullValue":""},{"viewport":"mobile","value":"mobile-movable-container","nullValue":""}]},"movableElement":{"requirePath":true,"items":[{"viewport":"desktop","value":"desktop-movable-element","nullValue":""},{"viewport":"mobile","value":"mobile-movable-element","nullValue":""}]},"collapsedContent":{"requirePath":true,"items":[{"viewport":"desktop","value":"desktop-collapsed-element","nullValue":""},{"viewport":"mobile","value":"mobile-collapsed-element","nullValue":""}]},"imageAlign":{"requirePath":true,"items":[{"viewport":"desktop","fallback":["no_viewport"],"prefix":"desktop-"},{"viewport":"mobile","fallback":["no_viewport"],"prefix":"mobile-"}]},"imageBorder":{"requirePath":true,"items":[{"value":"bordered"}]},"vertical_space_outside_top":{"requirePath":false,"path":"metadata.spaceOutsideTop","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"desktop-space-outsideTop-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-space-outsideTop-"}]},"vertical_space_outside_bottom":{"requirePath":false,"path":"metadata.spaceOutsideBottom","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"desktop-space-outsideBottom-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-space-outsideBottom-"}]},"vertical_space_inside_top":{"requirePath":false,"path":"metadata.spaceInsideTop","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"desktop-space-insideTop-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-space-insideTop-"}]},"vertical_space_inside_bottom":{"requirePath":false,"path":"metadata.spaceInsideBottom","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"desktop-space-insideBottom-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-space-insideBottom-"}]},"fullWidth":{"requirePath":false,"path":"metadata.hasFullWidth","items":[{"viewport":"desktop","fallback":["no_viewport"],"prefix":"desktop-","value":"fullWidth","nullValue":""},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-","value":"fullWidth","nullValue":""}]},"fullWidthLimit":{"path":"metadata.hasFullWidthWithLimit","items":[{"viewport":"desktop","fallback":["no_viewport"],"prefix":"desktop-","value":"fullWithLimit","nullValue":""},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-","value":"fullWithLimit","nullValue":""}]},"expandedState":{"path":"metadata.expandedState","items":[{"viewport":"desktop","postfix":"-desktop","value":"state-expanded","nullValue":""},{"viewport":"mobile","postfix":"-mobile","value":"state-expanded","nullValue":""}]},"dacBtn":{"requirePath":true,"path":"dacBtn","items":[{"viewport":"no_viewport","value":"dacBtn bg-btn-color"}]},"responsive_size":{"requirePath":true,"items":[{"viewport":"mobile","prefix":"small-vw-"}]},"compactDisplay":{"path":"metadata.compactDisplay","items":[{"value":"compactDisplay"}]},"subimagePlacement":{"requirePath":false,"path":"metadata.subimagePlacement","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"placement-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-placement-"}]},"subimageSize":{"requirePath":false,"path":"metadata.subimageSize","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"prefix":"size-"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"prefix":"mobile-size-"}]},"hasTextPadding":{"requirePath":true,"path":"text_background_color","items":[{"viewport":"desktop","fallback":["no_viewport","mobile"],"value":"hasTextPadding"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"value":"mobile-hasTextPadding"}]},"hasTextPaddingCustom":{"requirePath":true,"path":"custom_text_background_color","items":[{"value":"hasTextPadding"},{"value":"mobile-hasTextPadding"}]},"hasContentPadding":{"path":"metadata.background_color","items":[{"viewport":"desktop","fallback":["mobile","no_viewport"],"value":"hasContentPadding"},{"viewport":"mobile","fallback":["desktop","no_viewport"],"value":"mobile-hasContentPadding"}]},"hasContentPaddingCustom":{"path":"metadata.custom_background_color","items":[{"value":"hasContentPadding"},{"value":"mobile-hasContentPadding"}]},"hasBorder":{"path":"metadata.custom_border_color","items":[{"value":"hasBorder","nullValue":""}]}},"collections":{"text_decoration":{"name":"text_decoration","definitions":["text_size","font_weight","bold","text_background_color","text_background_color_op","text_color","text_align","fontface","italic","underline","texttransform","strikethrough","text_shadow","animate","dacBtn","hasTextPadding","hasTextPaddingCustom"]},"text_decoration_inline_style":{"name":"text_decoration_inline_style","definitions":["custom_text_background_color","custom_text_color","custom_text_shadow"]},"section_decoration":{"name":"section_decoration","definitions":["style_preset","vertical_space_outside_top","vertical_space_outside_bottom"]},"box_decoration":{"name":"box_decoration","definitions":["float","pull_up","vertical_align","vertical_align_content","css_style","style_preset","vertical_space_outside_top","vertical_space_outside_bottom","vertical_space_inside_top","vertical_space_inside_bottom","expandedState","compactDisplay"]},"box_fullWidth":{"name":"box_fullWidth","definitions":["fullWidth","fullWidthLimit"]},"content_decoration":{"name":"content_decoration","definitions":["background_color","background_opacity","background_gradient","border_color","border_side","border_width","image_gradient","image_gradient_opacity","content_text_align","content_vertical_text_align","hasContentPadding","hasContentPaddingCustom","hasBorder"]},"content_inline_style":{"name":"content_inline_style","definitions":["custom_background_color","custom_background_color_L3","custom_border_color"]},"content_inline_spacing":{"name":"content_inline_spacing","definitions":["spacing_inner_top","spacing_inner_right","spacing_inner_bottom","spacing_inner_left","spacing_outer_top","spacing_outer_right","spacing_outer_bottom","spacing_outer_left"]},"subimage":{"name":"subimage","definitions":["subimagePlacement","subimageSize"]}},"copyDefinitions":[{"definition":"text_size","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"font_weight","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"text_background_color","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"text_background_color_op","data":[{"path":"fields.title"}]},{"definition":"text_color","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"text_align","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"fontface","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"italic","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"underline","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"texttransform","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"strikethrough","data":[{"path":"fields.text"},{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"animate","data":[{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.description"},{"path":"fields.author"},{"path":"fields.quote"},{"path":"fields.firstname"},{"path":"fields.lastname"},{"path":"fields.imageCaption"},{"path":"fields.byline"}]},{"definition":"custom_text_shadow","data":[{"path":"fields.title","values":{"no_viewport":null}},{"path":"fields.subtitle","values":{"no_viewport":null}},{"path":"fields.kicker","values":{"no_viewport":null}},{"path":"fields.description","values":{"no_viewport":null}},{"path":"fields.author","values":{"no_viewport":null}},{"path":"fields.quote","values":{"no_viewport":null}},{"path":"fields.firstname","values":{"no_viewport":null}},{"path":"fields.lastname","values":{"no_viewport":null}},{"path":"fields.imageCaption","values":{"no_viewport":null}},{"path":"fields.byline","values":{"no_viewport":null}}]},{"definition":"text_shadow","data":[{"path":"fields.title","values":{"no_viewport":null}},{"path":"fields.subtitle","values":{"no_viewport":null}},{"path":"fields.kicker","values":{"no_viewport":null}},{"path":"fields.description","values":{"no_viewport":null}},{"path":"fields.author","values":{"no_viewport":null}},{"path":"fields.quote","values":{"no_viewport":null}},{"path":"fields.firstname","values":{"no_viewport":null}},{"path":"fields.lastname","values":{"no_viewport":null}},{"path":"fields.imageCaption","values":{"no_viewport":null}},{"path":"fields.byline","values":{"no_viewport":null}}]},{"definition":"custom_text_color","data":[{"path":"fields.title","values":{"no_viewport":null}},{"path":"fields.subtitle","values":{"no_viewport":null}},{"path":"fields.kicker","values":{"no_viewport":null}},{"path":"fields.description","values":{"no_viewport":null}},{"path":"fields.author","values":{"no_viewport":null}},{"path":"fields.quote","values":{"no_viewport":null}},{"path":"fields.firstname","values":{"no_viewport":null}},{"path":"fields.lastname","values":{"no_viewport":null}},{"path":"fields.imageCaption","values":{"no_viewport":null}},{"path":"fields.byline","values":{"no_viewport":null}}]},{"definition":"custom_text_background_color","data":[{"path":"fields.title","values":{"no_viewport":null}},{"path":"fields.subtitle","values":{"no_viewport":null}},{"path":"fields.kicker","values":{"no_viewport":null}},{"path":"fields.description","values":{"no_viewport":null}},{"path":"fields.author","values":{"no_viewport":null}},{"path":"fields.quote","values":{"no_viewport":null}},{"path":"fields.firstname","values":{"no_viewport":null}},{"path":"fields.lastname","values":{"no_viewport":null}},{"path":"fields.imageCaption","values":{"no_viewport":null}},{"path":"fields.byline","values":{"no_viewport":null}}]},{"definition":"css_style"},{"definition":"style_preset"},{"definition":"background_color"},{"definition":"custom_background_color"},{"definition":"background_opacity"},{"definition":"background_gradient"},{"definition":"image_gradient"},{"definition":"border_color"},{"definition":"border_side"},{"definition":"border_width"},{"definition":"layout"},{"definition":"shadow"},{"definition":"fitContent"},{"definition":"metadata_text_color"},{"definition":"hover_bg_color"},{"definition":"hover_text_color"},{"definition":"hover_border_color"},{"definition":"image_overlay"},{"definition":"image_overlay_opacity"},{"definition":"image_gradient_opacity"},{"definition":"float"},{"definition":"pull_up"},{"definition":"content_text_align"},{"definition":"content_vertical_text_align"},{"definition":"vertical_align"},{"definition":"vertical_space_outside_top"},{"definition":"vertical_space_outside_bottom"},{"definition":"vertical_space_inside_top"},{"definition":"vertical_space_inside_bottom"},{"definition":"spacing_outer_top","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_outer_right","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_outer_bottom","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_outer_left","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_inner_top","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_inner_right","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_inner_bottom","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"definition":"spacing_inner_left","data":[{"values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"targets":["article","articleHeader"],"data":[{"path":"metadata.image_gradient_direction","values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"targets":["image"],"data":[{"path":"fields.bbRatio","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"fields.whRatio","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"fields.float","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"fields.shapes","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"fields.displayCaption","values":{"no_viewport":null}},{"path":"fields.expandableCaption","values":{"no_viewport":null}},{"path":"fields.truncateCaption","values":{"no_viewport":null}}]},{"targets":["article"],"data":[{"path":"fields.displayByline","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.showSection","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.sectionPlacement","values":{"no_viewport":null}},{"path":"metadata.showTags","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.tagPlacement","values":{"no_viewport":null}}]},{"targets":["article","articleHeader"],"data":[{"path":"metadata.showKicker","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.kickerBelowImage","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.kickerBelowTitle","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.floatingKicker","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.hideTitle","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.titleAboveImage","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.floatingTitle","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.hidesubtitle","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.floatingSubtitle","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.hideimage","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.hasFullWidth","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.hasFullWidthWithLimit","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.compactDisplay","values":{"no_viewport":null}},{"path":"metadata.sub_hideImage","values":{"no_viewport":null}},{"path":"metadata.sub_hideTitle","values":{"no_viewport":null}},{"path":"metadata.sub_hideSubtitle","values":{"no_viewport":null}}]},{"targets":["row"],"data":[{"path":"metadata.hasRowTitle","values":{"no_viewport":null}},{"path":"metadata.vertical_align_content","values":{"no_viewport":null}},{"path":"metadata.isSection","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.text_background_color","values":{"no_viewport":null,"desktop":null,"mobile":null}},{"path":"metadata.text_color","values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"targets":["userFeedback","timeline"],"data":[{"path":"metadata.ui_color","values":{"no_viewport":null}},{"path":"metadata.ui_text_color","values":{"no_viewport":null}}]},{"targetPath":"bodytext/","data":[{"path":"width","values":{"no_viewport":null,"desktop":null,"mobile":null}}]},{"targets":["grid"],"data":[{"path":"fields.columnCount","values":{"no_viewport":null}},{"path":"fields.rowCount","values":{"no_viewport":null}},{"path":"fields.noSpace","values":{"no_viewport":null}}]},{"definition":"hasTextPadding","data":[{"path":"fields.title"},{"path":"fields.subtitle"},{"path":"fields.kicker"},{"path":"fields.text"}]},{"definition":"hasContentPadding"},{"definition":"hasBorder"}],"presets":{}},"data":{"blacklist":["sub_content"],"blacklistOptions":{"sub_content":{"includeChildren":true}},"elements":{"text_singleline":{"fallbackData":{"contentdata":{"fields":{"elementType":"h2"}}}},"articleHeader":{"source":{"node":"page","keys":["fields.title","fields.subtitle","fields.kicker","fields.published","fields.modified","fields.created"]},"fallbackData":{"contentdata":{"fields":{"displayCaption":true}},"metadata":{"showKicker":true}}},"page_notice":{"fallbackData":{"contentdata":{"fields":{"uiColor":"bg-primary"}}}},"noticeHeader":{"source":{"node":"page"}},"bodytext":{"source":{"node":"page"}},"articleMeta":{"source":{"node":"page"}},"articleFooter":{"source":{"node":"page"}},"labradorSearch":{"fallbackData":{"contentdata":{"fields":{"submitLabel":"Search","navLabel":"Display more","nohitsLabel":"No hits. Try modifying your search","displayAdvanced":false,"displaySites":true,"searchPlaceholder":"Type your search here ...","articleCount":20,"advancedOpenText":"Open settings","advancedCloseText":"Close settings","orderBy":"published","fromDateLabel":"From date","toDateLabel":"To date","tagLabel":"Tag","authorLabel":"Author","allSitesLabel":"All sites"}},"metadata":{"ui_color":"bg-secondary"}}},"timeline":{"fallbackData":{"metadata":{"ui_color":"bg-primary","ui_text_color":"primary"}}},"livefeed":{"fallbackData":{"metadata":{"ui_color":"bg-primary"},"contentdata":{"fields":{"maxNoticesCount":20,"viewports_json":{"desktop":{"fields":{"visibleCount":3}},"mobile":{"fields":{"visibleCount":2}}}}}}},"image":{"fallbackData":{"metadata":{"bodyTextIndex":0,"subimagePlacement":{"desktop":"topright"}}}},"graphic":{"fallbackData":{"metadata":{"subimagePlacement":{"desktop":"topright"}}}},"articlesByTag":{"fallbackData":{"contentdata":{"fields":{"title":"","title_style_json":{"text_background_color":"bg-black"}}}}},"front_rows":{"fallbackData":{"contentdata":{"fields":{"fragment_json":{"start":0,"count":1}}}}},"buttonlink":{"fallbackData":{"metadata":{"background_color":"bg-primary","text_color":"white","border_color":"bg-primary"}}},"topcomments":{"fallbackData":{"contentdata":{"fields":{"titleLatest":"Recent articles","titleMostRead":"Most read articles","labelLatest":"Latest","labelMostRead":"Most read","iconLatest":"fi-clock","iconMostRead":"fi-book","articleCount":"5","days":"7"}}}},"factbox":{"fallbackData":{"metadata":{"expandedState":{"desktop":true}}}},"toplist":{"fallbackData":{"contentdata":{"fields":{"days":"7","layout":"vertical"}}}},"articleList":{"fallbackData":{"contentdata":{"fields":{"imageLayout":"left","layout":"default"}}}},"article":{"fallbackData":{"metadata":{"sub_hideSubtitle":true}}}},"presets":{},"presetBlacklist":{"article":["article/"]}}};
const properties = {"content_settings/front/vp_data.json":{"viewportMap":{"presets":{"vp_data":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"},"attributes":"presets.vp_content_attributes.attributes"},"vp_content_attributes":{"attributes":{"font_weight":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"text_size":{"viewport":{"default":true}},"text_color":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"text_background_color":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"text_align":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"italic":{"viewport":{"default":true},"fallback":{"default":"desktop"}}}},"vp_metadata_attributes":{"attributes":{"bodyTextIndex":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"showKicker":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hideTitle":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"titleAboveImage":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"floatingTitle":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"floatingSubtitle":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"subtitleAboveImage":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hidesubtitle":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"kickerBelowImage":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"kickerBelowTitle":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"floatingKicker":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hasFullWidth":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hasFullWidthWithLimit":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"background_color":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"gradient":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"image_overlay":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"image_overlay_opacity":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"image_gradient":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"image_gradient_opacity":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"image_gradient_direction":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"background_color_op":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hideimage":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"spacing_outer_top":{"viewport":{"default":true}},"spacing_outer_right":{"viewport":{"default":true}},"spacing_outer_bottom":{"viewport":{"default":true}},"spacing_outer_left":{"viewport":{"default":true}},"spacing_inner_top":{"viewport":{"default":true}},"spacing_inner_right":{"viewport":{"default":true}},"spacing_inner_bottom":{"viewport":{"default":true}},"spacing_inner_left":{"viewport":{"default":true}},"pull_up":{"viewport":{"default":true}},"float":{"viewport":{"default":true}},"border_color":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"border_side":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"border_width":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"subarticles":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"showSection":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"showTags":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"text_align":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"vertical_align":{"viewport":{"default":true}},"hideViewport":{"viewport":{"default":true},"fallback":{"no_viewport":false}},"expandedState":{"viewport":{"default":true}},"displayNavigation":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"displayPreview":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}}}}},"width":{"viewport":{"default":true},"fallback":{"mailmojo":"desktop"}},"metadata":"presets.vp_metadata_attributes"}},"content/row/front/default.json":{"viewportMap":{"metadata":{"attributes":{"bodyTextIndex":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"hasFullWidth":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hasFullWidthWithLimit":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"background_color":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"background_color_op":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"border_color":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"border_side":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"border_width":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"vertical_align":{"viewport":{"default":true}},"isSection":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"hideViewport":{"viewport":{"default":true},"fallback":{"no_viewport":false}},"spaceOutsideTop":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"spaceOutsideBottom":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"spaceInsideTop":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"spaceInsideBottom":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"float":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"text_size":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"text_color":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"text_background_color":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"movableContent":{"viewport":{"default":true},"fallback":{"no_viewport":false}},"collapsedContent":{"viewport":{"default":true},"fallback":{"no_viewport":false}},"contentPosition":{"viewport":{"default":true},"fallback":{"no_viewport":false}}}}}},"content/columns/front/default.json":{},"content_settings/front/grid/default.json":{"gridRules":{"oddRule":{"condition":"odd","values":{"mobile":{"default":12}}},"evenRule":{"condition":"even","values":{"mobile":{"default":12}}}}},"content/article/front/default.json":{"viewportMap":{"fields":{"title":"presets.vp_content_attributes","subtitle":"presets.vp_content_attributes","kicker":"presets.vp_content_attributes","displayByline":"presets.vp_data","displayCaption":"presets.vp_data"}}},"content/image/front/default.json":{"boxTitle":"Media placeholder","boxDescription":"Add placeholder for media (images, videos, etc.)","viewHelper":"image","viewportMap":{"fields":{"x":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"y":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"cropw":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"croph":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"float":{"viewport":{"default":true}},"shapes":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"bbRatio":{"viewport":{"default":true}},"vpWidth":{"viewport":{"default":true}},"whRatio":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"height":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"width":{"viewport":{"default":true}}},"metadata":{"attributes":{"float":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"bodyTextIndex":{"viewport":{"default":true},"fallback":{"default":"desktop","desktop":"mobile"}},"hideViewport":{"viewport":{"default":true},"fallback":{"no_viewport":false}},"hasFullWidth":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"zoomable":{"viewport":{"default":true},"fallback":{"default":"no_viewport","desktop":"no_viewport"}},"subimage":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"subimagePlacement":{"viewport":{"default":true},"fallback":{"default":"desktop"}},"subimageSize":{"viewport":{"default":true},"fallback":{"default":"desktop"}}}}}},"content/image/front/subImage.json":{"overrideImageSize":{"width":320}},"content/image/front/subImageMobile.json":{"overrideImageSize":{"width":103}},"content/notice/front/default.json":{"boxTitle":"Notice","viewHelper":"bodytext","bodytextElements":["p","h2","h3","h4","ul","ol","li"],"viewportMap":{"fields":{"title":"presets.vp_content_attributes"}}},"content/row/_resources.json":{"presentation":{"stage":{"lab-default":{"template":{"default":"content/row/template/default"},"properties":{"default":["content_settings/front/vp_data.json","content/row/front/default.json"]}}}}},"content/columns/_resources.json":{"presentation":{"stage":{"lab-default":{"properties":{"default":["content/columns/front/default.json","content_settings/front/grid/default.json"]},"template":{"default":"content/columns/template/default"}}}}},"content/article/_resources.json":{"presentation":{"stage":{"lab-default":{"properties":{"default":["content/article/front/default.json","content_settings/front/grid/default.json","content_settings/front/vp_data.json"]},"template":{"default":"content/article/template/default","partials":["content/article/template/partials/kicker","content/article/template/partials/subtitle","content/article/template/partials/title","partial/elements/paywallLabel"]}}}}},"content/image/_resources.json":{"presentation":{"stage":{"lab-default":{"template":{"default":"content/image/template/default","partials":["content/image/template/article","content/image/template/partials/caption_links","content/image/template/partials/caption","content/image/template/partials/img","content/image/template/partials/child"]},"properties":{"default":["content/image/front/default.json"]}},"article":{"template":{"default":"content/image/template/article"}},"image":{"properties":{"default":"content/image/front/subImage.json","mobile":"content/image/front/subImageMobile.json"}},"notice":{"template":{"default":"content/image/template/grid"}}}}},"content/notice/_resources.json":{"presentation":{"stage":{"lab-default":{"properties":{"default":["content_settings/front/grid/default.json","content_settings/front/vp_data.json","content/notice/front/default.json"]},"template":{"default":"content/notice/template/default"}}}}},"content/adnuntiusAd/_resources.json":{"presentation":{"stage":{"lab-default":{"properties":{"default":["content_settings/front/grid/default.json"]},"template":{"default":"content/adnuntiusAd/template/default"}}}}},"content/googleAd/_resources.json":{"presentation":{"stage":{"lab-default":{"properties":{"default":["content_settings/front/grid/default.json"]},"template":{"default":"content/googleAd/template/default"}}}}}};
const templates = {"content/row/template/default":"{{ #get.current.metadata.isSection }}\n<div data-element-guid=\"{{ get.current.guid }}\" class=\"{{ #helper.trim }}\nrow-section \n{{ #style.collection }}section_decoration{{ /style.collection }}\n{{ #style.collection }}content_decoration{{ /style.collection }}\n{{ #style.definition }}movableContainer metadata.movableContent{{ /style.definition }}\n{{ #style.definition }}movableElement metadata.movableContent{{ /style.definition }}\n{{ #style.definition }}collapsedContent metadata.collapsedContent{{ /style.definition }}\n{{ /helper.trim }}\" style=\"{{ #style.collection }}content_inline_style{{ /style.collection }}\">\n{{ /get.current.metadata.isSection }}\n<div {{ ^get.current.metadata.isSection }}data-element-guid=\"{{ get.current.guid }}\" {{ /get.current.metadata.isSection }}class=\"{{ #helper.trim }}\n    row\n    {{ size.grid.css }}\n    {{ #get.current.metadata.fullWidthContent }}fullWidthContent{{ /get.current.metadata.fullWidthContent }}\n    {{ #style.collection }}box_decoration{{ /style.collection }}\n    {{ #style.collection }}content_decoration{{ /style.collection }}\n    {{ #style.definition }}movableContainer metadata.movableContent{{ /style.definition }}\n    {{ #style.definition }}movableElement metadata.movableContent{{ /style.definition }}\n    {{ #style.definition }}collapsedContent metadata.collapsedContent{{ /style.definition }}\n    {{ #get.current.metadata.hasRowTitle }}has-row-header{{ /get.current.metadata.hasRowTitle }}\n    {{ #get.children.mediaContainer }}has-media-container{{ /get.children.mediaContainer }}\n    {{ /helper.trim }}\" style=\"{{ #style.collection }}content_inline_style{{ /style.collection }}\"{{ #get.current.metadata.sectionId }} id=\"{{ get.current.metadata.sectionId }}\"{{ /get.current.metadata.sectionId }}>{{ #get.current.metadata.hasRowTitle }}\n    {{ #get.current.metadata.rowTitleTag }}\n    <{{ get.current.metadata.rowTitleTag }} class=\"row_header_text large-12 small-12 {{ #style.collection }}text_decoration metadata{{ /style.collection }} {{ #style.definition }}text_align_row{{ /style.definition }}\">{{{ get.current.metadata.rowTitle }}}</{{ get.current.metadata.rowTitleTag }}>\n    {{ /get.current.metadata.rowTitleTag }}\n    {{ ^get.current.metadata.rowTitleTag }}\n    <h5 class=\"row_header_text large-12 small-12 {{ #style.collection }}text_decoration metadata{{ /style.collection }} {{ #style.definition }}text_align_row{{ /style.definition }}\">{{{ get.current.metadata.rowTitle }}}</h5>\n    {{ /get.current.metadata.rowTitleTag }}\n    {{ /get.current.metadata.hasRowTitle }}{{ #get.current.metadata.movableContent }}{{{ get.current.filtered.movableStyle }}}{{ /get.current.metadata.movableContent }}{{{ children.all }}}</div>\n{{ #get.current.metadata.isSection }}\n</div>\n{{ /get.current.metadata.isSection }}\n","content/columns/template/default":"<div data-element-guid=\"{{ get.current.guid }}\" class=\"columns {{ size.grid.css }} {{ size.grid.absCss }}\">{{{ children.all }}}</div>","content/article/template/default":"<article {{ #helper.trim }}\n    data-element-guid=\"{{ get.current.guid }}\"\n    class=\"column\n        {{ #style.collection }}box_decoration{{ /style.collection }}\n        {{ #get.current.filtered.paywall }}paywall{{ /get.current.filtered.paywall }}\n        {{ size.grid.css }}\n        {{ size.grid.absCss }}\n        {{ get.current.filtered.autodata_css }}\"\n    {{ #get.current.filtered.autodata_attributes }} {{ key }}=\"{{ value }}\"{{ /get.current.filtered.autodata_attributes }} \n    data-site-alias=\"{{ get.current.filtered.site_alias }}\" \n    data-section=\"{{ get.current.filtered.section }}\" \n    data-instance=\"{{ get.current.instance_of }}{{ ^get.current.instance_of }}{{ get.current.id }}{{ /get.current.instance_of }}\" \n    {{ #get.child.image.fields.float }}data-image-float=\"{{ get.child.image.fields.float }}\"{{ /get.child.image.fields.float }}\n    itemscope itemtype=\"http://schema.org/NewsArticle\"\n    {{ /helper.trim }}>\n    {{{ get.current.filtered.styleSheets }}}\n    <div class=\"{{ #helper.trim }}\n        content\n        {{ #style.collection }}content_decoration{{ /style.collection }}\n        {{ #get.current.metadata.image_gradient_direction }}image-gradient-{{ get.current.metadata.image_gradient_direction }}{{ /get.current.metadata.image_gradient_direction }} \n        {{ #style.collection }}box_fullWidth{{ /style.collection }}\n        {{ /helper.trim }}\" style=\"{{ #style.collection }}content_inline_style{{ /style.collection }}\">\n        \n        {{#get.current.fields.published_url}}<a itemprop=\"url\"{{ #get.current.fields.open_in_new_window }} target=\"_blank\"{{ /get.current.fields.open_in_new_window }} class=\"\" href=\"{{{ get.current.fields.published_url }}}\" data-k5a-url=\"{{{ get.current.filtered.canonical_url }}}\" rel=\"{{ #get.current.filtered.addRelUgc }}ugc {{ /get.current.filtered.addRelUgc }}{{ #get.current.filtered.addRelSponsored }}sponsored {{ /get.current.filtered.addRelSponsored }}{{ #get.current.filtered.addRelNoFollow }}nofollow{{ /get.current.filtered.addRelNoFollow }}\">{{/get.current.fields.published_url}}\n\n        {{ #get.current.filtered.layout.top }}\n        {{ #render.template }}content/article/template/partials/{{ . }}{{ /render.template }}\n        {{ /get.current.filtered.layout.top }}\n\n        <div class=\"media{{ #get.current.metadata.floatingTextSubset }} floatingTextSubset{{ /get.current.metadata.floatingTextSubset }} {{ #style.definition }}imageAlign child.image.fields.float{{ /style.definition }}\">\n            {{^get.current.metadata.hideimage}}\n                {{{ placeholder.no_media }}}\n\n                {{{ child.image }}}\n                {{{ child.graphic }}}\n                {{{ child.slideshow }}}\n                {{{ child.youtube }}}\n                {{{ child.simplestream }}}\n                {{{ child.markup }}}\n                {{{ child.parallax }}}\n                {{{ child.grid }}}\n            \n            {{/get.current.metadata.hideimage}}\n            <div class=\"floatingText\">\n                {{ #get.current.filtered.layout.floating }}\n                {{ #render.template }}content/article/template/partials/{{ . }}{{ /render.template }}\n                {{ /get.current.filtered.layout.floating }}\n\n                <div class=\"labels\">\n                    {{ #get.current.filtered.autodata_custom.labels }}\n                    <div class=\"label\" data-label-key=\"{{ key }}\" data-label-value=\"{{ value }}\"><span class=\"label-value\">{{ value }}</span></div>\n                    {{ /get.current.filtered.autodata_custom.labels }}\n                    {{ #get.current.filtered.sectionPlacement.floating }}\n                        {{ #get.current.metadata.showSection }}\n                            {{ #get.current.filtered.section }}<p itemprop=\"section\" class=\"section\" data-tag=\"{{ get.current.filtered.section }}\">{{ get.current.filtered.section }}</p>{{ /get.current.filtered.section }}\n                        {{ /get.current.metadata.showSection }}\n                    {{ /get.current.filtered.sectionPlacement.floating }}\n                </div>\n            </div>\n            {{ #get.current.metadata.enableAudio }}{{ #render.template }}content/article/template/partials/audio{{ /render.template }}{{ /get.current.metadata.enableAudio }}\n            {{ #get.current.filtered.paywallLabel }}{{> partial/elements/paywallLabel }}{{ /get.current.filtered.paywallLabel }}\n        </div>\n        {{ #get.current.fields.displayCaption }}\n            <div class=\"caption {{ #helper.trim }}\n                {{ #app.isEditor }}expanded{{ /app.isEditor }}\n                {{ #get.current.fields.truncateCaption }}truncate{{ /get.current.fields.truncateCaption }}\n                {{ ^get.current.fields.truncateCaption }}\n                    {{ #get.child.image.fields.truncateCaption }}truncate{{ /get.child.image.fields.truncateCaption }}\n                {{ /get.current.fields.truncateCaption }}\n                {{ /helper.trim }}\" data-showmore=\"{{ #lang }}image.caption.showMoreLabel{{ /lang }}\"{{ #get.child.image.filtered.captionOptions.expandable }} data-expandable=\"true\" data-showcaption=\"{{ #lang }}image.caption.showCaptionLabel{{ /lang }}\" data-hidecaption=\"{{ #lang }}image.caption.hideCaptionLabel{{ /lang }}\"{{ /get.child.image.filtered.captionOptions.expandable }}>\n                <figcaption itemprop=\"caption\" class=\"{{ #style.collection }}text_decoration child.image.fields.imageCaption{{ /style.collection }}\">{{ #helper.stripLinks }}{{ #get.child.image.fields.globalCaption }}{{{ get.child.image.fields.globalCaption }}}{{ /get.child.image.fields.globalCaption }}{{ ^get.child.image.fields.globalCaption }}{{{ get.child.image.fields.imageCaption }}}{{ /get.child.image.fields.globalCaption }}{{ /helper.stripLinks }}</figcaption>\n                <figcaption itemprop=\"author\" class=\"{{ #style.collection }}text_decoration child.image.fields.byline{{ /style.collection }}\" data-byline-prefix=\"{{{ getConfig.image.imageBylinePrefix }}}\">{{ #helper.stripLinks }}{{{ get.child.image.fields.byline }}}{{ /helper.stripLinks }}</figcaption>\n            </div>\n        {{ /get.current.fields.displayCaption }}\n\n        {{ #get.current.metadata.vertical_text_align }}\n            <div class=\"vertically-aligned-text\">\n        {{ /get.current.metadata.vertical_text_align }}\n\n            {{ #get.current.filtered.sectionPlacement.underImage }}\n                {{ #get.current.metadata.showSection }}\n                    {{ #get.current.filtered.section }}<p itemprop=\"section\" class=\"section\" data-tag=\"{{ get.current.filtered.section }}\">{{ get.current.filtered.section }}</p>{{ /get.current.filtered.section }}\n                {{ /get.current.metadata.showSection }}\n            {{ /get.current.filtered.sectionPlacement.underImage }}\n        \n            {{ #get.current.filtered.tagPlacement.underImage }}\n                {{ #get.current.metadata.showTags }}\n                <div itemprop=\"tags\" class=\"tags\">{{#get.current.filtered.tags}}\n                    <span itemprop=\"tag\" class=\"tag\" data-tag=\"{{ . }}\">{{.}}</span>\n                {{/get.current.filtered.tags}}</div>\n                {{ /get.current.metadata.showTags }}\n            {{ /get.current.filtered.tagPlacement.underImage }}\n            {{ #get.current.filtered.layout.bottom }}\n            {{ #render.template }}content/article/template/partials/{{ . }}{{ /render.template }}\n            {{ /get.current.filtered.layout.bottom }}\n\n            {{ #get.current.filtered.sectionPlacement.underText }}\n                {{ #get.current.metadata.showSection }}\n                    {{ #get.current.filtered.section }}<p itemprop=\"section\" class=\"section\" data-tag=\"{{ get.current.filtered.section }}\">{{ get.current.filtered.section }}</p>{{ /get.current.filtered.section }}\n                {{ /get.current.metadata.showSection }}\n            {{ /get.current.filtered.sectionPlacement.underText }}\n        \n            {{ #get.current.filtered.tagPlacement.underText }}\n                {{ #get.current.metadata.showTags }}\n                <div itemprop=\"tags\" class=\"tags under-text\">{{#get.current.filtered.tags}}\n                    <span itemprop=\"tag\" class=\"tag\" data-tag=\"{{ . }}\">{{.}}</span>\n                {{/get.current.filtered.tags}}</div>\n                {{ /get.current.metadata.showTags }}\n            {{ /get.current.filtered.tagPlacement.underText }}\n\n        {{ #get.current.metadata.vertical_text_align }}\n            </div>\n        {{ /get.current.metadata.vertical_text_align }}\n\n        {{ #get.current.filtered.displayByline }}\n        <div class=\"bylines\">{{ #get.current.filtered.bylines }}\n            <div class=\"byline column\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n                <div class=\"content\">\n                    {{ #imageUrl}}\n                    <figure>\n                        <img itemprop=\"image\" src=\"{{{ imageUrl}}}\">\n                    </figure>\n                    {{ /imageUrl}}\n                    <address class=\"name\">{{{ firstname }}} {{{ lastname }}}</address>\n                </div>\n            </div>\n        {{ /get.current.filtered.bylines }}\n        {{ #get.current.filtered.displayPublishedDate }}\n            <div class=\"article-published-wrapper\">\n                <p class=\"article-published-date\">{{{ get.current.filtered.publishedDate }}}</p>\n            </div>\n        {{ /get.current.filtered.displayPublishedDate }}\n        </div>\n        {{ /get.current.filtered.displayByline}}\n\n        {{ ^get.current.filtered.displayByline}}\n            {{ #get.current.filtered.displayPublishedDate }}\n                <div class=\"article-published-wrapper\">\n                    <p class=\"article-published-date\">{{{ get.current.filtered.publishedDate }}}</p>\n                </div>\n            {{ /get.current.filtered.displayPublishedDate }}\n        {{ /get.current.filtered.displayByline}}\n\n        {{#get.current.fields.published_url}}</a>{{/get.current.fields.published_url}}\n\n        {{ #get.current.metadata.subarticles }}\n            <p class=\"subarticlesTitle bold {{ #style.collection }}text_decoration fields.subarticlesTitle{{ /style.collection }}\" style=\"margin: 0.6em 0 0;\">{{{ get.current.fields.subarticlesTitle }}}</p>\n            <ul class=\"relatedArticles\">{{ #children.article[]+ }}\n            {{{ . }}}\n            {{ /children.article[]+ }}</ul>\n        {{ /get.current.metadata.subarticles }}\n        <time itemprop=\"datePublished\" datetime=\"{{ get.current.filtered.published }}\"></time>\n    </div>\n</article>","content/article/template/partials/kicker":"<div {{ #get.current.fields.kicker[animate] }}data-content=\"{{ #helper.sanitizeString }}{{{ get.current.filtered.kicker }}}{{ /helper.sanitizeString }}\"{{ /get.current.fields.kicker[animate] }}\nstyle=\"{{ #style.collection }}text_decoration_inline_style fields.kicker{{ /style.collection }}\"\nclass=\"kicker {{ get.current.filtered.layout.positions.kicker }} {{ #style.collection }}text_decoration fields.kicker{{ /style.collection }}\">\n{{{ get.current.filtered.kicker }}}\n</div>","content/article/template/partials/subtitle":"<p itemprop=\"description\" \n    class=\"subtitle {{ #style.collection }}text_decoration fields.subtitle{{ /style.collection }}{{ #get.current.metadata.subtitleAboveImage }} subtitleAboveImage{{ /get.current.metadata.subtitleAboveImage }}\"\n    style=\"{{ #style.collection }}text_decoration_inline_style fields.subtitle{{ /style.collection }}\"\n    {{ #get.current.fields.kicker[animate] }}data-content=\"{{ #helper.sanitizeString }}{{{ get.current.filtered.kicker }}}{{ /helper.sanitizeString }}\"{{ /get.current.fields.kicker[animate] }}>\n    {{{ get.current.filtered.subtitle }}}\n</p>\n","content/article/template/partials/title":"<h2 itemprop=\"headline\" \n    class=\"headline {{ #style.collection }}text_decoration fields.title{{ /style.collection }}\"\n    style=\"{{ #style.collection }}text_decoration_inline_style fields.title{{ /style.collection }}\"\n    {{ #get.current.fields.title[animate] }}data-content=\"{{ #helper.sanitizeString }}{{{ get.current.filtered.title }}}{{ /helper.sanitizeString }}\"{{ /get.current.fields.title[animate] }}>{{{ get.current.filtered.title }}}\n</h2>","partial/elements/paywallLabel":"<div class=\"paywallLabel{{ #layout.noImage }} no-image{{ /layout.noImage }} {{ get.current.metadata.paywallLabelPosition }}{{ ^get.current.metadata.paywallLabelPosition }} {{ layout.float }}{{ /get.current.metadata.paywallLabelPosition }}\">{{ ^get.current.filtered.paywallLabel.hideLabelIcon }}{{ #icon.content }}<span class=\"{{ icon.content }}\"></span> {{/icon.content }}{{ /get.current.filtered.paywallLabel.hideLabelIcon }}{{ ^get.current.filtered.paywallLabel.hideLabelText }}{{ text.content }}{{ /get.current.filtered.paywallLabel.hideLabelText }}</div>\n","content/image/template/default":"<figure data-element-guid=\"{{ get.current.guid }}\" class=\"{{#helper.trim}}\n    {{ #style.collection }}box_decoration{{ /style.collection }}\n    {{ #get.current.filtered.hasFloat }}{{ #style.definition }}responsive_size fields.vpWidth{{ /style.definition }}{{ /get.current.filtered.hasFloat }}\n    {{ #style.definition }}imageBorder fields.border{{ /style.definition }}\n    {{ #style.definition }}imageAlign fields.float{{ /style.definition }}\n    {{ get.current.filtered.imageLoadingClass }}\n    {{/helper.trim}}\" {{ #get.current.filtered.hasFloat }}{{ ^get.current.fields.vpWidth }}style=\"width:{{ get.current.filtered.imageWidth }}px;\"{{ /get.current.fields.vpWidth }}{{ /get.current.filtered.hasFloat }}>\n    <div class=\"img{{ #get.current.filtered.allowFullwidth }} fullwidthTarget{{ /get.current.filtered.allowFullwidth }} {{ #style.collection }}content_decoration{{ /style.collection }}\">\n        {{ > content/image/template/partials/img }}\n        {{ > content/image/template/partials/shapes }}\n    </div>\n    {{ ^get.parent.filtered.layout.floating }} {{ #get.current.filtered.captionOptions.display }}\n    {{ > content/image/template/partials/caption }}\n    {{ /get.current.filtered.captionOptions.display }} {{ /get.parent.filtered.layout.floating }}\n</figure>\n","content/image/template/article":"<figure data-element-guid=\"{{ get.current.guid }}\" class=\"{{#helper.trim}}\n    {{ #style.collection }}box_decoration{{ /style.collection }}\n    {{ #get.current.filtered.hasFloat }}{{ #style.definition }}responsive_size fields.vpWidth{{ /style.definition }}{{ /get.current.filtered.hasFloat }}\n    {{ #style.definition }}imageBorder fields.border{{ /style.definition }}\n    {{ #style.definition }}imageAlign fields.float{{ /style.definition }}\n    {{ get.current.filtered.imageLoadingClass }}\n    {{/helper.trim}}\" {{ #get.current.filtered.hasFloat }}{{ ^get.current.fields.vpWidth }}style=\"width:{{ get.current.filtered.imageWidth }}px;\"{{ /get.current.fields.vpWidth }}{{ /get.current.filtered.hasFloat }}>\n    <div class=\"img fullwidthTarget\">\n        {{ > content/image/template/partials/img }}\n        {{ > content/image/template/partials/shapes }}\n    </div>\n    {{ #get.parent.metadata.image_overlay }}<div class=\"imageOverlay {{ get.parent.metadata.image_overlay }} {{ get.parent.metadata.image_overlay_opacity }}\"></div>{{ /get.parent.metadata.image_overlay }}\n    {{ > content/image/template/partials/child }}\n</figure>\n","content/image/template/partials/caption_links":"<div class=\"caption {{ #helper.trim }}\n    {{ #app.isEditor }}expanded{{ /app.isEditor }}\n    {{ #get.parent.fields.truncateCaption }}truncate{{ /get.parent.fields.truncateCaption }}\n    {{ ^get.parent.fields.truncateCaption }}\n        {{ #get.current.fields.truncateCaption }}truncate{{ /get.current.fields.truncateCaption }}\n    {{ /get.parent.fields.truncateCaption }}\n    {{ /helper.trim }}\" data-showmore=\"{{ #lang }}image.caption.showMoreLabel{{ /lang }}\"{{ #get.current.filtered.captionOptions.expandable }} data-expandable=\"true\" data-showcaption=\"{{ #lang }}image.caption.showCaptionLabel{{ /lang }}\" data-hidecaption=\"{{ #lang }}image.caption.hideCaptionLabel{{ /lang }}\"{{ /get.current.filtered.captionOptions.expandable }}>\n    <figcaption itemprop=\"caption\" class=\"{{ #style.collection }}text_decoration fields.imageCaption{{ /style.collection }}\">{{{ get.current.fields.imageCaption }}}</figcaption>\n    <figcaption itemprop=\"author\" class=\"{{ #style.collection }}text_decoration fields.byline{{ /style.collection }}\" data-byline-prefix=\"{{{ getConfig.image.imageBylinePrefix }}}\">{{{ get.current.fields.byline }}}</figcaption>\n</div>","content/image/template/partials/caption":"<div class=\"caption {{ #helper.trim }}\n    {{ #app.isEditor }}expanded{{ /app.isEditor }}\n    {{ #get.parent.fields.truncateCaption }}truncate{{ /get.parent.fields.truncateCaption }}\n    {{ ^get.parent.fields.truncateCaption }}\n        {{ #get.current.fields.truncateCaption }}truncate{{ /get.current.fields.truncateCaption }}\n    {{ /get.parent.fields.truncateCaption }}\n    {{ /helper.trim }}\" data-showmore=\"{{ #lang }}image.caption.showMoreLabel{{ /lang }}\"{{ #get.current.filtered.captionOptions.expandable }} data-expandable=\"true\" data-showcaption=\"{{ #lang }}image.caption.showCaptionLabel{{ /lang }}\" data-hidecaption=\"{{ #lang }}image.caption.hideCaptionLabel{{ /lang }}\"{{ /get.current.filtered.captionOptions.expandable }}>\n    <figcaption itemprop=\"caption\" class=\"{{ #style.collection }}text_decoration fields.imageCaption{{ /style.collection }}\">{{ #get.parent.fields.globalCaption }}{{{ get.parent.fields.globalCaption }}}{{ /get.parent.fields.globalCaption }}{{ ^get.parent.fields.globalCaption }}{{{ get.current.fields.imageCaption }}}{{ /get.parent.fields.globalCaption }}</figcaption>\n    <figcaption itemprop=\"author\" class=\"{{ #style.collection }}text_decoration fields.byline{{ /style.collection }}\" data-byline-prefix=\"{{{ getConfig.image.imageBylinePrefix }}}\">{{{ get.current.fields.byline }}}</figcaption>\n</div>","content/image/template/partials/img":"<picture>\n    {{ #get.current.filtered.viewport_list.desktop.formats }}\n    <source srcset=\"{{{ get.current.filtered.viewport_list.desktop.url }}}&format={{ format }}\" \n        width=\"{{{ get.current.filtered.viewport_list.desktop.width }}}\"\n        height=\"{{{ get.current.filtered.viewport_list.desktop.height }}}\"\n        media=\"(min-width: 768px)\"\n        type=\"{{{ type }}}\">    \n    {{ /get.current.filtered.viewport_list.desktop.formats }}\n    {{ #get.current.filtered.viewport_list.mobile.formats }}\n    <source srcset=\"{{{ get.current.filtered.viewport_list.mobile.url }}}&format={{ format }}\" \n        width=\"{{{ get.current.filtered.viewport_list.mobile.width }}}\"\n        height=\"{{{ get.current.filtered.viewport_list.mobile.height }}}\"\n        media=\"(max-width: 767px)\"\n        type=\"{{{ type }}}\">    \n    {{ /get.current.filtered.viewport_list.mobile.formats }}\n    <img src=\"{{{ get.current.filtered.viewport_list.mobile.url }}}&format=jpg\"\n        width=\"{{{ get.current.filtered.viewport_list.mobile.width }}}\"\n        height=\"{{{ get.current.filtered.viewport_list.mobile.height }}}\"\n        title=\"{{ #helper.sanitizeString }}\n        {{ #getConfig.image.showBylineAsTitle }}{{{ get.current.fields.byline }}}{{ /getConfig.image.showBylineAsTitle }}\n        {{ ^getConfig.image.showBylineAsTitle }}{{{ get.current.filtered.captionOptions.title }}}{{ /getConfig.image.showBylineAsTitle }}\n        {{ /helper.sanitizeString }}\"\n        alt=\"{{ #helper.sanitizeString }}{{ #get.current.fields.altText }}{{{ get.current.fields.altText }}}{{ /get.current.fields.altText }}{{ /helper.sanitizeString }}\" \n        {{ #get.current.filtered.lazyloadImages }}loading=\"lazy\"{{ /get.current.filtered.lazyloadImages }}\n        {{ #app.isEditor }}\n        class=\"{{ #helper.getEditorLoadingClass }}{{ /helper.getEditorLoadingClass }}\"\n        style=\"{{ #helper.getEditorLoadingStyle }}{{ /helper.getEditorLoadingStyle }} {{{ get.current.filtered.filters }}}\"    \n        {{ /app.isEditor }}\n        {{ ^app.isEditor }}\n        style=\"{{{ get.current.filtered.filters }}}\"    \n        {{ /app.isEditor }}>\n</picture>","content/image/template/partials/child":"{{ #get.current.metadata.subimage }}\n    {{ #app.isEditor }}\n    <div class=\"imageChildren {{ #style.collection }}subimage{{ /style.collection }}\">{{{ children.all }}}</div>\n    {{ /app.isEditor }}\n    {{ #app.isFront }}{{ #children.all[0] }}\n    <div class=\"imageChildren {{ #style.collection }}subimage{{ /style.collection }}\">{{{ children.all }}}</div>\n    {{ /children.all[0] }}{{ /app.isFront }}\n{{ /get.current.metadata.subimage }}\n","content/image/template/grid":"<figure data-element-guid=\"{{ get.current.guid }}\"{{ #get.current.metadata.zoomable }} data-zoomable=\"1\"{{ /get.current.metadata.zoomable }} class=\"{{#helper.trim}}\n    column\n    {{ #style.collection }}box_decoration{{ /style.collection }}\n    {{ #style.collection }}box_fullWidth{{ /style.collection }}\n    {{ size.grid.css }}\n    {{ size.grid.absCss }}\n    {{ get.current.filtered.borderClass }}\n    {{ get.current.filtered.imageLoadingClass }}\n    {{/helper.trim}}\">\n    {{{ get.current.filtered.styleSheets }}}\n    <div class=\"content {{ #style.collection }}content_decoration{{ /style.collection }}\" style=\"{{ #style.collection }}content_inline_style{{ /style.collection }}\">\n        {{^get.current.instance_of}}\n                {{ > content/image/template/placeholder }}\n        {{/get.current.instance_of}}\n        {{#get.current.instance_of}}\n\n        <div class=\"img fullwidthTarget\">\n            {{ > content/image/template/partials/img }}\n            {{ > content/image/template/partials/shapes }}\n        </div>\n        {{ #get.current.filtered.captionOptions.displayDefault }}\n        {{ > content/image/template/partials/caption_links }}\n        {{ /get.current.filtered.captionOptions.displayDefault }}\n        {{/get.current.instance_of}}\n    </div>\n</figure>\n","content/notice/template/default":"<div class=\"notice column\n  {{ #style.collection }}box_decoration{{ /style.collection }}\" id=\"notice-{{ get.current.id }}\" data-tags=\"{{{ get.current.tags }}}\">\n    <div class=\"content {{ #style.collection }}content_decoration{{ /style.collection }}\" title=\"{{{ get.current.fields.title }}}\">\n        <h2><a href=\"/notice/{{ get.current.id }}\">{{{ get.current.fields.title }}}</a></h2>\n        <div class=\"meta\">\n            <time class=\"fi-clock\" datetime=\"{{ get.current.filtered.isoDate }}\" title=\"{{ get.current.filtered.publishedDate }}\">{{ get.current.filtered.niceDate }}</time>\n            {{ #get.current.fields.userName }}<span class=\"author fi-torsos\">{{{ get.current.fields.userName }}}</span>{{ /get.current.fields.userName }}\n            {{ #get.current.fields.pinned }}{{ ^get.parent.metadata.hidePinIcon }} <span class=\"pinned fi-marker\"> {{ #lang }}notice.pinnedLabel{{ /lang }}</span>{{ /get.parent.metadata.hidePinIcon }}{{ /get.current.fields.pinned }}\n        </div>\n        <div class=\"text bodytext\">{{{ get.current.filtered.bodytext }}}</div>\n    </div>\n</div>","content/adnuntiusAd/template/default":"{{ ^get.current.filtered.hideOnTablet }}\n\n<div class=\"{{ #helper.trim }}\n    column\n    adnuntius-ad\n    {{ get.current.fields.css }}\n    {{ ^get.current.metadata.isBodytext }}\n    {{ size.grid.css }}\n    {{ /get.current.metadata.isBodytext }}\n    {{ get.current.metadata.css }}\n    {{ #get.current.filtered.isDebug }}adnuntius-ad-debug{{ /get.current.filtered.isDebug }}\n    {{ /helper.trim }}\" {{ #get.current.filtered.isDebug }}data-ad-format=\"{{{ get.current.fields.format }}}\" data-ad-size=\"{{ get.current.filtered.adData.width }}x{{ get.current.filtered.adData.height }}\"{{ /get.current.filtered.isDebug }}style=\"{{get.current.filtered.spacingTop}}{{ #get.current.metadata.style }} {{{ get.current.metadata.style }}}{{ /get.current.metadata.style }}\" data-element-guid=\"{{ get.current.guid }}\">\n    {{ #app.isEditor }}\n    <div class=\"ad-editor-preview adnuntius-ad-content\" style=\"width:{{ get.current.filtered.adData.width }}px; height:{{ get.current.filtered.adData.height }}px;\" title=\"{{ get.current.fields.format }}\">\n        <h4>Adnuntius-ad</h4>\n        Format: <strong>{{ get.current.fields.format }}</strong><br>\n        size: <strong>{{ get.current.filtered.adData.width }}x{{ get.current.filtered.adData.height }}</strong>\n    </div>\n    {{ /app.isEditor }}\n    {{ ^app.isEditor }}\n    <div id=\"adn-{{{ get.current.filtered.adData.auId }}}\" {{ #get.current.metadata.defaultHeight }}style=\"display:block;height:{{get.current.metadata.defaultHeight}}px;\"{{ /get.current.metadata.defaultHeight }}{{ ^get.current.metadata.defaultHeight }}style=\"display:none;\"{{ /get.current.metadata.defaultHeight }} class=\"adnuntius-ad-content\">\n        <span class=\"ad-label\">{{ get.current.filtered.label }}</span>\n    </div>\n    {{ /app.isEditor }}\n</div>\n\n{{ /get.current.filtered.hideOnTablet }}\n","content/googleAd/template/default":"{{ ^get.current.filtered.hideOnTablet }}\n<div data-element-guid=\"{{ get.current.guid }}\" class=\"{{ #helper.trim }}\n    column\n    google-ad\n    {{ #style.collection }}box_decoration{{ /style.collection }}\n    {{ ^get.current.metadata.isBodytext }}\n    {{ size.grid.css }}\n    {{ size.grid.absCss }}\n    {{ /get.current.metadata.isBodytext }}\n    {{ get.current.fields.css }}\n    {{ get.current.metadata.css }}\n    {{ #get.current.filtered.isDebug }}adnuntius-ad-debug{{ /get.current.filtered.isDebug }}\n    {{ /helper.trim }}\" {{ #get.current.filtered.isDebug }}data-ad-format=\"{{{ get.current.fields.format }}}\"{{ /get.current.filtered.isDebug }} style=\"{{get.current.filtered.spacingTop}}{{ #get.current.metadata.style }} {{{ get.current.metadata.style }}}{{ /get.current.metadata.style }}\">\n\n    {{ #app.isEditor }}\n    <div class=\"ad-editor-preview\" title=\"{{ get.current.fields.format }}\">\n        <h4>Google-ad</h4>\n        Format: <strong>{{ get.current.fields.format }}</strong>\n    </div>\n    {{ /app.isEditor }}\n    {{ ^app.isEditor }}\n    {{ #get.current.filtered.googleAds.bidding.enabled }}\n        {{ #get.current.filtered.googleAds.bidding.provider.name }}\n            <span class=\"ad-label\">{{ get.current.filtered.label }}</span>\n            {{ #render.template }}content/googleAd/template/{{ get.current.filtered.googleAds.bidding.provider.name}}{{ /render.template }}\n        {{ /get.current.filtered.googleAds.bidding.provider.name }}\n    {{ /get.current.filtered.googleAds.bidding.enabled }}\n    {{ ^get.current.filtered.googleAds.bidding.enabled }}\n        <span class=\"ad-label\">{{ get.current.filtered.label }}</span>\n        <div class=\"adunit\" id=\"{{{ get.current.filtered.adData.code }}}\" {{ #get.current.metadata.defaultHeight }}style=\"min-height:{{ get.current.metadata.defaultHeight }}px;\"{{ /get.current.metadata.defaultHeight }}></div>\n        <script>\n            googletag.cmd.push(function() {\n                googletag.display('{{{ get.current.filtered.adData.code }}}');\n            });\n        </script>\n    {{ /get.current.filtered.googleAds.bidding.enabled }}\n    {{ /app.isEditor }}\n</div>\n{{ /get.current.filtered.hideOnTablet }}"};


/***/ }),

/***/ "./lib/editor/color-thief.mjs":
/*!************************************!*\
  !*** ./lib/editor/color-thief.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ o)
/* harmony export */ });
if(!t)var t={map:function(t,r){var n={};return r?t.map(function(t,o){return n.index=o,r.call(n,t)}):t.slice()},naturalOrder:function(t,r){return t<r?-1:t>r?1:0},sum:function(t,r){var n={};return t.reduce(r?function(t,o,e){return n.index=e,t+r.call(n,o)}:function(t,r){return t+r},0)},max:function(r,n){return Math.max.apply(null,n?t.map(r,n):r)}};var r=function(){var r=5,n=8-r,o=1e3;function e(t,n,o){return(t<<2*r)+(n<<r)+o}function u(t){var r=[],n=!1;function o(){r.sort(t),n=!0}return{push:function(t){r.push(t),n=!1},peek:function(t){return n||o(),void 0===t&&(t=r.length-1),r[t]},pop:function(){return n||o(),r.pop()},size:function(){return r.length},map:function(t){return r.map(t)},debug:function(){return n||o(),r}}}function a(t,r,n,o,e,u,a){var i=this;i.r1=t,i.r2=r,i.g1=n,i.g2=o,i.b1=e,i.b2=u,i.histo=a}function i(){this.vboxes=new u(function(r,n){return t.naturalOrder(r.vbox.count()*r.vbox.volume(),n.vbox.count()*n.vbox.volume())})}function c(r,n){if(n.count()){var o=n.r2-n.r1+1,u=n.g2-n.g1+1,a=t.max([o,u,n.b2-n.b1+1]);if(1==n.count())return[n.copy()];var i,c,f,s,h=0,v=[],l=[];if(a==o)for(i=n.r1;i<=n.r2;i++){for(s=0,c=n.g1;c<=n.g2;c++)for(f=n.b1;f<=n.b2;f++)s+=r[e(i,c,f)]||0;v[i]=h+=s}else if(a==u)for(i=n.g1;i<=n.g2;i++){for(s=0,c=n.r1;c<=n.r2;c++)for(f=n.b1;f<=n.b2;f++)s+=r[e(c,i,f)]||0;v[i]=h+=s}else for(i=n.b1;i<=n.b2;i++){for(s=0,c=n.r1;c<=n.r2;c++)for(f=n.g1;f<=n.g2;f++)s+=r[e(c,f,i)]||0;v[i]=h+=s}return v.forEach(function(t,r){l[r]=h-t}),function(t){var r,o,e,u,a,c=t+"1",f=t+"2",s=0;for(i=n[c];i<=n[f];i++)if(v[i]>h/2){for(e=n.copy(),u=n.copy(),a=(r=i-n[c])<=(o=n[f]-i)?Math.min(n[f]-1,~~(i+o/2)):Math.max(n[c],~~(i-1-r/2));!v[a];)a++;for(s=l[a];!s&&v[a-1];)s=l[--a];return e[f]=a,u[c]=e[f]+1,[e,u]}}(a==o?"r":a==u?"g":"b")}}return a.prototype={volume:function(t){var r=this;return r._volume&&!t||(r._volume=(r.r2-r.r1+1)*(r.g2-r.g1+1)*(r.b2-r.b1+1)),r._volume},count:function(t){var r=this,n=r.histo;if(!r._count_set||t){var o,u,a,i=0;for(o=r.r1;o<=r.r2;o++)for(u=r.g1;u<=r.g2;u++)for(a=r.b1;a<=r.b2;a++)i+=n[e(o,u,a)]||0;r._count=i,r._count_set=!0}return r._count},copy:function(){var t=this;return new a(t.r1,t.r2,t.g1,t.g2,t.b1,t.b2,t.histo)},avg:function(t){var n=this,o=n.histo;if(!n._avg||t){var u,a,i,c,f=0,s=1<<8-r,h=0,v=0,l=0;for(a=n.r1;a<=n.r2;a++)for(i=n.g1;i<=n.g2;i++)for(c=n.b1;c<=n.b2;c++)f+=u=o[e(a,i,c)]||0,h+=u*(a+.5)*s,v+=u*(i+.5)*s,l+=u*(c+.5)*s;n._avg=f?[~~(h/f),~~(v/f),~~(l/f)]:[~~(s*(n.r1+n.r2+1)/2),~~(s*(n.g1+n.g2+1)/2),~~(s*(n.b1+n.b2+1)/2)]}return n._avg},contains:function(t){var r=this,o=t[0]>>n;return gval=t[1]>>n,bval=t[2]>>n,o>=r.r1&&o<=r.r2&&gval>=r.g1&&gval<=r.g2&&bval>=r.b1&&bval<=r.b2}},i.prototype={push:function(t){this.vboxes.push({vbox:t,color:t.avg()})},palette:function(){return this.vboxes.map(function(t){return t.color})},size:function(){return this.vboxes.size()},map:function(t){for(var r=this.vboxes,n=0;n<r.size();n++)if(r.peek(n).vbox.contains(t))return r.peek(n).color;return this.nearest(t)},nearest:function(t){for(var r,n,o,e=this.vboxes,u=0;u<e.size();u++)((n=Math.sqrt(Math.pow(t[0]-e.peek(u).color[0],2)+Math.pow(t[1]-e.peek(u).color[1],2)+Math.pow(t[2]-e.peek(u).color[2],2)))<r||void 0===r)&&(r=n,o=e.peek(u).color);return o},forcebw:function(){var r=this.vboxes;r.sort(function(r,n){return t.naturalOrder(t.sum(r.color),t.sum(n.color))});var n=r[0].color;n[0]<5&&n[1]<5&&n[2]<5&&(r[0].color=[0,0,0]);var o=r.length-1,e=r[o].color;e[0]>251&&e[1]>251&&e[2]>251&&(r[o].color=[255,255,255])}},{quantize:function(f,s){if(!f.length||s<2||s>256)return!1;var h=function(t){var o,u=new Array(1<<3*r);return t.forEach(function(t){o=e(t[0]>>n,t[1]>>n,t[2]>>n),u[o]=(u[o]||0)+1}),u}(f);h.forEach(function(){});var v=function(t,r){var o,e,u,i=1e6,c=0,f=1e6,s=0,h=1e6,v=0;return t.forEach(function(t){(o=t[0]>>n)<i?i=o:o>c&&(c=o),(e=t[1]>>n)<f?f=e:e>s&&(s=e),(u=t[2]>>n)<h?h=u:u>v&&(v=u)}),new a(i,c,f,s,h,v,r)}(f,h),l=new u(function(r,n){return t.naturalOrder(r.count(),n.count())});function g(t,r){for(var n,e=t.size(),u=0;u<o;){if(e>=r)return;if(u++>o)return;if((n=t.pop()).count()){var a=c(h,n),i=a[0],f=a[1];if(!i)return;t.push(i),f&&(t.push(f),e++)}else t.push(n),u++}}l.push(v),g(l,.75*s);for(var p=new u(function(r,n){return t.naturalOrder(r.count()*r.volume(),n.count()*n.volume())});l.size();)p.push(l.pop());g(p,s);for(var b=new i;p.size();)b.push(p.pop());return b}}}().quantize,n=function(t){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.width=this.canvas.width=t.naturalWidth,this.height=this.canvas.height=t.naturalHeight,this.context.drawImage(t,0,0,this.width,this.height)};n.prototype.getImageData=function(){return this.context.getImageData(0,0,this.width,this.height)};var o=function(){};o.prototype.getColor=function(t,r){return void 0===r&&(r=10),this.getPalette(t,5,r)[0]},o.prototype.getPalette=function(t,o,e){var u=function(t){var r=t.colorCount,n=t.quality;if(void 0!==r&&Number.isInteger(r)){if(1===r)throw new Error("colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()");r=Math.max(r,2),r=Math.min(r,20)}else r=10;return(void 0===n||!Number.isInteger(n)||n<1)&&(n=10),{colorCount:r,quality:n}}({colorCount:o,quality:e}),a=new n(t),i=function(t,r,n){for(var o,e,u,a,i,c=t,f=[],s=0;s<r;s+=n)e=c[0+(o=4*s)],u=c[o+1],a=c[o+2],(void 0===(i=c[o+3])||i>=125)&&(e>250&&u>250&&a>250||f.push([e,u,a]));return f}(a.getImageData().data,a.width*a.height,u.quality),c=r(i,u.colorCount);return c?c.palette():null},o.prototype.getColorFromUrl=function(t,r,n){var o=this,e=document.createElement("img");e.addEventListener("load",function(){var u=o.getPalette(e,5,n);r(u[0],t)}),e.src=t},o.prototype.getImageData=function(t,r){var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(){if(200==this.status){var t=new Uint8Array(this.response);i=t.length;for(var n=new Array(i),o=0;o<t.length;o++)n[o]=String.fromCharCode(t[o]);var e=n.join(""),u=window.btoa(e);r("data:image/png;base64,"+u)}},n.send()},o.prototype.getColorAsync=function(t,r,n){var o=this;this.getImageData(t,function(t){var e=document.createElement("img");e.addEventListener("load",function(){var t=o.getPalette(e,5,n);r(t[0],this)}),e.src=t})};


/***/ }),

/***/ "./modules/Editor.js":
/*!***************************!*\
  !*** ./modules/Editor.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Front_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Front.js */ "./modules/Front.js");
/* harmony import */ var _lib_editor_Namespace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/editor/Namespace.js */ "./modules/lib/editor/Namespace.js");
/* harmony import */ var _lib_helpers_StyleHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/helpers/StyleHelper.js */ "./modules/lib/helpers/StyleHelper.js");
/* harmony import */ var _lib_helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/helpers/ResourceHelper.js */ "./modules/lib/helpers/ResourceHelper.js");
/* harmony import */ var _lib_helpers_dynamic_EsiHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/helpers/dynamic/EsiHelper.js */ "./modules/lib/helpers/dynamic/EsiHelper.js");
/* harmony import */ var _lib_helpers_dynamic_DynamicDataHelper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/helpers/dynamic/DynamicDataHelper.js */ "./modules/lib/helpers/dynamic/DynamicDataHelper.js");







/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends _Front_js__WEBPACK_IMPORTED_MODULE_0__["default"] {

    onReady(api) {
        super.onReady(api);
        _lib_editor_Namespace_js__WEBPACK_IMPORTED_MODULE_1__.Namespace.expose();
        this.loadSiteStyles();
        this.imageUploadProcessor = null;
        this.registerImageUploads();
        this.dynamicData = null;
        this.wpm = this.api.v1.config.get('displayReadTime.wpm') || 250;
    }

    onAcceptContent() {
        this.addDefaultByline();

        const esiHelper = new _lib_helpers_dynamic_EsiHelper_js__WEBPACK_IMPORTED_MODULE_4__.EsiHelper(this.api);
        esiHelper.register(this.api.v1.model.query.getRootModel(), this.api.v1.site.getSite().alias);

        // Check if custom spacing is supported on this page
        const rootModel = this.api.v1.model.query.getRootModel();
        this.useSpacing = !!rootModel.get('fields.style_spacing');
        this.api.v1.model.bindings.bind(rootModel, 'fields.style_spacing', (model, path, value) => {
            this.useSpacing = !!value;
        });

        if (this.api.v1.model.getPageType() === 'article') {
            const bodytextModel = this.api.v1.model.query.getModelByType('bodytext');
            if (bodytextModel) {
                this.dynamicData = new _lib_helpers_dynamic_DynamicDataHelper_js__WEBPACK_IMPORTED_MODULE_5__.DynamicDataHelper(this.api);
                this.updateBodytextAds(bodytextModel);
                this.api.v1.model.bindings.bind(this.api.v1.model.query.getRootModel(), 'fields.bodytext', (model) => {
                    if (this.api.v1.model.canRedraw(bodytextModel)) {
                        this.updateBodytextAds(bodytextModel);
                    }
                    this.updateReadTime(bodytextModel);
                });
            }
        }
    }

    updateBodytextAds(model) {
        // Remove non-persistent elements from model
        const children = [...model.getChildren()];
        for (const child of children) {
            if (child.isNonPersistent()) {
                this.api.v1.model.delete(child, true, true);
            }
        }
        // Insert ads
        for (const view of this.api.v1.view.getViews(model)) {
            this.dynamicData.insert(view.getViewport(), 'bodytext[0]');
        }
    }

    updateReadTime(model) {
        const bodytext = this.api.v1.bodytext.getText(model);
        const readTime = this.api.v1.text.getReadTime(bodytext, this.wpm);
        model.set('fields.readTime', readTime);
    }

    loadSiteStyles() {
        const siteAlias = this.api.v1.properties.get('site.alias');
        const siteStylesheetList = _lib_helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_3__.ResourceHelper.getSiteStylesWithFallback(siteAlias);

        if (siteStylesheetList.length) {
            siteStylesheetList.forEach((path) => {
                this.api.v1.util.dom.addFile('css', path);
            });
        }

        // Add inline css to main window:
        const cssBuild = _lib_helpers_StyleHelper_js__WEBPACK_IMPORTED_MODULE_2__.StyleHelper.getInlineCSS(this.api);
        cssBuild.forEach((style) => {
            const styleEl = window.parent.document.createElement('style');
            styleEl.type = 'text/css';
            styleEl.appendChild(document.createTextNode(style.value));
            Sys.logger.debug(`ViewSupport: Insert inline css in main window for key: ${ style.key }`);
            window.parent.document.head.appendChild(styleEl);
        });
    }

    registerImageUploads() {
        const skipInfoPanel = this.api.v1.config.get('image.skipImageInfoAfterUpload');
        // Documentation: /support/docs/#js-api/v1/image/on.md
        this.api.v1.image.on('imagesUploaded', (items) => {
            if (!items.length) { return; }
            if (!skipInfoPanel) {
                if (!this.imageUploadProcessor) {
                    Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./lib/editor/ImageUploadProcessor.js */ "./modules/lib/editor/ImageUploadProcessor.js"))
                        .then((module) => {
                            this.imageUploadProcessor = new module.ImageUploadProcessor(this.api);
                            this.imageUploadProcessor.imagesUploaded(items);
                            this.api.v1.file.hideImageUpload();
                        }).catch((error) => {
                            Sys.logger.warn(error);
                        });
                    return;
                }
                this.imageUploadProcessor.imagesUploaded(items);
                this.api.v1.file.hideImageUpload();
            }
        });
    }

    addDefaultByline() {
        const rootModel = this.api.v1.model.query.getRootModel();

        // Only apply to article-pages:
        if (rootModel.getType() !== 'page_article') { return; }

        // Check if this is a prototype:
        if (rootModel.get('fields.subtype') === 'prototype') { return; }

        // Check if a byline already exist:
        if (this.api.v1.model.query.getModelByType('byline')) { return; }

        // Check if a default byline is set on user:
        const defaultBylineId = this.api.v1.user.getField('defaultByline');
        if (!defaultBylineId) { return; }

        // Only add byline if article is created by current user:
        if (this.api.v1.user.getUserId().toString() !== rootModel.get('fields.created_by')) { return; }

        // Only add byline if article is new:
        const maxAge = 60; // One minute
        if ((parseInt(rootModel.get('fields.created'), 10)) + maxAge < (new Date().getTime() / 1000)) { return; }

        this.api.v1.util.httpClient.get(`/ajax/node/get-node?id=${ defaultBylineId }`).then((resp) => {
            if (!resp.data) {
                console.log(`[addDefaultByline] No byline found for id ${ defaultBylineId }.`);
                return;
            }
            const children = [];
            if (resp.data.children && resp.data.children.length) {
                children.push({
                    type: 'image',
                    contentdata: {
                        type: 'image',
                        instance_of: resp.data.children[0].instance_of,
                        fields: resp.data.children[0].fields
                    }
                });
            }
            Sys.logger.debug(`Will insert user-byline`);
            this.api.v1.model.insert.atPath({
                path: 'page_article/articleHeader/articleMeta',
                data: {
                    type: 'byline',
                    contentdata: {
                        type: 'byline',
                        instance_of: resp.data.id,
                        fields: resp.data.fields
                    },
                    children
                }
            });

        }).catch((error) => {
            console.log('[addDefaultByline] Failed to fetch and insert default byline for user: ', error);
        });

    }

});


/***/ }),

/***/ "./modules/Front.js":
/*!**************************!*\
  !*** ./modules/Front.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_helpers_dynamic_DynamicDataHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/helpers/dynamic/DynamicDataHelper.js */ "./modules/lib/helpers/dynamic/DynamicDataHelper.js");
/* harmony import */ var _lib_helpers_FragmentHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/helpers/FragmentHelper.js */ "./modules/lib/helpers/FragmentHelper.js");
/* harmony import */ var _lib_helpers_PageExport_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/helpers/PageExport.js */ "./modules/lib/helpers/PageExport.js");
/* harmony import */ var _lib_helpers_dynamic_EsiHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/helpers/dynamic/EsiHelper.js */ "./modules/lib/helpers/dynamic/EsiHelper.js");
/* harmony import */ var _lib_helpers_Spacing_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/helpers/Spacing.js */ "./modules/lib/helpers/Spacing.js");






/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor() {
        this.name = 'Baseview';
        this.api = null;
        this.pageAPI = null;
        this.useSpacing = false;
    }

    onReady(api) {
        this.api = api;

        Sys.logger.debug(`[Front] Running Baseview version ${ this.api.v1.config.get('view_version') }, build ${ this.api.v1.config.get('view_build.baseview.version') }`);

        // Display JSON Viewport data.
        // Return an array with a serialized version of the root-model in a format equal to backend API-format
        if (this.api.v1.viewport.getName() === 'json') {
            if (this.api.v1.config.get('viewports.json.renderer') === 'PageExport.jsonData') {
                const pageExporter = new _lib_helpers_PageExport_js__WEBPACK_IMPORTED_MODULE_2__.PageExport(this.api);
                this.api.v1.view.on('rendered', (markups, viewport) => [JSON.stringify(pageExporter.jsonData(this.api.v1.model.query.getRootModel()), null, 4)]);
            }
        }

        // Display oEmbed of article. https://oembed.com
        if (this.api.v1.viewport.getName() === 'oembed') {
            if (this.api.v1.config.get('viewports.oembed.renderer') === 'PageExport.oembed') {
                const pageExporter = new _lib_helpers_PageExport_js__WEBPACK_IMPORTED_MODULE_2__.PageExport(this.api);
                this.api.v1.view.on('rendered', (markups, viewport) => [JSON.stringify(pageExporter.oembed(this.api.v1.model.query.getRootModel()), null, 4)]);
            }
        }

        const fragmentHelper = new _lib_helpers_FragmentHelper_js__WEBPACK_IMPORTED_MODULE_1__.FragmentHelper(this.api, this.api.v1.util.request);
        fragmentHelper.listen();
    }

    onAcceptContent() {
        const rootModel = this.api.v1.model.query.getRootModel();

        // Check if custom spacing is supported on this page
        this.useSpacing = !!(rootModel && rootModel.get('fields.style_spacing'));

        if (this.api.v1.app.mode.getSimulatedMode() === 'editor') {
            Sys.logger.debug('[Front] Labrador is running in simulated editor-mode. Skipping DynamicDataHelper and EsiHelper.');
            return;
        }
        const dynamicData = new _lib_helpers_dynamic_DynamicDataHelper_js__WEBPACK_IMPORTED_MODULE_0__.DynamicDataHelper(this.api);
        const clientSidePlacements = dynamicData.insert(this.api.v1.viewport.getName());
        if (clientSidePlacements.length > 0 && !rootModel.get('fields.hideAds')) {
            // The head-template will use this data to render the placements client side using the script ClientAds.js.
            rootModel.setFiltered('clientSidePlacements', JSON.stringify(clientSidePlacements));
            rootModel.setFiltered('clientSideResources', JSON.stringify({
                configObject: {
                    viewConfig: {
                        config: {
                            customer: {
                                contentbox_settings: {
                                    adnuntiusAd: this.api.v1.config.get('contentbox_settings.adnuntiusAd') || {},
                                    googleAd: this.api.v1.config.get('contentbox_settings.googleAd') || {}
                                },
                                adEnvironment: this.api.v1.config.get('adEnvironment') || {}
                            }
                        }
                    }
                },
                site: this.api.v1.site.getSite(),
                device: this.api.v1.properties.get('device'),
                debug: this.api.v1.util.request.hasQueryParam('debug') || false
            }));
        }

        const esiHelper = new _lib_helpers_dynamic_EsiHelper_js__WEBPACK_IMPORTED_MODULE_3__.EsiHelper(this.api);
        esiHelper.register(rootModel, this.api.v1.site.getSite().alias);

        // Allow url param lab_opts to hide header and footer
        // Note: This method is also defined in Editor.js, so the method is never run in the editor.
        if (this.api.v1.util.request.hasQueryValue('lab_opts', 'hideHeader')) {
            Sys.logger.debug('[Front] Hiding header and logo based on url param lab_opts=hideHeader ...');
            rootModel.setFiltered('pageHeaderDisplay', 'hideHeaderAndLogo');
        }
        if (this.api.v1.util.request.hasQueryValue('lab_opts', 'hideFooter')) {
            Sys.logger.debug('[Front] Hiding footer based on url param lab_opts=hideFooter ...');
            rootModel.setFiltered('pageFooterDisplay', 'hideFooter');
        }
        if (this.api.v1.util.request.hasQueryValue('lab_opts', 'hideComments')) {
            Sys.logger.debug('[Front] Hiding Hyvor comments based on url param lab_opts=hideComments ...');
            rootModel.setFiltered('pageCommentsDisplay', 'hideComments');
        }
    }

    onRender(model, view) {
        if (this.useSpacing) {
            model.setFiltered('styleSheets', _lib_helpers_Spacing_js__WEBPACK_IMPORTED_MODULE_4__.Spacing.createStyle({
                model,
                view,
                viewports: ['desktop', 'mobile'],
                returnArray: false
            }));
        }
    }

    onMapData(data) {
        // Map text_title and text_subtitle to text_singleline
        if (data.type === 'text_title' || data.type === 'text_subtitle') {
            if (!data.contentdata || !data.contentdata.fields) {
                return undefined;
            }
            const modifiedData = { ...data };
            modifiedData.type = 'text_singleline';
            modifiedData.contentdata.fields.text = modifiedData.contentdata.fields.title || modifiedData.contentdata.fields.subtitle;
            if (data.type === 'text_subtitle') {
                modifiedData.contentdata.fields.elementType = { value: 'h3' };
                delete modifiedData.contentdata.fields.subtitle;
            } else {
                modifiedData.contentdata.fields.elementType = { value: 'h2' };
                lab_api.v1.util.object.set('attributes.text_size.vp.desktop', lab_api.v1.util.object.get('attributes.text_size.vp.desktop', modifiedData.contentdata.fields.text) || 44, modifiedData.contentdata.fields.text);
                delete modifiedData.contentdata.fields.title;
            }
            modifiedData.lab_internal_format = true;
            return modifiedData;
        }
        return undefined;
    }

});


/***/ }),

/***/ "./modules/apps/BylineEditor.js":
/*!**************************************!*\
  !*** ./modules/apps/BylineEditor.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BylineEditor": () => (/* binding */ BylineEditor)
/* harmony export */ });
// this.api.v1.apps.start('BylineEditor', { id: 100652 })

class BylineEditor {

    constructor(api, { id = null, endcallback = null } = {}) {
        this.api = api;
        this.data = {
            id: null,
            fields: {},
            children: []
        };
        this.isDefault = id && id === parseInt(lab_api.v1.user.getField('defaultByline'), 10);
        this.endcallback = endcallback || null;
        this.registered = false;
        this.modal = null;
        if (id && typeof id === 'number') {
            fetch(`/ajax/node/get-node?id=${ id }`).then((resp) => resp.json()).then((resp) => {
                this.data = resp.data;
                if (!this.data.children) {
                    this.data.children = [];
                }
                this.display();
            }).catch((error) => {
                console.log('error fetching byline: ', error);
            });
        } else {
            this.display();
        }
    }

    display() {
        this.modal = this.api.v1.ui.modal.dialog({
            defaultButtons: false,
            container: {
                width: 900
            },
            content: {
                header: 'Byline editor',
                markup: this.getMarkup(this.data)
            },
            aside: {
                position: 'left',
                expandable: false,
                header: 'Image',
                content: this.getAsideMarkup(this.data),
                noPadding: true,
                width: 270
            },
            callbacks: {
                didDisplay: (modal) => {
                    if (!this.registered) {
                        this.registerEvents(modal.getMarkup());
                        this.registered = true;
                    }
                },
                submit: (formElements) => {
                    this.save(formElements);
                }
            },
            eventHandlers: [{
                selector: '#byline-cancel',
                event: 'click',
                callback: (theModal, event) => {
                    theModal.close();
                }
            }],
            keyValidation: [{
                key: 'firstname',
                validator: 'notEmpty'
            }, {
                key: 'lastname',
                validator: 'notEmpty'
            }, {
                key: 'email',
                validator: 'lab_api.v1.util.valueTransformer.isEmailOrEmpty'
            }, {
                key: 'public_url',
                validator: 'lab_api.v1.util.valueTransformer.isUrlOrEmpty'
            }],
            footer: {
                buttons: [
                    {
                        value: 'Cancel',
                        highlight: false,
                        id: 'byline-cancel'
                    },
                    {
                        value: this.data.id ? 'Update byline' : 'Create byline',
                        type: 'submit',
                        highlight: true
                    }
                ]
            }
        });
    }

    registerEvents(markup) {
        const imgEl = markup.querySelector('.lab-aside-settings img');
        if (imgEl) {
            imgEl.addEventListener('click', (event) => {
                this.editImage(imgEl);
            }, false);
        }
        const changeImgBtn = markup.querySelector('#btn-change-image');
        if (changeImgBtn) {
            changeImgBtn.addEventListener('click', (event) => {
                this.changeImage(markup);
            }, false);
        }
        
        const removeImgBtn = markup.querySelector('#btn-remove-image');
        if (removeImgBtn) {
            removeImgBtn.addEventListener('click', (event) => {
                if (!this.data.id) {
                    this.deleteNewlyCreatedImage();
                } else {
                    this.deleteCurrentImage();
                }
            }, false);
        }
        const defaultBtn = markup.querySelector('#byline-default-byline');
        if (defaultBtn) {
            defaultBtn.addEventListener('change', (event) => {
                this.api.v1.user.setField('defaultByline', defaultBtn.checked ? this.data.id : '');
            }, false);
        }
    }

    changeImage(markup) {
        this.api.v1.collection.display({
            name: 'MediaImages',
            modal: true,
            skipCache: true,
            options: {
                clickHandler: (model, element) => {
                     // Add busy animation.
                     const emptyEl = markup.querySelector('.lab-aside-settings .bylineimage-empty');
                     if (emptyEl) {
                         emptyEl.classList.add('lab-busy');
                     }
                     const imgEl = markup.querySelector('.lab-aside-settings img');
                     if (imgEl) {
                         imgEl.parentElement.classList.add('lab-busy');
                     }
                     const serialized = this.api.v1.model.serialize.model(model);
                     this.setImageFromModel(model, serialized);
                }
            }
        });
    }

    async setImageFromModel(model, serialized) {
        this.validateImageModel(model).then((id) => {
            const newImage = {
                id: null,
                type: 'image',
                instance_of: id,
                apiResult: serialized.apiResult,
                fields: serialized.fields
            };

            if (this.data.id) {
                this.deleteCurrentImage(newImage);
            } else {
                this.data.children = [newImage];
                this.updateImage();
            }
        });
    }

    // If the image is external it will need to be downloaded by Labrador.
    validateImageModel(model) {
        return new Promise((resolve, reject) => {
            if (model.get('instance_of')) {
                resolve(model.get('instance_of'));
            } else {
                this.api.v1.app.create(model).then((m) => {
                    resolve(model.get('instance_of'));
                }).catch((error) => {
                    reject(new Error('Cannot create instance_of-id.'));
                });
            }
        });
    }

    editImage(element) {
        import(/* webpackIgnore: true */ '/lib-js/modules/editor/Tools/image/Editor.js')
            .then((module) => {
                const offset = this.api.v1.viewport.getOffset();
                const image = this.data.children[0];
                const crop = image.fields;
                const editor = new module.Editor({
                    modal: false,
                    container: {
                        width: 300,
                        height: 200,
                        element: element.parentElement,
                        cssList: ['lab-modal-overlay']
                    },
                    offset: {
                        y: window.scrollY - offset.top
                    },
                    imageElement: {
                        element
                    },
                    crop,
                    tools: {
                        resize: {
                            active: false
                        }
                    },
                    imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ image.instance_of }`
                }, {
                    end: () => {
                        const serializedCrop = editor.end();
                        image.fields = { ...image.fields, ...serializedCrop };
                        element.setAttribute('src', this.getImageurl(image));
                        // this.saveByline();
                    }
                });

            });

    }

    save(formElements) {
        for (const key of Object.keys(formElements)) {
            this.data.fields[key] = formElements[key].trim();
        }
        if (this.data.id) {
            this.saveByline();
        } else {
            this.createByline();
        }
    }

    saveByline(newId) {
        const formData = new FormData();
        const payload = [{ type: 'byline', id: this.data.id, fields: this.data.fields }];
        if (this.data.children && this.data.children.length) {
            const image = this.data.children[0];
            payload.push({
                parent: this.data.id,
                type: 'image',
                id: image.id,
                instance_of: image.instance_of,
                fields: image.fields
            });
        }
        formData.append('json[id]', this.data.id);
        formData.append('json[type]', 'byline');
        formData.append('json[structure]', null);
        formData.append('json[node]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/save-node-and-data', { body: formData, method: 'POST' }).then((resp) => {
            if (this.endcallback) {
                this.endcallback(newId);
            }
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    deleteNewlyCreatedImage() {
        this.data.children = {};
        this.updateImage();
    }

    deleteCurrentImage(newImage) {
        if (!this.data.id) { return; }

        if (!this.data.children || !this.data.children.length || !this.data.children[0].id) {
            if (newImage) {
                this.setCurrentImage(newImage);
            }
            return;
        }

        const formData = new FormData();
        const image = this.data.children[0];
        const payload = [{
            parent: this.data.id,
            type: 'image',
            id: image.id,
            instance_of: image.instance_of
        }];
        formData.append('json[id]', this.data.id);
        formData.append('json[type]', 'byline');
        formData.append('json[structure]', null);
        formData.append('json[node]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/delete-node-and-data', { body: formData, method: 'POST' }).then((resp) => {
            this.data.children = [];
            if (newImage) {
                this.setCurrentImage(newImage);
            } else {
                this.updateImage();
            }
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    setCurrentImage(serialized, callback) {
        this.data.children = [{
            id: null,
            type: 'image',
            instance_of: serialized.instance_of,
            apiResult: serialized.apiResult,
            fields: serialized.fields
        }];
        const formData = new FormData();
        const image = this.data.children[0];
        const payload = [{
            parent: this.data.id,
            type: 'image',
            fields: image.fields,
            instance_of: image.instance_of,
            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02771'
        }];
        if (this.data.id) {
            formData.append('json[id]', this.data.id);
        }
        formData.append('json[nodeData]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {
            image.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].id;
            image.instance_of = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].instance_of;
            this.updateImage();
            if (callback) {
                callback();
            }
        }).catch((error) => {
            console.log('Error creating image: ', error);
        });
    }

    createByline() {
        const formData = new FormData();
        const payload = [{
            type: 'byline',
            fields: this.data.fields,
            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02772'
        }];
        formData.append('json[nodeData]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {
            this.data.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02772'].id;
            const image = this.data.children[0];
            if (image && !image.id) {
                this.setCurrentImage(image, () => {
                    this.saveByline(this.data.id);
                });
            } else {
                this.saveByline(this.data.id);
            }
        }).catch((error) => {
            console.log('Error creating byline: ', error);
        });
    }

    getMarkup(data) {
        return this.api.v1.util.dom.renderView('apps/bylineeditor/editor', {
            id: data.id,
            fields: data.fields || {},
            isDefault: this.isDefault
        }, false);
    }

    getAsideMarkup(data, toDom = false) {
        const child = data.children && data.children.length ? data.children[0] : null;
        return this.api.v1.util.dom.renderView('apps/bylineeditor/aside', child ? { url: this.getImageurl(child) } : {}, toDom);
    }

    updateImage() {
        const markup = this.modal.getMarkup();
        const aside = markup.querySelector('.lab-aside-settings');
        const newAside = this.getAsideMarkup(this.data, true);
        this.registerEvents(newAside);
        aside.parentNode.replaceChild(newAside, aside);
    }

    getImageurl(data, width = 412, height = 300) {
        if (!data) {
            Sys.logger.debug('[BylineEditor - getImageUrl] No image data provided.');
        }
        let imageUrl = `${ this.api.v1.properties.get('image_server') }/${ data.instance_of }.webp?imageId=${ data.instance_of }`;

        // Add crop parameters if they exist
        const fieldParameters = ['x', 'y', 'cropw', 'croph'];
        for (const field of fieldParameters) {
            if (data.fields[field]) {
                imageUrl += `&${ field }=${ data.fields[field] }`;
            }
        }

        imageUrl += `&width=${ width }&height=${ height }`;
        return imageUrl;
    }

}


/***/ }),

/***/ "./modules/apps/CustomElements.js":
/*!****************************************!*\
  !*** ./modules/apps/CustomElements.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomElements": () => (/* binding */ CustomElements)
/* harmony export */ });
class CustomElements {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true; // Sub-views may override and set to false to disable
        this.elementsConfig = {};
    }

    setElementsConfig(config) {
        this.elementsConfig.aside = config.aside || {};
        this.elementsConfig.paths = config.paths || {};
        this.elementsConfig.formgroups = config.formgroups || [];
    }

    onAside() {
        return this.elementsConfig.aside;
    }

    onPaths() {
        return this.elementsConfig.paths;
    }

    onMarkup() {
        const container = document.createElement('div');
        container.classList.add('lab-modal-form', 'lab-grid', 'lab-hidden');
        for (const element of this.elementsConfig.formgroups) {
            container.appendChild(lab_api.v1.util.dom.renderEditor('elements/form/formgroup', element, true));
        }
        // Input-elements are defined in config. Update value from data:
        for (const path of Object.keys(this.elementsConfig.paths)) {
            const pathInfo = this.elementsConfig.paths[path];
            const nodePath = pathInfo.node;
            const el = container.querySelector(`[name="${ nodePath }"]`);
            if (nodePath && el) {
                const value = this.rootModel.get(nodePath);
                if (pathInfo.boolean) {
                    if (value) {
                        el.checked = true;
                    }
                } else {
                    el.value = value;
                }
            }
        }
        return container;
    }

}


/***/ }),

/***/ "./modules/apps/FrontContentSupport.js":
/*!*********************************************!*\
  !*** ./modules/apps/FrontContentSupport.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FrontContentSupport": () => (/* binding */ FrontContentSupport)
/* harmony export */ });
/* harmony import */ var _public_common_labrador_source_FrontContentRenderer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/common/labrador/source/FrontContentRenderer.js */ "./public/common/labrador/source/FrontContentRenderer.js");


class FrontContentSupport {

    constructor(api, { confPath } = {}, menuItem = null) {
        if (!menuItem || !menuItem.getModel) {
            Sys.logger.warn('[FrontContentSupport] Missing required input "menuItem". Cannot run.');
            return;
        }
        this.api = api;

        // this.renderer = new FrontContentRenderer({
        //     api: lab_api,
        //     settings: {
        //         layout: {}
        //     }
        // });
        const model = menuItem.getModel();
        const sourcesConfig = model.get('filtered.sourcesConfig') || [];
        const configPath = confPath || 'contentbox_settings.frontContent';
        const config = lab_api.v1.config.get(configPath) || {};
        this.run(model, sourcesConfig, configPath, config);
    }

    run(model, sourcesConfig, configPath, config) {

        const tagsOptions = lab_api.v1.config.get(`${ configPath }.tagsOptions`) || { displayTagsString: true, displayTagsGroups: false };
        const sourceOptions = lab_api.v1.config.get('labclient') || {};
        const source = model.get('fields.source'); // identifier
        const organizer = model.get('fields.organizer');
        const postprocessor = model.get('fields.postprocessor');
        const layoutOptions = {
            columnCount: parseFloat(model.get('fields.layout_columnCount') || 3),
            rowCount: parseFloat(model.get('fields.layout_rowCount') || 10),
            maxRowSize: parseFloat(model.get('fields.layout_maxRowSize') || 3),
            minRowSize: parseFloat(model.get('fields.layout_minRowSize') || 1),
            imageAspectRatio: parseFloat(model.get('fields.layout_imageAspectRatio') || 0.45),
            gridsize: parseFloat(model.get('fields.layout_gridsize') || 12),
            articleCount: model.get('fields.articleCount') || 24,
            articleFetchCount: model.get('fields.articleFetchCount') || model.get('fields.articleCount')
        };
        const options = {
            sources: sourcesConfig,
            organizers: sourceOptions.organizers || [],
            postprocessors: sourceOptions.postprocessors || []
        };
        const settings = {
            sources: options.sources.map((item) => ({ name: item.name, value: item.identifier, selected: item.identifier === source })),
            organizers: options.organizers.map((item) => ({ name: item.name, value: item.type, selected: item.type === organizer })),
            postprocessors: options.postprocessors.map((item) => ({ name: item.name, value: item.type, selected: item.type === postprocessor })),
            displayOverrideUrlByTagsCookie: !!config.overrideUrlByTagsCookie
        };
        settings.sources.unshift({ name: 'No source selected' });
        settings.organizers.unshift({ name: 'No organizer selected' });
        settings.postprocessors.unshift({ name: 'No autolayout selected' });

        if (tagsOptions.displayTagsGroups) {
            tagsOptions.tagGroups = model.get('filtered.tagGroupsObject');
            tagsOptions.tagsGroupsDefaultVisible = model.get('filtered.tagsGroupsDefaultVisible');
            tagsOptions.hideHitsPerTag = model.get('filtered.hideHitsPerTag');
            tagsOptions.tagGroupInRows = model.get('filtered.tagGroupInRows');
        }

        const hide = {
            image: !!model.get('fields.hide_image'),
            title: !!model.get('fields.hide_title'),
            subtitle: !!model.get('fields.hide_subtitle'),
            kicker: !!model.get('fields.hide_kicker')
        };
        const templateData = {
            section: {
                source: {
                    options: settings.sources,
                    hide,
                    filterExisting: !!model.get('fields.filterExisting'),
                    displaySites: config.displaySites
                },
                organizer: {
                    options: settings.organizers
                },
                postprocessor: {
                    options: settings.postprocessors
                },
                layout: layoutOptions
            },
            cookie: {
                displayOverrideUrlByTagsCookie: config.overrideUrlByTagsCookie,
                options: model.get('filtered.cookieOptions')
            },
            tags: model.get('filtered.tagOptions'), // { allow: true, tags: ['tag1', 'tag2'], tags_string: 'tag1, tag2' },
            tagsOptions,
            typography: {
                size_active: !!model.get('fields.size_active'),
                size_title: model.get('fields.size_title') || 34,
                size_subtitle: model.get('fields.size_subtitle') || 16,
                size_kicker: model.get('fields.size_kicker') || 16,
                hide_title: hide.title,
                hide_subtitle: hide.subtitle,
                hide_kicker: hide.kicker,
                hide_image: hide.image,
                alignImage: model.get('fields.alignImage'),
                alignImage_left: model.get('fields.alignImage') === 'left',
                alignImage_none: !model.get('fields.alignImage'),
                alignImage_right: model.get('fields.alignImage') === 'right',
                imageWidth: model.get('fields.imageWidth') || 100
            }
        };

        const markup = this.api.v1.util.dom.renderView('content/frontContent/template/admin', templateData);
        const asideMarkup = this.api.v1.util.dom.renderView('content/frontContent/template/adminAside', {});

        const save = (theModel, element) => {
            theModel.set(
                element.getAttribute('name'),
                this.api.v1.util.dom.getFormElementValue(element) || false
            );
        };

        const placeholders = [];
        if (config.displaySites) {
            let siteId = model.get('fields.siteId');
            if (siteId) {
                siteId = parseInt(siteId, 10);
            }
            const siteSelector = lab_api.v1.ui.element.getSiteSelector({
                value: siteId || '',
                attributes: [
                    {
                        name: 'id',
                        value: 'ii5_1'
                    }
                ]
            });
            siteSelector.setAttribute('name', 'fields.siteId');
            placeholders.push({
                selector: '#frontContent-site',
                element: siteSelector
            });
        }

        const dialog = this.api.v1.ui.modal.dialog({
            container: {
                width: 860,
                nostyle: false
            },
            content: {
                header: `Settings - ${ model.getType() }`,
                markup
            },
            aside: {
                expandable: true,
                closed: false,
                position: 'left',
                header: 'Options',
                content: asideMarkup,
                noPadding: true,
                width: '215px'
            },
            footer: {
                buttons: [
                    {
                        type: 'submit',
                        highlight: true,
                        value: 'OK'
                    }
                ],
                informalText: '(<span style="color:red; font-weight: bold;">*</span>) indicates a required field'
            },
            eventHandlers: [{
                selector: '#cancelBtn',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }, {
                selector: 'input, select',
                event: 'change',
                callback: (modal, event) => {
                    // Store value immediately:
                    save(model, event.currentTarget);
                }
            }],
            placeholders,
            callbacks: {
                end: (theModal) => {
                    // model.redraw();
                },
                didDisplay: (theModal) => {
                    const valueElements = [
                        theModal.markup.querySelector('[name="fields.source"]'),
                        theModal.markup.querySelector('[name="fields.organizer"]'),
                        theModal.markup.querySelector('[name="fields.postprocessor"]')
                    ];
                    const optionsElements = theModal.markup.querySelectorAll(`[data-sources]`);
                    const updateOptionsVisibility = () => {
                        for (const optionsElement of optionsElements) {
                            optionsElement.classList.add('lab-hidden');
                        }
                        for (const element of valueElements) {
                            const sourceName = element.getAttribute('name');
                            for (const optionsElement of optionsElements) {
                                const sourceValue = optionsElement.getAttribute('data-sources');
                                const sourceTypes = sourcesConfig.filter((feed) => feed.type === sourceValue).map((feed) => feed.identifier);
                                if (element.value && (sourceValue.includes(element.value) || (sourceTypes.includes(element.value)))) {
                                    optionsElement.classList.remove('lab-hidden');
                                }
                                if (!element.value && sourceValue.includes(`no-${ sourceName }`)) {
                                    optionsElement.classList.remove('lab-hidden');
                                }
                            }
                        }
                    };
                    for (const element of valueElements) {
                        element.addEventListener('change', updateOptionsVisibility, false);
                    }
                    updateOptionsVisibility();

                    const enblList = {};
                    const triggerChanged = (path) => {
                        const elements = enblList[path];
                        if (!elements) {
                            return;
                        }
                        const isChecked = elements.trigger.checked;
                        for (const target of elements.targets) {
                            if (isChecked) {
                                target.removeAttribute('disabled');
                            } else {
                                target.setAttribute('disabled', '');
                            }
                        }
                    };

                    // const targetChanged = (key, value) => {
                    //     console.log('tagteChanged: ', key, value);
                    //     // setPreviewData([{ key, value }]);
                    // };

                    const enabledTriggerElements = theModal.markup.querySelectorAll('[data-enabled-trigger]');
                    for (const el of enabledTriggerElements) {
                        const path = el.getAttribute('data-enabled-trigger');
                        if (path) {
                            const targets = theModal.markup.querySelectorAll(`[data-enabled-path="${ path }"]`);
                            enblList[path] = {
                                trigger: el,
                                targets: [...targets]
                            };
                        }
                    }
                    for (const [path, elements] of Object.entries(enblList)) {
                        elements.trigger.addEventListener('change', (event) => {
                            triggerChanged(path);
                        }, false);
                        triggerChanged(path);

                        // for (const target of elements.targets) {
                        //     target.addEventListener('change', (event) => {
                        //         const styleField = target.getAttribute('data-style-field');
                        //         targetChanged(styleField, target.value);
                        //     }, false);
                        // }
                    }

                    // const previewTriggers = theModal.markup.querySelectorAll('[data-preview-check]');
                    // for (const el of previewTriggers) {
                    //     el.addEventListener('change', (event) => {
                    //         const styleField = event.target.getAttribute('data-preview-check');
                    //         targetChanged(styleField, event.target.checked);
                    //     }, false);
                    // }
                }
            }
        });

        // const previewStyle = 'font-family: Helvetica !important; margin: 0 0 0.5rem !important; padding: 0 !important';
        // const preview = {
        //     size: {
        //         title: templateData.typography.size_title,
        //         subtitle: templateData.typography.size_subtitle,
        //         kicker: templateData.typography.size_kicker,
        //         hide_title: templateData.typography.hide_title,
        //         hide_subtitle: templateData.typography.hide_subtitle,
        //         hide_kicker: templateData.typography.hide_kicker,
        //         hide_image: templateData.typography.hide_image,
        //         alignImage: templateData.typography.alignImage,
        //         imageAspectRatio: layoutOptions.imageAspectRatio,
        //         imagePreviewWidth: 100,
        //         imagePreviewHeight: 100 * layoutOptions.imageAspectRatio
        //     },
        //     container: dialog.markup.querySelector('#typography-preview'),
        //     engine: new window.LabClient({
        //         renderOptions: {
        //             selector: '#typography-preview',
        //             renderer: Mustache.render,
        //             createElements: true,
        //             documentContext: parent.document,
        //             contentReplacement: 'append'
        //         },
        //         resources: {
        //             templates: {
        //                 row: '<div class="lab-grid">{{{ children.all }}}</div>',
        //                 article: `
        //                     <article class="column {{ size.current.cssString }}">
        //                         <div class="content" style="box-shadow: 0 1px 12px -4px grey; padding: 0.8rem 1rem;">
        //                             {{ ^get.current.fields.hide_kicker }}<p class="kicker {{ #view.getStyle }}text_size fields.kicker{{ /view.getStyle }}" style="${ previewStyle }">{{{ get.current.fields.kicker }}}</p>{{ /get.current.fields.hide_kicker }}
        //                             {{ ^get.current.fields.hide_image }}<span style="float: right; background-color: #9d9d9d; width:{{ get.current.fields.imagePreviewWidth }}px; height:{{ get.current.fields.imagePreviewHeight }}px; color: #fff;font-size: 2em;text-align: center;padding-top: 0.5em;"></span>{{ /get.current.fields.hide_image }}
        //                             {{ ^get.current.fields.hide_title }}<h2 class="headline {{ #view.getStyle }}text_size fields.title{{ /view.getStyle }}" style="${ previewStyle }">{{{ get.current.fields.title }}}</h2>{{ /get.current.fields.hide_title }}
        //                             {{ ^get.current.fields.hide_subtitle }}<p class="subtitle {{ #view.getStyle }}text_size fields.subtitle{{ /view.getStyle }}" style="${ previewStyle }">{{{ get.current.fields.subtitle }}}</p>{{ /get.current.fields.hide_subtitle }}
        //                         </div>
        //                     </article>`
        //             }
        //         },
        //         config: {
        //             debug: true,
        //             grid: {
        //                 size: 12,
        //                 prefix: {
        //                     desktop: 'lab-grid-large-',
        //                     mobile: 'lab-grid-small-'
        //                 }
        //             },
        //             style: {
        //                 definitions: [
        //                     {
        //                         name: 'text_size',
        //                         requirePath: true,
        //                         sources: [
        //                             {
        //                                 paths: [
        //                                     {
        //                                         path: '_style_size',
        //                                         prefix: 't'
        //                                     }
        //                                 ],
        //                                 template: '{{ #items }}{{ prefix }}{{ value }} {{ /items }}'
        //                             }
        //                         ]
        //                     }
        //                 ]
        //             }
        //         }
        //     })
        // };

        // const setPreviewData = (items) => {
        //     let hasChange = false;
        //     for (const item of items) {
        //         if (preview.size[item.key] !== item.value) {
        //             preview.size[item.key] = item.value;
        //             if (item.key === 'imageAspectRatio') {
        //                 preview.size.imagePreviewHeight = 100 * item.value;
        //             }
        //             hasChange = true;
        //         }
        //     }
        //     if (hasChange) {
        //         runPreview();
        //     }
        // };

        // const runPreview = () => {
        //     const columns = 1;
        //     const width = 100 / columns;
        //     const article = {
        //         type: 'article',
        //         contentdata: {
        //             fields: {
        //                 title: 'Title preview ...',
        //                 subtitle: 'Subtitle preview ...',
        //                 kicker: 'Kicker preview ...',
        //                 title_style_size: preview.size.title,
        //                 subtitle_style_size: preview.size.subtitle,
        //                 kicker_style_size: preview.size.kicker,
        //                 hide_subtitle: preview.size.hide_subtitle,
        //                 hide_kicker: preview.size.hide_kicker,
        //                 hide_title: preview.size.hide_title,
        //                 hide_image: preview.size.hide_image,
        //                 alignImage: preview.size.alignImage,
        //                 imageWidth: preview.size.imageWidth,
        //                 imageAspectRatio: preview.size.imageAspectRatio,
        //                 imagePreviewWidth: preview.size.imagePreviewWidth,
        //                 imagePreviewHeight: preview.size.imagePreviewHeight
        //             }
        //         },
        //         width
        //     };
        //     const data = [{
        //         type: 'row',
        //         children: new Array(columns).fill(article)
        //     }];
        //     preview.container.innerHTML = '';
        //     preview.engine.setData(data);
        //     preview.engine.draw();
        // };

        // runPreview();
    }

}


/***/ }),

/***/ "./modules/apps/ImageColors.js":
/*!*************************************!*\
  !*** ./modules/apps/ImageColors.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageColors": () => (/* binding */ ImageColors)
/* harmony export */ });
/* harmony import */ var _lib_editor_color_thief_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/editor/color-thief.mjs */ "./lib/editor/color-thief.mjs");
/* harmony import */ var _lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/editor/ColorUtils.js */ "./modules/lib/editor/ColorUtils.js");



class ImageColors {

    constructor(api, options = {
        image: null,
        targetModel: null,
        path: null,
        pathDark: null,
        resetPath: null,
        callback: null
    }) {
        this.api = api;
        if (options.image && options.targetModel && options.path) {
            this.image = options.image;
            this.targetModel = options.targetModel;
            this.path = options.path;
            this.pathDark = options.pathDark;
            this.resetPath = options.resetPath;
            this.callback = options.callback;
            this.getColors();
        } else {
            Sys.logger.warn('ImageColors: Missing one or more required options (image, targetModel, path).');
        }
    }

    // Get colors via ColorThief:
    getColors() {
        const colorThief = new _lib_editor_color_thief_mjs__WEBPACK_IMPORTED_MODULE_0__["default"]();
        const img = new Image();
        img.crossOrigin = 'Anonymous';
        img.style = 'width: 100%; object-fit: contain; display: block;';
        this.api.v1.ui.modal.dialog({
            content: {
                markup: `<div class="imageColors">
                    <div class="imageColorsImage"></div>
                    <h5 class="lab-title">Click on a palette to set custom background color</h5>
                    <div class="imageColorsPalettes" style="display: flex; flex-wrap: nowrap; justify-content: space-between; height: 80px; background-color: #e6e6e6; padding: 15px; border-radius: 10px;"><div style="flex: 1; text-align: center; padding-top: 10px;">Loading palettes ...</div></div>
                </div>`
            },
            footer: {
                buttons: [{
                    value: 'Use color picker',
                    id: 'select_color_button',
                    highlight: false
                }, {
                    value: 'Remove custom color',
                    id: 'remove_color_button',
                    highlight: false
                }]
            },
            eventHandlers: [{
                selector: '#select_color_button',
                event: 'click',
                callback: (modal, event) => {
                    const eyeDropper = new window.EyeDropper();
                    eyeDropper.open().then((result) => {
                        this.setColor(_lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_1__.ColorUtils.hex2rgb(result.sRGBHex));
                    }).catch(() => {
                        // User cancelled by clicking Escape-key etc.
                    });
                }
            }, {
                selector: '#remove_color_button',
                event: 'click',
                callback: (modal, event) => {
                    this.resetColor();
                    modal.close();
                }
            }],
            callbacks: {
                didDisplay: (modal) => {
                    const container = modal.markup.querySelector('.imageColorsImage');
                    container.classList.add('lab-busy');
                    img.addEventListener('load', () => {
                        const mainColor = colorThief.getColor(img);
                        const palette = colorThief.getPalette(img, 8);
                        const palettesContainer = modal.markup.querySelector('.imageColorsPalettes');
                        palettesContainer.innerHTML = '';
                        for (const color of [mainColor, ...palette]) {
                            const div = document.createElement('div');
                            div.style.backgroundColor = `rgb(${ color[0] }, ${ color[1] }, ${ color[2] })`;
                            div.style.width = '50px';
                            div.style.cursor = 'pointer';
                            div.style.borderRadius = '6px';
                            div.style.border = '1px solid #000';
                            div.setAttribute('title', `rgb(${ color[0] }, ${ color[1] }, ${ color[2] })`);
                            palettesContainer.appendChild(div);
                            div.addEventListener('click', () => {
                                this.setColor(color);
                                modal.close();
                            });
                        }
                        container.classList.remove('lab-busy');
                    });
                    img.src = this.image.currentSrc || this.image.src;
                    const args = this.api.v1.util.request.parseQueryString(img.src);
                    if (args.width && args.height) {
                        const ratio = args.height / args.width;
                        container.style.minHeight = `${ container.clientWidth * ratio }px`;
                    }
                    container.appendChild(img);
                },
                submit: (formValues, theModal) => {
                    console.log('Submit:', formValues);
                }
            }
        });
    }

    setColor(rgbArray) {
        if (this.pathDark) {
            this.targetModel.set(this.pathDark, _lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_1__.ColorUtils.getBrightness(rgbArray) < 130 ? '1' : '');
        }
        this.targetModel.set(this.path, `rgb(${ rgbArray[0] }, ${ rgbArray[1] }, ${ rgbArray[2] })`);
        this.colorsUpdated();
    }

    resetColor() {
        if (this.pathDark) {
            this.targetModel.set(this.pathDark, '');
        }
        this.targetModel.set(this.path, '');
        this.colorsUpdated();
    }

    colorsUpdated() {
        if (this.resetPath) {
            const current = this.targetModel.get(this.resetPath);
            this.targetModel.set(this.resetPath, '');
            if (current) {
                for (const view of this.api.v1.view.getViews(this.targetModel)) {
                    view.getMarkup().classList.remove(current);
                }
            }
        }
        const value = this.targetModel.get(this.path);
        const isDark = this.pathDark ? !!this.targetModel.get(this.pathDark) : false;
        for (const view of this.api.v1.view.getViews(this.targetModel)) {
            const body = view.getMarkup();
            if (value) {
                body.style.backgroundColor = value;
                body.classList.add('custom-background-color', 'bg-baseview-custom');
                body.querySelector('main > article').classList.add('bg-baseview-custom');
            } else {
                body.style.backgroundColor = '';
                body.classList.remove('custom-background-color', 'bg-baseview-custom');
                body.querySelector('main > article').classList.remove('bg-baseview-custom');
            }
            if (isDark && value) {
                body.style.color = '#fff';
            } else {
                body.style.color = '';
            }
        }
        if (this.callback) {
            this.callback({
                color: value,
                isDark
            });
        }
    }

}


/***/ }),

/***/ "./modules/apps/ParallaxSupport.js":
/*!*****************************************!*\
  !*** ./modules/apps/ParallaxSupport.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParallaxSupport": () => (/* binding */ ParallaxSupport)
/* harmony export */ });
class ParallaxSupport {

    constructor(api, menuItem) {
        this.api = api;
        this.model = menuItem.getModel();
        this.view = menuItem.getView();
        this.data = {
            ...{
                brightness: {},
                sepia: {},
                blur: {},
                opacity: {},
                rotate: {},
                scale: {},
                horizontalAlign: {}
            },
            ...this.view.get('metadata.parallax') || {}
        };
        this.run();
    }

    run() {
        const preferAsideOpen = true;
        const templateData = this.getTemplateData();
        const eventHandlers = [];
        const updateLabel = (element, theModal) => {
            const id = element.getAttribute('id');
            const labelEl = theModal.markup.querySelector(`label[for="${ id }"]`);
            if (labelEl) {
                labelEl.setAttribute('data-lab-label-value', element.value);
            }
        };
        for (const item of templateData.ranges) {
            for (const key of Object.keys(item.ranges)) {
                eventHandlers.push({
                    selector: `[name="${ item.name }.${ key }"]`, // parallax.opacity.startValue
                    event: 'input',
                    callback: (theModal, event) => {
                        updateLabel(event.currentTarget, theModal);
                        const el = theModal.markup.querySelector(`[name="${ item.name }.active"]`);
                        if (el) {
                            const needSave = !el.checked;
                            if (needSave) {
                                el.checked = true;
                                this.save(el);
                            }
                        }
                    }
                });
            }
            eventHandlers.push({
                selector: `[name="${ item.name }.startScrollPosition"]`,
                event: 'change',
                callback: (theModal, event) => {
                    const minElement = event.currentTarget;
                    const maxElement = theModal.markup.querySelector(`[name="${ item.name }.endScrollPosition"]`);
                    if (parseInt(minElement.value, 10) > parseInt(maxElement.value, 10)) {
                        minElement.value = maxElement.value;
                        updateLabel(event.currentTarget, theModal);
                    }
                }
            });
            eventHandlers.push({
                selector: `[name="${ item.name }.endScrollPosition"]`,
                event: 'change',
                callback: (theModal, event) => {
                    const minElement = theModal.markup.querySelector(`[name="${ item.name }.startScrollPosition"]`);
                    const maxElement = event.currentTarget;
                    if (parseInt(maxElement.value, 10) < parseInt(minElement.value, 10)) {
                        maxElement.value = minElement.value;
                        updateLabel(event.currentTarget, theModal);
                    }
                }
            });

        }

        const markup = lab_api.v1.util.dom.renderView('content/parallax/template/parallaxSupport', templateData);
        const asideData = {
            content: [{
                title: 'General',
                items: [{
                    key: 'geometry',
                    label: 'Geometry',
                    css: 'lab-selected'
                }]
            }, {
                title: 'Transitions',
                items: [{
                    key: 'parallax.scale',
                    label: 'Scale'
                }, {
                    key: 'parallax.rotate',
                    label: 'Rotate'
                }, {
                    key: 'parallax.opacity',
                    label: 'Opacity'
                }
                ]
            }, {
                title: 'Filters',
                items: [{
                    key: 'parallax.blur',
                    label: 'Blur'
                }, {
                    key: 'parallax.sepia',
                    label: 'Sepia'
                }, {
                    key: 'parallax.brightness',
                    label: 'Brightness'
                }]
            }]
        };

        const asideMarkup = lab_api.v1.util.dom.renderView('content/parallax/template/parallaxSupportAside', asideData);

        lab_api.v1.ui.modal.dialog({
            container: {
                width: 860,
                nostyle: false
            },
            content: {
                header: 'Parallax settings',
                markup
            },
            aside: {
                expandable: true,
                closed: !preferAsideOpen,
                position: 'left',
                header: 'Options',
                content: asideMarkup,
                noPadding: true,
                width: '215px'
            },
            eventHandlers: eventHandlers.concat([{
                selector: 'input, select',
                event: 'change',
                callback: (modal, event) => {
                    // Store value immediately:
                    this.save(event.currentTarget);
                }
            }])
        });

    }

    save(element) {
        const path = element.getAttribute('name');
        const value = lab_api.v1.util.dom.getFormElementValue(element);
        if (path.startsWith('width.')) {
            this.model.setWidth(parseInt(value, 10), { viewport: path.split('.')[1], save: true });
            return;
        }
        if (this.model.getType() === 'image' && path === 'fullwidth') {
            this.view.set('fields.width', value ? 1800 : null);
        }
        lab_api.v1.util.object.set(path, value, this.data);
        this.view.set(
            'metadata.parallax',
            { ...this.data }
        );
    }

    getTemplateData() {
        return {
            booleans: [{
                title: 'Geometry',
                name: 'geometry',
                hidden: false,
                items: [{
                    name: 'sticky',
                    isCheckbox: true,
                    title: 'Sticky',
                    active: !!this.data.sticky,
                    grid: 'lab-grid-large-2'
                }, {
                    name: 'fullwidth',
                    isCheckbox: true,
                    title: 'Full width',
                    active: !!this.data.fullwidth,
                    grid: 'lab-grid-large-10'
                }, {
                    name: 'height',
                    isSelect: true,
                    title: 'Height',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: '50% of viewport',
                        value: '50',
                        selected: this.data.height === '50'
                    }, {
                        title: '100% of viewport (default)',
                        value: '',
                        selected: !this.data.height
                    }, {
                        title: '150% of viewport',
                        value: '150',
                        selected: this.data.height === '150'
                    }, {
                        title: '200% of viewport',
                        value: '200',
                        selected: this.data.height === '200'
                    }, {
                        title: 'Auto (height of content)',
                        value: 'auto',
                        selected: this.data.height === 'auto'
                    }]
                }, {
                    name: 'spaceBelow',
                    isSelect: true,
                    title: 'Space below',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: 'None (default)',
                        value: '',
                        selected: !this.data.spaceBelow
                    }, {
                        title: '50% of viewport',
                        value: '50',
                        selected: this.data.spaceBelow === '50'
                    }, {
                        title: '100% of viewport',
                        value: '100',
                        selected: this.data.spaceBelow === '100'
                    }]
                }, {
                    name: 'width.desktop',
                    isSelect: true,
                    title: 'Width - Desktop',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: '100% (default)',
                        value: '100',
                        selected: this.model.get('width', 'desktop') === 100
                    }, {
                        title: '50%',
                        value: '50',
                        selected: this.model.get('width', 'desktop') === 50
                    }, {
                        title: '33.33%',
                        value: '33.33',
                        selected: this.model.get('width', 'desktop') === 33.33
                    }]
                }, {
                    name: 'width.mobile',
                    isSelect: true,
                    title: 'Width - Mobile',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: '100% (default)',
                        value: '100',
                        selected: this.model.get('width', 'mobile') === 100
                    }, {
                        title: '50%',
                        value: '50',
                        selected: this.model.get('width', 'mobile') === 50
                    }]
                }, {
                    name: 'horizontalAlign.desktop',
                    isSelect: true,
                    title: 'Horizontal positioning - Desktop',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: 'Left (default)',
                        value: '',
                        selected: !this.data.horizontalAlign.desktop
                    }, {
                        title: 'Centered',
                        value: 'center',
                        selected: this.data.horizontalAlign.desktop === 'center'
                    }, {
                        title: 'Right',
                        value: 'right',
                        selected: this.data.horizontalAlign.desktop === 'right'
                    }]
                }, {
                    name: 'horizontalAlign.mobile',
                    isSelect: true,
                    title: 'Horizontal positioning - Mobile',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: 'Left (default)',
                        value: '',
                        selected: !this.data.horizontalAlign.mobile
                    }, {
                        title: 'Centered',
                        value: 'center',
                        selected: this.data.horizontalAlign.mobile === 'center'
                    }, {
                        title: 'Right',
                        value: 'right',
                        selected: this.data.horizontalAlign.mobile === 'right'
                    }]
                }, {
                    name: 'verticalPosition',
                    isSelect: true,
                    title: 'Vertical positioning',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: 'Auto (default)',
                        value: 'auto',
                        selected: this.data.verticalPosition === 'auto' || !this.data.verticalPosition
                    }, {
                        title: 'Move up 50%',
                        value: 'up50',
                        selected: this.data.verticalPosition === 'up50'
                    }, {
                        title: 'Move up 100%',
                        value: 'up100',
                        selected: this.data.verticalPosition === 'up100'
                    }, {
                        title: 'Move down 50%',
                        value: 'down50',
                        selected: this.data.verticalPosition === 'down50'
                    }, {
                        title: 'Move down 100%',
                        value: 'down100',
                        selected: this.data.verticalPosition === 'down100'
                    }]
                }, {
                    name: 'verticalAlign',
                    isSelect: true,
                    title: 'Vertical alignment',
                    isBlock: true,
                    grid: 'lab-grid-large-6',
                    options: [{
                        title: 'Top (default)',
                        value: 'top',
                        selected: this.data.verticalAlign === 'top' || !this.data.verticalAlign
                    }, {
                        title: 'Centered',
                        value: 'center',
                        selected: this.data.verticalAlign === 'center'
                    }, {
                        title: 'Bottom',
                        value: 'bottom',
                        selected: this.data.verticalAlign === 'bottom'
                    }]
                }]
            }],
            ranges: [
                {
                    name: 'scale',
                    attributeName: 'parallax.scale',
                    title: 'Scale content',
                    hidden: true,
                    min: 0,
                    max: 100,
                    active: !!this.data.scale.active,
                    startValue: this.data.scale.startValue || 0,
                    endValue: this.data.scale.endValue || 100,
                    startScrollPosition: this.data.scale.startScrollPosition || 0,
                    endScrollPosition: this.data.scale.endScrollPosition || 100,
                    labels: {
                        active: 'Active',
                        startValue: 'Start size',
                        endValue: 'End size',
                        startScrollPosition: 'Start scroll position',
                        endScrollPosition: 'End scroll position'
                    },
                    ranges: {
                        startValue: [0, 200],
                        endValue: [0, 200],
                        startScrollPosition: [0, 100],
                        endScrollPosition: [0, 100]
                    }
                },
                {
                    name: 'rotate',
                    attributeName: 'parallax.rotate',
                    title: 'rotate content',
                    hidden: true,
                    min: 0,
                    max: 100,
                    active: !!this.data.rotate.active,
                    startValue: this.data.rotate.startValue || 0,
                    endValue: this.data.rotate.endValue || 360,
                    startScrollPosition: this.data.rotate.startScrollPosition || 0,
                    endScrollPosition: this.data.rotate.endScrollPosition || 100,
                    labels: {
                        active: 'Active',
                        startValue: 'Start angle',
                        endValue: 'End angle',
                        startScrollPosition: 'Start scroll position',
                        endScrollPosition: 'End scroll position'
                    },
                    ranges: {
                        startValue: [0, 360],
                        endValue: [0, 360],
                        startScrollPosition: [0, 100],
                        endScrollPosition: [0, 100]
                    }
                },
                {
                    name: 'opacity',
                    attributeName: 'parallax.opacity',
                    title: 'Opacity',
                    hidden: true,
                    min: 0,
                    max: 100,
                    active: !!this.data.opacity.active,
                    startValue: this.data.opacity.startValue || 0,
                    endValue: this.data.opacity.endValue || 100,
                    startScrollPosition: this.data.opacity.startScrollPosition || 0,
                    endScrollPosition: this.data.opacity.endScrollPosition || 100,
                    labels: {
                        active: 'Active',
                        startValue: 'Start opacity',
                        endValue: 'End opacity',
                        startScrollPosition: 'Start scroll position',
                        endScrollPosition: 'End scroll position'
                    },
                    ranges: {
                        startValue: [0, 100],
                        endValue: [0, 100],
                        startScrollPosition: [0, 100],
                        endScrollPosition: [0, 100]
                    }
                },
                {
                    name: 'blur',
                    attributeName: 'parallax.blur',
                    title: 'Blur',
                    hidden: true,
                    min: 0,
                    max: 100,
                    active: !!this.data.blur.active,
                    startValue: this.data.blur.startValue || 0,
                    endValue: this.data.blur.endValue || 100,
                    startScrollPosition: this.data.blur.startScrollPosition || 0,
                    endScrollPosition: this.data.blur.endScrollPosition || 100,
                    labels: {
                        active: 'Active',
                        startValue: 'Start blur',
                        endValue: 'End blur',
                        startScrollPosition: 'Start scroll position',
                        endScrollPosition: 'End scroll position'
                    },
                    ranges: {
                        startValue: [0, 100],
                        endValue: [0, 100],
                        startScrollPosition: [0, 100],
                        endScrollPosition: [0, 100]
                    }
                },
                {
                    name: 'sepia',
                    attributeName: 'parallax.sepia',
                    title: 'Sepia',
                    hidden: true,
                    min: 0,
                    max: 100,
                    active: !!this.data.sepia.active,
                    startValue: this.data.sepia.startValue || 0,
                    endValue: this.data.sepia.endValue || 100,
                    startScrollPosition: this.data.sepia.startScrollPosition || 0,
                    endScrollPosition: this.data.sepia.endScrollPosition || 100,
                    labels: {
                        active: 'Active',
                        startValue: 'Start sepia',
                        endValue: 'End sepia',
                        startScrollPosition: 'Start scroll position',
                        endScrollPosition: 'End scroll position'
                    },
                    ranges: {
                        startValue: [0, 100],
                        endValue: [0, 100],
                        startScrollPosition: [0, 100],
                        endScrollPosition: [0, 100]
                    }
                },
                {
                    name: 'brightness',
                    attributeName: 'parallax.brightness',
                    title: 'Brightness',
                    hidden: true,
                    min: 0,
                    max: 100,
                    active: !!this.data.brightness.active,
                    startValue: this.data.brightness.startValue || 100,
                    endValue: this.data.brightness.endValue || 0,
                    startScrollPosition: this.data.brightness.startScrollPosition || 0,
                    endScrollPosition: this.data.brightness.endScrollPosition || 100,
                    labels: {
                        active: 'Active',
                        startValue: 'Start brightness',
                        endValue: 'End brightness',
                        startScrollPosition: 'Start scroll position',
                        endScrollPosition: 'End scroll position'
                    },
                    ranges: {
                        startValue: [0, 100],
                        endValue: [0, 100],
                        startScrollPosition: [0, 100],
                        endScrollPosition: [0, 100]
                    }
                }
            ]
        };
    }

}


/***/ }),

/***/ "./modules/apps/TeaserEditor.js":
/*!**************************************!*\
  !*** ./modules/apps/TeaserEditor.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TeaserEditor": () => (/* binding */ TeaserEditor)
/* harmony export */ });
// Edit a teaser:
// api.v1.apps.start('TeaserEditor', { id: 123456, endcallback: (id) => {...} })
// Create a teaser:
// api.v1.apps.start('TeaserEditor', { endcallback: (id) => {...} })

class TeaserEditor {

    constructor(api, { id = null, endcallback = null } = {}) {
        this.api = api;
        this.data = {
            id: null,
            fields: {},
            children: []
        };
        this.endcallback = endcallback || null;
        this.registered = false;
        this.saveInProgress = false;
        this.modal = null;
        if (id && typeof id === 'number') {
            fetch(`/ajax/node/get-node?id=${ id }`).then((resp) => resp.json()).then((resp) => {
                this.data = resp.data;
                if (!this.data.children) {
                    this.data.children = [];
                }
                this.display();
            }).catch((error) => {
                console.log('error fetching teasers: ', error);
            });
        } else {
            this.display();
        }
    }

    display() {
        this.modal = this.api.v1.ui.modal.dialog({
            defaultButtons: false,
            container: {
                width: 900
            },
            content: {
                header: 'Teaser editor',
                markup: this.getMarkup(this.data)
            },
            aside: {
                position: 'left',
                expandable: false,
                header: 'Image',
                content: this.getAsideMarkup(this.data),
                noPadding: true,
                width: 270
            },
            callbacks: {
                didDisplay: (modal) => {
                    if (!this.registered) {
                        this.registerEvents(modal.getMarkup());
                        this.registered = true;
                    }
                },
                submit: (formElements) => {
                    this.save(formElements);
                },
                end: () => {
                    if (this.endcallback && !this.saveInProgress) {
                        this.endcallback(this.data.id);
                    }
                }
            },
            eventHandlers: [{
                selector: '#cancel-btn',
                event: 'click',
                callback: (theModal, event) => {
                    theModal.close();
                }
            }],
            keyValidation: [{
                key: 'title',
                validator: 'notEmpty'
            }, {
                key: 'subtitle',
                validator: 'notEmpty'
            }, {
                key: 'published_url',
                validator: 'lab_api.v1.util.valueTransformer.isUrl'
            }],
            footer: {
                buttons: [
                    {
                        value: 'Cancel',
                        highlight: false,
                        id: 'cancel-btn'
                    },
                    {
                        value: this.data.id ? 'Update teaser' : 'Create teaser',
                        type: 'submit',
                        highlight: true
                    }
                ]
            }
        });
    }

    registerEvents(markup) {
        const imgEl = markup.querySelector('.lab-aside-settings img');
        if (imgEl) {
            imgEl.addEventListener('click', (event) => {
                this.editImage(imgEl);
            }, false);
        }
        const changeImgBtn = markup.querySelector('#btn-change-image');
        if (changeImgBtn) {
            changeImgBtn.addEventListener('click', (event) => {
                this.changeImage(markup);
            }, false);
        }
        const removeImgBtn = markup.querySelector('#btn-remove-image');
        if (removeImgBtn) {
            removeImgBtn.addEventListener('click', (event) => {
                this.deleteCurrentImage();
            }, false);
        }
    }

    changeImage(markup) {
        const imgEl = markup.querySelector('.lab-aside-settings img');
        if (imgEl) {
            imgEl.parentElement.classList.add('lab-busy');
        }
        this.api.v1.collection.display({
            name: 'MediaImages',
            modal: true,
            skipCache: true,
            options: {
                clickHandler: (model, element) => {
                    const serialized = this.api.v1.model.serialize.model(model);
                    if (this.data.id) {
                        this.deleteCurrentImage(serialized);
                    } else {
                        this.data.children = [{
                            id: null,
                            type: 'image',
                            instance_of: serialized.instance_of,
                            apiResult: serialized.apiResult,
                            fields: serialized.fields
                        }];
                        this.updateImage();
                    }
                }
            }
        });
    }

    editImage(element) {
        import(/* webpackIgnore: true */ '/lib-js/modules/editor/Tools/image/Editor.js')
            .then((module) => {
                const offset = this.api.v1.viewport.getOffset();
                const image = this.data.children[0];
                const crop = image.fields;
                const editor = new module.Editor({
                    modal: false,
                    container: {
                        width: 300,
                        height: 200,
                        element: element.parentElement,
                        cssList: ['lab-modal-overlay']
                    },
                    offset: {
                        y: window.scrollY - offset.top
                    },
                    imageElement: {
                        element
                    },
                    crop,
                    tools: {
                        resize: {
                            active: false
                        }
                    },
                    imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ image.instance_of }`
                }, {
                    end: () => {
                        const serializedCrop = editor.end();
                        image.fields = { ...image.fields, ...serializedCrop };
                        element.setAttribute('src', this.getImageurl(image));
                    }
                });
            });
    }

    save(formElements) {
        for (const key of Object.keys(formElements)) {
            this.data.fields[key] = formElements[key].trim();
        }
        if (this.data.id) {
            this.saveTeaser();
        } else {
            this.createTeaser();
        }
    }

    saveTeaser(newId) {
        this.saveInProgress = true;
        const formData = new FormData();
        const payload = [{ type: 'teaser', id: this.data.id, fields: this.data.fields }];
        if (this.data.children && this.data.children.length) {
            const image = this.data.children[0];
            payload.push({
                parent: this.data.id,
                type: 'image',
                id: image.id,
                instance_of: image.instance_of,
                fields: image.fields
            });
        }
        formData.append('json[id]', this.data.id);
        formData.append('json[type]', 'teaser');
        formData.append('json[structure]', null);
        formData.append('json[node]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/save-node-and-data', { body: formData, method: 'POST' }).then((resp) => {
            this.saveInProgress = false;
            if (this.endcallback) {
                this.endcallback(newId);
            }
        }).catch((error) => {
            this.saveInProgress = false;
            console.log('error: ', error);
        });
    }

    deleteCurrentImage(newImage) {
        if (!this.data.id) { return; }
        if (!this.data.children || !this.data.children.length || !this.data.children[0].id) {
            if (newImage) {
                this.setCurrentImage(newImage);
            }
            return;
        }
        const formData = new FormData();
        const image = this.data.children[0];
        const payload = [{
            parent: this.data.id,
            type: 'image',
            id: image.id,
            instance_of: image.instance_of
        }];
        formData.append('json[id]', this.data.id);
        formData.append('json[type]', 'teaser');
        formData.append('json[structure]', null);
        formData.append('json[node]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/delete-node-and-data', { body: formData, method: 'POST' }).then((resp) => {
            this.data.children = [];
            if (newImage) {
                this.setCurrentImage(newImage);
            } else {
                this.updateImage();
            }
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    setCurrentImage(serialized, callback) {
        this.data.children = [{
            id: null,
            type: 'image',
            instance_of: serialized.instance_of,
            apiResult: serialized.apiResult,
            fields: serialized.fields
        }];
        const formData = new FormData();
        const image = this.data.children[0];
        const payload = [{
            parent: this.data.id,
            type: 'image',
            fields: image.fields,
            instance_of: image.instance_of,
            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02771'
        }];
        if (this.data.id) {
            formData.append('json[id]', this.data.id);
        }
        formData.append('json[nodeData]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {
            image.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].id;
            image.instance_of = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02771'].instance_of;
            this.updateImage();
            if (callback) {
                callback();
            }
        }).catch((error) => {
            console.log('Error creating image: ', error);
        });
    }

    createTeaser() {
        const formData = new FormData();
        const payload = [{
            type: 'teaser',
            fields: this.data.fields,
            tmpId: 'e6aff7c6-fbd9-4fb0-921f-e5766cc02773'
        }];
        formData.append('json[nodeData]', JSON.stringify(payload));
        this.api.v1.util.httpClient.request('/ajax/node/create', { body: formData, method: 'POST' }).then((resp) => {
            this.data.id = resp.lookup['e6aff7c6-fbd9-4fb0-921f-e5766cc02773'].id;
            const image = this.data.children[0];
            if (image && !image.id) {
                this.setCurrentImage(image, () => {
                    this.saveTeaser(this.data.id);
                });
            } else {
                this.saveTeaser(this.data.id);
            }
        }).catch((error) => {
            console.log('Error creating teaser: ', error);
        });
    }

    getMarkup(data) {
        return this.api.v1.util.dom.renderView('apps/teasereditor/editor', {
            id: data.id,
            fields: data.fields || {}
        }, false);
    }

    getAsideMarkup(data, toDom = false) {
        const child = data.children && data.children.length ? data.children[0] : null;
        return this.api.v1.util.dom.renderView('apps/teasereditor/aside', child ? { url: this.getImageurl(child) } : {}, toDom);
    }

    updateImage() {
        const markup = this.modal.getMarkup();
        const aside = markup.querySelector('.lab-aside-settings');
        const newAside = this.getAsideMarkup(this.data, true);
        this.registerEvents(newAside);
        aside.parentNode.replaceChild(newAside, aside);
    }

    getImageurl(data) {
        return `${ this.api.v1.properties.get('image_server') }/${ data.instance_of }.webp?imageId=${ data.instance_of }&x=${ data.fields.x }&y=${ data.fields.y }&cropw=${ data.fields.cropw }&croph=${ data.fields.croph }&width=412&height=300`;
    }

}


/***/ }),

/***/ "./modules/apps/article/AptomaExport.js":
/*!**********************************************!*\
  !*** ./modules/apps/article/AptomaExport.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AptomaExport": () => (/* binding */ AptomaExport)
/* harmony export */ });
class AptomaExport {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = this.api.v1.user.hasPermission('export_aptoma') && this.api.v1.config.get('aptoma.enabled');
        this.customTopicSectionString = this.api.v1.config.get('aptoma.customTopicSectionString') || false;
        this.printArticleTypes = this.api.v1.config.get('aptoma.printArticleTypes') || [];
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-medium lab-space-above-none">Export article to Aptoma</h2>
            </div>
            <div class="lab-formgroup lab-grid lab-space-above-none">
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="lab_printArticleTypeId">Select article type</label>
                    <select name="fields.lab_printArticleTypeId" id="lab_printArticleTypeId">
                        <option value="">Select article type</option>
                        {{ #printArticleTypes }}
                            <option value="{{ value }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /printArticleTypes }}
                    </select>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="lab_printEditionDateFormatted">Select print edition</label>
                    <input type="date" id="lab_printEditionDateFormatted" name="fields.lab_printEditionDateFormatted" value="{{ fields.lab_printEditionDateFormatted }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="lab_printPage">Select print page</label>
                    <input type="number" id="lab_printPage" name="fields.lab_printPage" value="{{ fields.lab_printPage }}">
                </div>
                {{ #customTopicSectionString }}
                    <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                        <label for="lab_printArticleTopicString">Topic</label>
                        <input type="text" id="lab_printArticleTopicString" name="fields.lab_printArticleTopicString" value="{{ fields.lab_printArticleTopicString }}">
                    </div>
                    <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                        <label for="lab_printArticleSectionString">Aptoma section (leave empty to use Labrador section)</label>
                        <input type="text" id="lab_printArticleSectionString" name="fields.lab_printArticleSectionString" value="{{ fields.lab_printArticleSectionString }}">
                    </div>
                {{ /customTopicSectionString }}
            </div>
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Export',
            label: 'Aptoma'
        };
    }

    onPaths() {
        return {
            'fields.lab_printEditionDateFormatted': {
                node: 'fields.lab_printEditionDateFormatted',
                callback: (element) => {
                    this.rootModel.set('fields.lab_printEditionDate', element.valueAsNumber);
                }
            },
            'fields.lab_printArticleTypeId': {
                node: 'fields.lab_printArticleTypeId',
                callback: (element) => {
                    if (element.value) {
                        this.rootModel.set('fields.lab_printArticleType', this.printArticleTypes.find((item) => item.id === parseInt(element.value, 10)).type);
                    } else {
                        this.rootModel.set('fields.lab_printArticleType', null);
                    }
                }
            },
            'fields.lab_printPage': { node: 'fields.lab_printPage' },
            'fields.lab_printArticleTopicString': { node: 'fields.lab_printArticleTopicString' },
            'fields.lab_printArticleSectionString': { node: 'fields.lab_printArticleSectionString' }
        };
    }

    onMarkup() {
        const currentPrintArticleType = parseInt(this.rootModel.get('fields.lab_printArticleTypeId'), 10);
        const printArticleTypes = (this.printArticleTypes || []).map((item) => ({ name: item.type, value: item.id, selected: item.id === currentPrintArticleType }));
        const markupObject = {
            printArticleTypes,
            fields: {
                lab_printArticleTypeId: this.rootModel.get('fields.lab_printArticleTypeId'),
                lab_printArticleType: this.rootModel.get('fields.lab_printArticleType'),
                lab_printEditionDate: this.rootModel.get('fields.lab_printEditionDate'),
                lab_printEditionDateFormatted: this.rootModel.get('fields.lab_printEditionDateFormatted'),
                lab_printPage: this.rootModel.get('fields.lab_printPage'),
            },
            customTopicSectionString: this.customTopicSectionString
        }
        if (this.customTopicSectionString) {
            markupObject.fields.lab_printArticleTopicString = this.rootModel.get('fields.lab_printArticleTopicString');
            markupObject.fields.lab_printArticleSectionString = this.rootModel.get('fields.lab_printArticleSectionString');
        }
        const markup = this.api.v1.util.dom.renderTemplate(this.template, markupObject, true);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleAdvancedSettings.js":
/*!*********************************************************!*\
  !*** ./modules/apps/article/ArticleAdvancedSettings.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleAdvancedSettings": () => (/* binding */ ArticleAdvancedSettings)
/* harmony export */ });
class ArticleAdvancedSettings {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid lab-bordered">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-large">Advanced settings</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="lab_canonical">Canonical url</label>
                    <input type="text" value="{{ fields.lab_canonical}}" name="fields.lab_canonical" id="lab_canonical" placeholder="Preferred URL ...">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="lab_redirect_url">Redirect url</label>
                    <input type="text" value="{{ fields.lab_redirect_url}}" name="fields.lab_redirect_url" id="lab_redirect_url" placeholder="301 redirect, use with caution ...">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="showonfp">Show on front</label>
                    <input type="checkbox" value="1" name="fields.showonfp" id="showonfp" {{ #fields.showonfp }}checked{{ /fields.showonfp }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="hideFromToplist">Hide from toplist</label>
                    <input type="checkbox" value="1" name="fields.hideFromToplist" id="hideFromToplist" {{ #fields.hideFromToplist }}checked{{ /fields.hideFromToplist }}>
                </div>
            </div>

            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-medium lab-space-above-none">Original urls</h2>
                {{ ^displayOriginalUrl }}
                <p>Enable permission <em>admin_batchoperations</em> to edit original url's.</p>
                {{ /displayOriginalUrl }}
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="original_url">Original url #1</label>
                    <input type="text" value="{{ fields.original_url}}" name="fields.original_url" id="original_url" placeholder="Original url for this article ..."{{ ^displayOriginalUrl }} disabled{{ /displayOriginalUrl }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="original_url_2">Original url #2</label>
                    <input type="text" value="{{ fields.original_url_2}}" name="fields.original_url_2" id="original_url_2" placeholder="Original url for this article ..."{{ ^displayOriginalUrl }} disabled{{ /displayOriginalUrl }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="original_url_3">Original url #3</label>
                    <input type="text" value="{{ fields.original_url_3}}" name="fields.original_url_3" id="original_url_3" placeholder="Original url for this article ..."{{ ^displayOriginalUrl }} disabled{{ /displayOriginalUrl }}>
                </div>

        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Advanced',
            label: 'Settings'
        };
    }

    onPaths() {
        return {
            'fields.showonfp': { node: 'fields.showonfp', boolean: true },
            'fields.hideFromToplist': { node: 'fields.hideFromToplist', boolean: true },
            'fields.lab_canonical': { node: 'fields.lab_canonical' },
            'fields.lab_redirect_url': { node: 'fields.lab_redirect_url', validator: 'isUrlOrEmpty' },
            'fields.original_url': { node: 'fields.original_url', validator: 'noWhiteSpace' },
            'fields.original_url_2': { node: 'fields.original_url_2', validator: 'noWhiteSpace' },
            'fields.original_url_3': { node: 'fields.original_url_3', validator: 'noWhiteSpace' }
        };
    }

    onMarkup() {
        const showonfp = this.rootModel.get('fields.showonfp');
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                showonfp: showonfp === null ? true : !!showonfp,
                hideFromToplist: this.rootModel.get('fields.hideFromToplist'),
                lab_canonical: this.rootModel.get('fields.lab_canonical'),
                lab_redirect_url: this.rootModel.get('fields.lab_redirect_url'),
                original_url: this.rootModel.get('fields.original_url'),
                original_url_2: this.rootModel.get('fields.original_url_2'),
                original_url_3: this.rootModel.get('fields.original_url_3')
            },
            displayOriginalUrl: this.api.v1.user.hasPermission('admin_batchoperations')
        }, true);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleApproval.js":
/*!*************************************************!*\
  !*** ./modules/apps/article/ArticleApproval.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleApproval": () => (/* binding */ ArticleApproval)
/* harmony export */ });
class ArticleApproval {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.log = params.log;
        this.enabled = true;
        this.hasPermission = this.api.v1.user.hasPermission('admin_status');
        this.dom = {
            btnApprove: null,
            btnRevoke: null,
            timestamp: null
        };
        this.approvalSettings = {
            approval: {
                name: 'Approved for publishing',
                enable: true,
                approvedData: {},
                fieldName: 'lab_approved'
            },
            sentToDistribution: {
                name: 'Sent to distribution',
                enable: false,
                approvedData: {},
                fieldName: 'lab_sentToDistribution'

            },
            proofRead: {
                name: 'Proof read',
                enable: false,
                approvedData: {},
                fieldName: 'lab_proofRead'
            },
            typeset: {
                name: 'Typeset',
                enable: false,
                approvedData: {},
                fieldName: 'lab_typeset'
            }
        };
        this.getState();
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid">
                {{ #approval.enable }}
                <h2 class="lab-title lab-grid-large-12">{{ approval.name }}</h2>
                <div class="lab-formgroup-item lab-grid-large-12">
                    {{ #approval.description }}<p>{{ approval.description }}</p>{{ /approval.description }}
                    <p id="lbl-timestamp-approval">--</p>
                    <input type="button" id="btn-approve-approval" value="Approve">
                    <input type="button" id="btn-revoke-approval" value="Revoke">
                </div>
                {{ /approval.enable }}
                
                {{ #sentToDistribution.enable }}
                <h2 class="lab-title lab-grid-large-12 lab-space-above-large">{{ sentToDistribution.name }}</h2>
                <div class="lab-formgroup-item lab-grid-large-12">
                    {{ #sentToDistribution.description }}<p>{{ sentToDistribution.description }}</p>{{ /sentToDistribution.description }}
                    <p id="lbl-timestamp-sentToDistribution">--</p>
                    <input type="button" id="btn-approve-sentToDistribution" value="Approve">
                    <input type="button" id="btn-revoke-sentToDistribution" value="Revoke">
                </div>
                {{ /sentToDistribution.enable }}

                {{ #proofRead.enable }}
                <h2 class="lab-title lab-grid-large-12 lab-space-above-large">{{ proofRead.name }}</h2>
                <div class="lab-formgroup-item lab-grid-large-12">
                    {{ #proofRead.description }}<p>{{ proofRead.description }}</p>{{ /proofRead.description }}
                    <p id="lbl-timestamp-proofRead">--</p>
                    <input type="button" id="btn-approve-proofRead" value="Approve">
                    <input type="button" id="btn-revoke-proofRead" value="Revoke">
                </div>
                {{ /proofRead.enable }}

                {{ #typeset.enable }}
                <h2 class="lab-title lab-grid-large-12 lab-space-above-large">{{ typeset.name }}</h2>
                <div class="lab-formgroup-item lab-grid-large-12">
                    {{ #typeset.description }}<p>{{ typeset.description }}</p>{{ /typeset.description }}
                    <p id="lbl-timestamp-typeset">--</p>
                    <input type="button" id="btn-approve-typeset" value="Approve">
                    <input type="button" id="btn-revoke-typeset" value="Revoke">
                </div>
                {{ /typeset.enable }}

                {{ ^proofRead.enable }}
                {{ ^sentToDistribution.enable }}
                {{ ^typeset.enable}}
                <p><i>Go to <a href="/settings/cp?page=articleSettings">article settings in Admin</a> to enable extra approval statuses</i></p>
                {{ /typeset.enable}}
                {{ /sentToDistribution.enable }}
                {{ /proofRead.enable }}

            </div>
            <div class="lab-formgroup lab-grid" id="article-sharing-token-access">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-large">Article access link</h2>
                <div class="lab-formgroup-item lab-grid-large-12 sharing-link-container">
                    <p>Use this link to give access to the article without publishing it:</p>
                    <span id="article-sharing-link" style="line-break: anywhere;"><i class="lab-spinner"></i></span><br>
                    <input type="button" class="hidden" id="btn-copy-sharing-link" value="Copy link">
                    <span id="article-sharing-link-copied"></span>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 sharing-link-publish-first-container lab-hidden">
                    <p>Publish the article as "Hidden", to generate a link that can be accessed by others.</p>
                </div>
            </div>
        </div>`;
    }

    getArticleToken() {
        return new Promise((resolve, reject) => {
            const published_url = this.rootModel.get('fields.published_url');
            if (published_url === null) {
                this.dom.sharingLinkContainer.querySelector('.sharing-link-container').classList.add('lab-hidden');
                this.dom.sharingLinkContainer.querySelector('.sharing-link-publish-first-container').classList.remove('lab-hidden');
                resolve();
                return;
            }

            const url = `/ajax/article/create-article-token?articleId=${ this.rootModel.getId() }`;
            fetch(url, { mode: 'cors' })
                .then((response) => {
                    if (!response.ok) {
                        reject(response.statusText);
                    }
                    return response.json();
                }).then((json) => {
                    const sharing_url = `${ this.rootModel.get('fields.published_url') }?articleToken=${ json.token }`;
                    const domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
                    this.dom.sharingLink.innerHTML = `<a href="${ domain }${ sharing_url }" target="_blank" class="sharing-link">${ domain }${ sharing_url }</a>`;
                }).catch((err) => {
                    console.warn(err);
                    reject(err);
                });
        });
    }

    onAside() {
        return {
            section: 'Advanced',
            label: 'Article status'
        };
    }

    onPaths() {}

    approve(status) {
        this.api.v1.article.approval.approve(this.approvalSettings[status].fieldName).then(() => {
            this.getState();
            this.log({
                type: 'data',
                app: this.constructor.name,
                path: `fields.${ this.approvalSettings[status].fieldName }`,
                approved: '1'
            });
        });
    }

    revoke(status) {
        this.api.v1.article.approval.revoke(this.approvalSettings[status].fieldName).then(() => {
            this.getState();
            this.log({
                type: 'data',
                app: this.constructor.name,
                path: `fields.${ this.approvalSettings[status].fieldName }`,
                approved: '0'
            });
        });
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, this.approvalSettings, true);
        this.statuses = Object.keys(this.approvalSettings).filter((key) => this.approvalSettings[key].enable);

        for (const status of this.statuses) {
            this.dom[`btnApprove-${ status }`] = markup.querySelector(`#btn-approve-${ status }`);
            this.dom[`btnRevoke-${ status }`] = markup.querySelector(`#btn-revoke-${ status }`);
            this.dom[`timestamp-${ status }`] = markup.querySelector(`#lbl-timestamp-${ status }`);
        }

        for (const status of this.statuses) {
            this.dom[`btnApprove-${ status }`].disabled = this.approvalSettings[status].approvedData.isApproved;
            this.dom[`btnRevoke-${ status }`].disabled = !this.approvalSettings[status].approvedData.isApproved;
            this.dom[`timestamp-${ status }`].innerHTML = this.getTimestampLabel(status);
            this.dom[`btnApprove-${ status }`].addEventListener('click', (event) => {
                this.approve(status);
            }, false);
            this.dom[`btnRevoke-${ status }`].addEventListener('click', (event) => {
                this.revoke(status);
            }, false);

            if (!this.hasPermission) {
                this.dom[`btnApprove-${ status }`].setAttribute('disabled', 'disabled');
                this.dom[`btnRevoke-${ status }`].setAttribute('disabled', 'disabled');
            }

        }

        // Article sharing link with article token
        this.dom.sharingLinkContainer = markup.querySelector('#article-sharing-token-access');
        this.dom.sharingLink = markup.querySelector('#article-sharing-link');
        if (this.api.v1.properties.get('allow_publish_hidden_with_token') === '1') {
            this.getArticleToken();
        } else {
            this.dom.sharingLinkContainer.classList.add('lab-hidden');
        }
        this.dom.btnCopyLink = markup.querySelector('#btn-copy-sharing-link');
        this.dom.btnCopyLink.addEventListener('click', (event) => {
            navigator.clipboard.writeText(this.dom.sharingLink.querySelector('a').getAttribute('href'))
                .then(() => {
                    document.getElementById('article-sharing-link-copied').innerHTML = 'Copied!';
                });
        });

        return markup;
    }

    getState() {
        const siteInfo = this.api.v1.site.getSite();
        const siteApprovalSetup = this.api.v1.config.get('articleApprovalStatus', { site: siteInfo.alias });
        for (const key of Object.keys(this.approvalSettings)) {
            if (siteApprovalSetup && siteApprovalSetup[key]) {
                if ('enable' in siteApprovalSetup[key]) {
                    this.approvalSettings[key].enable = siteApprovalSetup[key].enable;
                } else {
                    this.approvalSettings[key].enable = false;
                }

                if ('name' in siteApprovalSetup[key] && typeof siteApprovalSetup[key].name === 'string' && siteApprovalSetup[key].name.length > 0) {
                    this.approvalSettings[key].name = siteApprovalSetup[key].name;
                }

                if ('description' in siteApprovalSetup[key] && typeof siteApprovalSetup[key].description === 'string' && siteApprovalSetup[key].description.length > 0) {
                    this.approvalSettings[key].description = siteApprovalSetup[key].description;
                }
            }
        }

        this.statuses = Object.keys(this.approvalSettings).filter((key) => this.approvalSettings[key].enable);

        for (const status of this.statuses) {
            const { fieldName } = this.approvalSettings[status];
            this.api.v1.article.approval.getData(fieldName).then((data) => {
                this.approvalSettings[status].approvedData = data;

                if (this.dom[`btnApprove-${ status }`]) {
                    this.dom[`btnApprove-${ status }`].disabled = this.approvalSettings[status].approvedData.isApproved;
                    this.dom[`btnRevoke-${ status }`].disabled = !this.approvalSettings[status].approvedData.isApproved;
                    this.dom[`timestamp-${ status }`].innerHTML = this.getTimestampLabel(status);
                }
            });
        }
    }

    getTimestampLabel(status) {
        let permissionInfo = '';
        if (!this.hasPermission) {
            permissionInfo = 'You do not have permission to accept/revoke this article.<br><br>';
        }
        if (!this.approvalSettings[status].approvedData.isApproved) {
            return `${ permissionInfo }Unapproved: '${ this.approvalSettings[status].name }'`;
        }
        const date = new Date(this.approvalSettings[status].approvedData.date.timestamp * 1000);
        return `${ permissionInfo }Approved: '${ this.approvalSettings[status].name }' approved by ${ this.approvalSettings[status].approvedData.user.name }<br>${ date.toISOString() }`;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleAudio.js":
/*!**********************************************!*\
  !*** ./modules/apps/article/ArticleAudio.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleAudio": () => (/* binding */ ArticleAudio)
/* harmony export */ });
class ArticleAudio {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.setter = params.setter;
        this.log = params.log;
        this.enabled = true;
        this.dom = {
            audioFields: {
                url: null,
                title: null,
                playTime: null,
                fileType: null,
                disableField: null
            }
        };
        this.bindingsHandler = this.onMarkup.bind(this);
        this.hasAudioCollection = this.api.v1.config.get('drawerAdditions').some((item) => item.collection === 'Audio');

        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup-item lab-grid-large-12">
                <div class="lab-grid lab-grid-gap">
                    <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none">Audio</h2>
                    <input class="lab-grid-large-8 lab-grid-gap" type="url" {{ #audio.disableField }}disabled{{ /audio.disableField }} id="teaser-audio-url" value="{{ audio.url }}" placeholder="Teaser Audio Url ...">
                    <input class="lab-grid-large-4 lab-grid-gap" type="button" {{ ^audio.disableField }}disabled{{ /audio.disableField }} id="btn-remove-teaser-audio-url" value="Remove audio file">
                    <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                        <p class="lab-info">Adding a file here allows for the audio clip to be played directly from the front page teaser.</p>
                    </div>
                    {{ #hasAudioCollection }}
                        <div class="audio-file-info lab-grid-gap lab-grid-large-7 lab-space-above-small">
                                <div>Title: <strong id="audio-file-title">{{ audio.title }}</strong></div>
                                <div>Duration: <strong id="audio-file-duration">{{ audio.playTime}}</strong></div>
                                <div>Type: <strong id="audio-file-type">{{ audio.fileType }}</strong></div>
                        </div>
                        <input class="lab-grid-gap lab-grid-large-5" type="button" id="btn-add-teaser-audio-url" value="Add audio file from library">
                    {{ /hasAudioCollection }}
                 </div>
            </div>
 
        </div>`;
    }

    onAside() {
        return {
            section: 'General',
            label: 'Audio'
        };
    }

    onPaths() {
        return {};
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                teaserAudio: this.rootModel.get('fields.teaserAudio')
            },
            hasAudioCollection: this.hasAudioCollection,
            audio: {
                disableField: this.rootModel.get('fields.teaserAudio.urlFieldDisabled') || Boolean(this.rootModel.get('fields.teaserAudio')),
                title: this.rootModel.get('fields.teaserAudio.title'),
                playTime: this.rootModel.get('fields.teaserAudio.playTime'),
                fileType: this.rootModel.get('fields.teaserAudio.fileType'),
                url: this.rootModel.get('fields.teaserAudio')
            }
        }, true);

        this.dom.audioFields.url = markup.querySelector('#teaser-audio-url');
        const audioField = markup.querySelector('#teaser-audio-url');
        const btnAddAudioFile = markup.querySelector('#btn-add-teaser-audio-url');
        const btnRemoveAudioFile = markup.querySelector('#btn-remove-teaser-audio-url');

        btnRemoveAudioFile.addEventListener('click', (event) => {
            this.removeAudioFile(btnAddAudioFile, btnRemoveAudioFile);
        }, false);

        audioField.addEventListener('change', (event) => {
            this.rootModel.set('fields.teaserAudio', audioField.value);
            this.rootModel.set('fields.teaserAudio.urlFieldDisabled', true);
            this.log({
                type: 'data',
                app: this.constructor.name,
                path: 'fields.teaserAudio'
            });
            this.dom.audioFields.url.disabled = true;
            btnRemoveAudioFile.disabled = false;
        });

        if (this.hasAudioCollection) {
            if (this.dom.audioFields.url.value) {
                btnAddAudioFile.value = 'Change audio file';
                btnRemoveAudioFile.disabled = false;
                this.dom.audioFields.url.disabled = true;
            }
            this.dom.audioFields.title = markup.querySelector('#audio-file-title');
            this.dom.audioFields.playTime = markup.querySelector('#audio-file-duration');
            this.dom.audioFields.fileType = markup.querySelector('#audio-file-type');

            btnAddAudioFile.addEventListener('click', (event) => {
                this.addAudioFile(btnAddAudioFile, btnRemoveAudioFile);
            }, false);

        }

        return markup;
    }

    addAudioFile(addBtn, removeBtn, urlField) {
        this.api.v1.collection.display({
            name: 'Audio',
            modal: true,
            skipCache: true,
            options: {
                label: 'Audio files',
                clickHandler: (model, element) => {
                    this.models.audio = model;
                    this.rootModel.set('fields.teaserAudio', model.get('fields.url'));
                    this.rootModel.set('fields.teaserAudio.title', model.get('fields.title'));
                    this.rootModel.set('fields.teaserAudio.playTime', model.get('fields.playTime'));
                    this.rootModel.set('fields.teaserAudio.fileType', model.get('fields.fileType'));
                    this.rootModel.set('fields.teaserAudio.urlFieldDisabled', true);
                    this.dom.audioFields.url.value = model.get('fields.url');
                    this.dom.audioFields.title.innerHTML = model.get('fields.title');
                    this.dom.audioFields.playTime.innerHTML = model.get('fields.playTime');
                    this.dom.audioFields.fileType.innerHTML = model.get('fields.fileType');
                    this.dom.audioFields.url.disabled = true;
                    addBtn.value = 'Change audio file';
                    removeBtn.disabled = false;
                }
            }
        });
    }

    removeAudioFile(addBtn, removeBtn) {
        this.rootModel.set('fields.teaserAudio', null);
        this.dom.audioFields.url.value = null;
        this.dom.audioFields.url.disabled = false;
        this.rootModel.set('fields.teaserAudio.urlFieldDisabled', null);
        removeBtn.disabled = true;

        if (this.hasAudioCollection) {
            this.rootModel.set('fields.teaserAudio.title', null);
            this.rootModel.set('fields.teaserAudio.playTime', null);
            this.rootModel.set('fields.teaserAudio.fileType', null);
            this.dom.audioFields.title.innerHTML = null;
            this.dom.audioFields.playTime.innerHTML = null;
            this.dom.audioFields.fileType.innerHTML = null;
            addBtn.value = 'Add audio file from library';
        }

        this.log({
            type: 'data',
            app: this.constructor.name,
            path: 'fields.teaserAudio'
        });
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleChangelog.js":
/*!**************************************************!*\
  !*** ./modules/apps/article/ArticleChangelog.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleChangelog": () => (/* binding */ ArticleChangelog)
/* harmony export */ });
class ArticleChangelog {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.log = params.log;
        this.enabled = true;
        this.labels = {
            btnUpdate: 'Update changelog entry',
            btnAdd: 'Add changelog entry'
        };
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12">Changelog</h2>
                <form id="changelogForm" class="lab-formgroup-item lab-grid-large-12">
                    <label for="date">Select a date</label>
                    <input type="date" required id="date" name="date" value="">
                    <input type="hidden" id="userId" name="userId" value="${ this.api.v1.user.getUserId() }">
                    <input type="hidden" id="index" name="index" value="">
                    <label for="changelog">Changelog text</label>
                    <textarea name="changelogText" required id="changelogText" style="height: 240px;" placeholder="Changelog text..."></textarea>
                    <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right">
                        <input type="button" id="changelogCancel" value="Clear">
                        <input type="submit" id="changelogSubmit" class="lab-add" value="Add changelog entry">
                    </div>
                </form>
                <h3>Changelog entries</h3>
                <div id="changelogEntries" class="lab-formgroup-item lab-grid-large-12">
                </div>
            </div>            

        </div>`;
    }

    onAside() {
        return {
            section: 'General',
            label: 'Changelog'
        };
    }

    onPaths() {
        return {};
    }

    onMarkup() {
        const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];
        let changelogEntries;
        if (typeof changelogEntriesRaw === 'string') {
            changelogEntries = JSON.parse(changelogEntriesRaw);
        } else {
            changelogEntries = [...changelogEntriesRaw];
        }
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {}, true);

        changelogEntries = this.sortEntries(changelogEntries);
        markup.querySelector('#changelogEntries').innerHTML = this.entriesMarkup(changelogEntries);

        markup.querySelector('#changelogCancel').addEventListener('click', (event) => {
            event.preventDefault();
            markup.querySelector('#changelogSubmit').value = this.labels.btnAdd;
            markup.querySelector('#changelogCancel').value = 'Clear';
            markup.querySelector('#changelogForm').reset();
        });

        this.addChangelogEntryEventListener(markup);
        this.editChangelogEntryEventListener(markup, changelogEntries);
        this.deleteChangelogEntryEventListener(markup);

        return markup;
    }

    addEntryToChangelog(markup) {
        const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];
        let changelogEntries;
        if (typeof changelogEntriesRaw === 'string') {
            changelogEntries = JSON.parse(changelogEntriesRaw);
        } else {
            changelogEntries = [...changelogEntriesRaw];
        }
        markup.querySelector('#changelogEntries').innerHTML = this.entriesMarkup(changelogEntries);
        this.editChangelogEntryEventListener(markup, changelogEntries);
        this.deleteChangelogEntryEventListener(markup);
    }

    /**
     * Generates the markup for displaying entries.
     *
     * @param {Array} entries - The array of entries.
     * @returns {string} - The generated markup.
     */
    entriesMarkup(entries) {
        return entries.map((entry, index) => `
            <div class="lab-formgroup-item lab-grid-large-12" data-index="${ index }" data-user-id="${ entry.userId }" style="border: 1px solid rgb(214, 214, 214); padding: 0.5rem;">
                <p class="entry-date" style="font-weight:bold; margin: 0;">${ this.formatTimestampToDate(entry.time * 1000) }</p>
                <div clasee="entry-text" style="margin: 0;">${ this.convertNewLines(entry.changelog) }</div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right">
                    <button class="lab-btn edit-button" data-index="${ index }">Edit</button>
                    <button class="lab-btn delete-button" data-index="${ index }">Delete</button>
                </div>
            </div>`).join('');
    }

    /**
     * Converts newline characters in a given text to HTML paragraph and line break tags.
     *
     * - Double newlines (`\n\n`) are replaced with `</p><p>`.
     * - Single newlines (`\n`) are replaced with `<br>`.
     * - The entire text is wrapped in `<p>` tags.
     *
     * @param {string} text - The input text containing newline characters.
     * @returns {string} - The converted text with HTML tags.
     */
    convertNewLines(text) {
        text = text.replace(/\n\n/g, '</p><p>');
        text = text.replace(/\n/g, '<br>');
        text = `<p>${ text }</p>`;
        return text;
    }

    /**
     * Handles the submission of an article change log.
     *
     * @param {HTMLElement} markup - The markup containing the form elements.
     * @returns {Object} - An object containing the user ID, time, and changelog.
     */
    handleSubmit(markup) {
        const time = parseInt(markup.querySelector('#date').valueAsNumber / 1000, 10);
        const userId = parseInt(markup.querySelector('#userId').value, 10);
        const changelog = markup.querySelector('#changelogText').value;

        return {
            userId,
            time,
            changelog
        };
    }

    /**
     * Updates the changelog entry in the markup.
     *
     * @param {HTMLElement} markup - The markup element containing the changelog entry.
     * @param {number} timestampValue - The timestamp value for the changelog entry.
     * @param {string} userIdValue - The user ID value for the changelog entry.
     * @param {string} changelogTextValue - The changelog text value for the entry.
     * @param {number} index - The index of the changelog entry.
     * @returns {void}
     */
    changeChangelogEntry(markup, timestampValue, userIdValue, changelogTextValue, index) {
        markup.querySelector('#date').value = new Date(timestampValue * 1000).toISOString().split('T')[0] || '';
        markup.querySelector('#userId').value = userIdValue || '';
        markup.querySelector('#changelogText').value = changelogTextValue || '';
        markup.querySelector('#changelogSubmit').value = this.labels.btnUpdate;
        markup.querySelector('#changelogCancel').value = 'Cancel';
        markup.querySelector('#index').value = index;
        markup.querySelector('#changelogText').focus();
    }

    /**
     * Converts a timestamp to a formatted date string.
     *
     * @param {number} timestamp - The timestamp to convert.
     * @returns {string} The formatted date string.
     */
    formatTimestampToDate(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleDateString();
    }

    /**
     * Returns the highest update date from the given entries.
     *
     * @param {Array<Object>} entries - The array of entries.
     * @returns {number} The highest update date.
     */
    getHighestUpdateDate(entries) {
        return entries.reduce((prev, current) => ((prev.time > current.time) ? prev : current)).time;
    }

    /**
     * Sorts the given entries in descending order based on their time property.
     *
     * @param {Array} entries - The array of entries to be sorted.
     * @returns {Array} - The sorted array of entries.
     */
    sortEntries(entries) {
        return entries.slice().sort((a, b) => b.time - a.time);
    }

    /**
     * Adds an event listener to the changelog form for submitting a changelog entry.
     *
     * @param {HTMLElement} markup - The markup element containing the changelog form.
     */
    addChangelogEntryEventListener(markup) {
        markup.querySelector('#changelogForm').addEventListener('submit', (event) => {
            const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];
            let changelogEntries;
            if (typeof changelogEntriesRaw === 'string') {
                changelogEntries = JSON.parse(changelogEntriesRaw);
            } else {
                changelogEntries = [...changelogEntriesRaw];
            }
            event.preventDefault();
            const changelog = markup.querySelector('#changelogSubmit').value === this.labels.btnAdd ? 'add' : 'update';
            if (markup.querySelector('#index').value !== '') {
                const index = parseInt(markup.querySelector('#index').value, 10);
                changelogEntries[index] = this.handleSubmit(markup);
                changelogEntries = this.sortEntries(changelogEntries);
            } else {
                changelogEntries.unshift(this.handleSubmit(markup));
                changelogEntries = this.sortEntries(changelogEntries);
            }
            markup.querySelector('#changelogSubmit').value = this.labels.btnAdd;
            markup.querySelector('#changelogCancel').value = 'Clear';
            this.rootModel.set('fields.lab_changelog_json', changelogEntries);
            this.rootModel.set('fields.lab_changelogUpdate_date', this.getHighestUpdateDate(changelogEntries));
            this.addEntryToChangelog(markup);
            event.target.reset();

            this.log({
                type: 'data',
                app: this.constructor.name,
                path: 'fields.lab_changelog_json',
                changelog
            });
        });
    }

    /**
     * Adds event listeners to the edit buttons in the markup.
     *
     * @param {Element} markup - The markup element containing the edit buttons.
     * @param {Array} changelogEntries - An array of changelog entries.
     * @returns {void}
     */
    editChangelogEntryEventListener(markup, changelogEntries) {
        markup.querySelectorAll('.edit-button').forEach((button) => {
            button.addEventListener('click', (event) => {
                event.preventDefault();
                const index = event.target.getAttribute('data-index');
                const entry = changelogEntries[index];
                this.changeChangelogEntry(markup, entry.time, entry.userId, entry.changelog, index);
            });
        });
    }

    /**
     * Attaches event listeners to delete buttons within the given markup element.
     * When a delete button is clicked, the corresponding changelog entry is removed from the changelogEntries array.
     * The updated changelogEntries array is then serialized and stored in the 'fields.lab_changelog_json' property of the rootModel.
     * The markup is updated to reflect the changes, and the event listeners for editing and deleting changelog entries are reattached.
     *
     * @param {Element} markup - The markup element containing the delete buttons.
     * @param {Array} changelogEntries - The array of changelog entries.
     */
    deleteChangelogEntryEventListener(markup) {
        markup.querySelectorAll('.delete-button').forEach((button) => {
            button.addEventListener('click', (event) => {
                const changelogEntriesRaw = this.rootModel.get('fields.lab_changelog_json') || [];
                let changelogEntries;
                if (typeof changelogEntriesRaw === 'string') {
                    changelogEntries = JSON.parse(changelogEntriesRaw);
                } else {
                    changelogEntries = [...changelogEntriesRaw];
                }
                event.preventDefault();
                const index = event.target.getAttribute('data-index');
                changelogEntries.splice(index, 1);
                this.rootModel.set('fields.lab_changelog_json', changelogEntries);
                if (changelogEntries.length === 0) {
                    this.rootModel.set('fields.lab_changelogUpdate_date', null);
                } else {
                    this.rootModel.set('fields.lab_changelogUpdate_date', this.getHighestUpdateDate(changelogEntries));
                }
                markup.querySelector('#changelogEntries').innerHTML = this.entriesMarkup(changelogEntries);
                this.editChangelogEntryEventListener(markup, changelogEntries);
                this.deleteChangelogEntryEventListener(markup, changelogEntries);

                this.log({
                    type: 'data',
                    app: this.constructor.name,
                    path: 'fields.lab_changelog_json',
                    changelog: 'delete'
                });
            });
        });
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleCitation.js":
/*!*************************************************!*\
  !*** ./modules/apps/article/ArticleCitation.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleCitation": () => (/* binding */ ArticleCitation)
/* harmony export */ });
class ArticleCitation {

    constructor(api, menuItem, aiOptions = { model: 'gpt-4o' }) {

        this.api = api;
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.menuItem = menuItem;
        this.bodytext = this.setupBodytext();

        this.enabled = false;
        this.modal = null;
        this.aiOptions = aiOptions;

        this.template = `
            <div class="lab-modal-form lab-grid">
                <div id="input-area" class="lab-formgroup lab-grid">
                    <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                        <label for="citation_original_text" class="lab-title"><b>Copy of original text</b></label>
                        <textarea data-sugegstion-name="original_text" name="fields.original_text" id="citation_original_text" placeholder="Original content that you wish to generate a citation article from">{{ fields.original_text }}</textarea>
                    </div>
                    <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small">
                        <label for="citation_original_source"><b>Name of source</b></label>
                        <input type="text" data-sugegstion-name="original_source" name="fields.original_source" id="citation_original_source" placeholder="Like 'The Guardian' or 'BBC'">{{ fields.original_source }}</input>
                    </div>
                    <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small">
                        <label for="citation_original_url"><b>Source url</b></label>
                        <input style="float:right; position:relative width:auto" type="text" data-sugegstion-name="original_url" name="fields.original_url" id="citation_original_url" placeholder="https://www.bbc.com/news/12345">{{ fields.original_url }}</input>
                        <div>{{{ buttons.generate_content }}}</div>

                    </div>
                    <p id="info_input" class="lab-hidden"><strong><em>You must provide data in all input fields</em></strong></p>
                </div>

                <div id="generated_text_area" class="lab-hidden">
                    <h3>Generated text</h3>
                    <textarea id="citation_generated_text" rows="8" style="height:auto;"></textarea>

                    {{{ buttons.reject_content }}} {{{ buttons.retry }}} {{{ buttons.overwrite_content }}} {{{ buttons.insert_content }}}
                </div>
            </div>
        `;
        this.display();
        this.generatedContent = '';
        this.temporaryContent = '<span class="temporaryGeneratedString"> </span>';
        this.contentRemove = '';
        this.contentUpdate = '';

    }

    setupBodytext() {
        this.menuItem.menu.tool.insertMarkup('<span class="temporaryGeneratedString"> </span>');
        return this.rootModel.get('fields.bodytext');

    }

    getMarkup() {
        const buttons = {
            generate_content: `<span type="button" class="lab-btn lab-generate" id="suggest-btn-generate_content" style="float:right; position:relative">Generate citation article</span>`,
            reject_content: `<span type="button" class="lab-btn" id="suggest-btn-reject-content" style="float:left; position:relative">Cancel</span>`,
            retry: `<span type="button" class="lab-btn" id="suggest-btn-retry" style="float:left; position:relative">Retry</span>`,
            overwrite_content: `<span type="button" class="lab-btn lab-hidden" id="suggest-btn-overwrite-content" style="float:right; position:relative">Overwrite bodytext</span>`,
            insert_content: `<span type="button" class="lab-btn" id="suggest-btn-insert-content" style="float:right; position:relative">Insert content</span>`
        };

        const citation_generated_text = `<p id="citation_generated_text" class="lab-hidden"></p>`;

        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            buttons,
            citation_generated_text,
            fields: {
                bodytext: this.rootModel.get('fields.bodytext'),
                generatedContent: this.rootModel.get('fields.generatedContent'),
                original_text: this.rootModel.get('fields.original_text')

            }
        }, true);

        this.markup = markup;
        return markup;

    }

    display() {

        const markup = this.getMarkup();
        this.api.v1.ui.modal.dialog({
            content: {
                header: 'Generate citation article',
                markup: markup.innerHTML
            },
            footer: {
                informalText: '<strong>This function in Labrador CMS is using advanced artificial intelligence developed by OpenAI API.</strong><br>Text from the article is not used to train or improve the public data models. Use generated text from these functions as suggestions, and be sure to manually verify them. Labrador CMS shall not be held liable for any use of the generated text. For now the use of these functions are covered by your Labrador CMS license. We might change this in the future, when we know more about our operational costs.',
                buttons: [{
                    type: 'submit',
                    value: 'OK',
                    class: 'lab-hidden',
                    highlight: true
                }]
            },
            callbacks: {
                didDisplay: (modal) => {
                    const modalMarkup = modal.getMarkup();

                    // Initialise content generation
                    const btnGenerate = modalMarkup.querySelector(`#suggest-btn-generate_content`);
                    const info_input = modalMarkup.querySelector('#info_input');
                    const generatedText = modalMarkup.querySelector(`#citation_generated_text`);
                    const inputArea = modalMarkup.querySelector(`#input-area`);
                    const generatedArea = modalMarkup.querySelector('#generated_text_area');

                    // Button - generate data
                    btnGenerate.addEventListener('click', (event) => {

                        // Input fields
                        const original_content = modalMarkup.querySelector('#citation_original_text').value;
                        const original_source = modalMarkup.querySelector('#citation_original_source').value;
                        const original_url = modalMarkup.querySelector('#citation_original_url').value;

                        // Input for text assistant
                        const style = 'Journalistic';
                        const tone = 'Journalistic';

                        if (original_content && original_source && original_url) {
                            // Start fetch from textAssistant
                            if (original_content.length < 400) {
                                info_input.classList.remove('lab-hidden');
                                info_input.textContent = 'The copied text must be at least 400 characters long.';
                                Sys.logger.error('Error: The original article content must have at least 400 characters');

                            } else {
                                // State change - good input
                                modal.setBusyState(true);
                                info_input.classList.add('lab-hidden');
                                btnGenerate.classList.add('lab-disabled');

                                // Generate citation article
                                this.api.v1.ns.get('textAssistant.fetchByGroupName')('article_citation', this.aiOptions, {
                                    tone, style, original_content, original_source, original_url
                                }).then((respons) => {
                                    // Hide input area
                                    inputArea.classList.add('lab-hidden');

                                    // Clean up respons
                                    let result = { article: '' };
                                    if (!respons.startsWith('{')) {
                                        result = { article: respons };
                                    } else {
                                        result = JSON.parse(respons);
                                    }

                                    // Show generated text
                                    generatedText.textContent = result.article;
                                    generatedArea.classList.remove('lab-hidden');

                                    modal.setBusyState(false);

                                });
                            }
                        } else {
                            // State change - show bad input
                            info_input.textContent = 'You need to add data to all fields and the article content must be at least 400 characters long.';
                            info_input.classList.remove('lab-hidden');

                            Sys.logger.error('Error: There is not enough input data to generate an citation article from');
                        }

                    });

                    // Overwrite bodytext
                    const btnOverwrite = modalMarkup.querySelector(`#suggest-btn-overwrite-content`);
                    if (this.bodytext && this.bodytext.length > 0 && this.bodytext !== this.temporaryContent) {
                        btnOverwrite.classList.remove('lab-hidden');
                    }
                    btnOverwrite.addEventListener('click', (event) => {
                        this.contentUpdate = generatedText.textContent;
                        this.contentRemove = this.bodytext;
                        modal.close();
                    });

                    // Insert into bodytext
                    const btnInsert = modalMarkup.querySelector(`#suggest-btn-insert-content`);
                    btnInsert.addEventListener('click', (event) => {
                        this.contentUpdate = generatedText.textContent;
                        this.contentRemove = this.temporaryContent;
                        modal.close();
                    });

                    // Retry
                    const btnRety = modalMarkup.querySelector(`#suggest-btn-retry`);
                    btnRety.addEventListener('click', (event) => {
                        btnGenerate.classList.remove('lab-disabled');
                        inputArea.classList.remove('lab-hidden');
                        generatedArea.classList.add('lab-hidden');
                    });

                    // Reject
                    const btnReject = modalMarkup.querySelector(`#suggest-btn-reject-content`);
                    btnReject.addEventListener('click', (event) => {
                        this.contentUpdate = '';
                        this.contentRemove = this.temporaryContent;
                        modal.close();
                    });
                },

                end: () => {
                    // Handle insert
                    if (this.bodytext && (this.bodytext !== this.contentRemove)) {
                        this.bodytext = this.rootModel.get('fields.bodytext');
                        this.contentUpdate = this.bodytext.replace(this.contentRemove, this.contentUpdate);

                    }
                    // Clean up
                    this.contentUpdate = this.contentUpdate.replaceAll(this.temporaryContent, '');

                    // Update bodytext
                    this.rootModel.set('fields.bodytext', this.contentUpdate);

                }
            }

        });
    }
    /*
    getMarkup() {
        return this.modal;
    }
    */

}


/***/ }),

/***/ "./modules/apps/article/ArticleCommercialSettings.js":
/*!***********************************************************!*\
  !*** ./modules/apps/article/ArticleCommercialSettings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleCommercialSettings": () => (/* binding */ ArticleCommercialSettings)
/* harmony export */ });
class ArticleCommercialSettings {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.dom = {};
        this.helpers = params.helpers;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12">Commercial settings</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="paywall">Paywall - Require subscription</label>
                    <input type="checkbox" name="fields.paywall" id="paywall" value="1" {{ #fields.paywall }}checked{{ /fields.paywall }}>
                </div>
                {{ #enableShareableArticle }}
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="paywall">Let paywalled article be shareable</label>
                    <input type="checkbox" name="fields.paywallShareable" id="paywallShareable" value="1" {{ #fields.paywallShareable }}checked{{ /fields.paywallShareable }}>
                </div>
                {{ /enableShareableArticle }}
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="hideAds">Hide ads</label>
                    <input type="checkbox" name="fields.hideAds" id="hideAds" value="1" {{ #fields.hideAds }}checked{{ /fields.hideAds }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="hideSkyscraperAds">Hide skyscraper ads</label>
                    <input type="checkbox" name="fields.hideSkyscraperAds" id="hideSkyscraperAds" value="1" {{ #fields.hideSkyscraperAds }}checked{{ /fields.hideSkyscraperAds }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="hideTopBannerAd">Hide top banner ad</label>
                    <input type="checkbox" name="fields.hideTopBannerAd" id="hideTopBannerAd" value="1" {{ #fields.hideTopBannerAd }}checked{{ /fields.hideTopBannerAd }}>
                </div>
                <h3 class="lab-grid-large-12">Link Relationship Attributes for this Article (Rel)</h3>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <input type="checkbox" id="addRelUgc" name="fields.addRelUgc" value="1" {{ #fields.addRelUgc }}checked{{ /fields.addRelUgc }}>
                    <label for="addRelUgc">User-generated content</label>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <input type="checkbox" id="addRelSponsored" name="fields.addRelSponsored" value="1" {{ #fields.addRelSponsored }}checked{{ /fields.addRelSponsored }}>
                    <label for="addRelSponsored">Sponsored</label>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <input type="checkbox" id="addRelNoFollow" name="fields.addRelNoFollow" value="1" {{ #fields.addRelNoFollow }}checked{{ /fields.addRelNoFollow }}>
                    <label for="addRelNoFollow">No-follow</label>
                </div>
                 <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <p class="lab-info">Select the appropriate "rel" attributes to apply to this article teaser. These settings help with SEO and indicate the nature of a linked content (This article).</p>
                </div>
            </div>
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Commercial settings'
        };
    }

    onPaths() {
        return {
            'fields.paywall': { node: 'fields.paywall', boolean: true },
            'fields.paywallShareable': { node: 'fields.paywallShareable', boolean: true },
            'fields.hideAds': { node: 'fields.hideAds', boolean: true, suggestReload: true },
            'fields.hideSkyscraperAds': { node: 'fields.hideSkyscraperAds', boolean: true },
            'fields.hideTopBannerAd': { node: 'fields.hideTopBannerAd', boolean: true },
            'fields.addRelUgc': { node: 'fields.addRelUgc', boolean: true },
            'fields.addRelSponsored': { node: 'fields.addRelSponsored', boolean: true },
            'fields.addRelNoFollow': { node: 'fields.addRelNoFollow', boolean: true }
        };
    }

    onMarkup() {
        // Shareable article is enabled in admin -> Article settings -> Commercial settings
        let enableShareableArticle = false;
        const enabledSettings = this.api.v1.config.get('commercial_settings');
        if (enabledSettings && enabledSettings.shareableArticle && enabledSettings.shareableArticle === true) {
            enableShareableArticle = true;
        }

        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                paywall: this.helpers.toBoolean(this.rootModel.get('fields.paywall')),
                paywallShareable: this.helpers.toBoolean(this.rootModel.get('fields.paywallShareable')),
                hideAds: this.helpers.toBoolean(this.rootModel.get('fields.hideAds')),
                hideSkyscraperAds: this.helpers.toBoolean(this.rootModel.get('fields.hideSkyscraperAds')),
                hideTopBannerAd: this.helpers.toBoolean(this.rootModel.get('fields.hideTopBannerAd')),
                addRelUgc: this.helpers.toBoolean(this.rootModel.get('fields.addRelUgc')),
                addRelSponsored: this.helpers.toBoolean(this.rootModel.get('fields.addRelSponsored')),
                addRelNoFollow: this.helpers.toBoolean(this.rootModel.get('fields.addRelNoFollow'))
            },
            enableShareableArticle
        }, true);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleDates.js":
/*!**********************************************!*\
  !*** ./modules/apps/article/ArticleDates.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleDates": () => (/* binding */ ArticleDates)
/* harmony export */ });
class ArticleDates {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.dom = {
            'fields.published': {
                date: null,
                time: null
            },
            'fields.hidefromfp_time': {
                date: null,
                time: null
            },
            'fields.calendar_start_date': {
                date: null,
                time: null
            },
            'fields.calendar_end_date': {
                date: null,
                time: null
            }
        };
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap">Published date</h2>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium">
                    <label for="publishedDate">Date</label>
                    <input type="date" id="publishedDate" name="fields.published" value="{{ datetime.publishDate }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium">
                    <label for="publishedTime">Time</label>
                    <input type="time" id="publishedTime" name="fields.published" value="{{ datetime.publishTime }}">
                </div>
            </div>

            <div class="lab-formgroup lab-grid">
                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">Hide on front after</h4>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small">
                    <label for="hidefromfp_timeDate">Date</label>
                    <input type="date" id="hidefromfp_timeDate" name="fields.hidefromfp_time" value="{{ datetime.hideDate }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small">
                    <label for="hidefromfp_timeTime">Time</label>
                    <input type="time" id="hidefromfp_timeTime" name="fields.hidefromfp_time" value="{{ datetime.hideTime }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-medium">
                    <p class="lab-info">
                        This date affects automatic articles on front pages.
                    </p>
                </div>
            </div>

            <div class="lab-formgroup lab-grid">
                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">Calendar dates</h4>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium">
                    <label for="calendar_start_date-date">From Date</label>
                    <input type="date" id="calendar_start_date-date" name="fields.calendar_start_date" value="{{ datetime.calendarFromDate }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-medium">
                    <label for="calendar_start_date-time">From Time</label>
                    <input type="time" id="calendar_start_date-time" name="fields.calendar_start_date" value="{{ datetime.calendarFromTime }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small">
                    <label for="calendar_end_date-date">To Date</label>
                    <input type="date" id="calendar_end_date-date" name="fields.calendar_end_date" value="{{ datetime.calendarToDate }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap lab-space-below-small">
                    <label for="calendar_end_date-time">To Time</label>
                    <input type="time" id="calendar_end_date-time" name="fields.calendar_end_date" value="{{ datetime.calendarToTime }}">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-medium">
                    <p class="lab-info">
                        The calendar dates are used by elements like <span class="lab-label">Article Calendar</span> and <span class="lab-label">Article Scroller</span> to limit visibility to a date range.
                    </p>
                </div>
            </div>

        </div>`;
    }

    // {"published":1638362580,"hidefromfp_time":1750153380}}]
    // {"calendar_start_date":"2022-03-01T03:00:00Z"}
    // {"calendar_end_date":"2030-03-01T11:59:00Z"}

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Dates'
        };
    }

    onPaths() {
        return {
            'fields.published': {
                node: 'fields.published',
                transformer: (value, pathInfo) => this.dateTransformer(pathInfo)
            },
            'fields.hidefromfp_time': {
                node: 'fields.hidefromfp_time',
                transformer: (value, pathInfo) => this.dateTransformer(pathInfo)
            },
            'fields.calendar_start_date': {
                node: 'fields.calendar_start_date',
                transformer: (value, pathInfo) => this.dateTransformer(pathInfo, false)
            },
            'fields.calendar_end_date': {
                node: 'fields.calendar_end_date',
                transformer: (value, pathInfo) => this.dateTransformer(pathInfo, false)
            }
        };
    }

    dateTransformer(pathInfo, toTimestamp = true) {
        const date = this.dom[pathInfo.node].date.value;
        const time = this.dom[pathInfo.node].time.value;
        if (!date) { return ''; }
        if (toTimestamp) {
            return this.getTimestamp(date, time);
        }
        return `${ new Date(`${ date }T${ time || '00:00' }`).toISOString().split('.')[0] }Z`;
    }

    onMarkup() {
        const datetime = {
            publishDate: '',
            publishTime: '',
            hideDate: '',
            hideTime: '',
            calendarFromDate: '',
            calendarFromTime: '',
            calendarToDate: '',
            calendarToTime: ''
        };

        const published = this.rootModel.get('fields.published'); // timestamp
        const hidefromfp_time = this.rootModel.get('fields.hidefromfp_time'); // timestamp
        const calendar_start_date = this.rootModel.get('fields.calendar_start_date'); // ISO-date
        const calendar_end_date = this.rootModel.get('fields.calendar_end_date'); // ISO-date

        if (published) {
            const dt = this.getDateTime(published);
            datetime.publishDate = dt.date;
            datetime.publishTime = dt.time;
        }
        if (hidefromfp_time) {
            const dt = this.getDateTime(hidefromfp_time);
            datetime.hideDate = dt.date;
            datetime.hideTime = dt.time;
        }
        if (calendar_start_date) {
            const timestamp = new Date(calendar_start_date).valueOf() / 1000;
            const dt = this.getDateTime(timestamp);
            datetime.calendarFromDate = dt.date;
            datetime.calendarFromTime = dt.time;
        }
        if (calendar_end_date) {
            const timestamp = new Date(calendar_end_date).valueOf() / 1000;
            const dt = this.getDateTime(timestamp);
            datetime.calendarToDate = dt.date;
            datetime.calendarToTime = dt.time;
        }

        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            datetime
        }, true);
        this.dom['fields.published'].date = markup.querySelector('#publishedDate');
        this.dom['fields.published'].time = markup.querySelector('#publishedTime');
        this.dom['fields.hidefromfp_time'].date = markup.querySelector('#hidefromfp_timeDate');
        this.dom['fields.hidefromfp_time'].time = markup.querySelector('#hidefromfp_timeTime');
        this.dom['fields.calendar_start_date'].date = markup.querySelector('#calendar_start_date-date');
        this.dom['fields.calendar_start_date'].time = markup.querySelector('#calendar_start_date-time');
        this.dom['fields.calendar_end_date'].date = markup.querySelector('#calendar_end_date-date');
        this.dom['fields.calendar_end_date'].time = markup.querySelector('#calendar_end_date-time');

        return markup;
    }

    getTimestamp(date, time) {
        const d = new Date(`${ date  }T${  time || '00:00'  }Z`);
        const localDate = new Date(d.valueOf() + d.getTimezoneOffset() * 60000);
        return localDate.getTime() / 1000;
    }

    getDateTime(timestamp) {
        const date = new Date(timestamp * 1000);
        let month = date.getMonth() + 1;
        if (month < 10) month = `0${ month }`;
        let day = date.getDate();
        if (day < 10) day = `0${ day }`;
        let hour = date.getHours();
        if (hour < 10) hour = `0${ hour }`;
        let minute = date.getMinutes();
        if (minute < 10) minute = `0${ minute }`;

        return {
            date: `${ date.getFullYear()  }-${  month  }-${  day }`, // yyyy-mm-dd
            time: `${ hour  }:${  minute }` // hh:mm
        };
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleGeneralTeaser.js":
/*!******************************************************!*\
  !*** ./modules/apps/article/ArticleGeneralTeaser.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleGeneralTeaser": () => (/* binding */ ArticleGeneralTeaser)
/* harmony export */ });
class ArticleGeneralTeaser {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.setter = params.setter;
        this.log = params.log;
        this.enabled = true;
        this.dom = {
            crops: null,
            teasers: {
                kicker: null,
                teaserTitle: null,
                teaserSubtitle: null
            },
            tagHandlerContainer: null,
            tagHandler: null,
            sectionElement: null,
            focusTagInput: false
        };
        this.models = {
            pano: null,
            height: null
        };
        const ar = this.api.v1.config.get('image.defaultAspectRatio') || 0.5;
        this.cropContainer = {
            panow: 270,
            panoh: Math.round(ar * 270),
            heightw: 130,
            heighth: 210
        };
        if (this.cropContainer.panoh > 150) {
            this.cropContainer.panoh = 150;
            this.cropContainer.panow = Math.round(150 / ar);
        }

        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/view/css/apps/generalTags.css');
        this.bindingsHandler = this.onMarkup.bind(this);

        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-space-below-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none">Front Crop & Teaser</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap" style="min-height: 220px;">
                    <div data-placeholder="lab-frontcrops">
                        <!-- Children replaced -->
                    </div>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right">
                    <input type="button" id="btn-remove-crops" value="Remove image">
                    <label>
                        <span class="lab-btn">Upload image</span>
                        <input type="file" id="btn-upload-image" value="Upload image" class="lab-hidden">
                    </label>
                    <input type="button" id="btn-change-crops" value="Change image">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-large">
                    <label for="teaser-kicker">Kicker used on front pages</label>
                    <input type="text" name="fields.teaserKicker" id="teaser-kicker" value="{{{ fields.teaserKicker }}}" placeholder="${ this.getPlaceholderText('teaserKicker') }">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label>Title used on front pages</label>
                    <span class="lab-link" id="copy-title-btn" style="float: right;">Copy title</span>
                    <p class="lab-input-text" id="teaser-title" data-input-type-text data-input-key="fields.teaserTitle" placeholder="Teaser Title ...">{{{ fields.teaserTitle }}}</p>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label>Subtitle used on front pages</label>
                    <span class="lab-link" id="copy-subtitle-btn" style="float: right;">Copy subtitle</span>
                    <p class="lab-input-text" id="teaser-subtitle" data-input-type-text data-input-key="fields.teaserSubtitle" placeholder="Teaser Subtitle ...">{{{ fields.teaserSubtitle }}}</p>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <p class="lab-info">Front-page versions are used when the article is added to a page as a teaser.</p>
                </div>
            </div>

            <div class="lab-formgroup lab-grid lab-space-below-small">
                <h2 class="lab-title lab-grid-large-12">Tags <span class="lab-btn lab-xsmall lab-generate lab-busy-top" id="suggest-btn-tags" style="float:right; position:relative; font-size: 1rem;">Generate new tags</span></h2>
                <div class="lab-grid lab-grid-large-12" data-handler="tagHandler"></div>
            </div>

            <div class="lab-formgroup lab-grid lab-space-below-large">
                <div class="lab-formgroup-item lab-grid-large-12">
                    <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none">Section</h2>
                    <select name="primaryTags.section" id="sections">
                        <option value="">Select Section</option>
                        {{ #sections }}
                        <option value="{{ name }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /sections }}
                    </select>
                    <p id="section-label">{{ #section }}Selected section: <strong>{{ section }}</strong>{{ /section }}{{ ^section }}No section selected{{ /section }}</p>
                </div>
            </div>

            <div class="lab-formgroup lab-grid lab-space-below-large">
                <br><br><br><br>
                <!-- space to allow tag-suggestions ... -->
            </div>

            
 
        </div>`;

        this.uploader = null;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Front Crop & Teaser'
        };
    }

    onPaths() {
        return {
            'fields.teaserKicker': {
                node: 'fields.teaserKicker',
                transformer: (value, pathInfo) => {
                    const v = value.trim();
                    return v === this.rootModel.get('fields.kicker') ? '' : v;
                }
            },
            'fields.teaserSubtitle': {
                node: 'fields.teaserSubtitle',
                transformer: (value, pathInfo) => {
                    const v = value.trim();
                    return v === this.rootModel.get('fields.subtitle') ? '' : v;
                }
            },
            'fields.teaserTitle': {
                node: 'fields.teaserTitle',
                transformer: (value, pathInfo) => {
                    const v = value.trim();
                    return v === this.rootModel.get('fields.title') ? '' : v;
                }
            }
        };
    }

    getPlaceholderText(field) {
        return `Click to add ${ field }`;
    }

    onMarkup() {
        const section = (this.rootModel.get('primaryTags.section') || '').toLowerCase();
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                teaserKicker: this.api.v1.util.string.stripTags(this.rootModel.get('fields.teaserKicker') || this.rootModel.get('fields.kicker')),
                teaserSubtitle: this.rootModel.get('fields.teaserSubtitle') || this.api.v1.util.string.stripTags(this.rootModel.get('fields.subtitle') || this.getPlaceholderText('teaserSubtitle')),
                teaserTitle: this.rootModel.get('fields.teaserTitle') || this.api.v1.util.string.stripTags(this.rootModel.get('fields.title') || this.getPlaceholderText('teaserTitle'))
            },
            sections: (this.api.v1.config.get('tags.section') || []).map((name) => ({ name: name.toLowerCase(), selected: name.toLowerCase() === section })),
            section,
            tags: this.rootModel.get('tags')
        }, true);
        this.dom.crops = markup.querySelector('[data-placeholder="lab-frontcrops"]');

        this.api.v1.article.frontcrop.get().then((data) => {
            this.setFrontCrops(data, true);
        });

        const btnChange = markup.querySelector('#btn-change-crops');
        btnChange.addEventListener('click', (event) => {
            this.changeCrops();
        }, false);

        const btnRemove = markup.querySelector('#btn-remove-crops');
        btnRemove.addEventListener('click', (event) => {
            this.removeCrops();
        }, false);

        const btnUpload = markup.querySelector('#btn-upload-image');
        btnUpload.addEventListener('change', (event) => {
            this.uploadFiles(event.target.files);
        }, false);

        this.dom.teasers.kicker = markup.querySelector('#teaser-kicker');
        this.dom.teasers.kicker.addEventListener('input', (event) => {
            const v = this.dom.teasers.kicker.value.trim();
            const rootValue = this.rootModel.get('fields.kicker');
            if (rootValue === v) {
                this.dom.teasers.kicker.classList.add('lab-disabled');
            } else {
                this.dom.teasers.kicker.classList.remove('lab-disabled');
            }
        }, false);
        this.dom.teasers.kicker.dispatchEvent(new Event('input'));

        this.dom.teasers.teaserTitle = markup.querySelector('#teaser-title');
        this.dom.teasers.teaserSubtitle = markup.querySelector('#teaser-subtitle');
        this.updateDisabledState('teaserTitle', !!this.rootModel.get('fields.teaserTitle'), 'title');
        this.updateDisabledState('teaserSubtitle', !!this.rootModel.get('fields.teaserSubtitle'), 'subtitle');

        const btnCopyTitle = markup.querySelector('#copy-title-btn');
        btnCopyTitle.addEventListener('click', (event) => {
            // Copy title from article to teaser. Use innerText to remove rich text. If empty, add placeholder text.
            this.dom.teasers.teaserTitle.innerHTML = this.rootModel.get('fields.title') || '';
            this.dom.teasers.teaserTitle.innerHTML = this.dom.teasers.teaserTitle.innerText;
            this.setter('fields.teaserTitle', this.dom.teasers.teaserTitle.innerHTML);
            if (this.dom.teasers.teaserTitle.innerHTML === '') {
                this.dom.teasers.teaserTitle.innerHTML = this.getPlaceholderText('teaserTitle');
            }
            this.updateDisabledState('teaserTitle', false, 'title');
        }, false);
        const btnCopySubtitle = markup.querySelector('#copy-subtitle-btn');
        btnCopySubtitle.addEventListener('click', (event) => {
            // Copy subtitle from article to teaser. Use innerText to remove rich text. If empty, add placeholder text.
            this.dom.teasers.teaserSubtitle.innerHTML = this.rootModel.get('fields.subtitle') || '';
            this.dom.teasers.teaserSubtitle.innerHTML = this.dom.teasers.teaserSubtitle.innerText;
            this.setter('fields.teaserSubtitle', this.dom.teasers.teaserSubtitle.innerHTML);
            if (this.dom.teasers.teaserSubtitle.innerHTML === '') {
                this.dom.teasers.teaserSubtitle.innerHTML = this.getPlaceholderText('teaserSubtitle');
            }
            this.updateDisabledState('teaserSubtitle', false, 'subtitle');
        }, false);

        this.api.v1.apps.start('TextEdit').then((textTool) => {
            this.setupRichTextEditing(textTool, markup);
        }).catch((error) => {
            console.log(`Error loading TextEdit-app: ${ error }`);
        });

        const method = lab_api.v1.ns.get('textAssistant.fetchByName');
        const btnTags = markup.querySelector('#suggest-btn-tags');
        if (method) {
            btnTags.addEventListener('click', (event) => {
                btnTags.classList.add('lab-busy');
                method('tags').then((result) => {
                    if (result.tags) {
                        if (result && Array.isArray(result.tags)) {
                            this.api.v1.util.tags.set(result.tags);
                            this.log({
                                type: 'data',
                                app: this.constructor.name,
                                path: 'tags'
                            });
                        } else {
                            console.log('Error: No array returned ...');
                        }
                    }
                    btnTags.classList.remove('lab-busy');
                }).catch((error) => {
                    btnTags.classList.remove('lab-busy');
                    console.log('error: ', error);
                });
            }, false);
        } else {
            btnTags.classList.add('lab-disabled');
        }

        const tagHandlerContainer = markup.querySelector('[data-handler="tagHandler"]');
        const sectionElement = markup.querySelector('[name="primaryTags.section"]');
        const sectionLabel = markup.querySelector('#section-label');

        if (this.dom.tagHandlerContainer) { this.dom.tagHandlerContainer.replaceWith(tagHandlerContainer); }
        if (this.dom.sectionElement) { this.dom.sectionElement.replaceWith(sectionElement); }
        if (this.dom.sectionLabel) { this.dom.sectionLabel.replaceWith(sectionLabel); }

        this.dom.tagHandlerContainer = tagHandlerContainer;
        this.dom.sectionElement = sectionElement;
        this.dom.sectionLabel = sectionLabel;

        this.setupSections();
        this.setupTags();

        return markup;
    }

    onDisplayed(element) {
        this.addBindings();
    }

    onHidden(element) {
        this.removeBindings();
    }

    addBindings() {
        this.api.v1.model.bindings.bind(this.rootModel, 'tags', this.bindingsHandler);
        this.api.v1.model.bindings.bind(this.rootModel, 'primaryTags.section', this.bindingsHandler);
    }

    removeBindings() {
        this.api.v1.model.bindings.unbind(this.rootModel, 'tags', this.bindingsHandler);
        this.api.v1.model.bindings.unbind(this.rootModel, 'primaryTags.section', this.bindingsHandler);
    }

    async setupTags() {
        if (this.dom.tagHandler) {
            this.dom.tagHandlerContainer.appendChild(this.dom.tagHandler);
            return;
        }

        // Add UI to to add and remove tags from current article
        const tagHandler = await this.api.v1.util.tags.ui({
            callbacks: {

                // (Promise) User has selected a tag. Add it to current article
                add: (tag) => {
                    const inputEl = this.dom.tagHandler.querySelector('input');
                    if (inputEl) {
                        setTimeout(() => { inputEl.focus(); }, 100);
                    }
                    this.log({
                        type: 'data',
                        app: this.constructor.name,
                        path: 'tags'
                    });
                    return this.api.v1.util.tags.add(tag);
                },

                // (Promise) User has deleted a tag. Remove it from current article
                remove: (tag) => {
                    const inputEl = this.dom.tagHandler.querySelector('input');
                    if (inputEl) {
                        setTimeout(() => { inputEl.focus(); }, 100);
                    }
                    this.log({
                        type: 'data',
                        app: this.constructor.name,
                        path: 'tags'
                    });
                    return this.api.v1.util.tags.remove(tag);
                }
            },

            // If true, the tag-handler will return an object with the dom-element and a method to update the list of tags the UI will display
            returnObject: true,

            // Custom css classes
            // css: {
            //     container: 'container-css',
            //     search: 'search-css',
            //     suggestions: 'suggestions-css'
            // },

            // List of current tags
            tags: this.rootModel.get('tags'),

            // A value of true will display number of times this tag has been used ...
            detailedSearch: true,

            // Placeholder for the input field to search tags
            placeholder: 'Add tag ...'
        });
        this.dom.tagHandler = tagHandler.element;
        this.api.v1.model.bindings.bind(this.rootModel, 'tags', (target, path, value) => {
            tagHandler.updateTags(value);
        });
        this.dom.tagHandlerContainer.appendChild(this.dom.tagHandler);
    }

    setupSections() {
        this.dom.sectionElement.addEventListener('change', (event) => {
            if (!this.dom.sectionElement.value) { return; }
            const currentSection = (this.rootModel.get('primaryTags.section') || '').toLowerCase();
            this.rootModel.set('primaryTags.section', this.dom.sectionElement.value);
            if (currentSection && this.dom.sectionElement.value !== currentSection) {
                this.api.v1.util.tags.remove(currentSection);
            }
            this.api.v1.util.tags.add(this.dom.sectionElement.value);
            this.log({
                type: 'data',
                app: this.constructor.name,
                path: 'primaryTags.section'
            });
        }, false);
    }

    updateDisabledState(field, forceClean = false, compareField = null) {
        if (!this.dom.teasers[field]) { return; }
        const placeholderValue = this.getPlaceholderText(field);
        if (!forceClean && (this.rootModel.get(`fields.${ compareField || field }`) === this.dom.teasers[field].innerHTML || this.dom.teasers[field].innerHTML === placeholderValue)) {
            this.dom.teasers[field].classList.add('lab-disabled');
        } else {
            this.dom.teasers[field].classList.remove('lab-disabled');
        }
    }

    setupRichTextEditing(textTool, markup) {
        for (const element of markup.querySelectorAll('.lab-input-text')) {
            if (element && element instanceof HTMLElement) {
                const key = element.getAttribute('data-input-key') || 'no-key';
                this.setupRichTextEditingForElement(textTool, markup, element, key);
            }
        }
    }

    setupRichTextEditingForElement(textTool, markup, element, key) {
        const contentdata = {};
        lab_api.v1.util.object.set(key, this.rootModel.get(key), contentdata);
        textTool.register({
            element,
            simulatedData: {
                type: 'article',
                path: '',
                contentdata
            },
            toolSettings: {
                key,
                inlineOnly: true,
                displayCharCount: false,
                displaySelectionLength: false,
                displayWordCount: false,
                selectTextOnStart: true,
                placeholder: this.getPlaceholderText(key.replace('fields.', '')),
                attributes: {
                    text_size: {
                        active: false
                    }
                }
            },
            callbacks: {
                ended: (theKey, theValue) => {
                    this.setter(theKey, theValue);

                    this.log({
                        type: 'data',
                        app: this.constructor.name,
                        path: theKey
                    });

                    // Page-node needs 'fields.allowRichTextTeasers' for Labrador API to return rich text ...
                    this.rootModel.set('fields.allowRichTextTeasers', '1');
                    this.updateDisabledState(theKey.replace('fields.', ''), false, theKey.replace('fields.teaser', '').toLowerCase());
                },
                started: (tool, theKey) => {
                    this.updateDisabledState(theKey.replace('fields.', ''), true);
                }
            },
            menuSettings: {
                container: markup,
                items: {
                    textColor: {
                        group: 'g1',
                        inheritPath: 'menu/buttons/textColor.json'
                    },
                    textBackgroundColor: {
                        group: 'g1',
                        inheritPath: 'menu/buttons/textBackgroundColor.json'
                    },
                    bold: {
                        group: 'g2',
                        icon: 'labicon-text_bold',
                        callback: 'toggleAttribute',
                        key: 'font_weight',
                        attributes: {
                            class: 'font-weight-bold'
                        },
                        value: false,
                        onValue: 'font-weight-bold',
                        offValue: false,
                        bindToSelection: 'font_weight',
                        title: 'Font weight - Bold',
                        hotkeys: [{
                            key: 'B',
                            controlkeys: ['labCtrlKey'],
                            preventDefault: true,
                            overrideDisable: true
                        }]
                    },
                    italic: {
                        group: 'g2',
                        icon: 'labicon-text_italic',
                        callback: 'toggleAttribute',
                        key: 'italic',
                        attributes: {
                            class: 'italic'
                        },
                        value: false,
                        onValue: 'italic',
                        offValue: false,
                        bindToSelection: 'italic',
                        title: 'Italic',
                        hotkeys: [{
                            key: 'i',
                            controlkeys: ['labCtrlKey'],
                            preventDefault: true,
                            overrideDisable: true
                        }]
                    },
                    reset: {
                        group: 'g4',
                        icon: 'labicon-reset_style',
                        callback: 'reset',
                        title: 'Remove textformatting in selection for viewport'
                    }
                }
            }
        });
    }

    uploadFiles(filelist) {
        this.dom.crops.classList.add('lab-busy');
        if (!this.uploader) {
            this.uploader = new this.api.v1.tool.utils.ImageUploader({
                callbacks: {
                    uploadStart: (item) => {},
                    uploadProgress: (item) => {},
                    uploadFinished: (item) => { this.setFrontCropFromModel(null, item.result.file.success[0].id); },
                    uploadFailed: (item) => { this.dom.crops.classList.remove('lab-busy'); console.log('uploadFailed: ', item); },
                    uploadFinishedAll: (item) => {}
                }
            });
        }
        if (!this.hasValidFile(filelist)) {
            this.dom.crops.classList.remove('lab-busy');
            Sys.logger.warn('[uploadFiles] No valid image-file found. Upload cancelled.');
            return;
        }
        this.uploader.upload({ files: filelist });
    }

    hasValidFile(filelist) {
        if (!this.uploader) { return false; }
        for (const file of [...filelist]) {
            if (this.uploader.validateFile(file)) { return true; }
        }
        return false;
    }

    removeCrops() {
        this.dom.crops.classList.add('lab-busy');
        this.api.v1.article.frontcrop.clear();
        this.api.v1.model.delete(this.models.pano);
        this.api.v1.model.delete(this.models.height);
        this.models.pano = null;
        this.models.height = null;
        this.setFrontCrops(null);
    }

    changeCrops() {
        this.api.v1.collection.display({
            name: 'MediaImagesThisPage',
            modal: true,
            skipCache: true,
            options: {
                label: 'Images from this page',
                clickHandler: (model, element) => {
                    this.setFrontCropFromModel(model);
                },
                navigation: [
                    {
                        label: 'Display All images',
                        name: 'MediaImages',
                        modal: true,
                        skipCache: true,
                        options: {
                            label: 'All images',
                            archiveActive: false,
                            clickHandler: (model, element) => {
                                this.setFrontCropFromModel(model);
                            },
                            navigation: [
                                {
                                    label: 'Display This page',
                                    name: 'MediaImagesThisPage',
                                    modal: true,
                                    skipCache: true
                                }
                            ]
                        }
                    }
                ]
            }
        });
    }

    async setFrontCropFromModel(model, instance_of) {
        this.dom.crops.classList.add('lab-busy');
        const panoData = this.api.v1.util.object.merge(this.defaultCropData(), {
            contentdata: {
                instance_of: instance_of || model.get('instance_of'),
                fields: {
                    metadata_key: 'fcp'
                }
            }
        });
        const heightData = this.api.v1.util.object.merge(this.defaultCropData(), {
            contentdata: {
                instance_of: instance_of || model.get('instance_of'),
                fields: {
                    metadata_key: 'fch'
                }
            },
            type: 'image'
        });
        if (!model) {
            this.setFrontCropFromData(panoData, heightData);
            return;
        }

        this.validateCropModel(model).then((id) => {
            panoData.contentdata.instance_of = id;
            heightData.contentdata.instance_of = id;
            this.setFrontCropFromData(panoData, heightData);
        });
    }

    // (Promise)
    // If the image is external it will need to be downloaded by Labrador.
    // The media-collection should set nessesary data on the model for Labrador to fetch the external image.
    validateCropModel(model) {
        return new Promise((resolve, reject) => {
            if (model.get('instance_of')) {
                resolve(model.get('instance_of'));
            } else {
                this.api.v1.app.create(model).then((m) => {
                    resolve(model.get('instance_of'));
                }).catch((error) => {
                    reject(new Error('Cannot create instance_of-id.'));
                });
            }
        });
    }

    async setFrontCropFromData(pano, height) {
        await this.api.v1.article.frontcrop.set({
            pano,
            height
        });
        const panoData = { ...pano };
        const heightData = { ...height };

        this.models.pano = null;
        this.models.height = null;

        this.setFrontCrops({
            pano: panoData,
            height: heightData
        });
    }

    defaultCropData() {
        return {
            type: 'image',
            contentdata: {
                fields: {
                    croph: 100,
                    cropw: 100,
                    x: 0,
                    y: 0
                }
            }
        };
    }

    setFrontCrops(data, skipLog = false) {
        const cropData = data || {};
        const panoData = cropData.pano || this.defaultCropData();
        const heightData = cropData.height || this.defaultCropData();
        panoData.contentdata.fields.metadata_key = 'fcp';
        heightData.contentdata.fields.metadata_key = 'fch';

        if (!this.models.pano) {
            this.models.pano = this.getCropModel(panoData.contentdata.id, 'fcp');
        }
        if (!this.models.height) {
            this.models.height = this.getCropModel(heightData.contentdata.id, 'fch');
        }

        if (!this.models.pano && panoData.contentdata.instance_of) {
            this.models.pano = this.api.v1.model.create.view(panoData, { parentModel: this.rootModel });
        }
        if (!this.models.height && heightData.contentdata.instance_of) {
            this.models.height = this.api.v1.model.create.view(heightData, { parentModel: this.rootModel });
        }

        this.updateCropElements(!!panoData.contentdata.instance_of && !!heightData.contentdata.instance_of);

        // Add to UI log:
        if (!skipLog) {
            this.log({
                type: 'frontcrop',
                app: this.constructor.name,
                datatype: this.models.pano ? 'added' : 'removed'
            });
        }
    }

    getCropModel(id, type) {
        let model = null;
        if (id) {
            model = this.api.v1.model.query.getModelById(id);
        }
        if (model) {
            return model;
        }
        const models = this.api.v1.model.query.getModelsByType('image').filter((m) => m.get('fields.metadata_key') === type);
        return models[0] || null;
    }

    updateCropElements(hasData) {
        this.dom.crops.innerHTML = '';
        this.dom.crops.appendChild(this.createCropElements(hasData));
        this.dom.crops.classList.remove('lab-busy');
    }

    createCropElements(hasData) {
        if (!hasData) {
            return this.api.v1.util.dom.renderTemplate(`<div class="lab-grid lab-valign-center">
                <div class="crop-pano lab-grid-large-7 lab-grid lab-align-center">
                    <div class="lab-empty-placeholder lab-color-light lab-bordered" style="width: ${ this.cropContainer.panow }px; height: ${ this.cropContainer.panoh }px; padding-top: 10px;">
                        <div class="lab-inner">
                            <div class="lab-icon-large labicon-images"></div>
                        </div>
                    </div>
                </div>
                <div class="crop-height lab-grid-large-5 lab-grid lab-align-center">
                    <div class="lab-empty-placeholder lab-color-light lab-bordered" style="width: ${ this.cropContainer.heightw }px; height: ${ this.cropContainer.heighth }px; padding-top: 50px;">
                        <div class="lab-inner">
                            <div class="lab-icon-large labicon-images"></div>
                        </div>
                    </div>
                </div>
            </div>`, {}, true);
        }
        const imageServer = this.api.v1.properties.get('image_server');
        const pano = {
            cropw: this.models.pano.get('fields.cropw') || 100,
            croph: this.models.pano.get('fields.croph') || 100,
            x: this.models.pano.get('fields.x') || 0,
            y: this.models.pano.get('fields.y') || 0
        };
        const height = {
            cropw: this.models.height.get('fields.cropw') || 100,
            croph: this.models.height.get('fields.croph') || 100,
            x: this.models.height.get('fields.x') || 0,
            y: this.models.height.get('fields.y') || 0
        };
        const el = this.api.v1.util.dom.renderTemplate(`<div class="lab-grid lab-valign-center">
            <div class="crop-pano lab-grid-large-7 lab-grid lab-align-center">
                <span style="display:inline-block;"><img src="${ imageServer }/${ this.models.pano.get('instance_of') }.webp?imageId=${ this.models.pano.get('instance_of') }&width=${ this.cropContainer.panow }&height=${ this.cropContainer.panoh }&${ Object.keys(pano).map((key) => `${ key }=${ pano[key] }`).join('&') }"></span>
            </div>
            <div class="crop-height lab-grid-large-5 lab-align-center lab-grid">
                <span style="display:inline-block;"><img src="${ imageServer }/${ this.models.height.get('instance_of') }.webp?imageId=${ this.models.height.get('instance_of') }&width=${ this.cropContainer.heightw }&height=${ this.cropContainer.heighth }&${ Object.keys(height).map((key) => `${ key }=${ height[key] }`).join('&') }"></span>
            </div>
        </div>`, {}, true);
        const panoImage = el.querySelector('.crop-pano img');
        panoImage.addEventListener('click', (event) => { this.editCrop(panoImage, true); }, false);
        const heightImage = el.querySelector('.crop-height img');
        heightImage.addEventListener('click', (event) => { this.editCrop(heightImage, false); }, false);
        return el;
    }

    editCrop(element, isPano) {
        const model = isPano ? this.models.pano : this.models.height;
        const offset = this.api.v1.viewport.getOffset();
        const crop = {
            x: model.get('fields.x') || 0,
            y: model.get('fields.y') || 0,
            cropw: model.get('fields.cropw') || 100,
            croph: model.get('fields.croph') || 100
        };
        const keyEventsIds = [];
        const endCallback = (theEditor) => {
            while (keyEventsIds.length > 0) {
                this.api.v1.util.keyEventHandler.remove(keyEventsIds.pop());
            }

            if (theEditor) {
                const serializedCrop = theEditor.end();
                model.set('fields.x', serializedCrop.x);
                model.set('fields.y', serializedCrop.y);
                model.set('fields.cropw', serializedCrop.cropw);
                model.set('fields.croph', serializedCrop.croph);
                this.log({
                    type: 'frontcrop',
                    app: this.constructor.name,
                    datatype: 'modified'
                });
            }
            this.updateCropElements(true);
        };
        const editor = new this.api.v1.tool.utils.ImageEditor({
            modal: false,
            container: {
                width: isPano ? 270 : 130,
                height: isPano ? 129 : 210,
                element: element.parentElement,
                cssList: ['lab-modal-overlay']
            },
            offset: {
                y: window.scrollY - offset.top
            },
            imageElement: {
                element
            },
            crop,
            tools: {
                resize: {
                    active: false
                }
            },
            imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ model.get('instance_of') }`
        }, {
            end: () => {
                endCallback(editor);
            }
        });
        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({
            key: 'Escape',
            callback: (event) => {
                editor.end();
                endCallback();
            },
            stopPropagation: true,
            preventDefault: true,
            overrideDisable: true
        }));
        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({
            key: 'S',
            controlkeys: ['labCtrlKey'],
            callback: (event) => {
                endCallback(editor);
            },
            stopPropagation: true,
            preventDefault: true,
            overrideDisable: true
        }));

    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleNotes.js":
/*!**********************************************!*\
  !*** ./modules/apps/article/ArticleNotes.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleNotes": () => (/* binding */ ArticleNotes)
/* harmony export */ });
class ArticleNotes {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12">Notes</h2>
                <div class="lab-formgroup-item lab-grid-large-12">
                    <label for="article_notes">Notes for this article. Only visible in the editor</label>
                    <textarea id="article_notes" name="fields.articleNotes" style="height: 480px;" placeholder="Info for editors, front-desk or other journalists ...">{{{ fields.articleNotes }}}</textarea>
                </div>
            </div>            

        </div>`;
    }

    onAside() {
        return {
            section: 'General',
            label: 'Notes'
        };
    }

    onPaths() {
        return {
            'fields.articleNotes': { node: 'fields.articleNotes' }
        };
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                articleNotes: this.rootModel.get('fields.articleNotes')
            }
        }, true);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleSite.js":
/*!*********************************************!*\
  !*** ./modules/apps/article/ArticleSite.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleSite": () => (/* binding */ ArticleSite)
/* harmony export */ });
class ArticleSite {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-large">Site for this article</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="site_id">Select site</label>
                    <select name="site_id" id="site_id">
                        {{#sites}}
                        <option value="{{value}}" {{#selected}}selected{{/selected}}>{{name}}</option>
                        {{/sites}}
                    </select>
                </div>
            </div>
        </div>`;
    }

    onAside() {
        return {
            section: 'Advanced',
            label: 'Site'
        };
    }

    onPaths() {
        return {
            site_id: { node: 'site_id', validator: 'notEmpty', suggestReload: true }
        };
    }

    onMarkup() {
        const siteId = lab_api.v1.site.getSite().id;
        const sites = this.api.v1.user.getSites().map((site) => ({ value: site.id, name: site.display_name, selected: site.id === siteId }));
        const markup = this.api.v1.util.dom.renderTemplate(this.template, { sites }, true);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleStyling.js":
/*!************************************************!*\
  !*** ./modules/apps/article/ArticleStyling.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleStyling": () => (/* binding */ ArticleStyling)
/* harmony export */ });
class ArticleStyling {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.dom = {};
        this.embeddable = this.api.v1.config.get('embeddable.active');
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-large">Styling</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-large">
                    <label for="article_style">Select style for this article</label>
                    <select name="fields.articleStyle" id="article_style">
                        <option value="">Default style</option>
                        {{ #articleStyles }}
                        <option value="{{ value }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /articleStyles }}
                    </select>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-large">
                    <label for="pageHeaderDisplay">Page header display</label>
                    <select name="fields.pageHeaderDisplay" id="pageHeaderDisplay">
                        <option value="">Default display</option>
                        {{ #pageHeaderDisplays }}
                         <option value="{{ value }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /pageHeaderDisplays }}
                    </select>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-large">
                    <label for="bodytext_width">Select width for this article's body text</label>
                    <select name="fields.bodytextWidth" id="bodytext_width">
                        <option value="">Default style</option>
                        {{ #bodytextWidths }}
                            <option value="{{ value }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /bodytextWidths }}
                    </select>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-large">
                    <label for="bodytext_alignment">Select alignment for this article's body text</label>
                    <select name="fields.bodytextAlignment" id="bodytext_alignment">
                        <option value="">Default style</option>
                        {{ #bodytextAlignments }}
                            <option value="{{ value }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /bodytextAlignments }}
                    </select>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-large">
                    <label for="header_width">Select width of header elements</label>
                    <select name="fields.articleHeaderWidthSetup" id="header_width">
                        <option value="">Default style</option>
                        {{ #headerWidths }}
                            <option value="{{ value }}"{{ #selected }} selected{{ /selected }}>{{ name }}</option>
                        {{ /headerWidths }}
                    </select>
                </div>

                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="hidePublishedDate">Hide published date</label>
                    <input type="checkbox" value="1" name="fields.hidePublishedDate" id="hidePublishedDate" {{ #fields.hidePublishedDate }}checked{{ /fields.hidePublishedDate }}>
                </div>

                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="showcomments">Show comments</label>
                    <input type="checkbox" value="1" name="fields.showcomments" id="showcomments" {{ #fields.showcomments }}checked{{ /fields.showcomments }}>
                </div>

                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="showbylineonfp">Show byline on front</label>
                    <input type="checkbox" value="1" name="fields.showbylineonfp" id="showbylineonfp" {{ #fields.showbylineonfp }}checked{{ /fields.showbylineonfp }}>
                </div>

                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="style_slidein">Slide-in effect</label>
                    <input type="checkbox" value="1" name="fields.style_slidein" id="style_slidein" {{ #fields.style_slidein }}checked{{ /fields.style_slidein }}>
                </div>

                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="style_spacing">Enable custom space editing</label>
                    <input type="checkbox" value="1" name="fields.style_spacing" id="style_spacing" {{ #fields.style_spacing }}checked{{ /fields.style_spacing }}>
                </div>

                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="showMetaAboveImage">Show dateline/bylines above image</label>
                    <input type="checkbox" value="1" name="fields.showMetaAboveImage" id="showMetaAboveImage" {{ #fields.showMetaAboveImage }}checked{{ /fields.showMetaAboveImage }}>
                </div>

                {{ #displayReadProgressOption }}
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="displayReadProgress">
                    Display read progress
                    {{ #displayReadProgressOptionWarning }}
                        (article is too short)
                    {{ /displayReadProgressOptionWarning }}
                    </label>
                    <input type="checkbox" value="1" name="fields.displayReadProgress" id="displayReadProgress" {{ #fields.displayReadProgress }}checked{{ /fields.displayReadProgress }} {{ #displayReadProgressOptionWarning }}disabled{{ /displayReadProgressOptionWarning }}>
                </div>
                {{ /displayReadProgressOption }}
                {{ #displayReadTimeOption }}
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="displayReadTime">Display read-time</label>
                    <input type="checkbox" value="1" name="fields.displayReadTime" id="displayReadTime" {{ #fields.displayReadTime }}checked{{ /fields.displayReadTime }}>
                </div>
                {{ /displayReadTimeOption }}
                <h3 class="lab-title lab-grid-large-12 lab-space-above-large">Display Social Media Icons</h3>
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="show_social_bodytext_before">Display icons above body text</label>
                    <input type="checkbox" value="1" name="fields.show_social_bodytext_before" id="show_social_bodytext_before" {{ #fields.show_social_bodytext_before }}checked{{ /fields.show_social_bodytext_before }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="show_social_bodytext_after">Display icons below body text</label>
                    <input type="checkbox" value="1" name="fields.show_social_bodytext_after" id="show_social_bodytext_after" {{ #fields.show_social_bodytext_after }}checked{{ /fields.show_social_bodytext_after }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="show_social_header">Display icons in header</label>
                    <input type="checkbox" value="1" name="fields.show_social_header" id="show_social_header" {{ #fields.show_social_header }}checked{{ /fields.show_social_header }}>
                </div>
                ${ this.embeddable ? `
                <h3 class="lab-title lab-grid-large-12 lab-space-above-large">Embed options</h3>
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="displayEmbedButton">Display embed button below body text</label>
                    <input type="checkbox" value="1" name="fields.displayEmbedButton" id="displayEmbedButton" {{ #fields.displayEmbedButton }}checked{{ /fields.displayEmbedButton }}>
                </div>
                <div class="lab-formgroup-item lab-grid-large-6 lab-inline">
                    <label for="displayEmbedButtonAboveBodytext">Display embed button above body text</label>
                    <input type="checkbox" value="1" name="fields.displayEmbedButtonAboveBodytext" id="displayEmbedButtonAboveBodytext" {{ #fields.displayEmbedButtonAboveBodytext }}checked{{ /fields.displayEmbedButtonAboveBodytext }}>
                </div>
                ` : '' }
            </div>
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Styling'
        };
    }

    onPaths() {
        return {
            'fields.articleStyle': {
                node: 'fields.articleStyle',
                callback: (element) => {
                    // Update selector on body-element for all viewports in the editor
                    // to allow preview without a reload.
                    // Assumes value of 'fields.articleStyle' is set on the body-element in template(s).
                    const docs = lab_api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.articleStyle');
                    for (const doc of docs) {
                        if (current) { doc.body.classList.remove(current); }
                        if (element.value) { doc.body.classList.add(element.value); }
                    }
                }
            },
            'fields.pageHeaderDisplay': {
                node: 'fields.pageHeaderDisplay',
                callback: (element) => {
                    const docs = lab_api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.pageHeaderDisplay');
                    for (const doc of docs) {
                        if (current) {
                            doc.body.classList.remove(current);
                        }
                        if (element.value) {
                            doc.body.classList.add(element.value);
                        }
                    }
                }
            },
            'fields.bodytextWidth': {
                node: 'fields.bodytextWidth',
                callback: (element) => {
                    // Update selector on body-element for all viewports in the editor
                    // to allow preview without a reload.
                    // Assumes value of 'fields.articleStyle' is set on the body-element in template(s).
                    const docs = lab_api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.bodytextWidth');
                    for (const doc of docs) {
                        if (current) {
                            doc.body.classList.remove('custom-bodytext-width');
                            doc.querySelector(':root').style.setProperty('--bodytext-width', 'var(--bodytext-width-default)');
                        }
                        if (element.value) {
                            doc.body.classList.add('custom-bodytext-width');
                            doc.querySelector(':root').style.setProperty('--bodytext-width', `var(${ element.value })`);
                        }
                    }
                }
            },
            'fields.bodytextAlignment': {
                node: 'fields.bodytextAlignment',
                callback: (element) => {
                    // Update selector on body-element for all viewports in the editor
                    // to allow preview without a reload.
                    // Assumes value of 'fields.bodytextAlignment' is set on the body-element in template(s).
                    const docs = lab_api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.bodytextAlignment');
                    for (const doc of docs) {
                        if (current) {
                            doc.body.classList.remove('custom-bodytext-alignment');
                            doc.querySelector(':root').style.setProperty('--bodytext-alignment', 'var(--bodytext-alignment-default)');
                        }
                        if (element.value) {
                            doc.body.classList.add('custom-bodytext-alignment');
                            doc.querySelector(':root').style.setProperty('--bodytext-alignment', `var(${ element.value })`);
                        }
                    }
                }
            },
            'fields.articleHeaderWidthSetup': {
                node: 'fields.articleHeaderWidthSetup',
                callback: (element) => {
                    const docs = lab_api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.articleHeaderWidthSetup');
                    for (const doc of docs) {
                        if (current) {
                            doc.body.classList.remove('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width', 'articleHeader-meta-bodytext-width');
                            this.rootModel.set('fields.articleHeaderBodytextWidth', false);
                            this.rootModel.set('fields.articleHeaderImageBodytextWidth', false);
                            this.rootModel.set('fields.articleMetaBodytextWidth', false);
                        }
                        switch (element.value) {
                            case 'everything':
                                doc.body.classList.add('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width', 'articleHeader-meta-bodytext-width');
                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);
                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', true);
                                this.rootModel.set('fields.articleMetaBodytextWidth', true);
                                break;
                            case 'everything-except-image':
                                doc.body.classList.add('articleHeader-bodytext-width', 'articleHeader-meta-bodytext-width');
                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);
                                this.rootModel.set('fields.articleMetaBodytextWidth', true);
                                break;
                            case 'everything-except-meta':
                                doc.body.classList.add('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width');
                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);
                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', true);
                                break;
                            case 'only-image':
                                doc.body.classList.add('articleHeader-image-bodytext-width');
                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', true);
                                break;
                            case 'only-meta':
                                doc.body.classList.add('articleHeader-meta-bodytext-width');
                                this.rootModel.set('fields.articleMetaBodytextWidth', true);
                                break;
                            case 'only-text':
                                doc.body.classList.add('articleHeader-bodytext-width');
                                this.rootModel.set('fields.articleHeaderBodytextWidth', true);
                                break;
                            default:
                                doc.body.classList.remove('articleHeader-bodytext-width', 'articleHeader-image-bodytext-width', 'articleHeader-meta-bodytext-width');
                                this.rootModel.set('fields.articleHeaderBodytextWidth', false);
                                this.rootModel.set('fields.articleHeaderImageBodytextWidth', false);
                                this.rootModel.set('fields.articleMetaBodytextWidth', false);
                                break;
                        }
                    }
                }
            },
            'fields.articleHeaderBodytextWidth': { node: 'fields.articleHeaderBodytextWidth', boolean: true },
            'fields.articleHeaderImageBodytextWidth': { node: 'fields.articleHeaderImageBodytextWidth', boolean: true },
            'fields.articleMetaBodytextWidth': { node: 'fields.articleMetaBodytextWidth', boolean: true },
            'fields.style_slidein': { node: 'fields.style_slidein', boolean: true },
            'fields.style_spacing': { node: 'fields.style_spacing', boolean: true, suggestReload: true },
            'fields.hidePublishedDate': { node: 'fields.hidePublishedDate', boolean: true },
            'fields.showcomments': { node: 'fields.showcomments', boolean: true },
            'fields.showbylineonfp': { node: 'fields.showbylineonfp', boolean: true },
            'fields.showMetaAboveImage': { node: 'fields.showMetaAboveImage', boolean: true },
            'fields.displayReadProgress': { node: 'fields.displayReadProgress', boolean: true },
            'fields.displayReadTime': { node: 'fields.displayReadTime', boolean: true },
            'fields.show_social_bodytext_after': { node: 'fields.show_social_bodytext_after', boolean: true },
            'fields.show_social_bodytext_before': { node: 'fields.show_social_bodytext_before', boolean: true },
            'fields.show_social_header': { node: 'fields.show_social_header', boolean: true },
            'fields.displayEmbedButton': { node: 'fields.displayEmbedButton', boolean: true, suggestReload: true },
            'fields.displayEmbedButtonAboveBodytext': { node: 'fields.displayEmbedButtonAboveBodytext', boolean: true, suggestReload: true }
        };
    }

    showReadProgressColumnsWarning() {
        const targetSelectors = ['.articleHeader', '.bodytext'];
        let elements = [];
        const docs = this.api.v1.viewport.getContexts();
        for (const doc of docs) {
            for (const target of (targetSelectors || [])) {
                const targetElement = doc.querySelector(target);
                if (targetElement) {
                    elements = elements.concat(Array.from(targetElement.children).filter((el) => !el.classList.contains('column')));
                }
            }
            // Only need to run this for one viewport
            break;
        }
        if (!elements.length) {
            Sys.logger.debug('[ReadProgress] Article has no length, show warning');
            return true;
        }
        const minElementCount = parseInt(this.api.v1.config.get('displayReadProgress.minElementCount') || 25, 10);
        if (elements.length < minElementCount) {
            Sys.logger.debug(`[ReadProgress] Article length (${  elements.length  }) is less than minimum ${  minElementCount  }, show warning`);
            return true;
        }

        return false;
    }

    onMarkup() {
        const socialDisplay = this.api.v1.config.get(`page_settings.article.social.display`) || {};

        const socialDisplayBodytextBefore = this.rootModel.get('fields.show_social_bodytext_before');
        const socialDisplayBodytextAfter = this.rootModel.get('fields.show_social_bodytext_after');
        const socialDisplayHeader = this.rootModel.get('fields.show_social_header');

        const currentArticleStyle = this.rootModel.get('fields.articleStyle');
        const articleStyles = (this.api.v1.config.get('articleStyles') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentArticleStyle }));
        const currentPageHeaderDisplay = this.rootModel.get('fields.pageHeaderDisplay');
        const pageHeaderDisplays = (this.api.v1.config.get('pageHeaderDisplays') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentPageHeaderDisplay }));
        const currentBodytextWidth = this.rootModel.get('fields.bodytextWidth');
        const bodytextWidths = (this.api.v1.config.get('bodytextWidths.desktop') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentBodytextWidth }));
        const currentBodytextAlignment = this.rootModel.get('fields.bodytextAlignment');
        const bodytextAlignments = (this.api.v1.config.get('bodytextAlignments') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentBodytextAlignment }));
        const currentHeaderWidths = this.rootModel.get('fields.articleHeaderWidthSetup');
        const headerWidths = (this.api.v1.config.get('headerWidths') || []).map((item) => ({ name: item.name, value: item.value, selected: item.value === currentHeaderWidths }));
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            articleStyles,
            pageHeaderDisplays,
            bodytextWidths,
            bodytextAlignments,
            headerWidths,
            fields: {
                showcomments: this.rootModel.get('fields.showcomments'),
                showbylineonfp: this.rootModel.get('fields.showbylineonfp'),
                articleStyle: this.rootModel.get('fields.articleStyle'),
                bodytextWidth: this.rootModel.get('fields.bodytextWidth'),
                bodytextAlignment: this.rootModel.get('fields.bodytextAlignment'),
                headerWidths: this.rootModel.get('fields.articleHeaderWidthSetup'),
                style_slidein: this.rootModel.get('fields.style_slidein'),
                style_spacing: this.rootModel.get('fields.style_spacing'),
                showMetaAboveImage: this.rootModel.get('fields.showMetaAboveImage'),
                hidePublishedDate: this.rootModel.get('fields.hidePublishedDate'),
                displayReadProgress: this.rootModel.get('fields.displayReadProgress'),
                displayReadTime: this.rootModel.get('fields.displayReadTime'),
                show_social_bodytext_after: socialDisplayBodytextAfter === null ? socialDisplay.bodytext_after : !!socialDisplayBodytextAfter,
                show_social_bodytext_before: socialDisplayBodytextBefore === null ?  socialDisplay.bodytext_before : !!socialDisplayBodytextBefore,
                show_social_header: socialDisplayHeader === null ? socialDisplay.header : !!socialDisplayHeader,
                displayEmbedButton: !!this.rootModel.get('fields.displayEmbedButton'),
                displayEmbedButtonAboveBodytext: !!this.rootModel.get('fields.displayEmbedButtonAboveBodytext'),
                pageHeaderDisplay: this.rootModel.get('fields.pageHeaderDisplay')
            },
            displayReadProgressOption: !!this.api.v1.config.get('displayReadProgress.active'),
            displayReadProgressOptionWarning: this.showReadProgressColumnsWarning(),
            displayReadTimeOption: !!this.api.v1.config.get('displayReadTime.active')
        }, true);

        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/article/ArticleTranslate.js":
/*!**************************************************!*\
  !*** ./modules/apps/article/ArticleTranslate.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleTranslate": () => (/* binding */ ArticleTranslate)
/* harmony export */ });
/* harmony import */ var _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/ContentLanguages.js */ "./modules/lib/helpers/ContentLanguages.js");


class ArticleTranslate {

    constructor(api) {
        this.api = api;
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.enabled = true;
        this.newCopyId = 0;
        this.translationTargets = this.api.v1.config.get('articleTranslationTargets');
        this.multiLanguageConfig = this.api.v1.config.get(`multiLanguage.languages`) || [];
        this.selectedLanguage = this.getPageLanguage();
        this.prototypes = [];
        this.defaultTemplate = `
            <div class="lab-modal-form lab-grid lab-hidden">
                <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">

                    <h2 class="lab-grid-large-12">Article translate</h2>
                    <div id="translationInfo" class="lab-grid-large-12">
                        <div id="btnTranslationInfo" style="cursor: pointer;">Labrador AI helps you with translating the article. <a href="#">Click for more info</a></div>
                        <p class="lab-hidden info"><b>Translate article</b> will translate the current article, while <b>Duplicate and translate</b> lets you make another article version that duplicates the current article and translates it.</p>
                        <p class="lab-hidden info">Duplicated articles need to be assigned a site and a prototype before they can be created. <a href="/settings/cp?page=multiLanguage" target="_blank">You can skip this step by adding default settings for your preferred language(s) for translation</a>. The language(s) will be visible in "Overview" below.</p>
                        <p class="lab-hidden info">You can also fine tune the translation into your preferred style by adding <a href="/settings/cp?page=labradorAi" target="_blank">custom prompt for your site</a>.</p>
                    </div>

                    <select id="languages">
                        <option value="">Select language</option>
                        {{ #languages }}
                        <option value="{{ code }}"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>
                        {{ /languages }}
                    </select>
                    <div id="infoTextMainArea" class="lab-hidden">Ongoing translation process of this article</div>
                    <progress id="progressBarMainArea" class="lab-hidden" value=0 min=0 max=0 style="width:100%; height:50px;"></progress>
                    <div id="btnAdvancedSettings" class="lab-btn lab-space-right-medium lab-hidden">Advanced settings</div>
                    <div id="btnTranslateThisArticle" class="lab-btn lab-generate lab-space-right-medium">Translate article</div>
                    <div id="btnPrepareNewCopy" class="lab-btn lab-align-right">Duplicate and translate</div>
                    <h2 class="lab-grid-large-12">Overview</h2>
                    <div id="copiesOverview" class="lab-grid lab-grid-gap" style="width: 100%;"></div>
                </div>
            </div>
        `;

        this.newCopyTemplate = `
            <div style="border: 1px solid black; width: 100%; margin: 5px; padding: 0 10px;">
                <div class="lab-formgroup lab-grid lab-space-above-none">
                    <div class="removeFromOverview" style="position: absolute; top: 10px; right: 10px; background-color:rgb(167, 17, 6); color: white; font-size: 16px; width: 20px; height: 20px; text-align: center; line-height: 20px; border-radius: 50%; cursor: pointer;">X</div>
                    <h3 style="width: 100%">Create a new version{{ #languageSelectionName }} for '{{ languageSelectionName }}'{{ /languageSelectionName }}</h3>
                    <p id="progress-info" class="lab-hidden"></p>
                    <progress id="progress-meter" class="lab-hidden" value=0 min=0 max=0 style="width:100%; height:50px;"></progress>
                    <label class="translationSelection" for="languages"><b>Translate to</b></label>
                    <select name="languages" class="languages translationSelection">
                        <option value="">Select language</option>
                        {{ #languages }}
                        <option value="{{ code }}"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>
                        {{ /languages }}
                    </select>

                    <div class="lab-formgroup-item lab-grid-large-5 lab-space-right-medium translationSelection">
                        <label for="site_id"><b>Select site</b></label>
                        <select name="site_id" class="site_id">
                            {{#sites}}
                            <option value="{{value}}" {{#selected}}selected{{/selected}}>{{name}}</option>
                            {{/sites}}
                        </select>
                    </div>

                    <div class="lab-formgroup-item lab-grid-large-5 translationSelection">
                        <label for="prototype_id"><b>Select prototype</b></label>
                        <select name="prototype_id" class="prototype_id">
                            {{#prototypes}}
                            <option value="{{value}}" {{#selected}}selected{{/selected}}>{{name}}</option>
                            {{/prototypes}}
                        </select>
                    </div>
                    <div id="btnCreateLinkedCopy" class="lab-btn lab-space-right-medium lab-hidden translationSelection">Duplicate article</div>
                    <div id="btnCreateNewTranslation" class="lab-btn lab-generate lab-align-right translationSelection">Duplicate and translate</div>
                </div>
            </div>
        `;

        this.existingCopyTemplate = `
            <div style="border: 1px solid black; width: 100%; margin: 5px; padding: 0 10px;">
                <div class="lab-formgroup lab-grid lab-space-above-none">
                    <h3 style="width: 100%">{{articleId}}: <em>{{ title }}</em></h3>

                    <div class="lab-formgroup-item lab-grid-large-3">Language</div><div class="lab-formgroup-item lab-grid-large-8">{{language}}</div>
                    <div class="lab-formgroup-item lab-grid-large-3">Status</div><div class="lab-formgroup-item lab-grid-large-8 status">{{status}}</div>

                    <div id="btnMakeChanges" class="lab-btn lab-space-right-medium lab-hidden">Sync with original version</div>
                    <div id="btnGoToArticle" class="lab-btn">Go to article</div>
                </div>
            </div>
        `;

    }

    onMarkup() {
        /**
         * Markup for the translate article function, in article settings
         */
        this.languages = _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"].map((language) => ({ name: language.name, code: language.code, selected: language.code === this.selectedLanguage }));
        this.setupPrototypes();
        this.markup = this.api.v1.util.dom.renderTemplate(this.defaultTemplate, {
            languages: this.languages,
            prototypes: this.prototypes
        }, true);

        const language = this.markup.querySelector('#languages');
        language.addEventListener('change', (event) => {
            this.selectedLanguage = language.value;
        });

        this.prepareNewCopyButton = this.markup.querySelector('#btnPrepareNewCopy');
        this.prepareNewCopyButton.addEventListener('click', () => {
            this.prepareNewCopy();
        });

        // Translation of THIS article, the one user is currently on
        this.btnTranslateThisArticle = this.markup.querySelector('#btnTranslateThisArticle');
        this.btnTranslateThisArticle.addEventListener('click', () => {
            this.btnTranslateThisArticle.classList.add('lab-disabled');
            this.markup.querySelector('#infoTextMainArea').classList.remove('lab-hidden');
            const progressBar = this.markup.querySelector('#progressBarMainArea');
            progressBar.classList.remove('lab-hidden');
            this.updateProgressBar(progressBar, { setAttributeValues: { value: 1, max: 10 } });

            const articleId = this.rootModel.get('id');
            const languageName = this.getLanguageName(this.selectedLanguage);

            // Get new copy data - getNodeAndData
            this.getNodeAndData(articleId).then((nodeData) => {
            // Translate content - translateContent
                const params = {
                    featureName: 'translateArticle',
                    language: languageName,
                    cleanUpJsonString: true,
                    updateModel: false
                };
                this.updateProgressBar(progressBar, { updateAttributes: ['value'] });
                this.translateNode(nodeData, params, true)
                    .then((response) => {
                        response.fields.hasTranslation = '1';
                        response.fields.seolanguage = this.selectedLanguage;
                        for (const child of response.children) {
                            this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                            this.overwriteNodeData(child.id, child.type, child);
                            if (child.children && child.children.length > 0) {
                                for (const grandChild of child.children) {
                                    this.overwriteNodeData(grandChild.id, grandChild.type, grandChild);
                                }
                            }
                        }
                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });
                        this.overwriteNodeData(articleId, 'article', response)
                            .then((r) => {
                                this.btnTranslateThisArticle.classList.remove('lab-disabled');
                                // this.btnTranslateThisArticle.classList.remove('lab-busy');
                                this.markup.querySelector('#infoTextMainArea').textContent = 'Translation completed. Refresh to see changes.';
                                this.updateProgressBar(progressBar, { finished: true });

                                // Force an editor reload to see changes:
                                window.location.href = `/edit/article/id/${ articleId }`;

                            });
                    });
            });
        });

        this.markup.querySelector('#btnTranslationInfo').addEventListener('click', () => {
            const translationInfo = this.markup.querySelectorAll('#translationInfo .info');
            for (const info of translationInfo) {
                info.classList.remove('lab-hidden');
            }
            this.markup.querySelector('#btnTranslationInfo').classList.add('lab-hidden');
        });

        // Open advanced ai settings modal for custom prompt
        this.markup.querySelector('#btnAdvancedSettings').addEventListener('click', () => {
            const params = {
                featureName: 'translateArticle',
                disableGenerateButton: true
            };
            this.api.v1.ns.get('textAssistant.openFeatureSettings')(this.rootModel, null, null, params);
        });

        for (const languageConfig of this.multiLanguageConfig) {
            if (languageConfig.autoSuggestTranslation && languageConfig.autoSuggestTranslation === true) {
                const options = {
                    language: languageConfig.language,
                    siteName: languageConfig.siteName || null,
                    prototypeName: languageConfig.prototypeName || null,
                    languageSelectionName: languageConfig.name || null
                };
                const newCopy = this.getNewCopyTemplate(options);
                const removeFromOverview = newCopy.querySelector('.removeFromOverview');
                removeFromOverview.addEventListener('click', () => {
                    this.markup.querySelector('#copiesOverview').removeChild(newCopy);
                });
                this.markup.querySelector('#copiesOverview').prepend(newCopy);

            }
        }

        this.fetchListOfCopies().then((existingCopies) => {
            // console.log(existingCopies);
            for (const articleCopy of existingCopies) {
                this.updateCopyInOverview(articleCopy);
            }
        });
        return this.markup;
    }

    getLanguageName(code) {
        /**
         * Get the language name from the language code
         * @param {string} code - The language code
         */
        const language = _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"].find((lang) => lang.code === code);
        if (language) {
            return language.name;
        }
        return null;
    }

    updateCopyInOverview(articleCopy, replaceElement = false) {
        /**
         * Update the copy in the overview
         * @param {object} articleCopy - The data for the article copy, to be used for element in overview
         */
        const updateCopy = this.getExistingCopyTemplate(articleCopy);
        updateCopy.id = articleCopy.elementId || `copy-${ articleCopy.id }`;
        const articleId = articleCopy.id || articleCopy.articleId;

        updateCopy.querySelector('#btnMakeChanges').addEventListener('click', () => {
            const options = {
                elementId: updateCopy.id,
                headerTitle: `Update ${ articleId }: <em>${ articleCopy.title }</em>`,
                language: articleCopy.seolanguage,
                articleId
            };
            const updatedTemplate = this.getNewCopyTemplate(options);
            this.markup.querySelector('#copiesOverview').replaceChild(updatedTemplate, updateCopy);
        });

        updateCopy.querySelector('#btnGoToArticle').addEventListener('click', () => {
            window.open(`/edit/article/id/${ articleId }`, '_blank');
        });

        // If an older element with the same ID exists, replace it:
        if (articleId) {
            const oldTemplate = this.markup.querySelector(`#${ updateCopy.id }`);
            if (oldTemplate) {
                this.markup.querySelector('#copiesOverview').replaceChild(updateCopy, oldTemplate);
            } else {
                this.markup.querySelector('#copiesOverview').appendChild(updateCopy);
            }
        } else {
            this.markup.querySelector('#copiesOverview').appendChild(updateCopy);
        }

    }

    setBusyState(rootElement, busy = true) {
        /**
         * Set the busy state and disabling of buttons for an element
         * @param {HTMLElement} rootElement - The root element to be marked as busy
         * @param {boolean} busy - The current state of the element
         */
        const rootElementId = rootElement.id;
        const allElements = [rootElement.id, ...rootElement.querySelectorAll('[id]')];
        const ids = allElements.filter((element) => element.id).map((element) => element.id);
        for (const id of ids) {
            if (busy === true) {
                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.add('lab-busy');
                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.add('lab-disabled');

            } else {
                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.remove('lab-busy');
                this.markup.querySelector(`#${ rootElementId } #${ id }`).classList.remove('lab-disabled');

            }
        }
    }

    splitText(fullText, splitTarget = '</p>') {
        /**
         * Split the data into smaller parts
         * @param {string} dataString - The data to be splitted
         * @param {string} targetField - The field name to be splitted
         * @param {string} splitTarget - The target to split the data with
         */

        const splittedText = fullText.split(splitTarget);
        const maxLength = 1200;
        let part = '';
        let index = 0;
        const textPartials = {};

        // Split up bodytext into bodytext-partials
        if (splittedText) {
            for (let partial of splittedText) {
                if (partial && partial.length > 0) {
                    partial += splitTarget;
                    part += partial;

                    if (part.length > maxLength) {
                        index += 1;
                        textPartials[index] = part;
                        part = '';
                    }
                }
            }
        }

        // Include remainder
        if (part && part.length > 0) {
            textPartials[index + 1] = part;
        }

        return textPartials;

    }

    getPageLanguage() {
        /**
         * Get the language code of the current page, either seo language og site specified language
         */
        const seolanguageCode = this.rootModel.get('fields.seolanguage');
        if (seolanguageCode) {
            return seolanguageCode;
        }
        return this.api.v1.config.get('contentLanguage');
    }

    getNewCopyTemplate(options = {}) {
        /**
         * Get the new copy template
         * @param {object} options - The options (data) to be used in the new copy template
         */
        const newOptions = { ...options };
        if (!newOptions.language) {
            newOptions.language = this.selectedLanguage;
        }

        const sites = this.api.v1.user.getSites().map((site) => ({
            value: site.id, name: site.display_name
        }));
        const languages = this.languages.map((lang) => ({ name: lang.name, code: lang.code, selected: lang.code === newOptions.language }));
        const newCopy = this.api.v1.util.dom.renderTemplate(this.newCopyTemplate, {
            languages,
            sites,
            prototypes: [],
            languageSelectionName: newOptions.languageSelectionName || null
        }, true);

        if (!newOptions.elementId) {
            newOptions.elementId = `copy-${ this.newCopyId }`;
            this.newCopyId++;
        } else {
            newCopy.querySelector('.removeFromOverview').classList.add('lab-hidden');
        }
        newCopy.id = newOptions.elementId;

        if (newOptions.headerTitle) {
            newCopy.querySelector('h3').innerHTML = newOptions.headerTitle;
        }

        // Button to create linked copy
        newCopy.querySelector('#btnCreateLinkedCopy').addEventListener('click', () => {
            // this.setBusyState(newCopy, true);
            const prototypeId = newCopy.querySelector('select[name="prototype_id"]').value;
            // Oversett DENNE eller ORIGINALEN
            const articleId = this.rootModel.get('id');
            const replaceId = options.articleId || null;
            const selectedLanguage = newCopy.querySelector('select[name="languages"]').value;
            // const languageName = this.getLanguageName(selectedLanguage);
            if (selectedLanguage) {
                const progressBar = newCopy.querySelector(`#progress-meter`);
                this.updateProgressBar(progressBar, { setAttributeValues: { value: 1, max: 3 } });
                this.createCopy(articleId, prototypeId, replaceId).then((copyId) => {
                    this.fetchArticleData(copyId).then((data) => {
                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                        const currentPageLanguage = this.getPageLanguage();
                        const extraDataCurrent = {
                            fields: { hasTranslation: '1', seolanguage: currentPageLanguage }
                        };
                        this.overwriteNodeData(articleId, 'article', extraDataCurrent);
                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                        const extraData = {
                            fields: { seolanguage: selectedLanguage, hasTranslation: '1' }
                        };
                        this.overwriteNodeData(copyId, 'article', extraData);

                        const articleCopy = {
                            elementId: newCopy.id,
                            articleId: copyId,
                            title: 'New title',
                            seolanguage: selectedLanguage,
                            status: 'Draft'

                        };
                        articleCopy.title = data.title;
                        articleCopy.status = data.status;
                        console.log('Article articleCopy: ', articleCopy);
                        // this.setBusyState(newCopy, false);
                        this.updateProgressBar(progressBar, { finished: true });

                        this.updateCopyInOverview(articleCopy, true);
                    });
                });
            } else {
                // this.setBusyState(newCopy, false);
            }

        });

        // Button to create new translation
        newCopy.querySelector('#btnCreateNewTranslation').addEventListener('click', () => {
            newCopy.querySelector('.site_id').classList.add('lab-hidden');
            const progressBar = newCopy.querySelector(`#progress-meter`);
            progressBar.classList.remove('lab-hidden');
            this.updateProgressBarInfo(newCopy);
            this.hideTranslationSelections(newCopy);
            this.updateProgressBar(progressBar, { setAttributeValues: { value: 1, max: 10 } });

            // this.setBusyState(newCopy, true);

            const prototypeId = newCopy.querySelector('select[name="prototype_id"]').value;
            const articleId = this.rootModel.get('id');

            const replaceId = options.articleId || null;
            const selectedLanguage = newCopy.querySelector('select[name="languages"]').value;
            const languageName = this.getLanguageName(selectedLanguage);
            if (languageName) {
                this.createCopy(articleId, prototypeId, replaceId).then((copyId) => {
                    this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                    const currentPageLanguage = this.getPageLanguage();
                    const extraDataCurrent = {
                        fields: { hasTranslation: '1', seolanguage: currentPageLanguage }
                    };
                    this.overwriteNodeData(articleId, 'article', extraDataCurrent);
                    this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                    // Get new copy data - getNodeAndData
                    this.getNodeAndData(copyId).then((nodeData) => {
                    // Translate content - translateContent
                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });
                        const params = {
                            featureName: 'translateArticle',
                            language: languageName,
                            cleanUpJsonString: true,
                            updateModel: false
                        };
                        this.translateNode(nodeData, params, true)
                            .then((response) => {
                                this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                                response.fields.hasTranslation = '1';
                                response.fields.seolanguage = selectedLanguage;
                                for (const child of response.children) {
                                    this.updateProgressBar(progressBar, { updateAttributes: ['value'] });
                                    this.overwriteNodeData(child.id, child.type, child);
                                    if (child.children && child.children.length > 0) {
                                        for (const grandChild of child.children) {
                                            this.overwriteNodeData(grandChild.id, grandChild.type, grandChild);
                                        }
                                    }
                                }
                                this.overwriteNodeData(copyId, 'article', response)
                                    .then((r) => {
                                        this.updateProgressBar(progressBar, { updateAttributes: ['value'] });

                                        this.fetchArticleData(copyId).then((data) => {
                                            const articleCopy = {
                                                elementId: newCopy.id,
                                                articleId: copyId,
                                                title: data.title || '',
                                                language: languageName,
                                                status: data.status || 'Draft'

                                            };
                                            // this.setBusyState(newCopy, false);
                                            this.updateProgressBar(progressBar, { finished: true });
                                            this.updateCopyInOverview(articleCopy, true);
                                        });

                                    });
                            });
                    });

                });
            } else {
                // this.setBusyState(newCopy, false);

            }

        });

        // Use specified site name from config, as defined on multiLanguage admin page
        if (options.siteName) {
            const option = Array.from(newCopy.querySelector('select[name="site_id"]').querySelectorAll('option'))
                .find((opt) => opt.textContent.trim() === options.siteName.trim());
            if (option) {
                newCopy.querySelector('select[name="site_id"]').value = option.value;

            }
        }
        const siteId = newCopy.querySelector('select[name="site_id"]').value;
        this.updatePrototypeList(siteId, newCopy, options.prototypeName);

        const siteElement = newCopy.querySelector('.site_id');
        siteElement.addEventListener('change', (event) => {
            const selectedSiteId = event.target.value;
            this.updatePrototypeList(selectedSiteId, newCopy);
        });

        return newCopy;
    }

    getExistingCopyTemplate(options = {}) {
        /**
         * Get the existing copy template
         * @param {object} options - The options (data) to be used in the existing copy template
         */
        const languageCode = options.seolanguage;
        let languageName = languageCode ? this.getLanguageName(languageCode) : options.language;
        if (languageCode) {
            languageName = this.getLanguageName(languageCode);
        }

        let statusDescription = options.status || '';
        if (options.visibility_status === 'H') {
            statusDescription = 'Published hidden';
            if (options.status === 'A') {
                statusDescription += ', with unpublished changes';
            }
        } else if (options.visibility_status === 'P') {
            statusDescription = 'Published';
            if (options.status === 'A') {
                statusDescription += ', with unpublished changes';
            }
        } else {
            statusDescription = 'Draft';
        }
        const existingCopy = this.api.v1.util.dom.renderTemplate(this.existingCopyTemplate, {
            title: options.title || 'N/A',
            language: languageName,
            status: statusDescription,
            articleId: options.id || options.articleId || 'N/A'

        }, true);
        return existingCopy;
    }

    onAside() {
        /**
         * Aside menu for positioning the translate article function
         */
        return {
            section: 'Advanced',
            label: 'Translate article'
        };
    }

    onPaths() {
        /**
         * Paths for the translate article function
         */
        return {
            'fields.seolanguage': {
                node: 'fields.seolanguage'
            }
        };
    }

    fetchListOfCopies() {
        /**
         * Fetch list of copies of the current article to display in the overview
         */
        let lab_canonical_id;
        let query = '';
        const currentArticleId = this.rootModel.get('id');
        for (const path of ['lab_canonical_id', 'lab_canonical_extid', 'extid']) {
            try {
                const id = this.rootModel.get(`fields.${ path }`);
                if (id) {
                    if (query.length > 0) {
                        query += ` OR `;
                    }
                    query += `${ path }:${ id }`;
                }

                if (path === 'lab_canonical_id') {
                    lab_canonical_id = id;
                }
            } catch (error) {
                // Add correct syslogger
                // //console.log(`${ path } not found in current article`);
            }
        }
        const id = this.rootModel.get('id');
        if (id && id !== lab_canonical_id) {
            if (query.length > 0) {
                query += ` OR id:${ id }`;
            } else {
                query += `id:${ id }`;
            }
        }

        // If you are in the original article, then fetch all copied articles with that value set as lab_canonical_id
        if (id) {
            if (query.length > 0) {
                query += ` OR lab_canonical_id:${ id }`;
            } else {
                query += `lab_canonical_id:${ id }`;
            }
        }

        // If you are in an copied article, then that article has an lab_canonical_id
        // Use the value of lab_canonical_id to fetch the article with that value as id
        if (lab_canonical_id) {
            if (query.length > 0) {
                query += ` OR id:${ lab_canonical_id }`;
            } else {
                query += `id:${ lab_canonical_id }`;
            }
        }

        let url = `/api/v1/article?query=${ query }`;
        const returnFields = ['id', 'hasTranslations', 'hasTranslation', 'seolanguage', 'status', 'site_id', 'publishhidden', 'published', 'published_url', 'siteDomain', 'visibility_status', 'has_published', 'title'];
        url += `&fields=${ returnFields.join(',') }`;
        return fetch(url)
            .then((response) => response.json()).then((data) => {
                if (data && data.result && data.result.length > 0) {
                    const filteredArray = data.result.filter((item) => Number(item.id) !== currentArticleId);
                    return filteredArray;
                }
                return [];
            });
    }

    fetchArticleData(articleId) {
        /**
         * Fetch article data from article with given id
         * @param {number} articleId - The article id to fetch data from
         */
        const url = `/api/v1/article?query=id:${ articleId }`;
        return new Promise((resolve, reject) => {
            fetch(url)
                .then((response) => response.json())
                .then((data) => {
                    if (data && data.result && data.result.length > 0) {
                        resolve(data.result[0]);
                    }
                    resolve(null);
                })
                .catch((error) => reject(error));
        });

    }

    createCopy(originalArticleId, prototypeId, replaceId) {
        /**
         * Create a copy of the original article, may replace an existing article
         * @param {number} originalArticleId - The original article id
         * @param {number} prototypeId - The prototype id to copy the article to
         * @param {number} replaceId - The id of the article to replace
         */
        // ForceCopy is meant to be used to decide if an article creates a new version or not
        let ajaxUrl = `/ajax/article/copy-to-prototype/?articleId=${ originalArticleId }&prototype=${ prototypeId }`;
        if (replaceId) {
            ajaxUrl += `&replaceId=${ replaceId }&forceCopy=false`;
        } else {
            ajaxUrl += `&forceCopy=true`;
        }
        return this.api.v1.util.httpClient.request(ajaxUrl).then((resp) => {
            if (resp && resp.imported) {
                const imported = Object.values(resp.imported);
                if (imported.length > 0) {
                    return imported[0];
                }
            }
            return null;
        });
    }

    overwriteNodeData(nodeId, nodeType, data) {
        /**
         * Overwrite node data with new data
         * @param {number} nodeId - The node id to overwrite
         * @param {string} nodeType - The node type to overwrite, like 'article'
         */
        return new Promise((resolve, reject) => {
            const formData = this.buildFormData(nodeId, nodeType, data);
            if (formData) {
                fetch('/ajax/node/save-node-and-data', { body: formData, method: 'POST' })
                    .then((response) => {
                        resolve(response);
                    }).catch((error) => {
                        // //console.log('error: ', error);
                        reject(error);
                    });
            }
        });
    }

    buildFormData(id, type, data) {
        /**
         * Build formData for saving data in a node
         * @param {number} id - The node id
         * @param {string} type - The node type
         * @param {object} data - The data to be saved
         */
        if (!data) {
            return null;
        }
        let parsedData = data;
        if (typeof data !== 'object') {
            parsedData = JSON.parse(data);
        }
        const formContent = {
            id,
            type,
            fields: parsedData.fields
        };
        if (parsedData.fields && parsedData.fields.tags) {
            formContent.tags = parsedData.fields.tags;
            delete formContent.fields.tags;
        }

        const formData = new FormData();
        formData.append('json[id]', id);
        formData.append('json[type]', type);
        formData.append('json[structure]', null);
        formData.append('json[node]', JSON.stringify([formContent]));
        return formData;
    }

    getNodeAndData(id) {
        /**
         * Get data from a node id, including children.
         * Only return data that is supported for translation
         * @param {number} id - The node id to fetch data from
         */
        return new Promise((resolve, reject) => {
            fetch(`/prototype/get-node-and-data?id=${ id }`)
                .then((response) => response.json())
                .then((node) => {
                    const fieldsForTranslation = this.evaluateNodeDataSupport(node.data, true);
                    resolve(fieldsForTranslation);
                })
                .catch((error) => reject(error));
        });
    }

    evaluateNodeDataSupport(node = null, recursive = true) {
        /**
         * Evaluate node data for translation support
         * @param {object} node - The node data to be evaluated
         * @param {boolean} recursive - If the evaluation should be recursive
         */
        if (!node || !node.fields) {
            return null;
        }

        // Check if node is supported for translation
        if (this.translationTargets.elements[node.type] && this.translationTargets.elements[node.type].accept === false) {
            return null;
        }

        const supportedNodeData = {
            id: node.id,
            type: node.type,
            fields: {},
            path: {},
            children: []
        };
        for (const pathType of ['path', 'fields']) {
            const nodeData = pathType === 'path' ? node : node.fields;
            for (const field of Object.keys(nodeData)) {
                let elementRules;
                if (this.translationTargets.elements[node.type]) {
                    elementRules = this.translationTargets.elements[node.type];
                }
                let acceptField = false;

                // Evaluate globally first
                if (this.translationTargets.global[pathType] && this.translationTargets.global[pathType][field] && this.translationTargets.global[pathType][field] === true) {
                    acceptField = true;
                }

                // Check specific element rules
                if (elementRules && elementRules[pathType][field] && elementRules[pathType][field] === true) {
                    acceptField = true;
                } else if (elementRules && elementRules[pathType][field] && elementRules[pathType][field] === false) {
                    acceptField = false;
                }

                // Check field value with global regex rules - accept
                if (this.translationTargets.global.regex && this.translationTargets.global.regex.accept && Object.keys(this.translationTargets.global.regex.accept).length > 0) {
                    for (const key of Object.keys(this.translationTargets.global.regex.accept)) {
                        const regexRule = new RegExp(this.translationTargets.global.regex.accept[key]);
                        if (regexRule && regexRule.test(nodeData[field])) {
                            acceptField = true;
                        }
                    }
                }

                // Check field value with global regex rules - ignore
                if (this.translationTargets.global.regex && this.translationTargets.global.regex.ignore && Object.keys(this.translationTargets.global.regex.ignore).length > 0) {
                    for (const key of Object.keys(this.translationTargets.global.regex.ignore)) {
                        const regexRule = new RegExp(this.translationTargets.global.regex.ignore[key]);
                        if (regexRule && regexRule.test(nodeData[field])) {
                            acceptField = false;
                        }
                    }
                }

                // Check field value with element regex rule - ignore
                if (elementRules && elementRules.regex && elementRules.regex.ignore && Object.keys(elementRules.regex.ignore).length > 0) {
                    for (const key of Object.keys(elementRules.regex.ignore)) {
                        const regexRule = new RegExp(elementRules.regex.ignore[key]);
                        if (regexRule && regexRule.test(nodeData[field])) {
                            acceptField = false;
                        }
                    }
                }

                // Check field value for specific field with regex - accept
                if (elementRules && elementRules.regex && elementRules.regex.accept && Object.keys(elementRules.regex.accept).length > 0) {
                    for (const key of Object.keys(elementRules.regex.accept)) {
                        const regexRule = new RegExp(elementRules.regex.accept[key]);
                        if (regexRule && regexRule.test(nodeData[field])) {
                            acceptField = true;
                        }
                    }
                }

                // Store for translation
                if (acceptField === true) {
                    supportedNodeData[pathType][field] = nodeData[field];
                }
            }
        }

        if (recursive === true && node.children && node.children.length > 0) {
            for (const child of node.children) {
                const childData = this.evaluateNodeDataSupport(child, true);
                if (childData) {
                    supportedNodeData.children.push(childData);
                }
            }
        }
        if (Object.keys(supportedNodeData.fields).length > 0 || Object.keys(supportedNodeData.path).length > 0 || supportedNodeData.children.length > 0) {
            return supportedNodeData;
        }
        return null;
    }

    prepareNewCopy() {
        /**
         * Prepare a new element with new copy template to be used in the overview
         */
        const copiesOverview = this.markup.querySelector('#copiesOverview');
        const newCopy = this.getNewCopyTemplate();

        const removeFromOverview = newCopy.querySelector('.removeFromOverview');
        removeFromOverview.addEventListener('click', () => {
            copiesOverview.removeChild(newCopy);
        });

        copiesOverview.prepend(newCopy);

    }

    setupPrototypes() {
        /**
         * Setup prototypes
         */

        // Protoype config
        return new Promise((resolve, reject) => {
            const urlPrototypes = '/ajax/articlePrototype/get-all';
            lab_api.v1.util.httpClient.request(urlPrototypes)
                .then((resp) => {

                    const data = resp.data.map((prototype) => ({
                        value: prototype.id,
                        name: prototype.name,
                        site: prototype.site
                    }));
                    this.prototypes = data;
                    resolve(data);
                });
        });

    }

    updatePrototypeList(siteId, htmlElement, prototypeName = null) {
        /**
         * Update the prototype list based on the selected site
         * @param {number} siteId - The site id to filter prototypes by
         * @param {HTMLElement} htmlElement - The html element to update the prototype list in
         * @param {string} prototypeName - The prototype name to be selected
         */
        this.setupPrototypes().then(() => {
            let sitePrototypes = this.prototypes.filter((prototype) => Number(prototype.site) === Number(siteId));
            if (prototypeName) {
                sitePrototypes = sitePrototypes.map((prototype) => ({ ...prototype, selected: prototype.name === prototypeName }));
            }
            for (const buttonSelector of ['#btnCreateNewTranslation', '#btnCreateLinkedCopy']) {
                const btn = htmlElement.querySelector(buttonSelector);
                if (!sitePrototypes || sitePrototypes.length === 0) {
                    btn.classList.add('lab-disabled');
                } else if (btn.classList.contains('lab-disabled')) {
                    btn.classList.remove('lab-disabled');
                }
            }
            const prototypeElement = htmlElement.querySelector('.prototype_id');

            const prototypeHtml = `
            <select name="prototype_id" id="prototype_id">
                {{#prototypes}}
                <option value="{{value}}" {{#selected}}selected{{/selected}}>{{name}}</option>
                {{/prototypes}}
            </select>`;
            const prototypeMarkup = this.api.v1.util.dom.renderTemplate(prototypeHtml, {
                prototypes: sitePrototypes
            }, true);
            prototypeElement.innerHTML = prototypeMarkup.innerHTML;
        });
    }

    translateContent(params) {
        /**
         * Translate content with the text assistant Labrador AI
         */
        return new Promise((resolve, reject) => {
            const res = this.api.v1.ns.get('textAssistant.generateContent')(this.rootModel, null, null, params);
            resolve(res);

        });

    }

    translateNode(node, params, splitBodytext = false) {
        /**
         * Translate a node with the text assistant Labrador AI
         * Returns a promise
         * @param {object} node - The node to be translated
         * @param {object} params - The parameters to be used for translation
         * @param {boolean} splitBodytext - If the bodytext should be splitted into smaller parts
         */
        return new Promise((resolve, reject) => {
            const promises = [];

            // BODYTEXT
            // Split bodytext into smaller parts
            if (splitBodytext === true && node.fields && node.fields.bodytext) {
                const splittedBodytext = this.splitText(node.fields.bodytext);
                for (const i of Object.keys(splittedBodytext)) {
                    const content = JSON.stringify({ [`bodytext_${  i }`]: splittedBodytext[i] });
                    const paramsBodytext = params;
                    paramsBodytext.articleFields = content;
                    const result = this.translateContent(paramsBodytext);
                    promises.push(result);

                }
            }

            // FIELDS (not bodytext)
            const articleFields = node.fields;
            if (articleFields.bodytext) {
                delete articleFields.bodytext;
            }
            // For key not fields
            if (node.path) {
                for (const key of Object.keys(node.path)) {
                    articleFields[key] = node.path[key];
                }
            }

            const content = JSON.stringify(articleFields);
            const paramsWithoutBodytext = params;
            paramsWithoutBodytext.articleFields = content;
            const result = this.translateContent(paramsWithoutBodytext);
            promises.push(result);

            // CHILDREN
            if (node.children && node.children.length > 0) {
                this.childrenContent = this.prepareChildrenForTranslation(node.children);
                this.childrenContent = JSON.stringify(this.childrenContent);
                const paramsChildren = params;
                paramsWithoutBodytext.articleFields = this.childrenContent;
                const resultChildren = this.translateContent(paramsChildren);
                promises.push(resultChildren);

            }

            Promise.all(promises)
                .then((resultFromPromises) => {
                    const bodytextPartials = {};
                    const translatedChildrenContent = {};
                    const translation = {
                        fields: {},
                        children: []
                    };
                    if (this.childrenContent && typeof this.childrenContent === 'string') {
                        this.childrenContent = JSON.parse(this.childrenContent);
                    } else if (!this.childrenContent) {
                        this.childrenContent = {};
                    }
                    for (const r of resultFromPromises) {
                        const data = JSON.parse(r);
                        for (const key of Object.keys(data)) {
                            if (key.includes('bodytext_')) {
                                bodytextPartials[key] = data[key];
                            } else if (this.childrenContent[key]) {
                                translatedChildrenContent[key] = data[key];
                            } else {
                                translation.fields[key] = data[key];
                            }
                        }

                    }
                    let bodytext = '';
                    for (let i = 1; i <= Object.keys(bodytextPartials).length; i++) {
                        bodytext += bodytextPartials[`bodytext_${ i }`];

                    }
                    translation.fields.bodytext = bodytext;

                    if (this.childrenContent) {
                        translation.children = this.handleTranslatedChildren(translatedChildrenContent);
                    }
                    resolve(translation);
                });

        });
    }

    handleTranslatedChildren(children) {
        /**
         * Handle translated children
         * @param {object} children - The children to be translated
         * @returns {array} - The translated children
         */
        const translatedChildren = {};
        for (const key of Object.keys(children)) {
            const [type, id, field] = key.split('_');
            if (!translatedChildren[`${ type }_${ id }`]) {
                translatedChildren[`${ type }_${ id }`] = { type, id, fields: {} };
            }
            translatedChildren[`${ type }_${ id }`].fields[field] = children[key];
        }
        return Object.values(translatedChildren);

    }

    prepareChildrenForTranslation(children) {
        /**
         * Prepare children for translation
         * @param {object} children - The children to be translated
         */
        const childrenToTranslate = {};
        for (const child of children) {
            const childKey = `${ child.type }_${ child.id }`;
            for (const field of Object.keys(child.fields)) {
                childrenToTranslate[`${ childKey }_${ field }`] = child.fields[field];
            }
            if (child.tags) {
                childrenToTranslate[`${ childKey }_tags`] = child.tags;
            }
            if (child.children && child.children.length > 0) {
                const grandchildren = this.prepareChildrenForTranslation(child.children);
                if (grandchildren) {
                    for (const key of Object.keys(grandchildren)) {
                        childrenToTranslate[key] = grandchildren[key];
                    }
                }

            }
        }

        return childrenToTranslate;
    }

    updateProgressBar(progressBar, options) {
        /**
         * Update the progress meter
         * @param {number} update - The amount to update the progress meter
         */
        /*
        if (!progressBar.classList.contains('lab-busy')) {
            progressBar.classList.add('lab-busy');
        } */
        if (options.updateAttributes) {
            for (const attributeType of options.updateAttributes) {
                let attributeValue = progressBar.getAttribute(attributeType);
                if (!attributeValue) {
                    attributeValue = 0;
                } else {
                    attributeValue = Number(attributeValue);
                }
                progressBar.setAttribute(attributeType, attributeValue + 1);
            }
        }
        if (options.setAttributeValues) {
            for (const attribute of Object.keys(options.setAttributeValues)) {
                progressBar.setAttribute(attribute, options.setAttributeValues[attribute]);
            }
        }

        if (options.finished === true) {
            // progressBar.classList.add('lab-hidden');
            progressBar.setAttribute('value', 10);
            progressBar.setAttribute('max', 10);
        }

    }

    updateProgressBarInfo(htmlElement) {
        /**
         * Update the progress bar info
         * @param {HTMLElement} htmlElement - The html element to update the progress bar info in
         */
        const articleCopyElement = htmlElement;
        const siteName = articleCopyElement.querySelector('select[name="site_id"]').selectedOptions[0].textContent;
        const prototypeName = articleCopyElement.querySelector('select[name="prototype_id"]').selectedOptions[0].textContent;
        const languageName = articleCopyElement.querySelector('select[name="languages"]').selectedOptions[0].textContent;
        if (siteName && prototypeName && languageName) {
            const infoText = `Translating article to <b>${ languageName }</b> for <b>${ siteName }</b> using <b>${ prototypeName }</b>`;
            const progressBarInfo = articleCopyElement.querySelector(`#progress-info`);
            progressBarInfo.innerHTML = infoText;
            progressBarInfo.classList.remove('lab-hidden');
        }
        const title = articleCopyElement.querySelector('h3');
        if (title.textContent.includes('Create')) {
            title.textContent = title.textContent.replace('Create', 'Translating');
        }
    }

    hideTranslationSelections(htmlElement) {
        /**
         * Hide translation selections
         * @param {HTMLElement} htmlElement - The html element to hide translation selections in
         */
        htmlElement.querySelectorAll('.translationSelection').forEach((selection) => {
            selection.classList.add('lab-hidden');
        });
    }

}


/***/ }),

/***/ "./modules/apps/article/RoxenExport.js":
/*!*********************************************!*\
  !*** ./modules/apps/article/RoxenExport.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RoxenExport": () => (/* binding */ RoxenExport)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class RoxenExport {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = this.api.v1.user.hasPermission('export_roxen');
        this.multiPublicationEnabled = this.api.v1.config.get('roxen.multiPublicationEnabled');
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(this.api.v1.config.get('lang') || undefined);
        this.dom = {
            exportDate: null,
            message: null
        };
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-medium lab-space-above-none">Export article to Roxen</h2>
                <p class="lab-para lab-grid-large-12">Last exported: <strong data-name="export-date">--</strong></p>
            </div>
            <div class="lab-formgroup lab-grid lab-space-above-none">
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="lab-roxen-publication">Select publication</label>
                    <select name="lab-roxen-publication-select" id="lab-roxen-publication-select" disabled></select>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <label for="publishedDate">Select print edition</label>
                    <input type="date" id="publishedDate" name="fields.published" value="">
                </div>
            </div>
            <div class="lab-formgroup lab-grid lab-space-above-none lab-align-right">
                <div class="lab-formgroup-item lab-grid-large-12 lab-space-below-medium">
                    <input type="button" value="Export article">
                </div>
            </div>
            <div class="lab-formgroup lab-grid lab-space-above-none">
                <p class="lab-para lab-grid-large-12" id="messageArea"></p>
            </div>
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Export',
            label: 'Roxen'
        };
    }

    onPaths() {}

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                name: this.rootModel.get('fields.name'),
                hostpath: this.rootModel.get('fields.hostpath'),
                lab_canonical: this.rootModel.get('fields.lab_canonical'),
                defaultsection: this.rootModel.get('fields.defaultsection')
            }
        }, true);

        const selectContainer = markup.querySelector('#lab-roxen-publication-select').parentNode;
        const publication = this.rootModel.get('fields.print_publication');
        const url = `/ajax/integration-services/proxy/export/roxen/?action=list&site=${ this.api.v1.site.getSite().alias }`;

        this.api.v1.util.httpClient.get(url).then((payload) => {
            if (payload.error) { return; }
            if (Array.isArray(payload)) {
                selectContainer.innerHTML = '';

                if (this.multiPublicationEnabled) {
                    const options = payload.map((item) => ({
                        value: item.prefix,
                        text: item.title
                    }));

                    const selectedValues = [];
                    if (publication) {
                        options.forEach((option) => {
                            if (option.value === publication) {
                                selectedValues.push(option.value);
                            }
                        });
                    }

                    const multiSelect = this.api.v1.ui.element.getMultiSelect({
                        options,
                        selectedValues,
                        id: 'lab-roxen-publication-select',
                        name: 'lab-roxen-publication-select',
                        showSelectAll: true,
                        selectAllText: 'Select All',
                        visibleItems: 5,
                        labelElement: markup.querySelector('label[for="lab-roxen-publication"]'),
                        labelText: 'Select publication',
                        labelCountText: '($count selected)',
                        returnObject: true
                    });

                    // Append the multi-select element to the container
                    selectContainer.appendChild(multiSelect.element);

                    // Trigger initial onChange to set the count
                    const selectedOptions = multiSelect.getSelectedValues();
                    if (selectedOptions.length > 0) {
                        const label = markup.querySelector('label[for="lab-roxen-publication"]');
                        label.innerHTML = `Select publication <span class="lab-selection-count">(${ selectedOptions.length } selected)</span>`;
                    }
                } else {
                    // Create standard select for single selection
                    const select = document.createElement('select');
                    select.id = 'lab-roxen-publication-select';
                    select.name = 'lab-roxen-publication-select';

                    // Add options
                    payload.forEach((item) => {
                        const option = document.createElement('option');
                        option.value = item.prefix;
                        option.textContent = item.title;
                        option.selected = item.prefix === publication;
                        select.appendChild(option);
                    });

                    selectContainer.appendChild(select);
                }
            }
        }).catch((error) => {
            // Integration do not return anything if Roxen is not set up in config. Ignore.
        });

        this.dom.exportDate = markup.querySelector('[data-name=export-date]');
        this.dom.messageArea = markup.querySelector('#messageArea');
        this.updateExportDate();
        this.setupSubmit(markup);
        return markup;
    }

    setupSubmit(markup) {
        const btn = markup.querySelector('input[type=button]');

        btn.addEventListener('click', (event) => {
            const editionDate = markup.querySelector('#publishedDate').value;
            this.displayMessage('');
            if (editionDate !== '') {

                markup.classList.add('lab-busy');
                btn.setAttribute('disabled', 'disabled');

                this.api.v1.util.httpClient.get(`/prototype/get-node-and-data?id=${ this.rootModel.getId() }`, { resetCache: true }).then((d) => {
                    const data = { ...d };
                    const site = this.api.v1.site.getSite();
                    const publication = `lab-${ site.id }`;
                    const publicationsSelect = markup.querySelector('#lab-roxen-publication-select');
                    const publicationFromSelect = publicationsSelect.value;
                    data.data.fields.print_publication = (publicationFromSelect || publication);
                    data.data.fields.print_edition_date = editionDate;
                    if (this.multiPublicationEnabled) {
                        data.publicationsArray = publicationsSelect.selectedOptions.length ? Array.from(publicationsSelect.selectedOptions).map((o) => o.value) : [];
                    }
                    const export_url = `/ajax/integration-services/proxy/export/roxen?imageBaseUrl=${ this.api.v1.properties.get('image_server') }&site=${ site.alias }`;
                    this.api.v1.util.httpClient.request(
                        export_url,
                        {
                            body: JSON.stringify(data),
                            method: 'POST'
                        }
                    ).then((resp) => {
                        if (Array.isArray(resp)) {
                            // Check if each item in the array has an object_id
                            const allValid = resp.every((item) => item && item.object_id);
                            const validItems = resp.filter((item) => item && item.object_id);

                            if (allValid && resp.length > 0) {
                                // All items had object_id
                                this.rootModel.set('fields.print_exported', Math.floor(Date.now() / 1000));
                                this.rootModel.set('fields.print_publication', (publicationFromSelect || publication));
                                this.rootModel.set('fields.print_edition_date', editionDate);
                                this.rootModel.set('fields.print_id', validItems.map((item) => item.object_id).join(','));
                                this.displayMessage(`The article was successfully exported to ${ validItems.length } publication(s) in Roxen`);
                                this.updateExportDate();
                            } else {
                                // Some items were missing object_id or array was empty
                                this.displayMessage('There was a problem sending the article');
                                console.log(resp);
                            }
                        } else if (resp && resp.object_id) {
                            // Handle single object response (original behavior)
                            this.rootModel.set('fields.print_exported', Math.floor(Date.now() / 1000));
                            this.rootModel.set('fields.print_publication', (publicationFromSelect || publication));
                            this.rootModel.set('fields.print_edition_date', editionDate);
                            this.rootModel.set('fields.print_id', resp.object_id);
                            this.displayMessage('The article was successfully exported to Roxen');
                            this.updateExportDate();
                        } else {
                            this.displayMessage('There was a problem sending the article');
                            console.log(resp);
                        }
                        markup.classList.remove('lab-busy');
                        btn.removeAttribute('disabled');
                    }).catch((e) => {
                        this.displayMessage('The export to Roxen failed. Try again. If you continue to see this message contact support@publishlab.com');
                        console.error('Error: ', e, e.status);
                        markup.classList.remove('lab-busy');
                        btn.removeAttribute('disabled');
                    });
                });
            }
        });
    }

    displayMessage(msg) {
        this.dom.messageArea.innerHTML = msg;
    }

    updateExportDate() {
        const lastExport = this.rootModel.get('fields.print_exported');
        let formattedDate = 'Never';
        if (lastExport) {
            formattedDate = this.dateTimeHelper.timestampToNiceDate(lastExport);
        }
        this.dom.exportDate.innerHTML = formattedDate;
    }

}


/***/ }),

/***/ "./modules/apps/article/TopicSummary.js":
/*!**********************************************!*\
  !*** ./modules/apps/article/TopicSummary.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TopicSummary": () => (/* binding */ TopicSummary)
/* harmony export */ });
/* harmony import */ var _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/ContentLanguages.js */ "./modules/lib/helpers/ContentLanguages.js");


class TopicSummary {

    /**
     * The app 'Topic Summary' lets a user generate a factbox from a selection of articles.
     * The user may adjust the prompt and visual output by selecting options.
     * The app uses the Labrador api to fetch articles and update the factbox.
     *
     * @param {object} api - The Labrador api
     * @param {object} model - The Labrador model
     * @param {object} view - The Labrador view
     * @param {object} aiSettings - Settings for the ai-integration (model, provider, integration)
     * @param {object} options - Options for the ai prompt
    */

    constructor(api, model, view, aiSettings = { model: 'gpt-4o', provider: 'openAi', integration: 'openAi' }, options = { factboxType: 'overview' }) {
        this.api = api;
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.factboxModel = model;
        this.factboxViews = this.api.v1.view.getViews(this.factboxModel);
        this.enabled = true;            // Enable app
        this.respons = null;            // Respons from ai service

        this.articleIds = [];           // List of ids for all selected article
        this.currentlySelected = [];    // List of ids for currently selected articles
        this.articleSelection = {};     // Data for selected articles

        this.aiSettings = aiSettings;   // Settings for the ai-integration (model, provider, integration)
        this.options = options;         // Options for the ai prompt

        this.template = `
        <div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium">

                    <h2 class="lab-title lab-grid-large-12 lab-grid-gap">Generate topic summary <span class="labicon-magic_wand"></span></h2>
                    <p>Generate a topic summary with a <b><span id="selectedType">{{ factboxType }}</span></b> style <span id="focalpointText"></span>in <b><span id="selectedLang">{{ languageName }}</span></b> from a selection of articles.
                    </p>
                    <p class="lab-hidden">The text will be generated with model '<b>{{ aiSettings.model }}</b>' from <b>{{ aiSettings.provider }}</b> using an integration to <b>{{ aiSettings.integration }}</b>.</p>
                    
                </div>
                <div>
                    <span id="get-article-list" type="button" class="lab-btn" style="float:left; position:relative">Select articles</span>
                </div>
            </div>

            <div class="lab-formgroup lab-hidden lab-grid lab-grid-gap lab-space-above-none">
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium">

                    <h3>Select articles by id</h3>
                    <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-small">
                        <input type="text" placeholder="100090, 100102" id="articleids"></input>
                    </div>
                    <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-small">
                        <div>
                            <span id="get-articles-textarea" type="button" class="lab-btn" style="float:left; position:relative">Fetch articles by ids
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="lab-formgroup lab-grid-large-12 lab-grid-gap">                    
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium">
                    <h3>Selected articles:</h3>
                    <ul id="article-selection">
                        <p><em>No articles selected</em></p>
                    </ul>
                </div>
            </div>
            <div class="lab-formgroup lab-grid-large-12 lab-grid-gap lab-space-below-small">                    
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <p id="generated-text"></p>
                </div>
            </div>
        </div>`;

        this.asideTemplate = `
        <div>
            <div class="lab-aside-settings">
                <div>
                    <h4 class="lab-title">Factbox type</h4>
                    <select id="factboxType">
                        <option value="overview">Topic overview</option>
                        <option value="development">Context development</option>
                        <option value="brief">Brief summary</option>
                    </select>
                    <p class="lab-info"><span id="factbox-description">Generate a broad overview and focus on the most important aspects of the topic</span></p>
                </div>
            </div>
            <div class="lab-aside-settings">
        
                <div>
                    <h4 class="lab-title">Language</h4>    
                    <select id="languages">
                        <option value="">Select language:</option>
                        {{ #languages }}
                        <option value="{{ code }}"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>
                        {{ /languages }}
                    </select>
                </div>
            </div>
            <div class="lab-aside-settings">
                <div>
                    <h4 class="lab-title">Visual styling</h4>
                    <p class="lab-para lab-hidden"><label>Add source references<input type="checkbox" title="Include a link to article sources" id="use-references" style="float:left;"></label></p>
                    <p class="lab-para"><label>Bullet points<input type="checkbox" title="Add a bulletpoint for each paragraph" id="use-bulletpoints" style="float:left;"></label></p>
                    <p class="lab-para lab-hidden"><label>Bold names<input type="checkbox" title="Add bold styling on names" id="use-bold-names" style="float:left;"></label></p>
                    <p class="lab-para lab-hidden"><label>Bold keywords<input type="checkbox" title="Add bold styling on keywords" id="use-bold-keywords" style="float:left;"></label></p>
                    <p class="lab-para lab-hidden"><label>Add subheader(s)<input type="checkbox" title="Include suitable subheader(s)" id="use-subheader" style="float:left;"></label></p>
                </div>
            </div>
            <div class="lab-aside-settings">
            <div>
                <h4 class="lab-title">Focal point</h4>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-below-small">
                    <input type="text" placeholder="Optional" id="focalpoint"></input>
                </div>
                <p class="lab-info">Write a name, an incident or a place that you want to emphasize in the summary. The AI will try to include this in the summary.</p>
            </div>
        </div>
        </div>`;

        this.display();
    }

    onPaths() {
        /**
         * Paths to listen for changes
         */
        return {
            'fields.seolanguage': {
                node: 'fields.seolanguage'
            }
        };
    }

    getAsideMarkup() {
        /**
         * Aside modal markup
         * The aside modal is used to select options for the prompt
         */
        const seolanguage = this.rootModel.get('fields.seolanguage');
        const defaultLanguage = lab_api.v1.config.get('contentLanguage');

        this.selectedLanguage = seolanguage || defaultLanguage;

        const languages = _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"].map((language) => ({ name: language.name, code: language.code, selected: language.code === this.selectedLanguage }));
        const languageName = this.getLanguageName(this.selectedLanguage);

        this.asideMarkup = lab_api.v1.util.dom.renderTemplate(this.asideTemplate, {
            title: 'Select language',
            languages,
            languageName,
            language: this.selectedLanguage
        });
        return this.asideMarkup;
    }

    getMarkup() {
        /**
         * Main modal markup
         */
        this.markup = this.api.v1.util.dom.renderTemplate(this.template, {
            aiSettings: this.aiSettings
        }, true);

        return this.markup;
    }

    display() {
        // Set up markups
        this.asideMarkup = this.getAsideMarkup();
        this.markup = this.getMarkup();

        // Evaluate history
        let history = this.factboxModel.get('fields.ai_metadata_json');
        if (history && history.length > 0) {
            history = JSON.parse(history);
            if (history.selectionSourceIds) {
                this.articleIds = history.selectionSourceIds;
                this.updateArticleList(this.articleIds)
                    .then(() => {
                        this.updateModalMarkup();
                    });
            }
        }

        // Main modal
        this.modal = this.api.v1.ui.modal.dialog({
            container: {
                width: 1400,
                minHeight: 800

            },
            aside: {
                expandable: true,
                position: 'left',
                header: 'Options',
                content: this.asideMarkup,
                noPadding: true,
                width: '400px'
            },
            content: {
                header: 'Generate topic summary',
                markup: this.markup.innerHTML
            },
            footer: {
                informalText: '<strong>This function in Labrador CMS is using advanced artificial intelligence developed by OpenAI API.</strong><br>Text from the article is not used to train or improve the public data models. Use generated text from these functions as suggestions, and be sure to manually verify them. Labrador CMS shall not be held liable for any use of the generated text.',
                buttons: [
                    {
                        type: 'button',
                        id: 'generate-insert',
                        value: 'Generate',
                        class: 'lab-generate lab-disabled',
                        highlight: false
                    }
                ]
            },
            eventHandlers: [{
                selector: '#get-article-list',
                event: 'click',
                callback: () => {
                    this.selectFromArticleCollection();

                }
            },
            {
                selector: '#generate-insert',
                event: 'click',
                callback: () => {
                    this.updateFactboxViews({ addClasses: ['lab-busy', 'lab-busy-top'] });

                    this.options.articles = JSON.stringify(this.articleSelection);
                    this.options.language = this.getLanguageName(this.selectedLanguage);
                    this.api.v1.ns.get('textAssistant.fetchByGroupName')('topic_summary', this.aiSettings, this.options).then((respons) => {
                        const r = this.cleanUpJsonString(respons);
                        this.respons = JSON.parse(r);
                        this.updateFactboxModel();
                        this.updateFactboxViews({ removeClasses: ['lab-busy', 'lab-busy-top'] });

                    });
                    this.modal.close();

                }
            }],
            callbacks: {
                didDisplay: (modal) => {
                    /**
                     * Callbacks to handle user input from options define values in the prompt
                     */

                    this.buttonsGenerate = this.modal.markup.querySelectorAll('.lab-generate');

                    // Language
                    const languageSpan = modal.markup.querySelector('#selectedLang');
                    const language = modal.markup.querySelector('#languages');

                    language.addEventListener('change', (event) => {
                        this.selectedLanguage = language.value;
                        languageSpan.textContent = this.getLanguageName(language.value);
                    });
                    this.selectedLanguage = language.value;
                    languageSpan.textContent = this.getLanguageName(language.value);

                    // Factbox type
                    const typeSpan = modal.markup.querySelector('#selectedType');
                    const factboxType = modal.markup.querySelector('#factboxType');
                    const factboxDescription = modal.markup.querySelector('#factbox-description');

                    factboxType.addEventListener('change', (event) => {
                        typeSpan.textContent = factboxType.value;
                        this.options.factboxType = { [factboxType.value]: true };

                        // Update content description
                        if (factboxType.value === 'overview') {
                            factboxDescription.textContent = 'Generate a broad overview and focus on the most important aspects of the topic';
                        } else if (factboxType.value === 'development') {
                            factboxDescription.textContent = 'Generate summary that outlines the changes and focus on the development of the topic';
                        } else if (factboxType.value === 'brief') {
                            factboxDescription.textContent = 'Generate a brief summary of the topic';
                        } else {
                            factboxDescription.textContent = '';
                        }

                    });

                    typeSpan.textContent = factboxType.value;
                    this.options.factboxType = { [factboxType.value]: true };

                    /**
                     * Style options
                     */

                    // Use bulletpoints
                    const optionBulletpoints = modal.markup.querySelector('#use-bulletpoints');
                    optionBulletpoints.addEventListener('click', (event) => {
                        this.options.bulletpoints = optionBulletpoints.checked;
                    });

                    /*
                    // Reference - link to urls
                    const optionReferences = modal.markup.querySelector('#use-references');
                    optionReferences.addEventListener('click', (event) => {
                        this.options.references = optionReferences.checked;
                    });

                    // Bold names
                    const optionBoldNames = modal.markup.querySelector('#use-bold-names');
                    optionBoldNames.addEventListener('click', (event) => {
                        this.options.boldNames = optionBoldNames.checked;
                    });

                    // Bold keywords
                    const optionBoldKeywords = modal.markup.querySelector('#use-bold-keywords');
                    optionBoldKeywords.addEventListener('click', (event) => {
                        this.options.boldKeywords = optionBoldKeywords.checked;
                    });

                    // Add subheader
                    const optionSubheader = modal.markup.querySelector('#use-subheader');
                    optionSubheader.addEventListener('click', (event) => {
                        this.options.subheader = optionSubheader.checked;
                    });
                    */

                    // Focal point
                    const focalpointText = modal.markup.querySelector('#focalpointText');
                    const optionFocalpoint = modal.markup.querySelector('#focalpoint');
                    optionFocalpoint.addEventListener('change', (event) => {
                        if (optionFocalpoint.value.length > 0) {
                            this.options.focalpoint = optionFocalpoint.value;
                            focalpointText.innerHTML = `that emphasizes on <b>${ optionFocalpoint.value }</b> `;
                        } else {
                            this.options.focalpoint = null;
                            focalpointText.innerHTML = '';
                        }
                    });

                    console.log(this.factboxModel);

                },
                end: () => {
                }

            }
        });
    }

    updateFactboxViews(updateActions = null) {
        /**
         * Update all views from factbox model
         * @param {object} updateActions - Actions to update views with
         */

        this.factboxViews = this.api.v1.view.getViews(this.factboxModel);
        if (this.factboxViews && updateActions !== null) {
            // Remove classes for each view
            if (updateActions.removeClasses) {
                for (const elementClass of updateActions.removeClasses) {
                    for (const factboxView of this.factboxViews) {
                        factboxView.markup.classList.remove(elementClass);
                    }
                }
            }

            // Add classes for each view
            if (updateActions.addClasses) {
                for (const elementClass of updateActions.addClasses) {
                    for (const factboxView of this.factboxViews) {
                        factboxView.markup.classList.add(elementClass);
                    }
                }
            }
        }
    }

    updateModalMarkup() {
        /**
         * Update UI in main modal with a list of selected articles
         * Disable generate-buttons when list of selected articles is empty
         * Make a list of clickable article references with styling
         * Add event listeners to remove articles from list of selected articles
         * */

        const elementSelection = this.modal.markup.querySelector('#article-selection');
        const selectionIds = Object.keys(this.articleSelection);

        if (selectionIds && selectionIds.length === 0) {
            // Update UI when zero articles are selected
            elementSelection.innerHTML = '<p><em>No articles selected</em></p>'; // Clear existing content
            for (const button of this.buttonsGenerate) {
                button.classList.add('lab-disabled');
            }
        } else if (selectionIds && selectionIds.length >= 1) {
            // Update UI when there is a selection of articles
            elementSelection.innerHTML = ''; // Clear existing content
            for (const button of this.buttonsGenerate) {
                button.classList.remove('lab-disabled');
            }

            // Update list of articles
            for (const id of selectionIds) {
                const listItem = document.createElement('li');
                listItem.textContent = `${ id }: ${ this.articleSelection[id].title }`;
                elementSelection.appendChild(listItem);
            }

            // Add styling to list of articles
            const articleElements = this.modal.markup.querySelectorAll('#article-selection > li');
            articleElements.forEach((originalArticleElement) => {
                const articleElement = originalArticleElement.cloneNode(true);

                // To indicate it's clickable
                const marker = document.createElement('span');
                marker.textContent = 'X';
                marker.style.position = 'absolute';
                marker.style.left = '-20px';
                marker.style.top = '0';
                marker.style.display = 'none'; // Initially hidden
                marker.style.color = '#ff0000';
                marker.style.fontWeight = 'bold';
                marker.style.cursor = 'pointer';

                articleElement.appendChild(marker);
                articleElement.style.position = 'relative'; // Ensure articleElement is positioned

                // Remove selected article when clicked
                articleElement.addEventListener('click', (event) => {
                    const text = originalArticleElement.textContent.split(':');
                    if (text && text.length > 0) {
                        const id = text[0].trim();
                        this.removeFromArticleList(id);
                        this.updateArticlesListAndCheckEmpty();
                    }
                });

                // Indicate that selected article can be removed when hovering
                articleElement.addEventListener('mouseenter', (event) => {
                    const eventTarget = event.target;
                    marker.style.display = 'inline';
                    eventTarget.style.backgroundColor = 'rgba(255, 0, 0, 0.4)'; // Semi-transparent red
                    eventTarget.style.cursor = 'pointer';
                    articleElement.style.listStyleType = 'none';

                });

                // Remove styling if mouse leaves
                articleElement.addEventListener('mouseleave', (event) => {
                    const eventTarget = event.target;
                    marker.style.display = 'none';
                    eventTarget.style.backgroundColor = '';
                    articleElement.style.listStyleType = 'disc';

                });
                originalArticleElement.parentNode.replaceChild(articleElement, originalArticleElement);

            });
        }

    }

    updateArticlesListAndCheckEmpty() {
        this.updateArticleList(this.articleIds).then(() => {
            this.updateModalMarkup();
            // Check and update for empty state
            if (this.modal.markup.querySelectorAll('#article-selection > li').length === 0) {
                const elementSelection = this.modal.markup.querySelector('#article-selection');
                elementSelection.innerHTML = '<p><em>No articles selected</em></p>';
            }
        });
    }

    selectFromArticleCollection() {
        /**
         * Collection modal to select articles. Uses collection 'ArticlesLatest' as UI
         */
        return new Promise((resolve, reject) => {
            lab_api.v1.collection.display(
                {
                    /**
                     * Collection modal to select articles. Uses collection 'ArticlesLatest' as UI
                     */
                    name: 'ArticlesLatest',
                    modal: true,
                    isSilent: false,
                    skipCache: true,
                    options:
                    {
                        label: 'Select articles for topic summary',
                        width: 1400,
                        minHeight: 800,
                        isSilent: true,
                        type: 'topicSummary',
                        externalContentUpdater: true,
                        updateContents: {
                            footer: true,
                            markExisting: true
                        },
                        click: (uiInterface, model, element, event) => {
                            /**
                             * Callback when an article is clicked
                             * @param {object} uiInterface - The Labrador uiInterface
                             * @param {object} model - The Labrador model
                             * @param {object} element - The html element
                             * @param {object} event - The event
                             */
                            let id = model.data.contentdata.instance_of;
                            id = String(id);

                            if (!this.articleIds.includes(id)) {
                                this.articleIds.push(id);
                                this.currentlySelected.push(id);
                            } else {
                                this.articleIds = this.articleIds.filter((value) => value !== id);
                                this.currentlySelected = this.currentlySelected.filter((value) => value !== id);

                                this.updateArticleList();
                            }

                        },
                        updateContent: (htmlElement, params) => {
                            /**
                             * Update content in modal when it is displayed
                             * @param {object} htmlElement - The html element to update
                             * @param {object} params - Parameters to update the html element
                             */
                            if (params && params.type === 'footer') {
                                const form = htmlElement;
                                const elements = form.querySelectorAll('li'); // Select the first li in the list
                                for (const element of elements) {
                                    element.classList.remove('lab-grid-large-3');
                                    element.classList.add('lab-grid-large-2');
                                }

                                const listItem = document.createElement('li');
                                listItem.className = 'lab-grid-large-4 lab-btn lab-small';
                                listItem.style.cssText = 'display: flex; justify-content: center; align-items: center;';
                                listItem.innerHTML = '<b>Finished</b>';
                                // ADD EVENT LISTENER THAT CLOSES THE MODAL

                                listItem.addEventListener('click', (event) => {
                                    this.api.v1.ui.modal.close();
                                });

                                form.appendChild(listItem); // If there are no list items, just append it
                            } else if (params && params.type === 'markExisting') {
                                const id = String(params.id);
                                const item = htmlElement;

                                if ((!this.articleIds || !(this.articleIds.length > 0)) && (!this.currentlySelected || !(this.currentlySelected.length > 0))) {
                                    // Remove selected (not in article lists)
                                    if (item.element.classList.contains('lab-generate')) {
                                        item.element.classList.remove('lab-generate');
                                    }
                                    if (item.element.classList.contains('lab-selected')) {
                                        item.element.classList.remove('lab-selected');
                                    }
                                    return item;
                                }

                                // Remove lab-highlight-item (green color for article teasers on page)
                                if (item.element.classList.contains('lab-highlight-item')) {
                                    item.element.classList.remove('lab-highlight-item');
                                }

                                // Add lab-generate (purple color for new pick)
                                if (this.articleIds.includes(id)) {
                                    if (!item.element.classList.contains('lab-generate')) {
                                        item.element.classList.add('lab-generate');
                                    }
                                } else if (item.element.classList.contains('lab-generate')) {
                                    item.element.classList.remove('lab-generate');
                                }

                                // Remove lab-selected (already picked)
                                if (!this.currentlySelected || !(this.currentlySelected.length > 0)) {
                                    if (item.element.classList.contains('lab-selected')) {
                                        item.element.classList.remove('lab-selected');
                                    }

                                // Add lab-selected and lab-generate (give purple color for new pick)
                                } else if (this.currentlySelected.includes(id)) {
                                    if (!item.element.classList.contains('lab-selected')) {
                                        item.element.classList.add('lab-selected');
                                    }
                                    if (!item.element.classList.contains('lab-generate')) {
                                        item.element.classList.add('lab-generate');
                                    }
                                } else if (!this.currentlySelected.includes(id)) {
                                    if (item.element.classList.contains('lab-selected')) {
                                        item.element.classList.remove('lab-selected');
                                    }
                                }

                                return item;
                            }
                            return htmlElement;
                        },
                        end: (uiInterface) => {
                            /**
                             * Callback when modal is closed
                             * @param {object} uiInterface - The Labrador uiInterface
                             */
                            this.updateArticleList(this.articleIds).then(() => {
                                // Clean up so that the colors does not remain in other 'ArticlesLatest'-collections

                                // Remove lab-generate and lab-selected for clean up
                                for (const item of uiInterface.getContentList()) {
                                    item.element.classList.remove('lab-generate');
                                    item.element.classList.remove('lab-selected');
                                }

                                this.currentlySelected = [];
                                this.updateModalMarkup();
                                resolve();

                            });
                        }
                    }
                }
            );
        });
    }

    updateArticleList(ids = []) {
        /**
         * Update list of article ids
         * Fetch article nodes by article ids
         * Update article selection from article nodes
         */
        return new Promise((resolve, reject) => {
            if (!ids) {
                reject();
            }
            // Update this.articleList with new ids
            this.evaluateIds(ids);

            // Fetch article nodes, and then update article selection with
            this.fetchArticlesByIds()
                .then((articleNodes) => {
                    if (articleNodes) {
                        this.updateArticleSelection(articleNodes)
                            .then(() => {
                                resolve();
                            });

                    } else {
                        resolve();
                    }

                });
        });
    }

    removeFromArticleList(id) {
        /**
         * Remove article id from list of article ids
         */
        if (!this.articleList) {
            this.articleList = [];
        }
        this.articleIds = this.articleIds.filter((value) => value !== id);

    }

    evaluateIds(ids) {
        /**
         * Evaluate ids and add to list of article ids
         */
        if (ids && ids.length > 0) {
            for (let id of ids) {
                id = String(id);
                id = id.trim();

                if (!this.articleIds.includes(id) && id.length > 0) {
                    this.articleIds.push(id);
                }
            }
        }
    }

    fetchArticlesByIds(fields = ['title', 'bodytext']) {
        /**
         * Use the labrador api to fetch articles by list of ids
         */
        return new Promise((resolve, reject) => {

            let url = '/api/v1/article/?query=';

            if (this.articleIds && this.articleIds.length > 0) {
                for (const [index, element] of this.articleIds.entries()) {
                    if (index === 0) {
                        url += `id:${ element }`;
                    } else {
                        url += `%20OR%20id:${ element }`;
                    }
                }
                // Fetch
                fetch(url)
                    .then((response) => {
                        if (!response.ok) {
                            resolve([]);
                            // throw Error(response.statusText);
                        }
                        return response.json();
                    })
                    .then((resp) => {
                        resolve(resp.result);

                    })
                    .catch((error) => {
                        reject(error);
                    });
            } else {
                resolve([]);
            }
        });

    }

    updateArticleSelection(articleNodes = [], fields = ['title', 'bodytext', 'published_url', 'published']) {
        /**
         * Update article selection with given fields for the
         * The article selection is included in the prompt for reference to the ai service
         * @param {array} articleNodes - List of article nodes
         * @param {array} fields - List of fields to include in article selection
         */
        return new Promise((resolve, reject) => {
            this.articleSelection = {};
            for (const articleNode of articleNodes) {
                const { id } = articleNode;
                if (id) {
                    this.articleSelection[id] = {};
                    for (const field of fields) {
                        if (articleNode[field]) {
                            this.articleSelection[id][field] = articleNode[field];
                        }
                    }
                }
            }

            resolve();
        });

    }

    createFactbox(articles) {
        /** *
         * Create a new factbox. Not yet in use
         */
        const model = lab_api.v1.model.create.internal({
            type: 'factbox',
            contentdata: {
                fields: {
                    title: {
                        value: this.respons.title
                    },
                    bodytext: {
                        value: this.respons.bodytext
                    }
                }
            },
            metadata: {
                background_color: {
                    vp: {
                        desktop: 'bg-primary-light'
                    }
                }
            },
            width: 100
        });
        lab_api.v1.model.addChild(lab_api.v1.model.query.getModelByType('bodytext'), model);
    }

    updateFactboxModel() {
        /**
         * Update the factbox model that initialised the modal with the respons from the ai service
         */
        return new Promise((resolve, reject) => {
            // Tests ahead of updating factbox model
            if (!this.factboxModel) {
                reject(new Error('No node-model defined'));
            }
            if (!this.respons) {
                this.updateFactboxViews({ removeClasses: ['lab-busy', 'lab-busy-top'] });
                reject(new Error('No respons returned'));
            }

            if (this.respons) {
                const disclaimerText = `<p class="italic ai-disclaimer" data-lab-italic="italic">${ this.api.v1.locale.get('ai.factbox_disclaimer') }</p>`;

                // Update given fields in factbox-model
                for (const path of ['bodytext', 'title']) {
                    try {
                        let fieldText = this.respons[path];
                        if (fieldText) {
                            if (path === 'bodytext') {
                                fieldText += disclaimerText;
                            }
                            this.factboxModel.set(`fields.${ path }`, fieldText);
                        }

                    } catch (error) {
                        this.updateFactboxViews({ removeClasses: ['lab-busy', 'lab-busy-top'] });
                        reject(new Error(`Failed to set field ${ path } into current factbox-model`));
                    }
                }

                // Build ai metadata
                try {
                    const aiMetadata = this.aiSettings;
                    aiMetadata.timestamp = new Date().getTime();
                    aiMetadata.createdByName = this.api.v1.user.getUserName();
                    aiMetadata.createdById = this.api.v1.user.getUserId();
                    aiMetadata.selectionSourceIds = this.articleIds;
                    this.factboxModel.set('fields.ai_metadata_json', JSON.stringify(aiMetadata));
                } catch (error) {
                    reject(new Error(`Failed to build aiMetadata into current factbox-model`));
                }
            }
            resolve();
        });

    }

    cleanUpJsonString(data) {
        /**
         * Clean up json string to handle returning output that includes more than the expected json
         */
        let jsonString = data.trim();

        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {
            jsonString = jsonString.substring(jsonString.indexOf('{'));
        }

        if (!jsonString.includes('{')) {
            jsonString = `{${  jsonString }`;
        }

        if (!jsonString.includes('}')) {
            jsonString = `${  jsonString }}`;
        }

        // Test to choose the correct '}'. Ignore '}' with '\' ahead
        if (jsonString.match(/}/g).length > 1) {
            jsonString = jsonString.match(/(.|\n)*?(?<!\\)}/);
        }

        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {
            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);
        }

        jsonString = jsonString.trim();
        return jsonString;
    }

    getLanguageName(languageCode, cleanUp = true) {
        /**
         * Get language name from language code
         */
        let language = null;

        // Get name of langauge
        for (const lang of _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
            if (lang.code === languageCode) {
                language = lang.name;

            }
        }

        // Clean up language name
        if (language && cleanUp === true) {
            if (language.includes('-')) {
                language = language.substring(0, language.indexOf('-'));
            }
            if (/\(.*?\)/.test(language)) {
                language = language.replaceAll(/\(.*?\)/g, '');
            }
            language = language.trim();
        }
        language = language.trim();
        return language;
    }

}


/***/ }),

/***/ "./modules/apps/article/index.js":
/*!***************************************!*\
  !*** ./modules/apps/article/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleSettings": () => (/* binding */ ArticleSettings)
/* harmony export */ });
class ArticleSettings {

    constructor(api, params = {}) {
        this.api = api;
        this.dom = {
            sections: {},
            selected: null
        };
        this.nodeSetterPaths = new Map();
        this.rootModel = this.api.v1.model.query.getRootModel();

        if (!this.validatePage()) {
            Sys.logger.warn('[ArticleSettings] Page-type not validated. Will only run on article-pages.');
            return;
        }

        const additions = this.api.v1.config.get('customMenuData.ArticleSettings.additions') || [];
        const removals = this.api.v1.config.get('customMenuData.ArticleSettings.removals') || [];
        const customElements = this.api.v1.config.get('customMenuData.ArticleSettings.items');
        const apps = [
            'ArticleGeneralTeaser',
            'ArticleAudio',
            'SeoSettings',
            'ArticleDates',
            'ArticleStyling',
            'ArticleCommercialSettings',
            'ArticleNotes',
            'ArticleTranslate',
            'Colors',
            'ArticleAdvancedSettings',
            'ArticleSite',
            'ArticleApproval',
            'AdvancedViewports',
            'ConfigOverride',
            'RoxenExport',
            'AptomaExport',
            'ArticleChangelog'
        ].concat(additions).filter((app) => !removals.includes(app));
        this.apps = {};

        if (customElements && Array.isArray(customElements.formgroups)) {
            apps.push('CustomElements');
        }

        this.getResources(apps, params).then((resources) => {
            this.draw(resources, customElements);
        }).catch((error) => {
            Sys.logger.warn('[ArticleSettings] Error loading resources:');
            console.log(error);
        });
    }

    async getResources(appsList, params) {
        const templates = await this.api.v1.util.httpClient.get('/ajax/template/get-aliases?nodeType=front');
        const resources = {
            templates,
            params,
            setter: this.pathSetter.bind(this),
            rootModel: this.rootModel,
            helpers: {
                // Boolean node-data may be stored as number-strings. true -> "1", false -> "0"
                // Transform the string "0" to boolean false etc.
                toBoolean: (value) => {
                    if (!value || value === '0' || value === 'false') {
                        return false; // 0, '0', 'false', false, null, undefined, ...
                    }
                    return true;
                }
            },
            log: this.logAction.bind(this)
        };
        return {
            resources,
            apps: await this.importApps(appsList, resources)
        };
    }

    // This app can be extended with additional apps.
    // Each app can set data using: `this.setter(key, value)` bound to this method.
    pathSetter(key, value) {
        if (this.nodeSetterPaths.has(key)) {
            const pathInfo = this.nodeSetterPaths.get(key);
            let validatedValue = value;
            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {
                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {
                    return;
                }
            }
            if (typeof pathInfo.transformer === 'function') {
                validatedValue = pathInfo.transformer(value, pathInfo);
            }
            this.savePath(pathInfo.node, validatedValue, pathInfo.suggestReload);
        }
    }

    async importApps(apps, resources) {
        const promises = {};
        for (const app of apps) {
            promises[app] = this.api.v1.apps.start(app, resources);
        }
        const resolved = {};
        const modules = await Promise.all(Object.values(promises));
        modules.forEach((instance, index) => {
            const name = Object.keys(promises)[index];
            if (instance.enabled) {
                Sys.logger.debug(`[ArticleSettings] Adding app "${ name }"`);
                resolved[name] = instance;
            } else {
                Sys.logger.debug(`[ArticleSettings] Skipping disabled app "${ name }"`);
            }
        });
        return resolved;
    }

    // Only run on article-pages
    validatePage() {
        if (this.rootModel.getType() === 'page_article') {
            return true;
        }
        return false;
    }

    draw(input, customElements) {
        if (customElements && Array.isArray(customElements.formgroups) && input.apps.CustomElements) {
            input.apps.CustomElements.setElementsConfig(customElements);
        }
        const appsData = this.runApps(input.apps);
        const placeholders = appsData.map((app) => app.placeholder);
        const modal = this.api.v1.ui.modal.dialog({
            defaultButtons: false,
            container: {
                width: 800
            },
            content: {
                header: 'Article Settings',
                markup: `<div>${ appsData.map((app) => `<div data-placeholder="${ app.placeholder.name }"></div>`).join('') }</div>`
            },
            aside: {
                position: 'left',
                expandable: true,
                header: 'Options',
                content: this.getAsideMarkup(appsData),
                // template: 'apps/ArticleSettings/aside',
                noPadding: true,
                width: 210
            },
            callbacks: {
                didDisplay: () => {
                    // this.addCustomElements(modal.getMarkup());
                    // this.handleSaveAs(modal.getMarkup());
                    if (this.dom.selected) { return; }
                    this.setupEvents(modal.getMarkup());
                    if (input.resources.params.source) {
                        this.dom.selected = appsData[0].name;
                        this.displaySource(input.resources.params.source);
                    } else {
                        this.displaySource(appsData[0].name);
                    }
                },
                end: () => {
                    if (!this.dom.selected || !this.apps[this.dom.selected]) {
                        return;
                    }
                    if (this.apps[this.dom.selected].onHidden) {
                        this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);
                    }
                }
            },
            placeholders
        });
    }

    getAsideMarkup(appsData) {
        const items = [];
        const sections = {};
        for (const appData of appsData) {
            if (appData.aside.section && appData.aside.label) {
                if (!sections[appData.aside.section]) {
                    sections[appData.aside.section] = { label: appData.aside.section, items: [] };
                }
                sections[appData.aside.section].items.push({
                    label: appData.aside.label,
                    target: appData.name
                });
            } else {
                Sys.logger.warn(`[ArticleSettings] Missing required "aside.section" or "aside.label" for app "${ appData.name }"`);
            }
        }
        for (const name of Object.keys(sections)) {
            items.push(`<div class="lab-aside-settings">
                <h4 class="lab-title">${ sections[name].label }</h4>
                ${ sections[name].items.map((item) => `<p class="lab-para lab-link" data-nav-target="${ item.target }">${ item.label }</p>`).join('') }
            </div>`);
        }
        return items.join('');
    }

    displaySource(source) {
        if (this.dom.selected === source) { return; }
        if (!this.dom.sections[source]) {
            Sys.logger.warn(`[ArticleSettings] Missing source "${ source }".`);
            return;
        }
        if (this.dom.selected) {
            this.dom.sections[this.dom.selected].nav.classList.remove('lab-selected');
            this.dom.sections[this.dom.selected].element.classList.add('lab-hidden');
            if (this.apps[this.dom.selected].onHidden) {
                this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);
            }
            this.dom.selected = null;
        }
        if (!this.dom.sections[source].element) {
            Sys.logger.warn(`[ArticleSettings] Missing dom-element for source "${ source }".`);
            return;
        }
        this.dom.sections[source].nav.classList.add('lab-selected');
        this.dom.sections[source].element.classList.remove('lab-hidden');
        this.dom.selected = source;

        if (this.apps[source].onDisplayed) {
            this.apps[source].onDisplayed(this.dom.sections[source].element);
        }

        // Log name of tab in UI log:
        this.logAction({
            type: 'tab',
            app: source
        });
    }

    setupEvents(markup) {
        for (const el of markup.querySelectorAll('.lab-aside-settings [data-nav-target]')) {
            const source = el.getAttribute('data-nav-target');
            if (source) {
                this.dom.sections[source] = {
                    selected: el.classList.contains('lab-selected'),
                    name: source,
                    nav: el,
                    element: markup.querySelector(`.lab-modal-content [data-source="${ source }"]`)
                };
                this.registerItem(source, this.dom.sections[source]);
            }
        }
    }

    registerItem(source, dom) {
        dom.nav.addEventListener('click', (event) => {
            this.displaySource(source);
        }, false);
        if (dom.selected) {
            this.displaySource(source);
        }
    }

    runApps(apps) {
        const result = [];
        for (const name of Object.keys(apps)) {
            const app = apps[name];
            const markup = app.onMarkup();
            if (markup) {
                this.apps[name] = app;
                markup.setAttribute('data-source', name);
                const aside = app.onAside() || {};
                if (aside.item) {
                    aside.identifier = name;
                }
                const paths = app.onPaths() || {};
                const item = {
                    placeholder: {
                        element: markup,
                        selector: `[data-placeholder="${ name }"]`,
                        name
                    },
                    paths,
                    aside,
                    name
                };
                this.registerAutoSave(markup, paths, app);
                result.push(item);
            } else {
                Sys.logger.warn(`[ArticleSettings] No markup returned by app "${ name }".`);
            }
        }
        return result;
    }

    registerAutoSave(markup, paths, app) {
        for (const path of Object.keys(paths)) {
            if (paths[path].node) {
                this.nodeSetterPaths.set(paths[path].node, paths[path]);
            }
            const els = markup.querySelectorAll(`[name="${ path }"]`);
            if (els.length) {
                for (const el of els) {
                    this.registerInputItem(el, paths[path], app);
                }
            }
        }
    }

    registerInputItem(element, pathInfo, app) {
        element.addEventListener('change', (event) => {
            let value = pathInfo.boolean ? element.checked : element.value;
            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {
                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {
                    element.parentElement.classList.add('lab-validation-error');
                    return;
                }
                element.parentElement.classList.remove('lab-validation-error');
            }
            if (typeof pathInfo.transformer === 'function') {
                value = pathInfo.transformer(value, pathInfo);
            }
            if (pathInfo.callback && typeof pathInfo.callback === 'function') {
                pathInfo.callback(element, pathInfo);
            }
            if (pathInfo.node) {
                this.savePath(pathInfo.node, value, pathInfo.suggestReload);
            }
            if (pathInfo.meta) {
                this.saveMeta(pathInfo.meta, value);
            }

            // Log path and app-name in UI log:
            this.logAction({
                type: 'data',
                app: app.constructor.name,
                path: pathInfo.node || pathInfo.meta
            });
        }, false);
    }

    logAction(data) {
        if (this.api.v1.eventmonitor.writer.log) {
            this.api.v1.eventmonitor.writer.log({
                action: 'baseview_articleSettings',
                ...data
            });
        }
    }

    savePath(path, value, suggestReload) {
        const modified = this.rootModel.set(path, value);
        if (modified && suggestReload) {
            this.displayReloadOptions();
        }
    }

    saveMeta(path, value) {
        console.log('Todo: saveMeta: ', path, value);
        // const data = {};
        // data[path] = value;
        // this.api.v1.pages.front.update(data);
    }

    displayReloadOptions() {
        this.api.v1.ui.modal.dialog({
            content: {
                title: 'Page updated',
                description: 'Reload editor for changes to take effect'
            },
            footer: {
                buttons: [
                    {
                        value: 'Keep editing',
                        highlight: false,
                        id: 'keep-editing'
                    },
                    {
                        value: 'Reload',
                        type: 'submit',
                        highlight: true
                    }
                ]
            },
            eventHandlers: [{
                selector: '#keep-editing',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }],
            callbacks: {
                submit: () => {
                    this.api.v1.ui.modal.close(true);
                    this.api.v1.app.reload();
                }
            }
        });
    }

}


/***/ }),

/***/ "./modules/apps/fieldversion/index.js":
/*!********************************************!*\
  !*** ./modules/apps/fieldversion/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FieldVersion": () => (/* binding */ FieldVersion)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelperInt.js */ "./modules/lib/helpers/datetime/DateTimeHelperInt.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ "./modules/apps/fieldversion/template.js");



class FieldVersion {

    constructor(api, {
        field = null, model = null, limit = 400, callbacks = {}, selector = ''
    } = {}) {
        this.api = api;
        this.field = field;
        this.model = model;
        this.limit = limit;
        this.callbacks = callbacks;
        this.selector = selector;
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelperInt();

        if (!this.field || !this.model) {
            console.error('[FieldVersion] Params "field" and "model" are required.');
            return;
        }
        this.id = this.model.get('id');
        this.state = {
            busy: false,
            index: 0, // Current revision is 0, higher number is further back in time.
            page: 1,
            data: [],
            hasMore: true,
            openRequest: false
        };
        this.dom = {};
        this.setupUI();
    }

    setupUI() {
        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/apps/fieldversion/fieldversion.css');
        this.api.v1.ui.modal.dialog({
            container: {
                css: 'fieldversions',
                width: 1200
            },
            content: {
                header: 'Preview'
            },
            aside: {
                position: 'left',
                content: _template_js__WEBPACK_IMPORTED_MODULE_1__["default"].aside,
                width: '30%',
                header: 'Field Revisions'
            },
            footer: {
                buttons: [
                    {
                        value: 'Previous',
                        type: 'button',
                        id: 'btn-prev',
                        highlight: false
                    },
                    {
                        value: 'Next',
                        type: 'button',
                        id: 'btn-next',
                        highlight: false
                    },
                    {
                        value: 'Insert',
                        type: 'submit',
                        id: 'btn-insert',
                        highlight: false
                    },
                    {
                        value: 'Cancel',
                        id: 'btn-close',
                        highlight: true
                    }
                ]
            },
            callbacks: {
                didDisplay: (theModal) => {
                    const markup = theModal.getMarkup();
                    markup.querySelector('.lab-modal-content').appendChild(this.api.v1.util.dom.toDom(_template_js__WEBPACK_IMPORTED_MODULE_1__["default"].main));
                    const previous = markup.querySelector('#btn-prev');
                    const next = markup.querySelector('#btn-next');
                    const date = markup.querySelector('.date');
                    const user = markup.querySelector('.user');
                    const insert = markup.querySelector('#btn-insert');
                    const close = markup.querySelector('#btn-close');
                    const revision = markup.querySelector('.revision');
                    const preview = markup.querySelector('.preview');
                    markup.querySelector('.field').innerHTML = this.field;
                    markup.querySelector('.node').innerHTML = this.model.getId();
                    previous.addEventListener('click', () => this.navigateBackward());
                    next.addEventListener('click', () => this.navigateForward());
                    insert.addEventListener('click', () => this.insertVersion());
                    close.addEventListener('click', () => this.end());
                    this.dom = {
                        modal: theModal,
                        markup,
                        preview,
                        nav: {
                            previous,
                            next,
                            insert,
                            close
                        },
                        date,
                        user,
                        revision
                    };
                    this.getVersionData();
                }
            }
        });
    }

    end() {
        this.dom.modal.close();
        this.dom = null;
        this.api.v1.model.redraw(this.model);
        if (this.callbacks.end) {
            this.callbacks.end(this);
        }
    }

    getUrl() {
        const { limit } = this;
        const offset = (this.limit * (this.state.page - 1)) || 0;
        return `/ajax/field-versions/get-list?nodeId=${ this.id }&fieldName=${ this.field }&limit=${ limit }&offset=${ offset }&debug=0&doExplain=0&format=&fromTime&toTime`;
    }

    // Note: If no version-data exist the response will be an empty string.
    getVersionData(callback) {
        if (!this.state.hasMore) {
            this.displayNoHits();
            return;
        }
        this.setBusy(true);
        fetch(this.getUrl()).then((resp) => resp.json()).then((resp) => {
            this.setBusy(false);
            if (!resp || !Array.isArray(resp)) {
                this.state.hasMore = false;
                this.displayNoHits();
                return;
            }

            if (resp.length < this.limit) {
                this.state.hasMore = false;
            }

            let data = [];
            if (resp && Array.isArray(resp) && resp.length > 0) {
                data = this.filterData(resp);
            }
            if (data.length) {
                this.updateVersionData(data);
                if (callback) {
                    callback();
                } else {
                    this.displayIndex(this.state.index);
                }
            } else {
                this.state.page++;
                this.getVersionData(callback);
            }
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    setBusy(isBusy) {
        this.state.openRequest = isBusy;
        if (isBusy) {
            this.dom.markup.classList.add('lab-busy');
        } else {
            this.dom.markup.classList.remove('lab-busy');
        }
    }

    filterData(data) {
        return data.filter((item) => item.name === this.field);
    }

    navigateBackward(skipRetry = false) {
        if (this.state.openRequest) {
            return;
        }
        const newIndex = this.state.index + 1;
        if (newIndex < this.state.data.length) {
            this.state.index = newIndex;
            this.displayIndex(newIndex);
        } else if (!skipRetry) {
            this.state.page++;
            this.getVersionData(() => {
                this.navigateBackward(true);
            });
        }
    }

    navigateForward() {
        if (this.state.openRequest) {
            return;
        }
        const newIndex = this.state.index - 1;
        if (newIndex >= 0) {
            this.state.index = newIndex;
            this.displayIndex(newIndex);
        }
    }

    displayNoHits() {
        this.dom.date.innerHTML = 'No revison found ...';
        this.dom.user.innerHTML = '--';
        this.dom.revision.innerHTML = '--';
        this.updateNavigation();
    }

    displayIndex(index) {
        this.dom.date.innerHTML = this.formatDate(this.state.data[index].audit_time) + (index === 0 ? ' (current)' : '');
        this.dom.user.innerHTML = this.state.data[index].user_name;
        this.dom.revision.innerHTML = this.state.data[index].revision_id;
        this.updateFieldPreview();
        this.updateNavigation();
    }

    updateFieldPreview() {
        this.dom.preview.innerHTML = this.state.data[this.state.index].value || '<p></p>';
    }

    insertVersion() {
        if (!this.state.data[this.state.index]) {
            console.warn(`[FieldVersion] No version data found for index ${ this.state.index } ...`);
            return;
        }
        this.model.set(`fields.${ this.field }`, this.state.data[this.state.index].value);
        this.end();
        this.api.v1.model.highlight.message(this.model, 'Revision inserted');
    }

    formatDate(dateString) {
        // new Date('2024-02-27 18:35:48.055554+01')
        const date = new Date(dateString);
        const dateFormat = this.api.v1.locale.get('dates.monthdayyear', { noRender: true });
        const timeFormat = this.api.v1.locale.get('dates.hourminute', { noRender: true });
        return `${ this.dateTimeHelper.format(date, dateFormat) } ${ this.dateTimeHelper.format(date, timeFormat) }`;
    }

    updateNavigation() {
        if (this.state.index === 0) {
            this.dom.nav.next.classList.add('lab-disabled');
        } else {
            this.dom.nav.next.classList.remove('lab-disabled');
        }
        if (!this.state.hasMore && this.state.data.length <= this.state.index + 1) {
            this.dom.nav.previous.classList.add('lab-disabled');
        } else {
            this.dom.nav.previous.classList.remove('lab-disabled');
        }
    }

    updateVersionData(data) {
        for (const item of data) {
            this.state.data.push(item);
        }
    }

}


/***/ }),

/***/ "./modules/apps/fieldversion/template.js":
/*!***********************************************!*\
  !*** ./modules/apps/fieldversion/template.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    aside: `
        <form class="content">
            <div class="item small info">
                <p>Field: <span class="field"></span><br>
                Node: <span class="node"></span></p>
            </div>
            <div class="info">
                <h3 class="date">--</h3>
                <p>Revision <em class="revision">--</em><br>
                User <em class="user">--</em></p>
            </div>
        </form>`,
    main: `<div>
        <div class="preview"></div>
    </div>`,
    nav: `<ul></ul>`
});


/***/ }),

/***/ "./modules/apps/front/AdvancedViewports.js":
/*!*************************************************!*\
  !*** ./modules/apps/front/AdvancedViewports.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdvancedViewports": () => (/* binding */ AdvancedViewports)
/* harmony export */ });
/* harmony import */ var _helpers_RequiredVieworts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/RequiredVieworts.js */ "./modules/apps/helpers/RequiredVieworts.js");
/* harmony import */ var _helpers_MainViewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/MainViewport.js */ "./modules/apps/helpers/MainViewport.js");



class AdvancedViewports {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.log = params.log;
        this.enabled = this.api.v1.user.hasPermission('admin_user'); // Sub-views may override and set to false to disable
        this.requiredViewortsHelper = new _helpers_RequiredVieworts_js__WEBPACK_IMPORTED_MODULE_0__.RequiredVieworts(
            this.api,
            this.api.v1.viewport.getEditable(),
            this.api.v1.viewport.getMain(),
            [...(this.rootModel.get('fields.lab_required_viewports_json') || [])],
            this.rootModel,
            'fields.lab_required_viewports_json',
            'admin_user',
            (path, value) => {
                this.log({
                    type: 'data',
                    app: this.constructor.name,
                    path
                });
            }
        );
        this.mainViewortsHelper = new _helpers_MainViewport_js__WEBPACK_IMPORTED_MODULE_1__.MainViewport(
            this.api,
            this.api.v1.viewport.getEditable(),
            this.rootModel.get('fields.lab_main_viewport') || this.api.v1.viewport.getMain(),
            this.rootModel,
            'fields.lab_main_viewport',
            'admin_user',
            (path, value) => {
                this.log({
                    type: 'data',
                    app: this.constructor.name,
                    path
                });
            }
        );

        // requiredVieworts: this.api.v1.apps.start('RequiredVieworts', this.api.v1.viewport.getEditable(), this.api.v1.viewport.getMain(), [...(this.rootModel.get('fields.lab_required_viewports_json') || [])], this.rootModel, 'fields.lab_required_viewports_json', 'admin_user'),
        // mainViewport: this.api.v1.apps.start('MainViewport', this.api.v1.viewport.getEditable(), this.rootModel.get('fields.lab_main_viewport') || this.api.v1.viewport.getMain(), this.rootModel, 'fields.lab_main_viewport', 'admin_user'),

        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-bordered">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-medium lab-space-above-none">Require viewport(s)</h2>
                <p class="lab-grid-large-12 lab-grid-gap">Users normally selects viewports to edit themselves (hotkey <span class="lab-label-hotkey">V</span>). This option lets editors require selected viewports to always display for current page.</p>
                <div data-placeholder="viewports-required">
                    <!-- Element replaced by modal -->
                </div>
            </div>
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-medium lab-space-above-none">Set main viewport</h2>
                <p class="lab-grid-large-12 lab-grid-gap">The viewport defined as "main" is used for fallback-data and should be set to the viewport with the richest data-set.</p>
                <div data-placeholder="viewports-main">
                    <!-- Element replaced by modal -->
                </div>
            </div>
        </div>`;

        // {
        //     selector: '[data-placeholder="viewports-required"]',
        //     element: resources.modules.requiredVieworts.getMarkup()
        // }
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Advanced',
            label: 'Viewports'
        };
    }

    onPaths() {}

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                name: this.rootModel.get('fields.name'),
                hostpath: this.rootModel.get('fields.hostpath'),
                lab_canonical: this.rootModel.get('fields.lab_canonical'),
                defaultsection: this.rootModel.get('fields.defaultsection')
            }
        }, true);
        const viewportsPlaceholder = markup.querySelector('[data-placeholder="viewports-required"]');
        viewportsPlaceholder.parentNode.replaceChild(this.requiredViewortsHelper.getMarkup(), viewportsPlaceholder);
        const mainViewportsPlaceholder = markup.querySelector('[data-placeholder="viewports-main"]');
        mainViewportsPlaceholder.parentNode.replaceChild(this.mainViewortsHelper.getMarkup(), mainViewportsPlaceholder);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/front/AutomationSettings.js":
/*!**************************************************!*\
  !*** ./modules/apps/front/AutomationSettings.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutomationSettings": () => (/* binding */ AutomationSettings)
/* harmony export */ });
class AutomationSettings {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.meta = params.meta;
        this.frontSettings = this.api.v1.pages.front.getByNodeId(this.rootModel.getId());
        this.enabled = true;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none">Automatic content</h2>

                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-3 lab-grid-gap lab-inline">
                    <label for="id-meta.automatic">Enabled</label>
                    <input id="id-meta.automatic" type="checkbox" name="automatic" value="1"{{ #meta.automatic }} checked{{ /meta.automatic }}>
                </div>

                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-9 lab-grid-gap lab-inline">
                    <label for="id-meta.termMode">Use terms, not tags</label>
                    <input id="id-meta.termMode" type="checkbox" name="termMode" value="1"{{ #meta.termMode }} checked{{ /meta.termMode }}>
                </div>

                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                    <label for="automation-layout">Layout from page</label>
                    <div data-placeholder="automation-layout">
                        <!-- Element replaced by modal -->
                    </div>
                </div>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-bordered">
                    <label for="automation-automatic_site_id">Content from site</label>
                    <div data-placeholder="automation-automatic_site_id">
                        <!-- Element replaced by modal -->
                    </div>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="automation-tags">Include tags</label>
                    <input type="text" name="tags" id="automation-tags" value="{{ meta.tags }}" placeholder="Comma-separated list of tags ...">
                </div>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline">
                    <label for="automation-automatic_and">Require all tags (AND)</label>
                    <input type="checkbox" name="automatic_and" id="automation-automatic_and" value="1"{{ #meta.automatic_and }} checked{{ /meta.automatic_and }}>
                </div>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                    <label for="automation-exclude">Exclude tags</label>
                    <input type="text" name="exclude" id="automation-exclude" value="{{ meta.exclude }}" placeholder="Comma-separated list of tags ...">
                </div>
            </div>
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Automation',
            label: 'Automatic content'
        };
    }

    onPaths() {
        return {
            automatic: {
                node: 'fields.automatic',
                meta: 'automatic',
                boolean: true
            },
            termMode: {
                node: 'fields.termMode',
                meta: 'termMode',
                boolean: true
            },
            layout: {
                meta: 'layout',
                validator: 'notEmpty'
            },
            automatic_site_id: {
                meta: 'automatic_site_id'
            },
            tags: {
                meta: 'tags'
            },
            exclude: {
                meta: 'exclude'
            },
            automatic_and: {
                meta: 'automatic_and',
                boolean: true
            }
        };
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            meta: this.meta
        }, true);
        const layoutPlaceholder = markup.querySelector('[data-placeholder="automation-layout"]');
        layoutPlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getPageSelector({
            siteId: null,
            value: parseInt(this.meta.layout, 10),
            pages: this.api.v1.pages.front.getAll().map((page) => ({
                frontname: page.frontid === this.frontSettings.frontid ? (`${ page.frontname } (this page)`) : page.frontname,
                nodeid: page.frontid,
                site_id: page.site_id
            })),
            attributes: [{
                name: 'name', value: 'layout'
            }, {
                name: 'id', value: 'automation-layout'
            }]
        }), layoutPlaceholder);
        const sitePlaceholder = markup.querySelector('[data-placeholder="automation-automatic_site_id"]');
        sitePlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getSiteSelector({
            label: 'All sites',
            value: parseInt(this.meta.automatic_site_id, 10) || '',
            attributes: [{
                name: 'name', value: 'automatic_site_id'
            }, {
                name: 'id', value: 'automation-automatic_site_id'
            }]
        }), sitePlaceholder);
        // Fix for automatic_and. The boolean value is storead as string in meta.
        if (this.meta.automatic_and === 'false') {
            const automatic_and_el = markup.querySelector('#automation-automatic_and');
            automatic_and_el.removeAttribute('checked');
        }
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/front/Colors.js":
/*!**************************************!*\
  !*** ./modules/apps/front/Colors.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Colors": () => (/* binding */ Colors)
/* harmony export */ });
/* harmony import */ var _lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/editor/ColorUtils.js */ "./modules/lib/editor/ColorUtils.js");


class Colors {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.isArticle = this.rootModel.getType() === 'page_article';
        this.enabled = true;
        this.bgColors = this.api.v1.config.get('background_colors') || [];
        this.bgColorsMarkup = this.generateColorMarkup(this.bgColors, 'pageBackgroundColor');
        this.fontColors = this.api.v1.config.get('font_colors') || [];
        this.fontColorsMarkup = this.generateColorMarkup(this.fontColors, 'pageFontColor');
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">

            <div class="lab-formgroup lab-grid lab-grid-gap background-color-picker">
                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">Background color</h4>
                ${ this.bgColorsMarkup }
            </div>

            <div class="lab-formgroup lab-grid lab-grid-gap custom-background-color-picker lab-valign-bottom">
                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">Custom Background color</h4>
                <p class="lab-para lab-grid-large-12 lab-grid-gap">Note: This will override the selected background color above.</p>
                ${ this.generateCustomColorMarkup() }
            </div>

            <div class="lab-formgroup lab-grid lab-grid-gap font-color-picker">
                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">Font color</h4>
                ${ this.fontColorsMarkup }
            </div>

        </div>`;
    }

    generateColorMarkup(colors, field) {
        const current = this.rootModel.get(`fields.${ field }`);
        let markup = `<div class="lab-formgroup-item lab-grid-large-4 lab-grid-gap lab-inline">
            <label for="${ field }-noColor" class="noColor">Default color</label>
            <input type="radio" value="" name="${ `fields.${ field }` }" id="${ field }-noColor" ${ current === '' && !this.rootModel.get('fields.pageBackgroundColorStyle') ? 'checked' : '' }>
        </div>`;

        colors.forEach((color) => {
            markup += `<div title="${ color }" class="lab-formgroup-item lab-grid-large-2 lab-grid-gap lab-inline page-settings-color-radio">
                <label for="${ color }" class="${ color }"></label>
                <input type="radio" value="${ color }" name="${ `fields.${ field }` }" id="${ color }" ${ color === current ? 'checked' : '' }>
            </div>`;
        });

        return markup;
    }

    generateCustomColorMarkup() {
        const current = this.rootModel.get('fields.pageBackgroundColorStyle') || '';
        const hasHeaderImage = !!lab_api.v1.model.query.getModelByPath('page_article/articleHeader/image');
        let content = `<div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap">
            <input type="text" value="${ current }" placeholder="CSS style like rgb(10, 255, 0)" name="fields.pageBackgroundColorStyle">
        </div>`;
        if (hasHeaderImage) {
            content += `<div class="lab-formgroup-item lab-grid-large-6 lab-grid-gap"><input type="button" value="Get from header image" id="get_custom_color_button"></div>`;
        }
        if (this.isArticle && !hasHeaderImage) {
            content += `<div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap"><p class="lab-para">Tip: Add a header image and select 'Get background color from image' in the media options button <span class="labicon-image"></span> to select a matching color.</p></div>`;
        }
        return content;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Colors'
        };
    }

    onPaths() {
        return {
            'fields.pageBackgroundColor': {
                node: 'fields.pageBackgroundColor',
                callback: (element) => {
                    // Reset custom color:
                    this.rootModel.set('fields.pageBackgroundColorStyle', '');
                    const customColorEl = this.markup.querySelector('input[name="fields.pageBackgroundColorStyle"]');
                    const customColorValue = customColorEl.value;
                    customColorEl.value = '';

                    // Update selector on body-element for all viewports in the editor
                    // to allow preview without a reload.
                    const docs = this.api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.pageBackgroundColor');
                    const labelEl = element.parentElement.querySelector('label');
                    let isDark = false;
                    if (labelEl) {
                        const compStyles = window.getComputedStyle(labelEl);
                        const color = compStyles.getPropertyValue('background-color');
                        if (color) {
                            const rgbArray = color.match(/\d+/g).map(Number); // [234, 88, 11]
                            if (Array.isArray(rgbArray) && rgbArray.length === 3) {
                                isDark = _lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__.ColorUtils.getBrightness(rgbArray) < 130;
                            }
                            this.rootModel.set('fields.pageBackgroundColorStyleDark', isDark ? '1' : '');
                        }
                    }
                    for (const doc of docs) {
                        if (current) {
                            doc.body.classList.remove(current);
                            doc.body.classList.remove('custom-background-color');
                        }
                        if (customColorValue) {
                            doc.body.style.backgroundColor = '';
                            doc.body.style.color = '';
                        }
                        if (element.value) {
                            doc.body.classList.add(element.value);
                            doc.body.classList.add('custom-background-color');
                            if (doc.body.querySelector('main > article')) {
                                doc.body.querySelector('main > article').classList.add('bg-baseview-custom');
                            }
                        } else if (doc.body.querySelector('main > article')) {
                            doc.body.querySelector('main > article').classList.remove('bg-baseview-custom');
                        }
                        if (isDark) {
                            doc.body.classList.add('dark-mode');
                        } else {
                            doc.body.classList.remove('dark-mode');
                        }
                    }
                }
            },
            'fields.pageBackgroundColorStyle': {
                node: 'fields.pageBackgroundColorStyle',
                callback: (element) => {
                    // Reset background color and select default color in UI:
                    this.rootModel.set('fields.pageBackgroundColor', '');
                    const colorEl = this.markup.querySelector('input[name="fields.pageBackgroundColor"]:checked');
                    if (colorEl) {
                        colorEl.checked = false;
                    }

                    const docs = this.api.v1.viewport.getContexts();
                    const value = element.value.trim();
                    const rgbArray = value.startsWith('rgb') ? (value.match(/\d+/g) || []).map(Number) : _lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__.ColorUtils.hex2rgb(value);
                    const isDark = (Array.isArray(rgbArray) && rgbArray.length === 3) ? _lib_editor_ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__.ColorUtils.getBrightness(rgbArray) < 130 : false;
                    this.rootModel.set('fields.pageBackgroundColorStyleDark', isDark ? '1' : '');

                    for (const doc of docs) {
                        if (value) {
                            doc.body.style.backgroundColor = value;
                            doc.body.classList.add('custom-background-color', 'bg-baseview-custom');
                            if (doc.body.querySelector('main > article')) {
                                doc.body.querySelector('main > article').classList.add('bg-baseview-custom');
                            }
                        } else {
                            doc.body.style.backgroundColor = '';
                            doc.body.classList.remove('custom-background-color', 'bg-baseview-custom');
                            if (doc.body.querySelector('main > article')) {
                                doc.body.querySelector('main > article').classList.remove('bg-baseview-custom');
                            }
                        }
                        if (isDark) {
                            doc.body.classList.add('dark-mode');
                            doc.body.style.color = value ? '#fff' : '';
                        } else {
                            doc.body.classList.remove('dark-mode');
                            doc.body.style.color = '';
                        }
                    }
                }
            },
            'fields.pageFontColor': {
                node: 'fields.pageFontColor',
                callback: (element) => {
                    // Update selector on body-element for all viewports in the editor
                    // to allow preview without a reload.
                    const docs = this.api.v1.viewport.getContexts();
                    const current = this.rootModel.get('fields.pageFontColor');
                    for (const doc of docs) {
                        if (current) {
                            doc.body.classList.remove(current, 'custom-font-color');
                            const articleSection = doc.querySelector('main > article');
                            if (articleSection) {
                                articleSection.classList.remove(current, 'custom-font-color');
                            }
                        }
                        if (element.value) {
                            doc.body.classList.add(element.value, 'custom-font-color');
                            const articleSection = doc.querySelector('main > article');
                            if (articleSection) {
                                articleSection.classList.add(element.value, 'custom-font-color');
                            }
                        }
                    }
                }
            }
        };
    }

    onMarkup() {
        this.markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                pageBackgroundColor: this.rootModel.get('fields.pageBackgroundColor'),
                pageFontColor: this.rootModel.get('fields.pageFontColor')
            }
        }, true);
        const selectCustomBackgroundColorButton = this.markup.querySelector('#get_custom_color_button');
        if (selectCustomBackgroundColorButton) {
            selectCustomBackgroundColorButton.addEventListener('click', () => {
                const fn = this.api.v1.ns.get('contextualmenu.callbacks.getImageColors');
                if (fn) {
                    const articleHeader = this.api.v1.model.query.getModelByType('articleHeader');
                    fn(articleHeader, this.api.v1.view.getView(articleHeader), undefined, undefined, (result) => {
                        this.markup.querySelector('input[name="fields.pageBackgroundColorStyle"]').value = result.color;
                        const colorEl = this.markup.querySelector('input[name="fields.pageBackgroundColor"]:checked');
                        if (colorEl) {
                            colorEl.checked = false;
                        }
                    });
                }
            });
        }
        return this.markup;
    }

}


/***/ }),

/***/ "./modules/apps/front/ConfigOverride.js":
/*!**********************************************!*\
  !*** ./modules/apps/front/ConfigOverride.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfigOverride": () => (/* binding */ ConfigOverride)
/* harmony export */ });
class ConfigOverride {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = this.api.v1.user.hasPermission('admin_frontpages'); // Sub-views may override and set to false to disable
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none">Config override</h2>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                    <label for="lab_override_config_edit">Config for current page - Editor</label>
                    <textarea name="fields.lab_override_config_edit" id="lab_override_config_edit" placeholder="valid json only, use with caution" style="height:180px;">{{ fields.lab_override_config_edit }}</textarea>
                </div>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                    <label for="lab_override_config_presentation">Config for current page - Front</label>
                    <textarea name="fields.lab_override_config_presentation" id="lab_override_config_presentation" placeholder="valid json only, use with caution" style="height:180px;">{{ fields.lab_override_config_presentation }}</textarea>
                </div>
            </div>
        </div>
        `;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Advanced',
            label: 'Config override'
        };
    }

    onPaths() {
        return {
            'fields.lab_override_config_edit': {
                node: 'fields.lab_override_config_edit',
                validator: 'isJsonStringOrEmpty'
            },
            'fields.lab_override_config_presentation': {
                node: 'fields.lab_override_config_presentation',
                validator: 'isJsonStringOrEmpty'
            }
        };
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                lab_override_config_edit: this.rootModel.get('fields.lab_override_config_edit'),
                lab_override_config_presentation: this.rootModel.get('fields.lab_override_config_presentation')
            }
        }, true);
        return markup;
    }

}


/***/ }),

/***/ "./modules/apps/front/ExportMailmojo.js":
/*!**********************************************!*\
  !*** ./modules/apps/front/ExportMailmojo.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExportMailmojo": () => (/* binding */ ExportMailmojo)
/* harmony export */ });
class ExportMailmojo {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = this.api.v1.user.hasPermission('admin_mailmojo');
        this.newsletterListUrl = '/ajax/integration-services/proxy/newsletter/mailmojo/api-proxy/?embedUserData&resourcePath=/lists';
        this.segmentListUrl = '/ajax/integration-services/proxy/newsletter/mailmojo/api-proxy/?embedUserData&resourcePath=/lists/';
        this.template = `
            <div class="lab-modal-form lab-grid lab-hidden">
                <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-bordered">
                    <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-medium lab-space-above-none">Send this frontpage as a newsletter</h2>
                    <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline">
                        <a href="" class="lab-btn" target="_blank" id="mailmojo-login">Log in</a>
                    </div>
                    <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline">
                        <input type="button" value="Refresh newsletter list" id="mailmojo-refresh">
                        <input type="button" value="Logout from Mailmojo" id="mailmojo-logout" style="margin-left:1em">
                    </div>
                    <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-hidden" data-require-logn="1">
                        <label for="lab-newsletter-select">Newsletter</label>
                        <div data-placeholder="lab-newsletter-select">
                            -- <!-- Element replaced by onMarkup -->
                        </div>
                    </div>
                    <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-hidden" data-require-logn="1">
                        <label for="lab-segment-select">Segment</label>
                        <div data-placeholder="lab-segment-select">
                            <select></select> <!-- Element replaced by onMarkup -->
                        </div>
                    </div>
                </div>
                
                <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-space-below-none lab-hidden" data-require-logn="1">
                    <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                        <label for="lab-newsletter-subject">Newsletter subject</label>
                        <input type="text" id="lab-newsletter-subject" value="" placeholder="Email subject ...">
                    </div>
                    <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                        <label for="lab-newsletter-datetime">Published date and time</label>
                        <input type="datetime-local" id="lab-newsletter-datetime" value="">
                    </div>
                </div>
                
                <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none lab-hidden" data-require-logn="1">
                    <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-align-right">
                        <p id="lab-newsletter-info" class="lab-align-left">&nbsp;</p>
                        <a href="" target="_blank" class="lab-btn" id="lab-newsletter-preview-btn">Preview newsletter</a>
                        <input class="lab-btn" type="button" value="Send newsletter" id="lab-sendnewsletter-btn">
                    </div>
                </div>
            </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Export',
            label: 'Mailmojo newsletter'
        };
    }

    onPaths() {}

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                name: this.rootModel.get('fields.name')
            }
        }, true);

        const refreshBtn = markup.querySelector('#mailmojo-refresh');
        refreshBtn.addEventListener('click', (event) => {
            this.getNewsletterList(this.newsletterListUrl, markup);
        }, false);

        const logoutBtn = markup.querySelector('#mailmojo-logout');
        logoutBtn.addEventListener('click', (event) => {
            this.logout(markup);
        }, false);

        const sendBtn = markup.querySelector('#lab-sendnewsletter-btn');
        sendBtn.addEventListener('click', (event) => {

            event.preventDefault();
            const elements = {
                segmentIds: markup.querySelector('#lab-segment-select'),
                newsletterId: markup.querySelector('#lab-newsletter-select'),
                subject: markup.querySelector('#lab-newsletter-subject'),
                sendTime: markup.querySelector('#lab-newsletter-datetime')
            };
            if (!elements.segmentIds) { return; }

            const { frontpageurl } = this.api.v1.pages.front.getData();

            const subject = elements.subject.value.trim();
            const newsletterId = elements.newsletterId.value;
            const segmentIds = this.getMultiValue(elements.segmentIds);
            const sendTime = elements.sendTime.value;

            if (!subject) { elements.subject.parentElement.classList.add('lab-validation-error'); return; }
            elements.subject.parentElement.classList.remove('lab-validation-error');
            if (!sendTime) { elements.sendTime.parentElement.classList.add('lab-validation-error'); return; }
            elements.sendTime.parentElement.classList.remove('lab-validation-error');
            if (!newsletterId) { elements.newsletterId.parentElement.classList.add('lab-validation-error'); return; }
            elements.newsletterId.parentElement.classList.remove('lab-validation-error');
            if (!segmentIds) { elements.segmentIds.parentElement.classList.add('lab-validation-error'); return; }
            elements.segmentIds.parentElement.classList.remove('lab-validation-error');

            // toISOString: 2019-11-25T12:28 (GMT+0100) -> 2019-11-25T11:28:00.000Z
            const sendTimeIso = new Date(sendTime).toISOString();
            const timestamp = new Date().getTime();
            const html_url = `${ frontpageurl }?lab_viewport=mailmojo&v=${ timestamp }`;

            const createObj = {
                subject,
                html_url,
                list_id: newsletterId
            };

            // segments or all?
            if (segmentIds.indexOf('all') === -1) {
                createObj.segment_ids = segmentIds;
            }

            const sendObj = {
                send_date: sendTimeIso
            };

            markup.querySelector('#lab-newsletter-info').innerHTML = 'Sending newsletter ...';
            const url = '/ajax/integration-services/proxy/newsletter/mailmojo/create-send-newsletter/?embedUserData';

            sendBtn.setAttribute('disabled', 'disabled');
            this.api.v1.util.httpClient.request(
                url,
                {
                    method: 'POST',
                    body: JSON.stringify({
                        create: createObj,
                        send: sendObj
                    })
                }
            ).then((resp) => {
                if (resp && resp.errors) {
                    markup.querySelector('#lab-newsletter-info').innerHTML = '<span style="color: red;">Something went wrong, check console.</span>';
                    console.log(resp);
                    return;
                }
                markup.querySelector('#lab-newsletter-info').innerHTML = 'Newsletter sent!';
            }).catch((resp) => {
                markup.querySelector('#lab-newsletter-info').innerHTML = '<span style="color: red;">Something went wrong, check console.</span>';
                console.log(resp);
            });
        }, false);

        return markup;
    }

    displayLogin(url, markup) {
        const loginBtn = markup.querySelector('#mailmojo-login');
        loginBtn.setAttribute('href', url);
        loginBtn.parentElement.classList.remove('lab-hidden');
        for (const el of markup.querySelectorAll('[data-require-logn="1"]')) {
            el.classList.add('lab-hidden');
        }
    }

    displayForm(markup) {
        const loginBtn = markup.querySelector('#mailmojo-login');
        loginBtn.parentElement.classList.add('lab-hidden');
        for (const el of markup.querySelectorAll('[data-require-logn="1"]')) {
            el.classList.remove('lab-hidden');
        }
    }

    onDisplayed(markup) {
        this.getNewsletterList(this.newsletterListUrl, markup);
        const previewLinkEl = markup.querySelector('#lab-newsletter-preview-btn');
        const { frontpageurl } = this.api.v1.pages.front.getData();
        previewLinkEl.setAttribute('href', `${ frontpageurl }?lab_viewport=mailmojo`);
    }

    logout(markup) {
        this.api.v1.util.httpClient.get('/ajax/integration-services/proxy/newsletter/mailmojo/delete-user-tokens/', { resetCache: true, type: 'text' }).then(() => {
            this.getNewsletterList(this.newsletterListUrl, markup);
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    getNewsletterList(url, markup) {
        this.api.v1.util.httpClient.get(url, { resetCache: true }).then((resp) => {
            if (Array.isArray(resp)) {
                this.createNewsletterList(resp, markup);
                return;
            }
            if (resp.authorize_uri) {
                this.displayLogin(resp.authorize_uri, markup);
            }
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    createNewsletterList(newsletters, markup) {
        const sorted = newsletters.sort((a, b) => {
            const aName = (a.name || '').toLowerCase();
            const bName = (b.name || '').toLowerCase();
            // eslint-disable-next-line no-nested-ternary
            return (aName > bName) ? 1 : ((bName > aName) ? -1 : 0);
        });

        this.displayForm(markup);

        const selectPlaceholder = markup.querySelector('[data-placeholder="lab-newsletter-select"]') || markup.querySelector('#lab-newsletter-select');
        const selectElement = this.api.v1.ui.element.getSelectElement({
            value: '',
            options: sorted.map((item) => ({ value: item.id, label: item.name })),
            attributes: [{
                name: 'id', value: 'lab-newsletter-select'
            }]
        });
        selectElement.addEventListener('change', (event) => {
            const { value } = event.target;
            this.getSegmentList(value, markup);
        }, false);
        selectPlaceholder.parentNode.replaceChild(selectElement, selectPlaceholder);
        if (selectElement.options.length && selectElement.options[0].value) {
            this.getSegmentList(selectElement.options[0].value, markup);
        }
    }

    getSegmentList(newsletterId, markup) {
        this.api.v1.util.httpClient.get(this.segmentListUrl + newsletterId, { resetCache: true }).then((resp) => {
            if (Array.isArray(resp.segments)) {
                this.createSegmentList(resp.segments, markup);
                return;
            }
            if (resp.authorize_uri) {
                this.displayLogin(resp.authorize_uri, markup);
            }
        }).catch((error) => {
            console.log('error: ', error);
        });
    }

    createSegmentList(segments, markup) {

        const selectElement = this.api.v1.ui.element.getSelectElement({
            value: 'all',
            options: [{ value: 'all', label: 'Entire list' }].concat(segments.map((item) => ({ value: item.id, label: item.name }))),
            attributes: [{
                name: 'id', value: 'lab-segment-select'
            }, {
                name: 'multiple'
            }, {
                name: 'style', value: 'height: auto;'
            }]
        });
        selectElement.setAttribute('multiple', 'multiple');
        const current = markup.querySelector('[data-placeholder="lab-segment-select"]') || markup.querySelector('#lab-segment-select');
        current.parentNode.replaceChild(selectElement, current);
    }

    openAuthentication(url) {
        this.api.v1.app.gotoUrl(url, true);
    }

    // (array)
    getMultiValue(selectElement) {
        return [...selectElement.options].filter((option) => option.selected).map((option) => option.value);
    }

}


/***/ }),

/***/ "./modules/apps/front/FrontSaveAs.js":
/*!*******************************************!*\
  !*** ./modules/apps/front/FrontSaveAs.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FrontSaveAs": () => (/* binding */ FrontSaveAs)
/* harmony export */ });
class FrontSaveAs {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none">Save as</h2>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                    <label for="advanced-saveas-name">Front page title</label>
                    <input type="text" name="saveas-name" id="advanced-saveas-name" value="" placeholder="Name for new page ...">
                </div>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                    <label for="advanced-saveas-hostpath">Host path</label>
                    <input type="text" name="saveas-hostpath" id="advanced-saveas-hostpath" value="" placeholder="Host path ...">
                </div>
                <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-align-right">
                    <input type="button" id="advanced-saveas-button" value="Save copy">
                </div>
                <div id="advanced-saveas-info" class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-align-center" style="padding: 1rem; color: gray;"></div>
            </div>  
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'Advanced',
            label: 'Save a copy'
        };
    }

    onPaths() {}

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {}, true);
        this.registerFront({
            id: this.rootModel.getId(),
            nameElement: markup.querySelector('#advanced-saveas-name'),
            hostpathElement: markup.querySelector('#advanced-saveas-hostpath'),
            button: markup.querySelector('#advanced-saveas-button'),
            infoElement: markup.querySelector('#advanced-saveas-info')
        });
        return markup;
    }

    registerFront({
        id, nameElement, hostpathElement, button, infoElement
    }) {
        nameElement.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                this.frontSubmitHandler(id, nameElement, hostpathElement, infoElement);
            }
        }, false);
        hostpathElement.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                this.frontSubmitHandler(id, nameElement, hostpathElement, infoElement);
            }
        }, false);
        button.addEventListener('click', (event) => {
            this.frontSubmitHandler(id, nameElement, hostpathElement, infoElement);
        }, false);
    }

    frontSubmitHandler(id, nameElement, hostpathElement, infoElement) {
        if (!nameElement.value.trim()) {
            nameElement.parentElement.classList.add('lab-validation-error');
            return;
        }
        nameElement.parentElement.classList.remove('lab-validation-error');
        if (!hostpathElement.value.trim()) {
            hostpathElement.parentElement.classList.add('lab-validation-error');
            return;
        }
        hostpathElement.parentElement.classList.remove('lab-validation-error');

        infoElement.classList.add('lab-busy');
        infoElement.innerHTML = 'Validating and saving new front-page ...';

        this.api.v1.pages.front.duplicate(id, nameElement.value.trim(), hostpathElement.value.trim()).then((resp) => {
            infoElement.classList.remove('lab-busy');
            infoElement.innerHTML = `Front-page is duplicated. Edit the new page at<br><a href="${ resp.url }" target="_blank">${ resp.url }</a>`;
        }).catch((error) => {
            infoElement.classList.remove('lab-busy');
            infoElement.innerHTML = error;
        });
        // this.copyFront(id, nameElement.value.trim(), hostpathElement.value.trim(), infoElement);
    }

}


/***/ }),

/***/ "./modules/apps/front/GeneralPage.js":
/*!*******************************************!*\
  !*** ./modules/apps/front/GeneralPage.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GeneralPage": () => (/* binding */ GeneralPage)
/* harmony export */ });
class GeneralPage {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.enabled = true; // Sub-views may override and set to false to disable
        // if (!this.api.v1.user.hasPermission('admin_something')) {
        //     this.enabled = false;
        // }
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none">Page settings</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="general-page-name">Front page title</label>
                    <input type="text" name="fields.name" id="general-page-name" value="{{ fields.name }}" placeholder="Name for this front-page ...">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="general-page-hostpath">Host path</label>
                    <input type="text" name="fields.hostpath" id="general-page-hostpath" value="{{ fields.hostpath }}" placeholder="Url-path for this front-page. Example: 'news' or 'sport' ...">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="general-page-lab_canonical">Canonical url</label>
                    <input type="text" name="fields.lab_canonical" id="general-page-lab_canonical" value="{{{ fields.lab_canonical }}}" placeholder="Permanent url for this front-page ...">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="lab_redirect_url">Redirect url</label>
                    <input type="text" value="{{ fields.lab_redirect_url}}" name="fields.lab_redirect_url" id="lab_redirect_url" placeholder="301 redirect, use with caution ...">
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="general-page-defaultsection">Default section</label>
                    <input type="text" name="fields.defaultsection" id="general-page-defaultsection" value="{{ fields.defaultsection }}" placeholder="Default section-name for this front-page ...">
                </div>
            </div>
        </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Page'
        };
    }

    onPaths() {
        return {
            'fields.name': {
                node: 'fields.name',
                meta: 'name',
                validator: 'notEmpty'
            },
            'fields.hostpath': {
                node: 'fields.hostpath',
                meta: 'hostpath',
                validator: 'notEmpty'
            },
            'fields.lab_canonical': {
                node: 'fields.lab_canonical'
            },
            'fields.lab_redirect_url': {
                node: 'fields.lab_redirect_url'
            },
            'fields.defaultsection': {
                node: 'fields.defaultsection',
                meta: 'defaultsection'
            }
        };
    }

    onMarkup() {
        return this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                name: this.rootModel.get('fields.name'),
                hostpath: this.rootModel.get('fields.hostpath'),
                lab_canonical: this.rootModel.get('fields.lab_canonical'),
                lab_redirect_url: this.rootModel.get('fields.lab_redirect_url'),
                defaultsection: this.rootModel.get('fields.defaultsection')
            }
        }, true);
    }

}


/***/ }),

/***/ "./modules/apps/front/GeneralSettings.js":
/*!***********************************************!*\
  !*** ./modules/apps/front/GeneralSettings.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GeneralSettings": () => (/* binding */ GeneralSettings)
/* harmony export */ });
/* harmony import */ var _lib_helpers_AutoFontSize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/AutoFontSize.js */ "./modules/lib/helpers/AutoFontSize.js");


class GeneralSettings {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.meta = params.meta;
        this.templates = params.templates;
        this.enabled = true; // Sub-views may override and set to false to disable
        this.template = `<div class="lab-modal-form lab-grid">
        <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
            <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-below-large lab-space-above-none">General settings</h2>
            <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                <label for="general-settings-site_id">Site-name for this front page</label>
                <div data-placeholder="site-selector">
                    <!-- Element replaced by modal -->
                </div>
            </div>
            <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                <label for="general-settings-template">Template</label>
                <div data-placeholder="template-selector">
                    <!-- Element replaced by modal -->
                </div>
            </div>
            <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline">
                <label for="general-settings-favourite">Show in "Front pages" menu</label>
                <input type="checkbox" name="fields.favourite" id="general-settings-favourite" value="1"{{ #fields.favourite }} checked{{ /fields.favourite }}>
            </div>
            <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline">
                <label for="general-settings-hideAds">Hide ads from this page</label>
                <input type="checkbox" name="fields.hideAds" id="general-settings-hideAds" value="1"{{ #fields.hideAds }} checked{{ /fields.hideAds }}>
            </div>
            <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline">
                <label for="style_spacing">Enable custom space editing</label>
                <input type="checkbox" value="1" name="fields.style_spacing" id="style_spacing" {{ #fields.style_spacing }}checked{{ /fields.style_spacing }}>
            </div>
            <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap lab-inline">
                <label for="general-settings-autoFontSize">Enable auto font size for titles</label>
                <input type="checkbox" value="1" name="fields.autoFontSize" id="general-settings-autoFontSize" {{ #fields.autoFontSize }}checked{{ /fields.autoFontSize }}>
            </div>
            <div class="lab-formgroup-item lab-space-below-medium lab-grid-large-12 lab-grid-gap">
                <label>Url</label>
                <p><a href="{{{ meta.frontpageurl }}}" target="_blank">{{{ meta.frontpageurl }}}</a></p>
            </div>
        </div>
    </div>`;
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'General',
            label: 'Settings'
        };
    }

    onPaths() {
        return {
            'fields.site_id': {
                meta: 'site_id',
                validator: 'notEmpty'
            },
            template: {
                meta: 'template',
                validator: 'notEmpty'
            },
            'fields.favourite': {
                node: 'fields.favourite',
                meta: 'favourite',
                boolean: true
            },
            'fields.hideAds': {
                node: 'fields.hideAds',
                boolean: true
            },
            'fields.style_spacing': {
                node: 'fields.style_spacing',
                boolean: true
            },
            'fields.autoFontSize': {
                node: 'fields.autoFontSize',
                boolean: true
            }
        };
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                favourite: this.rootModel.get('fields.favourite') === 'true' || this.rootModel.get('fields.favourite') === true,
                hideAds: this.rootModel.get('fields.hideAds') === '1' || this.rootModel.get('fields.hideAds') === true,
                style_spacing: this.rootModel.get('fields.style_spacing'),
                autoFontSize: this.rootModel.get('fields.autoFontSize') === '1' || this.rootModel.get('fields.autoFontSize') === true
            },
            meta: {
                frontpageurl: this.api.v1.pages.front.getData().frontpageurl
            }
        }, true);

        const autoFontSizeReload = markup.querySelector('#general-settings-autoFontSize');
        if (this.api.v1.config.get('autoFontSize.enabled') === false) {
            autoFontSizeReload.parentNode.innerHTML = '';
        } else {
            autoFontSizeReload.addEventListener('change', (event) => {
                this.requestReload();
            }, autoFontSizeReload);
        }

        const sitePlaceholder = markup.querySelector('[data-placeholder="site-selector"]');
        sitePlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getSiteSelector({
            value: parseInt(this.rootModel.get('fields.site_id') || 0, 10),
            attributes: [{
                name: 'name', value: 'fields.site_id'
            }, {
                name: 'id', value: 'general-settings-site_id'
            }],
            events: [{
                name: 'change',
                callback: (event) => {
                    this.requestReload();
                }
            }]
        }), sitePlaceholder);

        const templatePlaceholder = markup.querySelector('[data-placeholder="template-selector"]');
        templatePlaceholder.parentNode.replaceChild(this.api.v1.ui.element.getSelectElement({
            value: this.meta.template,
            options: this.templates.data.map((item) => ({ value: item.alias })),
            attributes: [{
                name: 'name', value: 'template'
            }, {
                name: 'id', value: 'general-settings-template'
            }],
            events: [{
                name: 'change',
                callback: (event) => {
                    this.requestReload();
                }
            }]
        }), templatePlaceholder);
        return markup;
    }

    requestReload() {
        this.api.v1.ui.modal.dialog({
            content: {
                title: 'Reload page',
                description: 'The template or site for this front page has changed. Reload to continue editing with updated data.'
            },
            footer: {
                buttons: [
                    {
                        value: 'Continue without reloading',
                        id: 'continueBtn',
                        highlight: false
                    },
                    {
                        value: 'Reload',
                        type: 'submit',
                        highlight: true
                    }
                ]
            },
            callbacks: {
                submit: (formValues, theModal) => {
                    theModal.close(true);
                    this.api.v1.app.reload();
                }
            },
            eventHandlers: [{
                selector: '#continueBtn',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }]
        });
    }

}


/***/ }),

/***/ "./modules/apps/front/SeoSettings.js":
/*!*******************************************!*\
  !*** ./modules/apps/front/SeoSettings.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SeoSettings": () => (/* binding */ SeoSettings)
/* harmony export */ });
/* harmony import */ var _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/ContentLanguages.js */ "./modules/lib/helpers/ContentLanguages.js");


class SeoSettings {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.log = params.log;
        this.languageElement = null;
        this.languageLabel = null;
        this.enabled = true;
        this.isFrontPage = this.rootModel.getType() === 'page_front';
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid lab-grid-gap lab-space-above-none">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none">Search Engine Optimization</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="seo-seotitle">SEO title</label>{{{ buttons.seo_content }}}
                    <textarea data-sugegstion-name="seo_content" name="fields.seotitle" id="seo-seotitle" placeholder="Search engine title ...">{{ fields.seotitle }}</textarea>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="seo-seodescription">SEO description</label>
                    <textarea data-sugegstion-name="seo_content" name="fields.seodescription" id="seo-seodescription" placeholder="Search engine description ...">{{ fields.seodescription }}</textarea>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-inline lab-grid-gap">
                    <label for="norobots">Hide from Google</label>
                    <input type="checkbox" value="1" name="fields.norobots" id="norobots" {{ #fields.norobots }}checked{{ /fields.norobots }}>
                </div>

                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-space-above-medium">
                    <h2 class="lab-title lab-grid-large-12 lab-grid-gap lab-space-above-none">Page language</h2>
                    <p>This will <strong>only</strong> apply to the current page.</p>
                    <select name="fields.seolanguage" id="languages">
                        <option value="">Select language</option>
                        {{ #languages }}
                        <option value="{{ code }}"{{ #selected }} selected{{ /selected }}>{{ name }} - {{ code }}</option>
                        {{ /languages }}
                    </select>
                    <p id="language-label">{{ #fields.seolanguage }}Selected language: <strong>{{ fields.seolanguage }}</strong>{{ /fields.seolanguage }}{{ ^fields.seolanguage }}No language selected{{ /fields.seolanguage }}</p>
                    <p>The default language for the site is: <strong>{{ defaultLanguage }}</strong></p>
                </div>
            </div>

            <div class="lab-formgroup lab-grid lab-grid-gap">
                <h2 class="lab-title lab-grid-large-12 lab-grid-gap">Social Media</h2>

                ${ this.isFrontPage ? `
                <img id="some-image" style="display:{{# fields.someimage }}block{{/ fields.someimage }}{{^ fields.someimage}}none{{/ fields.someimage}}; width: 100%; max-height: 250px; object-fit: contain; background-color: #e7e7e7;" src="{{{images_url}}}/{{fields.someimage}}.webp?width=600&height=315" />

                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <input type="button" value="Select image" id="some-select-image" />
                    <input type="button" value="Remove image" id="some-remove-image" />
                </div>` : '' }

                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="seo-sometitle">SoMe title</label>{{{ buttons.some_content }}}
                    <textarea data-sugegstion-name="some_content" name="fields.sometitle" id="seo-sometitle" placeholder="SoMe title ...">{{ fields.sometitle }}</textarea>
                </div>
                <div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap">
                    <label for="seo-somedescription">SoMe description</label>
                    <textarea data-sugegstion-name="some_content" name="fields.somedescription" id="seo-somedescription" placeholder="SoMe description ...">{{ fields.somedescription }}</textarea>
                </div>
            </div>

        </div>`;
        this.dom = {
            someimage: null
        };
    }

    // SettingsFront: If section exist: add item to it, if not: create.
    onAside() {
        return {
            section: 'SEO',
            label: 'SEO settings'
        };
    }

    onPaths() {
        return {
            'fields.seotitle': {
                node: 'fields.seotitle'
            },
            'fields.seodescription': {
                node: 'fields.seodescription'
            },
            'fields.norobots': {
                node: 'fields.norobots', boolean: true
            },
            'fields.sometitle': {
                node: 'fields.sometitle'
            },
            'fields.somedescription': {
                node: 'fields.somedescription'
            },
            'fields.seolanguage': {
                node: 'fields.seolanguage'
            }
        };
    }

    onMarkup() {
        const seolanguage = this.rootModel.get('fields.seolanguage');
        const defaultLanguage = lab_api.v1.config.get('contentLanguage');
        const selectedLanguage = seolanguage || defaultLanguage;
        const languages = _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"].map((language) => ({ name: language.name, code: language.code, selected: language.code === selectedLanguage }));

        if (this.rootModel.getType() === 'page_front') {
            const frontMarkup = this.api.v1.util.dom.renderTemplate(this.template, {
                fields: {
                    seotitle: this.rootModel.get('fields.seotitle'),
                    seodescription: this.rootModel.get('fields.seodescription'),
                    norobots: this.rootModel.get('fields.norobots'),
                    someimage: this.rootModel.get('fields.someimage'),
                    sometitle: this.rootModel.get('fields.sometitle'),
                    somedescription: this.rootModel.get('fields.somedescription'),
                    seolanguage: seolanguage || defaultLanguage
                },
                images_url: this.api.v1.properties.get('image_server'),
                languages,
                defaultLanguage
            }, true);

            const someImage = frontMarkup.querySelector('#some-image');
            this.dom.someimage = someImage;

            const someSelectImage = frontMarkup.querySelector('#some-select-image');
            const someRemoveImage = frontMarkup.querySelector('#some-remove-image');

            someSelectImage.addEventListener('click', async(event) => {
                this.changeImage();
            }, false);

            someRemoveImage.addEventListener('click', (event) => {
                this.removeImage();
            }, false);

            return frontMarkup;
        }

        const buttons = {
            seo_content: `<span class="lab-btn lab-xsmall lab-generate lab-link lab-busy-top" id="suggest-btn-seo_content" style="float:right; position:relative;">Generate new SEO texts</span>`,
            some_content: `<span class="lab-btn lab-xsmall lab-generate lab-link lab-busy-top" id="suggest-btn-some_content" style="float:right; position:relative;">Generate new SoMe texts</span>`
        };

        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            buttons,
            languages,
            defaultLanguage,
            fields: {
                seotitle: this.rootModel.get('fields.seotitle'),
                seodescription: this.rootModel.get('fields.seodescription'),
                norobots: this.rootModel.get('fields.norobots'),
                someimage: this.rootModel.get('fields.someimage'),
                sometitle: this.rootModel.get('fields.sometitle'),
                somedescription: this.rootModel.get('fields.somedescription'),
                seolanguage: this.rootModel.get('fields.seolanguage') || defaultLanguage
            }
        }, true);

        const allowFunction = this.api.v1.ns.get('textAssistant.allow');
        if (!allowFunction || !allowFunction()) {
            for (const el of [...markup.querySelectorAll(`.textsuggestion-btn`)]) {
                el.classList.add('lab-disabled');
            }
        }

        for (const name of Object.keys(buttons)) {
            const btn = markup.querySelector(`#suggest-btn-${ name }`);
            btn.addEventListener('click', (event) => {
                const inputEls = [...markup.querySelectorAll(`[data-sugegstion-name="${ name }"]`)];
                this.toggleSuggestUI(false, btn, inputEls);
                lab_api.v1.ns.get('textAssistant.fetchByName')(name).then((result) => {
                    if (result) {
                        this.setSuggestionValue(result, inputEls);
                    }
                    this.toggleSuggestUI(true, btn, inputEls);
                }).catch((error) => {
                    this.toggleSuggestUI(true, btn, inputEls);
                    console.error(error);
                });
            });
        }

        const languageElement = markup.querySelector('#languages');
        const languageLabel = markup.querySelector('#language-label');

        // Not sure why to do this? Will this update the element with the new selected data?
        if (this.languageElement) { this.languageElement.replaceWith(languageElement); }
        if (this.languageLabel) { this.languageLabel.replaceWith(languageLabel); }

        this.languageElement = languageElement;
        this.languageLabel = languageLabel;

        this.setupLanguages();

        return markup;
    }

    setupLanguages() {
        this.languageElement.addEventListener('change', (event) => {
            if (!this.languageElement.value) { return; }
            this.languageLabel.innerHTML = `Selected language: <strong>${ this.languageElement.value }</strong>`;
            this.rootModel.set('fields.seolanguage', this.languageElement.value);
        }, false);
    }

    toggleSuggestUI(on, btn, elements) {
        if (on) {
            btn.classList.remove('lab-busy');
            for (const inputEl of elements) {
                inputEl.removeAttribute('disabled');
            }
        } else {
            btn.classList.add('lab-busy');
            for (const inputEl of elements) {
                inputEl.setAttribute('disabled', 'disabled');
            }
        }
    }

    setSuggestionValue(values, elements) {
        for (const inputEl of elements) {
            inputEl.value = values[inputEl.getAttribute('name')];
            const e = new Event('change');
            inputEl.dispatchEvent(e);
        }
    }

    changeImage() {
        this.api.v1.collection.display({
            name: 'MediaImages',
            modal: true,
            skipCache: true,
            options: {
                label: 'All Images',
                archiveActive: true,
                clickHandler: (model, element) => {
                    this.setImage(model);
                }
            }
        });
    }

    setImage(model) {
        const instanceId = model.get('instance_of');
        if (instanceId != null) {
            this.rootModel.set('fields.someimage', instanceId);
            this.dom.someimage.src = `${ this.api.v1.properties.get('image_server') }/${ instanceId }.webp?width=600&height=315`; // Note: Width and Height are currently hardcoded. This should be changed to a more dynamic solution on demand. (Currently following the default image size for SoMe images.)
            this.dom.someimage.style.display = 'block';
            this.log({
                type: 'data',
                app: this.constructor.name,
                path: 'fields.someimage',
                someimage: 'add'
            });
        } else {
            // eslint-disable-next-line no-console
            console.warn('[SeoSettings] No image instance id found during front image selection.');
        }
    }

    removeImage() {
        this.rootModel.set('fields.someimage', null);
        this.dom.someimage.style.display = 'none';
        this.dom.someimage.src = ``;
        this.log({
            type: 'data',
            app: this.constructor.name,
            path: 'fields.someimage',
            someimage: 'delete'
        });
    }

}


/***/ }),

/***/ "./modules/apps/front/index.js":
/*!*************************************!*\
  !*** ./modules/apps/front/index.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SettingsFront": () => (/* binding */ SettingsFront)
/* harmony export */ });
/* eslint-disable camelcase */

class SettingsFront {

    constructor(api, params = {}) {
        this.api = api;
        this.dom = {
            sections: {},
            selected: null
        };
        this.nodeSetterPaths = new Map();
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.frontSettings = this.api.v1.pages.front.getByNodeId(this.rootModel.getId());
        this.resources = {};

        if (!this.validatePage()) {
            Sys.logger.warn('[SettingsFront] Page-type not validated. Will only run on front-pages.');
            return;
        }

        const additions = this.api.v1.config.get('customMenuData.SettingsFront.additions') || [];
        const removals = this.api.v1.config.get('customMenuData.SettingsFront.removals') || [];
        const customElements = this.api.v1.config.get('customMenuData.SettingsFront.items');
        const apps = [
            'GeneralSettings',
            'GeneralPage',
            'Colors',
            'SeoSettings',
            'AutomationSettings',
            'AdvancedViewports',
            'ConfigOverride',
            'FrontSaveAs',
            'ExportMailmojo'
        ].concat(additions).filter((app) => !removals.includes(app));
        this.apps = {};

        if (customElements && Array.isArray(customElements.formgroups)) {
            apps.push('CustomElements');
        }

        this.getResources(apps, params).then((resources) => {
            this.draw(resources, customElements);
        }).catch((error) => {
            Sys.logger.warn('[SettingsFront] Error loading resources:');
            console.log(error);
        });

    }

    draw(input, customElements) {
        if (customElements && Array.isArray(customElements.formgroups) && input.apps.CustomElements) {
            input.apps.CustomElements.setElementsConfig(customElements);
        }
        const appsData = this.runApps(input.apps);
        const placeholders = appsData.map((app) => app.placeholder);
        const modal = this.api.v1.ui.modal.dialog({
            defaultButtons: false,
            container: {
                width: 800
            },
            content: {
                header: 'Frontpage Settings',
                markup: `<div>${ appsData.map((app) => `<div data-placeholder="${ app.placeholder.name }"></div>`).join('') }</div>`
            },
            aside: {
                position: 'left',
                expandable: true,
                header: 'Options',
                content: this.getAsideMarkup(appsData),
                noPadding: true,
                width: 210
            },
            callbacks: {
                didDisplay: () => {
                    if (this.dom.selected) { return; }
                    this.setupEvents(modal.getMarkup());
                    if (input.resources.params.source) {
                        this.dom.selected = appsData[0].name;
                        this.displaySource(input.resources.params.source);
                    } else {
                        this.displaySource(appsData[0].name);
                    }
                }
            },
            placeholders
        });
    }

    getAsideMarkup(appsData) {
        const items = [];
        const sections = {};
        for (const appData of appsData) {
            if (appData.aside.section && appData.aside.label) {
                if (!sections[appData.aside.section]) {
                    sections[appData.aside.section] = { label: appData.aside.section, items: [] };
                }
                sections[appData.aside.section].items.push({
                    label: appData.aside.label,
                    target: appData.name
                });
            } else {
                Sys.logger.warn(`[SettingsFront] Missing required "aside.section" or "aside.label" for app "${ appData.name }"`);
            }
        }
        for (const name of Object.keys(sections)) {
            items.push(`<div class="lab-aside-settings">
                <h4 class="lab-title">${ sections[name].label }</h4>
                ${ sections[name].items.map((item) => `<p class="lab-para lab-link" data-nav-target="${ item.target }">${ item.label }</p>`).join('') }
            </div>`);
        }
        return items.join('');
    }

    runApps(apps) {
        const result = [];
        for (const name of Object.keys(apps)) {
            const app = apps[name];
            const markup = app.onMarkup();
            if (markup) {
                this.apps[name] = app;
                markup.setAttribute('data-source', name);
                const aside = app.onAside() || {};
                if (aside.item) {
                    aside.identifier = name;
                }
                const paths = app.onPaths() || {};
                const item = {
                    placeholder: {
                        element: markup,
                        selector: `[data-placeholder="${ name }"]`,
                        name
                    },
                    paths,
                    aside,
                    name
                };
                this.registerAutoSave(markup, paths, app);
                result.push(item);
            } else {
                Sys.logger.warn(`[SettingsFront] No markup returned by app "${ name }".`);
            }
        }
        return result;
    }

    registerAutoSave(markup, paths, app) {
        for (const path of Object.keys(paths)) {
            if (paths[path].node) {
                this.nodeSetterPaths.set(paths[path].node, paths[path]);
            }
            const els = markup.querySelectorAll(`[name="${ path }"]`);
            if (els.length) {
                for (const el of els) {
                    this.registerInputItem(el, paths[path], app);
                }
            }
        }
    }

    registerInputItem(element, pathInfo, app) {
        element.addEventListener('change', (event) => {
            let value = pathInfo.boolean ? element.checked : element.value;
            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {
                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {
                    element.parentElement.classList.add('lab-validation-error');
                    return;
                }
                element.parentElement.classList.remove('lab-validation-error');
            }
            if (typeof pathInfo.transformer === 'function') {
                value = pathInfo.transformer(value, pathInfo);
            }
            if (pathInfo.callback && typeof pathInfo.callback === 'function') {
                pathInfo.callback(element, pathInfo);
            }
            if (pathInfo.node) {
                this.savePath(pathInfo.node, value, pathInfo.suggestReload);
            }
            if (pathInfo.meta) {
                this.saveMeta(pathInfo.meta, value);
            }
            // Log path and app-name in UI log:
            this.logAction({
                type: 'data',
                app: app.constructor.name,
                path: pathInfo.node || pathInfo.meta
            });
        }, false);
    }

    setupEvents(markup) {
        for (const el of markup.querySelectorAll('.lab-aside-settings [data-nav-target]')) {
            const source = el.getAttribute('data-nav-target');
            if (source) {
                this.dom.sections[source] = {
                    selected: el.classList.contains('lab-selected'),
                    name: source,
                    nav: el,
                    element: markup.querySelector(`.lab-modal-content [data-source="${ source }"]`)
                };
                this.registerItem(source, this.dom.sections[source]);
            }
        }
    }

    async getResources(appsList, params) {
        const templates = await this.api.v1.util.httpClient.get(`/ajax/template/get-aliases?nodeType=front&site=${ this.api.v1.site.getSite().alias }`);
        const resources = {
            templates,
            params,
            meta: this.api.v1.pages.front.getData(),
            rootModel: this.rootModel,
            log: this.logAction.bind(this)
        };
        return {
            resources,
            apps: await this.importApps(appsList, resources)
        };
    }

    logAction(data) {
        if (this.api.v1.eventmonitor.writer.log) {
            this.api.v1.eventmonitor.writer.log({
                action: 'baseview_frontSettings',
                ...data
            });
        }
    }

    async importApps(apps, resources) {
        const promises = {};
        for (const app of apps) {
            promises[app] = this.api.v1.apps.start(app, resources);
        }
        const resolved = {};
        const modules = await Promise.all(Object.values(promises));
        modules.forEach((instance, index) => {
            const name = Object.keys(promises)[index];
            if (instance.enabled) {
                Sys.logger.debug(`[SettingsFront] Adding app "${ name }"`);
                resolved[name] = instance;
            } else {
                Sys.logger.debug(`[SettingsFront] Skipping disabled app "${ name }"`);
            }
        });
        return resolved;
    }

    // Only run on front-pages
    validatePage() {
        if (this.rootModel.getType() === 'page_front') {
            return true;
        }
        return false;
    }

    registerItem(source, dom) {
        dom.nav.addEventListener('click', (event) => {
            this.displaySource(source);
        }, false);
        if (dom.selected) {
            this.displaySource(source);
        }
    }

    savePath(path, value) {
        this.rootModel.set(path, value);
    }

    saveMeta(path, value) {
        const data = {};
        data[path] = value;
        this.api.v1.pages.front.update(data);
    }

    displaySource(source) {
        if (this.dom.selected === source) { return; }
        if (!this.dom.sections[source]) {
            Sys.logger.warn(`[SettingsFront] Missing source "${ source }".`);
            return;
        }
        if (this.dom.selected) {
            this.dom.sections[this.dom.selected].nav.classList.remove('lab-selected');
            this.dom.sections[this.dom.selected].element.classList.add('lab-hidden');
            this.dom.selected = null;
        }
        if (!this.dom.sections[source].element) {
            Sys.logger.warn(`[SettingsFront] Missing dom-element for source "${ source }".`);
            return;
        }
        this.dom.sections[source].nav.classList.add('lab-selected');
        this.dom.sections[source].element.classList.remove('lab-hidden');
        this.dom.selected = source;

        if (this.apps[source].onDisplayed) {
            this.apps[source].onDisplayed(this.dom.sections[source].element);
        }

        this.logAction({
            type: 'tab',
            app: source
        });

    }

}


/***/ }),

/***/ "./modules/apps/helpers/MainViewport.js":
/*!**********************************************!*\
  !*** ./modules/apps/helpers/MainViewport.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainViewport": () => (/* binding */ MainViewport)
/* harmony export */ });
class MainViewport {

    constructor(api, viewports, selected, model, path, permission, callback) {
        this.api = api;
        this.viewports = viewports;
        this.selected = selected;
        this.originalSelected = selected;
        this.model = model;
        this.path = path;
        this.callback = callback;
        this.hasPermission = permission ? this.api.v1.user.hasPermission(permission) : true;
    }

    getMarkup() {
        const container = document.createElement('div');
        container.classList.add('mainViewport', 'lab-grid-large-12', 'lab-grid-gap');
        const template = `<div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline">
            <label for="mainViewport-{{ viewport }}">{{ viewport }}</label>
            <input type="radio" id="mainViewport-{{ viewport }}" name="mainViewport" value="{{ viewport }}"{{ #selected }} checked{{ /selected }}{{ #disabled }} disabled{{ /disabled }}>
        </div>`;
        for (const viewport of this.viewports) {
            container.appendChild(this.createElement(viewport, template));
        }
        return container;
    }

    createElement(viewport, template) {
        const el = this.api.v1.util.dom.renderTemplate(template, {
            viewport,
            selected: this.selected === viewport,
            disabled: viewport === this.main || !this.hasPermission
        }, true);
        const checkbox = el.querySelector('input');
        checkbox.addEventListener('change', (event) => {
            if (this.selected === checkbox.value) { return; }
            this.selected = checkbox.value;
            this.save();
        }, false);
        return el;
    }

    save() {
        this.model.set(this.path, this.selected);
        this.callback(this.path, this.selected);
        if (this.selected === this.originalSelected) { return; }
        const modal = this.api.v1.ui.modal.dialog({
            container: {
                state: {
                    warning: true
                }
            },
            content: {
                title: 'Main viewport changed',
                description: `Main viewport is set to "${ this.selected }".<br>Reload page for change to take effect.`
            },
            footer: {
                informalText: 'Chang will take effect next time you load the editor.',
                buttons: [
                    {
                        type: 'button',
                        id: 'cancel_button',
                        value: 'Continue',
                        highlight: false
                    },
                    {
                        type: 'submit',
                        value: 'Reload',
                        highlight: true
                    }
                ]
            },
            eventHandlers: [{
                selector: '#cancel_button',
                event: 'click',
                callback: () => {
                    modal.close();
                }
            }],
            callbacks: {
                submit: (event) => {
                    modal.close(true);
                    this.api.v1.app.reload();
                }
            }
        });
    }

}


/***/ }),

/***/ "./modules/apps/helpers/RequiredVieworts.js":
/*!**************************************************!*\
  !*** ./modules/apps/helpers/RequiredVieworts.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RequiredVieworts": () => (/* binding */ RequiredVieworts)
/* harmony export */ });
class RequiredVieworts {

    constructor(api, viewports, main, selected, model, path, permission, callback) {
        this.api = api;
        this.viewports = viewports;
        this.main = main;
        this.selected = selected;
        this.model = model;
        this.path = path;
        this.callback = callback;
        this.hasPermission = permission ? this.api.v1.user.hasPermission(permission) : true;
    }

    getMarkup() {
        const container = document.createElement('div');
        container.classList.add('requiredVieworts', 'lab-grid-large-12', 'lab-grid-gap');
        const template = `<div class="lab-formgroup-item lab-grid-large-12 lab-grid-gap lab-inline">
            <label for="requiredVieworts-{{ viewport }}">{{ viewport }}</label>
            <input type="checkbox" id="requiredVieworts-{{ viewport }}" value="1"{{ #selected }} checked{{ /selected }}{{ #disabled }} disabled{{ /disabled }}>
        </div>`;
        for (const viewport of this.viewports) {
            container.appendChild(this.createElement(viewport, template));
        }
        return container;
    }

    createElement(viewport, template) {
        if (!this.selected.includes(viewport) && viewport === this.main) {
            this.selected.push(viewport);
        }
        const el = this.api.v1.util.dom.renderTemplate(template, {
            viewport,
            selected: this.selected.includes(viewport),
            disabled: viewport === this.main || !this.hasPermission
        }, true);
        const checkbox = el.querySelector('input');
        checkbox.addEventListener('change', (event) => {
            if (checkbox.checked) {
                this.addViewport(viewport);
            } else {
                this.removeViewport(viewport);
            }
        }, false);
        return el;
    }

    addViewport(viewport) {
        if (!this.selected.includes(viewport)) {
            this.selected.push(viewport);
            this.displayViewports([...this.selected]);
        }
        this.save();
    }

    removeViewport(viewport) {
        this.selected = this.selected.filter((vp) => vp !== viewport);
        this.save();
    }

    displayViewports(viewports) {
        const current = this.api.v1.viewport.getActive();
        if (this.api.v1.util.valueTransformer.conditionalArrayCompare(current, viewports) && this.api.v1.util.valueTransformer.conditionalArrayCompare(viewports, current)) {
            return;
        }
        this.api.v1.viewport.display(viewports);
    }

    save() {
        this.model.set(this.path, [...this.selected]);
        this.callback(this.path, [...this.selected]);
    }

}


/***/ }),

/***/ "./modules/apps/index.js":
/*!*******************************!*\
  !*** ./modules/apps/index.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _front_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./front/index.js */ "./modules/apps/front/index.js");
/* harmony import */ var _front_GeneralSettings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./front/GeneralSettings.js */ "./modules/apps/front/GeneralSettings.js");
/* harmony import */ var _front_GeneralPage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./front/GeneralPage.js */ "./modules/apps/front/GeneralPage.js");
/* harmony import */ var _front_SeoSettings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./front/SeoSettings.js */ "./modules/apps/front/SeoSettings.js");
/* harmony import */ var _front_AutomationSettings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./front/AutomationSettings.js */ "./modules/apps/front/AutomationSettings.js");
/* harmony import */ var _front_FrontSaveAs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./front/FrontSaveAs.js */ "./modules/apps/front/FrontSaveAs.js");
/* harmony import */ var _front_AdvancedViewports_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./front/AdvancedViewports.js */ "./modules/apps/front/AdvancedViewports.js");
/* harmony import */ var _front_ExportMailmojo_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./front/ExportMailmojo.js */ "./modules/apps/front/ExportMailmojo.js");
/* harmony import */ var _front_ConfigOverride_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./front/ConfigOverride.js */ "./modules/apps/front/ConfigOverride.js");
/* harmony import */ var _front_Colors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./front/Colors.js */ "./modules/apps/front/Colors.js");
/* harmony import */ var _article_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./article/index.js */ "./modules/apps/article/index.js");
/* harmony import */ var _article_ArticleTranslate_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./article/ArticleTranslate.js */ "./modules/apps/article/ArticleTranslate.js");
/* harmony import */ var _article_ArticleNotes_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./article/ArticleNotes.js */ "./modules/apps/article/ArticleNotes.js");
/* harmony import */ var _article_ArticleChangelog_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./article/ArticleChangelog.js */ "./modules/apps/article/ArticleChangelog.js");
/* harmony import */ var _article_ArticleGeneralTeaser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./article/ArticleGeneralTeaser.js */ "./modules/apps/article/ArticleGeneralTeaser.js");
/* harmony import */ var _article_ArticleAudio_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./article/ArticleAudio.js */ "./modules/apps/article/ArticleAudio.js");
/* harmony import */ var _article_ArticleDates_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./article/ArticleDates.js */ "./modules/apps/article/ArticleDates.js");
/* harmony import */ var _article_ArticleCommercialSettings_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./article/ArticleCommercialSettings.js */ "./modules/apps/article/ArticleCommercialSettings.js");
/* harmony import */ var _article_ArticleAdvancedSettings_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./article/ArticleAdvancedSettings.js */ "./modules/apps/article/ArticleAdvancedSettings.js");
/* harmony import */ var _article_ArticleCitation_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./article/ArticleCitation.js */ "./modules/apps/article/ArticleCitation.js");
/* harmony import */ var _notice_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./notice/index.js */ "./modules/apps/notice/index.js");
/* harmony import */ var _notice_NoticeGeneralSettings_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./notice/NoticeGeneralSettings.js */ "./modules/apps/notice/NoticeGeneralSettings.js");
/* harmony import */ var _article_ArticleApproval_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./article/ArticleApproval.js */ "./modules/apps/article/ArticleApproval.js");
/* harmony import */ var _article_ArticleStyling_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./article/ArticleStyling.js */ "./modules/apps/article/ArticleStyling.js");
/* harmony import */ var _article_ArticleSite_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./article/ArticleSite.js */ "./modules/apps/article/ArticleSite.js");
/* harmony import */ var _article_RoxenExport_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./article/RoxenExport.js */ "./modules/apps/article/RoxenExport.js");
/* harmony import */ var _article_AptomaExport_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./article/AptomaExport.js */ "./modules/apps/article/AptomaExport.js");
/* harmony import */ var _CustomElements_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./CustomElements.js */ "./modules/apps/CustomElements.js");
/* harmony import */ var _BylineEditor_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./BylineEditor.js */ "./modules/apps/BylineEditor.js");
/* harmony import */ var _TeaserEditor_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./TeaserEditor.js */ "./modules/apps/TeaserEditor.js");
/* harmony import */ var _FrontContentSupport_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./FrontContentSupport.js */ "./modules/apps/FrontContentSupport.js");
/* harmony import */ var _ParallaxSupport_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./ParallaxSupport.js */ "./modules/apps/ParallaxSupport.js");
/* harmony import */ var _article_TopicSummary_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./article/TopicSummary.js */ "./modules/apps/article/TopicSummary.js");
/* harmony import */ var _ImageColors_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./ImageColors.js */ "./modules/apps/ImageColors.js");
/* harmony import */ var _fieldversion_index_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./fieldversion/index.js */ "./modules/apps/fieldversion/index.js");
/**
 * Export a list of standalone apps as modules
 * Secondary views may override by replacing one or more modules
 */











































/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    SettingsFront: _front_index_js__WEBPACK_IMPORTED_MODULE_0__.SettingsFront,
    GeneralSettings: _front_GeneralSettings_js__WEBPACK_IMPORTED_MODULE_1__.GeneralSettings,
    GeneralPage: _front_GeneralPage_js__WEBPACK_IMPORTED_MODULE_2__.GeneralPage,
    SeoSettings: _front_SeoSettings_js__WEBPACK_IMPORTED_MODULE_3__.SeoSettings,
    AutomationSettings: _front_AutomationSettings_js__WEBPACK_IMPORTED_MODULE_4__.AutomationSettings,
    FrontSaveAs: _front_FrontSaveAs_js__WEBPACK_IMPORTED_MODULE_5__.FrontSaveAs,
    AdvancedViewports: _front_AdvancedViewports_js__WEBPACK_IMPORTED_MODULE_6__.AdvancedViewports,
    ExportMailmojo: _front_ExportMailmojo_js__WEBPACK_IMPORTED_MODULE_7__.ExportMailmojo,
    ConfigOverride: _front_ConfigOverride_js__WEBPACK_IMPORTED_MODULE_8__.ConfigOverride,
    Colors: _front_Colors_js__WEBPACK_IMPORTED_MODULE_9__.Colors,
    ArticleSettings: _article_index_js__WEBPACK_IMPORTED_MODULE_10__.ArticleSettings,
    ArticleNotes: _article_ArticleNotes_js__WEBPACK_IMPORTED_MODULE_12__.ArticleNotes,
    ArticleChangelog: _article_ArticleChangelog_js__WEBPACK_IMPORTED_MODULE_13__.ArticleChangelog,
    ArticleGeneralTeaser: _article_ArticleGeneralTeaser_js__WEBPACK_IMPORTED_MODULE_14__.ArticleGeneralTeaser,
    ArticleAudio: _article_ArticleAudio_js__WEBPACK_IMPORTED_MODULE_15__.ArticleAudio,
    ArticleDates: _article_ArticleDates_js__WEBPACK_IMPORTED_MODULE_16__.ArticleDates,
    ArticleCommercialSettings: _article_ArticleCommercialSettings_js__WEBPACK_IMPORTED_MODULE_17__.ArticleCommercialSettings,
    ArticleAdvancedSettings: _article_ArticleAdvancedSettings_js__WEBPACK_IMPORTED_MODULE_18__.ArticleAdvancedSettings,
    ArticleCitation: _article_ArticleCitation_js__WEBPACK_IMPORTED_MODULE_19__.ArticleCitation,
    ArticleApproval: _article_ArticleApproval_js__WEBPACK_IMPORTED_MODULE_22__.ArticleApproval,
    ArticleStyling: _article_ArticleStyling_js__WEBPACK_IMPORTED_MODULE_23__.ArticleStyling,
    ArticleSite: _article_ArticleSite_js__WEBPACK_IMPORTED_MODULE_24__.ArticleSite,
    ArticleTranslate: _article_ArticleTranslate_js__WEBPACK_IMPORTED_MODULE_11__.ArticleTranslate,
    RoxenExport: _article_RoxenExport_js__WEBPACK_IMPORTED_MODULE_25__.RoxenExport,
    AptomaExport: _article_AptomaExport_js__WEBPACK_IMPORTED_MODULE_26__.AptomaExport,
    CustomElements: _CustomElements_js__WEBPACK_IMPORTED_MODULE_27__.CustomElements,
    BylineEditor: _BylineEditor_js__WEBPACK_IMPORTED_MODULE_28__.BylineEditor,
    TeaserEditor: _TeaserEditor_js__WEBPACK_IMPORTED_MODULE_29__.TeaserEditor,
    FrontContentSupport: _FrontContentSupport_js__WEBPACK_IMPORTED_MODULE_30__.FrontContentSupport,
    ParallaxSupport: _ParallaxSupport_js__WEBPACK_IMPORTED_MODULE_31__.ParallaxSupport,
    TopicSummary: _article_TopicSummary_js__WEBPACK_IMPORTED_MODULE_32__.TopicSummary,
    ImageColors: _ImageColors_js__WEBPACK_IMPORTED_MODULE_33__.ImageColors,
    FieldVersion: _fieldversion_index_js__WEBPACK_IMPORTED_MODULE_34__.FieldVersion,
    NoticeSettings: _notice_index_js__WEBPACK_IMPORTED_MODULE_20__.NoticeSettings,
    NoticeGeneralSettings: _notice_NoticeGeneralSettings_js__WEBPACK_IMPORTED_MODULE_21__.NoticeGeneralSettings
});


/***/ }),

/***/ "./modules/apps/notice/NoticeGeneralSettings.js":
/*!******************************************************!*\
  !*** ./modules/apps/notice/NoticeGeneralSettings.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoticeGeneralSettings": () => (/* binding */ NoticeGeneralSettings)
/* harmony export */ });
class NoticeGeneralSettings {

    constructor(api, params) {
        this.api = api;
        this.rootModel = params.rootModel;
        this.helpers = params.helpers;
        this.enabled = true;
        this.template = `<div class="lab-modal-form lab-grid lab-hidden">
            <div class="lab-formgroup lab-grid" id="convert-container">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-medium">Convert</h2>
                <p class="lab-info">
                    When converting to article this notice will be hidden from Google and redirected to the new article.
                    Title, bodytext, tags and images will be copied. The article will be created using the selected prototype.
                </p>
                {{ #fields.convertedToArticleId }}
                <p class="lab-para">
                    <b>This notice is already converted to an article.</b><br>
                    <a href="/edit/article/id/{{ fields.convertedToArticleId }}" target="_blank" class="lab-btn">Edit article</a>
                    <a href="{{{ frontDomain }}}/a/{{ fields.convertedToArticleId }}" target="_blank" class="lab-btn">View article</a>
                </p>
                {{ /fields.convertedToArticleId }}
                
                {{ ^fields.convertedToArticleId }}
                <div class="lab-formgroup-item lab-grid-large-6" id="prototype-error-container">
                    <label>Select article prototype to use</label>
                    <div id="prototype-container" class="lab-busy" style="position: relative; padding-top: 10px;">Loading prototypes ...</div>
                    <!-- Prototype selector will render here -->
                </div>
                <div class="lab-formgroup-item lab-grid-large-4 lab-grid-gap">
                    <label for="convert_button">Create article</label>
                    <input type="button" value="Convert to article" id="convert_button">
                </div>
                {{ /fields.convertedToArticleId }}
            </div>
            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-medium">SEO</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="norobots">Hide from Google</label>
                    <input type="checkbox" value="1" name="fields.norobots" id="norobots" {{ #fields.norobots }}checked{{ /fields.norobots }}>
                </div>
            </div>
            <div class="lab-formgroup lab-grid">
                <h2 class="lab-title lab-grid-large-12 lab-space-below-medium">Commercial settings</h2>
                <div class="lab-formgroup-item lab-grid-large-12 lab-inline">
                    <label for="hideAds">Hide ads</label>
                    <input type="checkbox" name="fields.hideAds" id="hideAds" value="1" {{ #fields.hideAds }}checked{{ /fields.hideAds }}>
                </div>
            </div>
        </div>`;
    }

    onAside() {
        return {
            section: 'General',
            label: 'Settings'
        };
    }

    onPaths() {
        return {
            'fields.norobots': {
                node: 'fields.norobots',
                boolean: true
            },
            'fields.hideAds': {
                node: 'fields.hideAds',
                boolean: true,
                suggestReload: true
            }
        };
    }

    onMarkup() {
        const markup = this.api.v1.util.dom.renderTemplate(this.template, {
            fields: {
                norobots: this.rootModel.get('fields.norobots'),
                convertedToArticleId: this.rootModel.get('fields.convertedToArticleId'),
                hideAds: this.helpers.toBoolean(this.rootModel.get('fields.hideAds'))
            },
            frontDomain: this.api.v1.site.getSite().domain
        }, true);

        // Get all article prototypes
        this.api.v1.util.httpClient.get('/ajax/articlePrototype/get-all').then((response) => {
            const prototypeContainer = markup.querySelector('#prototype-container');
            if (prototypeContainer) {
                const prototypeSelect = this.api.v1.ui.element.getPrototypeSelector({
                    siteId: this.api.v1.site.getSite().id,
                    prototypes: response.data
                });
                prototypeContainer.innerHTML = '';
                prototypeContainer.removeAttribute('style');
                prototypeContainer.appendChild(prototypeSelect);
                const convertBtn = markup.querySelector('#convert_button');
                if (convertBtn) {
                    convertBtn.addEventListener('click', () => {
                        const errorContainer = markup.querySelector('#prototype-error-container');
                        const convertContainer = markup.querySelector('#convert-container');
                        if (prototypeSelect.value) {
                            errorContainer.classList.remove('lab-validation-error');
                            this.convertToArticle(this.rootModel.get('id'), prototypeSelect.value, convertContainer);
                        } else {
                            errorContainer.classList.add('lab-validation-error');
                        }
                    });
                }
                prototypeContainer.classList.remove('lab-busy');
            }
        }).catch((error) => {
            console.error('error', error);
        });
        return markup;
    }

    convertToArticle(pageId, prototypeId, container) {
        container.classList.add('lab-busy');
        this.api.v1.util.httpClient.get(`/ajax/article/copy-to-prototype/?articleId=${ pageId }&prototype=${ prototypeId }`, { resetCache: true }).then((response) => {
            if (response.imported && response.imported[pageId]) {
                const articleId = response.imported[pageId];
                if (articleId) {
                    this.rootModel.set('fields.lab_redirect_url', `${ this.api.v1.site.getSite().domain }/a/${ articleId }`);
                    this.rootModel.set('fields.norobots', '1');

                    // Note: If this notice has set 'fields.lab_redirect_url' then the copy will also set it on the article.
                    // This can lead to a redirect loop. Remove it from the copy.
                    // Todo: Create support for blacklisting fields in the copy-to-prototype endpoint.
                    const data = {
                        type: 'article',
                        id: articleId,
                        fields: {
                            lab_redirect_url: '',
                            convertedFromNoticeId: `${ pageId }`
                        }
                    };
                    const formData = new FormData();
                    formData.append(`json[id]`, articleId);
                    formData.append(`json[type]`, 'notice');
                    formData.append(`json[node]`, JSON.stringify([data]));
                    formData.append(`json[structure]`, JSON.stringify([]));
                    formData.append(`lockId`, articleId);
                    const params = {
                        body: formData,
                        method: 'POST'
                    };
                    fetch('/ajax/node/save-node-and-data', params)
                        .then((resp) => resp.json())
                        .then(() => {
                            this.rootModel.set('fields.convertedToArticleId', `${ articleId }`);
                            this.api.v1.ui.modal.close();
                            this.api.v1.ui.modal.dialog({
                                container: {
                                    state: {
                                        ok: true
                                    }
                                },
                                content: {
                                    title: 'Notice converted to article',
                                    description: `This notice will be redirected to the new <a target="_blank" href="/edit/article/id/${ articleId }">article</a> (${ articleId }) when displayed on the front servers by your readers. Remember to publish this notice to apply the redirect changes.`
                                },
                                footer: {
                                    buttons: [
                                        {
                                            value: 'Cancel',
                                            id: 'cancel_button',
                                            highlight: false
                                        },
                                        {
                                            value: 'OK - Publish notice',
                                            type: 'submit',
                                            highlight: true
                                        }
                                    ]
                                },
                                eventHandlers: [{
                                    selector: '#cancel_button',
                                    event: 'click',
                                    callback: (modal, event) => {
                                        modal.close();
                                    }
                                }],
                                callbacks: {
                                    submit: (formValues) => {
                                        this.api.v1.app.publish();
                                    }
                                }
                            });
                            this.api.v1.app.gotoUrl(`/edit/article/id/${ articleId }`, true);
                        })
                        .catch((error) => {
                            container.classList.remove('lab-busy');
                            console.log('error', error);
                        });
                }
            }
        }).catch((error) => {
            container.classList.remove('lab-busy');
            console.error('Error copying article', error);
        });
    }

}


/***/ }),

/***/ "./modules/apps/notice/index.js":
/*!**************************************!*\
  !*** ./modules/apps/notice/index.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoticeSettings": () => (/* binding */ NoticeSettings)
/* harmony export */ });
class NoticeSettings {

    constructor(api, params = {}) {
        this.api = api;
        this.dom = {
            sections: {},
            selected: null
        };
        this.nodeSetterPaths = new Map();
        this.rootModel = this.api.v1.model.query.getRootModel();

        if (!this.validatePage()) {
            Sys.logger.warn('[NoticeSettings] Page-type not validated. Will only run on article-pages.');
            return;
        }

        const additions = this.api.v1.config.get('customMenuData.NoticeSettings.additions') || [];
        const removals = this.api.v1.config.get('customMenuData.NoticeSettings.removals') || [];
        const customElements = this.api.v1.config.get('customMenuData.NoticeSettings.items');
        const apps = [
            'NoticeGeneralSettings',
            'ArticleSite'
        ].concat(additions).filter((app) => !removals.includes(app));
        this.apps = {};

        if (customElements && Array.isArray(customElements.formgroups)) {
            apps.push('CustomElements');
        }

        this.getResources(apps, params).then((resources) => {
            this.draw(resources, customElements);
        }).catch((error) => {
            Sys.logger.warn('[NoticeSettings] Error loading resources:');
            console.log(error);
        });
    }

    async getResources(appsList, params) {
        const templates = await this.api.v1.util.httpClient.get('/ajax/template/get-aliases?nodeType=front');
        const resources = {
            templates,
            params,
            setter: this.pathSetter.bind(this),
            rootModel: this.rootModel,
            helpers: {
                // Boolean node-data may be stored as number-strings. true -> "1", false -> "0"
                // Transform the string "0" to boolean false etc.
                toBoolean: (value) => {
                    if (!value || value === '0' || value === 'false') {
                        return false; // 0, '0', 'false', false, null, undefined, ...
                    }
                    return true;
                }
            }
        };
        return {
            resources,
            apps: await this.importApps(appsList, resources)
        };
    }

    // This app can be extended with additional apps.
    // Each app can set data using: `this.setter(key, value)` bound to this method.
    pathSetter(key, value) {
        if (this.nodeSetterPaths.has(key)) {
            const pathInfo = this.nodeSetterPaths.get(key);
            let validatedValue = value;
            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {
                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {
                    return;
                }
            }
            if (typeof pathInfo.transformer === 'function') {
                validatedValue = pathInfo.transformer(value, pathInfo);
            }
            this.savePath(pathInfo.node, validatedValue, pathInfo.suggestReload);
        }
    }

    async importApps(apps, resources) {
        const promises = {};
        for (const app of apps) {
            promises[app] = this.api.v1.apps.start(app, resources);
        }
        const resolved = {};
        const modules = await Promise.all(Object.values(promises));
        modules.forEach((instance, index) => {
            const name = Object.keys(promises)[index];
            if (instance.enabled) {
                Sys.logger.debug(`[NoticeSettings] Adding app "${ name }"`);
                resolved[name] = instance;
            } else {
                Sys.logger.debug(`[NoticeSettings] Skipping disabled app "${ name }"`);
            }
        });
        return resolved;
    }

    // Only run on article-pages
    validatePage() {
        if (this.rootModel.getType() === 'page_notice') {
            return true;
        }
        return false;
    }

    draw(input, customElements) {
        if (customElements && Array.isArray(customElements.formgroups) && input.apps.CustomElements) {
            input.apps.CustomElements.setElementsConfig(customElements);
        }
        const appsData = this.runApps(input.apps);
        const placeholders = appsData.map((app) => app.placeholder);
        const modal = this.api.v1.ui.modal.dialog({
            defaultButtons: false,
            container: {
                width: 800
            },
            content: {
                header: 'Notice Settings',
                markup: `<div>${ appsData.map((app) => `<div data-placeholder="${ app.placeholder.name }"></div>`).join('') }</div>`
            },
            aside: {
                position: 'left',
                expandable: true,
                header: 'Options',
                content: this.getAsideMarkup(appsData),
                noPadding: true,
                width: 210
            },
            callbacks: {
                didDisplay: () => {
                    if (this.dom.selected) { return; }
                    this.setupEvents(modal.getMarkup());
                    if (input.resources.params.source) {
                        this.dom.selected = appsData[0].name;
                        this.displaySource(input.resources.params.source);
                    } else {
                        this.displaySource(appsData[0].name);
                    }
                },
                end: () => {
                    if (!this.dom.selected || !this.apps[this.dom.selected]) {
                        return;
                    }
                    if (this.apps[this.dom.selected].onHidden) {
                        this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);
                    }
                }
            },
            placeholders
        });
    }

    getAsideMarkup(appsData) {
        const items = [];
        const sections = {};
        for (const appData of appsData) {
            if (appData.aside.section && appData.aside.label) {
                if (!sections[appData.aside.section]) {
                    sections[appData.aside.section] = { label: appData.aside.section, items: [] };
                }
                sections[appData.aside.section].items.push({
                    label: appData.aside.label,
                    target: appData.name
                });
            } else {
                Sys.logger.warn(`[NoticeSettings] Missing required "aside.section" or "aside.label" for app "${ appData.name }"`);
            }
        }
        for (const name of Object.keys(sections)) {
            items.push(`<div class="lab-aside-settings">
                <h4 class="lab-title">${ sections[name].label }</h4>
                ${ sections[name].items.map((item) => `<p class="lab-para lab-link" data-nav-target="${ item.target }">${ item.label }</p>`).join('') }
            </div>`);
        }
        return items.join('');
    }

    displaySource(source) {
        if (this.dom.selected === source) { return; }
        if (!this.dom.sections[source]) {
            Sys.logger.warn(`[NoticeSettings] Missing source "${ source }".`);
            return;
        }
        if (this.dom.selected) {
            this.dom.sections[this.dom.selected].nav.classList.remove('lab-selected');
            this.dom.sections[this.dom.selected].element.classList.add('lab-hidden');
            if (this.apps[this.dom.selected].onHidden) {
                this.apps[this.dom.selected].onHidden(this.dom.sections[this.dom.selected].element);
            }
            this.dom.selected = null;
        }
        if (!this.dom.sections[source].element) {
            Sys.logger.warn(`[NoticeSettings] Missing dom-element for source "${ source }".`);
            return;
        }
        this.dom.sections[source].nav.classList.add('lab-selected');
        this.dom.sections[source].element.classList.remove('lab-hidden');
        this.dom.selected = source;

        if (this.apps[source].onDisplayed) {
            this.apps[source].onDisplayed(this.dom.sections[source].element);
        }

    }

    setupEvents(markup) {
        for (const el of markup.querySelectorAll('.lab-aside-settings [data-nav-target]')) {
            const source = el.getAttribute('data-nav-target');
            if (source) {
                this.dom.sections[source] = {
                    selected: el.classList.contains('lab-selected'),
                    name: source,
                    nav: el,
                    element: markup.querySelector(`.lab-modal-content [data-source="${ source }"]`)
                };
                this.registerItem(source, this.dom.sections[source]);
            }
        }
    }

    registerItem(source, dom) {
        dom.nav.addEventListener('click', (event) => {
            this.displaySource(source);
        }, false);
        if (dom.selected) {
            this.displaySource(source);
        }
    }

    runApps(apps) {
        const result = [];
        for (const name of Object.keys(apps)) {
            const app = apps[name];
            const markup = app.onMarkup();
            if (markup) {
                this.apps[name] = app;
                markup.setAttribute('data-source', name);
                const aside = app.onAside() || {};
                if (aside.item) {
                    aside.identifier = name;
                }
                const paths = app.onPaths() || {};
                const item = {
                    placeholder: {
                        element: markup,
                        selector: `[data-placeholder="${ name }"]`,
                        name
                    },
                    paths,
                    aside,
                    name
                };
                this.registerAutoSave(markup, paths);
                result.push(item);
            } else {
                Sys.logger.warn(`[NoticeSettings] No markup returned by app "${ name }".`);
            }
        }
        return result;
    }

    registerAutoSave(markup, paths) {
        for (const path of Object.keys(paths)) {
            if (paths[path].node) {
                this.nodeSetterPaths.set(paths[path].node, paths[path]);
            }
            const els = markup.querySelectorAll(`[name="${ path }"]`);
            if (els.length) {
                for (const el of els) {
                    this.registerInputItem(el, paths[path]);
                }
            }
        }
    }

    registerInputItem(element, pathInfo) {
        element.addEventListener('change', (event) => {
            let value = pathInfo.boolean ? element.checked : element.value;
            if (pathInfo.validator && this.api.v1.util.valueTransformer[pathInfo.validator]) {
                if (!this.api.v1.util.valueTransformer[pathInfo.validator](value, pathInfo.validatorParams)) {
                    element.parentElement.classList.add('lab-validation-error');
                    return;
                }
                element.parentElement.classList.remove('lab-validation-error');
            }
            if (typeof pathInfo.transformer === 'function') {
                value = pathInfo.transformer(value, pathInfo);
            }
            if (pathInfo.callback && typeof pathInfo.callback === 'function') {
                pathInfo.callback(element, pathInfo);
            }
            if (pathInfo.node) {
                this.savePath(pathInfo.node, value, pathInfo.suggestReload);
            }
            if (pathInfo.meta) {
                this.saveMeta(pathInfo.meta, value);
            }
        }, false);
    }

    savePath(path, value, suggestReload) {
        const modified = this.rootModel.set(path, value);
        if (modified && suggestReload) {
            this.displayReloadOptions();
        }
    }

    saveMeta(path, value) {
        console.log('Todo: saveMeta: ', path, value);
        // const data = {};
        // data[path] = value;
        // this.api.v1.pages.front.update(data);
    }

    displayReloadOptions() {
        this.api.v1.ui.modal.dialog({
            content: {
                title: 'Page updated',
                description: 'Reload editor for changes to take effect'
            },
            footer: {
                buttons: [
                    {
                        value: 'Keep editing',
                        highlight: false,
                        id: 'keep-editing'
                    },
                    {
                        value: 'Reload',
                        type: 'submit',
                        highlight: true
                    }
                ]
            },
            eventHandlers: [{
                selector: '#keep-editing',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }],
            callbacks: {
                submit: () => {
                    this.api.v1.ui.modal.close(true);
                    this.api.v1.app.reload();
                }
            }
        });
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/AdnuntiusAd.js":
/*!****************************************************!*\
  !*** ./modules/behaviours/elements/AdnuntiusAd.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdnuntiusAd)
/* harmony export */ });
class AdnuntiusAd {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const formatConfig = this.api.v1.config.get('contentbox_settings.adnuntiusAd.formats') || [];
        const key = model.get('fields.format');

        const format = formatConfig.filter((config) => config.format === key)[0] || {};
        model.setFiltered('adData', format);
        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug') ||  model.get('metadata.isDebug'));

        if (!this.api.v1.app.mode.isEditor()) {
            const hideOnTablet = (model.parent && model.parent.get('metadata.hideOnTablet') === true && this.api.v1.config.get('xUaDevice') === 'tablet');
            model.setFiltered('hideOnTablet', hideOnTablet);
        }

        if (this.api.v1.app.mode.isEditor()) {
            const pageType = this.api.v1.model.root.getType().replace('page_', '');
            const filteredKeys = [];
            formatConfig.forEach((item) => {
                if ((item.selectable && item.selectable.indexOf(pageType) > -1) || (item.selectableOn && item.selectableOn[pageType] === true)) {
                    if (item.format === key) {
                        const mutableItem = { ...item };
                        mutableItem.selected = true;
                        filteredKeys.push(mutableItem);
                    } else {
                        filteredKeys.push(item);
                    }
                }
            });
            model.setFiltered('formatConfigKeys', filteredKeys);
        }

        // Set label with fallback to config.
        const fallbackLabel = this.api.v1.config.get('contentbox_settings.adnuntiusAd.label') || 'Annonse';
        const label = model.get('fields.label') || fallbackLabel;
        model.setFiltered('label', label);

        // For viewport Mailmojo we should not render the label unless it is specified. For other viewports we use CSS to hide it, cannot do that in Mailmojo.
        model.setFiltered('displayLabel', label && (model.get('metadata.css') || '').includes('display-label'));

        const isSticky = (model.get('metadata.css') || '').includes('sticky'); // Check if css string contains sticky keyword.
        if (isSticky) {
            const spacingTop = this.api.v1.config.get('contentbox_settings.adnuntiusAd.spacingTop') || 120;
            const spacingTopStyle = `top: ${ spacingTop }px;`;
            model.setFiltered('spacingTop', spacingTopStyle);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ApsisSubmit.js":
/*!****************************************************!*\
  !*** ./modules/behaviours/elements/ApsisSubmit.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ApsisSubmit)
/* harmony export */ });
class ApsisSubmit {

    constructor(api) {
        this.api = api;
    }

    onRender(model) {
        const config = this.api.v1.config.get('contentbox_settings.apsis_submit');
        if (config) {
            model.setFiltered('apsis', config);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Article.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/Article.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Article)
/* harmony export */ });
/* harmony import */ var _lib_helpers_LayoutHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/LayoutHelper.js */ "./modules/lib/helpers/LayoutHelper.js");
/* harmony import */ var _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/helpers/AutodataHelper.js */ "./modules/lib/helpers/AutodataHelper.js");
/* harmony import */ var _lib_helpers_LanguageHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/helpers/LanguageHelper.js */ "./modules/lib/helpers/LanguageHelper.js");
/* harmony import */ var _lib_helpers_AutoFontSize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/helpers/AutoFontSize.js */ "./modules/lib/helpers/AutoFontSize.js");
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");






class Article {

    constructor(api) {
        this.api = api;
        this.imageServer = this.api.v1.properties.get('image_server');
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
        this.fallbackLanguage = this.api.v1.config.get('contentLanguage') || '';
        this.autoFontSizeConfig = this.api.v1.config.get('autoFontSize') || [];
        this.autoFontSizePageSettings = Boolean(this.rootModel ? this.rootModel.get('fields.autoFontSize') : false);
        this.hasAutoFontSize = this.autoFontSizePageSettings && this.autoFontSizeConfig.enabled;
        this.autoFontSizeDone = false;
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_4__.DateTimeHelper(this.api.v1.config.get('lang') || undefined);
    }

    onInserted(model) {
        if (this.api.v1.app.mode.isEditor()) {
            // Check for auto font size status and set value of autoFontSize Enabled on teaser if empty
            // This is to set a status on all teaser before it's enabled

            if (this.hasAutoFontSize) {
                model.set('state.autoFontSizeReRender', true, { notify: false });
                const autoFontSizeListener = (model, path, value) => {
                    if (model.get('fields.title') === model.get('state.title')) {
                        model.set('state.autoFontSizeReRender', false, { notify: false });
                    } else {
                        model.set('state.autoFontSizeReRender', true, { notify: false });
                        model.set('metadata.autoFontSizeDone', false, { notify: false });
                    }
                };
                this.api.v1.model.bindings.bind(model, 'fields.title', autoFontSizeListener);
            }
        }
    }

    onReady(model, view) {
        // Define correct spot to print title, subtitle and kicker.
        // Use in template to include partials.
        // Run in onReady to make data avilable to children (image etc.)
        model.setFiltered('layout', _lib_helpers_LayoutHelper_js__WEBPACK_IMPORTED_MODULE_0__.LayoutHelper.textElements(view, this.api.v1.app.mode.isEditor()));

        let link = model.get('fields.published_url') || '';
        const regex = /^https?/;
        if (!regex.test(link) && link) link = this.domain + link;
        model.setFiltered('published_url', link);
        model.setFiltered('published_url_rss', link.replace(/&/g, '&amp;'));
    }

    onRender(model, view) {
        const articleId = model.get('instance_of') || model.get('fields.origin_data_json.id');
        const pubDate = model.get('fields.published') || model.get('fields.origin_data_json.published');
        const title =  model.get('fields.origin_data_json.teaserTitle') || view.get('fields.title') || '';
        const subtitle = model.get('fields.origin_data_json.teaserSubtitle') || view.get('fields.subtitle') || '';
        const publishedSitemap = model.get('fields.origin_data_json.published') || model.get('fields.published');
        const kicker = model.get('fields.origin_data_json.teaserKicker') || model.get('fields.origin_data_json.kicker') || view.get('fields.kicker');
        const siteId = model.get('fields.site_id') || model.get('fields.origin_data_json.site_id');
        const language = model.get('fields.origin_data_json.seolanguage') || model.get('fields.seolanguage') || this.fallbackLanguage;
        const audioUrl = model.get('fields.origin_data_json.teaserAudio') || model.get('fields.audio');
        const audioInfo = model.get('fields.origin_data_json.teaserAudio_style_json') || model.get('fields.audioInfo') || {};
        const addRelNoFollow = model.get('fields.origin_data_json.addRelNoFollow') || model.get('fields.addRelNoFollow') || false;
        const addRelSponsored = model.get('fields.origin_data_json.addRelSponsored') || model.get('fields.addRelSponsored') || false;
        const addRelUgc = model.get('fields.origin_data_json.addRelUgc') || model.get('fields.addRelUgc') || false;

        model.setFiltered('published', pubDate); // Only used by rss-template
        model.setFiltered('title', title);
        model.setFiltered('kicker', kicker);
        model.setFiltered('subtitle', subtitle);
        model.setFiltered('articleId', articleId);
        model.setFiltered('section', model.get('fields.origin_data_json.section_tag') || model.get('fields.section') || '');
        model.setFiltered('base_url', this.domain);
        model.setFiltered('published_sitemap', publishedSitemap);
        model.setFiltered('canonical_url', `${ this.getSiteDomain(siteId) }/a/${ articleId }`);
        model.setFiltered('tags', model.get('tags') || []);
        model.setFiltered('languageIso639', _lib_helpers_LanguageHelper_js__WEBPACK_IMPORTED_MODULE_2__.LanguageHelper.convertToIso639(language));
        const timestampOutOfDateDays = new Date().getTime() - (2 * 24 * 60 * 60 * 1000);
        model.setFiltered('articleOutOfDate_sitemap', timestampOutOfDateDays > Math.floor(new Date(publishedSitemap).getTime()));
        model.setFiltered('addRelNoFollow', addRelNoFollow);
        model.setFiltered('addRelSponsored', addRelSponsored);
        model.setFiltered('addRelUgc', addRelUgc);

        if (!this.api.v1.config.get('showHiddenTagsOnFront')) {
            const tagsToIgnore = (this.api.v1.config.get('tagsToHide') || '').split(',').map((tag) => tag.trim()) || [];
            const filteredTags = (model.get('tags') || []).filter((tag) => !tagsToIgnore.includes(tag));
            model.setFiltered('tags', filteredTags);
        }

        // Site:
        if (siteId) {
            const site = this.api.v1.site.getSiteById(siteId);
            if (site) {
                model.setFiltered('site_alias', site.alias);
            }
        }

        if (audioUrl) {
            const audio = {
                url: audioUrl
            };
            if (audioInfo) {
                const info = JSON.parse(audioInfo);
                audio.title = info.title || null;
                audio.fileType = info.fileType || null;
                audio.playTime = info.playTime || null;
            }
            model.setFiltered('audio', audio);
        }

        // Byline-display:
        const displayByline = model.get('fields.origin_data_json.showbylineonfp') || view.get('fields.displayByline') || false;
        if (displayByline) {
            const bylineName = view.get('fields.byline') || model.get('fields.origin_data_json.byline');
            const bylineImage = view.get('fields.bylineImage') || model.get('fields.origin_data_json.bylineImage');
            const bylineArray = model.get('fields.origin_data_json.full_bylines') || model.get('fields.full_bylines_json') || [];
            const bylines = bylineArray.map((byline) => ({
                firstname: byline.firstname,
                lastname: byline.lastname,
                description: byline.description,
                imageUrl: byline.imageUrl ? this.getImageUrl(`${ byline.imageUrl }&width=90&height=90`) : ''
            }));
            // For old article teasers without full bylines:
            if (!bylines.length && (bylineName || bylineImage)) {
                bylines.push({
                    firstname: bylineName,
                    lastname: '',
                    imageUrl: bylineImage ? this.getImageUrl(`${ bylineImage }&width=90&height=90`) : ''
                });
            }
            model.setFiltered('bylines', bylines);
            if (bylineImage) {
                model.setFiltered('bylineImage', `${ bylineImage }&width=90&height=90`);
            }
        }
        model.setFiltered('displayByline', displayByline);

        // Get the published date and the date format, then set the state for if it should be displayed
        const displayPublishedDate = view.get('fields.displayPublishedDate') || false;
        const dateFormat = this.api.v1.locale.get('dates.monthdayyear', { noRender: true });
        model.setFiltered('displayPublishedDate', displayPublishedDate);

        if (displayPublishedDate) {
            // Check if the article is published, and if we are in the editor
            if (this.api.v1.app.mode.isEditor() && !pubDate) {
                // Without being published and in editor, show the date format
                // This will apply to automatic articles, and empty articles
                model.setFiltered('publishedDate', dateFormat);
            } else if (!this.api.v1.app.mode.isEditor() && !pubDate) {
                // If the article is not publised (so an empty article) and we are on front, it should not be shown
                model.setFiltered('displayPublishedDate', false);
            } else {
                // Otherwise show the published date formatted
                const publishedDate = new Date(pubDate);
                const publishedDateFormatted = this.dateTimeHelper.format(publishedDate, dateFormat);
                model.setFiltered('publishedDate', publishedDateFormatted);
            }
        }

        // Paywall
        let paywall = model.get('fields.origin_data_json.paywall') || model.get('fields.paywall') || false;
        if (paywall === 1 || paywall === '1' || paywall === true) {
            paywall = true;
        } else {
            paywall = null;
        }
        if (paywall) {

            const paywallLabel = {
                ...{
                    display: true,
                    displayInNewsletter: true
                },
                ...this.api.v1.config.get('paywall.label')
            };

            // Get the paywall label text and icon from the config or default values.
            // Check if the values exists, i.e. they have been set in the config files for the site, if they have not, set a default value.
            // This should make all config values where the users have set the value to be an empty string still show nothing
            const textValue = this.api.v1.config.get('paywall.label.text.content');
            const iconValue = this.api.v1.config.get('paywall.label.icon.content');
            const textContent = (textValue ===  undefined || textValue === null) ? 'Plus' : this.api.v1.config.get('paywall.label.text.content');
            const iconContent = (iconValue === undefined || iconValue === null) ? 'fi-plus' : this.api.v1.config.get('paywall.label.icon.content');

            // Create an object that can be added to the paywallLabel object
            // This will add empty objects if config values are not set in admin, but that is fine.
            const labelIcon = { text: { content: textContent }, icon: { content: iconContent } };
            Object.assign(paywallLabel, labelIcon);

            if (paywallLabel.display) {
                paywallLabel.layout = {
                    noImage: true,
                    float: null
                };
                const imageChild = this.api.v1.model.query.getChildOfType(model, 'image') || this.api.v1.model.query.getChildOfType(model, 'graphic');
                if (imageChild && imageChild.get('instance_of')) {
                    const imageView = this.api.v1.view.getView(imageChild, view.getViewport());
                    paywallLabel.layout.float = this.api.v1.config.get('paywall.label.labelPosition') || imageView.get('fields.float');
                    paywallLabel.layout.noImage = !!view.get('metadata.hideimage');
                }
                model.setFiltered('paywallLabel', paywallLabel);
            }
        } else {
            model.setFiltered('paywallLabel', null);
        }
        model.setFiltered('paywall', paywall);

        // Tag placement
        const tagPlacement = model.get('metadata.tagPlacement') || 'underImage';
        model.setFiltered('tagPlacement.underImage', tagPlacement === 'underImage');
        model.setFiltered('tagPlacement.underText', tagPlacement === 'underText');

        // Section placement
        const sectionPlacement = model.get('metadata.sectionPlacement') || 'floating';
        model.setFiltered('sectionPlacement.floating', sectionPlacement === 'floating');
        model.setFiltered('sectionPlacement.underImage', sectionPlacement === 'underImage');
        model.setFiltered('sectionPlacement.underText', sectionPlacement === 'underText');

        // Mailmojo
        model.setFiltered('articleWidth', view.getPixelWidth());

        // Autodata
        model.setFiltered('autodata_css', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_1__.AutodataHelper.parseCss(model));
        model.setFiltered('autodata_content_css', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_1__.AutodataHelper.parseCss(model, 'filtered.autodata_content'));
        model.setFiltered('autodata_attributes', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_1__.AutodataHelper.parseAttributes(model));
        model.setFiltered('autodata_custom', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_1__.AutodataHelper.parseCustomData(model));

        if (this.autoFontSizeConfig.enabled) {
            this.autoFontSizeDone = model.get('metadata.autoFontSizeDone');
        }
    }

    onRendered(model, view) {
        if (this.api.v1.app.mode.isEditor()) {
            if (this.autoFontSizeConfig.enabled) {
                // Small reset when you click inside teaser title to edit
                const resetAutoFontSizeOnTool = () => {
                    const domElement = view.getMarkup();
                    const title = domElement.querySelector('.headline');
                    _lib_helpers_AutoFontSize_js__WEBPACK_IMPORTED_MODULE_3__.AutoFontSize.removeFontSize(title);
                    this.api.v1.tool.off('ended', resetAutoFontSizeOnTool);
                };
                if ((view.viewport === 'desktop' && this.hasAutoFontSize && model.get('metadata.autoFontSizeEnabled'))) {
                    this.api.v1.tool.on('started', (params) => {
                        if (params.key === 'fields.title' && params.model === model) {
                            resetAutoFontSizeOnTool();
                        }
                    });
                    if (model.get('state.autoFontSizeReRender') && model.get('fields.title') && !this.autoFontSizeDone && model.get('metadata.autoFontSizeEnabled')) {
                        const domElement = view.getMarkup();
                        const title = domElement.querySelector('.headline');
                        const newTitle = _lib_helpers_AutoFontSize_js__WEBPACK_IMPORTED_MODULE_3__.AutoFontSize.autoSizeText(title, this.autoFontSizeConfig);
                        model.set('state.autoFontSizeReRender', false, { notify: false });
                        model.set('state.title', newTitle, { notify: false });
                        model.set('metadata.autoFontSizeDone', true, { notify: false });
                        model.set('fields.title', newTitle);
                    }
                }
            }
        }
    }

    onCreated(model) {
        if (this.hasAutoFontSize && model.get('metadata.autoFontSizeEnabled') === null) {
            model.set('metadata.autoFontSizeEnabled', true, { notify: false });
        }
    }

    getSiteDomain(siteId) {
        if (!siteId) { return ''; }
        const site = this.api.v1.site.getSiteById(siteId);
        if (!site) { return ''; }
        return site.domain;
    }

    getImageUrl(url) {
        if (!url) { return ''; }
        if (url.startsWith('http')) { return url; }
        return this.imageServer + url;
    }
}


/***/ }),

/***/ "./modules/behaviours/elements/ArticleCalendar.js":
/*!********************************************************!*\
  !*** ./modules/behaviours/elements/ArticleCalendar.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticleCalendar)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class ArticleCalendar {

    constructor(api) {
        this.api = api;
    }

    onViewHelper(model) {
        const site_id = model.get('fields.site_id') || null;
        const articleCount = model.get('fields.articleCount') || 6;
        const dateHander = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper();
        const startDate = `${ dateHander.formattedUtcDate(new Date(), 'Y-m-d')  }T00:00:00Z`;
        const options = {
            baseUrl: `${ this.api.v1.properties.get('front_api_url')  }/api/v1/article/?`,
            urlParams: {
                orderBy: 'calendar_start_date',
                order: 'asc', // asc, desc
                site_id,
                limit: articleCount,
                htmlText: 1
            },
            urlQueryParam: {
                visibility_status: 'P',
                published: '[*%20NOW]',
                calendar_start_date: `[${  startDate  }%20TO%20*]`
            }
        };
        const urlParams = [];
        for (const key in options.urlParams) {
            if (options.urlParams[key]) {
                urlParams.push(`${ key  }=${  options.urlParams[key] }`);
            }
        }
        const urlQueryParams = [];
        for (const key in options.urlQueryParam) {
            if (options.urlQueryParam[key]) {
                urlQueryParams.push(`${ key  }:${  options.urlQueryParam[key] }`);
            }
        }
        urlParams.push(`query=${  urlQueryParams.join('%20AND%20') }`);
        const parsedUrl = options.baseUrl + urlParams.join('&');
        model.setFiltered('url', parsedUrl);
    }

    onRender(model, view) {
        const externalData = view.get('external');
        const site_id = model.get('fields.site_id') || '';

        const displayImage = model.get('fields.displayImage');
        const displayTitle = model.get('fields.displayTitle') || null;
        const displaySubtitle = model.get('fields.displaySubtitle');

        const imageServer = this.api.v1.properties.get('image_server');
        const imageWidth = 420;
        const aspectRatio = this.api.v1.config.get('contentbox_settings.articleCalendar.imageAspectRatio') || this.api.v1.config.get('image.defaultAspectRatio');
        const imgArgs = [
            `width=${  imageWidth }`,
            `height=${  Math.floor(imageWidth * aspectRatio) }`,
            `format=${ this.api.v1.image.getPreferredImageFormat() }`
        ];

        if (this.api.v1.app.mode.isEditor()) {
            const adminView = {
                displayImage: !!displayImage,
                displayTitle: displayTitle === null ? true : !!displayTitle,
                displaySubtitle: !!displaySubtitle
            };

            // Options for "site_id" (fields.site_id)
            const site_idOptions = [{
                value: '',
                name: 'Any site'
            }];
            this.api.v1.site.getSites().forEach((site) => {
                site_idOptions.push({
                    value: site.id,
                    name: site.display_name,
                    selected: site_id && site.id === parseInt(site_id, 10)
                });
            });

            adminView.site_ids = site_idOptions;
            model.setFiltered('options', adminView);
        }

        if (externalData) {
            // Format data:
            const result = [];
            externalData.result.forEach((article) => {
                const articleData = {
                    url: article.published_url
                };
                if (displayTitle) {
                    articleData.title = article.teaserTitle || article.title;
                }
                if (displaySubtitle) {
                    articleData.subtitle = article.teaserSubtitle || article.subtitle;
                }
                if (displayImage && article.frontCropUrl) {
                    articleData.calendarimage = `${ imageServer }/${ article.frontCropUrl }&${ imgArgs.join('&') }`;
                }
                result.push(articleData);
            });
            model.setFiltered('data', result);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ArticleFooter.js":
/*!******************************************************!*\
  !*** ./modules/behaviours/elements/ArticleFooter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticleFooter)
/* harmony export */ });
class ArticleFooter {

    constructor(api) {
        this.api = api;
        this.ignoredTags = this.api.v1.config.get('page_settings.article.ignoredTags') || [];
        this.ignoredTagPrefix = this.api.v1.config.get('page_settings.article.ignoredTagPrefix') || [];
        this.adminIgnoredTags = !this.api.v1.config.get('showHiddenTagsOnArticle') ? (this.api.v1.config.get('tagsToHide') || '').split(',').map((tag) => tag.trim()) : [];
    }

    onRender(model, view) {
        const allIgnoredTags = [...new Set([...this.ignoredTags, ...this.adminIgnoredTags])];

        const tags = (this.api.v1.model.query.getRootModel().get('tags') || []).filter((tag) => !allIgnoredTags.includes(tag)).filter((tag) => {
            for (const prefix of this.ignoredTagPrefix) {
                if (tag.startsWith(prefix)) {
                    return false;
                }
            }
            return true;
        });
        model.setFiltered('tags', tags);
        model.setFiltered('tagPagePath', this.api.v1.config.get('tagPagePath') || '/tag/');
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ArticleHeader.js":
/*!******************************************************!*\
  !*** ./modules/behaviours/elements/ArticleHeader.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticleHeader)
/* harmony export */ });
/* harmony import */ var _lib_helpers_LayoutHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/LayoutHelper.js */ "./modules/lib/helpers/LayoutHelper.js");


class ArticleHeader {

    constructor(api) {
        this.api = api;
    }

    onInserted(model) {
        if (model.get('metadata.hidecaption')) {
            model.set('fields.displayCaption', false, { save: false });
            model.set('metadata.hidecaption', null, { save: false });
        }
    }

    onRender(model, view) {
        const layout = _lib_helpers_LayoutHelper_js__WEBPACK_IMPORTED_MODULE_0__.LayoutHelper.textElements(view, this.api.v1.app.mode.isEditor());
        model.setFiltered('layout', layout);
        model.setFiltered('hasFloatingText', layout.floating.length > 0);
        if (this.api.v1.app.mode.isFront()) {
            // Lab 3 could store styled kicker with text-content of the placeholder.
            // <span class="font-weight-bold" data-lab-font_weight_desktop="font-weight-bold">Click to add kicker</span>
            const kicker = model.get('fields.kicker');
            model.setFiltered('hideKicker', !kicker || kicker.includes('Click to add kicker'));
        }
    }

    async onChildAdded(model, childModel) {
        // Use image for front crop if:
        // - Child is an image
        // - Front-crop do not exist
        if (childModel.getType() !== 'image') {
            return;
        }
        this.api.v1.article.frontcrop.get().then((cropData) => {
            if (cropData) { return; }
            const instanceOfId = childModel.get('instance_of');
            if (instanceOfId) {
                this.setFrontCrop(instanceOfId);
            } else {
                // If image is being downloaded, wait for it to finish and then set the front crop.
                this.api.v1.model.bindings.bind(childModel, 'instance_of', (image, path, value) => {
                    this.setFrontCrop(value);
                });
            }
        }).catch((err) => {
            Sys.logger.warn(`[ArticleHeader] Failed to get front-crop: "${ err.toString() }"`);
        });
    }

    setFrontCrop(instanceOfId) {
        const data = {
            type: 'image',
            contentdata: {
                instance_of: instanceOfId,
                fields: {
                    croph: 100,
                    cropw: 100,
                    x: 0,
                    y: 0
                }
            }
        };
        this.api.v1.article.frontcrop.set({ pano: data, height: data }).then(() => {
            Sys.logger.debug('[ArticleHeader] Front-crop successfully set.');
        }).catch((err) => {
            Sys.logger.warn(`[ArticleHeader] Failed to set front-crop: "${ err.toString() }"`);
        });
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ArticleList.js":
/*!****************************************************!*\
  !*** ./modules/behaviours/elements/ArticleList.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticleList)
/* harmony export */ });
class ArticleList {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onRender(model, view) {
        const grids = view.getAbsoluteGridWidths();
        const columnsDesktop = model.get('fields.columnsDesktop') || this.getFallbackColumns(grids.desktop || 12);
        const columnsMobile = model.get('fields.columnsMobile') || 1;
        model.setFiltered('columns', {
            desktop: columnsDesktop,
            mobile: columnsMobile
        });

        if (!this.isEditor) { return; }
        const layout = model.get('fields.layout');
        const layoutOptions = [
            {
                value: 'default',
                label: 'Horizontal',
                selected: layout === 'default'
            },
            {
                value: 'vertical',
                label: 'Vertical',
                selected: layout === 'vertical'
            }
        ];
        const imageLayout = model.get('fields.imageLayout');
        const imageLayoutOptions = [
            {
                value: 'full',
                label: '100% width',
                selected: imageLayout === 'full'
            },
            {
                value: 'left',
                label: 'Align Left',
                selected: imageLayout === 'left'
            },
            {
                value: 'right',
                label: 'Align Right',
                selected: imageLayout === 'right'
            }
        ];
        model.setFiltered('layoutOptions', layoutOptions);
        model.setFiltered('imageLayoutOptions', imageLayoutOptions);
    }

    getFallbackColumns(grid) {
        if (grid >= 10) return 4;
        if (grid >= 7) return 3;
        if (grid >= 5) return 2;
        return 1;
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ArticleMeta.js":
/*!****************************************************!*\
  !*** ./modules/behaviours/elements/ArticleMeta.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticleMeta)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelperInt.js */ "./modules/lib/helpers/datetime/DateTimeHelperInt.js");


class ArticleMeta {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const lang = lab_api.v1.config.get('contentLanguage') || 'no';
        const stringSettings = {
            publishedLabel: 'Publisert',
            unpublishedLabel: '(upublisert) Opprettet',
            modifiedLabel: 'Sist oppdatert',
            readTimeLabel: 'Lesetid',
            unifiedLabel: '',
            languageCode: lang,
            niceDates: false,
            dateFormat: 'l d. F Y - H:i',
            dateFormatPrependZero: true,
            timeFormatPrependZero: true,
            template: '{{dddd}} {{DD}}. {{MMMM}} {{YYYY}} - {{HH}}:{{mm}}',
            useOldFormat: false
        };
        // If language is english
        if (lang === 'en') {
            stringSettings.publishedLabel = 'Published';
            stringSettings.unpublishedLabel = '(unpublished) Created';
            stringSettings.modifiedLabel = 'Last updated';
            stringSettings.readTimeLabel = 'Read time';
            stringSettings.languageCode = 'en';
        }

        // Let config override:
        const config = this.api.v1.config.get('contentbox_settings.articleMeta.date');
        if (config) {
            for (const key in config) {
                if (key && stringSettings[key] !== undefined) {
                    stringSettings[key] = config[key];
                }
            }

            if ('dateFormat' in config && !('template' in config)) {
                stringSettings.useOldFormat = true;
            }
        }

        // Admin will override config
        const dateTimeFormat = this.api.v1.locale.get('dates.dateTime', { noRender: true, fallbackValue: null });
        if (dateTimeFormat) {
            stringSettings.template = dateTimeFormat;
        }

        // Fields "published" and "created" are derived from page-node in properties.json.
        // Access page-data directly via the model.
        // Note: This is also used in page-template (published/modified meta-fields)

        const dateHandler = new _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelperInt(stringSettings.languageCode);
        let label = stringSettings.publishedLabel;
        let articleTimestamp = model.get('fields.published');
        const modifiedTimestamp = model.get('fields.modified') >= articleTimestamp ? model.get('fields.modified') : null;

        model.setFiltered('unpublished', false);

        if (!articleTimestamp) {
            label = stringSettings.unpublishedLabel;
            model.setFiltered('unpublished', true);
            articleTimestamp = model.get('fields.created');
        }

        let hideModifiedDate = this.api.v1.config.get('contentbox_settings.articleMeta.hideModifiedDate');
        if (!hideModifiedDate) {
            hideModifiedDate = model.get('fields.hidePublishedDate');
        }

        const hidePublishedDate = model.get('fields.hidePublishedDate');
        const publishedDate = new Date(articleTimestamp * 1000);
        const modifiedDate = modifiedTimestamp ? new Date(modifiedTimestamp * 1000) : null;

        const published = {
            isoDate: publishedDate.toISOString(),
            label,
            timestamp: articleTimestamp,
            hide: hidePublishedDate,
            formatted: ''
        };

        const modified = {
            isoDate: modifiedDate ? modifiedDate.toISOString() : '',
            label: stringSettings.modifiedLabel,
            timestamp: modifiedTimestamp,
            hide: hideModifiedDate,
            formatted: ''
        };

        // Unified: Display modified-date if exist. If not: Use publish-date
        const displayUnifiedDate = this.api.v1.config.get('contentbox_settings.articleMeta.displayUnifiedDate');
        const unified = { hide: true };
        if (displayUnifiedDate) {
            unified.hide = false;
            unified.isoDate = (modifiedDate || publishedDate).toISOString();
            unified.timestamp = modifiedTimestamp || articleTimestamp;
            unified.label = stringSettings.unifiedLabel;
            unified.formatted = '';
            published.hide = true;
            modified.hide = true;
        }

        // Note: Use old format if specified. stringSettings.useOldFormat will default to true if the customer overwrites "dateFormat" in their config, while not overwriting "template".
        if (stringSettings.niceDates) {
            if (!published.hide) published.formatted = dateHandler.timestampToNiceDate(dateHandler.toTimestamp(publishedDate));
            if (modifiedDate && !modified.hide) {
                modified.formatted = dateHandler.timestampToNiceDate(dateHandler.toTimestamp(modifiedDate));
            }
            if (!unified.hide) {
                unified.formatted = dateHandler.timestampToNiceDate(dateHandler.toTimestamp(modifiedDate || publishedDate));
            }
        } else if (stringSettings.useOldFormat) {
            if (!published.hide) published.formatted = dateHandler.formattedUtcDate(publishedDate, stringSettings.dateFormat, stringSettings.dateFormatPrependZero, stringSettings.timeFormatPrependZero);
            if (modifiedDate && !modified.hide) {
                modified.formatted = dateHandler.formattedUtcDate(modifiedDate, stringSettings.dateFormat, stringSettings.dateFormatPrependZero, stringSettings.timeFormatPrependZero);
            }
            if (!unified.hide) {
                unified.formatted = dateHandler.formattedUtcDate(modifiedDate || publishedDate, stringSettings.dateFormat, stringSettings.dateFormatPrependZero, stringSettings.timeFormatPrependZero);
            }
        } else {
            if (!published.hide) published.formatted = dateHandler.utcFormat(publishedDate, stringSettings.template);
            if (modifiedDate && !modified.hide) {
                modified.formatted = dateHandler.utcFormat(modifiedDate, stringSettings.template);
            }
            if (!unified.hide) {
                unified.formatted = dateHandler.utcFormat(modifiedDate || publishedDate, stringSettings.template);
            }
        }

        model.setFiltered('date', { published, modified, unified });

        // Date-info is now accessible in template.

        const readTime = model.get('fields.readTime') || 0.5;
        const { readTimeLabel } = stringSettings;
        model.setFiltered('readTime', readTime < 1 ? '< 1 min' : `${ readTime } min`);
        model.setFiltered('readTimeLabel', readTimeLabel);
    }

    onInserted(model) {
        // Todo: Add default byline
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ArticleScroller.js":
/*!********************************************************!*\
  !*** ./modules/behaviours/elements/ArticleScroller.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticleScroller)
/* harmony export */ });
/* harmony import */ var _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/AutodataHelper.js */ "./modules/lib/helpers/AutodataHelper.js");
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");



class ArticleScroller {

    constructor(api) {
        this.api = api;
        this.front_api_url = this.api.v1.properties.get('front_api_url');
        this.integration_url = this.api.v1.properties.get('integration_url');
        this.config = this.api.v1.config.get('contentbox_settings.articlescroller') || {
            sources: {
                all: {
                    // eslint-disable-next-line no-template-curly-in-string
                    src: `${ this.front_api_url }/api/v1/article/?orderBy=published&query=visibility_status:P%20AND%20published:[*%20NOW]%20AND%20showonfp:1&site_id={{ data.site_id }}&limit={{ data.articleCount }}`,
                    data_type: 'labrador',
                    is_default: true
                }
            },
            imageAspectRatio: 0.5,
            visibleArticleCount: 4,
            visibleArticleCountMobile: 1
        };
        this.preferredImageFormat = lab_api.v1.image.getPreferredImageFormat();
        this.isEditor = this.api.v1.app.mode.isEditor();
        this.sourceList = this.getSourceList();
        this.domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
    }

    onViewHelper(model) {
        const source = model.get('fields.source') || this.getDefaultSource(this.sourceList);
        const siteId = model.get('fields.site_id');
        const articleCount = model.get('fields.articleCount') || 10;

        let sourceList = this.sourceList[source] && this.sourceList[source].src ? this.sourceList[source] : null;
        const customSource = model.get('fields.customSource');
        if (customSource) {
            Sys.logger.debug(`ArticleScroller: Will use custom source.`);
            sourceList = customSource;
        }

        if (sourceList && sourceList.src) {
            let siteIdFromAlias = null;
            if (sourceList.defaultsiteAlias) {
                const site = this.api.v1.site.getSite(sourceList.defaultsiteAlias);
                if (site) {
                    siteIdFromAlias = site.id;
                }
            }

            const dateLimitFrom = model.get('fields.dateLimitFrom'); // "today". Can add more options if needed: "tomorrow", "next_week" etc.
            const dateLimitTo = model.get('fields.dateLimitTo'); // "today". Can add more options if needed: "tomorrow", "next_week" etc.
            const dateHander = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_1__.DateTimeHelper();
            const todayString = dateHander.formattedUtcDate(new Date(), 'Y-m-d');
            let dateQuery = '';
            if (dateLimitFrom === 'today') {
                dateQuery = `calendar_start_date:[${  todayString  }T00:00:00Z%20TO%20*]%20AND%20`;
            }
            if (dateLimitTo === 'today') {
                dateQuery += `calendar_end_date:[*%20TO%20${  todayString  }T23:59:59Z]%20AND%20`;
            }

            const data = {
                site_id: siteId || siteIdFromAlias,
                front_api_url: this.front_api_url,
                articleCount,
                dateQuery
            };

            // Todo: Do not use Mustache directly to render. Use Labrador API.
            const url = Mustache.render(this.handleUrlVariables(sourceList.src), { data });
            model.setFiltered('url', url);
        } else {
            Sys.logger.warning(`ArticleScroller: Missing config for source "${ source }". Cannot fetch data. Check config.`);
        }
    }

    onRender(model, view) {
        const source = model.get('fields.source') || this.getDefaultSource(this.sourceList);
        const paywallLabel = {
            text: { content: 'Pluss' },
            icon: { content: 'fi-plus' },
            display: true,
            ...this.api.v1.config.get('paywall.label')
        };

        if (paywallLabel.display) {
            model.setFiltered('paywallLabel', paywallLabel);
        }

        let visibleArticleCount = model.get('fields.visibleArticleCount') || this.api.v1.config.get('contentbox_settings.articlescroller.visibleArticleCount') || 4;
        const visibleArticleCountMobile = model.get('fields.visibleArticleCountMobile') || this.api.v1.config.get('contentbox_settings.articlescroller.visibleArticleCountMobile') || 2;
        const maxVisibleArticleCount = visibleArticleCount;
        const maxVisibleArticleCountMobile = visibleArticleCountMobile;
        const restrictHeight = this.config.restrictHeight || false;
        const hideImages = !!model.get('fields.hideImages');
        const showAuthor = !!model.get('fields.showAuthor');
        const showPublishedDate = !!model.get('fields.showPublishedDate');
        const hideNavigation = !!model.get('fields.hideNavigation');
        const transitionDuration = model.get('fields.transitionDuration') || 4000; // Milliseconds between each animation
        const transitionStepPercent = model.get('fields.transitionStep') || 15; // Percent. CSS-transition. 100 result in a steady movement, any lower will scroll and stop for each iteration.
        const transitionStepDuration = (((transitionDuration / 1000) / 100) * transitionStepPercent).toFixed(2);

        if (view.viewport === 'mobile') {
            visibleArticleCount = visibleArticleCountMobile;
        }

        let pixelDensityFactor = this.api.v1.view.getPixelDensityFactor();
        if (view.get('metadata.hasFullWidth')) {
            pixelDensityFactor += 0.2;
        }
        const imageSize = {};
        imageSize.aspectRatio = model.get('fields.aspectRatio') || this.api.v1.config.get('contentbox_settings.articlescroller.imageAspectRatio') || this.api.v1.config.get('image.defaultAspectRatio');
        imageSize.width = Math.ceil(this.api.v1.viewport.getWidth(view.viewport) / visibleArticleCount);
        imageSize.height = Math.floor(imageSize.width * imageSize.aspectRatio);

        const external = view.get('external');
        const articleCount = model.get('fields.articleCount') || 10;
        const mappers = this.config.externalMappers || {};
        const sourceObj = model.get('fields.customSource') || this.sourceList[source] || {};

        let data = this.mapExternalData(external, sourceObj.data_type, {
            aspectRatio: imageSize.aspectRatio,
            imageServer: this.api.v1.properties.get('image_server'),
            width: Math.floor(imageSize.width * pixelDensityFactor),
            height: Math.floor(imageSize.height * pixelDensityFactor),
            baseUrl: sourceObj.baseUrl || '',
            hideImages,
            showAuthor,
            showPublishedDate
        }, mappers);
        if (Array.isArray(data) && data.length > 0) data = data.slice(0, articleCount);
        if (visibleArticleCount > data.length) visibleArticleCount = data.length;
        if (visibleArticleCount < 1) visibleArticleCount = 1;

        model.setFiltered('useNavigation', !hideNavigation && data.length > visibleArticleCount);
        model.setFiltered('visibleArticleCount', visibleArticleCount);
        model.setFiltered('maxVisibleArticleCount', maxVisibleArticleCount);
        model.setFiltered('maxVisibleArticleCountMobile', maxVisibleArticleCountMobile);
        model.setFiltered('restrictHeight', restrictHeight);
        model.setFiltered('hideImages', hideImages);
        model.setFiltered('showAuthor', showAuthor);
        model.setFiltered('showPublishedDate', showPublishedDate);
        model.setFiltered('transitionDuration', transitionDuration);
        model.setFiltered('transitionStep', transitionStepDuration);
        model.setFiltered('data', data);
        model.setFiltered('width', imageSize.width);
        model.setFiltered('height', imageSize.height);
        model.setFiltered('labels', this.config.labels || {
            buttonLeft: 'Rull til venstre',
            buttonRight: 'Rull til høyre'
        });

        if (this.isEditor) {
            model.setFiltered('transitionDurationSeconds', transitionDuration / 1000);
        }
        if (!this.isEditor) {
            model.setFiltered('lazyloadImages', this.api.v1.config.get('imageLoading.lazy') || false);
        } else if (sourceObj.src) {
            const adminView = {};

            // Options for "source" (fields.source)
            const sourceOptions = [];
            for (const sourceName of Object.keys(this.sourceList)) {
                sourceOptions.push({
                    value: sourceName,
                    name: this.sourceList[sourceName].display_name || sourceName,
                    selected: sourceName === source
                });
            }
            adminView.sources = sourceOptions;

            // Options for "site_id" (fields.site_id)
            const site_idOptions = [{
                value: '',
                name: 'Any site'
            }];
            const selectedSiteId = parseInt(model.get('fields.site_id') || this.getSiteIdFromAlias(source), 10);
            this.api.v1.site.getSites().forEach((site) => {
                site_idOptions.push({
                    value: site.id,
                    name: site.display_name,
                    selected: site.id === selectedSiteId
                });
            });
            adminView.site_ids = site_idOptions;

            const dateLimitFrom = model.get('fields.dateLimitFrom'); // "today". Can add more options if needed: "tomorrow", "next_week" etc.
            const dateLimitTo = model.get('fields.dateLimitTo'); // "today". Can add more options if needed: "tomorrow", "next_week" etc.
            // Options for fields.dateLimitFrom / fields.dateLimitTo
            adminView.dateLimit = {
                from: [{
                    value: 'today',
                    name: 'Today',
                    selected: dateLimitFrom === 'today'
                }],
                to: [{
                    value: 'today',
                    name: 'Today',
                    selected: dateLimitTo === 'today'
                }]
            };

            // Options for layout align (fields.layoutAlign)
            const layoutAlign = model.get('fields.layoutAlign'); // "left", "centered", "right"
            adminView.layout = {
                align: [{
                    value: 'left',
                    name: 'Align Left',
                    selected: layoutAlign === 'left'
                }, {
                    value: 'centered',
                    name: 'Align centered',
                    selected: layoutAlign === 'centered'
                }, {
                    value: 'right',
                    name: 'Align right',
                    selected: layoutAlign === 'right'
                }]
            };


            // Add custom layout if present.
            const additionalLayout = this.api.v1.config.get('contentbox_settings.articlescroller.layout') || false;
            if (additionalLayout) {
                additionalLayout.forEach(item => {
                    if (item && typeof item.value !== 'undefined') {
                        item.selected = item.value === layoutAlign;
                        if (item.value === layoutAlign) {
                            item.selected = true;
                        } else {
                            item.selected = false;
                        }
                    }
                    adminView.layout.align.push(item);
                });
            }

            adminView.aspectRatio = imageSize.aspectRatio;

            model.setFiltered('options', adminView);
        }
    }

    // Turns off subtitle by default for Article Scroller when created
    // Only affects newly created Article scrollers, not existing ones
    // Avoids having to manually turn off subtitle for each new Article Scroller
    onCreated(model) {
        model.set('fields.skipLeadText', true);
    }

    handleUrlVariables(url) {
        // url may be "{{api}}/article/?query=tag:tag1"
        // Replace "{{api}}" with this.front_api_url
        return url.replace(/\{\{api\}\}/g, this.front_api_url).replace(/\{\{int\}\}/g, this.integration_url);
    }

    getSourceList() {
        const result = {};
        for (const name of Object.keys(this.config.sources || {})) {
            result[name] = this.config.sources[name];
        }
        const feeds = this.api.v1.config.get('feeds') || {};
        for (const name of Object.keys(feeds)) {
            if (feeds[name].format === 'json' && feeds[name].labrador_json) {
                let urlObj;
                try {
                    urlObj = new URL(feeds[name].url);
                } catch (e) {
                    urlObj = null;
                }

                const domain = urlObj
                    ? urlObj.origin
                    : this.domain;

                result[name] = {
                    src: feeds[name].url,
                    data_type: (feeds[name].url || '').startsWith('{{api}}') ? 'labrador' : 'labrador_json',
                    is_default: false,
                    baseUrl: domain,
                    display_name: feeds[name].display_name
                };
            }
        }
        return result;
    }

    getDefaultSource(config) {
        for (const key of Object.keys(config)) {
            if (config[key].is_default) return key;
        }
        const [first = null] = Object.keys(config) || [];
        return first;
    }

    getSiteIdFromAlias(source) {
        if (this.sourceList[source].defaultsiteAlias) {
            const site = this.api.v1.site.getSite(this.sourceList[source].defaultsiteAlias);
            if (site) {
                return site.id;
            }
        }
        return null;
    }

    mapExternalData(data, data_type, settings, extraMappers) {
        switch (data_type) {
            case 'ntb':
                return this.mapNtb(data, settings);
            case 'advokatjobb':
                return this.mapAdvokatjobb(data, settings);
            case 'labrador_json':
                return this.mapLabradorJson(data, settings);
            case 'labrador_compliant':
                return this.mapLabradorCompliant(data, settings);
            default: // "labrador"
                try {
                    if (Object.keys(extraMappers).includes(data_type)) {
                        const element = extraMappers[data_type].split('.');
                        let functionReference = window;
                        for (let i = 0; i < element.length; i += 1) {
                            functionReference = functionReference[element[i]];
                        }
                        let result = null;
                        if (functionReference) {
                            result = functionReference(data, settings);
                            if (result) {
                                return result;
                            }
                        }
                    }
                } catch (e) {
                    Sys.logger.warning('Faulty extraMapper function.');
                }
                return this.mapLabrador(data, settings);
        }
    }

    mapNtb(data, settings) {
        const result = [];
        if (!data.releases) return result;
        data.releases.forEach((article) => {
            let imageUrl = false;
            let iconImageUrl = null;
            if (!settings.hideImages && article.images.length) {
                imageUrl = article.images[0].thumbnail_16_9 || false;
            }
            if (article.logos.length) {
                iconImageUrl = article.logos[0].thumbnail_original || false;
            }
            if (!settings.hideImages && !imageUrl && article.logos.length) {
                imageUrl = article.logos[0].thumbnail_16_9 || false;
            }
            const thisArticle = {
                url: `https://www.ntbinfo.no${  article.url }`,
                title: article.title,
                subtitle: article.leadtext,
                image: imageUrl,
                iconImage: iconImageUrl
            };
            result.push(thisArticle);
        });
        return result;
    }

    mapAdvokatjobb(data, settings) {
        const result = [];
        if (!data.Jobs) return result;
        data.Jobs.forEach((article) => {
            let img = false;
            let description = '';
            if (article.Company) {
                if (!settings.hideImages && article.Company.Logo) {
                    img = settings.baseUrl + article.Company.Logo;
                }
                if (article.Company.Name) {
                    description = `${ article.Company.Name  } - `;
                }
            }
            const thisArticle = {
                url: settings.baseUrl + article.Url,
                title: description + article.Title,
                subtitle: `${ article.Location  } - ${  article.DueDate }`,
                image: img,
                iconImage: null
            };
            result.push(thisArticle);
        });
        return result;
    }

    mapLabradorJson(data, settings) {
        const result = [];
        if (!data || !data.result) return result;
        const imgArgs = [
            `width=${  settings.width }`,
            `height=${  settings.height }`
        ];
        data.result.forEach((article) => {
            const autodata = _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_0__.AutodataHelper.parseCustomDataFromFeed(article, 'contentbox_settings.articlescroller');
            let url = '';
            if (article.url) {
                if (article.url.indexOf('http') === 0 || article.url.indexOf('//') === 0) {
                    url = article.url;
                } else {
                    url = settings.baseUrl + article.url;
                }
            }
            const thisArticle = {
                url,
                title: article.teaserTitle ? article.teaserTitle : article.title,
                kicker: article.kicker || article.teaserKicker || '',
                subtitle: article.teaserSubtitle ? article.teaserSubtitle : article.description,
                image: !settings.hideImages && article.images && article.images.length ? (`${ article.images[0].url }${ article.images[0].url.includes('?') ? '&' : '?' }${ imgArgs.join('&') }`) : false,
                autodata: autodata || '',
                section: article.section || '',
                paywall: !!article.paywall,
                author: article.byline || '',
                publishedDate: article.published
            };
            result.push(thisArticle);
        });
        return result;
    }

    mapLabrador(data, settings) {
        const result = [];

        if (!data || !data.result) return result;

        const imgArgs = [
            `width=${  settings.width }`,
            `height=${  settings.height }`
        ];

        if (this.preferredImageFormat && this.preferredImageFormat !== 'jpg') {
            imgArgs.push(`format=${ this.preferredImageFormat }`);
        }

        // Get the date format set by the customer in Admin -> Language options -> Dates
        const publishedDateFormat = this.api.v1.locale.get('dates.articleScrollerPublishedFormat', { noRender: true });
        const publishedDatePrefix = this.api.v1.locale.get('dates.articleScrollerPublishedDatePrefix', { fallbackValue: '' });
        const dateHandler = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_1__.DateTimeHelper(this.api.v1.config.get('lang') || undefined);

        data.result.forEach((article) => {
            const autodata = _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_0__.AutodataHelper.parseCustomDataFromFeed(article, 'contentbox_settings.articlescroller');
            const formattedDate = dateHandler.format(new Date(article.published), publishedDateFormat);
            const publishedDate = publishedDatePrefix ? `${ publishedDatePrefix } ${ formattedDate }` : formattedDate;
            const thisArticle = {
                url: article.siteDomain + article.published_url,
                title: article.title,
                kicker: article.kicker || article.teaserKicker || '',
                subtitle: article.subtitle,
                image: !settings.hideImages && article.frontCropUrl ? (`${ settings.imageServer  }/${  article.frontCropUrl  }&${  imgArgs.join('&') }`) : false,
                autodata: autodata || '',
                section: article.section || '',
                paywall: !!article.paywall,
                author: article.byline || '',
                publishedDate
            };

            result.push(thisArticle);
        });

        return result;
    }

    mapLabradorCompliant(data, settings) {
        const result = [];
        if (!data || !data.result) return result;
        const imgArgs = [
            `width=${  settings.width }`,
            `height=${  settings.height }`
        ];

        data.result.forEach((article) => {
            let imageUrl = false;
            if (!settings.hideImages && article.images && Array.isArray(article.images) && article.images.length > 0) {
                imageUrl = `${ settings.imageServer  }/?imageUrl=${  article.images[0].url  }&${  imgArgs.join('&') }`;
            }
            const thisArticle = {
                url: article.url,
                title: article.title,
                kicker: article.kicker || '',
                subtitle: article.subtitle,
                section: article.section || '',
                image: imageUrl,
                paywall: !!article.paywall,
                author: article.byline || ''
            };
            result.push(thisArticle);
        });
        return result;
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/ArticlesByTag.js":
/*!******************************************************!*\
  !*** ./modules/behaviours/elements/ArticlesByTag.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticlesByTag)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class ArticlesByTag {

    constructor(api) {
        this.api = api;
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.isEditor = this.api.v1.app.mode.isEditor();
        this.boundIds = {};
        this.config = this.api.v1.config.get('contentbox_settings.articlesByTag') || {
            niceDates: true,
            dateFormat: '{{ HH }}:{{ mm }} - {{ DD }}.{{ MM }}.{{ YYYY }}'
        };
        this.preferredImageFormat = lab_api.v1.image.getPreferredImageFormat();
    }

    onViewHelper(model, view) {
        // Default options:
        const displayOptions = {
            image: false,
            kicker: false,
            title: true,
            subtitle: true,
            published: false
        };
        const editDisplayOptions = [];
        const selectedDisplayOptions = model.get('fields.displayOptions_json') || {};
        for (const key of Object.keys(displayOptions)) {
            if (selectedDisplayOptions[key] !== undefined) {
                displayOptions[key] = !!selectedDisplayOptions[key];
            }
        }
        const query_json = model.get('fields.query_json') || {};
        const site_id = query_json.site_id === undefined ? this.api.v1.site.getSite().id : query_json.site_id;
        const imageWidth = 200;
        const aspectRatio = lab_api.v1.config.get('contentbox_settings.articlesByTag.imageAspectRatio') || lab_api.v1.config.get('image.defaultAspectRatio');
        const imgArgs = [
            `width=${ imageWidth }`,
            `height=${ Math.floor(imageWidth * aspectRatio) }`
        ];
        if (this.preferredImageFormat && this.preferredImageFormat !== 'jpg') {
            imgArgs.push(`format=${ this.preferredImageFormat }`);
        }

        model.setFiltered('site_id', site_id);
        model.setFiltered('displayOptions', displayOptions);            // For template
        model.setFiltered('imageServer', this.api.v1.properties.get('image_server'));
        model.setFiltered('imgArgs', imgArgs.join('&'));
        model.setFiltered('orderBy', 'published');

        // Generate correct url depending on tagPagePath value
        model.setFiltered('tagPagePath', lab_api.v1.config.get('tagPagePath') || '/tag/');
        model.setFiltered('limit', query_json.limit || 10);

        const setQuery = (m, tags, mode) => {
            const sanitizedTags = [];

            if (Array.isArray(tags)) {
                tags.forEach((tag) => {
                    let theTag = tag;
                    theTag = theTag.replace(/([\(\)\s+])/g, '\\$1');
                    theTag = theTag.toLowerCase();
                    sanitizedTags.push(theTag);
                });
            }

            const id = this.rootModel.get('id');
            let queryString;
            if (m.get('fields.useApiQuery') && m.get('fields.apiQuery')) {

                const query = m.get('fields.apiQuery')
                    .replace(/\b(AND|OR|NOT)\b/g, '__$1__')
                    .toLowerCase()
                    .replace(/__and__/g, 'AND')
                    .replace(/__or__/g, 'OR')
                    .replace(/__not__/g, 'NOT');

                queryString = query.length ? `(${ query }) AND published:[* TO NOW] AND NOT id:${ id }` : `published:[* TO NOW] AND NOT id:${ id }`;
                queryString = queryString.replace(/""+/g, '"');
            } else {
                queryString = sanitizedTags.length ? `(tag:"${ sanitizedTags.join('" OR tag:"') }") AND published:[* TO NOW] AND NOT id:${ id }` : `published:[* TO NOW] AND NOT id:${ id }`;
                queryString = queryString.replace(/""+/g, '"');
            }

            if (mode === 'edit') {
                m.set('fields.query', queryString, { save: false });
                m.setFiltered('query', encodeURIComponent(queryString));
                m.set('fields.selectedTags_json', tags, { save: false });
            }

            if (mode === 'published') {
                m.setFiltered('query', encodeURIComponent(queryString));
                m.set('fields.selectedTags_json', tags, { save: false });
            }
        };
        if (!this.isEditor) {
            model.setFiltered('lazyloadImages', lab_api.v1.config.get('imageLoading.lazy') || false);

            const section = this.rootModel.get('primaryTags.section');
            let tags = [];
            tags = (this.rootModel.get('tags') || []).filter((tag) => tag !== section);

            if (model.get('fields.usePageTags')) {
                setQuery(model, tags, 'published');
            } else if (model.get('fields.useApiQuery') && model.get('fields.apiQuery')) {
                setQuery(model, '', 'published');
            } else {
                model.setFiltered('query', encodeURIComponent(model.get('fields.query')));
            }
        }

        if (this.isEditor) {
            for (const key of Object.keys(displayOptions)) {
                editDisplayOptions.push({
                    name: key,
                    value: displayOptions[key]
                });
            }

            // Options for "site_id" (fields.query_json.site_id)
            const siteOptions = [{
                value: '',
                name: 'Any site'
            }];
            this.api.v1.site.getSites().forEach((site) => {
                siteOptions.push({
                    value: site.id,
                    name: site.display_name,
                    // eslint-disable-next-line eqeqeq
                    selected: site.id == site_id
                });
            });
            model.setFiltered('siteOptions', siteOptions);
            model.setFiltered('editDisplayOptions', editDisplayOptions);

            const updateTags = () => {
                if (model.get('fields.useApiQuery')) {
                    setQuery(model, '', 'edit');
                } else {
                    let tags = [];
                    if (model.get('fields.usePageTags')) {
                        // Get tags without section-tag.
                        const section = this.rootModel.get('primaryTags.section');
                        tags = (this.rootModel.get('tags') || []).filter((tag) => tag !== section);
                    } else {
                        const tagsString = model.get('fields.tagsString') || '';
                        const rawTags = tagsString.split(',');
                        rawTags.forEach((tag) => {
                            const theTag = tag.trim();
                            if (theTag) tags.push(theTag);
                        });
                    }
                    setQuery(model, tags, 'edit');
                }
            };

            // Unset fields.usePageTags when editing tags-field:
            const updateTagsString = () => {
                model.set('fields.usePageTags', false);
                updateTags();
            };

            const guid = model.getGuid();
            if (!this.boundIds[guid]) {
                this.boundIds[guid] = true;
                this.api.v1.model.bindings.bind(this.rootModel, 'tags', updateTags);
                this.api.v1.model.bindings.bind(model, 'fields.usePageTags', updateTags);
                this.api.v1.model.bindings.bind(model, 'fields.usePageTags', updateTags);
                this.api.v1.model.bindings.bind(model, 'fields.tagsString', updateTagsString);
            }

            updateTags();
        }
    }

    onRender(model, view) {
        const placeholder = view.get('fields.placeholder');
        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));
        const lang = this.api.v1.config.get('lang') || 'no';
        const dateHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(lang);
        const external = view.get('external');
        const templateData = [];

        if (external && external.result) {
            external.result.forEach((a) => {
                if (a.type === 'article') {
                    const dateString = a.published || null;
                    const publishedDate = new Date(dateString);

                    templateData.push({
                        kicker: a.kicker,
                        title: a.title,
                        subtitle: a.subtitle,
                        published_url: a.published_url,
                        frontCropUrl: a.frontCropUrl,
                        published: dateString,
                        formatted: dateString && this.config.niceDates ? dateHelper.timestampToNiceDate(dateHelper.toTimestamp(publishedDate)) : dateHelper.format(publishedDate, this.config.dateFormat)
                    });
                }
            });
        }
        model.setFiltered('templateData', templateData);
    }

    onSettingsPanel(model, view, settings) {
        return {
            onDisplay: (params) => {
                const toggleEl = params.markup.querySelector('.advancedToggle');
                const expandableEl = params.markup.querySelector('.advanced');
                if (toggleEl && expandableEl) {
                    toggleEl.addEventListener('click', (event) => {
                        const isHidden = expandableEl.classList.contains('lab-hidden');
                        expandableEl.classList.toggle('lab-hidden');
                        if (isHidden) {
                            toggleEl.classList.remove('labicon-pluss_slim');
                            toggleEl.classList.add('labicon-minus_slim');
                        } else {
                            toggleEl.classList.remove('labicon-minus_slim');
                            toggleEl.classList.add('labicon-pluss_slim');
                        }
                    }, false);
                }
            }
        };
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Bodytext.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Bodytext.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Bodytext)
/* harmony export */ });
/* harmony import */ var _lib_helpers_Paywall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/Paywall.js */ "./modules/lib/helpers/Paywall.js");


class Bodytext {

    constructor(api) {
        this.api = api;
        this.isFront = this.api.v1.app.mode.isFront();
        this.internal = this.api.v1.properties.get('paywall') || {};
        const config = this.api.v1.config.get('paywall') || {};
        this.provider = config.provider || 'internal';
        // View can disable displaying buildt-in paywall in config: { paywall: { displaySalesPosters: false, ... } }
        // Useful for providers rendering the salesposters client-side
        this.displaySalesPosters = config.displaySalesPosters !== false;
    }

    onRender(model, view) {
        const paywall = {
            displaySalesPosters: this.displaySalesPosters,
            isInternal: this.provider === 'internal' && this.internal.active,
            active: this.isFront && (this.provider === 'internal' ? this.internal.active : !!model.get('fields.paywall')),
            access: this.provider === 'internal' && this.internal.active ? this.internal.hasAccess : false,
            provider: this.provider,
            intro: this.provider !== 'internal' ? _lib_helpers_Paywall_js__WEBPACK_IMPORTED_MODULE_0__.Paywall.filterBodytext(model, view) : undefined,
            bodytext: this.provider !== 'internal' ? model.get('filtered.bodytext') : undefined
        };
        if (paywall.active && !paywall.access) {
            if (this.provider === 'internal') {
                model.setFiltered('bodytext', _lib_helpers_Paywall_js__WEBPACK_IMPORTED_MODULE_0__.Paywall.filterBodytext(model, view));
            } else {
                model.setFiltered('bodytext', '');
            }
        }
        if (this.provider === 'iteras' && paywall.active) {
            const iterasConfig = this.api.v1.config.get('iteras') || {};
            const tags = model.get('tags') || [];
            paywall.iteras = _lib_helpers_Paywall_js__WEBPACK_IMPORTED_MODULE_0__.Paywall.iterasPaywall(iterasConfig, tags);
        }
        model.setFiltered('paywall', paywall);
    }

    onRendered(model, view) {
        // Editor: Add an empty paragraph at the end of the bodytext if there is none.
        if (!this.isFront) {
            const markup = view.getMarkup();
            if (markup.children.length && markup.children[markup.children.length - 1].tagName !== 'P') {
                const p = document.createElement('p');
                markup.appendChild(p);
            }
            this.markCustomIndex(model.getPersistentChildren());
        }
    }

    // Baseview is configured to allow custom placement per viewport in bodytext.
    // If user has moved an element to a new placement in a secondary viewport, mark it with an icon.
    // A click on the icon will reset the position.
    markCustomIndex(children) {
        for (const child of children) {
            const raw = child.getRaw('metadata.bodyTextIndex') || {};
            if (Object.values(raw.vp || {}).filter((value) => Number.isInteger(value)).length > 1) {
                this.markCustomIndexForModel(child);
            }
        }
    }

    markCustomIndexForModel(model) {
        for (const viewport of this.api.v1.viewport.getActive()) {
            const view = this.api.v1.view.getView(model, viewport);
            if (!view.getExtraElement('customIndexElement')) {
                const el = view.setExtraElement('customIndexElement', this.getCustomIndexElement(model, view));
                view.getMarkup().appendChild(el);
            }
        }
    }

    getCustomIndexElement(model, view) {
        const el = document.createElement('span');
        const callback = (event) => {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.removeCustomIndexElement(model);
            if (model.getParent()) {
                this.api.v1.model.addToRedrawQueue(model.getParent());
            }
            model.set('metadata.bodyTextIndex', undefined, { viewport: 'mobile' });
            this.api.v1.viewport.align(model, view);
        };
        el.addEventListener('click', callback, false);
        el.classList.add('labicon-line_index', 'is-customindex');
        el.setAttribute('title', `${ model.getType() } has custom placement. Click to remove on mobile`);
        const bindingHandler = (theModel, key, path) => {
            if (theModel.getParent() && theModel.getParent().getType() !== 'bodytext') {
                callback();
                el.remove();
                this.api.v1.model.bindings.unbind(model, 'path', bindingHandler);
            }
        };
        this.api.v1.model.bindings.bind(model, 'path', bindingHandler);
        return el;
    }

    removeCustomIndexElement(model) {
        for (const view of this.api.v1.view.getViews(model)) {
            view.unsetExtraElement('customIndexElement');
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Byline.js":
/*!***********************************************!*\
  !*** ./modules/behaviours/elements/Byline.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Byline)
/* harmony export */ });
class Byline {

    constructor(api) {
        this.api = api;
    }

    onId(model) {
        // Store added bylines on the user-object.
        // Can be used to display frequently used bylines in the byline-collection
        const current = lab_api.v1.user.getField('favouriteBylineIds') || [];
        const id = model.get('instance_of');
        if (!id || current.includes(id)) {
            return;
        }
        current.unshift(id);
        lab_api.v1.user.setField('favouriteBylineIds', current.slice(0, 5));
    }

    // Lab 3 may set fields.width for byline-images if main image is in full-width. Fix.
    onReady(model, view) {
        const image = this.api.v1.model.query.getChildOfType(model, 'image');
        if (!image) { return; }
        if (!image.get('fields.width')) { return; }
        image.set('fields.width', null, {
            save: false,
            undoable: false
        });
    }

    onRender(model, view) {
        // Config defines what elements and order of elements to display in the byline.
        /*
        Config-example:
        {
            "template": [{
                "key": "image"
            }, {
                "key": "firstname",
                "url": "public_email"
            }, {
                "key": "lastname",
                "url": "public_email"
            }, {
                "key": "description"
            }],
            "imageAbove": true,
            "imageBelow": false
        }
        */

        const isEditMode = this.api.v1.app.mode.isEditor();
        const config = this.api.v1.config.get('contentbox_settings.byline') || {};
        const template = config.template || [];
        const fields = {
            public_email: view.get('fields.public_email'),
            public_url: view.get('fields.public_url'),
            public_phone: view.get('fields.public_phone'),
            firstname: view.get('fields.firstname'),
            lastname: view.get('fields.lastname'),
            description: view.get('fields.description'),
            description2: view.get('fields.description2')
        };

        /**
         * Tech debt - NEVER REMOVE THIS!
         * (see NL-115 and LABS-1434)
         */
        if (!isEditMode) {
            if (fields.firstname && fields.firstname.match(/^byline first name$/i)) {
                fields.firstname = '';
            }

            if (fields.lastname && fields.lastname.match(/^byline last name$/i)) {
                fields.lastname = '';
            }
        }

        const data = {
            items: [],
            imageAbove: !!config.imageAbove,
            imageBelow: !config.imageAbove && !!config.imageBelow
        };

        template.forEach((item) => {
            const element = {
                // key: item.key,
                // value: fields[item.key],
                url: null,
                parts: []
            };

            (item.keys || []).forEach((part) => {
                if ((fields[part] && (fields[part] !== `Click to edit ${  part }`)) || isEditMode) {
                    let value = fields[part];
                    let title;

                    if (
                        part === 'description'
                        && config.enableDescriptionLength
                        && (fields[part] && fields[part].length >= config.descriptionLength)
                    ) {
                        title = fields[part];
                        value = `${ fields[part].substring(0, config.descriptionLength) }...`;
                    }

                    element.parts.push({
                        key: part,
                        value,
                        title
                    });
                }
            });

            if (item.url) {
                // Make sure it's a array.
                if (!Array.isArray(item.url)) {
                    item.url = [item.url];
                }
                for (let part of Object.keys(item.url)) {
                    part = item.url[part];
                    if (fields[part]) {
                        let url = fields[part];
                        if (part === 'public_email') {
                            url = `mailto:${  url }`;
                        }
                        element.url = url;
                        break;
                    }
                }
            }

            if (element.parts.length) {
                data.items.push(element);
            }
        });

        model.setFiltered('default_color', config.default_color || '');
        model.setFiltered('data', data);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Changelog.js":
/*!**************************************************!*\
  !*** ./modules/behaviours/elements/Changelog.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Changelog)
/* harmony export */ });
class Changelog {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const rootModel = this.api.v1.model.query.getRootModel();
        const contentLanguage = rootModel.get('filtered.contentLanguage');
        const changelogEntriesRaw = rootModel.get('fields.lab_changelog_json');
        if (changelogEntriesRaw && changelogEntriesRaw.length > 0) {
            let changelog;
            if (typeof changelogEntriesRaw === 'string') {
                changelog = JSON.parse(changelogEntriesRaw);
            } else {
                changelog = [...changelogEntriesRaw];
            }
            model.setFiltered('changelogHasContent', true);
            const newItems = [];
            changelog.forEach((item) => {
                const date = new Date(item.time * 1000);
                const newItem = {
                    time: date.toLocaleDateString(contentLanguage),
                    changelog: this.convertNewLines(item.changelog)
                };
                newItems.push(newItem);
            });
            model.setFiltered('changelog', newItems);
        }
    }

    /**
     * Converts newline characters in a given text to HTML paragraph and line break tags.
     *
     * - Double newlines (`\n\n`) are replaced with `</p><p>`.
     * - Single newlines (`\n`) are replaced with `<br>`.
     * - The entire text is wrapped in `<p>` tags.
     *
     * @param {string} text - The input text containing newline characters.
     * @returns {string} - The converted text with HTML tags.
     */
    convertNewLines(text) {
        text = text.replace(/\n\n/g, '</p><p>');
        text = text.replace(/\n/g, '<br>');
        text = `<p>${ text }</p>`;
        return text;
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Chart.js":
/*!**********************************************!*\
  !*** ./modules/behaviours/elements/Chart.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChartElement)
/* harmony export */ });
class ChartElement {

    constructor(api, aiSettings = { model: 'gpt-4o', provider: 'openAi', integration: 'openAi' }) {
        this.api = api;
        this.aiSettings = aiSettings;   // Settings for the ai-integration (model, provider, integration)
        this.isEditor = this.api.v1.app.mode.isEditor();
        this.requiredFilesJS = this.api.v1.config.get('contentbox_settings.chart.require.js') || null;

        if (this.isEditor) {

            this.api.v1.ns.set('chart', {
                generate: (model, view) => {
                    const bodyText = this.api.v1.bodytext.getText(this.api.v1.model.query.getModelByType('bodytext'));
                    const domElement = view.getMarkup();
                    domElement.classList.add('lab-content-busy');
                    this.api.v1.ns.get('textAssistant.fetchByGroupName')('chart', this.aiSettings, { bodytext: bodyText })
                        .then((response) => {
                            if (response) {
                                const data = this.cleanUpAndParseJsonString(response);
                                const {
                                    enoughData, title, type, beginAtZero, labels, datasets
                                } = data;
                                if (enoughData) {
                                    this.setIfDefined(model, 'fields.title', title);
                                    this.setIfDefined(model, 'fields.chartType', type);
                                    this.setIfDefined(model, 'fields.beginAtZero', beginAtZero);
                                    this.setIfDefined(model, 'fields.tableData', this.objectToTsv({ labels, datasets }));
                                } else {
                                    domElement.classList.add('lab-highlight-warn');
                                    domElement.querySelector('.description').insertAdjacentHTML('afterend', '<p style="color: #ff0000; text-transform: uppercase; font-weight: bold;">Not enough data to generate a chart</p>');
                                }
                            }
                        })
                        .finally(() => {
                            domElement.classList.remove('lab-content-busy');
                        });
                }
            });
        }
    }

    onCreated(model) {
        if (this.requiredFilesJS) {
            this.requiredFilesJS.forEach((file) => {
                for (const doc of this.api.v1.viewport.getContexts()) {
                    this.api.v1.util.dom.addFile('js', file, doc, null, null, {}, false);
                }
            });
        }
    }

    onRender(model, view) {
        const chartType = model.get('fields.chartType') || 'line';
        const beginAtZero = model.get('fields.beginAtZero') || false;
        const tableData = model.get('fields.tableData');
        let chartData;
        if (tableData) {
            chartData = this.tsvToObject(tableData);
        }

        model.setFiltered('chartType', chartType);
        model.setFiltered('beginAtZero', beginAtZero);
        model.setFiltered('chartData_json', JSON.stringify(chartData));
    }

    tsvToObject(tsvString) {
        const lines = tsvString.trim().split('\n');
        const headers = lines[0].split('\t');

        const result = {
            labels: [],
            datasets: []
        };

        // Start from index 1 if headers[0] is empty, indicating the first column is labels
        const headerStartIndex = headers[0] === '' ? 1 : 0;

        for (let i = headerStartIndex; i < headers.length; i++) {
            result.datasets.push({
                label: headers[i],
                data: []
            });
        }

        for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split('\t');
            result.labels.push(values[0]);

            for (let j = 1; j < values.length; j++) {
                const cleanedValue = values[j].replace(/\s+/g, '');
                result.datasets[j - 1].data.push(parseFloat(cleanedValue));
            }
        }

        return result;
    }

    objectToTsv(obj) {
        const headers = [''].concat(obj.datasets.map((dataset) => dataset.label));
        const rows = [headers.join('\t')];

        for (let i = 0; i < obj.labels.length; i++) {
            const row = [obj.labels[i]];
            for (let j = 0; j < obj.datasets.length; j++) {
                row.push(obj.datasets[j].data[i]);
            }
            rows.push(row.join('\t'));
        }

        return rows.join('\n');
    }

    cleanUpAndParseJsonString(response) {
        try {
            // Remove any leading or trailing unwanted characters
            const cleanedResponse = response.trim();

            // Remove the leading '```json' and trailing '```'
            const jsonString = cleanedResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');

            // Parse the cleaned JSON string
            const parsedData = JSON.parse(jsonString);

            return parsedData;
        } catch (error) {
            console.error('Error cleaning or parsing API response:', error.message);
            return null;
        }
    }

    setIfDefined(model, key, value) {
        if (value !== undefined && value !== null) {
            model.set(key, value);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Comments.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Comments.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Comments)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class Comments {

    constructor(api) {
        this.api = api;
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(this.api.v1.config.get('lang'));
        this.sources = {
            disqus_most_popular: {
                source: 'disqus',
                url: `${ lab_api.v1.properties.get('integration_url') }/feed/disqus/?site=${ lab_api.v1.properties.get('site.alias') }&action=popular`,
                name: 'Most commented articles',
                description: ''
            },
            hyvor_most_popular: {
                source: 'hyvor',
                url: `${ lab_api.v1.properties.get('integration_url') }/feed/hyvor/?site=${ lab_api.v1.properties.get('site.alias') }&action=popular`,
                name: 'Most commented articles',
                description: ''
            },
            hyvor_recent: {
                source: 'hyvor',
                url: `${ lab_api.v1.properties.get('integration_url') }/feed/hyvor/?site=${ lab_api.v1.properties.get('site.alias') }&action=recent`,
                name: 'Recent comments',
                description: ''
            }
        };
    }

    getSourceConfig(model, view) {
        /*
        // Example of config
        {
            "contentbox_settings": {
                "comments": {
                    "sources": [
                        {
                            "type": "disqus_most_popular",
                            "name": "Mest kommentert",
                            "description": "bla bla"
                        }
                    ]
                }
            }
        }

        Data that may be defined on the element:
        - fields.source         'disqus_recent_comments', 'disqus_most_popular' (default)
        - fields.limit          '10' (default [1-10])
        - fields.title          The title. Default defined in default config below.
        - fields.description    The description. Default defined in default config below.
        */

        const commentsProviderObj = lab_api.v1.config.get('comments_provider') || {};
        const commentsProvider = Object.keys(commentsProviderObj).shift();

        let defaultSource;
        switch (commentsProvider) {
            case 'hyvor':
                defaultSource = 'hyvor_most_popular';
                break;
            default:
                defaultSource = 'disqus_most_popular';
        }

        const selectedSource = model.get('fields.source') || defaultSource;
        const title = model.get('fields.title');
        const description = model.get('fields.description');
        const limit = Math.min(parseInt(model.get('fields.limit') || '5', 10), 30);

        // (array) Get sources from config. Require value of "type"-attribute of each source to be present in sources defined above.
        const config = (lab_api.v1.config.get('contentbox_settings.comments.sources') || []).filter((item) => this.sources[item.type] !== undefined && this.sources[item.type].source === commentsProvider);
        const isEditMode = lab_api.v1.app.mode.isEditor();

        if (!config.length) {
            Sys.logger.warning(`comments: Missing required config "contentbox_settings.comments.sources". Options (type): ${ Object.keys(this.sources).join(', ') }`);
            if (isEditMode) {
                model.setFiltered('error', 'Missing required source(s).');
            }
            return null;
        }

        // Shallow merge default source-config and config from view:
        const sourceConfig = { ...this.sources[selectedSource], ...config.filter((source) => source.type === selectedSource).pop() };
        sourceConfig.url += `&limit=${ limit }`;

        if (title) {
            sourceConfig.name = title;
        }
        if (description) {
            sourceConfig.description = description;
        }

        return sourceConfig;
    }

    onViewHelper(model, view) {
        const sourceConfig = this.getSourceConfig(model, view);
        if (!sourceConfig) { return; }
        model.setFiltered('url', (sourceConfig.url));
    }

    onRender(model, view) {
        const sourceConfig = this.getSourceConfig(model, view);
        if (!sourceConfig) { return; }
        const isEditMode = lab_api.v1.app.mode.isEditor();
        const commentsProviderObj = lab_api.v1.config.get('comments_provider') || {};
        const commentsProvider = Object.keys(commentsProviderObj).shift();
        const defaultSource = commentsProvider === 'hyvor' ? 'hyvor_most_popular' : 'disqus_most_popular';
        const selectedSource = model.get('fields.source') || defaultSource;
        const maxCharLength = model.get('fields.maxCharLength');
        const limit = Math.min(parseInt(model.get('fields.limit') || '5', 10), 30);
        const external = view.get('external');
        const hasError = external && typeof external === 'string'; // External data is an object. An error from integration-services is a string.

        if (hasError) {
            model.setFiltered('error', 'Error fetching data');
            Sys.logger.warn(`Comments: Error fetching data from url: ${ sourceConfig.url }`);
        } else {
            // Unset previously set error in editor.
            model.setFiltered('error', null);
        }

        const concatenateString = (input) => {
            const str = input || '';
            if (!maxCharLength) {
                return str;
            }
            return `${ str.substring(0, maxCharLength) } ${ str.length > maxCharLength ? '...' : '' }`;
        };

        if (external && !hasError) {
            let data = external;
            if (sourceConfig.type === 'disqus_most_popular') {
                data = external.response.map((item) => ({
                    link: item.link,
                    title: concatenateString(item.title)
                }));
            }
            if (sourceConfig.type === 'hyvor_most_popular') {
                data = external.data.map((item) => ({
                    link: item.url,
                    title: concatenateString(item.title)
                }));
            }
            if (sourceConfig.type === 'hyvor_recent') {
                const itemsConfig = sourceConfig.items || {};
                const dateConfig = itemsConfig.date || {};
                data = external.data.map((item) => {
                    if (!item.page || !item.page.url) {
                        return {};
                    }
                    return {
                        link: `${ item.page.url }?ht-comment-id=${ item.id }`,
                        title: (itemsConfig.titlePrefix || '') + concatenateString(item.page.title),
                        user: item.user ? item.user.name : '',
                        date: this.dateTimeHelper.format(new Date(item.created_at * 1000), dateConfig.template || '')
                    };
                });
            }
            model.setFiltered('data', data);
        }

        // Let template include partial by source ({{ #is_disqus_most_popular}} [template for disqus_most_popular ...] {{ /is_disqus_most_popular}})
        for (const name of Object.keys(this.sources)) {
            model.setFiltered(`is_${ name }`, name === selectedSource);
        }

        model.setFiltered('url', (sourceConfig.url));
        model.setFiltered('source', sourceConfig);

        // Editor
        if (!isEditMode) {
            return;
        }

        const config = (lab_api.v1.config.get('contentbox_settings.comments.sources') || []).filter((item) => this.sources[item.type] !== undefined && this.sources[item.type].source === commentsProvider);
        const sourceList = config.map((source) => ({ name: source.type, selected: source.type === selectedSource }));
        model.setFiltered('sourceList', sourceList);
        model.setFiltered('limit', limit);

    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Factbox.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/Factbox.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Factbox)
/* harmony export */ });
/* harmony import */ var _lib_helpers_ExpandableOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/ExpandableOptions.js */ "./modules/lib/helpers/ExpandableOptions.js");


class Factbox {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        model.setFiltered('options', _lib_helpers_ExpandableOptions_js__WEBPACK_IMPORTED_MODULE_0__.ExpandableOptions.run({
            configPath: 'contentbox_settings.factbox'
        }));

        // Set a flag if no title and bodytext exist
        model.setFiltered('noContent', (lab_api.v1.app.mode.isFront() && !model.get('fields.title') && !model.get('fields.bodytext')));
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/FrontContent.js":
/*!*****************************************************!*\
  !*** ./modules/behaviours/elements/FrontContent.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FrontContent)
/* harmony export */ });
class FrontContent {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const getTagsArray = (m, fallbackArray) => {
            const tags_string = m.get('fields.tags_string') || '';
            const result = tags_string.split(',').map((tag) => tag.trim()).filter((tag) => !!tag);
            if (result.length) {
                return result;
            }
            return fallbackArray.map((richTag) => richTag.tag);
        };

        const getTagsArrayDescription = (tags, descriptions) => {
            const tagDescriptions = {};
            for (const richTag of descriptions) { // { "tag": "ytre-sogn", "description": "Nyheter Ytre Sogn" }
                tagDescriptions[richTag.tag] = richTag.description;
            }
            return tags.map((tag) => ({ tag, description: tagDescriptions[tag] || tag }));
        };

        const config = this.api.v1.config.get('contentbox_settings.frontContent') || {};
        const integrationUrl = this.api.v1.properties.get('integration_url');
        const apiUrl = this.api.v1.properties.get('front_api_url');
        const feeds = Object.values(this.api.v1.config.get('feeds') || {}).filter((feed) => !!feed.labrador_json).map((feed) => ({
            identifier: feed.display_name,
            name: feed.display_name,
            type: feed.url.includes('lab_viewport=json') ? 'DachserJson' : 'LabradorApi',
            url: feed.url.replace('{{int}}', integrationUrl).replace('{{api}}', apiUrl)
        }));
        const sourcesConfig = (config.sources || []).concat(feeds);
        const source = model.get('fields.source'); // identifier
        const sourceObject = { ...(sourcesConfig.filter((item) => item.identifier === source).shift() || {}) };
        const organizer = model.get('fields.organizer');
        const isEditor = this.api.v1.app.mode.isEditor();
        const overrideUrlOption = model.get('fields.overrideUrlByTagsCookie', true);
        const overrideUrlByTagsCookie = overrideUrlOption === undefined ? !!config.overrideUrlByTagsCookie : !!overrideUrlOption;
        const tagsArray = getTagsArray(model, (config.tagsArray || [])); // Prio: 1) field-value, 2) config, 3) Empty array.
        const tagsArrayRich = getTagsArrayDescription(tagsArray, (config.tagsArray || []));
        const articleCountField = model.get('fields.articleCount') || 24;
        const layoutOptions = {
            columnCount: parseFloat(model.get('fields.layout_columnCount') || 3),
            rowCount: parseFloat(model.get('fields.layout_rowCount') || 10),
            maxRowSize: parseFloat(model.get('fields.layout_maxRowSize') || 3),
            minRowSize: parseFloat(model.get('fields.layout_minRowSize') || 1),
            imageAspectRatio: parseFloat(model.get('fields.layout_imageAspectRatio') || 0.45),
            gridsize: parseFloat(model.get('fields.layout_gridsize') || 12),
            hide_items: []
        };
        if (model.get('fields.hide_title')) { layoutOptions.hide_items.push('title'); }
        if (model.get('fields.hide_subtitle')) { layoutOptions.hide_items.push('subtitle'); }
        if (model.get('fields.hide_image')) { layoutOptions.hide_items.push('image'); }
        if (model.get('fields.hide_kicker')) { layoutOptions.hide_items.push('kicker'); }
        const articleFilterList = [];
        if (model.get('fields.filterExisting')) {
            articleFilterList.push({
                path: 'contentdata.id',
                values: this.api.v1.model.query.getModelsByType('article').filter((article) => !!article.get('instance_of')).map((article) => String(article.get('instance_of')))
            });
        }
        const organizersRequiringArticleCount = ['RandomRows'];
        let articleCount = articleCountField;
        if (!organizersRequiringArticleCount.includes(organizer)) {
            articleCount = layoutOptions.columnCount * layoutOptions.rowCount || articleCountField;
        }
        const articleFetchCount = model.get('fields.articleFetchCount') || articleCount;

        model.setFiltered('source', sourceObject);
        model.setFiltered('articleCount', articleCount);
        model.setFiltered('articleFetchCount', articleFetchCount);
        model.setFiltered('articleFilterList', JSON.stringify(articleFilterList));
        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));
        model.setFiltered('isEditor', isEditor);
        model.setFiltered('isConfigured', articleCount && organizer && sourceObject.identifier && sourceObject.url && sourceObject.type);
        model.setFiltered('viewport', this.api.v1.viewport.getName());
        model.setFiltered('imageServer', this.api.v1.properties.get('image_server'));
        model.setFiltered('layout', JSON.stringify(layoutOptions));
        model.setFiltered('cookieOptions', {
            allow: overrideUrlByTagsCookie,
            cookieName: config.cookieName || 'dachserFrontContentTags',
            tagsArray: tagsArrayRich,
            tagsArrayString: JSON.stringify(tagsArrayRich)
        });
        model.setFiltered('tagOptions', {
            allow: !!model.get('fields.tags_allow') && sourceObject.type === 'LabradorApi',
            useOr: !!model.get('fields.tags_useOr'),
            tags: tagsArray,
            tags_string: tagsArray.join(', '),
            tagsString: JSON.stringify(tagsArray)
        });
        const styleKeyVal = [];
        if (model.get('fields.size_active')) {
            if (model.get('fields.size_title')) { styleKeyVal.push({ path: 'contentdata.fields.title.attributes.text_size.value', value: parseInt(model.get('fields.size_title'), 10) }); }
            if (model.get('fields.size_subtitle')) { styleKeyVal.push({ path: 'contentdata.fields.subtitle.attributes.text_size.value', value: parseInt(model.get('fields.size_subtitle'), 10) }); }
            if (model.get('fields.size_kicker')) { styleKeyVal.push({ path: 'contentdata.fields.kicker.attributes.text_size.value', value: parseInt(model.get('fields.size_kicker'), 10) }); }
        }
        model.setFiltered('styleString', JSON.stringify(styleKeyVal));
        // model.setFiltered('styleString', JSON.stringify({
        //     size_active: !!model.get('fields.size_active'),
        //     size_subtitle: parseInt(model.get('fields.size_subtitle'), 10) || null,
        //     size_title: parseInt(model.get('fields.size_title'), 10) || null,
        //     size_kicker: parseInt(model.get('fields.size_kicker'), 10) || null
        // }));

        // Editor:
        if (!isEditor) {
            return;
        }

        // Use proxy to fetch url in editor:
        if (sourceObject.url && sourceObject.type !== 'LPStream') {
            sourceObject.url = `${ this.api.v1.properties.get('proxy') }?query=${ encodeURIComponent(sourceObject.url) }`;
            model.setFiltered('source', sourceObject);
        }
        model.setFiltered('sourcesConfig', sourcesConfig);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Front_rows.js":
/*!***************************************************!*\
  !*** ./modules/behaviours/elements/Front_rows.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FrontRows)
/* harmony export */ });
class FrontRows {

    constructor(api) {
        this.api = api;
    }

    onSettingsPanel() {
        function getPageselector(siteId, pageId) {
            const currentPageId = lab_api.v1.model.query.getRootModel().getId();
            return lab_api.v1.ui.element.getPageSelector({
                value: pageId ? parseInt(pageId, 10) : null,
                siteId: siteId ? parseInt(siteId, 10) : 0,
                attributes: [{ name: 'name', value: 'pageId' }, { name: 'id', value: 'frontrows_pageId' }],
                pages: lab_api.v1.pages.front.getAll().filter((page) => page.nodeid !== currentPageId)
            });
        }
        return {
            onDisplay: ({
                model, view, config, markup
            }) => {
                const data = model.get('fields.fragment_json') || {}; // pageId, siteId, start, count
                const containers = {
                    siteselector: markup.querySelector('[data-element="siteselector"]'),
                    pageselector: markup.querySelector('[data-element="pageselector"]')
                };
                const siteselector = lab_api.v1.ui.element.getSiteSelector({ value: data.siteId ? parseInt(data.siteId, 10) : null, attributes: [{ name: 'name', value: 'siteId' }, { name: 'id', value: 'frontrows_siteId' }] });
                let pageselector = getPageselector(data.siteId || siteselector.value, data.pageId);
                containers.siteselector.appendChild(siteselector);
                containers.pageselector.appendChild(pageselector);
                siteselector.addEventListener('change', (event) => {
                    pageselector.remove();
                    pageselector = getPageselector(siteselector.value);
                    containers.pageselector.appendChild(pageselector);
                }, false);
            },
            onSubmit: ({
                model, view, settings, markup, formValues
            }) => {
                model.resetExternalResource();
                model.set('fields.fragment_json', formValues);
            }
        };
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/GlobalChangelog.js":
/*!********************************************************!*\
  !*** ./modules/behaviours/elements/GlobalChangelog.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlobalChangelog)
/* harmony export */ });
class GlobalChangelog {

    constructor(api) {
        this.api = api;
    }

    onViewHelper(model, view) {
        const siteID = this.api.v1.site.getSite().id;

        model.setFiltered('siteID', siteID);
    }

    onRender(model, view) {
        const rootModel = this.api.v1.model.query.getRootModel();
        const contentLanguage = rootModel.get('filtered.contentLanguage');
        const external = view.get('external');

        const templateData = [];

        if (external && external.result) {
            external.result.forEach((result) => {
                if (result.type === 'article') {
                    let changelog;
                    const changelogRaw = result.lab_changelog_json || null;
                    if (typeof changelogRaw === 'string') {
                        const changelogStripped = this.stripJSON(changelogRaw);
                        if (changelogStripped) {
                            if (this.isValidJSON(changelogStripped)) {
                                changelog = JSON.parse(changelogStripped);
                            }
                        }
                    } else {
                        changelog = changelogRaw;
                    }
                    if (changelog) {
                        changelog.forEach((item) => {
                            const date = new Date(item.time * 1000);
                            item.time = date.toLocaleDateString(contentLanguage);
                            item.changelog = this.convertNewLines(item.changelog);
                        });
                    }
                    templateData.push({
                        title: result.title,
                        published_url: result.published_url,
                        changelog
                    });
                }
            });
        }
        model.setFiltered('templateData', templateData);
    }

    /**
     * Removes escape characters from a JSON string.
     *
     * @param {string} str - The JSON string to be stripped.
     * @returns {string} - The stripped JSON string.
     */
    stripJSON(str) {
        return str.replace(/\\n/g, '\\n')
            .replace(/\\'/g, '\'')
            .replace(/\\"/g, '"')
            .replace(/\\&/g, '&')
            .replace(/\\r/g, '\r')
            .replace(/\\t/g, '\t')
            .replace(/\\b/g, '\b')
            .replace(/\\f/g, '\f');
    }

    /**
     * Checks if a given string is a valid JSON.
     *
     * @param {string} str - The string to be checked.
     * @returns {boolean} - Returns true if the string is a valid JSON, otherwise false.
     */
    isValidJSON(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }

    /**
     * Converts newline characters in a given text to HTML paragraph and line break tags.
     *
     * - Double newlines (`\n\n`) are replaced with `</p><p>`.
     * - Single newlines (`\n`) are replaced with `<br>`.
     * - The entire text is wrapped in `<p>` tags.
     *
     * @param {string} text - The input text containing newline characters.
     * @returns {string} - The converted text with HTML tags.
     */
    convertNewLines(text) {
        text = text.replace(/\\n\\n/g, '</p><p>');
        text = text.replace(/\\n/g, '<br>');
        text = `<p>${ text }</p>`;
        return text;
    }

}

/***/ }),

/***/ "./modules/behaviours/elements/GoogleAd.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/GoogleAd.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GoogleAd)
/* harmony export */ });
class GoogleAd {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const rootModel = this.api.v1.model.query.getRootModel();
        const formatConfig = this.api.v1.config.get('contentbox_settings.googleAd.formats') || [];
        const key = model.get('fields.format');

        const getFormat = (name, formatList) => {
            for (let index = 0; index < formatList.length; index++) {
                if (formatList[index].format === name) {
                    return { ...formatList[index] };
                }
            }
            return {};
        };

        const adEnv = this.api.v1.config.get('adEnvironment') || {};
        const googleAds = {
            bidding: adEnv.bidding,
            hideOnTabletWidth: adEnv.hideOnTabletWidth || 1316,
            fetchMarginPercent: adEnv.fetchMarginPercent || 150,
            renderMarginPercent: adEnv.renderMarginPercent || 150
        };
        model.setFiltered('googleAds', googleAds);

        const format = getFormat(key, formatConfig);
        format.key = model.get('metadata.key') || 'row';

        // Livewrapped special case
        if (googleAds.bidding && googleAds.bidding.enabled && googleAds.bidding.provider && googleAds.bidding.provider.name) {
            if (googleAds.bidding.provider.name === 'livewrapped') {
                const guidGenerator = () => {
                    const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                    return (`${ S4() + S4() }-${ S4() }-${ S4() }-${ S4() }-${ S4() }${ S4() }${ S4() }`);
                };
                if (format.code && format.code.endsWith('-1')) {
                    format.code += `_${  guidGenerator() }`;
                }
            }
        }

        if (format.code === 'mpu_top') {
            format.isMpuTop = true;
        }

        model.setFiltered('adData', format);
        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug') || model.get('metadata.isDebug'));

        const fallbackLabel = this.api.v1.config.get('contentbox_settings.googleAd.label') || 'Annonse';
        const label = model.get('fields.label') || fallbackLabel;
        model.setFiltered('label', label);

        if (!this.api.v1.app.mode.isEditor()) {
            const hideOnTablet = (model.parent && model.parent.get('metadata.hideOnTablet') === true && this.api.v1.properties.get('xUaDevice') === 'tablet');
            model.setFiltered('hideOnTablet', hideOnTablet);
        }

        if (this.api.v1.app.mode.isEditor()) {
            const pageType = rootModel.get('type').replace('page_', '');
            const filteredKeys = [];
            formatConfig.forEach((item) => {
                if (item.selectable && item.selectable.indexOf(pageType) > -1) {
                    filteredKeys.push(item);
                } else if (item.selectableOn && item.selectableOn[pageType] === true) {
                    filteredKeys.push(item);
                }
            });
            model.setFiltered('formatConfigKeys', filteredKeys);
        }

        const isSticky = (model.get('metadata.css') || '').includes('sticky'); // Check if css string contains sticky keyword.
        if (isSticky) {
            const spacingTop = this.api.v1.config.get('contentbox_settings.googleAd.spacingTop') || 120;
            const spacingTopStyle = `top: ${ spacingTop }px;`;
            model.setFiltered('spacingTop', spacingTopStyle);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/GoogleCSE.js":
/*!**************************************************!*\
  !*** ./modules/behaviours/elements/GoogleCSE.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GoogleCSE)
/* harmony export */ });
class GoogleCSE {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        model.setFiltered('cse_id', model.get('fields.cse_id') || this.api.v1.config.get('contentbox_settings.googleCSE.cse_id'));
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Graphic.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/Graphic.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Image)
/* harmony export */ });
/* harmony import */ var _lib_helpers_LazyloadHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/LazyloadHelper.js */ "./modules/lib/helpers/LazyloadHelper.js");


class Image {

    // Common instance for all image-elements on page
    constructor(api) {
        this.api = api;
        this.lazyloadHelper = new _lib_helpers_LazyloadHelper_js__WEBPACK_IMPORTED_MODULE_0__.LazyloadHelper(api);
    }

    // (void) Element is about to be rendered.
    onRender(model, view) {
        model.setFiltered('lazyloadImages', this.lazyloadHelper.check(model, view));
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Grid.js":
/*!*********************************************!*\
  !*** ./modules/behaviours/elements/Grid.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Grid)
/* harmony export */ });
class Grid {

    constructor(api) {
        this.api = api;
        this.sizes = {
            large: {
                columns: 3,
                rows: 4
            },
            small: {
                columns: 2,
                rows: 1
            }
        };
        this.smallElementTypes = ['article'];
        this.isEditor = this.api.v1.app.mode.isEditor();
        this.removedChildren = [];
    }

    onCreated(model) {
        if (model.getChildren().length) {
            return;
        }
        const size = this.getSize(model);
        for (let i = 0; i < size.columns * size.rows; i++) {
            this.createAndInsert(model);
        }
    }

    onInserted(model) {
        if (!this.isEditor) {
            return;
        }
        this.api.v1.model.bindings.bind(model, 'fields.columnCount', this.sizeUpdated.bind(this));
        this.api.v1.model.bindings.bind(model, 'fields.rowCount', this.sizeUpdated.bind(this));
        this.api.v1.model.bindings.bind(model, 'fields.columnCountMobile', this.sizeUpdated.bind(this));
    }

    // Update width of added child:
    onChildAdded(model, child) {
        if (!model.parent) {
            return;
        }
        const size = this.getSize(model);
        this.updateSize(size, child);
    }

    updateSize(size, model) {
        model.setWidth(size.width.desktop, {
            viewport: 'desktop'
        });
        model.setWidth(size.width.mobile, {
            viewport: 'mobile'
        });
    }

    onSettingsPanel(theModel, theView, theConfig) {
        return {
            onWillDisplay: ({
                model, view, config, template
            }) => {
                this.removedChildren = [];
                model.setFiltered('size', this.getSize(model));
            }
        };
    }

    getSize(model) {
        const size = this.getGridCount(model);
        const columnCountMobile = model.get('fields.columnCountMobile') || 1;
        const widthMobile = parseFloat((100 / columnCountMobile).toFixed(2));
        return {
            columns: size.columns,
            columnsMobile: columnCountMobile,
            rows: size.rows,
            width: {
                desktop: parseFloat((100 / size.columns).toFixed(2)),
                mobile: widthMobile
            }
        };
    }

    getGridCount(model) {
        const isSmallElementType = model.parent ? this.smallElementTypes.includes(model.parent.get('type')) : false;
        const defaults = isSmallElementType ? this.sizes.small : this.sizes.large;
        const columnCount = model.get('fields.columnCount') || defaults.columns;
        const rowCount = model.get('fields.rowCount') || defaults.rows;
        return {
            columns: parseInt(columnCount, 10),
            rows: parseInt(rowCount, 10)
        };
    }

    sizeUpdated(model) {
        const size = this.getSize(model);
        const children = model.getChildren();
        for (const child of children) {
            this.updateSize(size, child);
        }
        // Remove extra children:
        if (children.length > size.columns * size.rows) {
            children.slice(size.columns * size.rows).forEach((child) => {
                this.api.v1.model.delete(child);
                if (child.get('instance_of')) {
                    this.removedChildren.push(child);
                }
            });
        }
        // Add missing children:
        if (children.length < size.columns * size.rows) {
            for (let i = children.length; i < size.columns * size.rows; i++) {
                this.createAndInsert(model, this.removedChildren.shift());
            }
        }
    }

    createAndInsert(model, source) {
        if (source) {
            this.api.v1.model.addChild(model, lab_api.v1.model.copy(source));
        } else {
            this.api.v1.model.create.internal({
                type: 'image',
                contentdata: {
                    type: 'image',
                    fields: {}
                }
            }, model, true, false);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Image.js":
/*!**********************************************!*\
  !*** ./modules/behaviours/elements/Image.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Image)
/* harmony export */ });
/* harmony import */ var _lib_helpers_LazyloadHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/LazyloadHelper.js */ "./modules/lib/helpers/LazyloadHelper.js");


class Image {

    // Common instance for all image-elements on page
    constructor(api) {
        this.api = api;
        this.lazyloadHelper = new _lib_helpers_LazyloadHelper_js__WEBPACK_IMPORTED_MODULE_0__.LazyloadHelper(api);
        if (this.api.v1.app.mode.isEditor()) {
            this.cropIds = [];
            this.rootModel = this.api.v1.model.query.getRootModel();
            this.frontcropBinding = this.frontCropChanged.bind(this);
            this.api.v1.model.bindings.bind(this.rootModel, 'frontCrop', this.frontcropBinding);
            this.frontcropBinding(this.rootModel, 'frontCrop', this.rootModel.get('frontCrop'));

            // Preview image-filters:
            this.api.v1.ns.set('imageFilter.preview', this.prepareVisualFilters);
        }
        this.isFragmentMode = this.api.v1.app.mode.isFragmentMode();
    }

    // View-helper is about to run, it may use filtered data.
    // Method-order: 1) onViewHelper, 2) ViewHelper, 3) onRender
    onViewHelper(model, view) {
        if (model.parent) {
            this.prepareForSlideshow(model, view);
            const viewport = view.getViewport();
            const parentView = this.api.v1.view.getView(model.parent, viewport);
            if (parentView.get('metadata.hasFullWidth')) {
                const width = viewport === 'mobile' ? 600 : 1800;
                model.setFiltered(`width.${ viewport }`, width);
            } else {
                model.setFiltered(`width.${ viewport }`, null);
            }
            model.setFiltered('allowFullwidth', model.parent.getType() !== 'image');
        }
    }

    // (void) Element is about to be rendered.
    // All data and parent/child-relationships are ready.
    onRender(model, view) {
        this.setVisualFilters(model, view);
        model.setFiltered('lazyloadImages', this.lazyloadHelper.check(model, view));
        this.setCaptionOptions(model.getParent(), model, view);

        // Aligned images must set a pixel width in the template. Check if image is aligned
        // Note: In Lab3 the key 'floatNone' is used to unset alignment.
        const float = view.get('fields.float');
        model.setFiltered('hasFloat', !!float && float !== 'floatNone');
    }

    // (void) Element has been rendered
    onRendered(model, view) {

        if (!this.api.v1.app.mode.isEditor() || !this.cropIds.length) {
            return;
        }
        const id = parseInt(model.get('instance_of'), 10);
        if (!this.cropIds.includes(id)) {
            return;
        }
        this.markFrontCrop(view, id);
    }

    setVisualFilters(model, view) {
        model.setFiltered('filters', this.prepareVisualFilters(model, view));
    }

    prepareVisualFilters(model, view, returnObject = false) {
        const filters = [];
        const blur = model.get('metadata.filter_blur_active') ? model.get('metadata.filter_blur_value') || 0 : null;
        const sepia = model.get('metadata.filter_sepia_active') ? model.get('metadata.filter_sepia_value') || 0 : null;
        const saturate = model.get('metadata.filter_saturate_active') ? model.get('metadata.filter_saturate_value') || 1 : null;
        const brightness = model.get('metadata.filter_brightness_active') ? model.get('metadata.filter_brightness_value') || 1 : null;
        const contrast = model.get('metadata.filter_contrast_active') ? model.get('metadata.filter_contrast_value') || 1 : null;
        if (blur !== null) { filters.push(`blur(${ blur }px)`); }                    // blur(4px), 0 is no change
        if (sepia !== null) { filters.push(`sepia(${ sepia })`); }                   // sepia(0.8), 0 is no change
        if (saturate !== null) { filters.push(`saturate(${ saturate })`); }          // saturate(2), 1 is no change
        if (brightness !== null) { filters.push(`brightness(${ brightness })`); }    // brightness(3), 1 is no change
        if (contrast !== null) { filters.push(`contrast(${ contrast })`); }          // contrast(1.5), 1 is no change
        if (returnObject) {
            return {
                filter: filters.join(' ')
            };
        }
        return filters.length ? `filter: ${ filters.join(' ') };` : null;
    }

    // (void) Add a label to the markup of the image-element
    markFrontCrop(view, id) {
        const el = document.createElement('span');
        el.classList.add('labicon-imgFrontCrop', 'is-frontcrop');
        el.setAttribute('title', 'Image used as front crop. Click to edit');
        el.addEventListener('click', (event) => {
            event.stopPropagation();
            event.preventDefault();
            this.api.v1.apps.start('ArticleSettings');
        }, false);
        view.getMarkup().appendChild(el);
    }

    frontCropChanged(model, path, cropData) {
        // Remove frontcrop-label from images using the old crop-ids:
        let models = this.getImages(this.cropIds);
        this.cropIds = [];
        this.updateImages(models);

        if (!cropData) { return; }
        if (cropData.pano && cropData.pano.instance_of) {
            this.cropIds.push(cropData.pano.instance_of);
        }
        if (cropData.height && cropData.height.instance_of && !this.cropIds.includes(cropData.height.instance_of)) {
            this.cropIds.push(cropData.height.instance_of);
        }
        // Add frontcrop-label to images using the new crop-ids:
        models = this.getImages(this.cropIds);
        this.updateImages(models);
    }

    // (array) Get images using a front-crop
    getImages(ids) {
        const models = [];
        for (const id of ids) {
            models.push(...this.api.v1.model.query.getModelsByKeyAndValue('instance_of', id));
        }
        return models;
    }

    // (void) Trigger a redraw of models to remove/add the frontcrop-label
    updateImages(models) {
        for (const model of models) {
            this.api.v1.model.addToRedrawQueue(model);
        }
    }

    setCaptionOptions(parent, model, view) {
        const parentView = parent ? this.api.v1.view.getView(parent, view.getViewport()) : null;
        const hasPath = (parentModel, childModel, path) => {
            if (parentModel) {
                const value = parentModel.get(path);
                if (!value && value !== null) { // If parent has value false, 0 etc.: hide
                    return false;
                }
                if (value) { return true; }
            }
            return !!childModel.get(path);
        };
        let display = hasPath(parentView, view, 'fields.displayCaption');
        let displayDefault = display || (view.get('fields.displayCaption') === null && !view.get('metadata.hidecaption'));
        if (this.api.v1.app.mode.isFront() && (!model.get('fields.imageCaption') && !model.get('fields.byline'))) {
            display = false;
            displayDefault = false;
        }
        const expandable = hasPath(parentView, view, `fields.expandableCaption`);
        const truncate = hasPath(parentView, view, `fields.truncateCaption`);
        let title = model.get('fields.imageCaption');
        if (model.parent && (!view.getProperty('image.useCaptionForTitle') || !title)) {
            title = model.parent.get('fields.title') || '';
        }
        const captionOptions = {
            title,
            display,
            displayDefault,
            truncate,
            expandable: expandable || truncate
        };
        model.setFiltered('captionOptions', captionOptions);
    }

    prepareForSlideshow(model, view) {
        if (!model.parent || model.parent.getType() !== 'slideshow') {
            return;
        }
        if (view.get('fields.whRatio')) {
            model.setFiltered('whRatio', null);
            return;
        }

        const originalWidth = model.get('fields.originalWidth');
        const originalHeight = model.get('fields.originalHeight');
        if (originalHeight && originalWidth) {
            const whRatio = originalHeight / originalWidth;
            model.setFiltered('whRatio', whRatio);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/JWPlayer.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/JWPlayer.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JWPlayer)
/* harmony export */ });
class JWPlayer {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onRender(model, view) {

        // Display caption on article-pages:
        let displayCaption = this.api.v1.model.root.getType() === 'page_article';
        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption')) {
            displayCaption = false;
        }
        model.setFiltered('displayCaption', displayCaption);

        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {
            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');
            const jwplayerConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'jwplayer')[0];

            if (jwplayerConsent) {
                model.setFiltered('requiredCookieConsent', jwplayerConsent.requiredConsent || false);
                model.setFiltered('insufficientConsentMessage', jwplayerConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');
            }
        }
    }

    onRendered(model, view) {
        if (this.isEditor) {
            // The iframe from jwplayer.com/embed captures events on the element of the iframe disabling drag/drop in the editor.
            // Disable pointer-events when hovering the drag-handle.
            const iframe = view.getMarkup().querySelector('iframe');
            const dragHandle = view.getMarkup().querySelector('.jwplayer-drag-handle');
            if (iframe && dragHandle) {
                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);
                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);
            }
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/LabradorSearch.js":
/*!*******************************************************!*\
  !*** ./modules/behaviours/elements/LabradorSearch.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LabradorSearch)
/* harmony export */ });
/* eslint no-param-reassign: ["error", { "props": false }] */

class LabradorSearch {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const siteList = lab_api.v1.properties.get('sites');
        const sites = [];
        const allowedSites = model.get('fields.allowedSites_json') || {};
        const allowedSitesList = [];

        siteList.forEach((site) => {
            const siteData = {
                alias: site.alias,
                id: site.id,
                displayName: site.display_name,
                selected: false
            };

            sites.push(siteData);

            if (allowedSites[site.alias] === `${ site.id }`) {
                siteData.selected = true;
                allowedSitesList.push(siteData);
            }
        });

        if (allowedSitesList.length === 0) {
            const currentSite = lab_api.v1.properties.get('site');
            sites.forEach((site) => {
                if (site.id === currentSite.id) {
                    site.selected = true;
                    allowedSitesList.push(site);
                }
            });
        }

        const orderBy = view.get('fields.orderBy') || 'published';
        const orderByOptions = [
            {
                value: 'published',
                label: 'Published'
            },
            {
                value: 'score',
                label: 'Score'
            }
        ];
        orderByOptions.forEach((item) => {
            if (orderBy && orderBy === item.value) {
                item.selected = true;
            }
        });

        // Todo: Add filtered.desktopWidth to new method returned in behavior onSettingsPanel ...
        const desktopWidth = parseInt(model.get('fields.desktopWidth') || 100, 10);
        model.setFiltered('desktopWidth', [100, 50, 33, 25].map((width) => ({ key: width, value: width, selected: width === desktopWidth })));
        model.setFiltered('desktopWidth', [{
            key: '100% - 1 column',
            value: 100,
            selected: desktopWidth === 100
        }, {
            key: '50% - 2 columns',
            value: 50,
            selected: desktopWidth === 50
        }, {
            key: '33% - 3 columns',
            value: 33,
            selected: desktopWidth === 33
        }, {
            key: '25% - 4 columns',
            value: 25,
            selected: desktopWidth === 25
        }]);

        model.setFiltered('sites', sites);
        model.setFiltered('allowedSites', allowedSitesList);
        model.setFiltered('allowedSitesString', JSON.stringify(allowedSitesList || []));
        model.setFiltered('orderByOptions', orderByOptions);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/LiveFeed.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/LiveFeed.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LiveFeed)
/* harmony export */ });
class LiveFeed {

    constructor(api) {
        this.api = api;
        this.baseApiUrl = this.api.v1.properties.get('front_api_url');
        this.siteId = this.api.v1.properties.get('site.id');
        this.cache = new Map();
        this.defaultMaxCount = 100;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onPrepareViewHelper(model, view) {
        const site = model.get('fields.site') || this.siteId;
        const maxNoticesCount = view.get('fields.maxNoticesCount') || this.defaultMaxCount;
        const tags = (model.get('fields.tags') || '').toLowerCase().split(',').filter((tag) => tag !== '');
        const preparedTags = this.prepareTags(tags);
        const query = this.prepareQuery(preparedTags, false);
        const clientQuery = this.prepareQuery(preparedTags, true);
        const url = `${ this.baseApiUrl }/notice?content=full&site_id=${ site }&limit=${ maxNoticesCount }`;
        model.setFiltered('query', query);
        model.setFiltered('clientQuery', clientQuery);
        model.setFiltered('url', url);
    }

    onReady(model, view) {
        const external = view.get('external');
        const noFetch = model.get('filtered.noFetch') || false;
        const blacklist = model.get('metadata.blacklist') || [];
        const maxNoticesCount = view.get('fields.maxNoticesCount') || this.defaultMaxCount;
        if (!noFetch && external) {
            model.setFiltered('noFetch', true);
            const pinneNotices = model.get('fields.pinnedNotices_json') || [];

            let items = external.result;
            if (this.api.v1.app.mode.isEditor()) {
                const children = this.api.v1.model.query.getModelsByType('notice', model.children);
                for (const child of children) {
                    this.api.v1.model.delete(child, true, true);
                }
            }
            items = items.slice(0, maxNoticesCount);

            items.forEach((item) => {
                const { attribute = {}, field = {} } = item.notice;
                if (blacklist.includes(parseInt(attribute.id || 0, 10))) {
                    Sys.logger.warn(`Notice with id ${ attribute.id } is blacklisted from Livefeed and will not be displayed.`);
                    return;
                }

                // For an empty bodytext the API may return an object...
                // https://publishlab.atlassian.net/browse/FS-2081
                if (typeof field.bodytext === 'object') {
                    field.bodytext = '';
                }
                const {
                    title, bodytext, published, modified, published_url, userName
                } = field;
                const children = [];
                if (item.notice.children && item.notice.children.image) {
                    const images = Array.isArray(item.notice.children.image) ? item.notice.children.image : [item.notice.children.image];
                    for (const image of images) {
                        let metadata = {};
                        if (field.structure_json && image.attribute.id) {
                            try {
                                const structureData = JSON.parse(field.structure_json);
                                for (const itm of structureData) {
                                    if (itm.type === 'bodytext') {
                                        const structure = this.getStructure(itm.children || [], image.attribute.id);
                                        metadata = structure ? structure.metadata : {};
                                        break;
                                    }
                                }
                            } catch (e) {
                                Sys.logger.warn(`Failed to parse structure data: ${ e.toString() }`);
                            }
                        }
                        // Disable fullwidth inside the feed
                        metadata.hasFullWidth = {
                            desktop: false,
                            mobile: false
                        };
                        children.push(this.getImageData(image, metadata || {}));
                    }
                }

                this.api.v1.model.insert.atPath({
                    path: model.getPositionedPath(),
                    data: {
                        type: 'notice',
                        contentdata: {
                            id: attribute.id,
                            fields: {
                                title,
                                bodytext,
                                published,
                                modified,
                                published_url,
                                userName,
                                pinned: pinneNotices.includes(attribute.id)
                            },
                            // Note 'tag' can be a string with one tag or an array of multiple tags
                            tags: item.notice.tag ? item.notice.tag.tag : ''
                        },
                        state: {
                            isNonPersistent: true,
                            editNonPersistent: true
                        },
                        children
                    },
                    options: {
                        silent: true,
                        index: pinneNotices.includes(attribute.id) ? 0 : undefined
                    }
                });
            });

            // Sort notices by pinned status and id
            model.children.sort((a, b) => {
                if (pinneNotices.includes(a.getId())) {
                    return -1;
                }
                if (pinneNotices.includes(b.getId())) {
                    return 1;
                }
                return b.getId() - a.getId();
            });

            if (this.api.v1.app.mode.isEditor()) {
                this.api.v1.model.addToRedrawQueue(model, true);
                this.api.v1.app.save();
            }
        }
        // All numbers are in seconds
        const updateFrequency = this.api.v1.config.get('contentbox_settings.livefeed.updateFrequency') || [{
            range: [0, 600],
            interval: 10
        }, {
            range: [600, 1200],
            interval: 30
        }, {
            range: [1200],
            interval: 60
        }];
        model.setFiltered('updateFrequency', JSON.stringify(updateFrequency));
    }

    onRender(model, view) {
        const placeholder = view.get('fields.placeholder');
        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));
        model.setFiltered('initialRenderTime', (new Date()).getTime());
        model.setFiltered('dateStrings', JSON.stringify({
            now: this.api.v1.locale.get('dates.now', { noRender: true }),
            monthdayyear: this.api.v1.locale.get('dates.monthdayyear', { noRender: true }),
            hourminute: this.api.v1.locale.get('dates.hourminute', { noRender: true }),
            durationSince: this.api.v1.locale.get('dates.durationSince', { noRender: true }),
            minute: this.api.v1.locale.get('dates.minute', { noRender: true }),
            minutes: this.api.v1.locale.get('dates.minutes', { noRender: true }),
            hour: this.api.v1.locale.get('dates.hour', { noRender: true }),
            hours: this.api.v1.locale.get('dates.hours', { noRender: true }),
            day: this.api.v1.locale.get('dates.day', { noRender: true }),
            days: this.api.v1.locale.get('dates.days', { noRender: true }),
            ago: this.api.v1.locale.get('dates.ago', { noRender: true })
        }));
    }

    onChildAdded(model, child) {
        if (!this.isEditor) {
            return;
        }
        if (child.getType() !== 'notice') {
            // Other content added. Make sure it is placed below pinned notices.
            // (After a new fetch this is handled anyway, but not right away)
            if (model.children.indexOf(child) > 0) {
                return; // Recursion. Already in correct position
            }
            const pinned = this.api.v1.model.query.getModelsByType('notice', model.children).filter((notice) => notice.get('fields.pinned'));
            if (!pinned.length) {
                return;
            }
            let index = 0;
            for (const m of pinned) {
                if (model.children.indexOf(m) > index) {
                    index = model.children.indexOf(m);
                }
            }
            if (index > 0) {
                this.api.v1.model.addChild(model, child, index, false);
            }
        }
    }

    prepareQuery(preparedTags, isClientRendering = false) {
        const query = isClientRendering ? ['(visibility_status:P OR visibility_status:H)'] : ['visibility_status:P'];
        if (preparedTags.length > 0) {
            query.push(`(${ preparedTags.join(` OR `) })`);
        }

        return `&query=${ encodeURIComponent(query.join(' AND ')) }`;
    }

    prepareTags(list) {
        return list.map((tag) => {
            let modifiedTag = tag.trim();
            if (modifiedTag.indexOf(' ') > -1) {
                modifiedTag = `"${ modifiedTag }"`;
            }
            return `tag:${ modifiedTag }`;
        });
    }

    // Transform from API-format to view format
    getImageData(apiImage, meta) {
        return this.api.v1.model.serialize.apiToView({ type: 'image', data: apiImage, meta });
    }

    onSettingsPanel(model, view, settings) {
        const elements = {
            layout: null,
            container: null
        };
        return {
            onDisplay: ({
                model, view, config, markup, modal
            }) => {
                elements.layout = markup.querySelector('#layout');
                elements.container = markup.querySelector('.horizontalOptions');
                if (elements.layout && elements.container) {
                    elements.layout.addEventListener('change', (event) => {
                        if (elements.layout.value === '1') {
                            elements.container.classList.remove('lab-hidden');
                        } else {
                            elements.container.classList.add('lab-hidden');
                        }
                    });
                }
            },
            onHide: ({
                model, view, config, markup, modal
            }) => {
                elements.layout = null;
                elements.container = null;
                // Reset filtered.noFetch to allow updating notices in the editor in case tag changes.
                model.setFiltered('noFetch', false);
            }
        };
    }

    getStructure(items, imageId) {
        for (const item of items) {
            // Note: Use == instead of === to allow for type conversion
            // eslint-disable-next-line eqeqeq
            if (item.type === 'image' && item.node_id == imageId) {
                return item;
            }
            if (item.children) {
                const structure = this.getStructure(item.children, imageId);
                if (structure) {
                    if (structure.metadata && !structure.metadata.bodyTextIndex && item.metadata && item.metadata.bodyTextIndex) {
                        structure.metadata.bodyTextIndex = item.metadata.bodyTextIndex;
                    }
                    return structure;
                }
            }
        }
        return null;
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Markup.js":
/*!***********************************************!*\
  !*** ./modules/behaviours/elements/Markup.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Markup)
/* harmony export */ });
/* harmony import */ var _lib_helpers_Movable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/Movable.js */ "./modules/lib/helpers/Movable.js");
/* harmony import */ var _lib_editor_MarkupValidator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/editor/MarkupValidator.js */ "./modules/lib/editor/MarkupValidator.js");



class Markup {

    constructor(api) {
        this.api = api;
        this.validation = {
            suggestedMarkup: null,
            isUnvalid: false,
            error: ''
        };
    }

    // (void) Element is about to be rendered.
    // All data and parent/child-relationships are ready.
    onRender(model, view) {
        if (view.get('metadata.movableContent')) {
            model.setFiltered('movableStyle', _lib_helpers_Movable_js__WEBPACK_IMPORTED_MODULE_0__.Movable.createStyle(model, 'metadata.contentPosition', ['desktop', 'mobile']));
        }

        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {
            model.setFiltered('requiredCookieConsent', view.get('metadata.requiredCookieConsent') || false);

            // Escape closing script tags
            let markup = view.get('fields.markup') || '';
            markup = markup.replace(/<\/script>/g, '<\\/script>');
            model.setFiltered('markup_escaped', markup);
        }
    }

    // When opening the settings-panel to insert HTML:
    // - Focus the input element
    // - Allow tab-key to insert 4 spaces instead of setting focus to the next dom-element
    onSettingsPanel(model, view, settings) {
        return {
            onDisplay: (params) => {
                const textarea = params.markup.querySelector('textarea');
                if (!textarea) { return; }
                const doValidateBtn = params.markup.querySelector('input[name="doValidate"]');
                if (doValidateBtn) {
                    doValidateBtn.addEventListener('change', (event) => {
                        model.set('fields.skipValidation', event.target.checked ? null : true);
                    }, false);
                    doValidateBtn.checked = !model.get('fields.skipValidation');
                }
                textarea.value = view.get('fields.markup');
                if (this.validation.suggestedMarkup) {
                    textarea.value = this.validation.suggestedMarkup;
                    const msg = document.createElement('p');
                    if (this.validation.isUnvalid) {
                        msg.innerHTML = `<span style="color: red;">Markup is invalid. Please correct the markup and try again.</span><br>${ this.validation.error }`;
                    } else {
                        msg.innerHTML = 'Validator has modified markup. Please review the suggested markup below.';
                    }
                    textarea.before(msg);
                    this.validation.suggestedMarkup = null;
                    this.validation.isUnvalid = false;
                    this.validation.error = '';
                }
                params.markup.querySelector('textarea').focus();
                textarea.addEventListener('keydown', (event) => {
                    if (event.key === 'Tab') {
                        event.preventDefault();
                        const [start, end] = [textarea.selectionStart, textarea.selectionEnd];
                        textarea.setRangeText('    ', start, end, 'end');
                    }
                }, false);
            },
            onSubmit: ({
                model, view, config, markup, modal, formValues
            }) => {
                if (!formValues.doValidate) {
                    view.set('fields.markup', formValues['fields.markup']);
                    return;
                }
                const markupValidator = new _lib_editor_MarkupValidator_js__WEBPACK_IMPORTED_MODULE_1__.MarkupValidator();
                markupValidator.validate(formValues['fields.markup']).then((validatedMarkup) => {
                    if (formValues['fields.markup'].trim() !== validatedMarkup) {
                        // Validator has modified markup
                        this.validation.suggestedMarkup = validatedMarkup;
                        this.validation.isUnvalid = false;
                        const panelConfig = { ...config };
                        panelConfig.defaultButtons = false;
                        panelConfig.container.state.warning = true;
                        this.api.v1.ui.modal.panel(model, view, panelConfig);
                        return;
                    }
                    view.set('fields.markup', validatedMarkup);
                }).catch((error) => {
                    this.validation.suggestedMarkup = formValues['fields.markup'];
                    this.validation.isUnvalid = true;
                    this.validation.error = error.message;
                    const panelConfig = { ...config };
                    panelConfig.defaultButtons = false;
                    panelConfig.container.state.error = true;
                    this.api.v1.ui.modal.panel(model, view, panelConfig);
                });
            }
        };
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Mobiltests.js":
/*!***************************************************!*\
  !*** ./modules/behaviours/elements/Mobiltests.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MobilTests)
/* harmony export */ });
class MobilTests {

    constructor(api, params) {
        this.api = api;
        this.rootModel = api.v1.model.query.getRootModel();
    }

    // Prepare url for external data
    onViewHelper(model, view) {
        const site = this.api.v1.site.getSite();
        model.setFiltered('siteId', site.id);
        model.setFiltered('testId', model.get('fields.testId'));

        const layoutOptionsMap = {
            0: 'Score + pros/cons',
            1: 'Score + pros/cons + specs',
            2: 'Score + specs',
            3: 'Pros/cons + specs',
            4: 'Score',
            5: 'Pros/cons',
            6: 'Specs'
        };
        const layoutOption = model.get('fields.layoutOption') || '0';

        const visible = {
            score: (layoutOption === '0' || layoutOption === '1' || layoutOption === '2' || layoutOption === '4'),
            prosCons: (layoutOption === '0' || layoutOption === '1' || layoutOption === '3' || layoutOption === '5'),
            specs: (layoutOption === '1' || layoutOption === '2' || layoutOption === '3' || layoutOption === '6')
        };
        model.setFiltered('visible', visible);

        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));
        const layoutOptions = [];
        for (const element of Object.keys(layoutOptionsMap)) {
            layoutOptions.push({
                key: element,
                value: layoutOptionsMap[element],
                selected: element === layoutOption
            });
        }

        model.setFiltered('layoutOptions', layoutOptions);
        model.setFiltered('apiEndpoint', layoutOptionsMap[layoutOption]);
        model.setFiltered('topScore', model.get('fields.topScore') === 'on');
        model.setFiltered('recommended', model.get('fields.recommended') === 'on');
        model.setFiltered('titleWithGrade', model.get('fields.titleWithGrade') === 'on');
        model.setFiltered('titleWithFacts', model.get('fields.titleWithFacts') === 'on');

        if (this.api.v1.app.mode.isEditor()) {
            const scoreOptions = [];
            let score = model.get('fields.score') || '0';
            score = parseInt(score, 10);
            for (let i = 1; i < 11; i++) {
                scoreOptions.push({ value: i, selected: (score === i ? 'selected' : '') });
            }
            model.setFiltered('scoreOptions', scoreOptions);
        }
    }

    // External data-elements are run twice in Labrador. On second run we have external data
    onRender(model, view) {
        const externalData = view.get('external');
        if (!externalData) return;

        model.setFiltered('productName', externalData.namn ? externalData.namn : '');
        model.setFiltered('pros', externalData.plus ? externalData.plus : []);
        model.setFiltered('cons', externalData.minus ? externalData.minus : []);
        model.setFiltered('structuredData', externalData.struktureradData ? JSON.stringify(externalData.struktureradData) : '');

        const betygArray = [];

        if (externalData.betyg && externalData.betyg.length) {
            externalData.betyg.forEach(item => {
                let score = false;
                let scoreIsPercent = false;
                let percent = false;

                if (item.v) {
                    score = item.v;
                    if (parseInt(item.v, 10) < 11) { // TODO: Needs flag for percent score
                        percent = `${ item.v }0`;
                    } else {
                        percent = item.v;
                        scoreIsPercent = true;
                    }
                }

                betygArray.push({
                    key: item.n,
                    score,
                    scoreIsPercent,
                    percent
                });
            });
        }

        model.setFiltered('score', betygArray);

        // This previously overwrote the recommended and topScore filtered values that is set manually by not checking/using the model.fields value if no external data is available
        // Should work like this, but I don't know if this breaks import stuff?
        model.setFiltered('recommended', externalData.braköp === 'Ja' ? true : model.get('fields.recommended') === 'on');
        model.setFiltered('topScore', externalData.toppbetyg === 'Ja' ? true : model.get('fields.topScore') === 'on');

        model.setFiltered('specifications', externalData.spec ? externalData.spec : []);
    }

    onSettingsPanel(model) {
        this.model = model;
        return {
            onDisplay: (params) => {
                this.api.v1.apps.start('TextEdit').then((textTool) => {
                    this.setupRichTextEditing(textTool, params.markup, this.model);
                }).catch((error) => {
                    console.log(`Error loading TextEdit-app: ${error}`);
                });
            }
        };
    }

    setupRichTextEditing(textTool, markup, model) {
        for (const element of markup.querySelectorAll('div.lab-input-text')) {
            if (element && element instanceof HTMLElement) {
                const key = element.getAttribute('data-input-key') || 'no-key';
                this.setupRichTextEditingForElement(textTool, markup, element, key, model);
            }
        }
    }

    setupRichTextEditingForElement(textTool, markup, element, key, model) {
        const contentdata = {};
        lab_api.v1.util.object.set(key, model.get(key), contentdata);
        textTool.register({
            element,
            simulatedData: {
                type: 'article',
                path: '',
                contentdata
            },
            toolSettings: {
                key,
                inlineOnly: true,
                displayCharCount: false,
                displaySelectionLength: false,
                displayWordCount: false,
                selectTextOnStart: false,
                placeholder: '',
                attributes: {
                    text_size: {
                        active: false
                    }
                }
            },
            callbacks: {
                ended: (theKey, theValue) => {
                    this.model.set(theKey, theValue);
                }
            },
            menuSettings: {
                container: markup,
                items: {
                    bold: {
                        group: 'g2',
                        icon: 'labicon-text_bold',
                        callback: 'toggleAttribute',
                        key: 'font_weight',
                        attributes: {
                            class: 'font-weight-bold'
                        },
                        value: false,
                        onValue: 'font-weight-bold',
                        offValue: false,
                        bindToSelection: 'font_weight',
                        title: 'Font weight - Bold',
                        hotkeys: [{
                            key: 'B',
                            controlkeys: ['labCtrlKey'],
                            preventDefault: true,
                            overrideDisable: true
                        }]
                    },
                    italic: {
                        group: 'g2',
                        icon: 'labicon-text_italic',
                        callback: 'toggleAttribute',
                        key: 'italic',
                        attributes: {
                            class: 'italic'
                        },
                        value: false,
                        onValue: 'italic',
                        offValue: false,
                        bindToSelection: 'italic',
                        title: 'Italic',
                        hotkeys: [{
                            key: 'i',
                            controlkeys: ['labCtrlKey'],
                            preventDefault: true,
                            overrideDisable: true
                        }]
                    },
                    reset: {
                        group: 'g4',
                        icon: 'labicon-reset_style',
                        callback: 'reset',
                        title: 'Remove textformatting in selection for viewport'
                    }
                }
            }
        });
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Motortests.js":
/*!***************************************************!*\
  !*** ./modules/behaviours/elements/Motortests.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Motortests)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class Motortests {

    constructor(api) {
        this.api = api;
    }

    // Prepare url for external data
    onViewHelper(model, view) {
        const site = this.api.v1.site.getSite();
        model.setFiltered('siteId', site.id);
        model.setFiltered('testId', model.get('fields.testId'));
        const testTypeMap = {
            summerTire: 'tiresummertests',
            winterTire: 'tirewintertests',
            food: 'foodtests',
            hotel: 'hoteltests',
            vehicle: 'vehicletests'
        };
        const testType = model.get('fields.testType') || 'vehicle';
        const displayDirection = model.get('fields.displayDirection') === 'horizontal' ? 'horizontal' : 'vertical';
        model.setFiltered('displayDirection', displayDirection);
        model.setFiltered('displayDirectionOptions', [
            {
                value: 'horizontal',
                selected: displayDirection === 'horizontal'
            },
            {
                value: 'vertical',
                selected: displayDirection === 'vertical'
            }
        ]);
        model.setFiltered('needSlider', displayDirection === 'horizontal');
        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));
        const typeOptions = [];
        for (const testName of Object.keys(testTypeMap)) {
            typeOptions.push({
                value: testName,
                selected: testName === testType
            });
        }
        model.setFiltered('typeOptions', typeOptions);
        model.setFiltered('apiEndpoint', testTypeMap[testType]);
    }

    // External data-elements are run twice in Labrador. On second run we have external data
    onRender(model, view) {
        const externalData = view.get('external');
        if (!externalData) return;
        const testType = model.get('fields.testType') || 'vehicle';
        const categoryMap = {
            vehicle: {
                comfort: 'Komfort',
                design: 'Design',
                driveability: 'Kjøreegenskaper',
                environment: 'Miljø og forbruk',
                equipment: 'Utstyr',
                practicality: 'Praktisk',
                price: 'Pris',
                runningCosts: 'Driftskostnader',
                security: 'Sikkerhet',
                value: 'Annenhåndsverdi'
            },
            food: {
                firstImpression: 'Førsteinntrykk',
                menu: 'Meny',
                taste: 'Smak',
                price: 'Pris',
                service: 'Service',
                familyFriendly: 'Barnevennlig',
                homemade: 'Hjemmelaget',
                drinks: 'Drikke',
                cleaning: 'Renhold',
                lavatories: 'Toaletter'

            },
            hotel: {
                location: 'Beliggenhet',
                rooms: 'Rom',
                standard: 'Standard',
                beds: 'Senger',
                breakfast: 'Frokost',
                bathroom: 'Bad',
                commonAreas: 'Fellesområder',
                cleaning: 'Renhold',
                value: 'Valuta for pengene'
            },
            summerTire: {
                asphalt: 'Tørr asfalt',
                asphaltWet: 'Våt asfalt',
                grip: 'Grep',
                breaking: 'Bremselengde',
                driveability: 'Kjøreegenskaper',
                aquaplaning: 'Vannplaning',
                aquaplaningSwing: 'Vannplaning sving',
                comfort: 'Komfort',
                fuelConsumption: 'Forbruk',
                noise: 'Støy',
                other: 'Annet'
            },
            winterTire: {
                snow: 'Snø',
                ice: 'Is',
                asphalt: 'Tørr asfalt',
                asphaltWet: 'Våt asfalt',
                breaking: 'Bremselengde',
                driveability: 'Kjøreegenskaper',
                aquaplaning: 'Vannplaning',
                aquaplaningSwing: 'Vannplaning sving',
                comfort: 'Komfort',
                fuelConsumption: 'Forbruk',
                noise: 'Støy',
                grip: 'Grep',
                acceleration: 'Akselerasjon',
                other: 'Annet',
                spikes: 'Pigger',
                count: 'Antall',
                spikeLengthBefore: 'Piggutstikk etter innkjøring (mm)',
                spikeLengthAfter: 'Piggutstikk etter snø/istest (mm)',
                weightKg: 'Vekt',
                installationDescription: 'Montering'
            }
        };
        const mappedCategories = [];
        if (testType.indexOf('Tire') > 0) {
            const dateHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(this.api.v1.config.get('lang'));
            const date = new  Date(externalData.production.date);
            const dateString = Number.isNaN(date.getTime()) ? externalData.production.date : dateHelper.formattedDate(date, 'd/m Y');
            let winterTire = '';
            if (testType === 'winterTire') {
                winterTire = `<span class="test-key-value"><span class="test-key">Pigger:</span><span class="test-value">${ (externalData.spikes && externalData.spikes.isSpikes) ? externalData.spikes.count : 'nei' }</span></span>`;
            }
            if (externalData.description && typeof externalData.description === 'string') {
                externalData.description = externalData.description.replace(/\n/g, '<br>');
            }
            mappedCategories.push({
                title: 'Fakta',
                description: `
                    <span class="test-key-value"><span class="test-key">Produksjonsland:</span><span class="test-value">${ externalData.production.country || '' }</span></span>
                    <span class="test-key-value"><span class="test-key">Produksjonsdato:</span><span class="test-value">${ dateString || '' }</span></span>
                    ${ winterTire }
                    <p>${ externalData.description || '' }</p>
                `
            });
            externalData.description = '';
            if (externalData.loadSpeedRating && externalData.loadSpeedRating.length) {
                externalData.description += `<span class="test-key-value"><span class="test-key">Last- og hastighetsindeks:</span><span class="test-value">${ externalData.loadSpeedRating }</span></span>`;
            }
            if (externalData.shore && externalData.shore.length) {
                externalData.description += `<span class="test-key-value"><span class="test-key">Hardhetstall</span><span class="test-value">${ externalData.shore }</span></span>`;
            }
            if (externalData.installationDescription && externalData.installationDescription.length) {
                externalData.description += `<span class="test-key-value"><span class="test-key">Montering:</span><span class="test-value">${ externalData.installationDescription }</span></span>`;
            }

            Object.keys(categoryMap[testType]).forEach((key) => {
                if (externalData[key] && (typeof externalData[key] === 'object' && Array.isArray(Object.keys(externalData[key])) && Object.keys(externalData[key]).length > 0)) {
                    if (key === 'spikes' && !externalData.spikes.isSpikes) {
                        return;
                    }
                    let subDescription = '';
                    Object.keys(externalData[key]).forEach((subKey) => {
                        if (externalData[key][subKey] > 0 && categoryMap[testType][subKey]) {
                            subDescription += `<span class="test-key-value"><span class="test-key">${ categoryMap[testType][subKey] }:</span><span class="test-value">${ externalData[key][subKey] }</span></span> `;
                        }
                    });

                    mappedCategories.push({
                        title: categoryMap[testType][key],
                        description: subDescription
                    });
                }
            });
        } else {
            Object.keys(categoryMap[testType]).forEach((key) => {
                if (externalData[key]) {
                    const tmpObj = {
                        title: categoryMap[testType][key],
                        score: externalData[key].score,
                        description: externalData[key].description
                    };
                    mappedCategories.push(tmpObj);
                }
            });
        }
        model.setFiltered('testSubject', externalData.name ? externalData.name : null);
        model.setFiltered('totalScore', externalData.score ? externalData.score : null);
        model.setFiltered('introduction', externalData.description ? externalData.description : null);
        model.setFiltered('mappedCategories', mappedCategories);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Newsletter_submit.js":
/*!**********************************************************!*\
  !*** ./modules/behaviours/elements/Newsletter_submit.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Newsletter_submit)
/* harmony export */ });
class Newsletter_submit {

    constructor(api) {
        this.api = api;
        this.signupText = api.v1.locale.get('newsletter.generic.signup');
        this.yourEmailText = api.v1.locale.get('newsletter.generic.yourEmail');
        this.subscribeButton = api.v1.locale.get('newsletter.generic.subscribeButton');
        this.hiddenValue = api.v1.locale.get('newsletter.generic.hiddenValue');
    }

    onRender(model, view) {
        const config = this.api.v1.config.get('contentbox_settings.newsletter_submit') || {};
        const fieldAction = model.get('fields.newsletterDataAction') || (config.action === "MAILMOJO_LENKE" ? '' : config.action) || '';
        const fieldTitle = model.get('fields.newsletterDataTitle');
        const fieldDescription = model.get('fields.newsletterDataDescription');
        const fieldButtonText = model.get('fields.newsletterButtonText') || this.subscribeButton;
        const fieldPlaceholder = model.get('fields.newsletterPlaceholder') || this.yourEmailText;

        const obj = {
            provider: config.provider ? config.provider : 'mailmojo',
            title: fieldTitle || (config.title ? config.title : this.signupText),
            description: fieldDescription || config.description || '',
            action: fieldAction,
            buttonText: fieldButtonText,
            placeholder: fieldPlaceholder,
            elements: config.elements ? config.elements : [
                {
                    type: 'hidden',
                    name: 'tagsadditional',
                    value: this.hiddenValue,
                    class: '',
                    placeholder: ''
                },
                {
                    type: 'email',
                    name: 'email',
                    value: '',
                    class: '',
                    placeholder: fieldPlaceholder
                },
                {
                    type: 'submit',
                    name: 'submit',
                    value: fieldButtonText,
                    class: 'bg-secondary',
                    placeholder: ''
                }
            ]
        };

        if (this.api.v1.app.mode.isFront() && !obj.action) {
            model.setFiltered('newsletter_data', null);
        } else {
            model.setFiltered('newsletter_data', obj);
        }
    }
}



/***/ }),

/***/ "./modules/behaviours/elements/Notice.js":
/*!***********************************************!*\
  !*** ./modules/behaviours/elements/Notice.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Notice)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelperInt.js */ "./modules/lib/helpers/datetime/DateTimeHelperInt.js");


class Notice {

    constructor(api) {
        this.api = api;
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelperInt();
    }

    onRender(model, view) {
        const timestamp = model.get('fields.modified') || model.get('fields.published');
        if (timestamp != null) {
            const date = new Date(timestamp * 1000);
            model.setFiltered('niceDate', this.dateTimeHelper.timestampToNiceDate(timestamp));
            model.setFiltered('publishedDate', this.dateTimeHelper.utcFormat(date, `${ this.api.v1.locale.get('dates.monthdayyear', { noRender: true }) } ${ this.api.v1.locale.get('dates.hourminute', { noRender: true }) }`));
            model.setFiltered('isoDate', date.toISOString());
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/NoticeHeader.js":
/*!*****************************************************!*\
  !*** ./modules/behaviours/elements/NoticeHeader.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoticeHeader)
/* harmony export */ });
class NoticeHeader {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onRendered(model, view) {
        if (!this.isEditor) {
            return;
        }
        const tags = [...model.get('tags')];
        const container = view.getMarkup().querySelector('.tags');
        for (const tag of tags) {
            const el = container.querySelector(`[data-tag="${ tag }"]`);
            if (el) {
                this.setupTag(model, el, tag);
            }
        }
        const addBtn = document.createElement('span');
        addBtn.classList.add('labicon-pluss_slim', 'add-tag');
        addBtn.setAttribute('title', 'Add tag');
        container.appendChild(addBtn);
        addBtn.addEventListener('click', async(e) => {
            e.preventDefault();
            let modal = null;
            const tagsContainer = await this.api.v1.util.tags.ui({
                callbacks: {
                    change: (tagsList) => {
                        if (modal) {
                            // Backend sorts tags alphabetically.
                            // Do the same here to avoid confusion.
                            const sortedTags = tagsList.sort();
                            modal.getMarkup().querySelector('#hidden_tags_input').value = sortedTags.join(', ');
                        }
                    }
                },
                tags
            });
            modal = this.api.v1.ui.modal.dialog({
                container: {
                    width: 500
                },
                placeholders: [
                    {
                        selector: '#placeholder-tags',
                        element: tagsContainer
                    }
                ],
                content: {
                    title: 'Edit tags',
                    formgroups: [
                        {
                            elements: [
                                {
                                    label: 'Selected tags. Click a tag to remove. <br>Use input field below to add new tags.',
                                    inline: true,
                                    tag: 'input',
                                    attributes: [
                                        {
                                            name: 'type',
                                            value: 'hidden'
                                        },
                                        {
                                            name: 'name',
                                            value: 'tag'
                                        },
                                        {
                                            name: 'id',
                                            value: 'hidden_tags_input'
                                        },
                                        {
                                            name: 'value',
                                            value: tags.join(', ')
                                        }
                                    ]
                                },
                                {
                                    grid: 12,
                                    placeholder: 'placeholder-tags'
                                },
                                {
                                    // Create space below for tag suggestions
                                    grid: 12,
                                    tag: 'p',
                                    value: '<br><br><br><br><br>'
                                }
                            ]
                        }
                    ]
                },
                callbacks: {
                    didDisplay: (theModal) => {
                        theModal.getMarkup().querySelector('input[name="tag"]').focus();
                    },
                    submit: (formElements) => {
                        const allTags = formElements.tag.trim().toLowerCase().split(',').map((t) => t.trim())
                            .filter((t) => t.length > 0);
                        if (allTags.length) {
                            model.set('tags', allTags);
                        }
                    }
                },
                eventHandlers: [{
                    selector: '#tag-cancel',
                    event: 'click',
                    callback: (theModal, event) => {
                        theModal.close();
                    }
                }],
                keyValidation: [{
                    key: 'tag',
                    validator: 'notEmpty'
                }],
                footer: {
                    buttons: [
                        {
                            value: 'Cancel',
                            highlight: false,
                            id: 'tag-cancel'
                        },
                        {
                            value: 'Save tags',
                            type: 'submit',
                            highlight: true
                        }
                    ]
                }
            });
        });
    }

    setupTag(model, element, tag) {
        element.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('Tag clicked: ', tag);
            model.set('tags', [...model.get('tags').filter((t) => t !== tag)]);
        });
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Parallax.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Parallax.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Parallax)
/* harmony export */ });
class Parallax {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const totalGridSize = this.api.v1.config.get('grid.total_grid_spans');
        const layers = [];
        let requireJs = false;

        model.getChildren().forEach((child, index) => {
            const animations = [];
            const supportedAnimations = ['scale', 'rotate', 'opacity', 'blur', 'sepia', 'brightness']; // , 'position.x'
            const staticAttributes = [];
            const supportedStaticAttributes = ['perspective'];
            const childView = this.api.v1.view.getView(child, view.getViewport());
            const data = childView.get('metadata.parallax') || {};
            supportedAnimations.forEach((animationName) => {
                const settings = data[animationName] || {};
                if (settings.active) {
                    requireJs = true;
                    animations.push(JSON.stringify({
                        name: animationName.replace('.', '_'),
                        startValue: settings.startValue || 0,
                        endValue: settings.endValue || 100,
                        startScrollPosition: settings.startScrollPosition || 0,
                        endScrollPosition: settings.endScrollPosition || 100
                    }));
                }
            });
            supportedStaticAttributes.forEach((attributeName) => {
                const settings = data[attributeName] || {};
                if (settings.active) {
                    requireJs = true;
                    staticAttributes.push(JSON.stringify({
                        name: attributeName,
                        value: settings.value || 0
                    }));
                }
            });

            const css = [
                this.api.v1.style.getStyle(child, childView, 'background_color'),
                this.api.v1.style.getStyle(child, childView, 'background_opacity')
            ];

            layers.push({
                index,
                type: child.getType(),
                sticky: !!data.sticky,
                fullwidth: !!data.fullwidth,
                height: data.height || '100',
                spaceBelow: data.spaceBelow || '0',
                position: data.position,
                horizontalAlign: data.horizontalAlign,
                verticalAlign: data.verticalAlign || 'top',
                verticalPosition: data.verticalPosition || 'auto',
                css: css.join(' '),
                grid: {
                    desktop: this.api.v1.grid.percentToGrid(childView.get('width', false, 'desktop'), totalGridSize),
                    mobile: this.api.v1.grid.percentToGrid(childView.get('width', false, 'mobile'), totalGridSize)
                },
                selector: `[data-parallax-layer="${ index }"]`,
                hasAnimations: animations.length > 0 || staticAttributes.length > 0,
                animations,
                staticAttributes
            });
        });

        model.setFiltered('layers', layers);
        model.setFiltered('elementCount', model.children.length);
        model.setFiltered('requireJs', requireJs);
        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));

        if (!this.api.v1.app.mode.isEditor()) {
            return;
        }
        model.setFiltered('displayNoContent', layers.length === 0);
        model.setFiltered('useReflow', true);

        // Display a list of supported elements:
        const supportedContentTypes = Object.keys(view.getProperty('droppable.drop.sourceType') || {});
        model.setFiltered('supportedContentTypes', supportedContentTypes);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/RemoteProduction.js":
/*!*********************************************************!*\
  !*** ./modules/behaviours/elements/RemoteProduction.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RemoteProduction)
/* harmony export */ });
class RemoteProduction {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onRender(model, view) {

        // Display caption on article-pages:
        let displayCaption = this.api.v1.model.root.getType() === 'page_article';
        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption')) {
            displayCaption = false;
        }
        model.setFiltered('displayCaption', displayCaption);

        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {
            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');
            const remoteProductionConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'remoteproduction')[0];

            if (remoteProductionConsent) {
                model.setFiltered('requiredCookieConsent', remoteProductionConsent.requiredConsent || false);
                model.setFiltered('insufficientConsentMessage', remoteProductionConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');
            }
        }
    }

    onRendered(model, view) {
        if (this.isEditor) {
            // The iframe from remote production player captures events on the element of the iframe disabling drag/drop in the editor.
            // Disable pointer-events when hovering the drag-handle.
            const iframe = view.getMarkup().querySelector('iframe');
            const dragHandle = view.getMarkup().querySelector('.remoteproduction-drag-handle');
            if (iframe && dragHandle) {
                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);
                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);
            }
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Row.js":
/*!********************************************!*\
  !*** ./modules/behaviours/elements/Row.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Markup)
/* harmony export */ });
/* harmony import */ var _lib_helpers_Movable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/Movable.js */ "./modules/lib/helpers/Movable.js");


class Markup {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onInserted(model) {
        if (!this.isEditor) {
            const dateString = model.get('metadata.visibleAfterDate');
            if (dateString) {
                const date = this.stringToDate(dateString);
                if (date) {
                    const now = new Date().getTime();
                    if (date.getTime() > now) {
                        Sys.logger.debug(`[Baseview] The path 'metadata.visibleAfterDate' ('${ dateString }') has prevented the row '${ model.getPositionedPath() }' from rendering`);
                        this.api.v1.model.noRender(model);
                    }
                }
            }
        }
    }

    onChildAdded(model, child) {
        this.updateFutureFlag(model);
    }

    onChildRemoved(model, child) {
        this.updateFutureFlag(model);
    }

    onRender(model, view) {
        if (!this.isEditor && !model.hasNodeData(true)) {
            this.api.v1.model.noRender(model);
            return;
        }
        if (view.get('metadata.movableContent')) {
            model.setFiltered('movableStyle', _lib_helpers_Movable_js__WEBPACK_IMPORTED_MODULE_0__.Movable.createStyle(model, 'metadata.contentPosition', ['desktop', 'mobile']));
        }
        if (!this.isEditor) {
            return;
        }
        const dateString = model.get('metadata.visibleAfterDate');
        if (dateString) {
            const date = this.stringToDate(dateString);
            if (date) {
                const now = new Date().getTime();
                if (date.getTime() > now) {
                    view.addCssStates(['hidden-on-front', 'has-date-restriction']);
                }
                date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
                model.setFiltered('visibleAfterDate', date.toISOString().slice(0, 16));
            }
        } else if (model.get('filtered.visibleAfterDate')) {
            view.resetCssState();
            model.setFiltered('visibleAfterDate', null);
        }
    }

    onSettingsPanel() {
        return {
            onSubmit: ({
                model, formValues
            }) => {
                for (const view of this.api.v1.view.getViews(model)) {
                    view.resetCssState();
                }
                const date = this.stringToDate(formValues['metadata.visibleAfterDate']); // "2023-06-08T10:44"
                let value;
                if (date) {
                    value = date.toISOString(); // '2023-06-08T08:44:00.000Z'
                } else {
                    model.setFiltered('visibleAfterDate', null);
                    value = null;
                }
                model.set('metadata.visibleAfterDate', value);
            }
        };
    }

    stringToDate(dateString) {
        const date = new Date(dateString || '');
        if (date instanceof Date && Number.isFinite(date.getTime())) {
            return date;
        }
        return null;
    }

    // Check if any child has a future publish date and update the row publish date (metadata.visibleAfterDate) if needed
    updateFutureFlag(model) {
        const currentVisibleAfterDate = model.get('metadata.visibleAfterDate');
        const hasDate = !!currentVisibleAfterDate;
        let visibleAfterDate = null;
        for (const child of model.getChildren()) {
            const published = child.get('fields.published');
            if (published) {
                const date = new Date(published).getTime();
                if (date > new Date().getTime()) {
                    if (date > visibleAfterDate) {
                        visibleAfterDate = date;
                    }
                }
            }
        }
        if (visibleAfterDate) {
            model.set('metadata.visibleAfterDate', new Date(visibleAfterDate).toISOString());
            this.api.v1.model.highlight.message(model, `Publish-date updated for row`);
            Sys.logger.debug(`[Baseview] The row '${ model.getPositionedPath() }' has set publish date to '${ new Date(visibleAfterDate).toISOString() }'.`);
        } else if (hasDate) {
            model.set('metadata.visibleAfterDate', null);
            this.api.v1.model.highlight.message(model, `Publish-date removed for row`);
            Sys.logger.debug(`[Baseview] The row '${ model.getPositionedPath() }' has removed publish date.`);
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Scrollbox.js":
/*!**************************************************!*\
  !*** ./modules/behaviours/elements/Scrollbox.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scrollbox)
/* harmony export */ });
class Scrollbox {

    constructor(api) {
        this.api = api;
    }

    // Update data for added article-teaser.
    // Replaces Lab 3 CMS-feature for config 'dataForAddedChild': 'contentbox_settings.scrollbox.dataForAddedChild'
    onChildAdded(model, child) {
        if (child.getType() !== 'article') {
            return;
        }
        // {
        //     "metadata": {
        //         "floatingTitle": true,
        //         ...
        //     },
        //     "contentdata": {
        //         "fields.displayByline": false
        //     },
        //     "children": {
        //         "image": {
        //             "contentdata": {
        //                 "fields.whRatio": {
        //                     "value": "1.2",
        //                     "vp": {
        //                         "mobile": "0.8"
        //                     }
        //                 },
        //                 "fields.bbRatio": "0.4"
        //             }
        //         }
        //     }
        // }
        const setValues = (m, obj, fieldPrefix) => {
            if (!obj) { return; }
            for (const key of Object.keys(obj)) {
                if (!key.includes('viewports_json')) { // Lab3-config may include paths like 'fields.viewports_json.mobile.fields.whRatio'
                    if (obj[key] && typeof obj[key] === 'object') {
                        m.setRaw((fieldPrefix || '') + key, obj[key]);
                    } else {
                        m.set((fieldPrefix || '') + key, obj[key]);
                    }
                }
            }
        };
        setValues(child, this.api.v1.config.get('contentbox_settings.scrollbox.dataForAddedChild.article.metadata'), 'metadata.');
        setValues(child, this.api.v1.config.get('contentbox_settings.scrollbox.dataForAddedChild.article.contentdata'));
        if (child.children.length && child.children[0].getType() === 'image') {
            const image = child.children[0];
            setValues(image, this.api.v1.config.get('contentbox_settings.scrollbox.dataForAddedChild.article.children.image.contentdata'));
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Simplestream.js":
/*!*****************************************************!*\
  !*** ./modules/behaviours/elements/Simplestream.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Simplestream)
/* harmony export */ });
class Simplestream {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        if (this.api.v1.model.query.getRootModel().getType() === 'page_article') {
            if (this.api.v1.app.mode.isFront() && !model.get('fields.caption')) {
                model.setFiltered('displayCaption', false);
            } else {
                model.setFiltered('displayCaption', true);
            }
        }

        var MD5 = function (d) { var r = M(V(Y(X(d), 8 * d.length))); return r.toLowerCase() }; function M(d) { for (var _, m = "0123456789ABCDEF", f = "", r = 0; r < d.length; r++)_ = d.charCodeAt(r), f += m.charAt(_ >>> 4 & 15) + m.charAt(15 & _); return f } function X(d) { for (var _ = Array(d.length >> 2), m = 0; m < _.length; m++)_[m] = 0; for (m = 0; m < 8 * d.length; m += 8)_[m >> 5] |= (255 & d.charCodeAt(m / 8)) << m % 32; return _ } function V(d) { for (var _ = "", m = 0; m < 32 * d.length; m += 8)_ += String.fromCharCode(d[m >> 5] >>> m % 32 & 255); return _ } function Y(d, _) { d[_ >> 5] |= 128 << _ % 32, d[14 + (_ + 64 >>> 9 << 4)] = _; for (var m = 1732584193, f = -271733879, r = -1732584194, i = 271733878, n = 0; n < d.length; n += 16) { var h = m, t = f, g = r, e = i; f = md5_ii(f = md5_ii(f = md5_ii(f = md5_ii(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_ff(f = md5_ff(f = md5_ff(f = md5_ff(f, r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 0], 7, -680876936), f, r, d[n + 1], 12, -389564586), m, f, d[n + 2], 17, 606105819), i, m, d[n + 3], 22, -1044525330), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 4], 7, -176418897), f, r, d[n + 5], 12, 1200080426), m, f, d[n + 6], 17, -1473231341), i, m, d[n + 7], 22, -45705983), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 8], 7, 1770035416), f, r, d[n + 9], 12, -1958414417), m, f, d[n + 10], 17, -42063), i, m, d[n + 11], 22, -1990404162), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 12], 7, 1804603682), f, r, d[n + 13], 12, -40341101), m, f, d[n + 14], 17, -1502002290), i, m, d[n + 15], 22, 1236535329), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 1], 5, -165796510), f, r, d[n + 6], 9, -1069501632), m, f, d[n + 11], 14, 643717713), i, m, d[n + 0], 20, -373897302), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 5], 5, -701558691), f, r, d[n + 10], 9, 38016083), m, f, d[n + 15], 14, -660478335), i, m, d[n + 4], 20, -405537848), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 9], 5, 568446438), f, r, d[n + 14], 9, -1019803690), m, f, d[n + 3], 14, -187363961), i, m, d[n + 8], 20, 1163531501), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 13], 5, -1444681467), f, r, d[n + 2], 9, -51403784), m, f, d[n + 7], 14, 1735328473), i, m, d[n + 12], 20, -1926607734), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 5], 4, -378558), f, r, d[n + 8], 11, -2022574463), m, f, d[n + 11], 16, 1839030562), i, m, d[n + 14], 23, -35309556), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 1], 4, -1530992060), f, r, d[n + 4], 11, 1272893353), m, f, d[n + 7], 16, -155497632), i, m, d[n + 10], 23, -1094730640), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 13], 4, 681279174), f, r, d[n + 0], 11, -358537222), m, f, d[n + 3], 16, -722521979), i, m, d[n + 6], 23, 76029189), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 9], 4, -640364487), f, r, d[n + 12], 11, -421815835), m, f, d[n + 15], 16, 530742520), i, m, d[n + 2], 23, -995338651), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 0], 6, -198630844), f, r, d[n + 7], 10, 1126891415), m, f, d[n + 14], 15, -1416354905), i, m, d[n + 5], 21, -57434055), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 12], 6, 1700485571), f, r, d[n + 3], 10, -1894986606), m, f, d[n + 10], 15, -1051523), i, m, d[n + 1], 21, -2054922799), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 8], 6, 1873313359), f, r, d[n + 15], 10, -30611744), m, f, d[n + 6], 15, -1560198380), i, m, d[n + 13], 21, 1309151649), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 4], 6, -145523070), f, r, d[n + 11], 10, -1120210379), m, f, d[n + 2], 15, 718787259), i, m, d[n + 9], 21, -343485551), m = safe_add(m, h), f = safe_add(f, t), r = safe_add(r, g), i = safe_add(i, e) } return Array(m, f, r, i) } function md5_cmn(d, _, m, f, r, i) { return safe_add(bit_rol(safe_add(safe_add(_, d), safe_add(f, i)), r), m) } function md5_ff(d, _, m, f, r, i, n) { return md5_cmn(_ & m | ~_ & f, d, _, r, i, n) } function md5_gg(d, _, m, f, r, i, n) { return md5_cmn(_ & f | m & ~f, d, _, r, i, n) } function md5_hh(d, _, m, f, r, i, n) { return md5_cmn(_ ^ m ^ f, d, _, r, i, n) } function md5_ii(d, _, m, f, r, i, n) { return md5_cmn(m ^ (_ | ~f), d, _, r, i, n) } function safe_add(d, _) { var m = (65535 & d) + (65535 & _); return (d >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m } function bit_rol(d, _) { return d << _ | d >>> 32 - _ }

        const uvid = model.get('fields.uvid');
        let expire = new Date();
        expire.setHours(expire.getHours() + 4);
        expire = Math.floor(expire.getTime() / 1000);
        const privateAPIKey = 'boqCnvdBXwZTAaa7tMvKkte3MqaufjIZ';
        model.setFiltered('dataAttributes', {
            type: model.get('fields.videoType') || 'vod',
            id: model.get('fields.idString') || 'GB001',
            token: MD5(`${ uvid }${ expire }${ privateAPIKey }`),
            expire
        });
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Slideshow.js":
/*!**************************************************!*\
  !*** ./modules/behaviours/elements/Slideshow.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Slideshow)
/* harmony export */ });
class Slideshow {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        // Set aspect ratio of images in the slideshow.
        // Prio: 1: data, 2: element-property, 3: config, 4: Hard-coded value
        const customAspectRatio = view.get('fields.aspectRatio') || view.getProperty('image.defaultAspectRatio') || this.api.v1.config.get('image.defaultAspectRatio') || 0.5;
        model.setFiltered('aspectRatio', customAspectRatio * 100);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Tablebox.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Tablebox.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tablebox)
/* harmony export */ });
/* harmony import */ var _lib_helpers_TableFormatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/TableFormatter.js */ "./modules/lib/helpers/TableFormatter.js");


class Tablebox {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const data = model.get('fields.tabledata');
        const header = model.get('fields.tableheader');
        const headerSort = model.get('fields.tableheadersort');
        if ((typeof data === 'undefined' || data === null || data.length === 0) && this.api.v1.app.mode.isEditor()) {
            model.setFiltered('missingData', 'Missing Data');
            return;
        }
        const table = _lib_helpers_TableFormatter_js__WEBPACK_IMPORTED_MODULE_0__.TableFormatter.tsvStringToTable(data);
        const processedTable = _lib_helpers_TableFormatter_js__WEBPACK_IMPORTED_MODULE_0__.TableFormatter.tableToTemplateBody(table); // Get table object
        model.setFiltered('missingData', false);
        model.setFiltered('tabledata', _lib_helpers_TableFormatter_js__WEBPACK_IMPORTED_MODULE_0__.TableFormatter.tableToTSVString(table)); // Set edit-field
        model.setFiltered('header', header ? _lib_helpers_TableFormatter_js__WEBPACK_IMPORTED_MODULE_0__.TableFormatter.templateTableBodyToHeader(processedTable, headerSort) : null);
        model.setFiltered('table', processedTable);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Tagboard.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Tagboard.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tagboard)
/* harmony export */ });
class Tagboard {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const config = this.api.v1.config.get('contentbox_settings.tagboard') || {};
        const isEditor = this.api.v1.app.mode.isEditor();
        const getTagGroups = (tagGroupsConf = {}) => {
            const result = [];
            const tagStringToArray = (tags = '') => tags.split(',').map((t) => t.trim().toLowerCase()).filter((t) => !!t);
            for (let index = 1; index <= 3; index++) {
                if (tagGroupsConf[`tagGroup${ index }_tags`]) {
                    result.push({
                        label: tagGroupsConf[`tagGroup${ index }_label`],
                        tags: tagStringToArray(tagGroupsConf[`tagGroup${ index }_tags`])
                    });
                }
            }
            return result;
        };
        // Tags for end-user to select:
        const tagGroupsObject = {
            tagGroup1_label: model.get('fields.tagGroup1_label') || '',
            tagGroup1_tags: model.get('fields.tagGroup1_tags') || '',
            tagGroup2_label: model.get('fields.tagGroup2_label') || '',
            tagGroup2_tags: model.get('fields.tagGroup2_tags') || '',
            tagGroup3_label: model.get('fields.tagGroup3_label') || '',
            tagGroup3_tags: model.get('fields.tagGroup3_tags') || ''
        };
        const tagGroups = getTagGroups(tagGroupsObject);
        if (!tagGroups.length || !Array.isArray(tagGroups)) {
            Sys.logger.warning('tagboard: Missing required config "contentbox_settings.tagboard.tagGroups" (array). End user will not be able to filter results.');
        }
        let tagsGroupsDefaultVisible = model.get('fields.tagsGroupsDefaultVisible');
        if (tagsGroupsDefaultVisible === null) {
            tagsGroupsDefaultVisible = this.api.v1.config.get('contentbox_settings.tagboard.tagsOptions.tagsGroupsDefaultVisible');
        }

        let hideHitsPerTag = model.get('fields.hideHitsPerTag');
        if (hideHitsPerTag === null) {
            hideHitsPerTag = this.api.v1.config.get('contentbox_settings.tagboard.tagsOptions.hideHitsPerTag');
        }

        let tagGroupInRows = model.get('fields.tagGroupInRows');
        if (tagGroupInRows === null) {
            tagGroupInRows = this.api.v1.config.get('contentbox_settings.tagboard.tagsOptions.tagGroupInRows');
        }

        let overrideUrlOption = model.get('fields.overrideUrlByTagsCookie');
        if (overrideUrlOption === null) {
            overrideUrlOption = this.api.v1.config.get('contentbox_settings.tagboard.cookieOptions.allow');
        }

        const tagArrayGroups = tagGroups.map((group) => group.tags);
        const tagsArray = [].concat(...tagArrayGroups);

        const integrationUrl = this.api.v1.properties.get('integration_url');
        const apiUrl = this.api.v1.properties.get('front_api_url');
        const feeds = Object.values(this.api.v1.config.get('feeds') || {}).filter((feed) => !!feed.labrador_json).map((feed) => ({
            identifier: feed.display_name,
            name: feed.display_name,
            type: feed.url.includes('lab_viewport=json') ? 'DachserJson' : 'LabradorApi',
            url: feed.url.replace('{{int}}', integrationUrl).replace('{{api}}', apiUrl)
        }));
        const sourcesConfig = (config.sources || []).concat(feeds);
        const source = model.get('fields.source'); // identifier
        const sourceObject = { ...(sourcesConfig.filter((item) => item.identifier === source).shift() || {}) };
        const organizer = model.get('fields.organizer');
        const layoutOptions = {
            columnCount: parseFloat(model.get('fields.layout_columnCount') || 3),
            rowCount: parseFloat(model.get('fields.layout_rowCount') || 10),
            maxRowSize: parseFloat(model.get('fields.layout_maxRowSize') || 3),
            minRowSize: parseFloat(model.get('fields.layout_minRowSize') || 1),
            imageAspectRatio: parseFloat(model.get('fields.layout_imageAspectRatio') || 0.45),
            gridsize: parseFloat(model.get('fields.layout_gridsize') || 12),
            hide_items: []
        };
        if (model.get('fields.hide_title')) { layoutOptions.hide_items.push('title'); }
        if (model.get('fields.hide_subtitle')) { layoutOptions.hide_items.push('subtitle'); }
        if (model.get('fields.hide_image')) { layoutOptions.hide_items.push('image'); }
        if (model.get('fields.hide_kicker')) { layoutOptions.hide_items.push('kicker'); }

        const articleCountField = model.get('fields.articleCount') || 24;
        const organizersRequiringArticleCount = ['RandomRows'];
        let articleCount = articleCountField;
        if (!organizersRequiringArticleCount.includes(organizer)) {
            articleCount = layoutOptions.columnCount * layoutOptions.rowCount || articleCountField;
        }
        const articleFetchCount = model.get('fields.articleFetchCount') || articleCount;

        const articleFilterList = [];
        if (model.get('fields.filterExisting')) {
            articleFilterList.push({
                path: 'contentdata.id',
                values: this.api.v1.model.query.getModelsByType('article').filter((article) => !!article.get('instance_of')).map((article) => String(article.get('instance_of')))
            });
        }
        model.setFiltered('articleCount', articleCount);
        model.setFiltered('articleFetchCount', articleFetchCount);
        model.setFiltered('articleFilterList', JSON.stringify(articleFilterList));
        model.setFiltered('tagArrayGroups', JSON.stringify(tagArrayGroups));
        model.setFiltered('tagGroups', tagGroups); // Tags for end user to select
        model.setFiltered('tagGroupsObject', tagGroupsObject); // Tags for end user to select
        model.setFiltered('tagsGroupsDefaultVisible', tagsGroupsDefaultVisible);
        model.setFiltered('hideHitsPerTag', hideHitsPerTag);
        model.setFiltered('tagGroupInRows', tagGroupInRows);
        model.setFiltered('layout', JSON.stringify(layoutOptions));
        model.setFiltered('isConfigured', organizer && sourceObject.identifier && sourceObject.url && sourceObject.type);
        model.setFiltered('source', sourceObject);
        model.setFiltered('isDebug', true);
        model.setFiltered('siteId', model.get('fields.siteId') || '');
        model.setFiltered('viewport', this.api.v1.properties.get('device'));
        model.setFiltered('imageServer', this.api.v1.properties.get('image_server'));
        model.setFiltered('cookieOptions', {
            allow: overrideUrlOption
        });
        model.setFiltered('tagOptions', {
            allow: true,
            tags: tagsArray,
            tags_string: tagsArray.join(', '),
            tagsString: JSON.stringify(tagsArray)
        });
        const styleKeyVal = [];
        if (model.get('fields.size_active')) {
            if (model.get('fields.size_title')) { styleKeyVal.push({ path: 'contentdata.fields.title.attributes.text_size.value', value: parseInt(model.get('fields.size_title'), 10) }); }
            if (model.get('fields.size_subtitle')) { styleKeyVal.push({ path: 'contentdata.fields.subtitle.attributes.text_size.value', value: parseInt(model.get('fields.size_subtitle'), 10) }); }
            if (model.get('fields.size_kicker')) { styleKeyVal.push({ path: 'contentdata.fields.kicker.attributes.text_size.value', value: parseInt(model.get('fields.size_kicker'), 10) }); }
        }
        model.setFiltered('styleString', JSON.stringify(styleKeyVal));
        // model.setFiltered('styleString', JSON.stringify({
        //     size_active: !!model.get('fields.size_active'),
        //     size_subtitle: parseInt(model.get('fields.size_subtitle'), 10) || null,
        //     size_title: parseInt(model.get('fields.size_title'), 10) || null,
        //     size_kicker: parseInt(model.get('fields.size_kicker'), 10) || null
        // }));
        model.setFiltered('imageWidth', model.get('fields.imageWidth') || 100);

        if (!isEditor) {
            return;
        }

        model.setFiltered('sourcesConfig', sourcesConfig);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/TextMultiline.js":
/*!******************************************************!*\
  !*** ./modules/behaviours/elements/TextMultiline.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextMultiline)
/* harmony export */ });
class TextMultiline {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {

        const textCentered = view.get('metadata.text_align') === 'center';
        model.setFiltered('textCentered', textCentered);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Timeline.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Timeline.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Timeline)
/* harmony export */ });
class Timeline {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
        if (this.isEditor) {
            this.api.v1.ns.set('timeline.insertItem', (model, view, menuItem, params) => {
                this.addItem(model);
            });
        }
    }

    /**
     * Helper-functions for timeline
     */

    addItem(model) {
        const d = new Date();
        const child = this.api.v1.model.create.view({
            type: 'timelineItem',
            contentdata: {
                fields: {
                    date: `${ (d.getHours() < 10 ? '0' : '') + d.getHours() }.${ (d.getMinutes() < 10 ? '0' : '') + d.getMinutes() }`
                }
            }
        });
        this.api.v1.model.prependChild(model, child);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Tips_box.js":
/*!*************************************************!*\
  !*** ./modules/behaviours/elements/Tips_box.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Twitter)
/* harmony export */ });
class Twitter {

    constructor(api) {
        this.api = api;
    }

    // Todo: Dette elementet funker nok ikke så bra for kunder utenfor Norge ...
    onRender(model, view) {
        const versions = {
            tips: {
                cssClass: 'tips_version',
                title: 'Tips og innlegg',
                text: 'Vi synes det er viktig med dine meninger',
                buttons: {
                    tips: 'Tips oss',
                    debate: 'Send innlegg'
                }
            },
            debate: {
                cssClass: 'debate_version',
                title: 'Har du noe på hjertet?',
                text: 'Send oss et debattinnlegg, en kronikk eller en meningsytring. Alle innlegg signeres med fullt navn og tittel.',
                buttons: {
                    tips: null,
                    debate: 'Send innlegg'
                }
            }
        };
        const emails = this.api.v1.config.get('contact.email') || {};
        const persistent = {
            tips: model.get('fields.email_tips'),
            debate: model.get('fields.email_debate'),
            version: model.get('fields.version')
        };
        if (persistent.tips) { emails.tips = persistent.tips; }
        if (persistent.debate) { emails.debate = persistent.debate; }
        model.setFiltered('content', persistent.version === 'tips' ? versions.tips : versions.debate);
        model.setFiltered('version_is_tips', persistent.version === 'tips');
        model.setFiltered('emails', emails);

    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Topcomments.js":
/*!****************************************************!*\
  !*** ./modules/behaviours/elements/Topcomments.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Topcomments)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class Topcomments {

    constructor(api) {
        this.api = api;
        this.domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
    }

    onViewHelper(model, view) {
        // Get 'domain' for Kilkaya. Used in external url.
        model.setFiltered('domain', model.get('fields.domain') || this.domain.replace('https://', ''));
    }

    onRender(model, view) {
        const placeholder = view.get('fields.placeholder');
        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));
        const externalData = view.get('external');

        // This element uses external data. External data-boxes are run twice in Labrador. On second run we have external data:
        if (!externalData) return;

        const dateHandler = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(lab_api.v1.config.get('lang'));
        const dateTemplate = this.api.v1.config.get('contentbox_settings.topcomments.dateTemplate');
        const imgSize = {
            width: 63,
            height: 63
        };
        const imageServer = lab_api.v1.properties.get('image_server');
        const mostRead = [];
        const data = lab_api.v1.util.object.clone(externalData, true);
        for (const item of data.mostRead || []) {
            const publishedDate = new Date(item.fields.published);
            if (item.fields.image) {
                item.fields.image = item.fields.image.replace('http://', 'https://');
                item.resizedImage = `${ item.fields.image  }&width=${ imgSize.width }&height=${ imgSize.height }`;
            }
            item.fields.readableDate = dateHandler.utcFormat(publishedDate, dateTemplate);
            mostRead.push(item);
        }
        model.setFiltered('mostRead', mostRead);

        const latest = [];
        for (const item of data.latest || []) {
            const publishedDate = new Date(item.published);
            item.readableDate = dateHandler.utcFormat(publishedDate, dateTemplate);
            if (item.extId) {
                item.disqusId = item.extId.replace('khrono-', 'node/');
            } else {
                item.disqusId = item.id;
            }
            if (item.frontCropUrl) {
                item.resizedImage = `${ imageServer  }/${  item.frontCropUrl  }&width=${  imgSize.width  }&height=${  imgSize.height }`;
            }
            latest.push(item);
        }
        model.setFiltered('latest', latest);

        // Selected tab:
        let selectedTab = model.get('fields.selectedTab') || 'latest';
        if (lab_api.v1.viewport.getName() === 'mobile' && model.get('fields.hideResultOnMobile')) {
            selectedTab = '';
        }
        const selectedTabs = {};
        ['mostRead', 'topComments', 'latest'].forEach((tab) => {
            selectedTabs[tab] = tab === selectedTab;
        });
        model.setFiltered('selectedTabs', selectedTabs);
        model.setFiltered('isDebug', this.api.v1.util.request.hasQueryParam('debug'));

    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Toplist.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/Toplist.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Toplist)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelperInt.js */ "./modules/lib/helpers/datetime/DateTimeHelperInt.js");


class Toplist {

    constructor(api) {
        this.api = api;
    }

    onViewHelper(model, view) {

        // Get node-data used to set external url:
        let domain = model.get('fields.domain') || this.api.v1.properties.get('site.domain');
        domain = domain.replace(/^https?:\/\//, ''); // Remove protocol
        const limit = model.get('fields.limit') || 5;
        model.setFiltered('domain', domain);
        model.setFiltered('limit', limit);
    }

    onRender(model, view) {
        const placeholder = view.get('fields.placeholder');
        model.setFiltered('placeholder', placeholder || this.api.v1.locale.get('emptyState.noContentText', { noRender: true }));
        const externalData = view.get('external');
        const displayImages = !!model.get('fields.displayImages');
        const displayDate = !model.get('fields.hideDate');
        const limit = model.get('fields.limit') || 5;
        const domain = model.get('filtered.domain');

        const getPlaceholderData = (count) => {
            const result = [];
            for (let i = 0; i < count; i++) {
                result.push({
                    fields: {
                        cssClass: 'dac-placeholder-text',
                        type: 'article'
                    }
                });
            }
            return { data: result };
        };

        const getImageUrl = (url) => {
            if (!url) { return null; }
            return (`${ url.replace(/^https?:\/\//, '//') }${ url.includes('?') ? '&' : '?' }width=200&height=140`);
        };

        const result = [];
        const source = externalData && typeof (externalData) === 'object' ? externalData : getPlaceholderData(limit); // Use placeholder-data in edit-mode.
        const dateHelper = new _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelperInt();

        source.data.forEach((article) => {
            if (article.fields.type === 'article') {
                // Get date. Prio: modified-date.
                const dateString = article.fields.published || null;
                result.push({
                    title: article.fields.title || '[no title]',
                    url: article.fields.srcUrl,
                    section: article.fields.section || '',
                    pageviews: article.fields.pageviews,
                    published: dateString,
                    niceDate: displayDate && dateString ? dateHelper.timestampToNiceDate(
                        dateHelper.toTimestamp(
                            new Date(dateString)
                        )
                    ) : '',
                    cssClass: article.fields.cssClass || null,
                    imageUrl: displayImages ? getImageUrl(article.fields.image) : null
                });
            }
        });
        model.setFiltered('result', result);

        /**
         * Admin-view
         */
        if (!this.api.v1.app.mode.isEditor()) return;
        const adminView = {
            domains: [],
            layout: []
        };
        this.api.v1.site.getSites().forEach((site) => {
            if (!site.domain) return;
            const currentDomain = site.domain.replace(/^https?:\/\//, '');
            const current = {
                name: site.display_name,
                value: currentDomain,
                selected: currentDomain === domain
            };
            adminView.domains.push(current);
        });
        for (const direction of ['horizontal', 'vertical']) {
            adminView.layout.push({
                name: direction,
                value: direction,
                selected: direction === view.get('fields.layout')
            });
        }
        model.setFiltered('adminView', adminView);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Tvguide.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/Tvguide.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tvguide)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class Tvguide {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const tvArray = view.get('external.tv');
        if (!tvArray || !tvArray.length) {
            return;
        }
        const data = tvArray[0];
        const dateHandler = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(lab_api.v1.config.get('lang'));

        // Input date:
        // 2021-06-01T00:00:00000+0000
        // Note: '00000' must be replaced by '00.000' to create a js Date-object (new Date(2021-06-01T00:00:00.000+0000))
        const dateFormatter = (dateString, format = 'd/m Y H:i') => {
            const d = new Date(dateString);
            return dateHandler.formattedUtcDate(d, format);
        };

        const formatDateString = (dateString) => dateString.replace('00000+', '00.000+');

        const isDateBeforeToday = (date) => {
            const newDate = new Date(date.toUTCString().split(' ').slice(0, 4).join(' '));
            const currentDate = new Date(new Date().toUTCString().split(' ').slice(0, 4)
                .join(' '));
            return newDate < currentDate;
        };

        // Adjust for summertime
        const summerTimeHandler = (date) => {
            const isSummerTime = dateHandler.isSummerTime(date);
            if (isSummerTime) {
                return dateHandler.manipulateTime(date, 1);
            }
            return date;
        };

        // Get correct date, affedted by summertime
        const getProgrammeDate = (dateString) => {
            const d = new Date(dateString);
            const date = `${  d.getUTCFullYear()  }${ (`0${  d.getUTCMonth() + 1 }`).slice(-2)  }${ (`0${  d.getUTCDate() }`).slice(-2) }`;
            return date;
        };

        // Clean up data from integration-services:
        const programme = data.programme.filter((item) => {
            let d = new Date(formatDateString(item.start));
            d = summerTimeHandler(d);

            // Filter out programmes before current date
            if (isDateBeforeToday(d)) {
                return false;
            }
            return true;
        }).map((item) => {
            const d = summerTimeHandler(new Date(formatDateString(item.start))).toUTCString();
            return {
                start: dateFormatter(d, 'H:i'),     // 2021-06-01T00:00:00000+0000 -> 01/06 2021 00:00
                // stop: item.stop,                 // 2021-06-01T01:00:00000+0000
                icon: item.icon[0].src,             // https://d537y3nbkeq75.cloudfront.net/gbnews/epg/20210601000000-20210601010000-1069.jpg?width=1920&lang=en
                title: item.title[0]._,
                desc: item.desc[0]._,
                date: getProgrammeDate(d)           // "20210601"
            };
        });

        const groupedByDate = {};
        for (const item of programme) {
            if (!groupedByDate[item.date]) {
                const d = dateHandler.parseDate(item.date);
                groupedByDate[item.date] = {
                    date: dateHandler.formattedDate(d, 'd/m Y'),
                    items: []
                };
            }
            groupedByDate[item.date].items.push(item);
        }

        model.setFiltered('tvguide', Object.values(groupedByDate));
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Twitter.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/Twitter.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Twitter)
/* harmony export */ });
class Twitter {

    constructor(api) {
        this.api = api;
    }

    onViewHelper(model, view) {
        const lang = model.get('fields.lang') || lab_api.v1.config.get('lang') || 'no';
        model.setFiltered('lang', lang);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/UserFeedback.js":
/*!*****************************************************!*\
  !*** ./modules/behaviours/elements/UserFeedback.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UserFeedback)
/* harmony export */ });
class UserFeedback {

    constructor(api) {
        this.api = api;
    }

    onRender(model, view) {
        const emails = this.api.v1.config.get('contact.email') || {};
        const email = model.get('fields.email') || emails.tips || '';
        const url = model.get('fields.url') || '';
        model.setFiltered('email', email);
        model.setFiltered('url', url);
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/Vimond.js":
/*!***********************************************!*\
  !*** ./modules/behaviours/elements/Vimond.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Vimond)
/* harmony export */ });
class Vimond {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onRender(model, view) {
        // Display caption on article-pages:
        let displayCaption = this.api.v1.model.root.getType() === 'page_article';
        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption')) {
            displayCaption = false;
        }
        model.setFiltered('displayCaption', displayCaption);

        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {
            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');
            const vimondConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'vimond')[0];

            if (vimondConsent) {
                model.setFiltered('requiredCookieConsent', vimondConsent.requiredConsent || false);
                model.setFiltered('insufficientConsentMessage', vimondConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');
            }
        }
    }

    onRendered(model, view) {
        if (this.isEditor) {
            // The iframe from remote production player captures events on the element of the iframe disabling drag/drop in the editor.
            // Disable pointer-events when hovering the drag-handle.
            const iframe = view.getMarkup().querySelector('iframe');
            const dragHandle = view.getMarkup().querySelector('.video-drag-handle');
            if (iframe && dragHandle) {
                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);
                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);
            }
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/elements/YouTube.js":
/*!************************************************!*\
  !*** ./modules/behaviours/elements/YouTube.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ YouTube)
/* harmony export */ });
class YouTube {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
    }

    onRender(model, view) {

        // Display caption on article-pages:
        let displayCaption = this.api.v1.model.root.getType() === 'page_article';
        if (this.api.v1.app.mode.isFront() && !view.get('fields.caption') || (model.getParent() && model.getParent().get('fields.displayCaption') === false)) {
            displayCaption = false;
        }
        model.setFiltered('displayCaption', displayCaption);

        if (!this.api.v1.app.mode.isEditor() && this.api.v1.config.get('cookieConsent.enabled') === true) {
            const cookieConsentConfig = this.api.v1.config.get('cookieConsent');
            const youtubeConsent = cookieConsentConfig.contentboxes.filter((box) => box.name === 'youtube')[0];

            if (youtubeConsent) {
                model.setFiltered('requiredCookieConsent', youtubeConsent.requiredConsent || false);
                model.setFiltered('insufficientConsentMessage', youtubeConsent.insufficientConsentMessage || this.api.v1.config.get('cookieConsent.insufficientConsentMessage') || '');
            }
        }

        const params = [];
        const startPoint = model.get('fields.video_start');
        const endPoint = model.get('fields.video_end');
        if (startPoint) params.push(`start=${  Math.round(startPoint) }`);
        if (endPoint) params.push(`end=${  Math.round(endPoint) }`);
        if (!params.length) return;
        model.setFiltered('startstop', `?${  params.join('&') }`);
    }

    onRendered(model, view) {
        if (this.isEditor) {
            // The iframe from youtube.com/embed captures events on the element of the iframe disabling drag/drop in the editor.
            // Disable pointer-events when hovering the drag-handle.
            const iframe = view.getMarkup().querySelector('iframe');
            const dragHandle = view.getMarkup().querySelector('.youtube-drag-handle');
            if (iframe && dragHandle) {
                dragHandle.addEventListener('mouseenter', (event) => { iframe.style.pointerEvents = 'none'; }, false);
                dragHandle.addEventListener('mouseleave', (event) => { iframe.style.pointerEvents = ''; }, false);
            }
        }
    }

}


/***/ }),

/***/ "./modules/behaviours/index.js":
/*!*************************************!*\
  !*** ./modules/behaviours/index.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "adnuntiusAd": () => (/* reexport safe */ _elements_AdnuntiusAd_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "apsis_submit": () => (/* reexport safe */ _elements_ApsisSubmit_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "article": () => (/* reexport safe */ _elements_Article_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "articleCalendar": () => (/* reexport safe */ _elements_ArticleCalendar_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "articleFooter": () => (/* reexport safe */ _elements_ArticleFooter_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "articleHeader": () => (/* reexport safe */ _elements_ArticleHeader_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "articleList": () => (/* reexport safe */ _elements_ArticleList_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "articleMeta": () => (/* reexport safe */ _elements_ArticleMeta_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "articlesByTag": () => (/* reexport safe */ _elements_ArticlesByTag_js__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   "articlescroller": () => (/* reexport safe */ _elements_ArticleScroller_js__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   "bodytext": () => (/* reexport safe */ _elements_Bodytext_js__WEBPACK_IMPORTED_MODULE_13__["default"]),
/* harmony export */   "byline": () => (/* reexport safe */ _elements_Byline_js__WEBPACK_IMPORTED_MODULE_14__["default"]),
/* harmony export */   "changelog": () => (/* reexport safe */ _elements_Changelog_js__WEBPACK_IMPORTED_MODULE_15__["default"]),
/* harmony export */   "chart": () => (/* reexport safe */ _elements_Chart_js__WEBPACK_IMPORTED_MODULE_51__["default"]),
/* harmony export */   "comments": () => (/* reexport safe */ _elements_Comments_js__WEBPACK_IMPORTED_MODULE_16__["default"]),
/* harmony export */   "factbox": () => (/* reexport safe */ _elements_Factbox_js__WEBPACK_IMPORTED_MODULE_17__["default"]),
/* harmony export */   "frontContent": () => (/* reexport safe */ _elements_FrontContent_js__WEBPACK_IMPORTED_MODULE_19__["default"]),
/* harmony export */   "front_rows": () => (/* reexport safe */ _elements_Front_rows_js__WEBPACK_IMPORTED_MODULE_18__["default"]),
/* harmony export */   "globalChangelog": () => (/* reexport safe */ _elements_GlobalChangelog_js__WEBPACK_IMPORTED_MODULE_20__["default"]),
/* harmony export */   "googleAd": () => (/* reexport safe */ _elements_GoogleAd_js__WEBPACK_IMPORTED_MODULE_21__["default"]),
/* harmony export */   "googleCSE": () => (/* reexport safe */ _elements_GoogleCSE_js__WEBPACK_IMPORTED_MODULE_22__["default"]),
/* harmony export */   "graphic": () => (/* reexport safe */ _elements_Graphic_js__WEBPACK_IMPORTED_MODULE_24__["default"]),
/* harmony export */   "grid": () => (/* reexport safe */ _elements_Grid_js__WEBPACK_IMPORTED_MODULE_52__["default"]),
/* harmony export */   "image": () => (/* reexport safe */ _elements_Image_js__WEBPACK_IMPORTED_MODULE_23__["default"]),
/* harmony export */   "jwplayer": () => (/* reexport safe */ _elements_JWPlayer_js__WEBPACK_IMPORTED_MODULE_42__["default"]),
/* harmony export */   "labradorSearch": () => (/* reexport safe */ _elements_LabradorSearch_js__WEBPACK_IMPORTED_MODULE_25__["default"]),
/* harmony export */   "livefeed": () => (/* reexport safe */ _elements_LiveFeed_js__WEBPACK_IMPORTED_MODULE_49__["default"]),
/* harmony export */   "markup": () => (/* reexport safe */ _elements_Markup_js__WEBPACK_IMPORTED_MODULE_26__["default"]),
/* harmony export */   "mobiltests": () => (/* reexport safe */ _elements_Mobiltests_js__WEBPACK_IMPORTED_MODULE_27__["default"]),
/* harmony export */   "motortests": () => (/* reexport safe */ _elements_Motortests_js__WEBPACK_IMPORTED_MODULE_28__["default"]),
/* harmony export */   "newsletter_submit": () => (/* reexport safe */ _elements_Newsletter_submit_js__WEBPACK_IMPORTED_MODULE_29__["default"]),
/* harmony export */   "notice": () => (/* reexport safe */ _elements_Notice_js__WEBPACK_IMPORTED_MODULE_48__["default"]),
/* harmony export */   "noticeHeader": () => (/* reexport safe */ _elements_NoticeHeader_js__WEBPACK_IMPORTED_MODULE_50__["default"]),
/* harmony export */   "page_article": () => (/* reexport safe */ _page_Article_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "page_front": () => (/* reexport safe */ _page_Front_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "page_notice": () => (/* reexport safe */ _page_Notice_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "parallax": () => (/* reexport safe */ _elements_Parallax_js__WEBPACK_IMPORTED_MODULE_30__["default"]),
/* harmony export */   "remoteproduction": () => (/* reexport safe */ _elements_RemoteProduction_js__WEBPACK_IMPORTED_MODULE_43__["default"]),
/* harmony export */   "row": () => (/* reexport safe */ _elements_Row_js__WEBPACK_IMPORTED_MODULE_46__["default"]),
/* harmony export */   "scrollbox": () => (/* reexport safe */ _elements_Scrollbox_js__WEBPACK_IMPORTED_MODULE_45__["default"]),
/* harmony export */   "simplestream": () => (/* reexport safe */ _elements_Simplestream_js__WEBPACK_IMPORTED_MODULE_31__["default"]),
/* harmony export */   "slideshow": () => (/* reexport safe */ _elements_Slideshow_js__WEBPACK_IMPORTED_MODULE_32__["default"]),
/* harmony export */   "tablebox": () => (/* reexport safe */ _elements_Tablebox_js__WEBPACK_IMPORTED_MODULE_33__["default"]),
/* harmony export */   "tagboard": () => (/* reexport safe */ _elements_Tagboard_js__WEBPACK_IMPORTED_MODULE_34__["default"]),
/* harmony export */   "text_multiline": () => (/* reexport safe */ _elements_TextMultiline_js__WEBPACK_IMPORTED_MODULE_35__["default"]),
/* harmony export */   "timeline": () => (/* reexport safe */ _elements_Timeline_js__WEBPACK_IMPORTED_MODULE_47__["default"]),
/* harmony export */   "tips_box": () => (/* reexport safe */ _elements_Tips_box_js__WEBPACK_IMPORTED_MODULE_36__["default"]),
/* harmony export */   "topcomments": () => (/* reexport safe */ _elements_Topcomments_js__WEBPACK_IMPORTED_MODULE_44__["default"]),
/* harmony export */   "toplist": () => (/* reexport safe */ _elements_Toplist_js__WEBPACK_IMPORTED_MODULE_37__["default"]),
/* harmony export */   "tvguide": () => (/* reexport safe */ _elements_Tvguide_js__WEBPACK_IMPORTED_MODULE_38__["default"]),
/* harmony export */   "twitter": () => (/* reexport safe */ _elements_Twitter_js__WEBPACK_IMPORTED_MODULE_39__["default"]),
/* harmony export */   "userFeedback": () => (/* reexport safe */ _elements_UserFeedback_js__WEBPACK_IMPORTED_MODULE_40__["default"]),
/* harmony export */   "vimond": () => (/* reexport safe */ _elements_Vimond_js__WEBPACK_IMPORTED_MODULE_53__["default"]),
/* harmony export */   "youtube": () => (/* reexport safe */ _elements_YouTube_js__WEBPACK_IMPORTED_MODULE_41__["default"])
/* harmony export */ });
/* harmony import */ var _page_Article_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./page/Article.js */ "./modules/behaviours/page/Article.js");
/* harmony import */ var _page_Front_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page/Front.js */ "./modules/behaviours/page/Front.js");
/* harmony import */ var _page_Notice_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./page/Notice.js */ "./modules/behaviours/page/Notice.js");
/* harmony import */ var _elements_AdnuntiusAd_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./elements/AdnuntiusAd.js */ "./modules/behaviours/elements/AdnuntiusAd.js");
/* harmony import */ var _elements_ApsisSubmit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./elements/ApsisSubmit.js */ "./modules/behaviours/elements/ApsisSubmit.js");
/* harmony import */ var _elements_Article_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./elements/Article.js */ "./modules/behaviours/elements/Article.js");
/* harmony import */ var _elements_ArticleCalendar_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./elements/ArticleCalendar.js */ "./modules/behaviours/elements/ArticleCalendar.js");
/* harmony import */ var _elements_ArticleFooter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./elements/ArticleFooter.js */ "./modules/behaviours/elements/ArticleFooter.js");
/* harmony import */ var _elements_ArticleHeader_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./elements/ArticleHeader.js */ "./modules/behaviours/elements/ArticleHeader.js");
/* harmony import */ var _elements_ArticleList_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./elements/ArticleList.js */ "./modules/behaviours/elements/ArticleList.js");
/* harmony import */ var _elements_ArticleMeta_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./elements/ArticleMeta.js */ "./modules/behaviours/elements/ArticleMeta.js");
/* harmony import */ var _elements_ArticlesByTag_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./elements/ArticlesByTag.js */ "./modules/behaviours/elements/ArticlesByTag.js");
/* harmony import */ var _elements_ArticleScroller_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./elements/ArticleScroller.js */ "./modules/behaviours/elements/ArticleScroller.js");
/* harmony import */ var _elements_Bodytext_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./elements/Bodytext.js */ "./modules/behaviours/elements/Bodytext.js");
/* harmony import */ var _elements_Byline_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./elements/Byline.js */ "./modules/behaviours/elements/Byline.js");
/* harmony import */ var _elements_Changelog_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./elements/Changelog.js */ "./modules/behaviours/elements/Changelog.js");
/* harmony import */ var _elements_Comments_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./elements/Comments.js */ "./modules/behaviours/elements/Comments.js");
/* harmony import */ var _elements_Factbox_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./elements/Factbox.js */ "./modules/behaviours/elements/Factbox.js");
/* harmony import */ var _elements_Front_rows_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./elements/Front_rows.js */ "./modules/behaviours/elements/Front_rows.js");
/* harmony import */ var _elements_FrontContent_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./elements/FrontContent.js */ "./modules/behaviours/elements/FrontContent.js");
/* harmony import */ var _elements_GlobalChangelog_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./elements/GlobalChangelog.js */ "./modules/behaviours/elements/GlobalChangelog.js");
/* harmony import */ var _elements_GoogleAd_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./elements/GoogleAd.js */ "./modules/behaviours/elements/GoogleAd.js");
/* harmony import */ var _elements_GoogleCSE_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./elements/GoogleCSE.js */ "./modules/behaviours/elements/GoogleCSE.js");
/* harmony import */ var _elements_Image_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./elements/Image.js */ "./modules/behaviours/elements/Image.js");
/* harmony import */ var _elements_Graphic_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./elements/Graphic.js */ "./modules/behaviours/elements/Graphic.js");
/* harmony import */ var _elements_LabradorSearch_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./elements/LabradorSearch.js */ "./modules/behaviours/elements/LabradorSearch.js");
/* harmony import */ var _elements_Markup_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./elements/Markup.js */ "./modules/behaviours/elements/Markup.js");
/* harmony import */ var _elements_Mobiltests_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./elements/Mobiltests.js */ "./modules/behaviours/elements/Mobiltests.js");
/* harmony import */ var _elements_Motortests_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./elements/Motortests.js */ "./modules/behaviours/elements/Motortests.js");
/* harmony import */ var _elements_Newsletter_submit_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./elements/Newsletter_submit.js */ "./modules/behaviours/elements/Newsletter_submit.js");
/* harmony import */ var _elements_Parallax_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./elements/Parallax.js */ "./modules/behaviours/elements/Parallax.js");
/* harmony import */ var _elements_Simplestream_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./elements/Simplestream.js */ "./modules/behaviours/elements/Simplestream.js");
/* harmony import */ var _elements_Slideshow_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./elements/Slideshow.js */ "./modules/behaviours/elements/Slideshow.js");
/* harmony import */ var _elements_Tablebox_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./elements/Tablebox.js */ "./modules/behaviours/elements/Tablebox.js");
/* harmony import */ var _elements_Tagboard_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./elements/Tagboard.js */ "./modules/behaviours/elements/Tagboard.js");
/* harmony import */ var _elements_TextMultiline_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./elements/TextMultiline.js */ "./modules/behaviours/elements/TextMultiline.js");
/* harmony import */ var _elements_Tips_box_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./elements/Tips_box.js */ "./modules/behaviours/elements/Tips_box.js");
/* harmony import */ var _elements_Toplist_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./elements/Toplist.js */ "./modules/behaviours/elements/Toplist.js");
/* harmony import */ var _elements_Tvguide_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./elements/Tvguide.js */ "./modules/behaviours/elements/Tvguide.js");
/* harmony import */ var _elements_Twitter_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./elements/Twitter.js */ "./modules/behaviours/elements/Twitter.js");
/* harmony import */ var _elements_UserFeedback_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./elements/UserFeedback.js */ "./modules/behaviours/elements/UserFeedback.js");
/* harmony import */ var _elements_YouTube_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./elements/YouTube.js */ "./modules/behaviours/elements/YouTube.js");
/* harmony import */ var _elements_JWPlayer_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./elements/JWPlayer.js */ "./modules/behaviours/elements/JWPlayer.js");
/* harmony import */ var _elements_RemoteProduction_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./elements/RemoteProduction.js */ "./modules/behaviours/elements/RemoteProduction.js");
/* harmony import */ var _elements_Topcomments_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./elements/Topcomments.js */ "./modules/behaviours/elements/Topcomments.js");
/* harmony import */ var _elements_Scrollbox_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./elements/Scrollbox.js */ "./modules/behaviours/elements/Scrollbox.js");
/* harmony import */ var _elements_Row_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./elements/Row.js */ "./modules/behaviours/elements/Row.js");
/* harmony import */ var _elements_Timeline_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./elements/Timeline.js */ "./modules/behaviours/elements/Timeline.js");
/* harmony import */ var _elements_Notice_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./elements/Notice.js */ "./modules/behaviours/elements/Notice.js");
/* harmony import */ var _elements_LiveFeed_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./elements/LiveFeed.js */ "./modules/behaviours/elements/LiveFeed.js");
/* harmony import */ var _elements_NoticeHeader_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./elements/NoticeHeader.js */ "./modules/behaviours/elements/NoticeHeader.js");
/* harmony import */ var _elements_Chart_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./elements/Chart.js */ "./modules/behaviours/elements/Chart.js");
/* harmony import */ var _elements_Grid_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./elements/Grid.js */ "./modules/behaviours/elements/Grid.js");
/* harmony import */ var _elements_Vimond_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./elements/Vimond.js */ "./modules/behaviours/elements/Vimond.js");

























































/***/ }),

/***/ "./modules/behaviours/page/Article.js":
/*!********************************************!*\
  !*** ./modules/behaviours/page/Article.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Article)
/* harmony export */ });
/* harmony import */ var _lib_api_PageAPI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/api/PageAPI.js */ "./modules/lib/api/PageAPI.js");
/* harmony import */ var _lib_PageData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/PageData.js */ "./modules/lib/PageData.js");
/* harmony import */ var _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/helpers/AutodataHelper.js */ "./modules/lib/helpers/AutodataHelper.js");




class Article {

    constructor(api) {
        this.api = api;
        this.pageData = new _lib_PageData_js__WEBPACK_IMPORTED_MODULE_1__.PageData(this.api, new _lib_api_PageAPI_js__WEBPACK_IMPORTED_MODULE_0__.PageAPI(this.api));
    }

    onReady(model, view) {
        this.pageData.set(model, view);

        // Autodata
        model.setFiltered('autodata_css', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_2__.AutodataHelper.parseCss(model));
        model.setFiltered('autodata_attributes', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_2__.AutodataHelper.parseAttributes(model));
        model.setFiltered('autodata_custom', _lib_helpers_AutodataHelper_js__WEBPACK_IMPORTED_MODULE_2__.AutodataHelper.parseCustomData(model));
    }

}


/***/ }),

/***/ "./modules/behaviours/page/Front.js":
/*!******************************************!*\
  !*** ./modules/behaviours/page/Front.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Front)
/* harmony export */ });
/* harmony import */ var _lib_api_PageAPI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/api/PageAPI.js */ "./modules/lib/api/PageAPI.js");
/* harmony import */ var _lib_PageData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/PageData.js */ "./modules/lib/PageData.js");



class Front {

    constructor(api) {
        this.api = api;
        this.pageData = new _lib_PageData_js__WEBPACK_IMPORTED_MODULE_1__.PageData(this.api, new _lib_api_PageAPI_js__WEBPACK_IMPORTED_MODULE_0__.PageAPI(this.api));
    }

    onReady(model, view) {
        this.pageData.set(model, view);
    }

}


/***/ }),

/***/ "./modules/behaviours/page/Notice.js":
/*!*******************************************!*\
  !*** ./modules/behaviours/page/Notice.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Article)
/* harmony export */ });
/* harmony import */ var _lib_api_PageAPI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/api/PageAPI.js */ "./modules/lib/api/PageAPI.js");
/* harmony import */ var _lib_PageData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/PageData.js */ "./modules/lib/PageData.js");
/* harmony import */ var _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelperInt.js */ "./modules/lib/helpers/datetime/DateTimeHelperInt.js");




class Article {

    constructor(api) {
        this.api = api;
        this.pageData = new _lib_PageData_js__WEBPACK_IMPORTED_MODULE_1__.PageData(this.api, new _lib_api_PageAPI_js__WEBPACK_IMPORTED_MODULE_0__.PageAPI(this.api));
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelperInt_js__WEBPACK_IMPORTED_MODULE_2__.DateTimeHelperInt();
    }

    onReady(model, view) {
        this.pageData.set(model, view);
        const timestampModified = model.get('fields.modified');
        const timestampPublished = model.get('fields.published');
        const timestamp = timestampModified || timestampPublished;
        if (timestamp != null) {
            const date = new Date(timestamp * 1000);
            model.setFiltered('niceDate', this.dateTimeHelper.timestampToNiceDate(timestamp));
            model.setFiltered('publishedDate', this.dateTimeHelper.utcFormat(date, `${ this.api.v1.locale.get('dates.monthdayyear', { noRender: true }) } ${ this.api.v1.locale.get('dates.hourminute', { noRender: true }) }`));
            model.setFiltered('isoDate', date.toISOString());
            model.setFiltered('date', {
                published: {
                    isoDate: timestampPublished ? new Date(timestampPublished * 1000).toISOString() : null
                },
                modified: {
                    isoDate: timestampModified ? new Date(timestampModified * 1000).toISOString() : null
                }
            });
        }
        model.setFiltered('tagPagePath', this.api.v1.config.get('tagPagePath') || '/tag/');

        if (model.get('filtered.hasInsertedRelatedContent')) {
            return;
        }

        const tags = model.get('tags') || [];

        const label = this.api.v1.locale.get('notice.relatedContent.header');
        const labelElement = {
            type: 'text_singleline',
            contentdata: {
                fields: {
                    text: label,
                    elementType: 'h2'
                }
            }
        };

        this.api.v1.model.insert.atPath({
            path: 'dropZone/',
            data: {
                type: 'row',
                metadata: {
                    spaceOutsideTop: 'large',
                    spaceOutsideBottom: 'medium'
                    // hasRowTitle: true,
                    // rowTitle: 'Related'
                },
                children: [labelElement, {
                    type: 'livefeed',
                    contentdata: {
                        id: 122, // Note: Element needs an ID to properly render script nessesary for swipe functionality.
                        fields: {
                            tags: tags.join(','),
                            maxNoticesCount: 20
                        }
                    },
                    metadata: {
                        blacklist: [model.get('id')]
                    },
                    width: 66.66
                }, {
                    type: 'frontContent',
                    contentdata: {
                        fields: {
                            organizer: 'RowsAndColumns',
                            source: 'lab-api-site',
                            tags_allow: true,
                            tags_useOr: true,
                            tags_string: tags.join(','),
                            hide_kicker: true,
                            hide_subtitle: true,
                            layout_rowCount: '20',
                            layout_columnCount: '1',
                            size_active: true,
                            size_title: 24
                        }
                    },
                    width: 33.33
                }],
                state: {
                    isNonPersistent: true
                }
            }
            // options: {
            //     index: 0
            // }
        });

        model.setFiltered('hasInsertedRelatedContent', true);
    }

}


/***/ }),

/***/ "./modules/collections/ArticleTeasers.js":
/*!***********************************************!*\
  !*** ./modules/collections/ArticleTeasers.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
    }

    onCreated(uiInterface, options) {
        uiInterface.setProperty('query', {
            start: 0,
            limit: 24,
            q: ''
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/articleTeasers/header', {}, true);
        const query = uiInterface.getProperty('query');
        const formHandler = (event) => {
            const formData = this.api.v1.util.dom.serializeForm(form);
            query.q = formData.text || '';
            this.resetPager(uiInterface);
            uiInterface.getData();
        };
        for (const formEl of [...form.querySelectorAll('input, select')]) {
            formEl.addEventListener('change', formHandler, false);
        }
        const addBtn = form.querySelector('[name="add"]');
        if (this.api.v1.user.hasPermission('edit_article')) {
            addBtn.addEventListener('click', (event) => {
                this.editTeaser(uiInterface);
            }, false);
        } else {
            addBtn.setAttribute('disabled', 'disabled');
        }
        form.addEventListener('submit', (event) => {
            event.preventDefault();
        }, false);

        return form;
    }

    onFooter(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/footer', {}, true);
        uiInterface.setDomElement('prevPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('prevPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);
        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);
        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));
        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const args = [
            `q=${ query.q }`,
            `start=${ query.start }`,
            `limit=${ query.limit }`
        ];
        return `/ajax/article/get-teasers?${ args.join('&') }`;
    }

    onMapData(uiInterface, serverData) {
        const labData = [];
        const ignoreUnpublished = uiInterface.getProperty('ignoreUnpublished');

        // Create an empty article:
        labData.push(this.articleData({
            filtered: {
                title: 'Empty teaser'
            }
        }));

        for (const data of serverData.data) {
            const article = this.articleData(data);
            if (!ignoreUnpublished || article.fields.published_url) {
                labData.push(article);
            }
        }

        this.updatePageNumber(uiInterface);
        return labData;
    }

    onRendered(uiInterface, contentList) {
        if (!this.api.v1.user.hasPermission('edit_article')) { return; }
        for (const item of contentList) {
            const id = item.model.get('instance_of');
            if (id) {
                this.addEditLink(uiInterface, id, item.element);
            }
        }
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: 'filtered.title',
                content: null
            },
            description: {
                path: 'filtered.subtitle',
                content: null
            }
        };
    }

    addEditLink(uiInterface, id, element) {
        const el = document.createElement('div');
        el.setAttribute('title', 'Edit Teaser');
        el.classList.add('notes-info', 'labicon-startEdit');
        el.addEventListener('click', (event) => {
            this.editTeaser(uiInterface, id);
        }, false);
        element.querySelector('.lab-inner').prepend(el);
    }

    // If id: Update. If no id: Create
    editTeaser(uiInterface, id) {
        this.api.v1.apps.start('TeaserEditor', {
            id,
            endcallback: (createdId) => {
                uiInterface.getData(true);
            }
        });
    }

    navigate(uiInterface, forward) {
        const query = uiInterface.getProperty('query');
        if (forward) {
            query.start += query.limit;
        } else {
            query.start -= query.limit;
            if (query.start < 0) {
                query.start = 0;
            }
        }
        uiInterface.getData();
    }

    updatePageNumber(uiInterface) {
        const pageNumber = this.getPageNumber(uiInterface);
        const el = uiInterface.getDomElement('pageCounterElement');
        el.innerHTML = pageNumber;
        if (pageNumber < 2) {
            uiInterface.getDomElement('prevPageElement').setAttribute('disabled', 'disabled');
        } else {
            uiInterface.getDomElement('prevPageElement').removeAttribute('disabled');
        }
    }

    getPageNumber(uiInterface) {
        const query = uiInterface.getProperty('query');
        return Math.ceil(query.start / query.limit) + 1;
    }

    // (object) Create data for an article-element
    articleData(inputData) {
        const childrenData = [];
        const children = inputData.children || [];
        const filtered = inputData.filtered || {};
        if (children.length && children[0].type === 'image') {
            childrenData.push({
                type: 'image',
                contentdata: {
                    instance_of: children[0].instance_of,
                    fields: this.api.v1.view.helpers.image.getImageProperties({ crop: { pano: children[0].fields } })
                },
                children: []
            });
        }
        const fields = inputData.fields || {};
        const title = fields.title || '';
        const subtitle = fields.subtitle || '';
        return {
            type: 'article',
            contentdata: {
                instance_of: inputData.id ? parseInt(inputData.id, 10) : null,
                fields: {
                    title,
                    subtitle,
                    published_url: fields.published_url
                }
            },
            filtered: {
                title: filtered.title || (title || '[No title]'),
                subtitle: filtered.subtitle || (subtitle || '[No subtitle]')
            },
            children: childrenData
        };
    }

    resetPager(uiInterface) {
        const query = uiInterface.getProperty('query');
        query.start = 0;
    }

});


/***/ }),

/***/ "./modules/collections/ArticlesAuto.js":
/*!*********************************************!*\
  !*** ./modules/collections/ArticlesAuto.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        this.rootModel = this.api.v1.model.query.getRootModel();
        this.pageAutomaticMode = [true, 'true', '1', 1].includes(this.rootModel.get('fields.automatic'));
    }

    onGetData(uiInterface, options) {
        const feeds = this.api.v1.config.get('feeds') || {};
        const imageId = 1018;
        const icon = `https://publishlab.com/pbl2.jpg?v=${ imageId }`;
        const result = Object.keys(feeds).filter((key) => (!(!this.pageAutomaticMode && feeds[key].auto_only === true))).map((key) => ({
            type: 'article',
            contentdata: {
                fields: {
                    title: `Article from feed`,
                    subtitle: `<em>${ feeds[key].display_name }</em>`,
                    feedId: key,
                    isAutomatic: true
                }
            },
            children: [{
                type: 'image',
                contentdata: {
                    fields: {
                        external_id: `lab_head_${ imageId }`,
                        imageurl: icon,
                        source: '_articlefeed'
                    }
                }
            }]
        }));

        if (this.pageAutomaticMode) {
            result.unshift({
                type: 'article',
                contentdata: {
                    fields: {
                        title: `Labrador Tag Feed`,
                        subtitle: 'Automatic article from <em>Labrador Tag Feed</em>',
                        feedId: '_tag',
                        isAutomatic: true
                    }
                },
                children: [{
                    type: 'image',
                    contentdata: {
                        fields: {
                            external_id: `lab_head_${ imageId }`,
                            imageurl: icon,
                            source: '_articlefeed'
                        }
                    }
                }]
            });
        }
        return result;
    }

    onProperties(uiInterface) {
        return {
            css: 'autoarticles'
        };
    }

});


/***/ }),

/***/ "./modules/collections/ArticlesLatest.js":
/*!***********************************************!*\
  !*** ./modules/collections/ArticlesLatest.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        // Site-config may specify paths to include in new article-teasers
        this.customFields = lab_api.v1.config.get('customAdapterFields.article') || [];
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(this.api.v1.config.get('lang') || undefined);
        this.updateInterval = 30000; // Milliseconds, 10000 = 10 seconds
    }

    onProperties() {
        return {
            autoRefresh: 60
        };
    }

    onCreated(uiInterface, options) {
        const siteId = this.api.v1.eventmonitor.reader.getUiSelection('articles_latest_site_id');
        if (options.externalContentUpdater === true && options.updateContents) {
            this.updateContents = options.updateContents;
        }
        uiInterface.setProperty('query', {
            start: 0,
            limit: 24,
            orderBy: 'published',
            api: {
                section: this.api.v1.eventmonitor.reader.getUiSelection(siteId ? `section_site_${ siteId }` : 'section'),
                id: null,
                tag: null,
                fromDate: null,
                toDate: null,
                text: null,
                onlyMine: this.api.v1.eventmonitor.reader.getUiSelection('article_list_only_mine') || false,
                onlyPaywall: this.api.v1.eventmonitor.reader.getUiSelection('article_list_only_paywall') || false
            },
            site_id: siteId
        });

        if (options.click) {
            uiInterface.setProperty('itemClickCallback', options.click);
        }
        if (options.end) {
            uiInterface.setProperty('endCallback', options.end);
        }
        if (options.display) {
            uiInterface.setProperty('displayCallback', options.display);
        }

        if (options.updateContent) {
            uiInterface.setProperty('updateContentCallback', options.updateContent);
        }

        if (options.ignoreUnpublished) {
            // Do not draw articles without published url.
            uiInterface.setProperty('ignoreUnpublished', true);
        }
        this.api.v1.app.on('pageVisibilityChange', ({ isVisible }) => {
            if (isVisible) {
                if (uiInterface.getProperty('collectionIsVisible')) {
                    this.startUpdateInterval(uiInterface);
                }
            } else {
                this.endUpdateInterval(uiInterface);
            }
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/header', {}, true);
        const query = uiInterface.getProperty('query');

        const formHandler = (event) => {
            const formData = this.api.v1.util.dom.serializeForm(form);
            query.api.id = (formData.id || '').trim();
            query.api.section = (formData.section || '').trim().toLowerCase();
            query.api.tag = (formData.tag || '').trim();
            query.api.fromDate = (formData.fromDate ? new Date(formData.fromDate.trim()) : '');
            query.api.toDate = (formData.toDate ? new Date(formData.toDate.trim()) : '');
            query.api.text = (formData.text || '').trim();
            query.api.onlyMine = !!formData.article_list_only_mine;
            query.api.onlyPaywall = !!formData.article_list_only_paywall;
            query.site_id = (formData.articles_latest_site_id || '').trim();
            this.resetPager(uiInterface);
            uiInterface.getData();
        };

        const updateSections = (siteId) => {
            // Create a select-element containig available sections.
            // The preferred section for user will be selected and stored when changed.
            const container = form.querySelector('.section-container');
            container.innerHTML = '';
            const selectEl = this.api.v1.ui.element.getSectionSelector({
                attributes: [{
                    name: 'name',
                    value: 'section'
                }],
                siteId: siteId ? parseInt(siteId, 10) : null,
                label: 'All sections',
                events: [{
                    name: 'change',
                    callback: formHandler
                }]
            });
            container.appendChild(selectEl);
            query.api.section = selectEl.value;
        };

        // Create a select-element containig available sites.
        // The preferred site for user will be selected and stored when changed.
        const siteSelectEl = this.api.v1.ui.element.getSiteSelector({
            attributes: [{
                name: 'name',
                value: 'articles_latest_site_id'
            }],
            value: query.site_id,
            events: [{
                name: 'change',
                callback: (event) => {
                    updateSections(event.target.value);
                }
            }],
            label: 'All sites',
            requireSitePermission: true
        });

        query.site_id = siteSelectEl.value ? parseInt(siteSelectEl.value, 10) : '';
        form.querySelector('.site-container').appendChild(siteSelectEl);

        updateSections(query.site_id);

        // Create a checkbox to toggle displaying articles from current user only.
        // The preferred state for user will be selected and stored when changed.
        form.querySelector('.article_list_only_mine-container').appendChild(this.api.v1.ui.element.getCheckboxElement({
            name: 'article_list_only_mine',
            label: 'Only mine'
        }));

        // Create a checkbox to toggle displaying articles from only paywall.
        // The preferred state for user will be selected and stored when changed.
        form.querySelector('.article_list_only_paywall-container').appendChild(this.api.v1.ui.element.getCheckboxElement({
            name: 'article_list_only_paywall',
            label: 'Only paywall'
        }));

        for (const formEl of [...form.querySelectorAll('input, select')]) {
            formEl.addEventListener('input', formHandler, false);
        }
        form.addEventListener('submit', (event) => {
            event.preventDefault();
        }, false);
        const toggleEl = form.querySelector('a');
        const expandableEl = form.querySelector('.expanded');
        if (toggleEl && expandableEl) {
            toggleEl.addEventListener('click', (event) => {
                event.preventDefault();
                expandableEl.classList.toggle('lab-hidden');
            }, false);
        }

        form.querySelector('.size-container').appendChild(this.api.v1.ui.element.getSizeElements({
            name: 'article_list_preferred_size',
            btnSize: 'lab-small',
            css: 'lab-grid lab-autogrid lab-btn-group',
            sizes: ['small', 'medium', 'large'],
            callback: (preferredSize) => {
                uiInterface.setProperty('size', preferredSize);
                uiInterface.requestSize(preferredSize);
            }
        }));

        const preferredSize = this.api.v1.eventmonitor.reader.getUiSelection('article_list_preferred_size');
        if (preferredSize) {
            uiInterface.setProperty('size', preferredSize);
            uiInterface.requestSize(preferredSize);
        }

        return form;
    }

    onFooter(uiInterface, options) {
        /**
         * Show a footer with buttons to navigate between pages.
         * Optional callback to 'updateContentCallback' can be used to update the footer.
         * @param {Object} uiInterface - The interface object used to update the UI.
         * @param {Object} options - Options for the footer.
         */
        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/footer', {}, true);

        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);

        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);

        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));

        if (this.updateContents && this.updateContents.footer && this.updateContents.footer === true) {
            const updateContentCallback = uiInterface.getProperty('updateContentCallback');
            return updateContentCallback(form, { type: 'footer' });
        }

        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const args = [
            `query=${ this.buildApiQueryString(uiInterface) }`,
            `orderBy=${ query.orderBy }`,
            `start=${ query.start }`,
            `site_id=(${ query.site_id || this.api.v1.user.getSites().map((site) => site.id).join(' OR ') })`,
            `limit=${ query.limit }`,
            `htmlText=1`
        ];
        return `/api/v1/article/?${ args.join('&') }`;
    }

    onMapData(uiInterface, data, options) {
        const labData = [];
        const serverData = data && data.result && Array.isArray(data.result) ? data : [];
        const notes = {};
        const ignoreUnpublished = uiInterface.getProperty('ignoreUnpublished');

        // Create an empty article:
        if (!ignoreUnpublished) {
            labData.push(this.articleData({
                filtered: {
                    title: 'Empty article'
                }
            }));
        }

        for (const item of serverData.result) {
            const article = this.articleData(item);
            if (!ignoreUnpublished || article.fields.published_url) {
                labData.push(article);
            }
            const note = item.hasNotes.trim();
            if (note) {
                notes[item.id] = note;
            }
        }

        uiInterface.setProperty('notes', notes);
        this.updatePageNumber(uiInterface);

        return labData;
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: 'filtered.title',
                content: null
            },
            description: {
                path: 'filtered.subtitle',
                content: null
            }
        };
    }

    onRendered(uiInterface, contentList) {
        const notes = uiInterface.getProperty('notes');
        uiInterface.setProperty('contentList', contentList);
        this.markExisting(uiInterface);
        if (uiInterface.getProperty('size') === 'large') {
            this.displayPublishDates(uiInterface, contentList);
        }
        if (!Object.keys(notes).length) { return; }
        for (const item of contentList) {
            const id = item.model.get('instance_of');
            if (notes[id]) {
                this.addNote(item, notes[id]);
            }
        }
    }

    onChildAdded(uiInterface, model, element) {

        const itemClickCallback = uiInterface.getProperty('itemClickCallback');
        if (itemClickCallback) {
            element.addEventListener('click', (event) => {
                itemClickCallback(uiInterface, model, element, event);
                this.markExisting(uiInterface);

            }, false);
        }
    }

    onDisplayed(uiInterface, options) {
        this.startUpdateInterval(uiInterface);
        uiInterface.setProperty('collectionIsVisible', true);
        this.api.v1.model.on('childAdded', this.getArticleListener(uiInterface));
        this.api.v1.model.on('childRemoved', this.getArticleListener(uiInterface));

        this.markExisting(uiInterface);

    }

    onHidden(uiInterface) {
        this.endUpdateInterval(uiInterface);
        uiInterface.setProperty('collectionIsVisible', false);
        this.api.v1.model.off('childAdded', this.getArticleListener(uiInterface));
        this.api.v1.model.off('childRemoved', this.getArticleListener(uiInterface));
        const endCallback = uiInterface.getProperty('endCallback');
        if (endCallback) {
            endCallback(uiInterface);
        }
    }

    navigate(uiInterface, forward) {
        this.endUpdateInterval(uiInterface);
        const query = uiInterface.getProperty('query');
        if (forward) {
            query.start += query.limit;
        } else {
            query.start -= query.limit;
            if (query.start < 0) {
                query.start = 0;
            }
        }
        uiInterface.getData();
    }

    updatePageNumber(uiInterface) {
        const pageNumber = this.getPageNumber(uiInterface);
        const el = uiInterface.getDomElement('pageCounterElement');
        el.innerHTML = pageNumber;
        if (pageNumber < 2) {
            uiInterface.getDomElement('previewPageElement').setAttribute('disabled', 'disabled');
        } else {
            uiInterface.getDomElement('previewPageElement').removeAttribute('disabled');
        }
    }

    getPageNumber(uiInterface) {
        const query = uiInterface.getProperty('query');
        return Math.ceil(query.start / query.limit) + 1;
    }

    // (string) Build "query" for Labrador API v1.
    buildApiQueryString(uiInterface) {
        const query = uiInterface.getProperty('query');
        const params = [];
        if (query.api.id) {
            const idArray = query.api.id.split(/[\s,]+/).map((id) => this.trimInputText(id)).filter((id) => id);
            if (idArray.length) {
                params.push(`(id:(${ idArray.join(' OR ') }))`);
            }
        }
        if (query.api.section) params.push(`(section:("${ query.api.section }"))`);
        if (query.api.tag) params.push(`(tag:("${ this.trimInputText(query.api.tag) }"))`);
        if (query.api.text) {
            params.push(`${ this.trimInputText(query.api.text) }*`);
        }
        if (query.api.onlyMine) {
            params.push('(has_published:me%20OR%20created_by:me)');
        }
        if (query.api.onlyPaywall) {
            params.push('(paywall:1)');
        }
        params.push('visibility_status:P');

        const from = query.api.fromDate ? query.api.fromDate.toISOString() : '*';
        const to = query.api.toDate ? query.api.toDate.toISOString() : 'NOW';
        params.push(`published:[${ from } ${ to }]`);

        const result = params.join(' AND ');
        return result;
    }

    trimInputText(txt = '') {
        return txt.trim().replace(/"/g, '');
    }

    // (object) Create data for an article-element
    articleData(inputData) {
        const childrenData = [];
        const filtered = inputData.filtered || {};
        if (inputData.image) {
            childrenData.push({
                type: 'image',
                contentdata: {
                    instance_of: inputData.image,
                    fields: this.api.v1.view.helpers.image.getImageProperties(inputData)
                },
                children: []
            });
        }

        const bylines = (inputData.full_bylines || []).map((byline) => ({
            firstname: byline.firstname,
            lastname: byline.lastname,
            description: byline.description,
            description2: byline.description2,
            public_email: byline.public_email,
            public_phone: byline.public_phone,
            public_url: byline.public_url,
            imageUrl: byline.imageUrl
        }));

        const title = inputData.teaserTitle || inputData.title || '';
        const subtitle = inputData.teaserSubtitle || inputData.subtitle || '';
        const kicker = inputData.teaserKicker || inputData.kicker || '';
        const articleData = {
            type: inputData.type ? inputData.type : 'article',
            contentdata: {
                instance_of: inputData.id ? parseInt(inputData.id, 10) : null,
                tags: inputData.tags ? inputData.tags.split(', ') : [],
                fields: {
                    full_bylines_json: bylines,
                    title,
                    subtitle,
                    kicker,
                    seolanguage: inputData.seolanguage,
                    audio: inputData.teaserAudio,
                    audioInfo: inputData.teaserAudio_style_json,
                    addRelNoFollow: inputData.addRelNoFollow,
                    addRelSponsored: inputData.addRelSponsored,
                    addRelUgc: inputData.addRelUgc,
                    published_url: inputData.published_url,
                    published: inputData.published,
                    showcomments: inputData.showcomments,
                    paywall: inputData.paywall,
                    displayByline: inputData.showbylineonfp,
                    section: inputData.section_tag,
                    hideAds: inputData.hideAds,
                    site_id: inputData.site_id || null,
                    site_alias: (this.api.v1.site.getSiteById(inputData.site_id) || {}).alias
                }
            },
            filtered: {
                title: filtered.title || (title || '[No title]'),
                subtitle: filtered.subtitle || (subtitle || '[No subtitle]')
            },
            children: childrenData
        };
        for (const field of this.customFields) {
            if (inputData[field] !== undefined) {
                Sys.logger.debug(`Collection: Will add custom field "${ field }".`);
                articleData.contentdata.fields[field] = inputData[field];
            }
        }
        return articleData;
    }

    resetPager(uiInterface) {
        const query = uiInterface.getProperty('query');
        query.start = 0;
    }

    addNote(item, note) {
        const el = document.createElement('div');
        el.setAttribute('title', 'Display notes');
        el.classList.add('notes-info', 'labicon-notes');
        el.addEventListener('click', (event) => {
            this.displayNote(item, note);
        }, false);
        item.element.querySelector('.lab-inner').prepend(el);
    }

    displayNote(item, note) {
        const lines = note.split('\n').filter((line) => !!line).map((line) => `<p class="lab-para">${ line }</p>`);
        this.api.v1.ui.modal.dialog({
            content: {
                title: `Notes for "${ item.model.get('fields.title') }"`,
                markup: lines.join('')
            }
        });
    }

    getArticleListener(uiInterface) {
        if (!uiInterface.getProperty('articleListener')) {
            const listener = (params) => {
                if (params.childModel.getType() === 'article') {
                    this.markExisting(uiInterface);
                }
            };
            uiInterface.setProperty('articleListener', listener);
        }
        return uiInterface.getProperty('articleListener');
    }

    markExisting(uiInterface) {

        const existing = this.api.v1.model.query.getModelsByType('article');
        const contentList = uiInterface.getProperty('contentList') || [];
        for (let item of contentList) {
            const id = item.model.get('instance_of');
            if (id) {
                if (this.hasId(id, existing)) {
                    item.element.classList.add('lab-highlight-item');
                    item.element.setAttribute('title', 'Article used on current page');
                } else {
                    item.element.classList.remove('lab-highlight-item');
                    item.element.setAttribute('title', '');
                }

                if (this.updateContents && this.updateContents.markExisting) {
                    const updateContentCallback = uiInterface.getProperty('updateContentCallback');
                    const params = {
                        type: 'markExisting',
                        id
                    };
                    item = updateContentCallback(item, params);
                }
            }
        }
    }

    hasId(id, list) {
        for (const model of list) {
            if (id === model.get('instance_of')) {
                return true;
            }
        }
        return false;
    }

    displayPublishDates(uiInterface, contentList) {
        for (const item of contentList) {
            const dateString = item.model.get('fields.published');
            if (dateString) {
                const el = document.createElement('p');
                el.classList.add('article-publish-date', 'lab-offstage-description', 'labicon-time');
                el.innerHTML = this.formatDate(dateString);
                const id = item.model.get('instance_of');
                if (id) {
                    el.innerHTML += ` <a href="/edit/article/id/${ id }" target="_blank" class="lab-btn lab-small">Edit</a>`;
                }
                item.element.querySelector('.lab-inner').appendChild(el);
            }
        }
    }

    formatDate(isoDateString) {
        if (!isoDateString) {
            return '';
        }
        const date = new Date(isoDateString);
        return this.dateTimeHelper.format(date, `${ this.dateTimeHelper.str('monthdayyear') } ${ this.dateTimeHelper.str('hourminute') }`);
    }

    /**
     * Starts an interval to update the UI with new data.
     * @param {Object} uiInterface - The interface object used to update the UI.
     */
    startUpdateInterval(uiInterface) {
        uiInterface.setProperty('updateIntervalId', window.setInterval(() => {
            uiInterface.getData(true, { isSilent: true });
        }, this.updateInterval));
    }

    /**
     * Stops the update interval for the UI interface.
     * @param {Object} uiInterface - The UI interface object.
     */
    endUpdateInterval(uiInterface) {
        window.clearInterval(uiInterface.getProperty('updateIntervalId'));
    }

});


/***/ }),

/***/ "./modules/collections/ArticlesNotice.js":
/*!***********************************************!*\
  !*** ./modules/collections/ArticlesNotice.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(this.api.v1.config.get('lang') || undefined);
        this.updateInterval = 30000; // Milliseconds, 10000 = 10 seconds
    }

    onProperties() {
        return {
            autoRefresh: 60
        };
    }

    onCreated(uiInterface, options) {
        const siteId = this.api.v1.eventmonitor.reader.getUiSelection('articles_latest_site_id');
        if (options.externalContentUpdater === true && options.updateContents) {
            this.updateContents = options.updateContents;
        }
        uiInterface.setProperty('query', {
            start: 0,
            limit: 24,
            orderBy: 'published',
            api: {
                id: null,
                tag: null,
                text: null,
                onlyMine: this.api.v1.eventmonitor.reader.getUiSelection('article_list_only_mine') || false
            },
            site_id: siteId
        });

        if (options.click) {
            uiInterface.setProperty('itemClickCallback', options.click);
        }
        if (options.end) {
            uiInterface.setProperty('endCallback', options.end);
        }
        if (options.display) {
            uiInterface.setProperty('displayCallback', options.display);
        }
        if (options.updateContent) {
            uiInterface.setProperty('updateContentCallback', options.updateContent);
        }

        this.api.v1.app.on('pageVisibilityChange', ({ isVisible }) => {
            if (isVisible) {
                if (uiInterface.getProperty('collectionIsVisible')) {
                    this.startUpdateInterval(uiInterface);
                }
            } else {
                this.endUpdateInterval(uiInterface);
            }
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/articlesNotice/header', {}, true);
        const query = uiInterface.getProperty('query');

        const formHandler = (event) => {
            const formData = this.api.v1.util.dom.serializeForm(form);
            query.api.id = (formData.id || '').trim();
            query.api.tag = (formData.tag || '').trim();
            query.api.text = (formData.text || '').trim();
            query.api.onlyMine = !!formData.article_list_only_mine;
            query.site_id = (formData.articles_latest_site_id || '').trim();
            this.resetPager(uiInterface);
            uiInterface.getData();
        };

        // Create a select-element containig available sites.
        // The preferred site for user will be selected and stored when changed.
        const siteSelectEl = this.api.v1.ui.element.getSiteSelector({
            attributes: [{
                name: 'name',
                value: 'articles_latest_site_id'
            }],
            value: query.site_id,
            label: 'All sites'
        });

        query.site_id = siteSelectEl.value ? parseInt(siteSelectEl.value, 10) : '';
        form.querySelector('.site-container').appendChild(siteSelectEl);

        // Create a checkbox to toggle displaying articles from current user only.
        // The preferred state for user will be selected and stored when changed.
        form.querySelector('.article_list_only_mine-container').appendChild(this.api.v1.ui.element.getCheckboxElement({
            name: 'article_list_only_mine',
            label: 'Only mine'
        }));

        for (const formEl of [...form.querySelectorAll('input, select')]) {
            formEl.addEventListener('input', formHandler, false);
        }
        form.addEventListener('submit', (event) => {
            event.preventDefault();
        }, false);
        const toggleEl = form.querySelector('a');
        const expandableEl = form.querySelector('.expanded');
        if (toggleEl && expandableEl) {
            toggleEl.addEventListener('click', (event) => {
                event.preventDefault();
                expandableEl.classList.toggle('lab-hidden');
            }, false);
        }

        form.querySelector('.size-container').appendChild(this.api.v1.ui.element.getSizeElements({
            name: 'notice_list_preferred_size',
            btnSize: 'lab-small',
            css: 'lab-grid lab-autogrid lab-btn-group',
            sizes: ['small', 'medium', 'large'],
            callback: (preferredSize) => {
                uiInterface.setProperty('size', preferredSize);
                uiInterface.requestSize(preferredSize);
            }
        }));

        form.querySelector('.newNoticeBtn').addEventListener('click', this.api.v1.notice.ui.create);

        const preferredSize = this.api.v1.eventmonitor.reader.getUiSelection('notice_list_preferred_size');
        if (preferredSize) {
            uiInterface.setProperty('size', preferredSize);
            uiInterface.requestSize(preferredSize);
        }

        return form;
    }

    onFooter(uiInterface, options) {
        /**
         * Show a footer with buttons to navigate between pages.
         * Optional callback to 'updateContentCallback' can be used to update the footer.
         * @param {Object} uiInterface - The interface object used to update the UI.
         * @param {Object} options - Options for the footer.
         */
        const form = this.api.v1.util.dom.renderView('collections/articlesLatest/footer', {}, true);

        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);

        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);

        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));

        if (this.updateContents && this.updateContents.footer && this.updateContents.footer === true) {
            const updateContentCallback = uiInterface.getProperty('updateContentCallback');
            return updateContentCallback(form, { type: 'footer' });
        }

        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const args = [
            `query=${ this.buildApiQueryString(uiInterface) }`,
            `orderBy=${ query.orderBy }`,
            `start=${ query.start }`,
            `site_id=${ query.site_id }`,
            `limit=${ query.limit }`,
            `htmlText=1`
        ];
        return `/api/v1/notice/?content=full&${ args.join('&') }`;
    }

    onMapData(uiInterface, data, options) {
        const labData = [];
        const serverData = data && data.result && Array.isArray(data.result) ? data : [];
        for (const item of serverData.result) {
            const article = this.articleData(item);
            labData.push(article);
        }
        this.updatePageNumber(uiInterface);
        return labData;
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: 'filtered.title',
                content: null
            },
            description: {
                path: 'filtered.subtitle',
                content: null
            }
        };
    }

    onRendered(uiInterface, contentList) {
        uiInterface.setProperty('contentList', contentList);
        this.markExisting(uiInterface);
        if (uiInterface.getProperty('size') === 'large') {
            this.displayPublishDates(uiInterface, contentList);
        }
    }

    onChildAdded(uiInterface, model, element) {
        const itemClickCallback = uiInterface.getProperty('itemClickCallback');
        if (itemClickCallback) {
            element.addEventListener('click', (event) => {
                itemClickCallback(uiInterface, model, element, event);
                this.markExisting(uiInterface);
            }, false);
        }
    }

    onDisplayed(uiInterface, options) {
        this.startUpdateInterval(uiInterface);
        uiInterface.setProperty('collectionIsVisible', true);
        this.api.v1.model.on('childAdded', this.getArticleListener(uiInterface));
        this.api.v1.model.on('childRemoved', this.getArticleListener(uiInterface));
        this.markExisting(uiInterface);
    }

    onHidden(uiInterface) {
        this.endUpdateInterval(uiInterface);
        uiInterface.setProperty('collectionIsVisible', false);
        this.api.v1.model.off('childAdded', this.getArticleListener(uiInterface));
        this.api.v1.model.off('childRemoved', this.getArticleListener(uiInterface));
        const endCallback = uiInterface.getProperty('endCallback');
        if (endCallback) {
            endCallback(uiInterface);
        }
    }

    navigate(uiInterface, forward) {
        this.endUpdateInterval(uiInterface);
        const query = uiInterface.getProperty('query');
        if (forward) {
            query.start += query.limit;
        } else {
            query.start -= query.limit;
            if (query.start < 0) {
                query.start = 0;
            }
        }
        uiInterface.getData();
    }

    updatePageNumber(uiInterface) {
        const pageNumber = this.getPageNumber(uiInterface);
        const el = uiInterface.getDomElement('pageCounterElement');
        el.innerHTML = pageNumber;
        if (pageNumber < 2) {
            uiInterface.getDomElement('previewPageElement').setAttribute('disabled', 'disabled');
        } else {
            uiInterface.getDomElement('previewPageElement').removeAttribute('disabled');
        }
    }

    getPageNumber(uiInterface) {
        const query = uiInterface.getProperty('query');
        return Math.ceil(query.start / query.limit) + 1;
    }

    // (string) Build "query" for Labrador API v1.
    buildApiQueryString(uiInterface) {
        const query = uiInterface.getProperty('query');
        const params = [];
        if (query.api.id) {
            const idArray = query.api.id.split(/[\s,]+/).map((id) => this.trimInputText(id)).filter((id) => id);
            if (idArray.length) {
                params.push(`(id:(${ idArray.join(' OR ') }))`);
            }
        }
        if (query.api.tag) params.push(`(tag:("${ this.trimInputText(query.api.tag) }"))`);
        if (query.api.text) {
            params.push(`${ this.trimInputText(query.api.text) }*`);
        }
        if (query.api.onlyMine) {
            params.push('(has_published:me%20OR%20created_by:me)');
        }
        params.push('visibility_status:P');

        const result = params.join(' AND ');
        return result;
    }

    trimInputText(txt = '') {
        return txt.trim().replace(/"/g, '');
    }

    // (object) Create data for an article-element
    articleData(inputData) {
        const { field } = inputData.notice;
        const { tag } = inputData.notice.tag || {};
        const { id } = inputData.notice.attribute;
        let bylines = [];
        if (field.userName) {
            bylines = [{
                firstname: field.userName
            }];
        }

        // For an empty bodytext the API may return an object...
        if (typeof field.bodytext === 'object') {
            field.bodytext = '';
        }

        // Use a subset of the bodytext as subtitle.
        const subtitle = this.api.v1.util.string.stripTags(field.bodytext || '');
        const childrenData = [];
        if (inputData.notice.children && inputData.notice.children.image) {
            const imageData = Array.isArray(inputData.notice.children.image) ? inputData.notice.children.image[0] : inputData.notice.children.image;
            childrenData.push({
                type: 'image',
                contentdata: {
                    instance_of: imageData.attribute.instanceof_id,
                    fields: this.api.v1.view.helpers.image.getImageProperties(imageData.field)
                },
                children: []
            });
        }
        const articleData = {
            type: 'article',
            contentdata: {
                instance_of: parseInt(id, 10),
                tags: Array.isArray(tag) ? tag : [tag],
                fields: {
                    subtype: 'notice',
                    title: field.title,
                    subtitle: subtitle.substring(0, 200),
                    bodytext: field.bodytext,
                    published_url: field.published_url,
                    userName: field.userName,
                    modified: field.modified,
                    published: field.published,
                    site_id: field.lab_site_id || null,
                    site_alias: (this.api.v1.site.getSiteById(field.lab_site_id) || {}).alias,
                    full_bylines_json: bylines
                }
            },
            filtered: {
                title: field.title || '[No title]',
                subtitle: subtitle.substring(0, 120) || '[No text]'
            },
            children: childrenData
        };
        return articleData;
    }

    resetPager(uiInterface) {
        const query = uiInterface.getProperty('query');
        query.start = 0;
    }

    getArticleListener(uiInterface) {
        if (!uiInterface.getProperty('articleListener')) {
            const listener = (params) => {
                if (params.childModel.getType() === 'article') {
                    this.markExisting(uiInterface);
                }
            };
            uiInterface.setProperty('articleListener', listener);
        }
        return uiInterface.getProperty('articleListener');
    }

    markExisting(uiInterface) {
        const existing = this.api.v1.model.query.getModelsByType('article');
        const contentList = uiInterface.getProperty('contentList') || [];
        for (let item of contentList) {
            const id = item.model.get('instance_of');
            if (id) {
                if (this.hasId(id, existing)) {
                    item.element.classList.add('lab-highlight-item');
                    item.element.setAttribute('title', 'Article used on current page');
                } else {
                    item.element.classList.remove('lab-highlight-item');
                    item.element.setAttribute('title', '');
                }

                if (this.updateContents && this.updateContents.markExisting) {
                    const updateContentCallback = uiInterface.getProperty('updateContentCallback');
                    const params = {
                        type: 'markExisting',
                        id
                    };
                    item = updateContentCallback(item, params);
                }
            }
        }
    }

    hasId(id, list) {
        for (const model of list) {
            if (id === model.get('instance_of')) {
                return true;
            }
        }
        return false;
    }

    displayPublishDates(uiInterface, contentList) {
        for (const item of contentList) {
            const timestamp = item.model.get('fields.published');
            if (timestamp) {
                const el = document.createElement('p');
                el.classList.add('article-publish-date', 'lab-offstage-description', 'labicon-time');
                el.innerHTML = this.formatDate(timestamp * 1000);
                const id = item.model.get('instance_of');
                if (id) {
                    el.innerHTML += ` <a href="/edit/notice/id/${ id }" target="_blank" class="lab-btn lab-small">Edit</a>`;
                }
                item.element.querySelector('.lab-inner').appendChild(el);
            }
        }
    }

    formatDate(isoDateString) {
        if (!isoDateString) {
            return '';
        }
        const date = new Date(isoDateString);
        return this.dateTimeHelper.format(date, `${ this.dateTimeHelper.str('monthdayyear') } ${ this.dateTimeHelper.str('hourminute') }`);
    }

    /**
     * Starts an interval to update the UI with new data.
     * @param {Object} uiInterface - The interface object used to update the UI.
     */
    startUpdateInterval(uiInterface) {
        uiInterface.setProperty('updateIntervalId', window.setInterval(() => {
            uiInterface.getData(true, { isSilent: true });
        }, this.updateInterval));
    }

    /**
     * Stops the update interval for the UI interface.
     * @param {Object} uiInterface - The UI interface object.
     */
    endUpdateInterval(uiInterface) {
        window.clearInterval(uiInterface.getProperty('updateIntervalId'));
    }

});


/***/ }),

/***/ "./modules/collections/Audio.js":
/*!**************************************!*\
  !*** ./modules/collections/Audio.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        this.siteId = this.api.v1.site.getSite().id;
    }

    onCreated(uiInterface, options) {
        if (options.clickHandler && typeof options.clickHandler === 'function') {
            uiInterface.setProperty('clickHandler', options.clickHandler);
        }
    }

    onChildAdded(uiInterface, model, element) {
        element.addEventListener('click', (event) => {
            const clickHandler = uiInterface.getProperty('clickHandler');
            if (clickHandler) {
                uiInterface.hide();
                clickHandler(uiInterface.prepareForStage(model), element);
            }
        }, false);
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: 'fields.title',
                content: null
            },
            description: {
                path: 'fields.fileType',
                content: null
            },
            url: {
                path: 'fields.url'
            }
        };
    }

    onMapData(uiInterface, data) {
        const results = [];
        data.forEach((item) => {
            results.push({
                type: 'audio',
                contentdata: {
                    fields: {
                        title: item.title,
                        fileType: item.fileType,
                        url: item.url,
                        playTime: item.length
                    }
                }
            });
        });
        return results;
    }

    onGetUrl(uiInterface, options) {
        return `/ajax/soundplayer/list?siteId=${ this.siteId }`;
    }

});


/***/ }),

/***/ "./modules/collections/Bylines.js":
/*!****************************************!*\
  !*** ./modules/collections/Bylines.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        this.siteId = this.api.v1.site.getSite().id;
        this.pageId = this.api.v1.model.query.getRootModel().get('id');
    }

    onCreated(uiInterface, options) {
        // uiInterface.setProperty('defaultByline', parseInt(lab_api.v1.user.getField('defaultByline'), 10));
        uiInterface.setProperty('query', {
            firstname: '',
            lastname: '',
            bylineId: ''
        });
        uiInterface.setProperty('permissions', {
            mine: this.api.v1.user.hasPermission('byline_edit_mine'),
            all: this.api.v1.user.hasPermission('byline_edit_all')
        });
    }

    getDefaultBylineId() {
        return parseInt(lab_api.v1.user.getField('defaultByline'), 10);
    }

    getFavouriteBylineIds() {
        return lab_api.v1.user.getField('favouriteBylineIds') || [];
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/bylines/header', {}, true);
        const query = uiInterface.getProperty('query');
        const formHandler = (event, skipValidation = false) => {
            const formData = this.api.v1.util.dom.serializeForm(form);
            if (!skipValidation && ((formData.firstname || '').trim() + (formData.lastname || '').trim()).length <= 2) {
                return;
            }
            query.firstname = (formData.firstname || '').trim();
            query.lastname = (formData.lastname || '').trim();
            query.bylineId = '';
            uiInterface.getData();
        };
        for (const formEl of [...form.querySelectorAll('input')]) {
            formEl.addEventListener('input', formHandler, false);
            formEl.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    formHandler(event, true);
                }
            }, false);
        }
        form.querySelector('button').addEventListener('click', (event) => {
            this.editByline(uiInterface);
        }, false);
        return form;
    }

    // If no search is defined:
    // Display default byline + recently used bylines
    onGetUrl(uiInterface, options) {
        const defaultBylineId = this.getDefaultBylineId();
        const query = uiInterface.getProperty('query');
        if (!query.firstname && !query.lastname && !query.bylineId) {
            const ids = [...this.getFavouriteBylineIds().filter((id) => id !== defaultBylineId)];
            if (defaultBylineId) {
                ids.unshift(defaultBylineId);
            }
            return `/ajax/byline/get-by-ids?ids=${ ids }`;
        }
        return `/ajax/byline/search?page=${ this.pageId }&firstname=${ query.firstname }&lastname=${ query.lastname }&defaultBylineId=${ defaultBylineId || '' }&bylineId=${ query.bylineId }`;
    }

    onMapData(uiInterface, data, options) {
        const result = data.data.map((item) => {
            const bylineData = {
                type: item.type ? item.type : 'byline',
                contentdata: {
                    instance_of: item.id ? item.id : null,
                    fields: item.fields
                },
                filtered: {
                    name: `${ item.fields.firstname } ${ item.fields.lastname }`,
                    description: item.fields.description
                }
            };
            if (item.children) {
                bylineData.children = item.children.filter((child) => child.type === 'image').map((child) => ({
                    type: child.type,
                    contentdata: {
                        instance_of: child.instance_of || null,
                        fields: child.fields
                    }
                }));
            }
            return bylineData;
        });

        const defaultByline = this.getDefaultBylineId();
        result.sort((a, b) => a.filtered.name.localeCompare(b.filtered.name));
        if (defaultByline) {
            const defaultItem = result.filter((item) => item.contentdata.instance_of === defaultByline).pop();
            if (defaultItem) {
                result.splice(result.indexOf(defaultItem), 1);
                result.unshift(defaultItem);
            }
        }
        result.unshift({
            type: 'byline',
            contentdata: {
                fields: {}
            },
            filtered: {
                name: 'Unnamed Byline ...',
                description: 'Unnamed Description ...'
            }
        });
        return result;
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: 'filtered.name',
                content: null
            },
            description: {
                path: 'filtered.description',
                content: null
            },
            definition: {
                useImagePlaceholder: true
            }
        };
    }

    onRendered(uiInterface, contentList) {
        uiInterface.setProperty('contentList', contentList);
        const permissions = uiInterface.getProperty('permissions');
        const defaultByline = this.getDefaultBylineId();

        // Add edit-button. Todo: Check permissions
        for (const item of contentList) {
            const id = item.model.get('instance_of');
            if (id) {
                if (permissions.all || (id === defaultByline && permissions.mine)) {
                    this.addEditLink(uiInterface, id, item.element);
                }
            }
        }

        // Highlight bylines used on current page:
        this.markExisting(uiInterface);
    }

    onDisplayed(uiInterface, options) {
        this.api.v1.model.on('childAdded', this.getBylineListener(uiInterface));
        this.api.v1.model.on('childRemoved', this.getBylineListener(uiInterface));
        this.markExisting(uiInterface);
    }

    onHidden(uiInterface) {
        this.api.v1.model.off('childAdded', this.getBylineListener(uiInterface));
        this.api.v1.model.off('childRemoved', this.getBylineListener(uiInterface));
    }

    editByline(uiInterface, id = null) {
        this.api.v1.apps.start('BylineEditor', {
            id,
            endcallback: (createdId) => {
                if (createdId) {
                    const query = uiInterface.getProperty('query');
                    query.bylineId = createdId || '';
                    uiInterface.setProperty('query', query);
                }
                uiInterface.getData(true);
            }
        });
    }

    addEditLink(uiInterface, id, element) {
        const el = document.createElement('div');
        el.setAttribute('title', 'Edit byline');
        el.classList.add('notes-info', 'labicon-startEdit');
        el.addEventListener('click', (event) => {
            this.editByline(uiInterface, id);
        }, false);
        element.querySelector('.lab-inner').prepend(el);
    }

    getBylineListener(uiInterface) {
        if (!uiInterface.getProperty('bylineListener')) {
            const listener = (params) => {
                if (params.childModel.getType() === 'byline') {
                    this.markExisting(uiInterface);
                }
            };
            uiInterface.setProperty('bylineListener', listener);
        }
        return uiInterface.getProperty('bylineListener');
    }

    markExisting(uiInterface) {
        const existing = this.api.v1.model.query.getModelsByType('byline').map((model) => model.get('instance_of'));
        const contentList = uiInterface.getProperty('contentList') || [];
        for (const item of contentList) {
            const id = item.model.get('instance_of');
            if (id) {
                if (existing.includes(id)) {
                    item.element.classList.add('lab-highlight-item');
                    item.element.setAttribute('title', 'Byline used on current page');
                } else {
                    item.element.classList.remove('lab-highlight-item');
                    item.element.setAttribute('title', '');
                }
            }
        }
    }

});


/***/ }),

/***/ "./modules/collections/Graphics.js":
/*!*****************************************!*\
  !*** ./modules/collections/Graphics.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        this.filetypes = ['svg', 'gif', 'png'];
        this.imageServer = this.api.v1.properties.get('image_server');
        this.siteId = this.api.v1.site.getSite().id;
    }

    onProperties(uiInterface) {
        return {
            autoItemSizing: true,
            displayAsGrid: true,
            isMedia: true
        };
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: 'fields.name',
                content: null
            },
            description: {
                path: 'fields.fileType',
                content: null
            },
            imageUrl: {
                path: 'fields.url'
            }
        };
    }

    onCreated(uiInterface, options) {
        uiInterface.setProperty('query', {
            type: '',
            text: ''
        });
        uiInterface.setProperty('filesUploadedHandler', (files) => {
            if (files.length) {
                uiInterface.getData(true);
            }
        });
        lab_api.v1.file.on('filesUploaded', uiInterface.getProperty('filesUploadedHandler'));
    }

    onHeader(uiInterface, options) {
        const form = this.api.v1.util.dom.renderView('collections/graphics/header', {
            types: [{
                value: '',
                key: 'All types'
            }, {
                value: 'svg',
                key: 'SVG'
            }, {
                value: 'png',
                key: 'PNG'
            }, {
                value: 'gif',
                key: 'GIF'
            }]
        }, true);
        const query = uiInterface.getProperty('query');
        const formHandler = (event) => {
            event.preventDefault();
            const formData = this.api.v1.util.dom.serializeForm(form);
            query.type = formData.type;
            query.text = formData.text;
            uiInterface.getData();
        };
        form.addEventListener('submit', formHandler, false);
        for (const formEl of [...form.querySelectorAll('input, select')]) {
            formEl.addEventListener('change', formHandler, false);
        }
        form.querySelector('.size-container').appendChild(this.api.v1.ui.element.getSizeElements({
            name: 'graphics_list_preferred_size',
            btnSize: 'lab-small',
            css: 'lab-grid lab-grid-gap lab-autogrid lab-btn-group lab-grid-large-4',
            callback: (preferredSize) => {
                uiInterface.requestSize(preferredSize);
            }
        }));
        const preferredSize = this.api.v1.eventmonitor.reader.getUiSelection('graphics_list_preferred_size');
        if (preferredSize) {
            uiInterface.requestSize(preferredSize);
        }
        const toggleEl = form.querySelector('a');
        const expandableEl = form.querySelector('.expanded');
        if (toggleEl && expandableEl) {
            toggleEl.addEventListener('click', (event) => {
                event.preventDefault();
                expandableEl.classList.toggle('lab-hidden');
            }, false);
        }
        return form;
    }

    onFooter(uiInterface, options) {
        const form = this.api.v1.util.dom.renderView('collections/graphics/footer', {}, true);
        form.querySelector('.lab-footer-upload').addEventListener('click', (event) => {
            this.api.v1.file.displayFileUpload();
        }, false);
        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        return form;
    }

    onGetUrl(uiInterface, options) {
        const query = uiInterface.getProperty('query');
        return `/ajax/file-upload/list-files-by-type?type=${ query.type || this.filetypes.join(',') }&text=${ query.text }&siteId=${ this.siteId }`;
    }

    onMapData(uiInterface, data) {
        const results = [];
        for (const id of Object.keys(data).reverse()) {
            const url = data[id].url || false;
            if (url) {
                results.push({
                    type: 'graphic',
                    contentdata: {
                        instance_of: id,
                        fields: {
                            url,
                            name: data[id].name,
                            uploadtime: data[id].uploadtime,
                            fileType: url.split('.').pop()
                        }
                    }
                });
            }
        }
        return results;
    }

});


/***/ }),

/***/ "./modules/collections/JWPlayer.js":
/*!*****************************************!*\
  !*** ./modules/collections/JWPlayer.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
    }

    onCreated(uiInterface, options) {
        const channelConfig = lab_api.v1.config.get('media.jwplayer.channel') || {};
        uiInterface.setProperty('channelConfig', channelConfig);
        uiInterface.setProperty('query', {
            search: '',
            limit: 30,
            currentToken: null,
            nextPageToken: null,
            prevPageToken: null,
            page: 1
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/jwplayer/header', {
            channelConfig: uiInterface.getProperty('channelConfig')
        }, true);
        const query = uiInterface.getProperty('query');

        const searchBar = form.querySelector('.search-bar');

        const update = () => {
            if (searchBar) {
                query.search = searchBar.value || '';
            }

            uiInterface.getData(true);
        };

        searchBar.addEventListener('change', update.bind(this));

        form.addEventListener('submit', (event) => {
            event.stopPropagation();
            event.preventDefault();
        });

        return form;
    }

    onFooter(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/jwplayer/footer', {}, true);

        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);

        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);

        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));
        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const siteAlias = lab_api.v1.site.getSite().alias;
        const args = [
            `num=${ query.limit }`,
            `site=${ siteAlias }`
        ];
        if (query.search) {
            args.push(`q=${ query.search }`);
        }
        if (query.currentToken) {
            args.push(`token=${ query.currentToken }`);
        }
        return `/ajax/integration/get-collection?_service=jwplayer&${ args.join('&') }`;
    }

    onMapData(uiInterface, data) {
        const query = uiInterface.getProperty('query');
        query.nextPageToken = null;
        query.prevPageToken = null;
        query.currentToken = null;

        if (!data.results || !data.results.length) { return []; }

        if (typeof (data.pagination) !== 'undefined') {
            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }
            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }
        }

        const results = [];

        data.results.forEach((item) => {
            results.push({
                type: 'jwplayer',
                contentdata: {
                    fields: {
                        vid: item.id.videoId ? item.id.videoId : item.id,
                        preview: item.preview,
                        title: item.title,
                        description: item.extra_metadata_json.metadata.description
                    }
                }
            });
        });
        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;
        return results;
    }

    onProperties(uiInterface) {
        return {
            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.
            displayAsGrid: true,    // Set to true for images etc.
            isMedia: true           // Set to true for images etc.
        };
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: null,
                content: null
            },
            description: {
                path: 'fields.title',
                content: null
            },
            imageUrl: {
                path: 'fields.preview'
            }
        };
    }

    // Todo: Fix pagination ...
    navigate(uiInterface, forward) {
        const query = uiInterface.getProperty('query');
        const active = forward ? 'nextPageToken' : 'prevPageToken';
        if (!query[active]) {
            return;
        }
        if (forward) {
            query.page++;
        } else {
            query.page--;
        }
        query.currentToken = query[active];
        uiInterface.setProperty('query', query);
        uiInterface.getData();
    }

});


/***/ }),

/***/ "./modules/collections/RemoteProduction.js":
/*!*************************************************!*\
  !*** ./modules/collections/RemoteProduction.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
    }

    onCreated(uiInterface, options) {
        const channelConfig = lab_api.v1.config.get('media.remoteproduction.channel') || {};
        uiInterface.setProperty('channelConfig', channelConfig);
        uiInterface.setProperty('query', {
            search: '',
            limit: 30,
            currentToken: null,
            nextPageToken: null,
            prevPageToken: null,
            page: 1
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/remoteproduction/header', {
            channelConfig: uiInterface.getProperty('channelConfig')
        }, true);
        const query = uiInterface.getProperty('query');

        const searchBar = form.querySelector('.search-bar');

        const update = () => {
            if (searchBar) {
                query.search = searchBar.value || '';
            }

            uiInterface.getData(true);
        };

        searchBar.addEventListener('change', update.bind(this));

        form.addEventListener('submit', (event) => {
            event.stopPropagation();
            event.preventDefault();
        });

        return form;
    }

    onFooter(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/remoteproduction/footer', {}, true);

        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);

        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);

        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));
        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const siteAlias = lab_api.v1.site.getSite().alias;
        const args = [
            `num=${ query.limit }`,
            `site=${ siteAlias }`
        ];
        if (query.search) {
            args.push(`q=${ query.search }`);
        }
        if (query.currentToken) {
            args.push(`token=${ query.currentToken }`);
        }
        return `/ajax/integration/get-collection?_service=remote-production&${ args.join('&') }`;
    }

    onMapData(uiInterface, data) {
        const query = uiInterface.getProperty('query');
        query.nextPageToken = null;
        query.prevPageToken = null;
        query.currentToken = null;

        if (!data.results || !data.results.length) { return []; }

        if (typeof (data.pagination) !== 'undefined') {
            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }
            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }
        }

        const results = [];

        data.results.forEach((item) => {
            results.push({
                type: 'remoteproduction',
                contentdata: {
                    fields: {
                        vid: item.id.videoId ? item.id.videoId : item.id,
                        embedCode: item.embedCode,
                        playerUrl: item.playerUrl,
                        preview: item.preview,
                        title: item.title,
                        caption: item.caption,
                        byline: item.byline,
                        description: item.description
                    }
                }
            });
        });
        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;
        return results;
    }

    onProperties(uiInterface) {
        return {
            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.
            displayAsGrid: true,    // Set to true for images etc.
            isMedia: true           // Set to true for images etc.
        };
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: null,
                content: null
            },
            description: {
                path: 'fields.title',
                content: null
            },
            imageUrl: {
                path: 'fields.preview'
            }
        };
    }

    navigate(uiInterface, forward) {
        const query = uiInterface.getProperty('query');
        const active = forward ? 'nextPageToken' : 'prevPageToken';
        if (!query[active]) {
            return;
        }
        if (forward) {
            query.page++;
        } else {
            query.page--;
        }
        query.currentToken = query[active];
        uiInterface.setProperty('query', query);
        uiInterface.getData();
    }

});


/***/ }),

/***/ "./modules/collections/Search.js":
/*!***************************************!*\
  !*** ./modules/collections/Search.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Search for existing elements of any type.
 * Default implementation will use elements factbox, slideshow, parallax, quotebox and markup.
 * You can add or remove element-types using config.
 */

/*
// Remove `markup`-element:
{
    "collections": {
        "search": {
            "types": {
                "markup": null
            }
        }
    }
}

// Add `quotebox`:
{
    "collections": {
        "search": {
            "types": {
                "quotebox": {
                    "name": "Quote",
                    "description": "{{{ fields.quote }}}"
                }
            }
        }
    }
}
// Note: The values for `name` and `description` may use standard Mustache variables, like `{{{ fields.title }}}`, referencing model-data from each element.
// These are used to display text for the user in the collection in the editor.

// Set default search for `slideshow`
{
    "collections": {
        "search": {
            "types": {
                "slideshow": {
                    "selected": true
                }
            }
        }
    }
}

*/

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
        this.pageId = this.api.v1.model.query.getRootModel().get('id');
    }

    onCreated(uiInterface, options) {
        const config = this.api.v1.util.defaults.object(this.api.v1.config.get('collections.search.types'), {
            factbox: {
                selected: true
            },
            slideshow: {},
            parallax: {},
            markup: {},
            quotebox: {},
            timeline: {}
        });
        let selectedElement = 'factbox';
        for (const name of Object.keys(config)) {
            if (config[name] && config[name].selected) {
                selectedElement = name;
            }
        }
        uiInterface.setProperty('config', config);
        uiInterface.setProperty('query', {
            type: selectedElement,
            string: ''
        });
    }

    onHeader(uiInterface, params) {
        const config = uiInterface.getProperty('config');
        const items = Object.keys(config).filter((name) => !!config[name]).map((name) => ({ elementType: name, ...config[name] }));
        const form = this.api.v1.util.dom.renderView('collections/search/header', { items }, true);
        const query = uiInterface.getProperty('query');
        const formHandler = (event) => {
            event.preventDefault();
            const formData = this.api.v1.util.dom.serializeForm(form);
            query.type = formData.type;
            query.string = (formData.query || '').trim();
            uiInterface.getData();
        };
        form.addEventListener('submit', formHandler, false);
        for (const formEl of [...form.querySelectorAll('input, select')]) {
            formEl.addEventListener('change', formHandler, false);
        }
        return form;
    }

    onGetData(uiInterface, options) {
        const query = uiInterface.getProperty('query');
        return query.type ? undefined : [];
    }

    // Note: No metadata returned from query.
    // Background colors, positions of images in factboxes etc. are omitted.
    onGetUrl(uiInterface, options) {
        const query = uiInterface.getProperty('query');
        return `/ajax/node/get-children-by-query?type=${ query.type }&query=${ query.string }&start=0&limit=20&lockId=${ this.pageId }`;
    }

    mapItems(uiInterface, items, checkConfig = true) {
        const config = uiInterface.getProperty('config');
        const result = [];
        for (const item of items) {
            if (!checkConfig || config[item.type]) {
                const itm = {
                    type: item.type,
                    contentdata: {
                        type: item.type,
                        fields: item.fields,
                        instance_of: item.instance_of
                    },
                    filtered: this.getItemDescription(item, config[item.type]),
                    children: this.mapItems(uiInterface, item.children || [], false)
                };
                if (item.instance_of) {
                    itm.contentdata.apiResult = {
                        id: item.instance_of
                    };
                }
                result.push(itm);
            }
        }
        return result;
    }

    onMapData(uiInterface, data, options) {
        const result = data && data.result ? this.mapItems(uiInterface, data.result) : [];
        return result;
    }

    getItemDescription(item, config = {}) {
        if (config.name || config.description) {
            return {
                name: this.api.v1.util.dom.renderTemplate(config.name, item),
                description: this.api.v1.util.string.stripTags(this.api.v1.util.dom.renderTemplate(config.description, item))
            };
        }
        let name = '';
        let description = '';
        switch (item.type) {
            case 'factbox':
                return {
                    name: `${ lab_api.v1.util.object.get('fields.title', item) || '[No title]' }`,
                    description: (lab_api.v1.util.object.get('fields.bodytext', item) || '[No bodytext]')
                };
            case 'markup':
                return {
                    name: `Markup from page #${ item.page_id }`,
                    description: lab_api.v1.util.string.stripTags(lab_api.v1.util.object.get('fields.markup', item) || lab_api.v1.util.object.get('fields.viewports_json.desktop.fields.markup', item) || '', ' ') || '[No markup]'
                };
            case 'slideshow':
                return {
                    name: '',
                    description: ''
                };
            case 'quotebox':
                return {
                    name: 'Quote',
                    description: lab_api.v1.util.string.stripTags(lab_api.v1.util.object.get('fields.quote', item)) || '[No quote]'
                };
            case 'parallax':
                for (const child of item.children) {
                    if (!name && child.type === 'text_title') {
                        name = child.fields.title;
                    }
                    if (!name && child.type === 'text_subtitle') {
                        name = child.fields.subtitle;
                    }
                    if (!name && child.type === 'text_singleline') {
                        name = child.fields.text;
                    }
                    if (!description && child.type === 'text_multiline') {
                        description = child.fields.bodytext;
                    }
                }
                return {
                    name: name || '[No titles]',
                    description: description || '[No multiline text]'
                };
            case 'timeline':
                return {
                    name: `${ lab_api.v1.util.object.get('fields.title', item) || '[No title]' }`,
                    description: [...(item.children || [])].slice(0, 3).reverse().filter((itm) => !!itm.fields.title).map((itm) => lab_api.v1.util.string.stripTags(itm.fields.title || '')).join(' -- ') || '[No items]'
                };
            default:
                return {
                    name: `${ item.type }`,
                    description: ''
                };
        }
    }

    onItemProperties(uiInterface) {
        const query = uiInterface.getProperty('query');
        const useImagePlaceholder = query.type !== 'markup';
        return {
            title: {
                path: 'filtered.name',
                content: null
            },
            description: {
                path: 'filtered.description',
                content: null
            },
            definition: {
                useImagePlaceholder,
                children: [{
                    type: 'image',
                    limit: query.type === 'slideshow' ? 8 : 1
                }]
            }
        };
    }

});


/***/ }),

/***/ "./modules/collections/Simplestream.js":
/*!*********************************************!*\
  !*** ./modules/collections/Simplestream.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
    }

    onCreated(uiInterface, view) {
        uiInterface.setProperty('videolist', lab_api.v1.config.get('contentbox_settings.simplestream.videolist') || []);
        uiInterface.setProperty('query', {
            proxy: '/ajax/integration-services/proxy/feed/simplestream',
            site: lab_api.v1.properties.get('site').alias,
            search: ''
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/simplestream/header', {}, true);
        const searchBar = form.querySelector('.search-bar');
        const query = uiInterface.getProperty('query');
        searchBar.addEventListener('change', (event) => {
            query.search = searchBar.value;
            uiInterface.getData(true);
        }, false);
        form.addEventListener('submit', (event) => {
            event.stopPropagation();
            event.preventDefault();
        });
        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        if (query.search) {
            return `${ query.proxy }?site=${ query.site }&action=search&query=${ query.search }`;
        }
        return `${ query.proxy }?site=${ query.site }&action=list`;
    }

    onMapData(uiInterface, data) {
        if (!data.videos.length) { return []; }
        const result = [];
        const videolist = uiInterface.getProperty('videolist');
        const videos = [...videolist, ...data.videos];
        videos.forEach((item) => {
            result.push(this.mapItem(item));
        });
        return result;
    }

    mapItem(item) {
        let videoType;
        switch (item.type) {
            case 'REPLAY':
                videoType = 'replay';
                break;
            case 'live':
                videoType = 'live';
                break;
            default:
                videoType = 'vod';
        }
        return {
            type: 'simplestream',
            contentdata: {
                fields: {
                    videoId: item.id,
                    videoType,
                    idString: item.idString || 'GB001',
                    uvid: item.id || '',
                    categories: item.categories,
                    duration: item.duration,
                    image: item.image,
                    logo: item.logo,
                    logo_position: item.logo_position,
                    title: item.title
                }
            },
            filtered: {
                image: item.image ? `${ item.image }width=200` : '/images/placeholders/video_48.png'
            }
        };
    }

    onProperties(uiInterface) {
        return {
            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.
            displayAsGrid: true,    // Set to true for images etc.
            isMedia: true           // Set to true for images etc.
        };
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: null,
                content: null
            },
            description: {
                path: 'fields.title',
                content: null
            },
            imageUrl: {
                path: 'filtered.image'
            }
        };
    }

});


/***/ }),

/***/ "./modules/collections/Vimond.js":
/*!***************************************!*\
  !*** ./modules/collections/Vimond.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
    }

    onCreated(uiInterface, options) {
        const channelConfig = lab_api.v1.config.get('media.vimond.channel') || {};
        uiInterface.setProperty('channelConfig', channelConfig);
        uiInterface.setProperty('query', {
            search: '',
            limit: 30,
            currentToken: null,
            nextPageToken: null,
            prevPageToken: null,
            page: 1
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/vimond/header', {
            channelConfig: uiInterface.getProperty('channelConfig')
        }, true);
        const query = uiInterface.getProperty('query');

        const searchBar = form.querySelector('.search-bar');

        const update = () => {
            if (searchBar) {
                query.search = searchBar.value || '';
            }

            uiInterface.getData(true);
        };

        searchBar.addEventListener('change', update.bind(this));

        form.addEventListener('submit', (event) => {
            event.stopPropagation();
            event.preventDefault();
        });

        return form;
    }

    onFooter(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/vimond/footer', {}, true);

        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);

        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);

        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));
        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const siteAlias = lab_api.v1.site.getSite().alias;
        const args = [
            `num=${ query.limit }`,
            `site=${ siteAlias }`
        ];
        if (query.search) {
            args.push(`q=${ query.search }`);
        }
        if (query.currentToken) {
            args.push(`token=${ query.currentToken }`);
        }
        return `/ajax/integration/get-collection?_service=vimond&${ args.join('&') }`;
    }

    onMapData(uiInterface, data) {
        const query = uiInterface.getProperty('query');
        query.nextPageToken = null;
        query.prevPageToken = null;
        query.currentToken = null;

        if (!data.results || !data.results.length) { return []; }

        if (typeof (data.pagination) !== 'undefined') {
            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }
            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }
        }

        const results = [];

        data.results.forEach((item) => {
            results.push({
                type: 'vimond',
                contentdata: {
                    fields: {
                        vid: item.id.videoId ? item.id.videoId : item.id,
                        embedCode: item.embedCode,
                        playerUrl: item.playerUrl,
                        preview: item.preview,
                        title: item.title,
                        caption: item.caption,
                        byline: item.byline,
                        description: item.description
                    }
                }
            });
        });
        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;
        return results;
    }

    onProperties(uiInterface) {
        return {
            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.
            displayAsGrid: true,    // Set to true for images etc.
            isMedia: true           // Set to true for images etc.
        };
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: null,
                content: null
            },
            description: {
                path: 'fields.title',
                content: null
            },
            imageUrl: {
                path: 'fields.preview'
            }
        };
    }

    navigate(uiInterface, forward) {
        const query = uiInterface.getProperty('query');
        const active = forward ? 'nextPageToken' : 'prevPageToken';
        if (!query[active]) {
            return;
        }
        if (forward) {
            query.page++;
        } else {
            query.page--;
        }
        query.currentToken = query[active];
        uiInterface.setProperty('query', query);
        uiInterface.getData();
    }

});


/***/ }),

/***/ "./modules/collections/YouTube.js":
/*!****************************************!*\
  !*** ./modules/collections/YouTube.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor(api) {
        this.api = api;
    }

    onCreated(uiInterface, options) {
        const channelConfig = lab_api.v1.config.get('media.youtube.channel') || {};
        uiInterface.setProperty('channelConfig', channelConfig);
        uiInterface.setProperty('query', {
            search: '',
            limit: 30,
            id: null,
            cid: null, // Channel id
            onlyMyChannel: !!(channelConfig && channelConfig.defaultSearch),
            currentToken: null,
            nextPageToken: null,
            prevPageToken: null,
            page: 1
        });
    }

    onHeader(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/youtube/header', {
            channelConfig: uiInterface.getProperty('channelConfig')
        }, true);
        const query = uiInterface.getProperty('query');

        const expander = form.querySelector('a');
        const expanded = form.querySelector('.expanded');
        if (expander && expanded) {
            expander.addEventListener('click', (event) => {
                event.preventDefault();
                expanded.classList.toggle('lab-hidden');
            });
        }

        const searchBar = form.querySelector('.search-bar');
        const onlyMyChannel = form.querySelector('#my-channel');
        const videoId = form.querySelector('.video-id');
        const channelId = form.querySelector('.channel-id');

        const setOnlyChannel = (isSet) => {
            query.onlyMyChannel = isSet;

            videoId.disabled = isSet;
            channelId.disabled = isSet;

            videoId.style.opacity = isSet ? 0.5 : 1;
            channelId.style.opacity = isSet ? 0.5 : 1;
        };

        const update = () => {
            if (searchBar) {
                query.search = searchBar.value || '';
            }
            if (videoId) {
                query.id = videoId.value || '';
            }
            if (channelId) {
                query.cid = channelId.value || '';
            }

            uiInterface.getData(true);
        };

        if (onlyMyChannel) {
            setOnlyChannel(onlyMyChannel.checked);
            onlyMyChannel.addEventListener('change', () => {
                setOnlyChannel(onlyMyChannel.checked);
                update();
            });
        }

        searchBar.addEventListener('change', update.bind(this));
        videoId.addEventListener('change', update.bind(this));
        channelId.addEventListener('change', update.bind(this));

        form.addEventListener('submit', (event) => {
            event.stopPropagation();
            event.preventDefault();
        });

        return form;
    }

    onFooter(uiInterface, params) {
        const form = this.api.v1.util.dom.renderView('collections/youtube/footer', {}, true);

        uiInterface.setDomElement('previewPageElement', form.querySelector('.lab-footer-prev'));
        uiInterface.getDomElement('previewPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, false);
        }, false);

        uiInterface.setDomElement('nextPageElement', form.querySelector('.lab-footer-next'));
        uiInterface.getDomElement('nextPageElement').addEventListener('click', (event) => {
            this.navigate(uiInterface, true);
        }, false);

        form.querySelector('.lab-footer-reload').addEventListener('click', (event) => {
            uiInterface.getData(true);
        }, false);
        uiInterface.setDomElement('pageCounterElement', form.querySelector('.lab-footer-counter'));
        return form;
    }

    onGetUrl(uiInterface) {
        const query = uiInterface.getProperty('query');
        const channelConfig = uiInterface.getProperty('channelConfig');
        const siteAlias = lab_api.v1.site.getSite().alias;
        const args = [
            `num=${ query.limit }`,
            `site=${ siteAlias }`
        ];
        if (query.id) {
            args.push(`id=${ query.id }`);
        } else {
            if (query.search) {
                args.push(`q=${ query.search }`);
            }
            if (query.onlyMyChannel && channelConfig.id) {
                args.push(`cid=${ channelConfig.id }`);
            } else if (query.cid) {
                args.push(`cid=${ query.cid }`);
            }
        }
        if (query.currentToken) {
            args.push(`token=${ query.currentToken }`);
        }
        return `/ajax/integration/get-collection?_service=youtube&${ args.join('&') }`;
    }

    onMapData(uiInterface, data) {
        const query = uiInterface.getProperty('query');
        query.nextPageToken = null;
        query.prevPageToken = null;
        query.currentToken = null;

        if (!data.results || !data.results.length) { return []; }

        if (typeof (data.pagination) !== 'undefined') {
            if (data.pagination.nextPage) { query.nextPageToken = data.pagination.nextPage; }
            if (data.pagination.prevPage) { query.prevPageToken = data.pagination.prevPage; }
        }

        const results = [];

        data.results.forEach((item) => {
            results.push({
                type: 'youtube',
                contentdata: {
                    fields: {
                        vid: item.id.videoId ? item.id.videoId : item.id,
                        preview: item.snippet.thumbnails.high.url,
                        title: item.snippet.title,
                        description: item.snippet.description
                    }
                }
            });
        });
        uiInterface.getDomElement('pageCounterElement').innerHTML = query.page;
        return results;
    }

    onProperties(uiInterface) {
        return {
            autoItemSizing: true,  // Adjust grid-styling for items ('.lab-item') based on menu width.
            displayAsGrid: true,    // Set to true for images etc.
            isMedia: true           // Set to true for images etc.
        };
    }

    onItemProperties(uiInterface) {
        return {
            title: {
                path: null,
                content: null
            },
            description: {
                path: 'fields.title',
                content: null
            },
            imageUrl: {
                path: 'fields.preview'
            }
        };
    }

    // Todo: Fix pagination ...
    navigate(uiInterface, forward) {
        const query = uiInterface.getProperty('query');
        const active = forward ? 'nextPageToken' : 'prevPageToken';
        if (!query[active]) {
            return;
        }
        if (forward) {
            query.page++;
        } else {
            query.page--;
        }
        query.currentToken = query[active];
        uiInterface.setProperty('query', query);
        uiInterface.getData();
    }

});


/***/ }),

/***/ "./modules/collections/index.js":
/*!**************************************!*\
  !*** ./modules/collections/index.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticleTeasers": () => (/* reexport safe */ _ArticleTeasers_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "ArticlesAuto": () => (/* reexport safe */ _ArticlesAuto_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "ArticlesLatest": () => (/* reexport safe */ _ArticlesLatest_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "ArticlesNotice": () => (/* reexport safe */ _ArticlesNotice_js__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   "Audio": () => (/* reexport safe */ _Audio_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "Bylines": () => (/* reexport safe */ _Bylines_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "Graphics": () => (/* reexport safe */ _Graphics_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "JWPlayer": () => (/* reexport safe */ _JWPlayer_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "RemoteProduction": () => (/* reexport safe */ _RemoteProduction_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "Search": () => (/* reexport safe */ _Search_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "Simplestream": () => (/* reexport safe */ _Simplestream_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "Vimond": () => (/* reexport safe */ _Vimond_js__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   "YouTube": () => (/* reexport safe */ _YouTube_js__WEBPACK_IMPORTED_MODULE_3__["default"])
/* harmony export */ });
/* harmony import */ var _ArticlesLatest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ArticlesLatest.js */ "./modules/collections/ArticlesLatest.js");
/* harmony import */ var _ArticlesAuto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ArticlesAuto.js */ "./modules/collections/ArticlesAuto.js");
/* harmony import */ var _ArticleTeasers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ArticleTeasers.js */ "./modules/collections/ArticleTeasers.js");
/* harmony import */ var _YouTube_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./YouTube.js */ "./modules/collections/YouTube.js");
/* harmony import */ var _JWPlayer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./JWPlayer.js */ "./modules/collections/JWPlayer.js");
/* harmony import */ var _RemoteProduction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RemoteProduction.js */ "./modules/collections/RemoteProduction.js");
/* harmony import */ var _Bylines_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Bylines.js */ "./modules/collections/Bylines.js");
/* harmony import */ var _Search_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Search.js */ "./modules/collections/Search.js");
/* harmony import */ var _Simplestream_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Simplestream.js */ "./modules/collections/Simplestream.js");
/* harmony import */ var _Graphics_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Graphics.js */ "./modules/collections/Graphics.js");
/* harmony import */ var _Audio_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Audio.js */ "./modules/collections/Audio.js");
/* harmony import */ var _ArticlesNotice_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ArticlesNotice.js */ "./modules/collections/ArticlesNotice.js");
/* harmony import */ var _Vimond_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Vimond.js */ "./modules/collections/Vimond.js");















/***/ }),

/***/ "./modules/lib/PageData.js":
/*!*********************************!*\
  !*** ./modules/lib/PageData.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageData": () => (/* binding */ PageData)
/* harmony export */ });
/* harmony import */ var _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/ResourceHelper.js */ "./modules/lib/helpers/ResourceHelper.js");
/* harmony import */ var _helpers_StyleHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/StyleHelper.js */ "./modules/lib/helpers/StyleHelper.js");
/* harmony import */ var _helpers_AdsHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/AdsHelper.js */ "./modules/lib/helpers/AdsHelper.js");
/* harmony import */ var _helpers_SEOHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/SEOHelper.js */ "./modules/lib/helpers/SEOHelper.js");
/* harmony import */ var _helpers_CustomTags_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/CustomTags.js */ "./modules/lib/helpers/CustomTags.js");
/* harmony import */ var _helpers_ClientConfig_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/ClientConfig.js */ "./modules/lib/helpers/ClientConfig.js");


// import { DateTimeHelper } from './helpers/datetime/DateTimeHelper.js';





class PageData {

    constructor(api, pageApi) {
        this.api = api;
        this.page = pageApi;
    }

    set(model, view) {
        const data = this.export(model, view);
        for (const key of Object.keys(data)) {
            model.setFiltered(key, data[key]);
        }
    }

    export(model, view) {
        const exports = {};

        const NOW = new Date();
        const PAGE_TYPE = view.get('type').replace('page_', '');
        const PAGE_ID = view.get('id');
        const CUSTOMER_FRONT_URL = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
        const URL = CUSTOMER_FRONT_URL + view.get('fields.published_url');
        const URL_ENCODED = encodeURIComponent(URL);
        const IMAGE_SERVER = this.api.v1.properties.get('image_server');
        const IS_EDITOR = this.api.v1.app.mode.isEditor();
        const CANONICAL = this.getCanonicalUrl(model, PAGE_TYPE, PAGE_ID, CUSTOMER_FRONT_URL);
        const TAGPAGE_PATH = this.api.v1.config.get('tagPagePath') || '/tag/';
        const IS_TAGPAGE = (PAGE_TYPE === 'front' && (URL.endsWith(TAGPAGE_PATH.slice(0, -1)) || URL.indexOf(TAGPAGE_PATH) > -1));
        const IS_TAGPAGE_WITH_FRONTPAGE = (IS_TAGPAGE && !URL.endsWith(TAGPAGE_PATH.slice(0, -1)));

        // Metadata.
        exports.customer_front_url = CUSTOMER_FRONT_URL;
        exports.isEditMode = IS_EDITOR;
        exports.url = URL;
        exports.urlEncoded = URL_ENCODED;
        exports.specificUrl = CANONICAL;
        exports.image_server = IMAGE_SERVER;
        exports.pageType = PAGE_TYPE;
        exports.pageId = PAGE_ID;
        exports.is_article = PAGE_TYPE === 'article';
        exports.is_notice = PAGE_TYPE === 'notice';
        exports.is_front = PAGE_TYPE === 'front';
        exports.section = view.get('primaryTags.section') || view.get('fields.defaultsection');
        exports.device = this.api.v1.viewport.getName();
        exports.cmsVersion = this.api.v1.properties.get('app.version');
        exports.front_api_url = this.api.v1.properties.get('front_api_url');
        exports.xUaDevice = this.api.v1.properties.get('xUaDevice');
        exports.favicons = this.api.v1.config.get('favicons');
        exports.faviconList = this.api.v1.config.get('faviconList');
        exports.skipDefaultFont = this.api.v1.config.get('skipDefaultFont');
        exports.isDebug = this.api.v1.util.request.hasQueryParam('debug');
        exports.staticUrl = this.getStaticUrl(model, PAGE_TYPE, PAGE_ID, CUSTOMER_FRONT_URL);
        exports.customMetatags = this.getCustomMetatags();
        exports.customTags = _helpers_CustomTags_js__WEBPACK_IMPORTED_MODULE_4__.CustomTags.prepareForTemplate(this.api.v1.config.get('customTags') || [], PAGE_TYPE, IS_EDITOR);
        exports.footerSettings = this.api.v1.config.get('page_settings.footer');
        exports.rssDescriptionPrefix = this.api.v1.config.get('viewports.rss.descriptionPrefix');
        exports.is_tagpage = IS_TAGPAGE;
        exports.contentLanguage = lab_api.v1.config.get('contentLanguage');

        // Media.
        const logo = this.page.media.getLogo(view.getViewport());
        exports.logo = logo.current;
        exports.logo_sm = logo.sm;
        exports.logo_mm = logo.mm;

        // Note: Is this still used?
        exports.misc = this.api.v1.config.get('misc');

        // Google Translate
        const translate = {
            active: false,
            lang: this.api.v1.config.get('google_translate')
        };
        if (translate.lang && Array.isArray(translate.lang) && translate.lang.length) {
            translate.active = true;
        }
        exports.google_translate = translate;

        const seoHelper = new _helpers_SEOHelper_js__WEBPACK_IMPORTED_MODULE_3__.SEOHelper({
            pageType: PAGE_TYPE,
            canonical: CANONICAL,
            isTagpage: IS_TAGPAGE,
            isTagpageWithFrontpage: IS_TAGPAGE_WITH_FRONTPAGE,
            tagpagePath: TAGPAGE_PATH
        });

        // Set JSON-LD json string.
        const site_jsonld = seoHelper.generateSiteData(model);
        const jsonld = seoHelper.getStructuredData(model);

        exports.jsonld = JSON.stringify([site_jsonld, jsonld]);

        // Set SEO Data (title and description).
        const seoData = seoHelper.getSEOData(model);
        exports.seotitle = seoData.title;
        exports.seodescription = seoData.description;
        exports.seolanguage = seoData.language;

        // Set SoMe data with fallback
        if (PAGE_TYPE === 'article' || PAGE_TYPE === 'notice') {
            // SoMe title
            const sometitle = model.get('fields.sometitle') || model.get('fields.teaserTitle') || model.get('fields.title');
            if (sometitle) {
                exports.sometitle = this.api.v1.util.string.stripTags(sometitle);
            }

            // SoMe description
            const somedescription = model.get('fields.somedescription') || model.get('fields.teaserSubtitle') || model.get('fields.subtitle');
            if (somedescription && somedescription.length > 0) {
                exports.somedescription = this.api.v1.util.string.stripTags(somedescription);
            } else {
                let somedescriptionBodytext = model.get('fields.bodytext') || '';
                somedescriptionBodytext = this.api.v1.util.string.stripTags(somedescriptionBodytext);
                exports.somedescription = `${ somedescriptionBodytext.substring(0, 100) } ...`;
            }
        } else if (PAGE_TYPE === 'front') {
            const someimage = model.get('fields.someimage');
            if (someimage != null && someimage !== '') {
                exports.someimage = `${ IMAGE_SERVER }/${ someimage }.webp?width=1200&height=630`;
            }
            exports.sometitle = model.get('fields.sometitle') || model.get('fields.name');
            exports.somedescription = model.get('fields.somedescription') || '';
        }

        // Social
        exports.social = {
            facebook: `https://www.facebook.com/sharer.php?u=${  URL_ENCODED }`,
            twitter: `https://twitter.com/intent/tweet?url=${  URL_ENCODED }`,
            // google: 'https://plus.google.com/share?url=' + urlEncoded,
            mail: `mailto:?subject=${  encodeURIComponent(this.api.v1.util.string.stripTags(view.get('fields.title')))  }&body=${  encodeURIComponent(this.api.v1.util.string.stripTags(view.get('fields.subtitle')))  }%0D${  URL_ENCODED }`,
            linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${ URL_ENCODED }`,
            threads: `https://threads.net/intent/post?text=${ URL_ENCODED }`,
            copyLink: `navigator.clipboard.writeText("${ URL }");`,
            glimta: `https://glimta.com/unlock?link=${ URL_ENCODED }`,
            talandeWebb: `ReachDeck.panel.toggleBar();`,
            bluesky: `https://bsky.app/intent/compose?text=${ encodeURIComponent(`${ exports.sometitle }\n`) }${ URL_ENCODED }`
        };

        // Set article tags and byline as comma separated string
        if (PAGE_TYPE === 'article') {
            const ignoredTags = this.api.v1.config.get('page_settings.article.ignoredTags') || [];
            const ignoredTagPrefix = this.api.v1.config.get('page_settings.article.ignoredTagPrefix') || [];
            const tags = (model.get('tags') || []).filter((tag) => !ignoredTags.includes(tag)).filter((tag) => {
                for (const prefix of ignoredTagPrefix) {
                    if (tag.startsWith(prefix)) {
                        return false;
                    }
                }
                return true;
            });

            exports.tagsString = tags.toString();
            let tagsStringCommaSeparated = '';
            tags.forEach((tag, index) => {
                tagsStringCommaSeparated += `"${ tag.replace('"', '\'') }"`;
                if (index < tags.length - 1) tagsStringCommaSeparated += ', ';
            });
            exports.tagsStringCommaSeparated = tagsStringCommaSeparated;

            const bylines = this.api.v1.model.query.getChildrenOfType(model, 'byline', true);
            if (bylines) {
                const bylinesStringCommaSeparated = bylines
                    .map((byline) => `"${ byline.get('fields.firstname') } ${ byline.get('fields.lastname') }"`)
                    .join(', ');
                exports.bylinesStringCommaSeparated = bylinesStringCommaSeparated;
            }
        }

        // Set article published time
        if (PAGE_TYPE === 'article') {
            if (model.get('fields.published')) {
                exports.published = new Date(parseInt(model.get('fields.published'), 10) * 1000).toISOString();
                exports.publishedTimestamp = model.get('fields.published');
            }
        }

        // Site.
        exports.site = this.api.v1.site.getSite();
        exports.siteJSON = JSON.stringify(exports.site);
        exports['site.domain_no_protocol'] = exports.site.domain.split('://').pop();
        exports.siteAlias = exports.site.alias;
        exports.fullUrl = exports.site.domain;
        exports[`site_is_${ exports.siteAlias }`] = true;

        const resourcesHandler = this.page.resources;

        if (!IS_EDITOR && exports.is_article && this.api.v1.config.get('displayReadProgress.active') && view.get('fields.displayReadProgress')) {
            exports.readProgress = resourcesHandler.scripts.getProgressReader();
        }

        exports.siteStylesheetList = _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__.ResourceHelper.getSiteStylesWithFallback(exports.siteAlias);
        Sys.logger.debug(`ViewSupport: Will include ${ exports.siteStylesheetList.length } configured stylesheet(s): "${ exports.siteStylesheetList.join(', ') }".`);

        exports.siteFiles = resourcesHandler.scripts.getSiteFiles(model, view, exports.siteAlias, PAGE_TYPE, IS_EDITOR);
        exports.modules = resourcesHandler.scripts.getModules(model, view, exports.siteAlias, PAGE_TYPE, IS_EDITOR);

        if (!IS_EDITOR) {
            exports.analytics = resourcesHandler.analytics.get(exports);
            exports.widgets = {
                strossle: this.api.v1.config.get('widgets.strossle.strossle_id')
            };
            exports.consent = {
                cookieconsent: this.api.v1.config.get('consent.cookieconsent.show'),
                cookieconsent_culture: this.api.v1.config.get('consent.cookieconsent.culture') || 'NB'
            };

            if (this.api.v1.config.get('cookieConsent.enabled')) {
                resourcesHandler.scripts.required.push({
                    url: '/view-resources/public/common/cookieConsent.js',
                    requireDom: false
                });
            }

            if (this.api.v1.viewport.getName() === 'desktop' && view.get('fields.style_slidein')) {
                exports.style_slidein = true;
                resourcesHandler.scripts.required.push({
                    url: '/view-resources/public/common/SlideIn/SlideIn.js',
                    requireDom: false
                });
            }

            const adEnv = this.api.v1.config.get('adEnvironment') || {};
            const hideAds = view.get('fields.hideAds') === '1';
            const disableSkyscraper = view.get('fields.hideSkyscraperAds') === '1' || false;
            const disableTopBanner = view.get('fields.hideTopBannerAd') === '1' || false;

            if (!hideAds && adEnv && adEnv.name === 'adnuntius') {
                try {
                    exports.adnuntius = _helpers_AdsHelper_js__WEBPACK_IMPORTED_MODULE_2__.AdsHelper.getAdnuntiusSettings(this.api, model, view, adEnv, exports.site, disableSkyscraper, disableTopBanner);
                } catch (error) {
                    Sys.logger.warn(`[PageData] Failed to prepare Adnuntius ads: ${ error.toString() }`);
                }
            }
            if (!hideAds && adEnv && adEnv.name === 'google') {
                try {
                    exports.googleAds = _helpers_AdsHelper_js__WEBPACK_IMPORTED_MODULE_2__.AdsHelper.getGoogleSettings(this.api, model, view, adEnv, exports.site, disableSkyscraper, disableTopBanner);
                } catch (error) {
                    Sys.logger.warn(`[PageData] Failed to prepare Google ads: ${ error.toString() }`);
                }
            }

        }

        if (this.api.v1.util.request.hasQueryParam('fontpreview')) {
            exports.fontpreview = this.api.v1.util.request.getQueryParam('fontpreview');
            exports.analytics = null;
        }

        exports.page_settings = this.page.settings.get({
            // Treat notice as an article to use the same settings (admin, config from view)
            pageType: PAGE_TYPE === 'notice' ? 'article' : PAGE_TYPE,
            socialLinks: exports.social
        });

        // Comments
        if (PAGE_TYPE === 'article') {
            const configForComments = this.api.v1.config.get('comments_provider.hideCommentsIfPaywall') || false;
            const paywallState = this.api.v1.properties.get('paywall') || {};
            const paywallMode = lab_api.v1.app.mode.isFront() && paywallState.active && !paywallState.hasAccess;
            const hideComments = paywallMode && configForComments;
            const DISPLAY = IS_EDITOR === false && hideComments === false;

            if (view.get('fields.showcomments') && !hideComments) {
                if (this.api.v1.config.get('comments_provider.facebook')) {
                    const facebookAppId = this.api.v1.config.get('comments_provider.facebook.app_id');
                    if (facebookAppId) {
                        exports.facebook = {
                            display: DISPLAY,
                            displayPlaceholder: IS_EDITOR,
                            appId: facebookAppId,
                            pageId: PAGE_ID,
                            url: exports.fullUrl + (PAGE_TYPE === 'article' ? `/a/${  PAGE_ID }` : '')
                        };
                        exports.displayComments = true;
                    }
                }

                if (this.api.v1.config.get('comments_provider.disqus')) {
                    const enableComments = this.api.v1.config.get('comments_provider.disqus.enable');
                    const disqusScript = this.api.v1.config.get('comments_provider.disqus.script');
                    if (enableComments) {
                        exports.disqus = {
                            display: DISPLAY,
                            displayPlaceholder: IS_EDITOR,
                            canonical: CANONICAL,
                            pageId: PAGE_ID,
                            script: disqusScript
                        };
                        exports.displayComments = true;
                    }
                }

                const commentoConfig = this.api.v1.config.get('comments_provider.commento');
                if (commentoConfig) {
                    if (commentoConfig.enable) {
                        exports.commento = {
                            display: DISPLAY,
                            displayPlaceholder: IS_EDITOR,
                            canonical: CANONICAL,
                            usePageId: commentoConfig.usePageId,
                            pageId: PAGE_ID,
                            script: commentoConfig.script,
                            cssOverride: commentoConfig.cssOverride,
                            descriptionText: commentoConfig.descriptionText
                        };
                        exports.displayComments = true;
                    }
                }

                const hyvor = lab_api.v1.config.get('comments_provider.hyvor');
                if (hyvor) {
                    if (hyvor.websiteId) {
                        const publishedTimestamp = model.get('fields.published') || 0;
                        exports.hyvor = {
                            display: DISPLAY,
                            displayPlaceholder: IS_EDITOR,
                            websiteId: hyvor.websiteId,
                            pageId: (publishedTimestamp > 1646908200 ? PAGE_ID : false)
                        };
                        if (hyvor.hidePageIdBeforeDate && publishedTimestamp < hyvor.hidePageIdBeforeDate) {
                            exports.hyvor.pageId = '';
                        }
                        exports.displayComments = true;
                    }
                }

                // Ifrågasätt
                const ifragasatt = lab_api.v1.config.get('comments_provider.ifragasatt');
                if (ifragasatt) {
                    exports.ifragasatt = {
                        display: DISPLAY,
                        displayPlaceholder: IS_EDITOR,
                        customerId: ifragasatt.customer_id,
                        articleId: `article${  PAGE_ID }`
                    };

                    exports.displayComments = true;
                }
            }
        }

        // const dateHandler = new DateTimeHelper(lab_api.v1.config.get('lang'));
        // exports.currentDateNo = dateHandler.format(NOW, '{{dd}}. {{MMMM}} {{YYYY}}');

        exports.menus = this.page.menus.get({
            defaultSection: view.get('fields.defaultsection'),
            section: view.get('primaryTags.section')
        });

        exports.style_definitions = _helpers_StyleHelper_js__WEBPACK_IMPORTED_MODULE_1__.StyleHelper.getStyleDefinitions(this.api);
        exports.css_build = _helpers_StyleHelper_js__WEBPACK_IMPORTED_MODULE_1__.StyleHelper.getInlineCSS(this.api);
        exports.css_variables = _helpers_StyleHelper_js__WEBPACK_IMPORTED_MODULE_1__.StyleHelper.getCssVariables(this.api);
        exports.contact = this.api.v1.config.get('contact');

        const norobots = !!view.get('fields.norobots'); // Can be true, false, "", "1"
        const hideFromFp = view.get('fields.hidefromfp_time');
        const nowInSeconds = Math.round(NOW.getTime() / 1000);
        exports.norobots = norobots || (hideFromFp && hideFromFp <= nowInSeconds) || false;

        if (PAGE_TYPE === 'article') {
            // Is this an embeddable article?
            if (this.api.v1.config.get('embeddable.active')) {
                exports.embeddable = {
                    active: true,
                    display: !!view.get('fields.displayEmbedButton') && exports.device !== 'embed',
                    aboveBodytext: !!view.get('fields.displayEmbedButtonAboveBodytext') && exports.device !== 'embed',
                    isFullContent: this.api.v1.util.request.getQueryString().indexOf('lab_content=full') > -1,
                    hasParallax: this.api.v1.model.query.hasChildOfType(model, 'parallax', true)
                };
            }
        }

        // Handle required scripts.
        Sys.logger.debug(`ViewSupport: Will include ${ resourcesHandler.scripts.required.length } configured script(s): "${ resourcesHandler.scripts.required.map((item) => item.url).join(', ') }".`);
        resourcesHandler.scripts.required.forEach((script) => {
            if (!script.placeholderKey && script.requireDom) {
                script.placeholderKey = 'requireDom';
            }
            // Template friendly format
            if (script.placeholderKey) {
                const { placeholderKey } = script;
                script.placeholderKey = {};
                script.placeholderKey[placeholderKey] = true;
            }
        });
        exports.siteScriptList = resourcesHandler.scripts.required;
        exports.paywall = this.getPaywallInfo(model, IS_EDITOR);

        exports.simplestreamEnabled = lab_api.v1.config.get('contentbox_settings.simplestream') || false;

        // Mailmojo
        if (exports.device === 'mailmojo') {
            this.setDefaultMailmojoData(model, view);
        }

        // Age disclaimer
        if (PAGE_TYPE === 'article') {
            const ageWarningsConf = lab_api.v1.config.get('page_settings.article.ageWarnings');
            if (Array.isArray(ageWarningsConf)) {
                const publishedTimestamp = model.get('fields.published');
                if (publishedTimestamp) {
                    const ageItem = this.getAgeWarningItem(publishedTimestamp, ageWarningsConf);
                    if (ageItem) {
                        model.setFiltered('ageWarning', ageItem);
                    }
                }
            }
        }

        // Feature flags
        exports.featureFlags = {
            responsive_mobile_fonts: !lab_api.v1.util.featureFlags.enabled('Disable responsive mobile fonts', PAGE_TYPE) // Default enabled
        };

        // Make config object available for client side rendering
        exports.clientSideConfig = JSON.stringify(_helpers_ClientConfig_js__WEBPACK_IMPORTED_MODULE_5__.ClientConfig.buildConfig(this.api));

        return exports;
    }

    getAgeWarningItem(timestamp, config) {
        // Validate input and sort by property "years". Largest numbers first.
        const items = Object.values(config)
            .filter((item) => !!item.years && !!item.label)
            .sort((a, b) => b.years - a.years);
        const articleDate = new Date(timestamp * 1000);
        const diffMs = Date.now() - articleDate;
        const ageDate = new Date(diffMs); // miliseconds from epoch
        const diffYears = Math.abs(ageDate.getUTCFullYear() - 1970);
        for (const item of items) {
            if (diffYears >= item.years) {
                return item;
            }
        }
        return null;
    }

    setDefaultMailmojoData(model, view) {
        const language = lab_api.v1.config.get('lang') || 'no';
        model.setFiltered('lang', language);
    }

    getCanonicalUrl(model, pageType, pageId, frontUrl) {
        const canonical = model.get('fields.lab_canonical');
        if (canonical) {
            return canonical;
        }
        if (pageType === 'front') {
            const hostpath = model.get('fields.hostpath');
            if (hostpath) {
                return `${ frontUrl }/${ hostpath === 'index' ? '' : hostpath }`;
            }
        }
        return `${ frontUrl + model.get('fields.published_url') }`;
    }

    getStaticUrl(model, pageType, pageId, frontUrl) {
        if (pageType === 'front') {
            const redirectedUrl = lab_api.v1.util.request.getHeader('X-Labrador-404-Referer');
            if (redirectedUrl) {
                return `${ frontUrl }${ redirectedUrl }`;
            }

            const hostpath = model.get('fields.hostpath');
            if (hostpath) {
                return `${ frontUrl }/${ hostpath === 'index' ? '' : hostpath }`;
            }
            return `${ frontUrl + model.get('fields.published_url') }`;
        }
        return (`${ lab_api.v1.properties.get('site').domain }/a/${ pageId }`);
    }

    // (array) Supports two formats
    // customMetatags [{ key1: 'val1', key2: 'val2' }]
    // customMetatagsKeyVal: [[ { key: 'key3', value: 'val3' }, { key: 'key4', value: 'val4' }]]
    // Return value for the above examples:
    // [[ { key: 'key1', value: 'val1' }, { key: 'key2', value: 'val2' } ], [ { key: 'key3', value: 'val3' }, { key: 'key4', value: 'val4' } ]]
    // Result in template: <meta key1="val1" key2="val2" > <meta key3="val3" key4="val4" >
    // Config customMetatagsKeyVal can be set in admin-tool.
    getCustomMetatags() {
        const metatags = lab_api.v1.config.get('customMetatags') || [];
        const metatagsKeyVal = lab_api.v1.config.get('customMetatagsKeyVal') || [];
        const result = [];
        for (const pairs of metatags) {
            const keyVals = Object.keys(pairs).map((key) => ({ key, value: pairs[key] }));
            result.push(keyVals);
        }
        for (const tag of metatagsKeyVal) {
            if (tag.length) {
                result.push(tag);
            }
        }
        return result;
    }

    getPaywallInfo(model, isEditor) {
        const settings = lab_api.v1.properties.get('paywall');
        const enabled = !isEditor && model.get('fields.paywall') === '1';
        const provider = lab_api.v1.config.get('paywall.provider', { site: lab_api.v1.site.getSite().alias }) || 'internal';
        const enabledImage = !isEditor && model.get('fields.paywallSalesImage') === '1';

        // Shareable article
        const shareable = !isEditor && enabled && settings.hasAccess && model.get('fields.paywallShareable') === '1';
        let shareableArticle;
        if (model.get('fields.paywallShareable') === '1') {
            shareableArticle = lab_api.v1.config.getConfig('pages.localisation.data.items.paywall.items.shareableArticle.items') || {};
            for (const key of Object.keys(shareableArticle)) {
                shareableArticle[key] = lab_api.v1.locale.get(`paywall.shareableArticle.${ key }`) || '';
            }
        }

        return {
            enabled,
            settings,
            provider,
            shareable,
            shareableArticle,
            hasAccess: enabled && settings.active ? settings.hasAccess : true,
            hidePaywallOffers: this.api.v1.util.request.hasQueryValue('lab_opts', 'paywall_loginonly'),
            paywallSalesImage: model.get('fields.paywallSalesImage'),
            paywallSalesPitchContent: model.get('fields.paywallSalesPitchContent'),
            paywallSalesPitchTitle: model.get('fields.paywallSalesPitchTitle'),
            paywallLayoutType: model.get('fields.paywallPreview.paywallLayoutType'),
            requiredProducts: JSON.stringify(this.api.v1.properties.get('app.paywall.requiredProducts') || [])
        };
    }

}


/***/ }),

/***/ "./modules/lib/api/PageAPI.js":
/*!************************************!*\
  !*** ./modules/lib/api/PageAPI.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageAPI": () => (/* binding */ PageAPI)
/* harmony export */ });
/* harmony import */ var _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/ResourceHelper.js */ "./modules/lib/helpers/ResourceHelper.js");


class PageAPI {

    constructor(api) {
        this.api = api;
        this.pageType = this.api.v1.model.root.getType();
    }

    get media() {
        return {
            // (object) { current, sm }
            getLogo: (viewport = this.api.v1.viewport.getName()) => {
                const logo = this.api.v1.config.get('logo') || {};
                const activeLogo = logo.uploadedFileUrl ? {
                    src: logo.uploadedFileUrl, href: logo.default.href, type: 'img', size: { width: logo.logoWidth }, title: logo.default.title, isCustom: true
                } : logo[viewport] || logo.default || null;
                if (activeLogo) {
                    if (activeLogo.type === 'img') {
                        activeLogo.is_img = true;
                    } else if (activeLogo.type === 'svg') {
                        activeLogo.is_svg = true;
                    }
                }

                const logo_sm = logo.uploadedFileUrl ? { src: logo.uploadedFileUrl, href: logo.default.href, size: { width: logo.logoWidth }, title: logo.default.title, isCustom: true } : logo.standalone || logo.mailmojo || null;
                const logo_mm = logo.uploadedMailmojoFileUrl ? { src: logo.uploadedMailmojoFileUrl, href: logo.default.href, size: { width: logo.mailmojoLogoWidth }, title: logo.default.title, isCustom: true } : logo.mailmojo || logo.standalone || null;

                return {
                    current: activeLogo,
                    sm: logo_sm,
                    mm: logo_mm
                };
            }
        };
    }

    get menus() {
        return {
            get: ({ section, defaultSection } = {}, identifier) => {
                const results = {};
                const menus = Object.values(this.api.v1.config.get('menus') || {});
                if (menus.length < 1) return null;

                const validateItems = (items) => {
                    items.forEach((item) => {
                        item.selected = (item.section === section || item.section === defaultSection);
                        if (!('target' in item)) item.target = '_self';
                        if (!('selector' in item)) item.selector = '';
                        if (!('children' in item)) item.children = [];
                        if (item.children.length > 0) {
                            item.hasChildren = true;
                            validateItems(item.children);
                        }
                    });
                };

                menus.forEach((menu) => {
                    validateItems(menu.menuItems);
                    const name = menu.type || menu.menuName;
                    results[name] = {
                        items: menu.menuItems,
                        type: menu.type,
                        selector: menu.selector || ''
                    };
                });

                return identifier ? results[identifier] : results;
            }
        };
    }

    get misc() {
        return {

        };
    }

    get resources() {
        const scripts = {
            required: [],
            getProgressReader() {
                scripts.required.push({
                    url: '/view-resources/public/common/ReadProgress.js',
                    requireDom: false
                });
                return {
                    active: true,
                    minElementCount: lab_api.v1.config.get('displayReadProgress.minElementCount') || 25
                };
            },
            getSiteFiles(model, view, alias, pageType, isEditor) {
                const siteScripts = _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__.ResourceHelper.getSiteScriptsWithFallback(alias, pageType, isEditor);
                const commonScripts = _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__.ResourceHelper.getCommonScripts(pageType, isEditor);

                scripts.required.push(...siteScripts, ...commonScripts);

                return {
                    js: _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__.ResourceHelper.getSiteFilesForContentboxes(model, view, 'js', scripts.required.map((script) => script.url)),
                    css: _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__.ResourceHelper.getSiteFilesForContentboxes(model, view, 'css')
                };
            },
            // (array)
            getModules(model, view, alias, pageType, isEditor) {
                return _helpers_ResourceHelper_js__WEBPACK_IMPORTED_MODULE_0__.ResourceHelper.getCommonScripts(pageType, isEditor, true);
            }
        };

        const analytics = {
            get: (exports) => {
                const kilkaya = (lab_api.v1.config.get('analytics.kilkaya') || []).map((item) => {
                    const itm = { ...item };
                    if (itm.id && typeof itm.id === 'string' && itm.id.trim().endsWith('.js')) {
                        itm.url = itm.id;
                    }
                    return itm;
                });

                // Support old data in object format
                let adnuntiusConnect = this.api.v1.config.get('analytics.adnuntiusConnect');
                if (adnuntiusConnect && (typeof adnuntiusConnect === 'object' && !Array.isArray(adnuntiusConnect)) && Object.keys(adnuntiusConnect).length) {
                    adnuntiusConnect = new Array(adnuntiusConnect);
                }

                const items = {
                    google: this.api.v1.config.get('analytics.google.tracking_id'),
                    google_gtm: this.api.v1.config.get('analytics.google.gtm'),
                    comscore: this.api.v1.config.get('analytics.comscore.comscore_id'),
                    adnuntiusConnect,
                    adnuntiusConnectCMP: this.api.v1.config.get('analytics.adnuntiusConnectCMP'),
                    kilkaya,
                    kilkayaSettings: this.api.v1.config.get('analytics.kilkayaSettings'),
                    io: this.api.v1.config.get('analytics.io.tracking_id')
                };

                const dataLayer = analytics.getDataLayer(exports);
                if (dataLayer.dataLayer) items.dataLayer = dataLayer.dataLayer;
                if (dataLayer.usesJWTCookieData) items.usesJWTCookieData = dataLayer.usesJWTCookieData;

                return items;
            },
            getDataLayer: (exports) => {
                const dataLayer = this.api.v1.config.get('analytics.google.dataLayer');
                let usesJWTCookieData = false;

                if (dataLayer && Array.isArray(dataLayer) && dataLayer.length) {
                    dataLayer.forEach((item) => {
                        let value = null;

                        // eslint-disable-next-line default-case
                        switch (item.source) {
                            case 'fixed':
                                value = (item.value || '').trim();
                                break;
                            case 'config':
                                value = this.api.v1.properties.get(item.value);
                                break;
                            case 'jwtcookie':
                                item.isJWTCookie = true;
                                value = item.value;
                                usesJWTCookieData = true;
                                break;
                            case 'article_authors':
                                value = `${ (exports.bylinesStringCommaSeparated || '').replace(/"/g, '') }`;
                                break;
                            case this.pageType.replace('page_', ''):
                                value = this.api.v1.model.query.getRootModel().get(item.value);
                                break;
                            default:
                                Sys.logger.warn(`Unsupported dataLayer source: "${ item.source }"`);
                                break;
                        }

                        item.value = (value === null ? '' : value.toString());
                    });

                    const lastIndex = dataLayer.map((item) => item.value.length > 0).lastIndexOf(true);
                    if (dataLayer[lastIndex]) {
                        dataLayer[lastIndex].last = true;
                    }
                }

                return {
                    dataLayer,
                    usesJWTCookieData
                };
            }
        };

        return {
            scripts,
            analytics
        };
    }

    get settings() {
        return {
            get: (params = {}) => {
                const socialDisplay = this.api.v1.config.get(`page_settings.${ params.pageType }.social.display`) || {};

                const socialDisplayBodytextBefore = this.api.v1.model.query.getRootModel().get('fields.show_social_bodytext_before');
                const socialDisplayBodytextAfter = this.api.v1.model.query.getRootModel().get('fields.show_social_bodytext_after');
                const socialDisplayHeader = this.api.v1.model.query.getRootModel().get('fields.show_social_header');

                if (socialDisplayBodytextBefore !== null) {
                    socialDisplay.bodytext_before = !!socialDisplayBodytextBefore;
                }

                if (socialDisplayBodytextAfter !== null) {
                    socialDisplay.bodytext_after = !!socialDisplayBodytextAfter;
                }

                if (socialDisplayHeader !== null) {
                    socialDisplay.header = !!socialDisplayHeader;
                }

                const socialItemsConfig = this.api.v1.config.get(`page_settings.${ params.pageType }.social.items`) || {};
                const showTagsSetting = this.api.v1.config.get(`page_settings.${ params.pageType }.showTags`);
                const socialItems = Object.keys(socialItemsConfig).filter((key) => !!socialItemsConfig[key].display).map((key) => ({
                    name: key,
                    icon: socialItemsConfig[key].icon || '',
                    url: params.socialLinks[key] || '',
                    shareText: socialItemsConfig[key].shareText || '',
                    isButton: socialItemsConfig[key].isButton || false
                }));
                return {
                    page_type: params.pageType,
                    social: {
                        display: {
                            bodytext_before: socialItems.length > 0 && !!socialDisplay.bodytext_before,
                            bodytext_after: socialItems.length > 0 && !!socialDisplay.bodytext_after,
                            header: socialItems.length > 0 && !!socialDisplay.header
                        },
                        items: socialItems
                    },
                    showTags: showTagsSetting !== false
                };
            }
        };
    }

}


/***/ }),

/***/ "./modules/lib/editor/ColorUtils.js":
/*!******************************************!*\
  !*** ./modules/lib/editor/ColorUtils.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorUtils": () => (/* binding */ ColorUtils)
/* harmony export */ });
class ColorUtils {

    /**
     * Convert a hex color to RGB
     * @param {String} hexColor Input color in HEX format (e.g. #ff0000 or ff0000)
     * @returns {Array} RGB color array (e.g. [255, 0, 0])
     */
    static hex2rgb(hexColor) {
        let color = typeof hexColor === 'string' ? hexColor.trim() : '';
        if (!color.startsWith('#')) {
            color = `#${ color }`;
        }
        return [
            parseInt(color.slice(1, 3), 16),
            parseInt(color.slice(3, 5), 16),
            parseInt(color.slice(5, 7), 16)
        ];
    }

    /**
     * Get color brightness
     * @param {Array} rgbArray Input-color in RGB format
     * @returns {Integer} Brightness value from 0 (dark) to 255 (light), null on error
     */
    static getBrightness(rgbArray) {
        if (!Array.isArray(rgbArray) || rgbArray.length !== 3) {
            return null;
        }
        return parseInt(((rgbArray[0] * 299) + (rgbArray[1] * 587) + (rgbArray[2] * 114)) / 1000, 10);
    }

}


/***/ }),

/***/ "./modules/lib/editor/ImageUploadProcessor.js":
/*!****************************************************!*\
  !*** ./modules/lib/editor/ImageUploadProcessor.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageUploadProcessor": () => (/* binding */ ImageUploadProcessor)
/* harmony export */ });
// Let user add caption, alt-text etc. on uploaded images.
// Todo: When supported: Add button to publish image to front-servers
// Captions can be edited by the app CaptionEditor:
// this.api.v1.apps.start('CaptionEditor', { id: 123456 });

class ImageUploadProcessor {

    constructor(api, callbacks = {}) {
        this.api = api;
        this.callbacks = {
            modified: callbacks.modified || null
        };
        this.lastEditId = null;
        this.template = `<div class="lab-fileuploader" data-lab-content="1">
            <div class="lab-formgroup">
                <ul class="lab-grid lab-list lab-space-above-large">
                    {{ #items }}
                    <li class="lab-grid-large-4 item-no-{{ id }}">
                        <img src="{{ imageServer }}/?imageId={{ id }}&width={{ width }}" class="lab-space-above-small" style="max-height: 180px; max-width: 180px; margin: 0 auto; display: block;">
                    </li>
                    <li class="lab-grid-large-8 lab-space-below-medium">
                        <p class="lab-para"><strong>Filename: </strong>{{ fileName }}</p>
                        <p class="lab-para"><strong>ID: </strong>{{ id }}</p>
                        <p class="lab-para"><strong>Caption: </strong><span data-caption-{{ id }}>{{{ caption }}}{{ ^caption }}<span class="lab-label">No caption</span>{{ /caption }}</span></p>
                        <p class="lab-para"><strong>Byline: </strong><span data-byline-{{ id }}>{{{ byline }}}{{ ^byline }}<span class="lab-label">No byline</span>{{ /byline }}</span></p>
                        <p class="lab-align-right"><input type="button" value="Edit" data-id="{{ id }}"></p>
                    </li>
                    {{ /items }}
                </ul>
            </div>
        </div>`;
        this.imageServer = this.api.v1.properties.get('image_server');
    }

    imagesUploaded(items) {
        let isDisplayed = false;
        this.modal = this.api.v1.ui.modal.dialog({
            content: {
                header: 'Uploaded images',
                markup: this.getMarkup(items)
            },
            footer: {
                buttons: [
                    {
                        value: 'Media Library',
                        type: 'button',
                        id: 'media-library'
                    },
                    {
                        value: 'OK',
                        type: 'submit',
                        highlight: true
                    }
                ]
            },
            callbacks: {
                didDisplay: (modal) => {
                    if (this.lastEditId) {
                        const item = modal.getMarkup().querySelector(`.item-no-${ this.lastEditId }`);
                        if (item && typeof item.scrollIntoViewIfNeeded === 'function') {
                            item.scrollIntoViewIfNeeded();
                        }
                        this.lastEditId = null;
                    }
                    if (isDisplayed) { return; }
                    for (const btn of modal.getMarkup().querySelectorAll('ul input')) {
                        btn.addEventListener('click', (event) => {
                            this.editImage(event.target.getAttribute('data-id'));
                        }, false);
                    }
                    const link = modal.getMarkup().querySelector('#media-library');
                    link.addEventListener('click', (event) => {
                        modal.close();
                        this.api.v1.collection.display({ name: 'MediaImages', options: { reload: true } });
                    }, false);
                    isDisplayed = true;
                }
            }
        });
    }

    editImage(id) {
        // Start caption-editor and also update UI in modal with result.
        this.api.v1.apps.start('CaptionEditor', {
            id,
            callback: (fields) => {
                this.lastEditId = id;
                for (const key of Object.keys(fields)) {
                    const el = this.modal.markup.querySelector(`span[data-${ key }-${ id }]`);
                    if (el) { el.innerHTML = fields[key]; }
                }
                this.updateCollection('MediaImages', { id, fields });
            }
        });
    }

    // Update caption/byline in collection
    updateCollection(name, data) {
        const uiInterface = lab_api.v1.collection.get(name);
        if (uiInterface) {
            const contentList = uiInterface.getContentList();
            for (const item of contentList) {
                // eslint-disable-next-line eqeqeq
                if (item.model.get('instance_of') == data.id) {
                    for (const field of Object.keys(data.fields)) {
                        const key = field === 'caption' ? 'imageCaption' : field;
                        item.model.set(`fields.${ key }`, data.fields[field], {
                            notify: false, registerModified: false, save: false, undoable: false
                        });
                    }
                }
            }
        }
    }

    getMarkup(items) {
        return this.api.v1.util.dom.renderTemplate(this.template, {
            items,
            imageServer: this.imageServer,
            width: 180
        });
    }

}


/***/ }),

/***/ "./modules/lib/editor/MarkupValidator.js":
/*!***********************************************!*\
  !*** ./modules/lib/editor/MarkupValidator.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MarkupValidator": () => (/* binding */ MarkupValidator)
/* harmony export */ });
class MarkupValidator {

    /**
     * Fix missing end-tags etc. by inserting markup into a template and read out the (fixed) result.
     * @param {String} input The markup to validate
     * @returns {Promise<String|Error>} The validated, fixed markup
     */
    validate(input = '')  {
        return new Promise((resolve, reject) => {
            try {
                // Use a template creating a DocumentFragment.
                // This prevents the client from rendering any markup (including loading scripts)
                // until the element actually is inserted into the DOM.
                // If scripts are loaded they may modify the markup.
                const tmpEl = document.createElement('template');
                tmpEl.innerHTML = input.trim();
                resolve(tmpEl.innerHTML.trim());
            } catch (error) {
                reject(error);
            }
        });
    }

    // (array)
    createElements(markup) {
        const fragment = document.createRange().createContextualFragment(markup);
        return [...fragment.children];
    }

}


/***/ }),

/***/ "./modules/lib/editor/Namespace.js":
/*!*****************************************!*\
  !*** ./modules/lib/editor/Namespace.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Namespace": () => (/* binding */ Namespace)
/* harmony export */ });
const Namespace = {

    // Create a globally available object for use by the view in the editor
    expose: () => {
        // Generate a citation article from a copy of text and source
        lab_api.v1.ns.set('contextualmenu.callbacks.generateTopicSummary', (model, view, menuItem, params) => {
            lab_api.v1.apps.start('TopicSummary', model, view);
        });

        // Generate a citation article from a copy of text and source
        lab_api.v1.ns.set('contextualmenu.callbacks.generateCitationArticle', (model, view, menuItem, params) => {
            lab_api.v1.apps.start('ArticleCitation', menuItem);
        });

        // Edit caption, byline and alt-text for original image. Useful for menu-items related to caption-editing of image-crops.
        lab_api.v1.ns.set('contextualmenu.callbacks.editOriginalImageCaption', (model, view, menuItem, params) => {
            if (menuItem && menuItem.tool) {
                menuItem.tool.end();
            }
            lab_api.v1.apps.start('CaptionEditor', { id: model.get('instance_of') });
        });

        // For text-editors: Display a list of articles.
        // Let user click an article to insert an a-tag at selection.
        lab_api.v1.ns.set('contextualmenu.callbacks.insertArticleLink', (model, view, menuItem, params) => {

            // Clicking on some element that did not capture the event inside the menu will trigger
            // the blur-event of the bodytext. Disable and enable again in the callback.
            menuItem.menu.tool.disableEndEvent();

            if (!params.menu || !params.menu.name) {
                Sys.logger.warning('insertArticleLink: Missing required param "params.menu.name".');
                return;
            }
            lab_api.v1.collection.display({
                name: params.menu.name,
                modal: true,
                options: {
                    click: (uiInterface, targetModel, element, event) => {
                        let url = targetModel.get('fields.published_url');
                        if (url) {
                            if (!url.startsWith('http')) {
                                const site = lab_api.v1.site.getSiteById(targetModel.get('fields.site_id'));
                                if (site) {
                                    url = site.domain + url;
                                }
                            }

                            // If text is selected: Use this for the link, if not: insert article title
                            const selectedText = menuItem.menu.tool.domHelper.getSelectionHtml().trim();
                            const title = targetModel.get('fields.title');
                            if (selectedText) {
                                menuItem.menu.tool.domHelper.removeSelectedContent();
                            }
                            menuItem.menu.tool.insertMarkup(` <a href="${ url }">${ selectedText || title }</a> `);
                        }
                        lab_api.v1.collection.toggle({ name: uiInterface.getName(), modal: true });
                    },
                    end: (uiInterface) => {
                        if (menuItem.menu.tool.element) {
                            menuItem.menu.tool.element.focus();
                        }
                        menuItem.menu.tool.enableEndEvent();
                    }
                }
            });
        });

        // For text-editors. Let user create a quote-box from selection
        lab_api.v1.ns.set('contextualmenu.callbacks.insertQuote', (model, view, menuItem, params) => {

            // Get selected text. Will expand to contents of dom-element.
            const element = menuItem.menu.tool.domHelper.getEditableElementFromSelection(true, undefined, '.lab-bodytext-line');
            if (!element) { return; }
            const text = element.innerText;
            if (!text) { return; }

            // Get view-helper for bodytext
            const viewHelper = lab_api.v1.view.getHelper('bodytext', view.getViewport());

            // Get bodytext-element
            const selector = viewHelper.getLineClassSelector();
            const bodytextElement = lab_api.v1.util.dom.getParentByClass(element, menuItem.tool.getElement(), selector);
            if (!bodytextElement) { return; }

            // Get index for bodytext-element
            const getIndex = (elmnts, target, classSelector) => {
                let index = 0;
                for (const el of elmnts) {
                    if (el.classList.contains(classSelector)) {
                        if (el === target) {
                            return index;
                        }
                        index++;
                    }
                }
                return null;
            };
            const index = getIndex(menuItem.tool.getElement().children, bodytextElement, selector);
            if (index === null) { return; }

            // Create element and insert
            const quoteModel = lab_api.v1.model.create.view({
                type: 'quotebox',
                contentdata: {
                    fields: {
                        quote: text
                    }
                },
                metadata: {
                    float: {
                        desktop: 'floatRight'
                    },
                    bodyTextIndex: index
                },
                width: 33.33
            });
            lab_api.v1.model.addChild(model, quoteModel, index);
            menuItem.menu.tool.end();
        });

        lab_api.v1.ns.set('contextualmenu.callbacks.displayKicker', (model, view, menuItem, params) => {
            if (view.get('metadata.kickerBelowImage') || view.get('metadata.floatingKicker') || view.get('metadata.kickerBelowTitle')) {
                view.set('metadata.showKicker', true);
            }
        });

        lab_api.v1.ns.set('contextualmenu.callbacks.rowFullwidth', (model, view, menuItem, params) => {
            if (menuItem.getConfig('key') === 'metadata.fullWidthContent') {
                view.set('metadata.isSection', false);
            } else {
                view.set('metadata.fullWidthContent', false);
            }
            if (view.get('metadata.fullWidthContent') || view.get('metadata.isSection')) {
                view.set('metadata.fullWidthRow', true);
            } else {
                view.set('metadata.fullWidthRow', false);
            }
        });

        // Set as "callback" for an invisible menu-item on article-boxes.
        // Toggle metadata to display kicker, title and subtitle floating above the image.
        lab_api.v1.ns.set('contextualmenu.callbacks.toggleTextOnImage', (model, view, menuItem, params) => {
            const attributes = ['metadata.floatingTitle', 'metadata.floatingSubtitle', 'metadata.floatingKicker'];
            let hasAttribute = false;
            attributes.forEach((attr) => {
                if (view.get(attr)) hasAttribute = true;
            });
            attributes.forEach((attr) => {
                view.set(attr, !hasAttribute);
            });
        });

        lab_api.v1.ns.set('contextualmenu.callbacks.disableAutoFontSize', (model, view, menuItem, params) => {
            model.set('metadata.autoFontSizeEnabled', !model.get('metadata.autoFontSizeEnabled'));
        });

        // Set as "valueTransformer" in bindings for menu-items. Use "valueTransformerOptions" to specify key/value pairs to validate on.
        lab_api.v1.ns.set('contextualmenu.valueTransformer.keyVal', (value, keyValuePairs, model, view) => {
            if (!keyValuePairs) {
                Sys.logger.debug('[keyVal] Missing required param "keyValuePairs" (object)');
                return false;
            }
            for (const key of Object.keys(keyValuePairs)) {
                if (view.get(key) !== keyValuePairs[key]) {
                    return false;
                }
            }
            return true;
        });

        // Add click-handler for elements inside bodytext to prevent editor from starting.
        // This will happen when clicking somewhere inside the element but outside an editable dom-element.
        // Method can be added to property 'redrawCallbacks' of elements inside bodytext
        lab_api.v1.ns.set('eventhandlers.stopPropagation', (model, view) => {
            view.getMarkup().addEventListener('click', (event) => {
                event.stopPropagation();
                event.preventDefault();
            }, false);
        });

        // Add image to child.
        // If params.addImageChildType is defined, add image to first child of type
        lab_api.v1.ns.set('contextualmenu.callbacks.addImage', (model, view, menuItem, params) => {
            lab_api.v1.collection.display({
                name: 'MediaImages',
                modal: true,
                skipCache: true,
                options: {
                    clickHandler: (mediaModel, element) => {
                        if (!params.addImageChildType) {
                            lab_api.v1.model.replaceChildren(model, [mediaModel]);
                            return;
                        }
                        const child = lab_api.v1.model.query.getChildrenOfType(model, params.addImageChildType);
                        if (child.length) {
                            lab_api.v1.model.replaceChildren(child[0], [mediaModel]);
                        }
                    }
                }
            });
        });

        // Remove first child on path
        lab_api.v1.ns.set('contextualmenu.callbacks.removeChildByPath', (model, view, menuItem, params) => {
            if (!params.removeChildPath) {
                Sys.logger.warning('removeChildByPath: Missing required param "params.removeChildPath".');
                return;
            }
            const childModel = lab_api.v1.model.query.getModelByPath(params.removeChildPath, true, false, [model]);
            if (childModel) {
                lab_api.v1.model.delete(childModel);
            }
        });

        // Toggle element holding background image / video / other media element
        lab_api.v1.ns.set('contextualmenu.callbacks.toggleMediaContainer', (model) => {
            let mediaContainer = lab_api.v1.model.query.getChildOfType(model, 'mediaContainer');
            if (mediaContainer) {
                lab_api.v1.model.delete(mediaContainer);
                return;
            }
            mediaContainer = lab_api.v1.model.create.view({
                type: 'mediaContainer'
            });
            lab_api.v1.model.addChild(model, mediaContainer);
        });
        lab_api.v1.ns.set('contextualmenu.callbacks.toggleEditMediaContainer', (model) => {
            const state = !model.get('state.editMediaContainer');
            model.set('state.editMediaContainer', state);
            for (const view of lab_api.v1.view.getViews(model)) {
                if (state) {
                    view.getMarkup().classList.add('edit-media-container');
                } else {
                    view.getMarkup().classList.remove('edit-media-container');
                }
            }
            if (state) {
                const fn = () => {
                    lab_api.v1.ns.get('contextualmenu.callbacks.toggleEditMediaContainer')(model);
                    lab_api.v1.tool.off('ended', fn);
                };
                lab_api.v1.tool.on('ended', fn);
            }
        });

        // Display images from article of the button
        lab_api.v1.ns.set('contextualmenu.callbacks.displayArticleImages', (model, view) => {
            lab_api.v1.collection.display({
                name: 'MediaImages', modal: false, skipCache: true, options: { articleId: model.get('instance_of') }
            });
        });

        // Automatically create suggestions for new articles
        if (lab_api.v1.model.root.getType() === 'page_article') {
            lab_api.v1.view.on('ready', () => {
                const listener = lab_api.v1.ns.get('textAssistant.listen');
                if (listener) {
                    listener();
                }
            });
        }

        // Display an app for displaying and inserting a previous version of a field
        lab_api.v1.ns.set('contextualmenu.callbacks.openFieldVersions', (model, view, menuItem, params) => {
            lab_api.v1.apps.start('FieldVersion', {
                model,
                field: 'bodytext',
                selector: '.main > .bodytext',
                callbacks: {
                    end: (app) => {
                        model.set('state.openBaseviewFieldVersions', false);
                    }
                }
            });
        });

        // Trigger app for setting custom background color from image
        // menuItem.getModel(), menuItem.getView(), menuItem, menuItem.config.params
        lab_api.v1.ns.set('contextualmenu.callbacks.getImageColors', (model, view, menuItem, menuParams, callback) => {
            const image = lab_api.v1.model.query.getChildOfType(model, 'image');
            if (!image) {
                return;
            }
            const imageView = lab_api.v1.view.getView(image, view.getViewport());
            const domImage = imageView.getMarkup().querySelector('img');
            if (!domImage) {
                return;
            }
            lab_api.v1.apps.start('ImageColors', {
                image: domImage,
                targetModel: lab_api.v1.model.query.getRootModel(),
                path: 'fields.pageBackgroundColorStyle',
                pathDark: 'fields.pageBackgroundColorStyleDark',
                resetPath: 'fields.pageBackgroundColor',
                callback
            });
        });

        // Toggle pinning of a notice in a live feed
        lab_api.v1.ns.set('contextualmenu.callbacks.toggleNoticePin', (model, view, menuItem, menuParams, callback) => {
            const livefeedModel = model.getParent();
            if (!livefeedModel || livefeedModel.getType() !== 'livefeed') {
                return;
            }
            const pinneNotices = [...(livefeedModel.get('fields.pinnedNotices_json') || [])];
            const id = model.getId();
            if (pinneNotices.includes(id)) {
                pinneNotices.splice(pinneNotices.indexOf(id), 1);
            } else {
                pinneNotices.push(id);
            }
            livefeedModel.setFiltered('noFetch', false);
            livefeedModel.resetExternalResource();
            livefeedModel.set('fields.pinnedNotices_json', pinneNotices);
        });
    }
};


/***/ }),

/***/ "./modules/lib/helpers/AdsHelper.js":
/*!******************************************!*\
  !*** ./modules/lib/helpers/AdsHelper.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdsHelper": () => (/* binding */ AdsHelper)
/* harmony export */ });
/* harmony import */ var _datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


class AdsHelper {

    static getAdnuntiusSettings(api, model, view, adEnv, site, disableSkyscraper = false, disableTopBanner = false) {
        // Find adUnits placed on current page in admin
        const adnuntiusBiddingEnabled = (api.v1.config.get('contentbox_settings.adnuntiusAd.bidding') || {}).enabled || false;

        function parseFormat(format, item) {
            let config = '';
            if (adnuntiusBiddingEnabled && format.prebidConfig) {
                config = JSON.parse(format.prebidConfig);
                if (Array.isArray(config)) [config] = config;
                config = JSON.stringify(config);
            }

            return {
                ...format,
                prebidConfig: config,
                metadata: item.metadata || []
            };
        }

        const units = api.v1.config.get('contentbox_settings.adnuntiusAd.formats') || [];
        const content = api.v1.config.getView(`insertDynamic.${ api.v1.model.root.getType().replace('page_', '') }.${ view.getViewport() }`, site.alias) || [];
        const manualContent = api.v1.model.query.getChildrenOfType(model, 'adnuntiusAd', true, true);

        const visibleUnits = [];
        for (const item of content) {
            const [format] = units.filter((unit) => item.content_data.fields.format === unit.format);
            if (format && ((item.placement.key.includes('skyscraper_') === false && item.placement.key !== 'topbanner')
                || (item.placement.key.includes('skyscraper_') && !disableSkyscraper)
                || (item.placement.key === 'topbanner' && !disableTopBanner))) {
                visibleUnits.push(parseFormat(format, item));
            }
        }
        for (const childModel of manualContent) {
            const [format] = units.filter((unit) => childModel.get('fields.format') === unit.format);
            if (format) {
                visibleUnits.push(parseFormat(format, childModel));
            }
        }

        const dateHander = new _datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper();
        const newsletterTargeting = dateHander.utcFormat(new Date(), '&tag=week_{{ W }}_{{ YYYY }}');

        return {
            enabled: units.length > 0,
            lazyload: api.v1.config.get('contentbox_settings.adnuntiusAd.lazyload') || false,
            adUnits: visibleUnits,
            spacingTop: api.v1.config.get('contentbox_settings.adnuntiusAd.spacingTop') || 120,
            fetchMarginPercent: adEnv.fetchMarginPercent || 150,
            renderMarginPercent: adEnv.renderMarginPercent || 150,
            bidding: {
                enabled: adnuntiusBiddingEnabled
            },
            hideOnTabletWidth: adEnv.hideOnTabletWidth || 1316,
            refreshdelay: api.v1.config.get('contentbox_settings.adnuntiusAd.refreshdelay') || 5,
            refreshcount: api.v1.config.get('contentbox_settings.adnuntiusAd.refreshcount') || 1,
            connectLoading: api.v1.config.get('contentbox_settings.adnuntiusAd.connectLoading') || false,
            contkitEnabled: api.v1.config.get('contentbox_settings.adnuntiusAd.contkitEnabled') || false,
            newsletter: {
                targeting: newsletterTargeting
            }
        };
    }

    static getGoogleSettings(api, model, view, adEnv, site, disableSkyscraper = false, disableTopBanner = false) {
        function parseFormat(format, item) {
            const { sizes = [] } = format;
            return {
                ...format,
                sizesString: `[${  sizes.map((size) => `[${ size.width },${ size.height }]`).join(', ') }]`,
                metadata: item.metadata || []
            };
        }

        const units = api.v1.config.get('contentbox_settings.googleAd.formats') || [];
        const anchor = api.v1.config.get('contentbox_settings.googleAd.anchor') || { enabled: false, code: '', type: 'TOP_ANCHOR' };
        const content = api.v1.config.getView(`insertDynamic.${ api.v1.model.root.getType().replace('page_', '') }.${ view.getViewport() }`, site.alias) || [];
        const manualContent = api.v1.model.query.getChildrenOfType(model, 'googleAd', true, true);

        const visibleUnits = [];
        for (const item of content) {
            const [format] = units.filter((unit) => item.content_data.fields.format === unit.format);
            if (format && ((item.placement.key.includes('skyscraper_') === false && item.placement.key !== 'topbanner')
                || (item.placement.key.includes('skyscraper_') && !disableSkyscraper)
                || (item.placement.key === 'topbanner' && !disableTopBanner))) {
                visibleUnits.push(parseFormat(format, item));
            }
        }
        for (const childModel of manualContent) {
            const [format] = units.filter((unit) => childModel.get('fields.format') === unit.format);
            if (format) {
                visibleUnits.push(parseFormat(format, childModel));
            }
        }

        return {
            enabled: units.length > 0,
            lazyload: adEnv.lazyload || false,
            spacingTop: api.v1.config.get('contentbox_settings.googleAd.spacingTop') || 120,
            fetchMarginPercent: adEnv.fetchMarginPercent || 150,
            renderMarginPercent: adEnv.renderMarginPercent || 150,
            adUnits: visibleUnits,
            anchor,
            dfpid: adEnv.dfpid || false,
            debugmode: adEnv.debugmode || false,
            disableInitialLoad: adEnv.disableInitialLoad || false,
            bidding: adEnv.bidding,
            hideOnTabletWidth: adEnv.hideOnTabletWidth || 1316
        };
    }

}


/***/ }),

/***/ "./modules/lib/helpers/AutoFontSize.js":
/*!*********************************************!*\
  !*** ./modules/lib/helpers/AutoFontSize.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutoFontSize": () => (/* binding */ AutoFontSize)
/* harmony export */ });
/**
 * AutoFontSize is a utility class designed to dynamically adjust font sizes and split text into parts based on specified criteria.
 * It provides functionality to ensure text fits within given constraints by adjusting font size and splitting text into even parts
 * or based on maximum word length and custom regular expressions.
 */
class AutoFontSize {

    /**
     * Automatically sizes the text within an element based on the provided configuration.
     *
     * @param {HTMLElement} element - The element containing the text to be auto-sized.
     * @param {Object} config - The configuration object for auto-sizing the text.
     * @returns {string} - The modified HTML content of the element after auto-sizing the text.
     */
    static autoSizeText(element, config) {
        const startFontSize = {
            1: 100,
            2: 70,
            3: 50,
            4: 45,
            5: 40,
            6: 35,
            7: 30,
            8: 26,
            9: 22,
            10: 20,
            11: 18,
            12: 17,
            13: 16,
            14: 15,
            15: 14,
            16: 13,
            17: 12,
            18: 11,
            19: 10,
            20: 9,
            21: 8,
            22: 7,
            23: 6,
            24: 5,
            25: 4
        };
        const title = element.innerHTML.replace(/&nbsp;/, '');
        if (element.querySelector('br') || element.querySelector('.auto-font-size-line-br')) {
            const titleLines = this.handleBreaks(title);
            element.innerHTML = ''; // eslint-disable-line no-param-reassign
            titleLines.forEach((line, index) => {
                element.innerHTML += `<span class="auto-font-size-line${ index < titleLines.length ? ' auto-font-size-line-br' : '' }">${ line } </span>`;  // eslint-disable-line no-param-reassign
            });
        } else {
            const titleWithSpaces = this.removeHTMLTags(title);
            const titleLines = this.splitSentence(titleWithSpaces, config, 'default');
            element.innerHTML = '';  // eslint-disable-line no-param-reassign
            for (const line of titleLines) {
                element.innerHTML += `<span class="auto-font-size-line">${ line } </span>`;  // eslint-disable-line no-param-reassign
            }
        }

        const titleSpans = element.querySelectorAll('.auto-font-size-line');
        const maxTitleWidth = element.clientWidth;

        for (const span of titleSpans) {
            const stringLength = span.innerText.length;
            const fontSize = startFontSize[stringLength] || 5;
            if (span.clientWidth < maxTitleWidth) {
                this.enlargeTitle(span, maxTitleWidth, fontSize);
            } else if (span.clientWidth > maxTitleWidth) {
                this.shrinkTitle(span, maxTitleWidth, fontSize);
            }
        }

        return element.innerHTML;
    }

    /**
     * Splits a title into lines based on HTML line breaks.
     *
     * @param {string} title - The title to be processed.
     * @returns {string[]} An array of lines from the title.
     */
    static handleBreaks(title) {
        const titleWithSpaces = this.removeHTMLTags(title);
        let titleLines = titleWithSpaces.split(/<br\s*[^>]*>/gi);
        titleLines = titleLines.filter((line) => line.trim().length > 0);
        return titleLines;
    }

    /**
     * Removes the font size from the innerHTML of the given element.
     * @param {HTMLElement} element - The element from which to remove the font size.
     */
    static removeFontSize(element) {
        const title = element.innerHTML;
        return this.removeHTMLTags(title);
        // return element.innerHTML;
    }

    /**
     * Removes HTML tags from a given title.
     *
     * @param {string} title - The title containing HTML tags.
     * @returns {string} - The title with HTML tags removed.
     */
    static removeHTMLTags(title) {
        let titleWithSpaces = title.replace(/<span class="auto-font-size-hyphen">-<\/span>\s?/g, '');
        titleWithSpaces = titleWithSpaces.replace(/<span class="[^"]*\bauto-font-size-line-br\b[^"]*"[^>]*>(.*?)<\/span>/g, '$1<br>');
        titleWithSpaces = titleWithSpaces.replace(/<span class="[^"]*\bauto-font-size-line\b[^"]*"[^>]*>(.*?)<\/span>/g, '$1');
        titleWithSpaces = titleWithSpaces.replace(/<span[^>]*>([^<]*)<\/span>/g, '$1');
        titleWithSpaces = titleWithSpaces.replace(/(\r\n|\n|\r)/g, '');
        return titleWithSpaces;
    }

    /**
     * Enlarges the title by adjusting the font size until it reaches the maximum title width.
     *
     * @param {HTMLElement} title - The title element to be enlarged.
     * @param {number} maxTitleWidth - The maximum width that the title can occupy.
     * @param {number} fontSize - The initial font size of the title.
     */
    static enlargeTitle(title, maxTitleWidth, fontSize, maxFontSize = 100) {
        let newFontSize = fontSize;
        while (title.clientWidth < maxTitleWidth && newFontSize <= maxFontSize) {
            newFontSize += 1;
            title.style.setProperty('--lab-auto-font-size', `${ newFontSize }cqi`);
        }
        while (title.clientWidth >= maxTitleWidth || newFontSize > maxFontSize) {
            newFontSize -= 0.1;
            title.style.setProperty('--lab-auto-font-size', `${ newFontSize }cqi`);
        }
    }

    /**
     * Shrinks the title font size until it fits within the specified maximum width.
     *
     * @param {HTMLElement} title - The title element to shrink the font size of.
     * @param {number} maxTitleWidth - The maximum width that the title should fit within.
     * @param {number} fontSize - The initial font size of the title.
     */
    static shrinkTitle(title, maxTitleWidth, fontSize) {
        let newFontSize = fontSize;
        while (title.clientWidth > maxTitleWidth) {
            newFontSize -= 0.1;
            title.style.setProperty('--lab-auto-font-size', `${ newFontSize }cqi`);
        }
    }

    /**
     * Splits a sentence into multiple lines based on given rules and container dimensions.
     *
     * @param {string} sentence - The sentence to be split.
     * @param {object} rules - The rules to be applied for splitting the sentence.
     * @param {object} container - The container dimensions.
     * @returns {string[]} An array of lines resulting from splitting the sentence.
     */
    static splitSentence(sentence, rules, container) {
        const { length } = sentence;
        const rulesToUse = this.findRules(rules, container);
        const rangeToUse = this.findNumberOfLines(rulesToUse.ranges, length) || 1;
        const maxWordLength = rulesToUse.maxWordLength || null;
        const minLineLength = rulesToUse.minLineLength || null;
        const lines = this.splitTextEvenly(sentence, rangeToUse, maxWordLength, minLineLength, rules.regex) || [];
        return lines;
    }

    /**
     * Finds the rules to use for a given container.
     *
     * @param {object} rules - The rules object containing the formats.
     * @param {string} container - The container for which to find the rules.
     * @returns {object} - The rules to use for the given container.
     */
    static findRules(rules, container) {
        const formatRules = rules.formats[container];
        const rulesToUse = { ...formatRules };
        return rulesToUse;
    }

    /**
     * Finds the number of lines based on the given ranges and length.
     *
     * @param {Array<Object>} ranges - An array of range objects.
     * @param {number} length - The length to compare against the range's maxCharacters.
     * @returns {number} The number of lines.
     */
    static findNumberOfLines(ranges, length) {
        const rangeToUse = { maxLineLength: 20, numberOfLines: 1 };
        for (const range of ranges) {
            if (length <= range.maxCharacters) {
                rangeToUse.numberOfLines = range.numberOfLines;
                rangeToUse.maxLineLength = range.maxCharacters / range.numberOfLines;
                break;
            }
        }
        return rangeToUse;
    }

    /**
     * Replaces matches of the regex in the text with a placeholder.
     *
     * @param {Object} regex - The regular expressions to check and replace in the text.
     * @param {string} text - The input text to be processed.
     * @param {string} placeholder - The placeholder to replace matches with.
     * @returns {string} The processed text with placeholders.
     */
    static checkRegex(regex, text, placeholder) {
        let newText = text;
        const matches = [];
        const regexArray = Array.from(Object.entries(regex), ([, value]) => value);

        regexArray.forEach((rule) => {
            const expression = new RegExp(rule, 'g');
            const foundMatches = newText.match(expression);
            if (foundMatches) {
                matches.push(...foundMatches);
            }
        });

        matches.forEach((match) => {
            const replacement = match.replace(/ /g, placeholder);
            newText = newText.replace(match, replacement);
        });

        return newText;
    }

    /**
     * Splits a string into parts based on the given parameters.
     *
     * @param {string} text - The input text to be split.
     * @param {number} partSize - The maximum size of each part.
     * @param {RegExp} regex - The regular expression used to check and replace text.
     * @param {number} maxWordLength - The maximum length of each word.
     * @returns {string[]} An array of parts after splitting the input text.
     */
    static splitStringIntoParts(text, partSize, regex, maxWordLength, numberOfLines) {
        const regexPlaceholder = '___';
        const newText = this.checkRegex(regex, text, regexPlaceholder);
        const words = newText.split(' ');
        const parts = [];
        let currentPart = '';

        words.forEach((wordRaw) => {
            const word = wordRaw.trim().replace(new RegExp(regexPlaceholder, 'g'), ' ');

            if (word.includes('-')) {
                // Treat hyphenated words as a single unit
                if (currentPart.length + word.length + 1 > partSize) {
                    parts.push(currentPart);
                    currentPart = word;
                } else {
                    currentPart += (currentPart.length > 0 ? ' ' : '') + word;
                }
            } else {
                const chunks = this.splitWord(word, maxWordLength);
                chunks.forEach((chunk, chunkIndex) => {
                    if (currentPart.length + chunk.length + 1 > partSize) {
                        parts.push(currentPart);
                        currentPart = chunk;
                    } else {
                        currentPart += (currentPart.length > 0 ? ' ' : '') + chunk;
                    }
                    // Add hyphen if it's not the last chunk
                    if (chunkIndex < chunks.length - 1) {
                        currentPart += '<span class="auto-font-size-hyphen">-</span>';
                    }
                });
            }
        });

        if (currentPart.length > 0) {
            parts.push(currentPart);
        }

        return parts;
    }

    /**
     * Splits a word into chunks, adding hyphens if necessary.
     *
     * @param {string} word - The word to be split.
     * @param {number} maxWordLength - The maximum length of each chunk.
     * @returns {string[]} An array of word chunks.
     */
    static splitWord(word, maxWordLength) {
        const chunks = [];
        let remainingWord = word;

        while (remainingWord.length > maxWordLength) {
            chunks.push(remainingWord.substring(0, maxWordLength));
            remainingWord = remainingWord.substring(maxWordLength);
        }

        if (remainingWord.length > 0) {
            chunks.push(remainingWord);
        }

        return chunks;
    }

    /**
     * Splits the given text evenly into a specified number of lines, ensuring that each line
     * adheres to the maximum word length and minimum line length constraints.
     *
     * @param {string} text - The text to be split.
     * @param {Object} rangeToUse - An object containing the number of lines to split the text into.
     * @param {number} rangeToUse.numberOfLines - The number of lines to split the text into.
     * @param {number} maxWordLength - The maximum length of a word in the split text.
     * @param {number} [minLineLength] - The minimum length of a line in the split text.
     * @param {RegExp} regex - The regular expression used to split the text.
     * @returns {string[]} An array of strings, each representing a line of the split text.
     */
    static splitTextEvenly(text, rangeToUse, maxWordLength, minLineLength, regex) {
        const newText = text.trim();
        const partLength = Math.ceil(newText.length / rangeToUse.numberOfLines);
        let lines = this.splitStringIntoParts(newText, partLength, regex, maxWordLength, rangeToUse.numberOfLines);

        if (minLineLength) {
            lines = this.mergeShortLines(lines, minLineLength);
        }

        if (lines.length > rangeToUse.numberOfLines) {
            const hyphenRegex = /<span class="auto-font-size-hyphen">-<\/span>$/;
            const lastLine = lines.pop();
            if (hyphenRegex.test(lines[lines.length - 1])) {
                lines[lines.length - 1] = lines[lines.length - 1].replace(hyphenRegex, '') + lastLine;
            } else {
                lines[lines.length - 1] += ` ${ lastLine }`;
            }
        }
        return lines;
    }

    /**
     * Merges lines that are shorter than a specified minimum length with adjacent lines, including the last line.
     *
     * @param {string[]} lines - The array of split lines.
     * @param {number} minLength - The minimum length a line must have.
     * @returns {string[]} The modified array of lines where all lines meet the minimum length.
     */
    static mergeShortLines(lines, minLength) {
        const mergedLines = [];
        for (let i = 0; i < lines.length; i++) {
            let currentLine = lines[i].trim();

            if (currentLine.length < minLength && i < lines.length - 1) {
                currentLine += ` ${ lines[i + 1] }`;
                i++;
            }

            mergedLines.push(currentLine);
        }

        if (mergedLines.length > 1) {
            const lastLine = mergedLines[mergedLines.length - 1];
            if (lastLine.length < minLength) {
                mergedLines[mergedLines.length - 2] += ` ${ lastLine }`;
                mergedLines.pop();
            }
        }

        return mergedLines;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/AutodataHelper.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/AutodataHelper.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AutodataHelper": () => (/* binding */ AutodataHelper)
/* harmony export */ });
class AutodataHelper {

    // Collect data defined in 'filtered.autodata' (cssObject, cssString, cssArray) and use to generate css class-names.
    static parseCss(model, path = 'filtered.autodata') {

        /*
        Example of data-structure this method supports:
        {
            filtered: {
                autodata: {
                    cssObject: {
                        key1: "value_1",
                        key2: "value_2"
                    },
                    cssString: "value_3 value_4",
                    cssArray: ["value_5", "value_6"]
                }
            }
        }

        Result: "value_1 value_2 value_3 value_4 value_5 value_6"
        */

        const autodata = model.get(path);
        if (!autodata || typeof autodata !== 'object') {
            return undefined;
        }
        const cssString = [
            Object.values(autodata.cssObject || {}).join(' '),
            autodata.cssString || '',
            (autodata.cssArray || []).join(' ')
        ].join(' ').trim();
        return cssString;
    }

    // (object) Collect data defined in 'filtered.autodata.attributesObject' and use to generate key/value pairs for dom-attributes.
    static parseAttributes(model) {

        /*
        Example of data-structure this method supports:
        {
            filtered: {
                autodata: {
                    attributesObject: {
                        "data-key1": "value_1",
                        "data-key2": "value_2"
                    }
                }
            }
        }

        Result: [
            { key: 'data-key1', value: 'value_1' },
            { key: 'data-key2', value: 'value_2' }
        ]

        Template: (assume result is available at filtered.items)
        <article {{ #filtered.items }} {{ key }}="{{ value }}"{{ /filtered.items }}>...</article>

        Parsed markup:
        <article data-key1="value_1" data-key2="value_2">...</article>
        */

        const autodata = model.get('filtered.autodata.attributesObject');
        if (!autodata || typeof autodata !== 'object') {
            return undefined;
        }
        const result = Object.keys(autodata).map((key) => ({ key, value: autodata[key] }));
        return result;
    }

    // (object) Collect data defined in 'filtered.autodata.custom' and use to generate arrays of key/value pairs.
    static parseCustomData(model) {
        /*
        Example of data-structure this method supports:
        {
            filtered: {
                autodata: {
                    custom: {
                        key1: {
                            subkey1: "value_1",
                            subkey2: "value_2"
                        },
                        key2: {
                            subkey1: "value_3",
                            subkey2: "value_4"
                        }

                    }
                }
            }
        }

        Result: {
            key1: [
                {
                    key: "subkey1",
                    value: "value_1"
                },
                {
                    key: "subkey2",
                    value: "value_2"
                }
            ],
            key2: [
                {
                    key: "subkey1",
                    value: "value_3"
                },
                {
                    key: "subkey2",
                    value: "value_4"
                }
            ]
        }

        Template-example: (assume result is available at filtered.items)
        <ul class="something">
        {{ #filtered.items.key1 }}
            <li class="{{ key }}">{{ value }}</li>
        {{ /filtered.items.key1 }}
        </ul>
        <ul class="something-else">
        {{ #filtered.items.key2 }}
            <li class="{{ key }}">{{ value }}</li>
        {{ /filtered.items.key2 }}
        </ul>

        Parsed markup:
        <ul class="something">
            <li class="subkey1">value_1</li>
            <li class="subkey2">value_2</li>
        </ul>
        <ul class="something-else">
            <li class="subkey1">value_3</li>
            <li class="subkey2">value_4</li>
        </ul>
        */

        const autodata = model.get('filtered.autodata.custom');
        if (!autodata || typeof autodata !== 'object') {
            return undefined;
        }
        const result = {};
        for (const key of Object.keys(autodata)) {
            result[key] = Object.keys(autodata[key]).map((itemKey) => ({ key: itemKey, value: autodata[key][itemKey] }));
        }
        return result;
    }

    // Use data from feed and config for defined path to map autodata fields
    // TODO: Support other types of autodata than labels
    static parseCustomDataFromFeed(data, path) {
        /*
        Example of data-structure this method supports:
        "contentbox_settings": {
            "articlescroller": {
                "autodata": {
                    "mapping": {
                        "labels": [
                            {
                                "field": "fieldInFeed",
                                "key": "autodataKey"
                            }
                        ]
                    }
                }
            }
        }

        Result: {
            labels: [
                {
                    key: "subkey1",
                    value: "value_1"
                },
                {
                    key: "subkey2",
                    value: "value_2"
                }
            ]
        }

        Template-example: (depends on contentbox template. Assume result is available at autodata.labels)
        {{ #autodata.labels }}
            <div class="labels">
                <div class="label" data-label-key="{{ key }}" data-label-value="{{ value }}"><span class="label-value">{{ value }}</span></div>
            </div>
        {{ /autodata.labels }}

         Example parsed markup (depends on contentbox template):
         <div class="labels">
            <div class="label" data-label-key="subkey1" data-label-value="value_1"><span class="label-value">value_1</span></div>
        </div>
        */

        const autodata = lab_api.v1.config.get(`${ path  }.autodata.mapping`) || {};
        if (!autodata || typeof autodata !== 'object') {
            return undefined;
        }
        const result = {
            labels: []
        };
        if (autodata.labels) {
            for (const key of Object.keys(autodata.labels)) {
                if (data[autodata.labels[key]]) {
                    result.labels.push({ key, value: data[autodata.labels[key]] });
                }
            }
        }
        return result;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/ClientConfig.js":
/*!*********************************************!*\
  !*** ./modules/lib/helpers/ClientConfig.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientConfig": () => (/* binding */ ClientConfig)
/* harmony export */ });
/**
 * ClientConfig
 * Get site-config and config-object that should be passed on to the client renderer.
 */

class ClientConfig {

    static buildConfig(api) {
        return {
            viewConfig: {
                config: {
                    customer: {
                        paywall: {
                            label: lab_api.v1.config.get('paywall.label') || {}
                        },
                        image: {
                            defaultAspectRatio: lab_api.v1.config.get('image.defaultAspectRatio') || undefined
                        }
                    }
                }
            }
        };
    }

}


/***/ }),

/***/ "./modules/lib/helpers/ContentLanguages.js":
/*!*************************************************!*\
  !*** ./modules/lib/helpers/ContentLanguages.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const contentLanguages = [
    { name: 'Afrikaans', code: 'af' },
    { name: 'Albanian - shqip', code: 'sq' },
    { name: 'Amharic - አማርኛ', code: 'am' },
    { name: 'Arabic - العربية', code: 'ar' },
    { name: 'Aragonese - aragonés', code: 'an' },
    { name: 'Armenian - հայերեն', code: 'hy' },
    { name: 'Asturian - asturianu', code: 'ast' },
    { name: 'Azerbaijani - azərbaycan dili', code: 'az' },
    { name: 'Basque - euskara', code: 'eu' },
    { name: 'Belarusian - беларуская', code: 'be' },
    { name: 'Bengali - বাংলা', code: 'bn' },
    { name: 'Bosnian - bosanski', code: 'bs' },
    { name: 'Breton - brezhoneg', code: 'br' },
    { name: 'Bulgarian - български', code: 'bg' },
    { name: 'Catalan - català', code: 'ca' },
    { name: 'Central Kurdish - کوردی (دەستنوسی عەرەبی)', code: 'ckb' },
    { name: 'Chinese - 中文', code: 'zh' },
    { name: 'Chinese (Hong Kong) - 中文（香港）', code: 'zh-HK' },
    { name: 'Chinese (Simplified) - 中文（简体）', code: 'zh-CN' },
    { name: 'Chinese (Traditional) - 中文（繁體）', code: 'zh-TW' },
    { name: 'Corsican', code: 'co' },
    { name: 'Croatian - hrvatski', code: 'hr' },
    { name: 'Czech - čeština', code: 'cs' },
    { name: 'Danish - dansk', code: 'da-DK' },
    { name: 'Dutch - Nederlands', code: 'nl-NL' },
    { name: 'Dutch - Belgium', code: 'nl-BE' },
    { name: 'English (Australia)', code: 'en-AU' },
    { name: 'English (Canada)', code: 'en-CA' },
    { name: 'English (India)', code: 'en-IN' },
    { name: 'English (New Zealand)', code: 'en-NZ' },
    { name: 'English (South Africa)', code: 'en-ZA' },
    { name: 'English (United Kingdom)', code: 'en-GB' },
    { name: 'English (United States)', code: 'en-US' },
    { name: 'Esperanto - esperanto', code: 'eo' },
    { name: 'Estonian - eesti', code: 'et' },
    { name: 'Faroese - føroyskt', code: 'fo' },
    { name: 'Filipino', code: 'fil' },
    { name: 'Finnish - suomi', code: 'fi-FI' },
    { name: 'French (Canada) - français (Canada)', code: 'fr-CA' },
    { name: 'French (France) - français (France)', code: 'fr-FR' },
    { name: 'French (Switzerland) - français (Suisse)', code: 'fr-CH' },
    { name: 'Galician - galego', code: 'gl' },
    { name: 'Georgian - ქართული', code: 'ka' },
    { name: 'German (Austria) - Deutsch (Österreich)', code: 'de-AT' },
    { name: 'German (Germany) - Deutsch (Deutschland)', code: 'de-DE' },
    { name: 'German (Liechtenstein) - Deutsch (Liechtenstein)', code: 'de-LI' },
    { name: 'German (Switzerland) - Deutsch (Schweiz)', code: 'de-CH' },
    { name: 'Greek - Ελληνικά', code: 'el' },
    { name: 'Greenlandic - Kalaallisut', code: 'kl-GL' },
    { name: 'Greenlandic - Danish', code: 'da-GL' },
    { name: 'Guarani', code: 'gn' },
    { name: 'Gujarati - ગુજરાતી', code: 'gu' },
    { name: 'Hausa', code: 'ha' },
    { name: 'Hawaiian - ʻŌlelo Hawaiʻi', code: 'haw' },
    { name: 'Hebrew - עברית', code: 'he' },
    { name: 'Hindi - हिन्दी', code: 'hi' },
    { name: 'Hungarian - magyar', code: 'hu' },
    { name: 'Icelandic - íslenska', code: 'is' },
    { name: 'Indonesian - Indonesia', code: 'id' },
    { name: 'Interlingua', code: 'ia' },
    { name: 'Irish - Gaeilge', code: 'ga' },
    { name: 'Italian - italiano', code: 'it' },
    { name: 'Italian (Italy) - italiano (Italia)', code: 'it-IT' },
    { name: 'Italian (Switzerland) - italiano (Svizzera)', code: 'it-CH' },
    { name: 'Japanese - 日本語', code: 'ja-JP' },
    { name: 'Kannada - ಕನ್ನಡ', code: 'kn' },
    { name: 'Kazakh - қазақ тілі', code: 'kk' },
    { name: 'Khmer - ខ្មែរ', code: 'km' },
    { name: 'Korean - 한국어', code: 'ko' },
    { name: 'Kurdish - Kurdî', code: 'ku' },
    { name: 'Kyrgyz - кыргызча', code: 'ky' },
    { name: 'Lao - ລາວ', code: 'lo' },
    { name: 'Latin', code: 'la' },
    { name: 'Latvian - latviešu', code: 'lv' },
    { name: 'Lingala - lingála', code: 'ln' },
    { name: 'Lithuanian - lietuvių', code: 'lt' },
    { name: 'Macedonian - македонски', code: 'mk' },
    { name: 'Malay - Bahasa Melayu', code: 'ms' },
    { name: 'Malayalam - മലയാളം', code: 'ml' },
    { name: 'Maltese - Malti', code: 'mt' },
    { name: 'Marathi - मराठी', code: 'mr' },
    { name: 'Mongolian - монгол', code: 'mn' },
    { name: 'Nepali - नेपाली', code: 'ne' },
    { name: 'Norwegian Bokmål - norsk bokmål', code: 'nb-NO' },
    { name: 'Norwegian Nynorsk - nynorsk', code: 'nn-NO' },
    { name: 'Occitan', code: 'oc' },
    { name: 'Oriya - ଓଡ଼ିଆ', code: 'or' },
    { name: 'Oromo - Oromoo', code: 'om' },
    { name: 'Pashto - پښتو', code: 'ps' },
    { name: 'Persian - فارسی', code: 'fa' },
    { name: 'Polish - polski', code: 'pl-PL' },
    { name: 'Portuguese - português', code: 'pt' },
    { name: 'Portuguese (Brazil) - português (Brasil)', code: 'pt-BR' },
    { name: 'Portuguese (Portugal) - português (Portugal)', code: 'pt-PT' },
    { name: 'Punjabi - ਪੰਜਾਬੀ', code: 'pa' },
    { name: 'Quechua', code: 'qu' },
    { name: 'Romanian - română', code: 'ro' },
    { name: 'Romanian (Moldova) - română (Moldova)', code: 'mo' },
    { name: 'Romansh - rumantsch', code: 'rm' },
    { name: 'Russian - русский', code: 'ru' },
    { name: 'Sami (Finland)', code: 'se-FI' },
    { name: 'Sami (Norway)', code: 'se-NO' },
    { name: 'Sami (Sweden)', code: 'se-SE' },
    { name: 'Scottish Gaelic', code: 'gd' },
    { name: 'Serbian - српски', code: 'sr' },
    { name: 'Serbo - Croatian', code: 'sh' },
    { name: 'Shona - chiShona', code: 'sn' },
    { name: 'Sindhi', code: 'sd' },
    { name: 'Sinhala - සිංහල', code: 'si' },
    { name: 'Slovak - slovenčina', code: 'sk' },
    { name: 'Slovenian - slovenščina', code: 'sl' },
    { name: 'Somali - Soomaali', code: 'so' },
    { name: 'Southern Sotho', code: 'st' },
    { name: 'Spanish - español', code: 'es' },
    { name: 'Spanish (Argentina) - español (Argentina)', code: 'es-AR' },
    { name: 'Spanish (Latin America) - español (Latinoamérica)', code: 'es-419' },
    { name: 'Spanish (Mexico) - español (México)', code: 'es-MX' },
    { name: 'Spanish (Spain) - español (España)', code: 'es-ES' },
    { name: 'Spanish (United States) - español (Estados Unidos)', code: 'es-US' },
    { name: 'Sundanese', code: 'su' },
    { name: 'Swahili - Kiswahili', code: 'sw' },
    { name: 'Swedish - svenska', code: 'sv-SE' },
    { name: 'Tajik - тоҷикӣ', code: 'tg' },
    { name: 'Tamil - தமிழ்', code: 'ta' },
    { name: 'Tatar', code: 'tt' },
    { name: 'Telugu - తెలుగు', code: 'te' },
    { name: 'Thai - ไทย', code: 'th' },
    { name: 'Tigrinya - ትግርኛ', code: 'ti' },
    { name: 'Tongan - lea fakatonga', code: 'to' },
    { name: 'Turkish - Türkçe', code: 'tr' },
    { name: 'Turkmen', code: 'tk' },
    { name: 'Twi', code: 'tw' },
    { name: 'Ukrainian - українська', code: 'uk' },
    { name: 'Urdu - اردو', code: 'ur' },
    { name: 'Uyghur', code: 'ug' },
    { name: 'Uzbek - o‘zbek', code: 'uz' },
    { name: 'Vietnamese - Tiếng Việt', code: 'vi' },
    { name: 'Walloon - wa', code: 'wa' },
    { name: 'Welsh - Cymraeg', code: 'cy' },
    { name: 'Western Frisian', code: 'fy' },
    { name: 'Xhosa', code: 'xh' },
    { name: 'Yiddish', code: 'yi' },
    { name: 'Yoruba - Èdè Yorùbá', code: 'yo' },
    { name: 'Zulu - isiZulu', code: 'zu' }
];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (contentLanguages);


/***/ }),

/***/ "./modules/lib/helpers/CustomTags.js":
/*!*******************************************!*\
  !*** ./modules/lib/helpers/CustomTags.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomTags": () => (/* binding */ CustomTags)
/* harmony export */ });
class CustomTags {

    /*
    Transform list of tags to something templates may print.
    Config may be set in admin-tool 'customtags'
    Supported tags: meta, script, link
    Supported placements: head_top, head_bottom, body_top, body_bottom
    Input: [ { tag, placement, attributes, pageType, value }, ... ]
    Note: 'value' is only used by 'script'
    Output:
    {
        script: {
            head_top: ['<tag_1>', '<tag_2>'],
            head_bottom: [],
            body_top: [],
            body_bottom: []
        },
        meta: { ... },
        link: { ... }
    }
    */
    static prepareForTemplate(tags, pageType, isEditMode) {
        const result = {
            meta: {
                head_top: [],
                head_bottom: []
            },
            script: {
                head_top: [],
                head_bottom: [],
                body_top: [],
                body_bottom: []
            },
            style: {
                head_top: [],
                head_bottom: []
            },
            link: {
                head_top: [],
                head_bottom: []
            }
        };
        const filtered = tags.filter((tag) => (!tag.pageType || tag.pageType === pageType) && !(tag.skipEditor && isEditMode));
        for (const tag of Object.keys(result)) {
            for (const placement of Object.keys(result[tag])) {
                result.meta[placement] = filtered.filter((item) => item.tag === 'meta').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));
                result.script[placement] = filtered.filter((item) => item.tag === 'script').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));
                result.style[placement] = filtered.filter((item) => item.tag === 'style').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));
                result.link[placement] = filtered.filter((item) => item.tag === 'link').filter((item) => item.placement === placement).map((item) => this.createCustomTag(item));
            }
        }
        console.log(result);
        return result;
    }

    static createCustomTag(item) {
        switch (item.tag) {
            case 'link':
                return this.createLinkTag(item);
            case 'script':
                return this.createScriptTag(item);
            case 'style':
                return this.createStyleTag(item);
            default:
                return this.createMetaTag(item);
        }
    }

    static fetchDynamicAttribute(value) {
        return lab_api.v1.view.render({ model: lab_api.v1.model.query.getRootModel(), template: value }) || null;
    }

    static parseAttributes(attributes) {
        const attrs = attributes.filter((attr) => !!attr.key).map((attr) => (attr.value ? `${ attr.key }="${ attr.value.match(/\{\{.*\}\}/g) ? this.fetchDynamicAttribute(attr.value) : attr.value }"` : attr.key));
        return attrs.join(' ');
    }

    static parseVariables(value) {
        return value.replace(/\{\{\{?.*?\}\}\}?/g, this.fetchDynamicAttribute);
    }

    // <link rel="shortcut icon" type="image/png" sizes="256x256" href="/images/favicon_256x256.png">
    static createLinkTag(item) {
        return `<link ${ this.parseAttributes(item.attributes) }>`;
    }

    // <script type="text/javascript" src="/js/cms/LabUtils/Form.js?v=2"></script>
    static createScriptTag(item) {
        return `<script ${ this.parseAttributes(item.attributes) }>${ item.value ? this.parseVariables(item.value) : '' }</script>`;
    }

    // <meta charset="UTF-8">
    static createMetaTag(item) {
        return `<meta ${ this.parseAttributes(item.attributes) }>`;
    }

    // <style>body { background-color: lightblue; }</style>
    static createStyleTag(item) {
        return `<style ${ this.parseAttributes(item.attributes) }>${ item.value ? this.parseVariables(item.value) : '' }</style>`;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/ExpandableOptions.js":
/*!**************************************************!*\
  !*** ./modules/lib/helpers/ExpandableOptions.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpandableOptions": () => (/* binding */ ExpandableOptions)
/* harmony export */ });
class ExpandableOptions {

    // (object) Get settings for an expandable contentbox.
    // The box needs css to display the toggle-element and to hide collapsed content.
    // ViewSupport.expandableOptions = function(configPath, expanded) {
    // params: { options, configPath, expanded }
    // "options" is an object containing config. If not set "configPath" is used to read config.
    static run(params) {

        const siteOptions = params.options || lab_api.v1.config.get(params.configPath) || {};

        // Define default settings and merge with site-settings.
        // The factbox is default visible on desktop (collapsedState.desktop = false), collapsed on mobile (collapsedState.mobile = true).
        const options = lab_api.v1.util.object.merge({

            // Content for kicker-element on top of the box
            kicker: null,

            // Editable kicker element
            kicker_editable: false,

            // Is the box expandable?
            expandable: {
                mobile: true,
                desktop: true
            },

            // Can a collapsed box expand?
            collapsable: {
                mobile: true,
                desktop: true
            },

            // Collapsed state
            collapsedState: {
                mobile: true,
                desktop: false
            },

            // Do the box need js to handle collapsed state?
            needJs: false,

            // How should the box style a collapsed box?
            style: 'fade' // Options: 'fade': Display some of the fact-content, fade to transparent. ''hide': Only display title and optional kicker.

        }, siteOptions);

        // Let template reflect state for all viewports
        const cssStrings = [`style-${  options.style }`];
        for (const vp in options.expandable) {
            if (options.expandable[vp]) {
                cssStrings.push(`expandable-${  vp }`);
            }
        }
        for (const vp in options.collapsable) {
            if (options.collapsable[vp]) {
                cssStrings.push(`collapsable-${  vp }`);
            }
        }
        options.needJs = cssStrings.length > 0;
        options.cssString = cssStrings.join(' ');

        return options;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/FragmentHelper.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/FragmentHelper.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FragmentHelper": () => (/* binding */ FragmentHelper)
/* harmony export */ });
// Baseview fragment-api
// Return a subset of page-data to the drawing engine
// Supports 'path' and 'guid'
// Url: ?lab_path=dropZone[0]/row[2]&lab_selector=lab-dz-1
// Url: ?lab_guid=cdbcdd28-52c3-4c33-c54a-cb54e0480d6f&lab_selector=lab-dz-1
// For embedded content: ?lab_viewport=embed&lab_path=dropZone[0]/row[2]/article[0]

class FragmentHelper {

    constructor(api) {
        this.api = api;
        this.request = this.api.v1.util.request;
    }

    listen() {
        const options = {
            selector: this.request.getQueryParam('lab_selector') || 'contentFromPath',
            path: this.request.getQueryParam('lab_path'),
            guid: this.request.getQueryParam('lab_guid')
        };

        // Debug:
        // options.path = 'dropZone[0]/row[1]';
        // options.path = 'dropZone/row[1]/*[1]';
        // options.path = 'article[2]/image';
        // options.path = 'image[3]';
        // options.path = 'dropZone[0]/row';
        // options.guid = '634afc87-1b4d-4005-b413-d09905caf072';

        if (options.guid || options.path) {
            // If listener returns an array it will replace models to render.
            // Return undefined to let drawing engine ignore listener.
            this.api.v1.model.on('insert', (models) => {
                const model = options.guid ? this.getModelByGuid(options.guid, models) : this.getModelByPath(options.path, models);
                if (model) {
                    Sys.logger.debug(`[FragmentHelper] Element found. Path: ${ model.getPositionedPath() }, GUID: ${ model.getGuid() }.`);
                    model.setSelector(options.selector);
                    if (lab_api.v1.viewport.getName() === 'embed') {
                        return this.appendToRoot(models, model);
                    }
                    return [model];
                }
                return undefined;
            });
        }
    }

    // (LabModel / null)
    getModelByGuid(guid) {
        Sys.logger.debug(`[FragmentHelper] Will filter elements by guid: "${ guid }".`);
        return this.api.v1.model.query.getModelByGuid(guid);
    }

    // (LabModel / null)
    getModelByPath(path, models) {
        Sys.logger.debug(`[FragmentHelper] Will filter elements by path: "${ path }".`);
        const pathInfo = this.api.v1.util.string.parsePath(path);
        if (!pathInfo[0]) { return null; }
        const sources = this.api.v1.model.query.getModelsByType(pathInfo[0].base, models);
        return this.api.v1.model.query.getModelByPath(path, true, false, sources);
    }

    // (array)
    // The 'embed'-viewport draws fragments as children of the page-element.
    // Replace children of the root-model with 'models' and return new array.
    appendToRoot(models, model) {
        const rootModel = models[0];
        rootModel.children = [model];
        return [rootModel];
    }

}


/***/ }),

/***/ "./modules/lib/helpers/LabradorAi.js":
/*!*******************************************!*\
  !*** ./modules/lib/helpers/LabradorAi.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LabradorAi": () => (/* binding */ LabradorAi)
/* harmony export */ });
/* harmony import */ var _ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ContentLanguages.js */ "./modules/lib/helpers/ContentLanguages.js");


/**
 * Add retry-method for generating content ()
 */

class LabradorAi {

    /**
     * Labrador AI helper class for the TextAssistant plugin
     * The Labrador AI helper class will handle the configuration and generation of content from Labrador AI
     * Methods are used both from admin page 'Labrador AI' as well as from contextual menues through the TextAssistant plugin
     * The Labrador AI helper class will also handle a generalised settings modal for the AI feature
     * @param {*} api Labrador API
     * @param {*} rootModel Uppermost parent model
     */

    constructor(api, rootModel) {
        this.api = api;
        this.rootModel = rootModel;
        this.promptInstructions = this.api.v1.config.get('promptInstructions');
        this.siteInfo = this.getSiteInfo();
    }

    getSiteInfo(sitealias = null) {
        /**
         * Get the alias of the current site
         */
        let site;
        if (sitealias) {
            site = this.api.v1.site.getSite(sitealias);
        } else {
            site = this.api.v1.site.getSite();
        }
        if (site) {
            const siteInfo = {
                alias: site.alias
            };
            if (site.display_name && site.display_name.length > 0 && site.display_name !== site.alias) {
                siteInfo.display_name = site.display_name;
            }
            if (site.domain && site.domain.length > 0) {
                siteInfo.domain = site.domain;
            }
            return siteInfo;
        }
        return null;
    }

    getPromptConfig(featureParams = null, customParams = null) {
        /**
         * Get the prompt configuration for the current feature, as defined in admin page Labrador AI for the current site
         * @param {Object} featureParams - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         * @param {Object} customParams - The custom field values to override the default values (like fields stored on a factbox-element)
         */

        // Admin config values for Labrador AI to be used as default values
        this.configAdmin = this.api.v1.config.getConfig(`pages.labradorAi.data.items.${ featureParams.featureName }`);
        const featureItems = this.configAdmin?.items || {};
        for (const promptLevel of ['promptBase', 'promptSite', 'promptPage']) {
            if (featureItems[promptLevel] && featureItems[promptLevel].defaultValue) {
                featureItems[promptLevel] = featureItems[promptLevel].defaultValue;
            }
            if (!featureItems[promptLevel]) {
                featureItems[promptLevel] = '';
            }
        }

        // Site specific config values (as overridden in Admin page 'Labrador AI')
        let siteItems;
        this.siteAlias = featureParams.siteAlias || this.siteInfo.alias;
        this.configSite = this.api.v1.config.get('labradorAi', { site: this.siteAlias });
        if (this.configSite) {
            siteItems = this.configSite[featureParams.featureName];
        }

        // Config from 'Prompt instructions' for the current feature
        this.promptInstructionsFeature = null;
        if (this.promptInstructions && this.promptInstructions.feature && this.promptInstructions.feature[featureParams.featureName]) {
            this.promptInstructionsFeature = this.promptInstructions.feature[featureParams.featureName];
        }

        if (this.promptInstructionsFeature && this.promptInstructionsFeature.items) {
            for (const item of Object.keys(this.promptInstructionsFeature.items)) {
                featureItems[item] = this.promptInstructionsFeature.items[item];
            }
        }
        // CustomParams, like fields stored on a Labrador-model
        if (customParams) {
            for (const param of Object.keys(customParams)) {
                if (!featureItems[param]) {
                    featureItems[param] = featureParams[param];
                }
            }
        }

        let promptConfig = {
            siteLanguage: this.getPageLanguage(this.siteAlias, 'code', false),
            pageLanguage: this.getPageLanguage(this.siteAlias, 'code', true),
            siteAlias: this.siteAlias,
            siteDomain: this.siteInfo.domain,
            siteName: this.siteInfo.display_name || this.siteAlias
        };
        if (this.configSite && this.configSite.globalSettings && this.configSite.globalSettings.siteName && this.configSite.globalSettings.siteName.length > 0) {
            promptConfig.siteName = this.configSite.globalSettings.siteName;
        }

        /**
         * promptConfig priority/fallback:
         * 1. Article/model config
         * 2. Site config
         * 3. Prompt instructions config
         * 4. Admin config (default values)
         */
        if (featureItems) {
            for (const item of Object.keys(featureItems)) {
                // Admin: Default values from admin config

                if (featureItems[item] && featureItems[item].defaultValue) {
                    promptConfig[item] = featureItems[item].defaultValue;
                }
                if (promptConfig[item] === '' && featureItems[item]?.contentType === 'checkbox') {
                    promptConfig[item] = false;
                }

                // Prompt-config: If prompt instruction has a defined value, then use it
                if (this.promptInstructionsFeature && this.promptInstructionsFeature[item]) {
                    promptConfig[item] = this.promptInstructionsFeature[item];
                }

                // Site: If site config has a defined value, then use it
                if (siteItems && siteItems[item]) {
                    promptConfig[item] = siteItems[item];
                }

                // Model: If article or feature element has defined values, then use them
                if (customParams && customParams[item] !== undefined && !['promptBase'].includes(item)) {
                    promptConfig[item] = customParams[item];
                }

            }
        }

        if (featureParams && featureParams.emptySitePromptForDemo && featureParams.emptySitePromptForDemo === true) {
            promptConfig.promptSite = '';
        }

        // Update language in promptConfig
        promptConfig = this.updateLanguageInConfig(promptConfig);

        // Add general instructions in prompt-config to promptConfig
        for (const instruction of Object.keys(this.promptInstructions.general)) {
            promptConfig[instruction] = this.promptInstructions.general[instruction];
        }

        return promptConfig;
    }

    updateLanguageInConfig(config) {
        /**
         * Update the language in the prompt configuration
         * Priority: customLanguage > language > siteLanguage
         * CustomLanguage is a custom string defining the language set in the prompt instructions
         * @param {Object} config - The prompt configuration to update the language in
         */

        const promptConfig = config;
        if (promptConfig.specifyLanguage && (promptConfig.specifyLanguage === 'true' || promptConfig.specifyLanguage === true)) {
            promptConfig.languageName = this.getLanguageNameByCode(promptConfig.languageContent);
            promptConfig.languageCode = promptConfig.languageContent;
        } else if (promptConfig.languageSiteSetting === 'siteLanguage') {
            promptConfig.languageName = this.getPageLanguage(promptConfig.siteAlias, 'name', true);
            promptConfig.languageCode = this.getPageLanguage(promptConfig.siteAlias, 'code', true);
        } else {
            // Default to seo language or site language if nothing is specified
            promptConfig.languageName = this.getPageLanguage(promptConfig.siteAlias, 'name', true);
            promptConfig.languageCode = this.getPageLanguage(promptConfig.siteAlias, 'code', true);
        }
        return promptConfig;
    }

    getAiSettings(promptConfig) {
        /**
         * Get the AI settings for the current feature, as defined in admin page Labrador AI for the current site.
         * Passed on to backend AI integration for generation of content
         * Default to provider/model set in 'prompt instructions'-config
         * @param {Object} promptConfig - The prompt configuration to get the AI settings for
         */

        // Use customer defined provider, if set in promptConfig
        if (promptConfig?.aiProvider && this.promptInstructions?.aiProvider && this.promptInstructions.aiProvider[promptConfig.aiProvider]) {
            return this.promptInstructions.aiProvider[promptConfig.aiProvider];
        }

        // Fallback to default provider, as set in "prompt instructions"
        if (this.promptInstructionsFeature?.providerDefault && this.promptInstructions.aiProvider[this.promptInstructionsFeature.providerDefault]) {
            return this.promptInstructions.aiProvider[this.promptInstructionsFeature.providerDefault];
        }

        const defaultAiProvider = 'openAi-gpt4o';

        const aiProvider = this.promptInstructions.aiProvider[defaultAiProvider];
        aiProvider.searchForKeywords = promptConfig.searchForKeywords || [];
        return aiProvider;
    }

    getOriginalContent(labradorModel, fields) {
        /**
         * Get the original content of the article, to be used as a base or context for the prompt
         */
        const originalContent = {};
        for (const field of fields) {
            const fieldContent = labradorModel.get(`fields.${ field }`);
            if (fieldContent && fieldContent.length > 0) {
                originalContent[field] = fieldContent;
            }

        }
        return originalContent;
    }

    prepareCustomParams(labradorModel, params = {}) {
        /**
         * Prepare custom parameters for the prompt, based on the fields stored on the Labrador element-model
         *
         * This method is used to fetch stored data in the fields of the Labrador element-model
         * @param {Object} labradorModel - The Labrador element-model
         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         */
        const customParams = params;
        if (labradorModel) {
            this.configAdmin = this.api.v1.config.getConfig(`pages.labradorAi.data.items.${ params.featureName }`);
            if (this.configAdmin && this.configAdmin.items) {
                const configItems = Object.keys(this.configAdmin.items);
                if (this.promptInstructionsFeature && this.promptInstructionsFeature.items) {
                    for (const item of Object.keys(this.promptInstructionsFeature.items)) {
                        if (!configItems.includes(item)) {
                            configItems.push(item);
                        }
                    }
                }
                for (const item of configItems) {
                    // Get stored fields from the model
                    const customSetting = labradorModel.get(`fields.labradorAi_${ params.featureName }_${ item }`, null, true);

                    // Exception for promptPage, due to sending empty strings
                    if (item === 'promptPage' && customSetting !== undefined) {
                        customParams[item] = customSetting;
                    }

                    if (customSetting !== undefined && customSetting.length > 0) {
                        if (customSetting === 'true') {
                            customParams[item] = true;

                        } else if (customSetting === 'false') {
                            customParams[item] = false;
                        } else {
                            customParams[item] = customSetting;
                        }
                    }

                }
            }
        }
        return customParams;
    }

    getPrompt(promptConfig, originalFields = null) {
        /**
         * Get the prompt for the current feature, as defined by config in admin page Labrador AI for the current site
         * @param {Object} promptConfig - The prompt configuration to render the prompt with
         * @param {Object} originalFields - The original fields of the article to use as context for the prompt
         */

        if (!promptConfig) {
            return '';
        }
        const config = promptConfig;
        let fields = originalFields;
        if (!fields) {
            fields = this.getOriginalContent(this.rootModel, ['title', 'subtitle', 'bodytext', 'modified', 'created', 'published']);
        }

        // Get the original content of the article
        if (fields) {
            for (const field of Object.keys(fields)) {
                // Handle date format
                if (field === 'created' || field === 'modified' || field === 'published') {
                    const timestamp = Number(fields[field]) * 1000;
                    if (timestamp) {
                        fields[field] = new Date(timestamp);
                    }

                }
                if (fields[field]) {
                    config[`original_${ field }`] = fields[field];
                }
            }
        }

        // Build the unrendered prompt
        let unRenderedPrompt = config.promptBase;

        // Add site prompt
        if ((config.promptSite && config.promptSite.length > 0) || (config.promptPage && config.promptPage.length > 0)) {
            unRenderedPrompt += `\n In particular, it is extremly important to follow these instructions: \n`;

            if (config.promptSite && config.promptSite.length > 0) {
                unRenderedPrompt += `- ${ config.promptSite }\n`;
            }

            if (config.promptPage && config.promptPage.length > 0) {
                unRenderedPrompt += `- ${ config.promptPage }\n`;
            }
        }

        // Add general error handling
        /*
        if (config.errorResponse && config.errorResponse.length > 0) {
            unRenderedPrompt += config.errorResponse;
        } */

        // Add original article content (context)
        if (fields && config.originalContent) {
            unRenderedPrompt += config.originalContent;
        }

        const prompt = this.api.v1.util.dom.renderTemplate(unRenderedPrompt, { params: config });
        return prompt;
    }

    getDefaultAiSettingsTemplate() {
        /**
         * Get the default template for the AI feature settings modal
         * The template will be used to render the settings modal for the AI feature
         */
        return `
        {{#formFields}}
            {{#showInGeneral}}
                {{#isTextarea}}
                    <div class="lab-formgroup lab-grid-gap lab-grid-large-12 lab-grid-small-12">
                            <label for="{{key}}"><b>{{label}}</b></label>
                            <textarea id="{{key}}" class="featureSetting" name="{{key}}" placeholder="{{placeholder}}" style="height: 100px;">{{defaultValue}}</textarea>
                    </div>
                {{/isTextarea}}

                {{#isSelect}}
                <div class="lab-formgroup lab-grid-gap lab-grid-large-6 lab-grid-small-12">

                    <label for="{{key}}"><b>{{label}}</b></label>
                    <select id="{{key}}" name="{{key}}" class="featureSetting">
                        {{#options}}
                        <option value="{{value}}" {{#isSelected}}selected{{/isSelected}}>{{label}}</option>
                        {{/options}}
                    </select>
                </div>
                {{/isSelect}}

                {{#isInput}}
                <div class="lab-formgroup lab-grid-gap lab-grid-large-6 lab-grid-small-12">

                    <label for="{{key}}"><b>{{label}}</b></label>
                    {{#isCheckbox}}
                    <input type="checkbox" id="{{key}}" name="{{key}}" class="featureSetting" {{#defaultValue}}checked{{/defaultValue}}>
                    {{/isCheckbox}}

                    {{^isCheckbox}}
                    <input type="{{contentType}}" id="{{key}}" name="{{key}}" class="featureSetting" placeholder="{{placeholder}}" value="{{defaultValue}}">
                    {{/isCheckbox}}
                </div>
                {{/isInput}}
            {{/showInGeneral}}
        {{/formFields}}

        <div class="settings-container">
            <div id="toggle-advanced-btn" class="lab-btn text-completion lab-is-clickable" currentstate="hidden">Show Advanced Settings</div>
            {{#formFields}}
            <div class="advanced-setting lab-formgroup lab-grid-gap lab-grid-large-4 lab-grid-small-12 lab-hidden">
                {{#showInAdvanced}}
                    {{#isSelect}}
                    <label for="{{key}}"><b>{{label}}</b></label>
                    <select id="{{key}}" name="{{key}}" class="featureSetting">
                        {{#options}}
                        <option value="{{value}}" {{#isSelected}}selected{{/isSelected}}>{{label}}</option>
                        {{/options}}
                    </select>
                    {{/isSelect}}
            
                    {{#isInput}}
                    <label for="{{key}}"><b>{{label}}</b></label>
                        {{#isCheckbox}}
                        <input type="checkbox" id="{{key}}" name="{{key}}" class="featureSetting" {{#defaultValue}}checked{{/defaultValue}}>
                        {{/isCheckbox}}
            
                        {{^isCheckbox}}
                        <input type="{{contentType}}" id="{{key}}" name="{{key}}" class="featureSetting" placeholder="{{placeholder}}" value="{{defaultValue}}">
                        {{/isCheckbox}}
                    {{/isInput}}
                {{/showInAdvanced}}
            </div>
            {{/formFields}}
        </div>`;
    }

    setupTemplateConfig(params, adminConfigFeature, pageConfigFeature) {
        /**
         * Setup the template configuration for the AI feature settings modal
         * The template configuration will be used to render the settings modal for the AI feature
         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         * @param {Object} adminConfigFeature - The configuration for the AI feature settings from the admin page 'Labrador AI'
         */
        const { featureName } = params;

        const templateConfigItems = adminConfigFeature.items;

        // Add items available from settings modal on page (if not already set in admin config)
        if (pageConfigFeature && pageConfigFeature.items) {
            for (const item of Object.keys(pageConfigFeature.items)) {
                if (!templateConfigItems[item]) {
                    templateConfigItems[item] = pageConfigFeature.items[item];
                }
            }
        }

        const customParams = {};
        for (const item of Object.keys(templateConfigItems)) {

            // If model value is set, then use that
            const modelValue = this.labradorModel.get(`fields.labradorAi_${ featureName }_${ item }`, null, true);
            if (modelValue !== undefined) {
                customParams[item] = modelValue;
            }
        }

        const promptConfig = this.getPromptConfig(params, customParams);
        for (const item of Object.keys(templateConfigItems)) {
            if (promptConfig[item]) {
                templateConfigItems[item].defaultValue = promptConfig[item];
            }

            // If model value is set, then use that
            const modelValue = this.labradorModel.get(`fields.labradorAi_${ featureName }_${ item }`);

            if (modelValue) {
                templateConfigItems[item].defaultValue = modelValue;
            } else if (item === 'promptPage') {
                templateConfigItems[item].defaultValue = '';
            }
        }

        // Handle special case model, model depends on selected provider
        /*
        if (!templateConfigItems.model.defaultValue || templateConfigItems.model.defaultValue.length === 0) {
            if (!templateConfigItems.provider.defaultValue) {
                // Add placeholder for model
                const { providerDefault } = this.promptInstructions.feature[featureName];
                templateConfigItems.model.defaultValue = this.promptInstructions.feature[featureName].providerSettings[providerDefault].model;
            } else {
                templateConfigItems.model.defaultValue = this.promptInstructions.feature[featureName].providerSettings[templateConfigItems.provider.defaultValue].model;
            }
            promptConfig.model = templateConfigItems.model.defaultValue;
        }
            */

        // option for language, fetch language list set that to "options"
        if (templateConfigItems.languageContent) {
            const initialLanguage = promptConfig.languageCode || this.getPageLanguage(params.siteAlias, 'code', true);
            const languages = _ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"].map((language) => ({ label: language.name, value: language.code, selected: language.code === initialLanguage }));
            templateConfigItems.languageContent.options = languages;
            templateConfigItems.languageContent.defaultValue = initialLanguage;
        }
        return [templateConfigItems, promptConfig];
    }

    setupTemplateParams(templateConfigItems) {
        /**
         * Setup the template parameters for the AI feature settings modal
         * Form fields are used as template parameters in the AI feature settings modal
         * @param {Object} templateConfigItems - The configuration items for the AI feature settings
         */

        const formFields = Object.entries(templateConfigItems).map(([key, value]) => ({
            key,
            label: value.label || '',
            showInGeneral: ((!value.adminSettingOnly || value.adminSettingOnly === false) && (!value.advanced || value.advanced === false)) || false,
            showInAdvanced: ((!value.adminSettingOnly || value.adminSettingOnly === false) && (value.advanced && value.advanced === true)) || false,
            placeholder: value.placeholder || '',
            contentType: value.contentType || 'text',
            defaultValue: (value.contentType === 'checkbox' && (value.defaultValue === false || value.defaultValue === 'false')) ? null : value.defaultValue,
            options: (value.options || []).map((option) => ({
                ...option,
                isSelected: option.value === value.defaultValue // Check if this option should be selected
            })),
            isTextarea: value.contentType === 'textarea',
            isSelect: value.contentType === 'select',
            isInput: !['textarea', 'select'].includes(value.contentType),
            isCheckbox: value.contentType === 'checkbox' // Check if this is a checkbox

        }));
        return formFields;
    }

    openFeatureSettings(labradorModel, labradorView, labradorItem, params) {
        /**
         * Open the settings modal for the AI feature
         * The settings modal will allow the user to configure the AI feature for the current article
         * The settings will be stored on the Labrador element-model
         * The settings will be used as parameters for the prompt to generate content with Labrador AI
         * @param {Object} labradorModel - The Labrador element-model
         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         */
        this.labradorModel = labradorModel;

        // Get the feature settings from the admin page Labrador AI, define feature-config and modal html-template
        const adminConfigFeature = this.api.v1.config.getConfig(`pages.labradorAi.data.items.${ params.featureName }`);
        const pageConfigFeature = this.promptInstructions.feature[params.featureName];
        const [templateConfigItems, promptConfig] = this.setupTemplateConfig(params, adminConfigFeature, pageConfigFeature);
        const templateParams = this.setupTemplateParams(templateConfigItems);
        const template = this.getDefaultAiSettingsTemplate();

        // Render the modal with the feature settings
        const markup = this.api.v1.util.dom.renderTemplate(template, { formFields: templateParams });
        this.api.v1.ui.modal.dialog({
            container: {
                css: 'baseview-textcompletion'
            },
            content: {
                header: `${ adminConfigFeature.label } settings`,
                markup: `<p><b>${ adminConfigFeature.description }</b></p>
                <p>Configured settings will affect the '${ adminConfigFeature.label }'-feature for <em>this</em> article. To change the settings for <em>all</em> articles, go to the <a href="/settings/cp?page=labradorAi">Labrador AI admin page.</a></p>
                <div class="lab-grid">${ markup }</div>`
            },
            callbacks: {
                didDisplay: (modal) => {
                    const modalMarkup = modal.getMarkup();

                    const languageSetting = modalMarkup.querySelector('#languageSiteSetting');
                    const languageContent = modalMarkup.querySelector('#languageContent');

                    if (promptConfig.specifyLanguage && promptConfig.specifyLanguage === 'true' && languageSetting) {
                        // Language setting, as set in admin
                        languageSetting.setAttribute('disabled', true);
                        languageSetting.parentElement.classList.add('lab-disabled');

                        // Optional language selection
                        languageContent.removeAttribute('disabled');
                        languageContent.parentElement.classList.remove('lab-disabled');

                    } else if (languageSetting) {
                        languageSetting.removeAttribute('disabled');
                        languageSetting.parentElement.classList.remove('lab-disabled');

                        // Optional language selection
                        languageContent.setAttribute('disabled', true);
                        languageContent.parentElement.classList.add('lab-disabled');
                    }
                    if (params && params.disableGenerateButton) {
                        const generateButton = modalMarkup.querySelector('.lab-generate');
                        generateButton.style.display = 'none';
                    }
                }

            },
            eventHandlers: [{
                selector: '#toggle-advanced-btn',
                event: 'click',
                callback: (modal, event) => {

                    const button = document.getElementById('toggle-advanced-btn');
                    const currentState = button.getAttribute('currentstate');
                    if (currentState && currentState === 'hidden') {
                        button.setAttribute('currentstate', 'open');
                        button.textContent = 'Hide Advanced Settings';
                    } else {
                        button.setAttribute('currentstate', 'hidden');
                        button.textContent = 'Show Advanced Settings';
                    }

                    const advancedSettings = document.querySelectorAll('.advanced-setting');
                    for (const setting of advancedSettings) {
                        if (setting.classList.contains('lab-hidden')) {
                            setting.classList.remove('lab-hidden');
                        } else {
                            setting.classList.add('lab-hidden');
                        }
                    }
                }
            },
            {
                selector: 'input[type="checkbox"]',
                event: 'click',
                callback: (modal, event) => {
                    const checkboxElement = event.target;
                    if (event.target.checked === true) {
                        checkboxElement.setAttribute('checked', true);
                    } else {
                        checkboxElement.setAttribute('checked', false);
                    }

                    if (checkboxElement.id === 'specifyLanguage') {
                        const languageSetting = document.getElementById('languageSiteSetting');
                        const languageContent = document.getElementById('languageContent');
                        if (checkboxElement.checked === true) {
                            languageSetting.setAttribute('disabled', true);
                            languageSetting.parentElement.classList.add('lab-disabled');

                            // Optional language selection
                            languageContent.removeAttribute('disabled');
                            languageContent.parentElement.classList.remove('lab-disabled');
                        } else {
                            languageSetting.removeAttribute('disabled');
                            languageSetting.parentElement.classList.remove('lab-disabled');

                            // Optional language selection
                            languageContent.setAttribute('disabled', true);
                            languageContent.parentElement.classList.add('lab-disabled');
                        }
                    }
                }
            },
            {
                selector: '#save-ai-feature-settings',
                event: 'click',
                callback: (modal, event) => {
                    const featureSettingElements = document.querySelectorAll('.featureSetting');
                    this.updateFeatureParamsFromSettings(featureSettingElements, params, promptConfig);

                    modal.close();
                }
            },
            {
                selector: '#generate-ai-content',
                event: 'click',
                callback: (modal, event) => {
                    const featureSettingElements = document.querySelectorAll('.featureSetting');
                    this.updateFeatureParamsFromSettings(featureSettingElements, params, promptConfig);
                    this.api.v1.ns.get('textAssistant.generateContent')(this.labradorModel, labradorView, labradorItem, params);
                    modal.close();
                }
            }, {
                selector: '#button-close',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }],
            footer: {
                buttons: [
                    {
                        value: 'Cancel',
                        type: 'button',
                        id: 'button-close',
                        highlight: false
                    },
                    {
                        value: 'Save',
                        type: 'button',
                        id: 'save-ai-feature-settings',
                        hightlight: true
                    },
                    {
                        value: 'Generate',
                        type: 'button',
                        id: 'generate-ai-content',
                        class: 'lab-generate'

                    }
                ]
            }
        });
    }

    requestGeneration(prompt, aiIntegrationSettings = { model: 'gpt-4o' }) {
        /**
         * Request generation of content from Labrador AI
         * @param {string} prompt - The rendered prompt to generate content from, includes instructions and context
         * @param {Object} aiIntegrationSettings - The settings to define parameters of the AI model
         */
        return new Promise((resolve, reject) => {
            const options = {
                prompt,
                service: 'chatCompletions',
                model: aiIntegrationSettings.model,
                aiSettings: aiIntegrationSettings
            };
            this.api.v1.generate.text(options).then((result) => {
                resolve(result);
            }).catch((error) => {
                reject(error);
            });
        });
    }

    updateModelFields(model, view, fields, addLocalizedStringPath = false, setToRootModel = false, setToViewAiField = false) {
        /**
         * Update the Labrador element-model with the fields provided.
         * If addLocalizedStringPath is included, then append a localized string to the bodytext.
         * If setToRootModel is true, then update the root model as well
         * @param {Object} model - The Labrador element-model
         * @param {Object} fields - The fields to update the model with
         * @param {string} addLocalizedStringPath - The path to the localized string to append to the bodytext
         * @param {boolean} setToRootModel - If true, then update the root model as well
         * @param {boolean} setToViewAiField - If true, then update the view as well
         */
        let modelFields = fields;
        const parentViews = this.api.v1.view.getViews(this.rootModel);
        if (typeof modelFields !== 'object') {
            modelFields = JSON.parse(fields);
        }
        for (const field of Object.keys(modelFields)) {
            if (setToRootModel === true) {
                this.rootModel.set(`fields.${ field }`, modelFields[field]);
            }
            if (setToViewAiField === true) {
                for (const parentView of parentViews) {
                    parentView.set(`fields.${ field }`, modelFields[field]);
                }
            }
            model.set(`fields.${ field }`, modelFields[field]);
        }

        // Append localized string to bodytext
        if (addLocalizedStringPath) {
            this.appendLocalizedString(model, 'fields.bodytext', addLocalizedStringPath);
        }
    }

    preprocessGeneration(model, view, menuItem, params) {
        /**
         * Pre-process the generation of content from Labrador AI
         * @param {Object} model - The Labrador element-model
         * @param {Object} view - The view (element) to modify class names in
         * @param {Object} menuItem - The menu item that triggered the generation
         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         */
        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }]: Start preprocess of generateContent`);
        if (view) {
            this.modifyClassNamesInView(view, { add: ['lab-busy', 'lab-busy-top'] });
        }

        // Custom params are fields stored on the model
        const customParams = this.prepareCustomParams(model, params);

        // Config setup for prompt, priorities customParams over site/admin config
        const promptConfig = this.getPromptConfig(params, customParams);
        const prompt = this.getPrompt(promptConfig);
        const aiIntegrationSettings = this.getAiSettings(promptConfig);
        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }]: Finished preprocess of generateContent`);

        return [prompt, aiIntegrationSettings];
    }

    postprocessGeneration(model, view, menuItem, params, result) {
        /**
         * Post-process the generated content from Labrador AI
         * @param {Object} model - The Labrador element-model
         * @param {Object} view - The view (element) to modify class names in
         * @param {Object} menuItem - The menu item that triggered the generation
         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         * @param {string} result - The generated content from Labrador AI
         */
        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }] Generated content successfully`);

        if (!params || typeof params !== 'object') {
            return result;
        }

        if (params.returnRawContent === true) {
            return result;
        }

        let modelFields = result;
        if (params.cleanUpJsonString === true || !params.cleanUpJsonString) {
            modelFields = this.cleanUpJsonString(result);
        }

        if (params.cleanUpJsonString && params.cleanUpJsonString === false) {
            return modelFields;
        }

        if (model && params.updateModel !== false) {
            const suffixString = params.localizedStringPath || false;
            const setToRootModel = params.setToRootModel || false;
            const setToViewAiField = params.setToViewAiField || false;
            this.updateModelFields(model, view, modelFields, suffixString, setToRootModel, setToViewAiField);
        }

        if (view && params.updateView !== false) {
            this.modifyClassNamesInView(view, { remove: ['lab-busy', 'lab-busy-top'] });
        }
        Sys.logger.debug(`[Labrador Ai - ${ params.featureName }] Finished post-process generation`);
        return modelFields;
    }

    cleanUpJsonString(data) {
        /**
         * Clean up the JSON string to be used for updating the Labrador element-model
         * @param {string} data - The JSON string to clean up
         */
        let jsonString = data.trim();

        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {
            jsonString = jsonString.substring(jsonString.indexOf('{'));
        }

        if (!jsonString.includes('{')) {
            jsonString = `{${ jsonString }`;
        }

        if (!jsonString.includes('}')) {
            jsonString = `${ jsonString }}`;
        }

        // Test to choose the correct '}'. Ignore '}' with '\' ahead
        if (jsonString.match(/}/g).length > 1) {
            jsonString = jsonString.match(/(.|\n)*?(?<!\\)}/);
        }

        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {
            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);
        }

        jsonString = jsonString.trim();
        return jsonString;
    }

    appendLocalizedString(model, fieldPath, localizationPath) {
        /**
         * Append a localized string to the bodytext of the Labrador element-model
         * The localized string might be a disclaimer or similar
         * Localized string is defined in the Admin page 'Language options'
         * @param {Object} model - The Labrador element-model
         * @param {string} fieldPath - The path to the field to append the localized string to
         * @param {string} localizationPath - The path to the localized string to append
         */
        const fieldContent = model.get(fieldPath);
        if (!fieldContent || fieldContent.length === 0) {
            return;
        }
        const localizedString = lab_api.v1.locale.get(localizationPath);
        if (!localizedString || localizedString.length === 0) {
            return;
        }
        model.set(fieldPath, `${ fieldContent }<hr><p class="italic ai-disclaimer" data-lab-italic="italic">${ localizedString }</p>`);
    }

    getPageLanguage(site, returnValue = 'name', returnSeoLanguage = false) {
        /**
         * Get the name of the language from the language code
         * @param {string} languageCode - The language code to get the name for
         */

        // Return seo language (prioritized)
        if (returnSeoLanguage) {
            const seolanguage = this.rootModel?.get('fields.seolanguage');
            if (seolanguage) {
                for (const contentLanguage of _ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
                    if (seolanguage === contentLanguage.code) {
                        if (returnValue === 'code') {
                            return contentLanguage.code;
                        }
                        if (returnValue === 'name') {
                            return contentLanguage.name;
                        }
                    }
                }
            }
        }

        const langCode = lab_api.v1.config.get('contentLanguage', { site });
        if (!langCode) {
            return '';
        }

        // Return site langauge
        for (const contentLanguage of _ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
            if (contentLanguage.code === langCode) {
                if (returnValue === 'code') {
                    return contentLanguage.code;
                }
                if (returnValue === 'name') {
                    return contentLanguage.name;
                }
            }
        }

        return '';
    }

    getLanguageNameByCode(langCode) {
        if (!langCode) {
            return '';
        }
        for (const contentLanguage of _ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
            if (contentLanguage.code === langCode) {
                return contentLanguage.name;
            }
        }

        return '';
    }

    getContentLanguages() {
        /**
         * Get the content languages for the current site
         */
        return _ContentLanguages_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    }

    modifyClassNamesInView(view, classModifications) {
        /**
         * Modify the class names in the view content element
         * If warning or error is added, then it will removed after 3 seconds
         * @param {Object} view - The view (element) to modify class names in
         * @param {Object} classModifications - The class modifications to apply, like add or remove class names
         */
        const viewContentElement = view.getMarkup().querySelector('.content');
        if (viewContentElement) {
            if (classModifications.add) {
                viewContentElement.classList.add(...classModifications.add);
                if (viewContentElement.classList.contains('lab-highlight-warn')) {
                    setTimeout(() => {
                        this.modifyClassNamesInView(view, { remove: ['lab-highlight-warn'] });
                    }, 3000);
                }
                if (viewContentElement.classList.contains('lab-highlight-error')) {
                    setTimeout(() => {
                        this.modifyClassNamesInView(view, { remove: ['lab-highlight-error'] });
                    }, 3000);
                }
            }
            if (classModifications.remove) {
                viewContentElement.classList.remove(...classModifications.remove);
            }
        }
    }

    updateFeatureParamsFromSettings(featureSettingElements, params, promptConfig) {
        /**
         * Update the feature parameters from the settings modal
         * The feature parameters are stored on the Labrador element-model
         * When a user is changing the data set in the settings modal, the data is stored on the Labrador element-model
         * @param {Object} featureSettingElements - The elements in the settings modal to update the feature parameters from
         * @param {Object} params - The parameters to get the prompt configuration for, like featureName, siteAlias, etc.
         * @param {Object} promptConfig - The prompt configuration to update the feature parameters from
         */
        for (const element of featureSettingElements) {
            const key = element.getAttribute('id');
            let value;
            if (element.value) {
                value = element.value;
            }

            if (element.tagName === 'INPUT' && element.type === 'checkbox') {
                value = element.checked;
                this.labradorModel.set(`fields.labradorAi_${ params.featureName }_${ key }`, String(element.checked));
            } else if (!value && (element.type === 'textarea' || element.type === 'text')) {
                this.labradorModel.set(`fields.labradorAi_${ params.featureName }_${ key }`, '');
            } else if (value && String(promptConfig[key]) !== String(value)) {
                this.labradorModel.set(`fields.labradorAi_${ params.featureName }_${ key }`, value);
            }
        }
    }

}


/***/ }),

/***/ "./modules/lib/helpers/LanguageHelper.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/LanguageHelper.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LanguageHelper": () => (/* binding */ LanguageHelper)
/* harmony export */ });
class LanguageHelper {

    static convertToIso639(language) {
        /**
         * Convert language code to ISO 639 code (two or three letter code) for news sitemap
         */
        let languageIso639Code = '';
        if (language) {
            // Accept tree letter language codes
            if (language.length === 3) {
                languageIso639Code = language.toLowerCase();
            } else if (language.includes('-')) {
                languageIso639Code = language.split('-')[0].toLowerCase();
            } else {
                languageIso639Code = language.toLowerCase();
            }
        }
        return languageIso639Code;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/LayoutHelper.js":
/*!*********************************************!*\
  !*** ./modules/lib/helpers/LayoutHelper.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LayoutHelper": () => (/* binding */ LayoutHelper)
/* harmony export */ });
class LayoutHelper {

    static textElements(view, isEditor) {
        const layout = {
            top: [],
            floating: [],
            bottom: [],
            positions: {
                kicker: '',
                title: ''
            }
        };

        let kickerPosition = '';
        let titlePosition = '';

        // Process the kicker first
        if (view.get('metadata.showKicker') && (isEditor || (!!view.get('fields.kicker') || !!view.get('fields.origin_data_json.teaserKicker') || !!view.get('fields.origin_data_json.kicker')))) {
            if (view.get('metadata.floatingKicker')) {
                layout.floating.push('kicker');
                layout.positions.kicker = 'floating';
                kickerPosition = 'floating';
            } else if (!view.get('metadata.kickerBelowImage')) {
                layout.top.push('kicker');
                layout.positions.kicker = 'above';
                kickerPosition = 'top';
            } else {
                layout.bottom.push('kicker');
                layout.positions.kicker = 'below';
                kickerPosition = 'bottom';
            }
        }

        // Process the title
        if (!view.get('metadata.hideTitle') && (isEditor || !!view.get('fields.title'))) {
            if (view.get('metadata.floatingTitle')) {
                layout.floating.push('title');
                layout.positions.title = 'floating';
                titlePosition = 'floating';
            } else if (view.get('metadata.titleAboveImage')) {
                layout.top.push('title');
                layout.positions.title = 'above';
                titlePosition = 'top';
            } else {
                layout.bottom.push('title');
                layout.positions.title = 'below';
                titlePosition = 'bottom';
            }
        }

        // Adjust the kicker's position if kickerBelowTitle is set
        if (view.get('metadata.kickerBelowTitle') && view.get('metadata.showKicker')) {
            if (titlePosition) {
                // Remove 'kicker' from its current array
                if (kickerPosition) {
                    const index = layout[kickerPosition].indexOf('kicker');
                    if (index !== -1) {
                        layout[kickerPosition].splice(index, 1);
                    }
                }

                // Insert 'kicker' after 'title' in the title's position array
                const positionArray = layout[titlePosition];
                const titleIndex = positionArray.indexOf('title');
                if (titleIndex !== -1) {
                    positionArray.splice(titleIndex + 1, 0, 'kicker');
                } else {
                    // If 'title' not found, add 'kicker' to the position array
                    positionArray.push('kicker');
                }
                layout.positions.kicker = 'belowTitle';
                kickerPosition = titlePosition;
            }
        }

        // Process the subtitle
        if (!view.get('metadata.hidesubtitle') && (isEditor || (!!view.get('fields.subtitle') || !!view.get('fields.origin_data_json.teaserSubtitle')))) {
            if (view.get('metadata.floatingSubtitle')) {
                layout.floating.push('subtitle');
            } else if (view.get('metadata.subtitleAboveImage')) {
                layout.top.push('subtitle');
            } else {
                layout.bottom.push('subtitle');
            }
        }

        return layout;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/LazyloadHelper.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/LazyloadHelper.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LazyloadHelper": () => (/* binding */ LazyloadHelper)
/* harmony export */ });
class LazyloadHelper {

    constructor(api) {
        this.api = api;
        this.isEditor = this.api.v1.app.mode.isEditor();
        this.isFragmentMode = this.api.v1.app.mode.isFragmentMode();
        this.lazyloadImages = !this.isEditor && !!this.api.v1.config.get('imageLoading.lazy');
    }

    // (bool) Check if image should be lazyloaded.
    check(model, view) {
        if (!this.lazyloadImages || view.getProperty('image.noLazy')) {
            return false;
        }
        const row = lab_api.v1.model.query.getParentOfType(model, 'row');
        if (row && !this.isFragmentMode && row.getModelIndex() < 5) {
            return false;
        }
        return true;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/Movable.js":
/*!****************************************!*\
  !*** ./modules/lib/helpers/Movable.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Movable": () => (/* binding */ Movable)
/* harmony export */ });
// Usage:
// model.setFiltered('movableStyle', Movable.createStyle(model, 'metadata.contentPosition', ['desktop', 'mobile']));

class Movable {

    static mediaQueries = {
        desktop: '(min-width:1024px)',
        mobile: '(max-width: 1023px)'
    };

    static createStyle(model, path, viewports, mediaQueries = this.mediaQueries) {
        const items = [];
        for (const viewport of viewports) {
            const vpData = mediaQueries[viewport] ? model.get(path, viewport) : null; // { x, y, selector }
            if (vpData) {
                items.push(`@media ${ mediaQueries[viewport] } { ${ vpData.selector } { transform: translate(${ vpData.x }px, ${ vpData.y }px); } }`);
            }
        }
        return `<style>${ items.join('\n') }</style>`;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/PageExport.js":
/*!*******************************************!*\
  !*** ./modules/lib/helpers/PageExport.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageExport": () => (/* binding */ PageExport)
/* harmony export */ });
/**
 * Make a serialized JSON-object of page.
 * Return an object matching Labrador API: { result: [...] }.
 * Also add "page".
 * Use structure-data for ordering.
 */

class PageExport {

    constructor(api) {
        this.api = api;
        this.paths = {
            main: ['parent', 'guid', 'type', 'tags'],
            fields: ['feedId', 'byline', 'bylineImage', 'paywall', 'published', 'published_url', 'site_alias', 'site_id', 'subtitle', 'subtitleHTML', 'teaserSubtitle', 'somedescription', 'title', 'teaserTitle', 'titleHTML', 'seolanguage', 'seotitle', 'sometitle', 'kicker', 'teaserKicker', 'showcomments'],
            fieldsAuto: ['section_tag', 'tags'],
            fieldsNative: ['section'],
            fieldMap: {
                subtitle: 'description', subtitleHTML: 'descriptionHTML', somedescription: 'someDescription', teaserSubtitle: 'teaserDescription', seolanguage: 'seolanguage', seotitle: 'seoTitle', sometitle: 'someTitle', published_url: 'url', section_tag: 'section'
            },
            fallback: {
                url: 'url' // JSON-feeds
            }
        };
        this.frontUrl = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
        this.imageServer = this.api.v1.properties.get('image_server');
    }

    jsonData(rootModel) {
        Sys.logger.debug('[PageExport] Will export page as JSON-data');
        const page = this.api.v1.model.serialize.model(rootModel);
        delete page.guid;
        const result =  rootModel.getType() === 'page_article' ? this.exportArticle() : this.exportFront();
        return {
            page,
            result
        };
    }

    oembed(rootModel) {
        if (rootModel.getType() !== 'page_article') {
            Sys.logger.warn('[PageExport] Will not export current page type as oEmbed.');
            return {};
        }
        Sys.logger.debug('[PageExport] Will export page as oEmbed');
        return {
            version: '1.0',
            type: 'rich',
            width: '',
            height: '',
            title: this.api.v1.util.string.sanitizeString(rootModel.get('fields.title') || ''),
            url: rootModel.get('filtered.url') || '',
            author_name: this.api.v1.site.getSite().display_name || this.api.v1.site.getSite().alias,
            author_url: this.frontUrl,
            provider_name: 'Labrador',
            provider_url: 'http://www.labradorcms.com/',
            html: `<div class="labrador-cms-embed" data-lab-style="dac-no-sitelink dac-no-sitelink-logo dac-no-poweredby dac-embed-full" data-lab-content="full" data-lab-id="${ rootModel.get('id') }" data-lab-site="${ rootModel.get('filtered.site.domain_no_protocol') }"><script async defer src="${ this.frontUrl }/embed.js?v=335"></script></div>`
        };
    }

    exportArticle() {}

    exportFront() {
        const dropZone = this.api.v1.model.query.getModelByType('dropZone');
        return this.api.v1.model.query.getModelsByType('article', [dropZone]).map((model) => this.serialize(model)).filter((article) => !!article);
    }

    serialize(model) {
        const serialized = this.api.v1.model.serialize.model(model);
        if (!serialized || !serialized.fields) {
            return null;
        }
        const isAuto = !!serialized.fields.origin_data_json;
        const result = {
            images: [],
            width: model.getWidth('desktop'),
            metadata: serialized.metadata,
            isAutomatic: isAuto,
            siteDomain: this.frontUrl
        };
        const fields = isAuto ? serialized.fields.origin_data_json : serialized.fields;
        const fieldKeys = [...this.paths.fields, ...(isAuto ? this.paths.fieldsAuto : this.paths.fieldsNative)];
        for (const key of this.paths.main) {
            result[key] = serialized[key] || '';
        }
        for (const key of fieldKeys) {
            result[this.paths.fieldMap[key] || key] = fields[key] || '';
        }
        // Add 'teaserSubtitle' (replaced with 'teaserDescription')
        result.teaserSubtitle = fields.teaserSubtitle || '';
        if (isAuto) {
            if (!result.byline) {
                const bylineObj = (fields.full_bylines || []).shift();
                result.byline = bylineObj ? `${ bylineObj.firstname } ${ bylineObj.lastname }` : '';
                result.bylineImage = result.bylineImage || (bylineObj || {}).imageUrl;
            }
            if (typeof result.tags === 'string') {
                result.tags = result.tags.split(',').map((tag) => (tag || '').trim());
            }
            result.site_alias = (this.api.v1.site.getSiteById(fields.site_id) || {}).alias;
            result.id = parseInt(fields.id, 10);
        } else {
            result.titleHTML = result.title;
            result.title = this.cleanText(result.title);
            result.descriptionHTML = result.description;
            result.description = this.cleanText(result.description);
            result.kickerHTML = result.kicker;
            result.kicker = this.cleanText(result.kicker);
            result.id = serialized.id;
        }
        result.section_tag = result.section;
        if (result.url && !result.url.startsWith('http')) {
            result.url = this.frontUrl + result.url;
        }
        for (const key of (Object.keys(this.paths.fallback))) {
            if (!result[key]) {
                result[key] = fields[this.paths.fallback[key]] || '';
            }
        }

        // Bylines
        result.full_bylines = (isAuto ? fields.full_bylines : fields.full_bylines_json) || [];
        result.full_bylines = result.full_bylines.map((byline) => ({
            firstname: byline.firstname,
            lastname: byline.lastname,
            description: byline.description,
            imageUrl: this.getImageUrl(byline.imageUrl)
        }));
        if (isAuto && result.byline) {
            result.full_bylines.unshift({
                firstname: result.byline,
                lastname: '',
                imageUrl: this.getImageUrl(result.bylineImage)
            });
        }
        if (!result.byline && result.full_bylines.length) {
            result.byline = `${ result.full_bylines[0].firstname } ${ result.full_bylines[0].lastname }`;
            result.bylineImage = result.full_bylines[0].imageUrl.replace(this.imageServer, '');
        }

        const customFields = lab_api.v1.config.get('customAdapterFields.article') || [];
        if (customFields) {
            for (const key of customFields) {
                if (key) {
                    let fieldValue = serialized.fields[key] || '';
                    if (!fieldValue && serialized.fields.origin_data_json) {
                        fieldValue = serialized.fields.origin_data_json[key] || '';
                    }
                    if (fieldValue) {
                        result[key] = fieldValue;
                    }
                }
            }
        }

        result.paywall = result.paywall === '0' ? false : !!result.paywall;
        const imageModel = this.api.v1.model.query.getChildOfType(model, 'image');
        if (imageModel) {
            const url = imageModel.get('filtered.image');
            if (url) {
                result.images.push({
                    url,
                    jpg: `${ url }&format=jpg`,
                    webp: `${ url }&format=webp`,
                    url_size: url,
                    default: '1',
                    id: imageModel.get('instance_of')
                });
            }
        }
        return result;
    }

    cleanText(markup) {
        return this.api.v1.util.string.sanitizeString(markup).replace(/&amp;/g, '&');
    }

    getImageUrl(url) {
        if (!url) { return ''; }
        if (url.startsWith('http')) { return url; }
        return this.imageServer + url;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/Paywall.js":
/*!****************************************!*\
  !*** ./modules/lib/helpers/Paywall.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Paywall": () => (/* binding */ Paywall)
/* harmony export */ });
class Paywall {

    static defaultLineIndex = 3;

    // Paywall-mode. Render for users without access
    // - Only include a configured number of bodytext-lines
    // - Omit all elements inside the bodytext
    static filterBodytext(model, view) {
        let lineIndex = lab_api.v1.config.get('paywall.bodytext.lineCount');
        if (lineIndex === null || lineIndex === false) {
            lineIndex = this.defaultLineIndex;
        }
        const lineData = model.get('filtered.lineData');
        let { bodytext } = lineData;
        const indexRegister = lineData.indexRegister.reverse();
        if (indexRegister.length <= lineIndex) {
            lineIndex = indexRegister.length - 1;
        }
        if (indexRegister[lineIndex]) {
            bodytext = bodytext.substring(0, indexRegister[lineIndex].charIndex);
        }
        return bodytext;
    }

    static iterasPaywall(config, tags) {
        const paywallConfig = {
            id: config.id,
            offersTitle: config.offersTitle,
            alreadySubscribedText: config.alreadySubscribedText,
            alreadySubscribedLink: config.alreadySubscribedLink,
            offers: config.offers,
            offerButtonLink: config.offerButtonLink,
            offerButtonText: config.offerButtonText,
            offersSalesText: config.offersSalesText
        };

        const extraPaywall = config.extraPaywalls.find((paywall) => tags.includes(paywall.triggerTag)) || null;
        if (extraPaywall) {
            paywallConfig.id = extraPaywall.id;
            paywallConfig.offersTitle = extraPaywall.offersTitle;
            paywallConfig.alreadySubscribedText = extraPaywall.alreadySubscribedText;
            paywallConfig.alreadySubscribedLink = extraPaywall.alreadySubscribedLink;
            paywallConfig.offers = extraPaywall.offers;
            paywallConfig.offerButtonLink = extraPaywall.offerButtonLink;
            paywallConfig.offerButtonText = extraPaywall.offerButtonText;
            paywallConfig.offersSalesText = extraPaywall.offersSalesText;
        }
        return paywallConfig;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/ResourceHelper.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/ResourceHelper.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResourceHelper": () => (/* binding */ ResourceHelper)
/* harmony export */ });
class ResourceHelper {

    /**
     * Fetches paths to stylesheets specified for a given site. Stylesheets can be specified in "site_styles.<SITE ALIAS>".
     *
     * @param {string} siteAlias Site to fetch stylesheet paths for.
     * @param {Array<string>} fallbackValue An array of fallback stylesheet paths to use in case of failure.
     * @returns {Array<string>} An array containing paths to stylesheets for the provided site.
     */
    static getSiteStyles(siteAlias, fallbackValue = []) {
        const paths = lab_api.v1.config.get(`site_styles.${ siteAlias }`) || fallbackValue;
        Sys.logger.debug(`ViewSupport: Found ${ Array.isArray(paths) ? paths.length : 0 } stylesheet(s) for site "${ siteAlias }".`);
        return paths;
    }

    /**
     * Get a list of paths for stylesheets.
     * If none is defined, check configured fallback-site
     * A site using a fallback-site may set site_styles.<SITE ALIAS> to an empty array to prevent using fallback-resources.
     *
     * @param {string} siteAlias Site to fetch stylesheet paths for.
     * @param {Array<string>} ignoreSites An array of site aliases refering to sites which are to be ignored.
     * @returns {Array<string>} An array containing paths to stylesheets for the provided site or any of its declared fallback sites.
     */
    static getSiteStylesWithFallback(siteAlias, ignoreSites = []) {
        const paths = this.getSiteStyles(siteAlias, null);
        if (paths === null) {
            ignoreSites.push(siteAlias);
            const fallbackSite = lab_api.v1.config.get('lab_fallback_site', { site: siteAlias });
            if (fallbackSite && !ignoreSites.includes(fallbackSite)) {
                return this.getSiteStylesWithFallback(fallbackSite, ignoreSites);
            }
        }
        return paths || [];
    }

    /**
     * Fetches an array of script paths for a site based on the provided site alias.
     *
     * @param {string} siteAlias The alias of the site to fetch script paths for.
     * @param {string} pageType The type of page which is to be generated.
     * @returns {Array<string>} An array containing paths to scripts for a given site.
     */
    static getSiteScripts(siteAlias, pageType, isEditor) {
        const paths = this.filterScriptListByPageType(lab_api.v1.config.get(`site_scripts.${ siteAlias }`) || [], pageType, isEditor);
        Sys.logger.debug(`ViewSupport: Found ${ paths.length } script-path(s) for site "${ siteAlias }".`);
        return paths;
    }

    /**
     * Get a list of paths for scripts.
     * If none is defined, check configured fallback-site
     * A site using a fallback-site may set site_scripts.<SITE ALIAS> to an empty array to prevent using fallback-resources.
     *
     * @param {string} siteAlias Site to fetch script paths for.
     * @param {string} pageType The type of page which is to be generated.
     * @param {boolean} isEditor Flag for editor-mode
     * @param {Array<string>} ignoreSites An array of site aliases refering to sites which are to be ignored.
     * @returns {Array<object>} An array containing objects with paths to scripts for a given site or any of its declared fallback sites.
     */
    static getSiteScriptsWithFallback(siteAlias, pageType, isEditor, ignoreSites = []) {
        let paths = this.getSiteScripts(siteAlias, pageType, isEditor);
        if (ignoreSites.length) {
            paths = this.removeWithInheritFalse(paths);
        }
        if (!paths.length) {
            ignoreSites.push(siteAlias);
            const fallbackSite = lab_api.v1.config.get('lab_fallback_site', { site: siteAlias });
            if (fallbackSite && !ignoreSites.includes(fallbackSite)) {
                return this.getSiteScriptsWithFallback(fallbackSite, pageType, isEditor, ignoreSites).filter((item) => item.inherit !== false);
            }
        }
        return paths;
    }

    /**
     * Fetches paths for scripts which are common for all sites.
     *
     * @param {string} pageType The type of page to be generated.
     * @param {boolean} isEditor Flag for editor-mode
     * @returns {Array<string>} An array containing paths to scripts common for all sites.
     */
    static getCommonScripts(pageType, isEditor, isModule = false) {
        const paths = this.filterScriptListByPageType(lab_api.v1.config.get(`site_scripts_common`) || [], pageType, isEditor, isModule);
        Sys.logger.debug(`ViewSupport: Found ${ paths.length } common ${ isModule ? 'script-path(s)' : 'JS modules' }`);
        return paths;
    }

    // (array)
    static filterScriptListByPageType(list, pageType, isEditor, isModule = false) {
        return list.filter((item) => ((!item.isModule && !isModule) || (item.isModule && isModule)) && (!item.pageType || item.pageType === pageType) && (!isEditor || (isEditor && !item.skipEditor)));
    }

    static removeWithInheritFalse(items) {
        if (Array.isArray(items) && items.length > 0) {
            return items.filter((item) => item.inherit !== false);
        }
        return items;
    }

    /**
     * Get element-specific resources.
     * User-config can specify files needed per element.
     * Handle it here to avoid multiple copies of the same files included on page.
     * Config: "contentbox_settings.<BOX NAME>.require.<FILETYPE>"
     *
     * Note: Query config per content-type ('contentbox_settings.my_box' instead of 'contentbox_settings') to get site-overrides
     *
     * @param {LabModel} pageModel
     * @param {LabView} pageView
     * @param {string} filetype Type of file to be fetched (JS or CSS).
     * @param {Array<string>} ignorePaths
     * @returns
     */
    static getSiteFilesForContentboxes(pageModel, pageView, filetype, ignorePaths = []) {
        const result = [];
        const contentboxList = lab_api.v1.model.query.getModelTypes();
        Sys.logger.debug(`ViewSupport sitefiles: Will register ${ filetype }-file(s) for contentbox-types ${ contentboxList.join(', ') }.`);
        for (const type of contentboxList) {
            const config = lab_api.v1.config.get(`contentbox_settings.${ type }.require.${ filetype }`);
            if (Array.isArray(config)) {
                for (const path of config) {
                    if (!result.includes(path) && !ignorePaths.includes(path)) {
                        Sys.logger.debug(`ViewSupport sitefiles: Will include ${ filetype }-file "${ path }" for contentbox "${ type }".`);
                        result.push(path);
                    }
                }
            }
        }
        Sys.logger.debug(`ViewSupport sitefiles: Finished registering ${ filetype }-file(s). Found ${ result.length } file(s).`);
        return result;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/SEOHelper.js":
/*!******************************************!*\
  !*** ./modules/lib/helpers/SEOHelper.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SEOHelper": () => (/* binding */ SEOHelper)
/* harmony export */ });
class SEOHelper {

    constructor({
        pageType = '',
        canonical = '',
        isTagpage = false,
        isTagpageWithFrontpage = false,
        tagpagePath = '/tag/'
    } = {}) {
        this.settings = {
            pageType,
            canonical,
            isTagpage,
            isTagpageWithFrontpage,
            tagpagePath
        };
        this.cache = {
            seoData: null
        };
    }

    /**
     * Generates and returns JSON-LD data based on configurations and page type.
     *
     * @param {LabModel} model The data model of the current node.
     * @returns Structured JSON-LD data.
     */
    getStructuredData(model) {
        if (model.get('fields.jsonld_json')) {
            return model.get('fields.custom_jsonld');
        }
        if (this.settings.pageType === 'front') {
            return this.generateFrontData(model);
        }
        if (this.settings.pageType === 'article' || this.settings.pageType === 'notice') {
            return this.generateArticleData(model);
        }
        return null;
    }

    generateSiteData(model) {
        return {
            '@context': 'http://schema.org',
            '@type': 'WebSite',
            name: lab_api.v1.properties.get('site.display_name'),
            url: lab_api.v1.properties.get('site.domain') || ''
            /*
            sameAs: [
                'https://facebook.com/mypage',
                'https://instagram.com/site',
                'https://twitter.com/name'
            ],
            potentialAction: {
            '@type': 'SearchAction',
            'target': 'http://example.com/pages/search_results?q={search_term}',
            'query-input': 'required name=search_term'
            }
            */
        };
    }

    generateFrontData(model) {
        const seoData = this.getSEOData(model);
        return {
            '@context': 'https://schema.org',
            '@type': 'WebPage',
            name: seoData.title,
            description: seoData.description
        };
    }

    generateArticleData(model) {
        const seoData = this.getSEOData(model);
        const output = {
            '@context': 'https://schema.org',
            '@type': 'NewsArticle',
            headline: seoData.title || model.get('fields.title'),
            description: seoData.description,
            availableLanguage: [
                {
                    '@type': 'Language',
                    alternateName: seoData.language
                }
            ],
            images: lab_api.v1.model.query.getChildrenOfType(model, 'image', true).map((image) => {
                return (image.get('fields.imageurl') || '').includes('width=') ? `${image.get('fields.imageurl')}1200` : `${image.get('fields.imageurl')}&width=1200`;
            }),
            author: lab_api.v1.model.query.getChildrenOfType(model, 'byline', true).map((byline) => {
                let firstname = byline.get('fields.firstname');
                if (firstname === 'Byline first name') { firstname = ''; }
                let lastname = byline.get('fields.lastname');
                if (lastname === 'Byline last name') { lastname = ''; }
                const result = {
                    '@type': 'Person',
                    name: `${ firstname } ${ lastname }`
                };

                const public_url = byline.get('fields.public_url');
                if (public_url) {
                    result.url = public_url;
                }

                const image = (byline.children || []).filter((child) => child.type === 'image')[0];
                if (image) {
                    result.image = {
                        '@type': 'ImageObject',
                        url: `${ image.get('fields.imageurl') }&width=250`
                    };
                }

                const public_email = byline.get('fields.public_email');
                if (public_email) {
                    result.email = public_email;
                }

                return result;
            }),
            publisher: {
                '@type': 'Organization',
                name: lab_api.v1.properties.get('site.display_name'),
                logo: {
                    '@type': 'ImageObject',
                    url: lab_api.v1.config.get('logo.default.src')
                }
            }
        };

        if (model.get('fields.published')) {
            output.datePublished = new Date(parseInt(model.get('fields.published'), 10) * 1000).toISOString();
        }

        if (model.get('fields.modified')) {
            output.dateModified = new Date(parseInt(model.get('fields.modified'), 10) * 1000).toISOString();
        }

        if (model.get('fields.paywall') === '1') {
            output.isAccessibleForFree = true;
            output.hasPart = {
                '@type': 'WebPageElement',
                isAccessibleForFree: false,
                cssSelector: '.teaserContent'
            };
        }

        return output;
    }

    /**
     * Returns SEO data such as Title and Description for a frontpage or article.
     * Method may be called several times, uses cache.
     *
     * @param {model} model The data model of the current node.
     * @returns {Object} SEO title and description of the current page.
     */
    getSEOData(model) {
        if (this.cache.seoData) { return this.cache.seoData; }
        let language;
        let title;
        let description;
        if (this.settings.pageType === 'article' || this.settings.pageType === 'notice') {
            title = lab_api.v1.util.string.sanitizeString(model.get('fields.seotitle') || model.get('fields.title') || '');
            description = lab_api.v1.util.string.sanitizeString(model.get('fields.seodescription') || model.get('fields.subtitle') || '');
            language = model.get('fields.seolanguage') || lab_api.v1.config.get('contentLanguage');
        } else {
            if (this.settings.isTagpage && !this.settings.isTagpageWithFrontpage) {

                // Todo: Backend should deliver an array of tags.
                const tagPath = this.settings.tagpagePath.replace(/\//g, '');
                const tagsString = this.settings.canonical.split(this.settings.tagpagePath)[1] || '';
                const tags = tagsString.split('/').filter((item) => !!item);

                // Data for mustache-template
                const data = {
                    tag: tags[tags.length - 1],
                    tags,
                    tagPath
                };

                // Get the template from locale and render with tagPath and tag from data
                title = lab_api.v1.locale.get('tags.title_text', {
                    data
                });

            } else {
                title = lab_api.v1.util.string.sanitizeString(model.get('fields.seotitle') || model.get('fields.name') || '');
            }
            description = lab_api.v1.util.string.sanitizeString(model.get('fields.seodescription') || '');
        }

        this.cache.seoData = {
            title: title.charAt(0).toUpperCase() + title.slice(1),
            description,
            language
        };
        return this.cache.seoData;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/Spacing.js":
/*!****************************************!*\
  !*** ./modules/lib/helpers/Spacing.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Spacing": () => (/* binding */ Spacing)
/* harmony export */ });
class Spacing {

    static mediaQueries = {
        desktop: '(min-width:1024px)',
        mobile: '(max-width: 1023px)'
    };

    static createStyle({
        model, view, viewports, styleCollection = 'content_inline_spacing', mediaQueries = this.mediaQueries, returnArray = false
    }) {
        const items = [];
        const selector = `[data-element-guid="${ model.getGuid() }"] .content`;
        for (const viewport of viewports) {
            if (mediaQueries[viewport]) {
                const vpStyle = lab_api.v1.style.getStyles(model, view, styleCollection, viewport);
                if (vpStyle) {
                    items.push(`@media ${ mediaQueries[viewport] } { ${ selector } { ${ vpStyle } } }`);
                }
            }
        }
        return returnArray ? items : `<style>${ items.join('\n') }</style>`;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/StyleHelper.js":
/*!********************************************!*\
  !*** ./modules/lib/helpers/StyleHelper.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleHelper": () => (/* binding */ StyleHelper)
/* harmony export */ });
class StyleHelper {

    static getStyleDefinitions(api) {
        const alias = api.v1.properties.get('site.alias');
        const definitions = api.v1.config.get('style_definitions', alias);
        const rules = [];

        (definitions.rules || []).forEach((rule) => rules.push(rule));
        (definitions.fontface || []).forEach((font) => {
            const selector = `.font-${ font.family.replace(/ /g, '') }`;
            rules.push(StyleHelper.getFamilyDefinition(selector, font.family));

            const weights = {
                light: {
                    keys: ['light', '200', '100', '300'],
                    used: false
                },
                normal: {
                    keys: ['regular', 'normal', '400', '500'],
                    used: false
                },
                bold: {
                    keys: ['bold', '600', '700'],
                    used: false
                },
                black: {
                    keys: ['black', '800', '900'],
                    used: false
                }
            };
            font.variants.forEach((definedWeight) => {
                for (const weight of Object.keys(weights)) {
                    const weightDefinition = weights[weight];
                    if (weightDefinition && !weightDefinition.used && weightDefinition.keys.indexOf(definedWeight) > -1) {
                        rules.push(StyleHelper.getWeightDefinition(selector, definedWeight, weight));
                        weightDefinition.used = true;
                    }
                }
            });
        });

        const result = {
            fontface: definitions.fontface || [],
            parsedRules: StyleHelper.CSSRuleParser(rules)
        };
        result.hasRules = !!result.parsedRules.length;
        return result;
    }

    static getFamilyDefinition(selector, family) {
        return {
            selector,
            declarations: [{
                key: 'font-family',
                value: `"${ family }" !important`
            }]
        };
    }

    static getWeightDefinition(selector, weight, name) {
        let validatedWeight = weight;
        if (weight === 'regular') {
            validatedWeight = 'normal';
        }
        return {
            selector: `${ selector  }.font-weight-${  name }`,
            declarations: [{
                key: 'font-weight',
                value: `${ validatedWeight } !important`
            }]
        };
    }

    static CSSRuleParser(rules) {
        const results = [];
        rules.forEach((rule) => {
            let ruleString = `${ rule.selector } { `;
            let fontSizeMobile;
            let lineHeightMobile;
            rule.declarations.forEach((subrule) => {
                if (subrule.key === 'font-size-desktop') {
                    if (subrule.value !== 'default') {
                        ruleString += `font-size: ${ subrule.value.slice(0, -2) / 16 }rem; `;
                    }
                } else if (subrule.key === 'font-size-mobile') {
                    if (subrule.value !== 'default') {
                        fontSizeMobile = `calc(0.262vw * ${ subrule.value.slice(0, -2) })`;
                    }
                } else if (subrule.key === 'line-height-desktop') {
                    if (subrule.value !== 'default') {
                        ruleString += `line-height: ${ subrule.value }; `;
                    }
                } else if (subrule.key === 'line-height-mobile') {
                    if (subrule.value !== 'default') {
                        lineHeightMobile = subrule.value;
                    }
                } else if (subrule.key === 'font-family') {
                    if (subrule.value.includes('!important')) {
                        ruleString += `${ subrule.key }: ${ subrule.value }; `;
                    } else {
                        ruleString += `${ subrule.key }: "${ subrule.value }"; `;
                    }
                } else {
                    ruleString += `${ subrule.key }: ${ subrule.value }; `;
                }
            });
            ruleString += '}';
            if (fontSizeMobile || lineHeightMobile) {
                ruleString += `@media (max-width: 767px) { .resp_fonts ${ rule.selector } {`;
                if (fontSizeMobile) {
                    ruleString += `font-size: ${ fontSizeMobile }; `;
                }
                if (lineHeightMobile) {
                    ruleString += `line-height: ${ lineHeightMobile }; `;
                }
                ruleString += `} }`;
            }
            results.push(ruleString);
        });

        return results;
    }

    static getInlineCSS(api, site) {
        return [
            {
                key: 'custom_properties',
                value: api.v1.config.get('css_build.custom_properties', { site }) || ''
            },
            {
                key: 'background_colors',
                value: api.v1.config.get('css_build.background_colors', { site }) || ''
            },
            {
                key: 'background_colors_opacity',
                value: api.v1.config.get('css_build.background_colors_opacity', { site }) || ''
            },
            {
                key: 'border_colors',
                value: api.v1.config.get('css_build.border_colors', { site }) || ''
            },
            {
                key: 'font_colors',
                value: api.v1.config.get('css_build.font_colors', { site }) || ''
            },
            {
                key: 'image_gradient',
                value: api.v1.config.get('css_build.image_gradient', { site }) || ''
            }
        ];
    }

    // (array) Config: { "custom_css_variables": { "lab_page_width": "1088px", ... }, ... }
    // Read config and return an array of objects with "key" and "value" suitable for iteration in template.
    static getCssVariables(api) {
        const custom_css_variables = api.v1.config.get('custom_css_variables') || {};
        const result = { no_viewport: [], desktop: [], mobile: [] };
        for (const key of Object.keys(custom_css_variables)) {
            for (const viewport of Object.keys(custom_css_variables[key])) {
                result[viewport].push({ key, value: (custom_css_variables[key][viewport] || {}).value });
            }
        }
        return result;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/TableFormatter.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/TableFormatter.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TableFormatter": () => (/* binding */ TableFormatter)
/* harmony export */ });
class TableFormatter {

    static tsvStringToTable(data) {
        return data.split('\n').map(
            (row) => row.split('\t').map(
                (cell) => cell.trim()
            )
        );
    }

    static tableToTSVString(table) {
        if (!table) return null;
        return table.map(
            (row) => row.join('\t')
        ).join('\n');
    }

    static getMaxRowLength(table) {
        const cellCountList = table.map((row) => row.filter((cell) => cell.indexOf('|*') === -1).length);
        return Math.max.apply(null, cellCountList);
    }

    static newCell(e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ''; return e ? { style: e, content: t } : { content: t }; }

    static newRow(e, t) { return e ? { style: e, row: t } : { row: t }; }

    static tableToTemplateBody(table) {
        const maxRowLength = TableFormatter.getMaxRowLength(table);
        return table
            .filter((row) => row.join('').trim() !== '') // Dont process empty lines
            .map((row) => {
                let processedRow = row.map((cell) => {
                    if (cell.indexOf('|') > -1) {
                        const cellData = cell.split('|');
                        // var [cellStyle, cellContent] = cell.split('|');
                        return TableFormatter.newCell(cellData[0], cellData[1]);
                    }
                    return TableFormatter.newCell(null, cell);
                });

                const rowStyle = processedRow[processedRow.length - 1].content === '*' ? processedRow[processedRow.length - 1].style : null; // If this row has a style, get it.
                if (rowStyle) {
                    processedRow = processedRow.slice(0, processedRow.length - 1);
                }

                while (processedRow.length < maxRowLength) { // Add empty cells to avoid holes in the table
                    processedRow.push(TableFormatter.newCell());
                }

                return TableFormatter.newRow(rowStyle, processedRow);
            });
    }

    static templateTableBodyToHeader(processedTable, sort) {
        if (!processedTable) {
            return null;
        }
        const processedHeader = processedTable.shift();
        if (sort) {
            for (let colNum = 0; colNum < processedHeader.row.length; colNum++) {
                const numbersInColumn = processedTable.map((row) => row[colNum]).filter((content) => /^[0-9, ]+$/.test(content)).length; // Count number of numbers in column
                const datesInColumn = processedTable.map((row) => row[colNum]).filter((content) => Date.parse(content)).length; // Count number of dates in column
                const colLength = processedTable.length;
                processedHeader.row[colNum].sortBy = numbersInColumn === colLength ? 'number' : datesInColumn === colLength ? 'date' : 'string';
            }
        }
        return processedHeader;
    }

}


/***/ }),

/***/ "./modules/lib/helpers/datetime/DateTimeHelper.js":
/*!********************************************************!*\
  !*** ./modules/lib/helpers/datetime/DateTimeHelper.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateTimeHelper": () => (/* binding */ DateTimeHelper)
/* harmony export */ });
/* harmony import */ var _words_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./words.js */ "./modules/lib/helpers/datetime/words.js");


class DateTimeHelper {

    constructor(language = 'en', fallbackLanguage = 'en') {
        this.fallbackLanguage = fallbackLanguage;
        this.language = language || fallbackLanguage;
        this.words = _words_js__WEBPACK_IMPORTED_MODULE_0__["default"];
        this.timezone = this.getTimezone();
    }

    // (int) Get GMT timezone. Defaults to Western Europe (1)
    // Value can be overridden by config 'timezone' (int or string)
    getTimezone() {
        const configValue = lab_api.v1.config.get('timezone');
        if (configValue !== undefined && !Number.isNaN(configValue) && !Number.isNaN(parseFloat(configValue))) {
            return parseInt(configValue, 10);
        }
        return 1;
    }

    str(key) {
        let { language } = this;
        if (!(key in this.words)) return null;
        if (!(language in this.words[key])) language = this.fallbackLanguage;
        if (!(language in this.words[key])) return null;
        return this.words[key][language];
    }

    /*
    Format  | Output              | Description
    ---     | ---                 | ---
    YY      | 18                  | Two-digit year
    YYYY    | 2018                | Four-digit year
    M       | 1-12                | The month, beginning at 1
    MM      | 01-12               | The month, 2-digits
    MMM     | Jan-Dec             | The abbreviated month name
    MMMM    | January-December    | The full month name
    D       | 1-31                | The day of the month
    DD      | 01-31               | The day of the month, 2-digits
    ddd     | Sun-Sat             | The short name of the day of the week
    dddd    | Sunday-Saturday     | The name of the day of the week
    H       | 0-23                | The hour
    HH      | 00-23               | The hour, 2-digits
    m       | 0-59                | The minute
    mm      | 00-59               | The minute, 2-digits
    s       | 0-59                | The second
    ss      | 00-59               | The second, 2-digits
    */
    // https://day.js.org/docs/en/display/format

    // 'template' is a standard Mustache template: 'Year: {{ YYYY }}, month: {{ MM }}, day: {{ DD }}'
    format(date, template) {
        return Mustache.render(template, {
            YYYY: () => date.getFullYear(),                                     // (2022)
            YY: () => `${ date.getFullYear() }`.slice(-2),                      // (22)
            MM: () => (date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1), // (08)
            M: () => date.getMonth() + 1,                                       // (8)
            D: () => date.getDate(),                                            //
            DD: () => (date.getDate() < 10 ? '0' : '') + date.getDate(),
            H: () => date.getHours(),
            HH: () => (date.getHours() < 10 ? '0' : '') + date.getHours(),
            m: () => date.getMinutes(),
            mm: () => (date.getMinutes() < 10 ? '0' : '') + date.getMinutes(),
            s: () => date.getSeconds(),
            ss: () => (date.getSeconds() < 10 ? '0' : '') + date.getSeconds(),
            dddd: () => this.weekday(date, false),
            ddd: () => this.weekday(date, false, 3),
            MMMM: () => this.monthName(date, false),
            MMM: () => this.monthName(date, false, 3),
            W: () => this.weekNumber(date, true, true),
            WW: () => this.weekNumber(date, true, false)
        });
    }

    // 'template' is a standard Mustache template: 'Year: {{ YYYY }}, month: {{ MM }}, day: {{ DD }}'
    utcFormat(date, template) {
        const realDate = this.correctDate(date);
        return Mustache.render(template, {
            YYYY: () => realDate.getUTCFullYear(),                                     // (2022)
            YY: () => `${ realDate.getUTCFullYear() }`.slice(-2),                      // (22)
            MM: () => (realDate.getUTCMonth() < 9 ? '0' : '') + (realDate.getUTCMonth() + 1), // (08)
            M: () => realDate.getUTCMonth() + 1,                                       // (8)
            D: () => realDate.getUTCDate(),                                            //
            DD: () => (realDate.getUTCDate() < 10 ? '0' : '') + realDate.getUTCDate(),
            H: () => realDate.getUTCHours(),
            HH: () => (realDate.getUTCHours() < 10 ? '0' : '') + realDate.getUTCHours(),
            m: () => realDate.getUTCMinutes(),
            mm: () => (realDate.getUTCMinutes() < 10 ? '0' : '') + realDate.getUTCMinutes(),
            s: () => realDate.getUTCSeconds(),
            ss: () => (realDate.getUTCSeconds() < 10 ? '0' : '') + realDate.getUTCSeconds(),
            dddd: () => this.weekday(realDate, true),
            ddd: () => this.weekday(realDate, true, 3),
            MMMM: () => this.monthName(realDate, true),
            MMM: () => this.monthName(realDate, true, 3),
            W: () => this.weekNumber(realDate, true, true),
            WW: () => this.weekNumber(realDate, true, false)
        });
    }

    formattedDate(date, inputFormat, prependZeroDate = true, prependZeroTime = true) {
        let format = inputFormat || '';
        format = format.replace('Y', date.getFullYear());
        format = format.replace('m', (prependZeroDate && date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1));
        format = format.replace('d', (prependZeroDate && date.getDate() < 10 ? '0' : '') + date.getDate());
        format = format.replace('H', (prependZeroTime && date.getHours() < 10 ? '0' : '') + date.getHours());
        format = format.replace('i', (prependZeroTime && date.getMinutes() < 10 ? '0' : '') + date.getMinutes());
        format = format.replace('s', date.getSeconds());
        format = format.replace('l', this.weekday(date, false));
        format = format.replace('D', this.weekday(date, false, 3));
        format = format.replace('F', this.monthName(date, false));
        format = format.replace('M', this.monthName(date, false, 3));
        return format;
    }

    formattedUtcDate(date, inputFormat, prependZeroDate = true, prependZeroTime = true) {
        const realDate = this.correctDate(date);
        let format = inputFormat || '';
        format = format.replace('Y', realDate.getUTCFullYear());
        format = format.replace('m', (prependZeroDate && realDate.getUTCMonth() < 9 ? '0' : '') + (realDate.getUTCMonth() + 1));
        format = format.replace('d', (prependZeroDate && realDate.getUTCDate() < 10 ? '0' : '') + realDate.getUTCDate());
        format = format.replace('H', (prependZeroTime && realDate.getUTCHours() < 10 ? '0' : '') + realDate.getUTCHours());
        format = format.replace('i', (prependZeroTime && realDate.getUTCMinutes() < 10 ? '0' : '') + realDate.getUTCMinutes());
        format = format.replace('s', realDate.getUTCSeconds());
        format = format.replace('l', this.weekday(realDate, true));
        format = format.replace('D', this.weekday(realDate, true, 3));
        format = format.replace('F', this.monthName(realDate, true));
        format = format.replace('M', this.monthName(realDate, true, 3));
        return format;
    }

    correctDate(date) {
        return this.manipulateTime(date, this.isSummerTime(date) ? this.timezone + 1 : this.timezone);
    }

    utcDate(date) {
        return this.unmanipulateTime(date, this.isSummerTime(date) ? this.timezone + 1 : this.timezone);
    }

    timestampToDate(timestamp) {
        return new Date(timestamp * 1000);
    }

    toTimestamp(date) {
        return Math.round(date.getTime() / 1000);
    }

    parseDate(str) {
        const year = str.substr(0, 4);
        const month = str.substr(4, 2) - 1;
        const day = str.substr(6, 2);

        const date = new Date(year, month, day);

        // Note: Use sloppy compare (==)
        const isValidYear = date.getFullYear() == year;
        const isValidMonth = date.getMonth() == month;
        const isValidDay = date.getDate() == day;

        return (isValidYear && isValidMonth && isValidDay)
            ? date
            : 'invalid date';
    }

    weekday(date, isUtc = false, charCount = 9) {
        const weekdays = [
            this.str('sunday'),
            this.str('monday'),
            this.str('tuesday'),
            this.str('wednesday'),
            this.str('thursday'),
            this.str('friday'),
            this.str('saturday')
        ];
        return (weekdays[isUtc ? date.getUTCDay() : date.getDay()] || '').substr(0, charCount);
    }

    monthName(date, isUtc = false, charCount = 10) {
        const months = [
            this.str('january'),
            this.str('february'),
            this.str('mars'),
            this.str('april'),
            this.str('may'),
            this.str('june'),
            this.str('july'),
            this.str('august'),
            this.str('september'),
            this.str('october'),
            this.str('november'),
            this.str('december')
        ];
        return (months[isUtc ? date.getUTCMonth() : date.getMonth()] || '').substr(0, charCount);
    }

    weekNumber(date, isUtc = false, shortFormat = true) {
        const tdt = new Date(date.valueOf());
        const dayn = ((isUtc ? date.getUTCDay() : date.getDay()) + 6) % 7;
        tdt.setDate(tdt.getDate() - dayn + 3);
        const firstThursday = tdt.valueOf();
        tdt.setMonth(0, 1);
        if (tdt.getDay() !== 4) {
            tdt.setMonth(0, 1 + (((4 - tdt.getDay()) + 7) % 7));
        }
        const wn = 1 + Math.ceil((firstThursday - tdt) / 604800000);
        return (!shortFormat && wn < 10 ? '0' : '') + wn;
    }

    timestampToNiceDate(timestamp, shortFormat = false) {
        const labels = {
            ago: shortFormat ? '' : this.str('ago'),
            now: this.str('now'),
            minute: shortFormat ? this.str('min') : this.str('minutes'),
            minutes: shortFormat ? this.str('min') : this.str('minutes'),
            hour: this.str('hour'),
            hours: this.str('hours'),
            day: this.str('day'),
            days: this.str('days')
        };

        const dateNow = new Date().getTime();
        const dateInput = new Date(timestamp * 1000).getTime() - 0;
        const dateDiff = parseInt(((dateNow - dateInput) / 1000) / 60, 10); // Minutes.

        if (dateDiff < 60) { // Less than 1 hour.
            if (dateDiff < 1) {
                return labels.now;
            }
            if (dateDiff == 1) {
                return `1 ${ labels.minute } ${ labels.ago }`;
            }
            return `${ dateDiff } ${ labels.minutes } ${ labels.ago }`;
        }

        if (dateDiff < 1440) { // Less than 1 day.
            if (parseInt((dateDiff / 60), 10) == 1) {
                return `1 ${ labels.hour } ${ labels.ago }`;
            }
            return `${ parseInt((dateDiff / 60), 10)  } ${ labels.hours } ${ labels.ago }`;
        }

        if (parseInt(dateDiff / (60 * 24), 10) < 30) { // Less than 1 month.
            if (parseInt(dateDiff / (60 * 24), 10) == 1) { // 1 or more days.
                return `1 ${ labels.day } ${ labels.ago }`;
            }
            return `${ parseInt(dateDiff / (60 * 24), 10) } ${ labels.days } ${ labels.ago }`;
        }

        return this.format(
            this.timestampToDate(timestamp),
            this.str('monthdayyear')
        );
    }

    isSummerTime(date) {
        function lastSunday(month, year) {
            const d = new Date();
            const lastDayOfMonth = new Date(Date.UTC(year || d.getFullYear(), month + 1, 0));
            const day = lastDayOfMonth.getDay();
            return new Date(Date.UTC(lastDayOfMonth.getFullYear(), lastDayOfMonth.getMonth(), lastDayOfMonth.getDate() - day));
        }
        const d = date || new Date();
        const starts = lastSunday(2, d.getFullYear());
        starts.setHours(1);
        const ends = lastSunday(9, d.getFullYear());
        starts.setHours(1);
        return d.getTime() >= starts.getTime() && d.getTime() < ends.getTime();
    }

    manipulateTime(date, hours) {
        return new Date(date.getTime() + (hours * 60 * 60 * 1000));
    }

    unmanipulateTime(date, hours) {
        return new Date(date.getTime() - (hours * 60 * 60 * 1000));
    }

}


/***/ }),

/***/ "./modules/lib/helpers/datetime/DateTimeHelperInt.js":
/*!***********************************************************!*\
  !*** ./modules/lib/helpers/datetime/DateTimeHelperInt.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateTimeHelperInt": () => (/* binding */ DateTimeHelperInt)
/* harmony export */ });
/* harmony import */ var _DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");
/**
 * DateTimeHelper that uses localisation
 */



class DateTimeHelperInt extends _DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper {

    // languageCode: 'nb-NO', 'en-GB', etc.
    constructor({ languageCode } = {}) {
        super('en');
        this.languageCode = languageCode || lab_api.v1.config.get('contentLanguage');
    }

    str(key, { data, noRender } = {}) {
        return lab_api.v1.locale.get(`dates.${ key }`, { data, noRender });
    }

    // durationSince:
    // Norwegian structure: '{{count}} {{period}} {{ago}}' // 3 days ago
    // Spanish structure: '{{ago}} {{count}} {{period}}' // ago 3 days
    timestampToNiceDate(timestamp, shortFormat = false) {
        const dateNow = new Date().getTime();
        const dateInput = new Date(timestamp * 1000).getTime() - 0;
        const dateDiff = parseInt(((dateNow - dateInput) / 1000) / 60, 10); // Minutes.

        // Minutes. Less than 1 hour
        if (dateDiff < 60) {
            if (dateDiff < 1) {
                return this.str('now');
            }
            return this.str('durationSince', {
                data: {
                    count: dateDiff,
                    // eslint-disable-next-line no-nested-ternary
                    period: shortFormat ? this.str('min') : (dateDiff === 1 ? this.str('minute') : this.str('minutes')),
                    ago: shortFormat ? '' : this.str('ago')
                }
            });
        }

        // Hours. Less than 1 day
        if (dateDiff < 1440) {
            const count = parseInt((dateDiff / 60), 10);
            return this.str('durationSince', {
                data: {
                    count,
                    period: count === 1 ? this.str('hour') : this.str('hours'),
                    ago: shortFormat ? '' : this.str('ago')
                }
            });
        }

        // Days. Less than 1 month
        if (parseInt(dateDiff / (60 * 24), 10) < 30) {
            const count = parseInt(dateDiff / (60 * 24), 10);
            return this.str('durationSince', {
                data: {
                    count,
                    period: count === 1 ? this.str('day') : this.str('days'),
                    ago: shortFormat ? '' : this.str('ago')
                }
            });
        }

        // Date. More than one month
        return this.format(
            this.timestampToDate(timestamp),
            this.str('monthdayyear', { noRender: true })
        );
    }

}


/***/ }),

/***/ "./modules/lib/helpers/datetime/words.js":
/*!***********************************************!*\
  !*** ./modules/lib/helpers/datetime/words.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    sunday: {
        en: 'sunday',
        sv: 'söndag',
        dk: 'søndag',
        no: 'søndag',
        nl: 'zondag',
        kl: 'sapaat'
    },
    monday: {
        en: 'monday',
        sv: 'måndag',
        dk: 'mandag',
        no: 'mandag',
        nl: 'maandag',
        kl: 'ataasinngorneq'
    },
    tuesday: {
        en: 'tuesday',
        sv: 'tisdag',
        dk: 'tirsdag',
        no: 'tirsdag',
        nl: 'dinsdag',
        kl: 'marlunngorneq'
    },
    wednesday: {
        en: 'wednesday',
        sv: 'onsdag',
        dk: 'onsdag',
        no: 'onsdag',
        nl: 'woensdag',
        kl: 'pingasunngorneq'
    },
    thursday: {
        en: 'thursday',
        sv: 'torsdag',
        dk: 'torsdag',
        no: 'torsdag',
        nl: 'donderdag',
        kl: 'sisamanngorneq'
    },
    friday: {
        en: 'friday',
        sv: 'fredag',
        dk: 'fredag',
        no: 'fredag',
        nl: 'vrijdag',
        kl: 'tallimanngorneq'
    },
    saturday: {
        en: 'saturday',
        sv: 'lördag',
        dk: 'lørdag',
        no: 'lørdag',
        nl: 'zaterdag',
        kl: 'arfininngorneq'
    },
    january: {
        en: 'January',
        sv: 'januari',
        dk: 'januar',
        no: 'januar',
        nl: 'januari',
        kl: 'ukiortaarsiorneq'
    },
    february: {
        en: 'February',
        sv: 'februari',
        dk: 'februar',
        no: 'februar',
        nl: 'februari',
        kl: 'ukiortaami'
    },
    mars: {
        en: 'March',
        sv: 'mars',
        dk: 'marts',
        no: 'mars',
        nl: 'maart',
        kl: 'marsi'
    },
    april: {
        en: 'April',
        sv: 'april',
        dk: 'april',
        no: 'april',
        nl: 'april',
        kl: 'apriili'
    },
    may: {
        en: 'May',
        sv: 'maj',
        dk: 'maj',
        no: 'mai',
        nl: 'mei',
        kl: 'maajii'
    },
    june: {
        en: 'June',
        sv: 'juni',
        dk: 'juni',
        no: 'juni',
        nl: 'juni',
        kl: 'juuni'
    },
    july: {
        en: 'July',
        sv: 'juli',
        dk: 'juli',
        no: 'juli',
        nl: 'juli',
        kl: 'juuli'
    },
    august: {
        en: 'August',
        sv: 'augusti',
        dk: 'august',
        no: 'august',
        nl: 'augustus',
        kl: 'aggusti'
    },
    september: {
        en: 'September',
        sv: 'september',
        dk: 'september',
        no: 'september',
        nl: 'september',
        kl: 'septembari'
    },
    october: {
        en: 'October',
        sv: 'oktober',
        dk: 'oktober',
        no: 'oktober',
        nl: 'oktober',
        kl: 'oktobari'
    },
    november: {
        en: 'November',
        sv: 'november',
        dk: 'november',
        no: 'november',
        nl: 'november',
        kl: 'novembari'
    },
    december: {
        en: 'December',
        sv: 'december',
        dk: 'december',
        no: 'desember',
        nl: 'december',
        kl: 'decembari'
    },
    ago: {
        en: 'ago',
        sv: 'sedan',
        dk: 'siden',
        no: 'siden',
        nl: 'geleden',
        kl: 'matuma siorna'
    },
    now: {
        en: 'now',
        sv: 'nu',
        dk: 'nu',
        no: 'nå',
        nl: 'nu',
        kl: 'maanna'
    },
    min: {
        en: 'min'
    },
    minutes: {
        en: 'minutes',
        sv: 'minuter',
        dk: 'minutter',
        no: 'minutter',
        nl: 'minuten',
        kl: 'minutsi'
    },
    hour: {
        en: 'hour',
        sv: 'timme',
        dk: 'time',
        no: 'time',
        nl: 'uur',
        kl: 'akunnera'
    },
    hours: {
        en: 'hours',
        sv: 'timmar',
        dk: 'timer',
        no: 'timer',
        nl: 'uren',
        kl: 'akunnerit'
    },
    day: {
        en: 'day',
        sv: 'dag',
        dk: 'dag',
        no: 'dag',
        nl: 'dag',
        kl: 'ulloq'
    },
    days: {
        en: 'days',
        sv: 'dagar',
        dk: 'dage',
        no: 'dager',
        nl: 'dagen',
        kl: 'ullut'
    },
    monthdayyear: {
        en: '{{MMMM}} {{DD}}. {{YYYY}}',
        sv: '{{DD}}/{{MM}} {{YYYY}}',
        dk: '{{DD}}/{{MM}} {{YYYY}}',
        no: '{{DD}}/{{MM}} {{YYYY}}',
        nl: '{{DD}}/{{MM}} {{YYYY}}'
    },
    hourminute: {
        en: '{{HH}}:{{mm}}'
    }
});


/***/ }),

/***/ "./modules/lib/helpers/dynamic/DynamicDataHelper.js":
/*!**********************************************************!*\
  !*** ./modules/lib/helpers/dynamic/DynamicDataHelper.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicDataHelper": () => (/* binding */ DynamicDataHelper)
/* harmony export */ });
/* harmony import */ var _Insertable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Insertable.js */ "./modules/lib/helpers/dynamic/Insertable.js");
/* harmony import */ var _Placement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Placement.js */ "./modules/lib/helpers/dynamic/Placement.js");
/* harmony import */ var _ViewData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewData.js */ "./modules/lib/helpers/dynamic/ViewData.js");




class DynamicDataHelper {

    constructor(api) {
        this.api = api;
        this.page = this.api.v1.model.query.getRootModel();
        this.pageType = this.api.v1.model.root.getType().replace('page_', '');
        this.viewports = this.api.v1.viewport.getActive();
        this.isEditor = this.api.v1.app.mode.isEditor();
        this.cache = new Map();
        this.pageElements = {};
        this.hideAds = this.page.get('fields.hideAds') === '1' || this.page.get('fields.hideAds') === true;
    }

    hasRequiredElement(name) {
        if (typeof this.pageElements[name] === 'undefined') {
            this.pageElements[name] = !!this.api.v1.model.query.getModelByType(name);
        }
        return this.pageElements[name];
    }

    /**
     * Inserts available data on a viewport.
     *
     * @param {string} viewport Name of the viewport you wish to insert data to.
     * @param {string} pathFilter Filter to only insert data on a specific path.
     * @returns {Array} Array of ads that should be inserted client side, not inserted here.
     */
    insert(viewport, pathFilter = null) {
        const returnValue = [];
        const clientSidePlacements = {};
        const contentPath = `insertDynamic.${ this.pageType }.${ viewport }`;
        const placementsPath = `placements.${ this.pageType }.${ viewport }`;

        /*
        {
            "type": "browserFeed",
            "metadata": {},
            "placement": {
                "key": "article_bottom"
            },
            "cssSettings": {
                "some_css_class": true
            },
            "content_data": {
                "fields": {
                    "type": "fragment",
                    "pageId": "100233",
                    "contentType": "row",
                    "contentCount": 4
                }
            },
            "dynamicDataSettings": {
                "hideInEditMode": true
            },
            "conditions": [{
                "field": "primaryTags.section",
                "operator": "equals",
                "value": "Nyhet"
            }]
        }
        */

        let hasAdditions = false;
        const placements = (this.api.v1.config.get(placementsPath) || []).filter((placement) => {
            if (placement.client) {
                if (!placement.requireElement || this.hasRequiredElement(placement.requireElement)) {
                    clientSidePlacements[placement.key] = placement;
                }
                return false;
            }
            return true;
        });

        if (!this.cache.has(contentPath)) {
            // insertDynamicAdditions ignores viewport
            const contentAdditionsPath = `insertDynamicAdditions.${ this.pageType }`;
            const defaultValue = this.api.v1.config.get(contentPath) || [];
            const additionsValue = this.validateConditions(this.api.v1.config.get(contentAdditionsPath) || []).reverse();
            hasAdditions = additionsValue.length > 0;
            const mergedValue = [...defaultValue, ...additionsValue];
            const content = (this.isEditor ? mergedValue.filter((item) => (!item.dynamicDataSettings || !item.dynamicDataSettings.hideInEditMode)) : mergedValue).filter((item) => {
                if (item.placement && item.placement.key && clientSidePlacements[item.placement.key]) {
                    const clientSideItem = { ...item, placementData: clientSidePlacements[item.placement.key] };
                    returnValue.push(clientSideItem);
                    return false;
                }
                return true;
            });
            this.cache.set(contentPath, content);
        }

        if (!this.cache.has(placementsPath)) {
            if (hasAdditions) {
                const additionsPlacementsPath = `placementsAdditions.${ this.pageType }`;
                const additions = this.api.v1.config.get(additionsPlacementsPath) || [];
                placements.push(...additions);
            }
            this.cache.set(placementsPath, placements.map((placement) => new _Placement_js__WEBPACK_IMPORTED_MODULE_1__.Placement(placement)));
        }

        const insertables = this.parse(
            this.cache.get(contentPath),
            this.cache.get(placementsPath),
            viewport,
            pathFilter
        );

        for (const insertable of insertables) {
            if (insertable.selector) {
                this.api.v1.model.insert.bySelector({
                    selector: insertable.selector,
                    data: insertable.data,
                    options: insertable.options
                });
            } else if (insertable.path) {
                this.api.v1.model.insert.atPath({
                    path: insertable.path,
                    data: insertable.data,
                    options: insertable.options
                });
            }
        }
        return returnValue;
    }

    // (array) Validate conditions for each item in the content array.
    validateConditions(content) {
        return content.filter((item) => {
            if (item.excludeDuplicates) {
                if (this.api.v1.model.query.getModelByType(item.type)) {
                    Sys.logger.debug(`[DynamicDataHelper]: Element of type "${ item.type }" already exist on page. Skipping.`);
                    return false;
                }
            }
            if (item && item.conditions) {
                const { conditions } = item;
                for (const condition of conditions) {
                    const { field, operator, value = '' } = condition;
                    const pageValue = this.page.get(field || '', undefined, true);
                    if (pageValue === undefined) {
                        // eslint-disable-next-line no-continue
                        Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${ item.type }" ignored. Value of field: "${ field }" is undefined.`);
                        continue;
                    }
                    switch (operator) {
                        case 'equals':
                            if (pageValue !== value) {
                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${ item.type }" failed. Field: "${ field }", operator "${ operator }", value: "${ value }", page value: "${ pageValue }".`);
                                return false;
                            }
                            break;
                        case 'notEquals':
                            if (pageValue === value) {
                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${ item.type }" failed. Field: "${ field }", operator "${ operator }", value: "${ value }", page value: "${ pageValue }".`);
                                return false;
                            }
                            break;
                        case 'contains':
                            if (!pageValue.includes(value)) {
                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${ item.type }" failed. Field: "${ field }", operator "${ operator }", value: "${ value }", page value: "${ pageValue }".`);
                                return false;
                            }
                            break;
                        case 'notContains':
                            if (pageValue.includes(value)) {
                                Sys.logger.debug(`[DynamicDataHelper]: Condition for inserting element type "${ item.type }" failed. Field: "${ field }", operator "${ operator }", value: "${ value }", page value: "${ pageValue }".`);
                                return false;
                            }
                            break;
                        default:
                            // No valid operator, ignore the item.
                            Sys.logger.warning(`[DynamicDataHelper]: Operator "${ operator }" is not valid. The condition fails and the item is not inserted onto the page.`);
                            return false;
                    }
                }
                // All conditions passed, accept the item.
                Sys.logger.debug(`[DynamicDataHelper]: All conditions (${ conditions.length }) for inserting element type "${ item.type }" accepted. Will insert.`);
                return true;
            }
            // No conditions, accept the item.
            Sys.logger.debug(`[DynamicDataHelper]: No validation specified for inserting element type "${ item.type }". Will insert.`);
            return true;
        });
    }

    parse(content = [], placements = [], viewport = 'desktop', pathFilter = null) {
        const insertables = [];

        // Iterate through all ad-content
        for (const item of content) {
            const [placement] = placements.filter(({ key }) => key === item.placement.key);
            if (placement) {
                if (this.acceptPath(placement.path, pathFilter)) {
                    // Create the insertable by checking if the placement is allowed on the current viewport.
                    const insertable = this.create(item, placement, content, viewport);
                    if (insertable !== null) {
                        insertable.data.metadata.viewportBlacklist = this.viewports.filter((current) => current !== viewport);
                        insertables.unshift(insertable);
                    }
                } else {
                    Sys.logger.debug(`[DynamicDataHelper]: Path "${ placement.path }" not allowed. Filter: "${ pathFilter }", key: "${ item.placement.key }"`);
                }
            } else {
                Sys.logger.debug(`[DynamicDataHelper]: No placement found with key "${ item.placement.key }"`);
            }
        }

        return insertables;
    }

    create(item, placement, allItems, viewport = 'desktop') {
        if (this.filter(item)) {
            const data = this.assemble(item, placement);
            if (placement.path && placement.selector) {
                const placeholder = this.api.v1.model.query.getModelBySelector(placement.selector);
                if (!placeholder) {
                    this.api.v1.model.insert.atPath({
                        path: placement.path,
                        data: {
                            type: 'placeholder',
                            selector: placement.selector,
                            metadata: {
                                ...(placement.metadata || {}),
                                key: placement.key
                            },
                            state: {
                                isNonPersistent: true
                            }
                        },
                        options: {
                            index: 0,
                            useExisting: true,
                            prepend: true,
                            silent: true
                        }
                    });
                }
            }

            const options = {
                ...item.options,
                prepend: true,
                silent: true
            };
            let { path } = placement;
            let index = item.placement.index || 0;
            let model = null;
            if (placement.selector) {
                model = this.api.v1.model.query.getModelBySelector(placement.selector);
            } else if (placement.path) {
                // Get the non-ad models that should be rendered out.
                const models = this.getModelsByPath(placement.path, viewport);
                if (models.length) {
                    if (placement.options.useBodyTextIndex || placement.options.useBodyTextHeadingIndex || placement.options.lastBodyTextHeading) {
                        model = models.find((m) => m.getType() === 'bodytext');
                    } else {
                        // If the ad is to be inserted, get the model at the same index as the ad.
                        model = placement.options.shouldInsert ? models[0].children[index] : models[index];
                    }
                }
            }

            // If we don't have a model here, it's because there was none at the index of the ad.
            if (model || !placement.options.skipIfOutOfBounds) {
                if (model) {
                    index = this.api.v1.model.query.getIndex(model);

                    let parent = model.getParent();
                    // Mobile edge-cases.
                    if (viewport === 'mobile') {
                        if (index > 0 && index < parent.children.length) {
                            let current = parent.children[index];
                            while (current) {
                                const width = model.get('width', viewport, true);
                                if (width === undefined || width === 100) break;
                                current = parent.children[++index];
                            }
                        }

                        if (parent.get('metadata.hasRowTitle') && (index === 0 || index >= parent.children.length)) {
                            model = parent;
                            parent = model.getParent();
                            index = this.api.v1.model.query.getIndex(model);
                            path = parent.getPositionedPath();
                        }
                    }

                    if (placement.options.useIndex) {
                        if (index < parent.children.length) {
                            // If the previous model is set to not render, we need to set the index to +1 so it will render after the next model.
                            if (parent.children[index - 1] && parent.children[index - 1].getNoRenderState()) {
                                // Check if the next ad content has the same index as current index + 1,
                                // That means they have ads two rows in a row, so we can discard the one that was
                                // supposed to be rendered after the row that is hidden
                                if (allItems[index + 1] && allItems[index + 1].placement.index === index + 1) {
                                    return null;
                                }

                                options.index = index + 1;
                            } else {
                                options.index = index;
                            }
                        }
                    }

                    if (!placement.options.shouldInsert) {
                        path = parent.getPositionedPath();
                    }
                } else {
                    options.prepend = false;
                }

                return new _Insertable_js__WEBPACK_IMPORTED_MODULE_0__.Insertable({
                    data,
                    options,
                    selector: placement.selector,
                    path
                });
            }
        }

        return null;
    }

    assemble(item, placement) {
        let data = new _ViewData_js__WEBPACK_IMPORTED_MODULE_2__.ViewData(item);

        if (!placement.selector) {
            data.metadata = {
                ...data.metadata,
                ...placement.metadata,
                css: placement.metadata.css ? `${ data.metadata.css } ${ placement.metadata.css }` : data.metadata.css || ''
            };
        }

        if (placement.options.wrap) {
            data = new _ViewData_js__WEBPACK_IMPORTED_MODULE_2__.ViewData({
                type: placement.options.wrap.type,
                metadata: placement.options.wrap.metadata,
                children: [data]
            });
        }

        if (placement.options.skipIfOutOfBounds) {
            data.metadata.skipIfOutOfBounds = true;
        }

        if (placement.options.useBodyTextIndex) {
            data.metadata.bodyTextIndex = item.placement.index || 0;
        } else if (placement.options.useBodyTextHeadingIndex) {
            data.metadata.bodyTextHeadingIndex = item.placement.index || 0;
        }

        if (placement.options.lastBodyTextHeading) {
            data.metadata.lastBodyTextHeading = true;
        }

        data.state.isNonPersistent = true;

        return data;
    }

    acceptPath(path, pathFilter) {
        if (!path || !pathFilter) {
            return true;
        }
        return path === pathFilter;
    }

    // Note (Birk):
    // This is not a very scalable solution, but will have to do for now.
    // In the future, I recommend we move this filter to each "item" which is to be received by the DynamicDataHelper instance.
    // This way the helper will stay independent, and not care about specific implementations.
    filter(item) {
        if (item.type === 'googleAd' || item.type === 'adnuntiusAd') {
            return !this.hideAds;
        }
        return true;
    }

    // (Array) Get a list of models at supplied path. Validate that models are not hidden in viewport.
    getModelsByPath(path, viewport) {
        const key = `getByPath-${ path }`;
        if (!this.cache.has(key)) {
            this.cache.set(key, (this.api.v1.model.query.getModelsByPath(path) || []).filter((m) => !m.get('metadata.hideViewport', viewport) && !m.isNonPersistent()));
        }
        return this.cache.get(key);
    }

}


/***/ }),

/***/ "./modules/lib/helpers/dynamic/EsiHelper.js":
/*!**************************************************!*\
  !*** ./modules/lib/helpers/dynamic/EsiHelper.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EsiHelper": () => (/* binding */ EsiHelper)
/* harmony export */ });
class EsiHelper {

    constructor(api) {
        this.api = api;
    }

    register(model, sitename) {

        if (this.api.v1.app.mode.isFragmentMode()) {
            Sys.logger.debug('[EsiHelper] Labrador is is fragment-mode. Will not register ESI. Skipping.');
            return;
        }
        if (!model) {
            Sys.logger.debug('[EsiHelper] Missing model, cannot process. Skipping.');
            return;
        }

        // Include a footer from another page (fragment-api)
        // Example-url: http://api-www-default.localhost/fragment/structure/?pageId=104907&path=/dropzone&structureType=row&start=0&count=1
        // This config can be set using an admin-tool
        const footerInclude = this.api.v1.config.get('footer.include');
        if (footerInclude && footerInclude.pageId) {
            const footerUrl = this.getEsiUrl(footerInclude);
            if (footerUrl) {
                if (footerInclude.render === 'client') {
                    model.setFiltered('renderFooter.url', footerUrl);
                } else {
                    this.insertEsi(model, footerUrl, 'esi_footer');
                }
            } else {
                Sys.logger.warning('[EsiHelper] Cannot prepare url for footer-fragment. Missing url.');
            }
        }

        /*
        // Add to Config-object for site:
        "header": {
            "include": {
                "path": "/dropzone",
                "count": 1,
                "start": 0,
                "pageId": 121919,
                "structureType": "topcomments"
            }
        }
        Draw in client: ("render" = "client")
        "header": {
            "include": {
                "path": "/dropzone",
                "count": 1,
                "start": "0",
                "pageId": 103486,
                "structureType": "row",
                "render": "client"
            },
            "includes": [{
                "path": "/dropzone",
                "count": 1,
                "start": "4",
                "pageId": 103486,
                "structureType": "row",
                "render": "client"
            }]
        }
        */

        const headerInclude = this.api.v1.config.get('header.include');
        const headerIncludes = this.api.v1.config.get('header.includes') || [];
        const headerIncludeUrls = [];
        if (headerInclude && headerInclude.pageId) {
            const clientRenderUrl = this.insertHeader(headerInclude, model);
            if (clientRenderUrl) {
                headerIncludeUrls.push(clientRenderUrl);
            }
        }
        for (const include of headerIncludes) {
            if (include && include.pageId) {
                const clientRenderUrl = this.insertHeader(include, model);
                if (clientRenderUrl) {
                    headerIncludeUrls.push(clientRenderUrl);
                }
            }
        }
        model.setFiltered('renderHeader.urls', headerIncludeUrls.map((url) => `'${ url }'`).join(', '));
    }

    getEsiUrl(config) {
        if (!config.pageId) { return null; }
        const attributes = ['pageId', 'path', 'structureType', 'start', 'count'];
        const urlArguments = [];
        attributes.forEach((attr) => {
            if (config[attr] !== undefined && config[attr] !== '' && config[attr] !== null) {
                urlArguments.push(`${ attr }=${ config[attr] }`);
            }
        });
        // Require all attributes to be present:
        if (urlArguments.length === attributes.length) {
            let front_api_url = this.api.v1.properties.get('front_api_url');
            if (this.api.v1.app.mode.isEditor()) {
                if (document.location.protocol === 'https:') {
                    // Enforce same protocol:
                    front_api_url = front_api_url.replace('http:', 'https:');
                }
            }
            return `${ front_api_url }/fragment/structure/?${ urlArguments.join('&') }`;
        }
        return null;
    }

    insertEsi(model, url, selector) {
        Sys.logger.debug(`[EsiHelper] Will insert fragment for selector: "${ selector }", url: "${ url }".`);
        this.api.v1.model.insert.atPath({
            path: model.getPath(),
            data: {
                type: 'esi',
                selector,
                contentdata: {
                    fields: {
                        url,
                        identifier: selector
                    }
                },
                state: {
                    isNonPersistent: true
                }
            },
            options: {
                frontpage: true,
                articlepage: true
            }
        });
        if (this.api.v1.app.mode.isEditor()) {
            // In editor a placeholder is by now inserted.
            // Fetch markup from url and replace placeholder:
            this.fetchEditorEsi(url, `${ selector }`);
        }
    }

    insertHeader(headerInclude, model) {
        const headerUrl = this.getEsiUrl(headerInclude);
        if (headerUrl) {
            if (headerInclude.render === 'client') {
                Sys.logger.debug(`[EsiHelper] Found url for header-fragment to render in client: "${  headerUrl  }".`);
                return headerUrl;
            }
            this.insertEsi(model, headerUrl, 'esi_header');
        } else {
            Sys.logger.warning('[EsiHelper] Cannot prepare url for header-fragment. Missing url.');
        }
        return null;
    }

    fetchEditorEsi(url, selector) {
        this.api.v1.view.on('domRendered', (elements, viewport) => {
            const model = this.api.v1.model.query.getModelBySelector(selector);
            if (!model) {
                return;
            }
            Sys.logger.debug(`EsiHelper.fetchEditorEsi: Will fetch esi-substitute for editor. Selector: ${ selector }, url: ${ url }`);
            this.api.v1.util.httpClient.get(url, { credentials: 'omit', type: 'text' })
                .then((html) => {
                    const view = lab_api.v1.view.getView(model, viewport);
                    const tmpl = document.createElement('template');
                    tmpl.innerHTML = html;
                    Sys.logger.debug(`EsiHelper.fetchEditorEsi: Esi-substitute fetched. Selector: ${ selector }, element-count: ${ tmpl.content.children.length }`);
                    if (!view.markup) {
                        Sys.logger.warn(`EsiHelper.fetchEditorEsi: Element markup not found. Cannot insert dom-element(s). Selector: ${ selector }`);
                        return;
                    }
                    for (const element of [...tmpl.content.children]) {
                        view.markup.parentElement.insertBefore(element, view.markup);
                    }
                    view.markup.remove();
                }).catch((err) => {
                    Sys.logger.warning(`EsiHelper.fetchEditorEsi: Esi-substitute could not be fetched. Selector: ${ selector }, error: ${ err }`);
                });
        });
    }

}


/***/ }),

/***/ "./modules/lib/helpers/dynamic/Insertable.js":
/*!***************************************************!*\
  !*** ./modules/lib/helpers/dynamic/Insertable.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Insertable": () => (/* binding */ Insertable)
/* harmony export */ });
class Insertable {

    constructor({
        path = null,
        selector = null,
        data = {},
        options = {}
    } = {}) {
        this.path = path;
        this.selector = selector;
        this.data = data;
        this.options = {
            persistentTarget: true,
            intermediate: {
                useExisting: true
            },
            ...options
        };
    }

}


/***/ }),

/***/ "./modules/lib/helpers/dynamic/Placement.js":
/*!**************************************************!*\
  !*** ./modules/lib/helpers/dynamic/Placement.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Placement": () => (/* binding */ Placement)
/* harmony export */ });
class Placement {

    constructor({
        key = null,
        path = null,
        selector = null,
        placeholder = null,
        metadata = {},
        options: {
            shouldInsert = true,
            wrap = null,
            skipIfOutOfBounds = false,
            useIndex = false,
            useBodyTextIndex = false,
            useBodyTextHeadingIndex = false,
            lastBodyTextHeading = false
        } = {}
    } = {}) {
        this.key = key;
        this.path = path;
        this.selector = selector;
        this.placeholder = placeholder;
        this.metadata = metadata;
        this.options = {
            shouldInsert,
            wrap,
            skipIfOutOfBounds,
            useIndex,
            useBodyTextIndex,
            useBodyTextHeadingIndex,
            lastBodyTextHeading
        };
    }

}


/***/ }),

/***/ "./modules/lib/helpers/dynamic/ViewData.js":
/*!*************************************************!*\
  !*** ./modules/lib/helpers/dynamic/ViewData.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewData": () => (/* binding */ ViewData)
/* harmony export */ });
class ViewData {

    constructor({
        type = null,
        contentdata = null,
        content_data = null,
        cssSettings = {},
        children = [],
        metadata = {}
    } = {}) {
        this.type = type;
        this.contentdata = contentdata || content_data;
        this.children = children;
        this.metadata = { ...metadata };
        this.state = {};

        const css = [];
        if (this.metadata.css) css.push(this.metadata.css);
        for (const key of Object.keys(cssSettings)) {
            if (cssSettings[key]) css.push(key);
        }

        this.metadata.css = css.join(' ');
    }

}


/***/ }),

/***/ "./modules/plugins/abtest/AbTest.js":
/*!******************************************!*\
  !*** ./modules/plugins/abtest/AbTest.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbTest": () => (/* binding */ AbTest),
/* harmony export */   "TEST_METHODS": () => (/* binding */ TEST_METHODS)
/* harmony export */ });
/* harmony import */ var _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/helpers/datetime/DateTimeHelper.js */ "./modules/lib/helpers/datetime/DateTimeHelper.js");


/**
 * @typedef {string}
 * @enum {TEST_METHODS}
 */
const TEST_METHODS = {
    CLICK_RATIO_95_QUICK_EXIT: 'clickratio95qe',
    CLICK_RATIO_95: 'clickratio95'
};

class AbTest {

    /**
     * @param {string} [data.id]
     * @param {string} [data.placeId]
     * @param {string} [data.status]
     * @param {{TEST_METHODS}} [data.testMethod]
     * @param {string} [data.url]
     * @param {string} [data.start]
     * @param {string} [data.end]
     * @param {Object<string, *>} [data.results]
     * @param {boolean} [data.published]
     * @param {boolean} [data.includeOriginal]
     */
    constructor(data = {}) {
        this.id = data.id || null;
        this.placeId = data.placeId || null;
        this.status = data.status || 'Not started';
        this.testMethod = data.testMethod || TEST_METHODS.CLICK_RATIO_95_QUICK_EXIT;
        this.methodoptions = {
            minVariantDifference: 23,
            minimumclicks: 100,
            defaultVariantWinner: 'best'
        };
        this.url = data.url || '';
        this.start = data.start || '';
        this.end = data.end || '';
        this.results = data.results || {};
        this.published = !!data.published || false;
        this.dateTimeHelper = new _lib_helpers_datetime_DateTimeHelper_js__WEBPACK_IMPORTED_MODULE_0__.DateTimeHelper(lab_api.v1.config.get('lang') || 'no');
        this.includeOriginal = data.includeOriginal !== false;
    }

    static getTestMethods() {
        return [
            { key: TEST_METHODS.CLICK_RATIO_95, description: 'Clickratio using all clicks' },
            { key: TEST_METHODS.CLICK_RATIO_95_QUICK_EXIT, description: 'Clickratio without quick exits' }
        ];
    }

    get correct_start() {
        return this.toLocalDateString((this.start !== '') ? new Date(this.start) : '');
    }

    get correct_end() {
        return this.toLocalDateString((this.end !== '') ? new Date(this.end) : '');
    }

    isFinished() {
        return ['finished', 'inconclusive', 'stopped', 'concluded'].includes(this.status);
    }

    isRunning() {
        return (this.status === 'running' || this.status === 'pending');
    }

    toLocalDateString(date) {
        if (!date) {
            return '';
        }
        return new Date(date.getTime() + new Date().getTimezoneOffset() * -60 * 1000).toISOString().slice(0, 19);
    }

    serialize(preparedVariants, originalTitle, originalPublishedUrl) {
        const startDate = (this.start !== '') ? new Date(this.start) : '';
        const endDate = (this.end !== '') ? new Date(this.end) : '';
        const variants = [];
        if (this.includeOriginal) {
            // We need to add an item for the original article-teaser in data we send to Kilkaya
            // Client side it is identified as 'original' and we'll use the version rendered server side.
            // Use the actual title of the article to easier identify it in Kilkaya A/B GUI.
            const title = lab_api.v1.util.string.stripTags(originalTitle || 'Original article');
            const data = [
                { name: 'title', value: title },
                { name: 'identifier', value: 'original' }
            ];
            if (originalPublishedUrl) {
                data.push({ name: 'url', value: lab_api.v1.site.getSite().domain + originalPublishedUrl });
            }
            variants.push({
                vid: 1,
                active: this.includeOriginal,
                data,
                name: title
            });
        }
        let cc = 2;
        for (const [variant] of preparedVariants) {
            const item = {
                vid: cc,
                active: !variant.state.disabled,
                data: [
                    { name: 'title', value: lab_api.v1.util.string.stripTags(variant.data.contentdata.fields.title.value) },
                    { name: 'identifier', value: variant.guid }
                ],
                name: variant.name
            };
            if (variant.data.contentdata.fields.published_url) {
                item.data.push({ name: 'url', value: lab_api.v1.site.getSite().domain + variant.data.contentdata.fields.published_url.value });
            }
            variants.push(item);
            cc += 1;
        }
        return {
            id: this.id,
            placeId: this.placeId,
            status: this.status,
            testMethod: this.testMethod,
            methodoptions: JSON.stringify(this.methodoptions),
            url: this.url,
            // editurl: window.location.href,
            start: (startDate !== '') ? startDate.toISOString().slice(0, 19) : '',
            end: (endDate !== '') ? endDate.toISOString().slice(0, 19) : '',
            published: this.published,
            variants: JSON.stringify(variants)
        };
    }

    updateTestData(data) {
        for (const key in data) {
            if (key === 'url' && data[key] === null) {
                // eslint-disable-next-line no-continue
                continue;
            }
            if (key === 'methodoptions' && typeof data[key] === 'object') {
                for (const k of Object.keys(data[key])) {
                    const optionValue = ['minVariantDifference', 'minimumclicks'].includes(k) ? parseInt(data[key][k], 10) : data[key][k];
                    this.methodoptions[k] = optionValue;
                }
            } else if (key !== 'methodoptions') {
                this[key] = data[key];
            }
        }
    }

    shouldSave() {
        if (this.start !== '' || this.end !== '') {
            return true;
        }

        return false;
    }

}


/***/ }),

/***/ "./modules/plugins/abtest/PublishUpdater.js":
/*!**************************************************!*\
  !*** ./modules/plugins/abtest/PublishUpdater.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PublishUpdater": () => (/* binding */ PublishUpdater)
/* harmony export */ });
class PublishUpdater {

    constructor(api, model) {
        this.api = api;
        this.model = model;
    }

    // (void)
    async willPublish() {

        // 1) Find all collections used on this page
        const collectionIds = await this.getCollections();

        // 2) Get current stored collection id's
        const current = this.model.get('fields.abtestCollectionIds_json') || [];

        // 3) Check if modified, if so: Store new list on model and re-publish
        if (this.hasDiff(current, collectionIds)) {
            this.model.set('fields.abtestCollectionIds_json', collectionIds);
            this.model.set('fields.lab_override_config_presentation', this.getPreloadConfig(collectionIds));
            setTimeout(() => {
                this.api.v1.app.publish();
            }, 1000);
        }
    }

    // (array) Get id of all collections used on current page
    async getCollections() {
        const ids = await this.api.v1.abtest.collection.listByPageId(this.model.get('id'));
        return ids ? ids.result : [];
    }

    // (boolean)
    hasDiff(array1, array2) {
        if (array1.length !== array2.length) {
            return true;
        }
        for (const id of array1) {
            if (!array2.includes(id)) { return true; }
        }
        for (const id of array2) {
            if (!array1.includes(id)) { return true; }
        }
        return false;
    }

    // (string)
    getPreloadConfig(idList) {
        if (!idList.length) {
            return '';
        }
        return JSON.stringify({
            preloadObject: {
                abtests: {
                    mode: 'presentation',
                    type: 'json',
                    timeout: 1000,
                    url: `{{api}}/api/v1/ab_collection?query=id:(${ encodeURIComponent(idList.join(' OR ')) })&content=full`,
                    path: 'ab_collections'
                }
            }
        });
    }

}


/***/ }),

/***/ "./modules/plugins/abtest/TestManagerArticle.js":
/*!******************************************************!*\
  !*** ./modules/plugins/abtest/TestManagerArticle.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TestManagerArticle": () => (/* binding */ TestManagerArticle)
/* harmony export */ });
/* harmony import */ var _TestManagerBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TestManagerBase.js */ "./modules/plugins/abtest/TestManagerBase.js");
// import templates from './templates.js';


class TestManagerArticle extends _TestManagerBase_js__WEBPACK_IMPORTED_MODULE_0__.TestManagerBase {

    constructor(api, model, endCallback) {
        super(api, model);
        this.endCallback = endCallback;
        this.instanceOfId = this.model.getId();
        this.ui.sizes = {
            logo: 3,
            variantsContainer: 9,
            variants: 5,
            selectedVariant: 7
        };
        this.ui.displayArticleData = true;
        this.usePartialData = true;
        this.api.v1.apps.start('TextEdit').then((textTool) => {
            this.textEditor = textTool;
        }).catch((error) => {
            console.error(`Error loading TextEdit-app: ${ error }`);
        });
        this.CropEditorModule = this.api.v1.tool.classes.get('ImageEdit').getEditor();
    }

    setupEditables(model, skipEditor = false) {
        const editables = {};
        if (this.ui.editablesContainer) {
            editables.image = this.setupEditableImage(model, skipEditor);
            editables.kicker = this.setupEditable(model, 'fields.kicker', skipEditor);
            editables.title = this.setupEditable(model, 'fields.title', skipEditor);
            editables.subtitle = this.setupEditable(model, 'fields.subtitle', skipEditor);
        }
        return editables;
    }

    setupEditableImage(model, skipEditor) {
        const image = this.api.v1.model.query.getChildOfType(model, 'image');
        return this.createImageElements(image, model);
    }

    async setupImagePlaceholder(model) {
        const image = await this.getModelImageData();
        if (image) {
            const element = this.createImageElements(this.api.v1.model.create.view(image), model, true);
            this.ui.editablesContainerImage.appendChild(element);
        }
    }

    updateImage(model) {
        this.ui.editablesContainerImage.innerHTML = '';
        const el = this.createImageElements(model, model ? model.getParent() : undefined);
        this.ui.editablesContainerImage.appendChild(el);
        if (this.preparedVariants.get(this.currentVariant)) {
            this.preparedVariants.get(this.currentVariant).editables.image = el;
        }
    }

    removeImage(model) {
        this.api.v1.model.delete(model);
        this.updateImage();
    }

    async showDefaultFields() {
        let image = await this.getModelImageData();
        if (image !== null && !image.data) {
            image = this.api.v1.model.create.view(image);
        }
        this.updateImage(image);
    }

    changeImage(currentImage, parent) {
        this.api.v1.collection.display({
            name: 'MediaImagesThisPage',
            modal: true,
            skipCache: true,
            options: {
                label: 'Images from this page',
                clickHandler: (model, element) => {
                    this.setImage(model, currentImage, parent);
                },
                navigation: [
                    {
                        label: 'Display All images',
                        name: 'MediaImages',
                        modal: true,
                        skipCache: true,
                        options: {
                            label: 'All images',
                            archiveActive: false,
                            onlyLabradorSource: true,
                            clickHandler: (model, element) => {
                                this.setImage(model, currentImage, parent);
                            },
                            navigation: [
                                {
                                    label: 'Display This page',
                                    name: 'MediaImagesThisPage',
                                    modal: true,
                                    skipCache: true
                                }
                            ]
                        }
                    }
                ]
            }
        });
    }

    setImage(model, currentImage, parent) {
        if (currentImage) {
            this.removeImage(currentImage);
        }
        this.api.v1.model.setNonPersistentState(model, true);
        parent.addChild(model);
        this.updateImage(model);
    }

    createImageElements(image, parent, placeholder = false) {
        const buttons = this.api.v1.util.dom.renderTemplate(`<div class="abtest-image-btns">
            <input type="button" class="btn-remove-image" value="Remove" ${ (!image || placeholder) ? 'disabled' : '' }>
            <input type="button" class="btn-change-image" value="Change" ${ !this.currentVariant ? 'disabled' : '' }>
        </div>`, {}, true);
        buttons.querySelector('.btn-remove-image').addEventListener('click', (event) => {
            this.removeImage(image);
        });
        buttons.querySelector('.btn-change-image').addEventListener('click', (event) => {
            this.changeImage(image, parent);
        });

        if (!image) {
            const el = this.api.v1.util.dom.renderTemplate(`
                <div class="abtest-image-el">
                    <div class="lab-empty-placeholder lab-color-light lab-bordered">
                        <div class="lab-inner">
                            <div class="lab-icon-large labicon-images"></div>
                        </div>
                    </div>
                </div>
            `, {}, true);
            el.appendChild(buttons);
            return el;
        }
        const imageServer = this.api.v1.properties.get('image_server');
        const view = this.api.v1.view.getView(image);
        const cropdata = {
            cropw: view.get('fields.cropw') || 100,
            croph: view.get('fields.croph') || 100,
            x: view.get('fields.x') || 0,
            y: view.get('fields.y') || 0
        };
        const size = {
            w: 270,
            h: 122
        };
        const el = this.api.v1.util.dom.renderTemplate(`
            <div class="abtest-image-el">
                <figure><img src="${ imageServer }/${ image.get('instance_of') }.webp?imageId=${ image.get('instance_of') }&width=${ size.w }&height=${ size.h }&${ Object.keys(cropdata).map((key) => `${ key }=${ cropdata[key] }`).join('&') }"></figure>
            </div>
        `, {}, true);
        el.appendChild(buttons);
        const imageElement = el.querySelector('.abtest-image-el img');
        imageElement.addEventListener('click', (event) => { this.editCrop(imageElement, image); }, false);
        return el;
    }

    editCrop(element, model) {
        const offset = this.api.v1.viewport.getOffset();
        const view = this.api.v1.view.getView(model);
        const crop = {
            x: view.get('fields.x') || 0,
            y: view.get('fields.y') || 0,
            cropw: view.get('fields.cropw') || 100,
            croph: view.get('fields.croph') || 100
        };
        const keyEventsIds = [];
        const endCallback = (theEditor) => {
            while (keyEventsIds.length > 0) {
                this.api.v1.util.keyEventHandler.remove(keyEventsIds.pop());
            }
            if (theEditor) {
                const serializedCrop = theEditor.end();
                view.set('fields.x', serializedCrop.x);
                view.set('fields.y', serializedCrop.y);
                view.set('fields.cropw', serializedCrop.cropw);
                view.set('fields.croph', serializedCrop.croph);
            }
            this.updateImage(model);
        };
        const editor = new this.CropEditorModule({
            modal: false,
            container: {
                width: element.width,
                height: element.height,
                element,
                cssList: ['lab-modal-overlay']
            },
            offset: {
                y: window.scrollY - offset.top
            },
            imageElement: {
                element
            },
            crop,
            tools: {
                resize: {
                    active: false
                }
            },
            imageUrl: `${ this.api.v1.properties.get('image_server') }/?imageId=${ model.get('instance_of') }`
        }, {
            end: () => {
                endCallback(editor);
            }
        });
        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({
            key: 'Escape',
            callback: (event) => {
                editor.end();
                endCallback();
            },
            stopPropagation: true,
            preventDefault: true,
            overrideDisable: true
        }));
        keyEventsIds.push(this.api.v1.util.keyEventHandler.add({
            key: 'S',
            controlkeys: ['labCtrlKey'],
            callback: (event) => {
                endCallback(editor);
            },
            stopPropagation: true,
            preventDefault: true,
            overrideDisable: true
        }));

    }

    setupEditable(model, path, skipEditor) {
        const el = document.createElement('h2');
        const fieldName = path.replace('fields.', '');
        el.innerHTML = model.get(path) || `Click to add ${ fieldName }`;
        el.classList.add('lab-title', `abtest-text-${ fieldName }`);
        if (skipEditor) {
            el.classList.add('lab-defaultTextValue');
        } else {
            el.setAttribute('title', `Click to edit ${ fieldName }`);
            this.setupRichTextEditingForElement(model, el, path);
        }
        return el;
    }

    setupRichTextEditingForElement(model, element, key) {
        const contentdata = {};
        this.api.v1.util.object.set(key, model.get(key), contentdata);
        this.textEditor.register({
            element,
            simulatedData: {
                type: 'article',
                path: '',
                contentdata
            },
            toolSettings: {
                key,
                inlineOnly: true,
                displayCharCount: true,
                displaySelectionLength: false,
                displayWordCount: true,
                selectTextOnStart: true,
                placeholder: `Click to add ${ key.replace('fields.', '') }`,
                attributes: {
                    text_size: {
                        active: false
                    }
                }
            },
            callbacks: {
                ended: (theKey, theValue) => {
                    model.set(theKey, theValue.trim());
                },
                started: (tool, theKey) => {}
            },
            menuSettings: {
                container: this.ui.editablesContainerText,
                style: {
                    'margin-top': '-10px'
                },
                items: {
                    textColor: {
                        group: 'g1',
                        inheritPath: 'menu/buttons/textColor.json'
                    },
                    textBackgroundColor: {
                        group: 'g1',
                        inheritPath: 'menu/buttons/textBackgroundColor.json'
                    },
                    bold: {
                        group: 'g2',
                        icon: 'labicon-text_bold',
                        callback: 'toggleAttribute',
                        key: 'font_weight',
                        attributes: {
                            class: 'font-weight-bold'
                        },
                        value: false,
                        onValue: 'font-weight-bold',
                        offValue: false,
                        bindToSelection: 'font_weight',
                        title: 'Font weight - Bold',
                        hotkeys: [{
                            key: 'B',
                            controlkeys: ['labCtrlKey'],
                            preventDefault: true,
                            overrideDisable: true
                        }]
                    },
                    italic: {
                        group: 'g2',
                        icon: 'labicon-text_italic',
                        callback: 'toggleAttribute',
                        key: 'italic',
                        attributes: {
                            class: 'italic'
                        },
                        value: false,
                        onValue: 'italic',
                        offValue: false,
                        bindToSelection: 'italic',
                        title: 'Italic',
                        hotkeys: [{
                            key: 'i',
                            controlkeys: ['labCtrlKey'],
                            preventDefault: true,
                            overrideDisable: true
                        }]
                    },
                    reset: {
                        group: 'g4',
                        icon: 'labicon-reset_style',
                        callback: 'reset',
                        title: 'Remove textformatting in selection for viewport'
                    }
                }
            }
        });
    }

    bindWidth() {}

    setWidth() {}

    removeFromEditor(model) {}

    resetRemoveFromEditor(model) {}

    addToController(model) {
        this.model.addChild(model);
    }

    end() {
        super.end();
        this.endCallback();
    }

}


/***/ }),

/***/ "./modules/plugins/abtest/TestManagerBase.js":
/*!***************************************************!*\
  !*** ./modules/plugins/abtest/TestManagerBase.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TestManagerBase": () => (/* binding */ TestManagerBase)
/* harmony export */ });
/* harmony import */ var _templates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./templates.js */ "./modules/plugins/abtest/templates.js");
/* harmony import */ var _AbTest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbTest.js */ "./modules/plugins/abtest/AbTest.js");
/* harmony import */ var _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/helpers/ContentLanguages.js */ "./modules/lib/helpers/ContentLanguages.js");




/**
 * @typedef {Object} Collection
 * @property {number} [test_id] The test id of the collection, if present
 * @property {number} referenceId
 * @property {string} type
 * @property {Array<Variant>} variants
 * @property {string} id
 * @property {string} status
 * @property {number} modified
 * @property {number} created
 * @property {number} published
 * @property {number} variantCounter
 */

/**
 * @typedef {Object} Variant
 * @property {number} referenceId
 * @property {Object<string, any>} data
 * @property {{state?: boolean}} state
 * @property {number} modified
 * @property {number} created
 * @property {string} guid
 * @property {string} name
 * @property {string} notes
 * @property {number} partial
 */

class TestManagerBase {

    constructor(api, model) {
        this.api = api;
        this.model = model;

        /**
         * @type {?Collection}
         */
        this.collection = null;

        this.default_test_method = _AbTest_js__WEBPACK_IMPORTED_MODULE_1__.TEST_METHODS.CLICK_RATIO_95_QUICK_EXIT;

        /**
         * @type {AbTest}
         */
        this.test = null;

        /**
         * @type {?Variant}
         */
        this.currentVariant = null;

        /**
         * Key is instance of Variant, value is navigation DOM-element etc.
         * @type {Map<any, any>}
         */
        this.preparedVariants = new Map();

        this.instanceOfId = this.model.get('instance_of') || this.model.get('id');
        this.timeoutId = null;
        this.ui = {
            sizes: {
                logo: 3,
                variantsContainer: 9,
                variants: 7,
                selectedVariant: 5
            },
            displayArticleData: false,
            displayTestData: false
        };
        this.usePartialData = false;
        this.listeners = new Map();
        this.deleter = this.deleteBinding.bind(this);
        this.modelDeleter = this.deleteModelBinding.bind(this);
        this.statistics = [];
        this.stats = {};
        this.estimateId = null;
    }

    setup(data = {}) {
        if (!this.validateOriginal()) {
            return false;
        }
        if (data.displayTestData !== undefined) {
            this.ui.displayTestData = data.displayTestData;
        }
        this.setupUI();
        return true;
    }

    getType(model) {
        return (model || this.model).getType().replace('page_', '');
    }

    getTitle(model) {
        return this.api.v1.util.string.stripTags((model || this.model).get('fields.title'));
    }

    setupUI() {
        if (!this.instanceOfId) {
            Sys.logger.warn('[TestManagerBase] Model is missing instance_of-id. No AB-versions here.');
            return;
        }
        this.hideExisting();
        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/abtest/abtest.css');
        const site_id = this.model.get('fields.site_id') || null;
        const domain = (site_id) ? this.api.v1.site.getSiteById(site_id).domain : null;
        this.ui.container = this.api.v1.util.dom.renderTemplate(_templates_js__WEBPACK_IMPORTED_MODULE_0__["default"].ui, {
            type: this.getType(),
            id: this.model.get('id'),
            instanceOfId: this.instanceOfId,
            links: {
                edit: this.model.get('id') !== this.instanceOfId
            },
            front: domain || this.api.v1.properties.get('customer_front_url'),
            title: this.api.v1.util.string.stripTags(this.model.get('fields.title')),
            sizes: this.ui.sizes,
            displayArticleData: this.ui.displayArticleData,
            displayTestData: this.ui.displayTestData
        }, true);
        this.api.v1.model.bindings.bind(this.model, 'fields.title', (m, path, value) => {
            this.ui.container.querySelector('h3 span').innerHTML = this.api.v1.util.string.stripTags(value);
        });
        this.bindWidth();
        this.model.set('state.draggableDisabled', true, { notify: false, registerModified: false });

        this.ui.notesField = this.ui.container.querySelector('.variant-notes-field');
        this.ui.notesField.addEventListener('change', (event) => {
            this.currentVariant.setNotes(this.ui.notesField.value.trim());
            this.ui.notesField.blur();
            this.save();
        });

        if (this.ui.displayTestData) {
            this.ui.endTestNowButton = this.ui.container.querySelector('.end-test-now-btn');
            this.ui.endTestNowButton.addEventListener('click', (event) => {
                if (this.test && this.test.isRunning()) {
                    this.deleteTest();
                }
            });
            this.ui.startTestNowButton = this.ui.container.querySelector('.start-test-now-btn');
            this.ui.startTestNowButton.addEventListener('click', (event) => {
                this.setDefaultTestValues();
                this.api.v1.ui.modal.dialog({
                    container: {
                        css: 'ab-results',
                        state: {
                            ok: true
                        }
                    },
                    content: {
                        title: 'Do you want to publish current A/B test?',
                        description: '<p>The A/B test will be started with available variants and the page will publish now.</p>'
                    },
                    footer: {
                        buttons: [
                            {
                                type: 'button',
                                highlight: false,
                                id: 'ab_cancelBtn',
                                value: 'No, don\'t publish yet'
                            },
                            {
                                type: 'button',
                                highlight: true,
                                id: 'ab_okBtn',
                                value: 'Yes, publish now'
                            }
                        ]
                    },
                    eventHandlers: [
                        {
                            selector: '#ab_cancelBtn',
                            callback: (modal, event) => {
                                modal.close();
                            }
                        },
                        {
                            selector: '#ab_okBtn',
                            callback: (modal, event) => {
                                modal.close();
                                this.publish();
                            }
                        }
                    ]
                });
            });

            this.ui.testNowButton = this.ui.container.querySelector('.set-test-now-btn');
            this.ui.testNowButton.addEventListener('click', (event) => {
                this.setDefaultTestDuration();
            });

            this.ui.resetTestButton = this.ui.container.querySelector('.abtest-reset-btn');
            this.ui.resetTestButton.addEventListener('click', (event) => {
                this.resetAbTest();
            });

            this.ui.testMethodSelector = this.addTestMethodSelector();
            this.ui.testMethodSelector.addEventListener('change', (event) => {
                this.test.testMethod = event.target.value;
                this.ui.publish.button.classList.add('abtest-modified');
                this.updateTestUI();
            });

            this.ui.testStartField = this.ui.container.querySelector('.test-start-field');
            if (this.ui.testStartField) {
                this.ui.testStartField.addEventListener('change', (event) => {
                    const start_value = this.ui.testStartField.value.trim();
                    this.test.start = (start_value !== '') ? new Date(start_value) : '';
                    this.ui.publish.button.classList.add('abtest-modified');
                });
            }
            this.ui.testEndField = this.ui.container.querySelector('.test-end-field');
            if (this.ui.testEndField) {
                this.ui.testEndField.addEventListener('change', (event) => {
                    const end_value = this.ui.testEndField.value.trim();
                    this.test.end = (end_value !== '') ? new Date(end_value) : '';
                    this.ui.publish.button.classList.add('abtest-modified');
                });
            }

            this.ui.minVariantDifferenceField = this.ui.container.querySelector('.min-variant-lift');
            if (this.ui.minVariantDifferenceField) {
                this.ui.minVariantDifferenceField.addEventListener('change', (event) => {
                    this.test.methodoptions.minVariantDifference = parseInt(this.ui.minVariantDifferenceField.value, 10);
                    this.ui.publish.button.classList.add('abtest-modified');
                    this.getEstimate();
                });
            }

            this.ui.getEstimateValue = this.ui.container.querySelector('.estimate-value');

            this.ui.testIsPublishedField = this.ui.container.querySelector('.test-is-published');
            if (this.ui.testStartField) {
                this.ui.testIsPublishedField.addEventListener('change', (event) => {
                    if (this.ui.testIsPublishedField.checked) {
                        this.test.published = true;
                    } else {
                        this.test.published = false;
                    }
                    this.ui.publish.button.classList.add('abtest-modified');
                    if (this.ui.displayTestData) {
                        this.updateTestUI();
                    }
                });
            }
        }

        this.ui.variants = this.ui.container.querySelector('.variants');
        this.ui.originalBtn = this.ui.variants.querySelector('.original');
        this.ui.originalBtn.addEventListener('click', (event) => {
            this.resetView();
        });
        this.ui.container.querySelector('.add-variant-btn').addEventListener('click', (event) => {
            this.copyVariant();
        });
        this.ui.copyToOriginalBtn = this.ui.container.querySelector('.copy-to-orignal-btn');
        if (this.ui.copyToOriginalBtn) {
            this.ui.copyToOriginalBtn.addEventListener('click', (event) => {
                this.copyVariantToOriginal();
            });
        }
        this.ui.deleteBtn = this.ui.container.querySelector('.delete-variant-btn');
        this.ui.deleteBtn.addEventListener('click', (event) => {
            if (this.collection && this.currentVariant) {
                if (this.test && this.test.isRunning()) {
                    this.warnActiveTest({
                        title: 'Cannot delete variant',
                        description: 'You cannot delete a variant while the A/B test is running. Please stop the A/B test before copying.'
                    });
                    return;
                }
                const index = this.collection.getVariantIndex(this.currentVariant);
                this.preparedVariants.get(this.currentVariant).navigation.remove();
                this.api.v1.model.delete(this.preparedVariants.get(this.currentVariant).model, false, true);
                this.deleteVariant(this.currentVariant);
                this.currentVariant = null;
                const i = this.collection.getVariants().length > index ? index : index - 1;
                if (i > -1) {
                    this.displayVariant(i);
                } else {
                    this.resetView();
                }
                this.updateUI();
                this.save();
            }
        });
        this.ui.disableBtn = this.ui.container.querySelector('#disable-variant-btn');
        this.ui.disableBtn.addEventListener('change', (event) => {
            if (this.currentVariant) {
                if (this.ui.disableBtn.checked) {
                    this.currentVariant.disable();
                    this.preparedVariants.get(this.currentVariant).navigation.classList.add('abtest-disabled');
                } else {
                    this.currentVariant.enable();
                    this.preparedVariants.get(this.currentVariant).navigation.classList.remove('abtest-disabled');
                }
                this.save();
            }
        });
        this.ui.suggestBtn = this.ui.container.querySelector('.suggest-variant-btn');
        this.ui.suggestBtn.addEventListener('click', (event) => {
            const countEl = this.ui.container.querySelector('.suggest-variant-count-btn');
            let count = 3;
            if (countEl && countEl.value) {
                count = countEl.value;
            }
            this.suggestVariants(count);
        });
        this.ui.container.querySelector('.abtest-close-btn').addEventListener('click', (event) => {
            this.end();
        });
        this.ui.editablesContainer = this.ui.container.querySelector('.abtest-editables');
        this.ui.editablesContainerImage = this.ui.editablesContainer ? this.ui.editablesContainer.querySelector('.abtest-image') : null;
        this.ui.editablesContainerText = this.ui.editablesContainer ? this.ui.editablesContainer.querySelector('.abtest-text') : null;
        this.ui.publish = {
            button: this.ui.container.querySelector('.abtest-publish-btn')
        };
        this.ui.publish.button.addEventListener('click', (event) => {
            this.publish();
        });
        this.ui.deleteBtn = this.ui.container.querySelector('.abtest-delete-btn');
        this.ui.deleteBtn.addEventListener('click', (event) => {
            this.deleteCollection();
        });

        // Navigation
        this.ui.variantsContainer = this.ui.container.querySelector('.variants-container');
        this.ui.testsContainer = this.ui.container.querySelector('.tests-container');
        this.ui.testResultsContainer = this.ui.container.querySelector('.test-results-container');
        this.ui.navVariantsContainer = this.ui.container.querySelector('.tab-variants-container');
        this.ui.navTestsContainer = this.ui.container.querySelector('.tab-tests-container');
        this.ui.navTestResultsContainer = this.ui.container.querySelector('.tab-test-results-container');
        this.ui.navVariantsContainer.addEventListener('click', (event) => {
            this.ui.variantsContainer.classList.remove('lab-hidden');
            this.ui.testsContainer.classList.add('lab-hidden');
            this.ui.testResultsContainer.classList.add('lab-hidden');
            this.ui.navVariantsContainer.classList.add('lab-selected');
            if (this.ui.navTestsContainer) {
                this.ui.navTestsContainer.classList.remove('lab-selected');
            }
            if (this.ui.navTestResultsContainer) {
                this.ui.navTestResultsContainer.classList.remove('lab-selected');
            }
        });
        if (this.ui.navTestsContainer) {
            this.ui.navTestsContainer.addEventListener('click', (event) => {
                this.ui.testsContainer.classList.remove('lab-hidden');
                this.ui.testResultsContainer.classList.add('lab-hidden');
                this.ui.variantsContainer.classList.add('lab-hidden');
                this.ui.navTestsContainer.classList.add('lab-selected');
                this.ui.navVariantsContainer.classList.remove('lab-selected');
                this.ui.navTestResultsContainer.classList.remove('lab-selected');
            });
        }
        if (this.ui.navTestResultsContainer) {
            this.ui.navTestResultsContainer.addEventListener('click', (event) => {
                this.ui.testResultsContainer.classList.remove('lab-hidden');
                this.ui.variantsContainer.classList.add('lab-hidden');
                this.ui.testsContainer.classList.add('lab-hidden');
                this.ui.navTestResultsContainer.classList.add('lab-selected');
                this.ui.navVariantsContainer.classList.remove('lab-selected');
                this.ui.navTestsContainer.classList.remove('lab-selected');
            });
        }

        // Test-management
        // const testBtn = this.ui.container.querySelector('.tests-container .abtest-testing-btn');
        // testBtn.addEventListener('click', (event) => {
        //     console.log('klikk ...');
        // });
    }

    bindWidth() {
        this.api.v1.model.bindings.bind(this.model, 'width', () => {
            const w = this.model.getRaw('width');
            for (const [variant, value] of this.preparedVariants) {
                value.model.setRaw('width', w, { save: false });
            }
        });
    }

    setWidth(model) {
        model.setRaw('width', this.model.getRaw('width'), { save: false });
    }

    async getModelImageData() {
        try {
            const crop = await this.api.v1.article.frontcrop.get();
            if (crop) {
                const { pano } = crop;
                pano.contentdata.id = undefined;
                pano.contentdata.type = pano.type;
                if (pano.contentdata?.fields?.id) {
                    pano.contentdata.fields.id = undefined;
                }
                return pano;
            }
            const original_image = this.api.v1.model.query.getModelByPath('articleHeader/image');
            if (!original_image) {
                return null;
            }
            const image = this.api.v1.model.copy(original_image);
            this.api.v1.model.setNonPersistentState(image, true);
            return image.data;
        } catch (e) {
            return null;
        }
    }

    getModelData(model, isCopy = false) {
        if (model) {
            const data = this.api.v1.model.serialize.modelToInternal(model, true, isCopy);
            return data;
        }
        return {
            type: this.getType(),
            children: [],
            contentdata: {
                fields: {
                    title: {
                        value: this.model.get('fields.title')
                    },
                    subtitle: {
                        value: this.model.get('fields.subtitle')
                    }
                }
            }
        };
    }

    getOriginalModel() {
        return null;
    }

    validateJsonString(data) {
        let jsonString = data.trim();

        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {
            jsonString = jsonString.substring(jsonString.indexOf('{'));
        }

        if (!jsonString.includes('{')) {
            jsonString = `{${  jsonString }`;
        }

        if (!jsonString.includes('}')) {
            jsonString = `${  jsonString }}`;
        }

        // Test to choose the correct '}'. Ignore '}' with '\' ahead
        if (jsonString.match(/}/g).length > 1) {
            jsonString = jsonString.match(/(.|\n)*?(?<!\\)}/);
        }

        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {
            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);
        }

        jsonString = jsonString.trim();
        return jsonString;
    }

    setupLanguage() {
        let { language } = this;

        // Get site language
        this.languageCode = this.api.v1.config.get('contentLanguage');
        if (this.languageCode) {
            for (const contentLanguage of _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
                if (contentLanguage.code === this.languageCode) {
                    language = contentLanguage.name;
                }
            }
        }

        // Get seo language
        const seolanguageCode = this.model.get('fields.seolanguage');
        if (seolanguageCode) {
            for (const contentLanguage of _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
                if (contentLanguage.code === seolanguageCode) {
                    language = contentLanguage.name;
                }
            }
        }
        return language;
    }

    async suggestVariants(count = 3, allowRetry = true) {
        this.ui.suggestBtn.parentElement.classList.add('lab-busy');
        this.ui.suggestBtn.disabled = true;

        // Get data from original article and use this to suggest title and summary.
        const articleData = await this.api.v1.util.httpClient.get(`/api/v1/article/${ this.instanceOfId }`);
        if (!articleData.result || !articleData.result[0]) {
            Sys.logger.warn(`[TestManagerBase] Cannot find data for original article "${ this.instanceOfId }"`);
            this.ui.suggestBtn.parentElement.classList.remove('lab-busy');
            this.ui.suggestBtn.disabled = false;
            return;
        }
        const aiConfig = this.api.v1.config.get('plugins.abtest.completion') || {};
        const prompt = `${ this.api.v1.util.dom.renderTemplate(aiConfig.prompt, {
            language: this.setupLanguage(),
            title: articleData.result[0].title || '',
            subtitle: articleData.result[0].subtitle || '',
            bodytext: articleData.result[0].bodytext || ''
        }) }`;
        let data = await this.api.v1.generate.text({
            service: aiConfig.service || 'chatCompletions',
            model: aiConfig.model || 'gpt-4o', // GPT-4o
            prompt,
            results: count
        }).catch((error) => {
            Sys.logger.warn(`[TestManagerBase] Error fetching suggestions:`);
            console.warn(error);
            if (allowRetry) {
                Sys.logger.debug(`[TestManagerBase] Will try again.`);
                this.suggestVariants(count, false);
            }
        });

        if (typeof data === 'string') {
            data = [data];
        }

        const original_model = this.getModelData(this.getOriginalModel(), true);
        if (original_model.children.length === 0) {
            const image = await this.getModelImageData();
            if (image) {
                original_model.children.push(image);
            }
        }

        for (let item of (data || [])) {
            try {
                item = this.validateJsonString(item);
                const texts = JSON.parse(item);
                const variant = this.collection.add(original_model, this.usePartialData);
                this.prepareVariant(variant);
                this.displayVariant(this.collection.getVariants().length - 1);
                const obj = this.preparedVariants.get(variant);
                if (texts.title) {
                    obj.model.set('fields.title', texts.title);
                }
                if (texts.summary) {
                    obj.model.set('fields.subtitle', texts.summary);
                }
                obj.editables = this.setupEditables(obj.model);
            } catch (error) {
                Sys.logger.warn(`[TestManagerBase] Cannot parse JSON-string: "${ item }"`);
            }
        }
        if (data) {
            this.ui.suggestBtn.parentElement.classList.remove('lab-busy');
            this.ui.suggestBtn.disabled = false;
        }
    }

    updateColelctionDrawer() {
        const rect = this.ui.container.getBoundingClientRect();
        document.querySelector('.lab-collection-drawer').style.setProperty('bottom', `${ rect.height }px`);
    }

    hideExisting() {
        const current = document.querySelector(`.abtest-ui-container:not([data-ab-container="${ this.model.getId() }"])`);
        if (current) {
            current.classList.add('abtest-will-hide');
            setTimeout(() => {
                current.classList.add('abtest-hidden');
                this.updateColelctionDrawer();
                current.remove();
            }, 500);
        }
    }

    validateOriginal() {
        if (!this.model.get('fields.published_url')) {
            Sys.logger.debug(`[TestManagerBase] Model do not validate for AB testing. Missing url`);
            this.api.v1.ui.modal.dialog({
                container: {
                    state: {
                        warning: true
                    }
                },
                content: {
                    title: 'Cannot run AB test',
                    description: 'This element has no URL defined and cannot run an A/B test. Please define a URL in the element settings.'
                },
                footer: {
                    buttons: [
                        {
                            type: 'button',
                            highlight: true,
                            id: 'ab_cancelBtn',
                            value: 'OK'
                        }
                    ]
                },
                eventHandlers: [{
                    selector: '#ab_cancelBtn',
                    callback: (modal, event) => {
                        modal.close();
                    }
                }]
            });
            return false;
        }
        return true;
    }

    displayCurrent() {
        this.ui.container.classList.remove('abtest-hidden');
        document.body.append(this.ui.container);
        setTimeout(() => {
            this.ui.container.classList.remove('abtest-will-hide');
            this.updateColelctionDrawer();
        }, 300);
    }

    hideCurrent() {
        if (this.ui.container.classList.contains('abtest-hidden')) {
            return;
        }
        this.ui.container.classList.add('abtest-will-hide');
        setTimeout(() => {
            this.ui.container.classList.add('abtest-hidden');
            this.updateColelctionDrawer();
            this.ui.container.remove();
        }, 300);
        this.api.v1.model.bindings.unbind(this.model, 'state.deleted', this.modelDeleter);
    }

    prepareVariants() {
        if (!this.collection) {
            return;
        }
        for (const variant of this.collection.getVariants()) {
            this.prepareVariant(variant);
        }
    }

    async ensureCollection() {
        this.toggleBusyState(true);
        if (!this.collection) {
            this.collection = await this.getCollection(this.instanceOfId).catch((error) => {});
            if (!this.collection) {
                Sys.logger.debug(`[TestManagerBase] Will create new collection collection. Reference-id: ${ this.instanceOfId }`);
                this.collection = await this.api.v1.abtest.collection.new({ referenceId: this.instanceOfId, type: this.getType(), pageId: this.api.v1.model.query.getRootModel().get('id') });
            } else {
                Sys.logger.debug(`[TestManagerBase] Found collection. ID: ${ this.collection.getId() }`);
                this.prepareVariants();
                // Make sure the collection holds current page ID (added December 2024)
                if (!this.collection.pageId) {
                    this.collection.pageId = this.api.v1.model.query.getRootModel().get('id');
                    this.save();
                }
            }
        }
        if (!this.test && this.ui.displayTestData) {
            this.test = new _AbTest_js__WEBPACK_IMPORTED_MODULE_1__.AbTest({ placeId: this.instanceOfId, url: this.getFrontUrl(), testMethod: this.default_test_method });
            this.testInstanceCreated();
            if (this.collection.test_id) {
                Sys.logger.debug(`[TestManagerBase] Found A/B test. ID: ${ this.collection.test_id }`);
                const test_data = await this.api.v1.abtest.test.get(this.collection.test_id);
                if (!test_data.success) {
                    this.showNoValidTestProviderDialog(test_data.message, 'Error: Cannot load A/B test from Kilkaya');
                }
                this.test.updateTestData(test_data.result);
                this.updateTestUI();
            }
        }
        return this.collection;
    }

    getFrontUrl() {
        const domain = this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url');
        return domain + this.api.v1.model.query.getRootModel().get('fields.published_url').replace('/index', '/');
    }

    toggleBusyState(on, model = this.model) {
        for (const view of this.api.v1.view.getViews(model)) {
            if (on) {
                view.getMarkup().classList.add('lab-busy');
            } else {
                view.getMarkup().classList.remove('lab-busy');
            }
        }
    }

    // Default duration is 12 hours
    setDefaultTestDuration(ignoreIfExist = false) {
        if (ignoreIfExist && this.test.start && this.test.end) {
            return;
        }
        const date = new Date().getTime() + (new Date().getTimezoneOffset());
        this.test.start = new Date(date).toISOString();
        this.test.end = new Date(date + (60000 * 60 * 12)).toISOString();
        this.updateTestUI();
    }

    setDefaultTestValues() {
        this.test.testMethod = this.default_test_method;
        this.test.published = true;
        this.setDefaultTestDuration(true);
    }

    addTestMethodSelector() {
        const el = document.createElement('select');
        for (const testMethod of _AbTest_js__WEBPACK_IMPORTED_MODULE_1__.AbTest.getTestMethods()) {
            const selected = ((this.test && this.test.testMethod === testMethod.key) || testMethod.key === this.default_test_method) ? 'selected' : '';
            el.innerHTML += `<option value="${ testMethod.key }" ${ selected }>${ testMethod.description }</option>`;
        }
        this.ui.container.querySelector('.test-test-method').appendChild(el);
        el.addEventListener('change', (event) => {
            this.getEstimate();
        });
        return el;
    }

    resetAbTest() {
        this.api.v1.ui.modal.dialog({
            container: {
                state: {
                    warning: true
                }
            },
            content: {
                title: 'Reset A/B test results?',
                description: 'Resetting the A/B test results clears out any settings for the existing A/B test, but keeps your variations. This cannot be undone.'
            },
            footer: {
                buttons: [
                    {
                        type: 'button',
                        highlight: true,
                        id: 'ab_cancelBtn',
                        value: 'Cancel'
                    },
                    {
                        type: 'submit',
                        id: 'ab_resetBtn',
                        value: 'Reset'
                    }
                ]
            },
            eventHandlers: [{
                selector: '#ab_cancelBtn',
                callback: (modal, event) => {
                    modal.close();
                }
            }, {
                selector: '#ab_resetBtn',
                callback: async(modal, event) => {
                    const deleted = this.deleteTest();
                    if (deleted) {
                        this.doResetTest();
                        this.save();
                    }
                    modal.close();
                }
            }]
        });

    }

    doResetTest() {
        this.test = new _AbTest_js__WEBPACK_IMPORTED_MODULE_1__.AbTest({ placeId: this.instanceOfId, url: this.getFrontUrl() });
        this.testInstanceCreated();
        this.collection.test_id = null;
        this.collection.setHasActiveTest(false);
        this.resetView();
    }

    testInstanceCreated() {
        if (this.ui.displayTestData) {
            this.updateTestUI();
        }
    }

    async showNoValidTestProviderDialog(message, title) {
        const ab_settings = await this.api.v1.abtest.settings.get();
        this.api.v1.ui.modal.dialog({
            container: {
                state: {
                    warning: true
                }
            },
            content: {
                title: title || 'Could not save the A/B test',
                description: `${ message ? `Message: ${ message }<br><br>` : '' }Note: The A/B testing functionality must be enabled with your A/B test provider.<br>
If this issue persists, contact your A/B test provider (${ ab_settings.provider }) and verify that the functionality is enabled and correctly configured for your account (${ ab_settings.customer }). If so, please contact Labrador CMS at support@labradorcms.com.`
            },
            footer: {
                buttons: [
                    {
                        type: 'button',
                        highlight: true,
                        id: 'ab_cancelBtn',
                        value: 'Cancel'
                    },
                    {
                        type: 'submit',
                        id: 'ab_okBtn',
                        value: 'OK'
                    }
                ]
            },
            eventHandlers: [{
                selector: '#ab_cancelBtn',
                callback: (modal, event) => {
                    modal.close();
                }
            }, {
                selector: '#ab_okBtn',
                callback: async(modal, event) => {
                    modal.close();
                }
            }]
        });
    }

    saveOrUpdateTest(skipSave = false) {
        return new Promise((resolve, reject) => {
            if (!this.instanceOfId) { resolve(); return; }
            this.ensureCollection().then((collection) => {
                if (!this.test || !this.test.shouldSave()) {
                    resolve();
                    return;
                }

                // In cases where variants are created and later on the original is resized, we need to update width on all variants.
                const model = this.getOriginalModel();
                if (model) {
                    for (const variant of collection.getVariants()) {
                        variant.data.width = model.getRaw('width');
                    }
                }

                const promises = [];
                if (this.test.id) {
                    promises.push(this.api.v1.abtest.test.update(this.test.id, this.test.serialize(this.preparedVariants)));
                } else {
                    promises.push(
                        this.api.v1.abtest.test.create(
                            this.test.serialize(
                                this.preparedVariants,
                                this.model.get('fields.title'),
                                this.model.get('fields.published_url')
                            )
                        )
                    );
                }

                collection.setHasActiveTest(true);

                Promise.all(promises)
                    .then((results) => {
                        if (results[0].success === false) {
                            this.showNoValidTestProviderDialog(results[0] && results[0].message ? results[0].message : '');
                            reject(new Error(`[TestManager] Error saving A/B test: ${ results[0] && results[0].message ? results[0].message : '' } Collection ID: ${ this.collection.getId() }`));
                        } else {
                            this.test.updateTestData(results[0].result);
                            this.collection.test_id = this.test.id;
                            if (!skipSave) {
                                this.api.v1.abtest.collection.save(this.collection);
                            }
                            resolve();
                        }
                    }).then(resolve).catch((error) => {
                        console.error(`[TestManager] Error updating A/B test: `, error);
                        reject(error);
                    });
            });
        });
    }

    warnActiveTest({ title, description } = {}) {
        this.api.v1.ui.modal.dialog({
            container: {
                state: {
                    warning: true
                }
            },
            content: {
                title,
                description
            },
            footer: {
                buttons: [
                    {
                        type: 'button',
                        highlight: true,
                        id: 'ab_cancelBtn',
                        value: 'OK'
                    }
                ]
            },
            eventHandlers: [{
                selector: '#ab_cancelBtn',
                callback: (modal, event) => {
                    modal.close();
                }
            }]
        });
    }

    async copyVariant() {
        if (this.test && this.test.isRunning()) {
            this.warnActiveTest({
                title: 'Cannot copy variant',
                description: 'You cannot copy a variant while the A/B test is running. Please stop the A/B test before copying.'
            });
            return;
        }

        if (!this.currentVariant) {
            this.createVariant();
            return;
        }
        const obj = this.preparedVariants.get(this.currentVariant);
        this.collection.add(this.getModelData(obj.model, true), this.currentVariant.hasPartialData());
        this.save();
        this.displayVariant(this.collection.getVariants().length - 1);
    }

    copyVariantToOriginal() {
        if (!this.currentVariant) {
            return;
        }
        const obj = this.preparedVariants.get(this.currentVariant);
        const original = this.getOriginalModel();
        const modelData = this.getModelData(obj.model, true);
        let needCollectionUpdate = false;

        // Check if this is an "empty" original. If so, we need to remove the instance_of from the copied variant.
        if (!original.get('instance_of')) {
            this.api.v1.util.object.delete('contentdata.instance_of', modelData);
            needCollectionUpdate = true;
        }
        const newModel = this.api.v1.model.create.internal(modelData, null, true, false);
        if (needCollectionUpdate) {
            const listener = (model, path, value) => {
                this.api.v1.model.bindings.unbind(newModel, 'id', listener);
                obj.variant.referenceId = value;
                this.collection.referenceId = value;
                this.save();
                this.end();
                this.api.v1.app.save();
                setTimeout(() => {
                    this.api.v1.model.highlight.message(newModel, `Original is replaced by selected variant.`);
                }, 500);
            };
            this.api.v1.model.bindings.bind(newModel, 'id', listener);
            this.api.v1.model.replace(original, newModel);
            this.api.v1.model.highlight.message(obj.model, `Replacing original with selected variant ...`);
        } else {
            this.save();
            this.end();
            this.api.v1.model.replace(original, newModel);
            setTimeout(() => {
                this.api.v1.model.highlight.message(newModel, `Original is replaced by selected variant.`);
            }, 500);
        }
    }

    async createVariant() {
        if (!this.instanceOfId) { return; }
        const collection = await this.ensureCollection();
        const variant_data = this.getModelData(this.getOriginalModel(), true);
        if (variant_data.children.length === 0) {
            const image = await this.getModelImageData();
            if (image) {
                variant_data.children.push(image);
            }
        }
        collection.add(variant_data, this.usePartialData);
        this.save();
        this.displayVariant(collection.getVariants().length - 1);
    }

    deleteVariant(variant) {
        this.collection.deleteVariant(variant);
        this.preparedVariants.delete(variant);
        this.getEstimate();
    }

    async showDefaultFields() {
        return true;
    }

    async displayVariant(index) {
        if (!this.instanceOfId) {
            this.updatePublishStatus();
            return;
        }

        this.hideExisting();
        this.displayCurrent();

        this.api.v1.model.bindings.bind(this.model, 'state.deleted', this.modelDeleter);

        const collection = await this.ensureCollection();
        this.toggleBusyState(false);
        if (index !== false && collection.getVariants().length) {
            const variant = collection.getVariantByIndex(index);
            if (variant) {
                this.removeFromEditor(this.model);
                this.prepareVariant(variant);
            }
        } else {
            await this.showDefaultFields();
        }
        this.updatePublishStatus();
    }

    /**
     * @param referenceId
     * @return {Promise<Collection>}
     */
    getCollection(referenceId, reuse = false) {
        return new Promise((resolve, reject) => {
            if (reuse && this.collection && this.collection.referenceId === referenceId) {
                resolve(this.collection);
                return;
            }
            this.api.v1.abtest.collection.list(referenceId).then((data) => {
                if (data && data.result && data.result.length) {
                    this.api.v1.abtest.collection.load(data.result[0]).then((collection) => {
                        resolve(collection);
                    });
                } else {
                    reject(new Error(`No collection for reference id "${ referenceId }".`));
                }
            }).catch((error) => reject(error));
        });
    }

    removeFromEditor(model) {
        this.api.v1.model.removeFromEditor(model);
    }

    resetRemoveFromEditor(model) {
        this.api.v1.model.resetRemoveFromEditor(model);
    }

    getVariantData(variant, defaultData = {}) {
        const variantData = this.mergeData(JSON.parse(JSON.stringify(variant.getData())), defaultData);
        if (variant.hasPartialData() && this.getOriginalModel()) {
            if (variantData.metadata && variantData.metadata.width && !variantData.metadata.width.length) {
                delete variantData.metadata.width;
            }
            const modelData = this.getModelData(this.getOriginalModel());
            const data = this.api.v1.util.object.merge(modelData, variantData);
            variant.setHasPartialData(false);
            variant.setData(data);
            return this.api.v1.util.object.merge(data, defaultData);
        }
        return variantData;
    }

    mergeData(data, additions) {
        const result = this.api.v1.util.object.merge(data, additions);
        result.children = [];
        if (data.children) {
            for (const child of data.children) {
                result.children.push(this.mergeData(child, additions));
            }
        }
        return result;
    }

    preloadVariant(variant, addToController = true, setupEditables = true) {
        const model = this.api.v1.model.create.internal(this.getVariantData(variant, { state: { isNonPersistent: true, draggableDisabled: true } }), null, true, false);
        model.set('fields.referenceGuid', this.model.getGuid(), {
            save: false,
            notify: false,
            undoable: false
        });

        this.api.v1.model.setEditNonPersistentState(model, true);
        this.setWidth(model);
        if (addToController) {
            this.addToController(model);
        }
        this.preparedVariants.set(variant, {
            variant,
            model,
            navigation: null,
            editables: (setupEditables) ? this.setupEditables(model) : null
        });
        this.getEstimate();
        return model;
    }

    prepareVariant(variant) {
        if (this.currentVariant === variant) {
            return;
        }
        if (this.currentVariant) {
            const current = this.preparedVariants.get(this.currentVariant);
            if (current) {
                this.removeFromEditor(current.model);
            }
        }
        this.currentVariant = variant;
        if (this.preparedVariants.has(variant)) {
            const current = this.preparedVariants.get(this.currentVariant);
            if (current) {
                this.resetRemoveFromEditor(current.model);
            }
            this.updateUI(this.preparedVariants.get(variant));
            setTimeout(() => {
                this.api.v1.model.highlight.message(current.model, `A/B variant "${ variant.getName() }"`);
            }, 300);
            return;
        }

        const model = this.preloadVariant(variant);
        this.api.v1.model.bindings.bind(model, 'state.deleted', this.deleter);
        for (const m of this.api.v1.model.query.getModelsAsArray([model])) {
            this.registerListener(m, variant, model);
        }
        // In case user do not modify data: Make sure variant holds sufficient data
        variant.update(this.getModelData(model));

        this.updateUI(this.preparedVariants.get(variant));
    }

    setupEditables() {
        return {};
    }

    setupImagePlaceholder() {
        return {};
    }

    addToController(model) {
        this.api.v1.model.addSibling(this.model, model, false, false);
    }

    // Remove variant, display original
    resetView() {
        const current = this.currentVariant ? this.preparedVariants.get(this.currentVariant) : null;
        this.currentVariant = null;
        if (this.getOriginalModel()) {
            this.api.v1.model.resetRemoveFromEditor(this.model);
        }
        if (current) {
            this.api.v1.model.removeFromEditor(current.model);
            this.updateUI();
            setTimeout(() => {
                this.api.v1.model.highlight.message(this.model, `Original ${ this.model.getType() }`);
            }, 300);
        }
    }

    updateUI(variantObject) {
        if (variantObject && !variantObject.navigation) {
            const btn = document.createElement('span');
            btn.classList.add('lab-btn', 'lab-ellipsis');
            if (variantObject.variant.isDisabled()) {
                btn.classList.add('abtest-disabled');
            }
            btn.innerHTML = variantObject.variant.getName();
            btn.addEventListener('click', (event) => {
                this.removeFromEditor(this.model);
                this.prepareVariant(variantObject.variant);
                this.api.v1.model.highlight.default(variantObject.model, { scroll: true, approximateScroll: true });
                // this.updateUI(variantObject);
            });
            this.ui.variants.appendChild(btn);
            variantObject.navigation = btn;
        }

        for (const el of [...this.ui.variants.children]) {
            el.classList.remove('lab-selected');
            if (variantObject && el === variantObject.navigation) {
                el.classList.add('lab-selected');
            }
        }
        if (!variantObject) {
            this.ui.variants.querySelector('.original').classList.add('lab-selected');
        }

        if (this.test && this.ui.displayTestData) {
            this.updateTestUI();
        }

        if (this.ui.notesField) {
            this.ui.notesField.value = variantObject ? variantObject.variant.getNotes() : '';
            this.ui.notesField.disabled = !variantObject;
        }
        if (variantObject) {
            this.ui.disableBtn.checked = variantObject.variant.isDisabled();
            this.ui.disableBtn.disabled = false;
            this.ui.disableBtn.parentElement.classList.remove('lab-disabled');
            if (this.ui.copyToOriginalBtn) { this.ui.copyToOriginalBtn.disabled = false; }
        } else {
            this.ui.disableBtn.checked = false;
            this.ui.disableBtn.disabled = true;
            this.ui.disableBtn.parentElement.classList.add('lab-disabled');
            if (this.ui.copyToOriginalBtn) { this.ui.copyToOriginalBtn.disabled = true; }
        }

        if (this.ui.editablesContainer) {
            this.ui.editablesContainerImage.innerHTML = '';
            this.ui.editablesContainerText.innerHTML = '';
            if (variantObject) {
                this.ui.container.querySelector('.abtest-helpertext-title').classList.remove('lab-hidden');
                this.ui.editablesContainerImage.appendChild(variantObject.editables.image);
                this.ui.editablesContainerText.appendChild(variantObject.editables.kicker);
                this.ui.editablesContainerText.appendChild(variantObject.editables.title);
                this.ui.editablesContainerText.appendChild(variantObject.editables.subtitle);
            } else {
                this.ui.container.querySelector('.abtest-helpertext-title').classList.add('lab-hidden');
                const elements = this.setupEditables(this.model, true);
                this.setupImagePlaceholder();
                this.ui.editablesContainerText.appendChild(elements.kicker);
                this.ui.editablesContainerText.appendChild(elements.title);
                this.ui.editablesContainerText.appendChild(elements.subtitle);
            }
        }
    }

    removeTestBtn() {
        for (const viewport of this.api.v1.viewport.getActive()) {
            const view = this.api.v1.view.getView(this.model, viewport);
            const el = view.getExtraElement('abElement');
            if (el) {
                view.unsetExtraElement('abElement');
                el.remove();
            }
        }
    }

    updateTestUI() {
        if (this.test && this.test.id) {
            for (const viewport of this.api.v1.viewport.getActive()) {
                const view = this.api.v1.view.getView(this.model, viewport);
                if (!view.getExtraElement('abElement')) {
                    const el = view.setExtraElement('abElement', this.getCustomIcon(this.model, view, this));
                    view.getMarkup().appendChild(el);
                }
            }
        } else {
            this.removeTestBtn();
        }
        const status_field = this.ui.container.querySelector('.test-status');
        let status_text = this.test.status;
        const is_completed = this.test.isFinished();
        if (is_completed && this.test.results.statistics) {
            const num_views = this.test.results.statistics.reduce((cc, item) => cc + item.views, 0);
            const num_clicks = this.test.results.statistics.reduce((cc, item) => cc + item.clicks, 0);
            status_text += ` (${ num_views } views, ${ num_clicks } clicks)`;
            this.stats = this.prepareNumbers(this.test.results);
            this.statistics = this.prepareStatistics(this.stats);
        }
        status_field.innerHTML = status_text;
        this.ui.testMethodSelector.value = this.test.testMethod;
        if (is_completed) {
            this.ui.testMethodSelector.setAttribute('disabled', true);
        }
        this.ui.testStartField.value = this.test.correct_start.slice(0, 19);
        this.ui.testEndField.value = this.test.correct_end.slice(0, 19);
        this.ui.minVariantDifferenceField.value = this.test.methodoptions.minVariantDifference;
        this.ui.minVariantDifferenceField.setAttribute('data-value', this.test.methodoptions.minVariantDifference);
        this.ui.testIsPublishedField.checked = this.test.published;
        this.ui.minVariantDifferenceField.disabled = !!this.test.published;
        this.ui.resetTestButton.disabled = (this.collection.test_id === null && this.test && this.test.id);
        this.ui.startTestNowButton.disabled = (this.test && this.test.isFinished()) || this.preparedVariants.size === 0;
        this.ui.endTestNowButton.disabled = !this.test || (this.test && !this.test.isRunning());
        if (this.ui.navTestResultsContainer) {
            this.ui.navTestResultsContainer.disabled = !(this.test && this.test.results.statistics);
            if (!this.ui.navTestResultsContainer.disabled) {
                this.displayStatistics();
            }
        }
    }

    prepareNumbers(data) {
        const result = { ...data };
        const stats = [];
        if (!data.statistics) {
            return stats;
        }
        const max = {
            views: 0,
            clicks: 0
        };
        for (const item of data.statistics) {
            if (item.views > max.views) {
                max.views = item.views;
            }
            if (item.clicks > max.clicks) {
                max.clicks = item.clicks;
            }
        }
        result.max = max;
        for (const item of data.statistics) {
            const copy = { ...item };
            copy.scoreNice = Math.round(item.score);
            copy.viewsNice = this.api.v1.util.string.niceNumber(item.views);
            copy.clicksNice = this.api.v1.util.string.niceNumber(item.clicks);
            copy.viewsPercent = Math.round((item.views / max.views) * 100);
            copy.clicksPercent = Math.round((item.clicks / max.clicks) * 100);
            stats.push(copy);
        }
        result.statistics = stats;
        return result;
    }

    prepareStatistics(data) {
        const map = this.sortVariantsByTestId();
        const result = [];
        if (!data.statistics) {
            return result;
        }
        let maxScore = 0;
        let maxScoreIndex = null;
        for (const stats of data.statistics) {
            const variantObject = map[stats.variant_id];
            result.push({
                ...stats,
                ...variantObject
            });
            if (stats.score > maxScore) {
                maxScore = stats.score;
                maxScoreIndex = data.statistics.indexOf(stats);
            }
            if (variantObject && variantObject.obj && variantObject.obj.navigation) {
                variantObject.obj.navigation.setAttribute('data-test-views', stats.views);
                variantObject.obj.navigation.setAttribute('data-test-clicks', stats.clicks);
                variantObject.obj.navigation.setAttribute('data-test-score', Math.round(stats.score));
            }
        }
        if (maxScoreIndex !== null && result[maxScoreIndex].obj.navigation) {
            result[maxScoreIndex].obj.navigation.setAttribute('data-test-winner', '1');
        }
        result.sort((a, b) => a.score - b.score);
        return result.reverse();
    }

    displayStatistics() {
        const data = this.prepareStatistics(this.stats);
        let no_data_text = 'Test results and data will show up here as soon as the test is completed';
        if (this.stats.status === 'finish') {
            no_data_text = 'Test results are unavailable because no data (or not enough data) could be gathered';
        }
        const markup = this.api.v1.util.dom.renderTemplate(_templates_js__WEBPACK_IMPORTED_MODULE_0__["default"].result, {
            data,
            no_data_text,
            stats: this.stats,
            article: {
                id: this.model.get('instance_of') || this.model.get('id'),
                title: this.model.get('fields.title')
            }
        }, false);
        this.ui.testResultsContainer.querySelector('.results-container').innerHTML = markup;
    }

    sortVariantsByTestId() {
        const result = {};
        if (!this.test || !this.test.variants) {
            return result;
        }
        for (const variant of this.test.variants) {
            for (const item of variant.data) {
                if (item.name === 'identifier') {
                    result[variant.id] = {
                        identifier: item.value,
                        name: variant.name
                    };
                    const variantItem = this.getPreparedVariantByGuid(item.value);
                    if (variantItem) {
                        result[variant.id].obj = variantItem;
                    } else if (item.value === 'original') {
                        result[variant.id].obj = {
                            model: this.getOriginalModel(),
                            navigation: this.ui.originalBtn
                        };
                    }
                }
            }
        }
        return result;
    }

    getPreparedVariantByGuid(guid) {
        for (const [variant, item] of this.preparedVariants) {
            if (variant.getGuid() === guid) {
                return item;
            }
        }
        return null;
    }

    deleteBinding(m, path, value) {
        for (const [theVariant, obj] of this.preparedVariants) {
            if (obj.model === m) {
                const index = this.collection.getVariantIndex(theVariant);
                this.preparedVariants.get(theVariant).navigation.remove();
                this.deleteVariant(theVariant);
                if (this.currentVariant === theVariant) {
                    this.currentVariant = null;
                }
                const i = this.collection.getVariants().length > index ? index : index - 1;
                if (i > -1) {
                    this.displayVariant(i);
                } else {
                    this.resetView();
                }
                this.unregisterListener(m);
                this.save();
            }
        }
    }

    deleteModelBinding(m, path, value) {
        this.hideCurrent();
    }

    registerListener(model, variant, targetModel) {
        this.listeners.set(model, (m, path, value) => {
            if (['gridWidth', 'absoluteGridWidth', 'state.deleted'].includes(path)) {
                return;
            }
            // Data modified. Update variant
            variant.update(this.getModelData(targetModel));
            this.save();
        });
        this.api.v1.model.bindings.bindAll(model, this.listeners.get(model));
    }

    unregisterListener(model) {
        for (const m of this.api.v1.model.query.getModelsAsArray([model])) {
            if (this.listeners.has(m)) {
                this.api.v1.model.bindings.unbindAll(m, this.listeners.get(m));
                this.listeners.delete(m);
            }
        }
    }

    validateVariants(variantObjects) {
        for (const [variant, obj] of variantObjects) {
            if (!obj.model.get('fields.title')) {
                return false;
            }
        }
        return true;
    }

    save() {
        window.clearTimeout(this.timeoutId);
        this.timeoutId = window.setTimeout(() => {
            // Update variants in collection in case they are modified before handled by this class.
            // Example: Data is set when replacing an image in the variant.
            for (const [variant, obj] of this.preparedVariants) {
                variant.update(this.getModelData(obj.model));
            }
            this.api.v1.abtest.collection.save(this.collection)
                .then(() => {
                    this.updatePublishStatus();
                    this.ui.container.classList.remove('lab-busy');
                    this.toggleBusyState(false);
                });
        }, 500);
    }

    publish() {
        if (this.collection) {
            if (!this.validateVariants(this.preparedVariants)) {
                console.warn('[TestManager] Validation failed for variants');
                this.api.v1.ui.modal.dialog({
                    container: {
                        state: {
                            error: true
                        }
                    },
                    content: {
                        title: 'Validation failed',
                        description: 'All variants must have a title. The test is not published. Please add a title to all variants and try again.'
                    },
                    noArchive: true,
                    footer: {
                        buttons: [
                            {
                                type: 'submit',
                                value: 'OK'
                            }
                        ]
                    }
                });
                return;
            }
            this.toggleBusyState(true);
            this.ui.container.classList.add('lab-busy');

            // Update pageId on the collection in case it is created on the original article.
            this.collection.pageId = this.api.v1.model.query.getRootModel().get('id');

            this.saveOrUpdateTest()
                .then(() => this.api.v1.abtest.collection.publish(this.collection))
                .then(() => {
                    this.updatePublishStatus();
                    this.api.v1.app.publish();
                    this.ui.container.classList.remove('lab-busy');
                    this.toggleBusyState(false);
                    let currentModel = this.model;
                    if (this.currentVariant) {
                        currentModel = this.preparedVariants.get(this.currentVariant).model;
                    }
                    if (currentModel) {
                        this.api.v1.model.highlight.message(currentModel, `AB test is published`);
                    }
                    this.updateTestUI();
                }).catch((error) => {
                    console.error(`[TestManager] Error publishing collection: `, error);
                    const err = new Error(error.toString(), { cause: error });
                    lab_api.v1.app.logViewError(err, 'entry');
                    this.ui.container.classList.remove('lab-busy');
                    this.toggleBusyState(false);
                });
        }
    }

    deleteCollection() {
        if (!this.collection || !this.collection.isPersistent()) {
            return;
        }

        this.api.v1.ui.modal.dialog({
            container: {
                state: {
                    warning: true
                }
            },
            content: {
                title: 'Delete test and variants of this article?',
                description: 'You cannot undo this.'
            },
            footer: {
                buttons: [
                    {
                        type: 'button',
                        highlight: true,
                        id: 'ab_cancelBtn',
                        value: 'Cancel'
                    },
                    {
                        type: 'submit',
                        id: 'ab_deleteBtn',
                        value: 'Delete'
                    }
                ]
            },
            eventHandlers: [{
                selector: '#ab_cancelBtn',
                callback: (modal, event) => {
                    modal.close();
                }
            }, {
                selector: '#ab_deleteBtn',
                callback: (modal, event) => {
                    this.end();
                    this.deleteTest();
                    this.removeTestBtn();
                    this.api.v1.abtest.collection.delete(this.collection).then(() => {
                        console.log('[TestManager] Collection persistently deleted');
                    }).catch((error) => {
                        console.error(`[TestManager] Error deleting collection: `, error);
                    });
                }
            }]
        });
    }

    deleteTest() {
        if (this.test && this.test.id) {
            // First, unpublish the test, then delete it.
            this.unpublishTest().then(() => {
                this.api.v1.abtest.test.delete(this.test.id).then((result) => {
                    this.doResetTest();
                    this.save();
                    console.log(`[TestManager] Test deleted`);
                }).catch((error) => {
                    console.error(`[TestManager] Error deleting test: `, error);
                });
                this.test = null;
            }).catch((error) => {
                console.error(`[TestManager] Error unpublishing test: `, error);
            });
        } else {
            console.warn('[TestManager] No test to delete ...');
        }
    }

    // (Promise) Unpublish current test.
    unpublishTest() {
        return new Promise((resolve, reject) => {
            if (this.test && this.test.id) {
                this.test.published = false;
                this.saveOrUpdateTest(true).then(() => {
                    if (this.ui.displayTestData) {
                        this.updateTestUI();
                    }
                    resolve();
                }).catch(reject);
                return;
            }
            reject(new Error('No test to unpublish'));
        });
    }

    getEstimate() {
        if (!this.ui.displayTestData) {
            return;
        }
        window.clearTimeout(this.estimateId);
        this.estimateId = window.setTimeout(() => {
            this.ui.getEstimateValue.classList.add('lab-content-busy');
            const testData = {
                start: this.ui.testStartField.value || new Date(),
                end: this.ui.testEndField.value || new Date(new Date().getTime() + (60 * 60 * 24 * 1000)),
                placeId: this.instanceOfId,
                url: this.getFrontUrl(),
                testMethod: this.ui.testMethodSelector.value
            };
            const test = new _AbTest_js__WEBPACK_IMPORTED_MODULE_1__.AbTest(testData);
            test.updateTestData({
                methodoptions: {
                    minVariantDifference: this.ui.minVariantDifferenceField.value
                }
            });
            this.api.v1.abtest.test.estimate(test.serialize(this.preparedVariants)).then((data) => {
                this.ui.getEstimateValue.innerHTML = data.result || 'Cannot estimate';
                if (this.ui.displayTestData) {
                    this.updateTestUI();
                }
                this.ui.getEstimateValue.classList.remove('lab-content-busy');
            }).catch((error) => {
                console.error(`[TestManager] Error estimating test: `, error);
                this.ui.getEstimateValue.classList.remove('lab-content-busy');
            });
        }, 400);
    }

    updatePublishStatus() {
        if (!this.collection) {
            this.ui.publish.button.setAttribute('disabled', 'disabled');
            return;
        }
        if (this.collection.isPersistent()) {
            this.ui.publish.button.removeAttribute('disabled');
            this.ui.deleteBtn.removeAttribute('disabled');
            if (this.ui.displayTestData) {
                if (this.collection.test_id) {
                    this.ui.resetTestButton.removeAttribute('disabled');
                } else {
                    this.ui.resetTestButton.setAttribute('disabled', 'disabled');
                }
            }
        } else {
            this.ui.publish.button.setAttribute('disabled', 'disabled');
            this.ui.deleteBtn.setAttribute('disabled', 'disabled');
            if (this.ui.displayTestData) {
                this.ui.resetTestButton.setAttribute('disabled', 'disabled');
            }
        }
        const isModified = this.collection.getModified() !== this.collection.getPublished();
        if (isModified) {
            this.ui.publish.button.classList.add('abtest-modified');
        } else {
            this.ui.publish.button.classList.remove('abtest-modified');
        }
    }

    end() {
        this.hideCurrent();
        this.resetView();
        for (const [, value] of this.preparedVariants) {
            this.api.v1.model.bindings.unbind(value.model, 'state.deleted', this.deleter);
            this.unregisterListener(value.model);
        }
        for (const [key, value] of this.preparedVariants) {
            this.api.v1.model.delete(value.model, true, true);
            this.preparedVariants.delete(key);
        }
        this.model.set('state.draggableDisabled', false, { notify: false, registerModified: false });
    }

}


/***/ }),

/***/ "./modules/plugins/abtest/TestManagerFront.js":
/*!****************************************************!*\
  !*** ./modules/plugins/abtest/TestManagerFront.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TestManagerFront": () => (/* binding */ TestManagerFront)
/* harmony export */ });
/* harmony import */ var _TestManagerBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TestManagerBase.js */ "./modules/plugins/abtest/TestManagerBase.js");
/* harmony import */ var _AbTest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbTest.js */ "./modules/plugins/abtest/AbTest.js");



class TestManagerFront extends _TestManagerBase_js__WEBPACK_IMPORTED_MODULE_0__.TestManagerBase {

    setupUI() {
        super.setupUI();
        this.displayCurrent();
    }

    /**
     * Get the original model to create variants from
     * @returns {LabModel}
     */
    getOriginalModel() {
        return this.model;
    }

    /**
     * @param model
     * @param {HTMLElement} el
     * @return {Promise<unknown>}
     */
    checkRunningAbTestState(model, el, reusableManager) {
        return new Promise((resolve, reject) => {
            const manager = reusableManager || new TestManagerFront(this.api, model);
            manager.getCollection(manager.instanceOfId, true)
                .then((collection) => this.api.v1.abtest.test.get(collection.test_id))
                .then((test_data) => {
                    const test = new _AbTest_js__WEBPACK_IMPORTED_MODULE_1__.AbTest();
                    test.updateTestData(test_data.result);
                    if (test.isRunning()) {
                        el.classList.add('is_active');
                        el.setAttribute('title', 'This article is currently running an A/B test');
                    } else if (test.isFinished()) {
                        el.classList.add('is_completed');
                        el.setAttribute('title', 'The A/B test for this article is completed');
                    }

                    resolve();
                })
                .catch(reject);
        });
    }

    getCustomIcon(model, view, manager) {
        const el = document.createElement('span');
        el.classList.add('labicon-ab_version', 'ab_test_running_indicator', 'indicator-top-right');
        el.setAttribute('title', 'This article has an active A/B test');
        el.addEventListener('click', () => {
            if (this.api.v1.ns.get('abManager')) {
                this.api.v1.ns.get('abManager').end();
            }
            this.setup({ displayTestData: true });
            this.prepareVariants();
            this.displayVariant(0);
            this.api.v1.ns.set('abManager', this);
        });

        this.checkRunningAbTestState(model, el, manager);

        return el;
    }

}


/***/ }),

/***/ "./modules/plugins/abtest/index.js":
/*!*****************************************!*\
  !*** ./modules/plugins/abtest/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties.js */ "./modules/plugins/abtest/properties.js");
/* harmony import */ var _PublishUpdater_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PublishUpdater.js */ "./modules/plugins/abtest/PublishUpdater.js");
/* harmony import */ var _TestManagerArticle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TestManagerArticle.js */ "./modules/plugins/abtest/TestManagerArticle.js");
/* harmony import */ var _TestManagerFront_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TestManagerFront.js */ "./modules/plugins/abtest/TestManagerFront.js");
/* harmony import */ var _AbTest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AbTest.js */ "./modules/plugins/abtest/AbTest.js");






/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'AB Test',
    description: 'Handle variants of article teasers',
    version: '1.0.1',
    predicate: (api) => api.v1.config.get('plugins.abtest.enable'),
    entry: class {

        onReady(api) {
            this.api = api;
            this.needs_rerender = [];
            const rootModel = api.v1.model.query.getRootModel();
            // For articles: Add a button to the drawer. When clicked: Start TestManagerArticle.
            if (rootModel.getType() === 'page_article') {
                let currentManager = null;
                const navContainer = document.querySelector('.lab-collection-drawer ul');
                const btn = document.createElement('li');
                btn.setAttribute('data-collection', 'no-collection');
                btn.innerHTML = `
                    <div class="lab-lbl"><span class="labicon-ab_version" style="margin-top: -2px; display: block;"></span></div>
                    <div class="lab-desc">A/B Test</div>
                `;
                btn.addEventListener('click', (event) => {
                    if (currentManager) {
                        currentManager.hideCurrent();
                        currentManager.end();
                        return;
                    }
                    const manager = new _TestManagerArticle_js__WEBPACK_IMPORTED_MODULE_2__.TestManagerArticle(api, rootModel, () => {
                        currentManager = null;
                    });
                    if (manager.setup()) {
                        manager.displayVariant(0);
                        currentManager = manager;
                    }
                });
                navContainer.appendChild(btn);
            } else {
                let publishUpdater;
                api.v1.view.on('ready', async() => {
                    this.checkFrontRunningAbTests(api);
                });
                api.v1.app.on('published', (params) => {
                    for (const model of this.needs_rerender) {
                        const instanceOfId = model.get('instance_of') || model.get('id');
                        Sys.logger.debug(`[AbTest] Updating width for model variants: ${ instanceOfId }`);
                        const manager = new _TestManagerFront_js__WEBPACK_IMPORTED_MODULE_3__.TestManagerFront(api, model);
                        manager.getCollection(instanceOfId)
                            .then((collection) => {
                                for (const variant of collection.getVariants()) {
                                    variant.data.width = model.getRaw('width');
                                }
                                this.api.v1.abtest.collection.save(collection).then((resp) => {
                                    this.api.v1.abtest.collection.publish(collection);
                                });
                                this.checkFrontRunningAbTests(api);
                            }).catch((error) => {});
                    }
                });
                api.v1.app.on('willPublish', () => {
                    if (!publishUpdater) {
                        publishUpdater = new _PublishUpdater_js__WEBPACK_IMPORTED_MODULE_1__.PublishUpdater(api, api.v1.model.query.getRootModel());
                    }
                    publishUpdater.willPublish();
                });
            }
        }

        /**
         * @param model
         * @param {HTMLElement} el
         * @return {Promise<unknown>}
         */
        checkRunningAbTestState(model, el) {
            return new Promise((resolve, reject) => {
                const manager = new _TestManagerFront_js__WEBPACK_IMPORTED_MODULE_3__.TestManagerFront(this.api, model);
                let collectionObj = null;
                manager.getCollection(manager.instanceOfId)
                    .then((collection) => {
                        collectionObj = collection;
                        return this.api.v1.abtest.test.get(collection.test_id);
                    })
                    .then((test_data) => {
                        const test = new _AbTest_js__WEBPACK_IMPORTED_MODULE_4__.AbTest();
                        test.updateTestData(test_data.result);
                        if (test.isRunning()) {
                            el.classList.add('is_active');
                            el.setAttribute('title', 'This article is currently running an A/B test');
                            if (!collectionObj.hasActiveTest) {
                                collectionObj.setHasActiveTest(true);
                                this.api.v1.abtest.collection.save(collectionObj);
                            }
                        } else if (test.isFinished()) {
                            el.classList.add('is_completed');
                            el.setAttribute('title', 'The A/B test for this article is completed');
                            if (collectionObj.hasActiveTest) {
                                collectionObj.setHasActiveTest(false);
                                this.api.v1.abtest.collection.save(collectionObj);
                            }
                        }

                        resolve();
                    })
                    .catch(reject);
            });
        }

        getCustomIcon(model, view) {
            const el = document.createElement('span');
            el.classList.add('labicon-ab_version', 'ab_test_running_indicator', 'indicator-top-right');
            el.setAttribute('title', 'This article has an associated A/B test');
            el.addEventListener('click', () => {
                if (this.api.v1.ns.get('abManager')) {
                    this.api.v1.ns.get('abManager').end();
                }
                const manager = new _TestManagerFront_js__WEBPACK_IMPORTED_MODULE_3__.TestManagerFront(this.api, model);
                if (manager.setup({ displayTestData: true })) {
                    manager.displayVariant(0);
                    this.api.v1.ns.set('abManager', manager);
                }
            });

            this.checkRunningAbTestState(model, el);

            return el;
        }

        getArticleIds(ids, pageId) {
            return new Promise((resolve, reject) => {
                fetch(`/api/v1/ab_collection?content=full&query=(${ ids.map((id) => `referenceId:${ id }`).join(' OR ') }) AND pageId:${ pageId }`)
                    .then((response) => response.json())
                    .then((json) => {
                        const only_test_results = json.result.filter((result) => typeof result.ab_collection.field.test_id === 'string');
                        const ab_article_ids = only_test_results.map((result) => parseInt(result.ab_collection.field.referenceId, 10));
                        resolve(ab_article_ids);
                    })
                    .catch(reject);
            });
        }

        async checkFrontRunningAbTests(api) {
            try {
                const model = api.v1.model.query.getRootModel();
                const models = api.v1.model.query.getModelsByType('article', [model]).filter((m) => !m.isNonPersistent() && ((m.get('instance_of') || m.get('id')) && m.get('fields.published_url')));
                const articleIds = await this.getArticleIds(models.map((m) => m.get('instance_of') || m.get('id')), model.get('id'));
                Sys.logger.debug('[AbTest] Checking for running tests');
                for (const child of models) {
                    const instance_id = child.get('instance_of') || child.get('id');
                    if (articleIds.includes(instance_id)) {
                        Sys.logger.debug(`[AbTest] Found running test for instance_id: ${ instance_id }`);
                        if (!this.needs_rerender.includes(child)) {
                            this.needs_rerender.push(child);
                            Sys.logger.debug(`[AbTest] Adding ${ instance_id } to re-render list`);
                        }
                        for (const viewport of api.v1.viewport.getActive()) {
                            const view = api.v1.view.getView(child, viewport);
                            if (!view.getExtraElement('abElement')) {
                                const el = view.setExtraElement('abElement', this.getCustomIcon(child, view));
                                view.getMarkup().appendChild(el);
                            }
                        }
                    }
                }
            } catch (error) {
                Sys.logger.debug(`[AbTest] Error checking running tests: ${ error.message }`);
            }
        }

    },
    elements: _properties_js__WEBPACK_IMPORTED_MODULE_0__["default"]
});


/***/ }),

/***/ "./modules/plugins/abtest/properties.js":
/*!**********************************************!*\
  !*** ./modules/plugins/abtest/properties.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    article: {
        properties: {
            contentMenus: {
                default: {
                    items: {
                        settings: {
                            items: {
                                abtests: {
                                    group: 's2',
                                    icon: 'labicon-ab_version',
                                    text: 'Edit A/B-test',
                                    callback: (menuItem, event) => {
                                        if (lab_api.v1.model.query.getRootModel().getType() === 'page_front') {
                                            // Front page
                                            Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./TestManagerFront.js */ "./modules/plugins/abtest/TestManagerFront.js")).then((module) => {
                                                if (lab_api.v1.ns.get('abManager')) {
                                                    lab_api.v1.ns.get('abManager').end();
                                                    lab_api.v1.ns.get('abManager').hideCurrent();
                                                }
                                                const manager = new module.TestManagerFront(lab_api, menuItem.getModel());
                                                if (manager.setup({ displayTestData: true })) {
                                                    manager.displayVariant(0);
                                                    lab_api.v1.ns.set('abManager', manager);
                                                }
                                            }).catch((error) => {
                                                console.error('Error fetching TestManagerFront: ', error);
                                            });
                                        }
                                    },
                                    bindings: [
                                        {
                                            path: 'state.isNonPersistent',
                                            attribute: 'disabled',
                                            valueTransformer: 'toBoolean'
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }
});


/***/ }),

/***/ "./modules/plugins/abtest/templates.js":
/*!*********************************************!*\
  !*** ./modules/plugins/abtest/templates.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    ui: `<div class="lab-content lab-grid abtest-ui-container abtest-will-hide abtest-hidden{{ #displayArticleData }} abtest-article{{ /displayArticleData }}" data-ab-container="{{ id }}">
        <span class="abtest-close-btn labicon-remove" title="Close"></span>
        <ul class="abtest-tabs lab-list lab-grid-large-12">
            <li class="tab-variants-container lab-selected">Variants</li>
            {{ #displayTestData }}
                <li class="tab-tests-container">Settings</li>
                <li class="tab-test-results-container">Test results</li>
            {{ /displayTestData }}
        </ul>

        <div class="lab-formgroup lab-grid-large-{{ sizes.logo }} abtest-logo">
            <h3 class="lab-title labicon-ab_version">
                <strong>A/B testing for {{ type }} #{{ instanceOfId }}</strong>
                <span class="lab-ellipsis">{{{ title }}}</span>
                <a target="_blank" href="{{{ front }}}/a/{{ instanceOfId }}" class="lab-link">View{{ ^links.edit }} article{{ /links.edit }}</a> {{ #links.edit }}- <a target="_blank" href="/edit/article/id/{{ instanceOfId }}" class="lab-link">Edit</a>{{ /links.edit }}
                <span>
                    Estimated test time: <strong class="estimate-value">No estimate</strong>
                </span>
                <span>
                    <input type="button" value="Publish test" class="abtest-publish-btn lab-selected" title="Publish modifications to front-servers" disabled> &nbsp; 
                    <input type="button" value="Delete all" class="abtest-delete-btn" title="Delete test and variants for this article">
                    {{ #displayTestData }}
                        <br>
                        <input type="button" value="Reset test" class="abtest-reset-btn" title="Delete test for this article" disabled>
                        <input type="button" value="Start test" class="start-test-now-btn" title="Start the test using the selected variants" disabled>
                        <input type="button" value="End test" class="end-test-now-btn" title="End running AB test" disabled>
                    {{ /displayTestData }}
                </span>
            </h3>
        </div>


        <div class="lab-formgroup lab-grid-large-{{ sizes.variantsContainer }} lab-grid tests-container lab-hidden">            
            <div class="lab-formgroup lab-grid-large lab-grid test-info-container lab-valign-top">
                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">A/B test for {{ type }}</h4>
                {{ #displayTestData }}
                    <div class="lab-formgroup-item lab-grid-gap lab-grid-large-4 lab-grid">
                        <div class="lab-formgroup-item lab-inline lab-grid-large-12 lab-grid">
                            <label for="test-is-published">Active</label>
                            <input type="checkbox" class="test-is-published" id="test-is-published">
                            <label class="name-label">- &nbsp;Status:</label>
                            <span class="test-status">{{ #test.status }}{{ test.status }}{{ /test.status }}{{ ^test.status }}Not started ...{{ /test.status }}</span>
                        </div>
                    </div>
                    <div class="lab-formgroup-item lab-grid-gap lab-grid-large-4 lab-grid">
                        <div class="lab-formgroup-item lab-grid-large-12 lab-grid">
                            <label class="name-label">Minimum increase in CTR to detect a winner</label>
                            <input type="range" class="min-variant-lift" min="10" max="50" step="1" value="{{ test.minVariantDifference }}" data-value="{{ test.minVariantDifference }}" oninput="event.target.setAttribute('data-value', event.target.value);">
                        </div>
                        <div class="lab-formgroup-item lab-grid-large-12 lab-grid test-test-method">
                            <label class="name-label">Test method</label>
                        </div>
                    </div>
                    <div class="lab-formgroup-item lab-grid-gap lab-grid-large-1 lab-grid"></div>
                    <div class="lab-formgroup-item lab-grid-gap lab-grid-large-3 lab-grid">
                        <div class="lab-formgroup-item lab-grid-large-12 lab-grid">
                            <label class="name-label" for="test-start-field-input">Test start time</label>
                            <input type="datetime-local" class="test-start-field" id="test-start-field-input" value="{{ test.start }}" placeholder="Start date (YYYY-MM-DD)">
                        </div>
                        <div class="lab-formgroup-item lab-grid-large-12 lab-grid">
                            <label class="name-label" for="test-end-field-input">Test end time</label>
                            <input type="datetime-local" class="test-end-field" id="test-end-field-input" value="{{ test.end }}" placeholder="End date (YYYY-MM-DD)">
                        </div>
                        <div class="lab-formgroup-item lab-grid-large-12 lab-grid">
                            <input type="button" class="set-test-now-btn" value="Now + 12 hours">
                        </div>
                    </div>
                {{ /displayTestData }}
    
                {{ ^displayTestData }}
                    <div class="lab-formgroup-item lab-grid-gap lab-grid-large-12 lab-grid">
                        <div class="abtest-text" style="flex-basis: auto;">A/B tests are added on the frontpage but will use the variants created here.</div>
                    </div>
                {{ /displayTestData }}
            </div>

        </div>

        <div class="lab-formgroup lab-grid-large-{{ sizes.variantsContainer }} lab-grid test-results-container lab-hidden">

            <div class="lab-formgroup lab-grid-large-12 results-container">
                No test results available yet. When enough data has been collected to determine a winning variant, the winner will be selected automatically as long as the A/B test is running and active.
                When the test period is over, only the original article will be shown.<br>
                <br>
                To continue to show the winning variant, make sure to keep the test running for as long as the article is present on the frontpage.
            </div>

        </div>

        <div class="lab-formgroup lab-grid-large-{{ sizes.variantsContainer }} lab-grid variants-container">

            <div class="lab-formgroup lab-grid-large-{{ sizes.variants }}">
                
                <h4 class="lab-title">Variants of {{ type }}</h4>

                <div class="variants lab-grid"><span class="lab-btn original">Original</span></div>

                <div class="lab-grid lab-bordered-top" style="padding-top: 14px;">
                    <input type="button" value="Duplicate selected" class="lab-btn lab-selected labicon-pluss_slim add-variant-btn" title="Add a variant based on the selected variant">
                    {{ ^displayArticleData }}<input type="button" value="Copy to original" class="lab-btn copy-to-orignal-btn" title="Use selected variant as original" style="margin-left: 0.5rem;" disabled>{{ /displayArticleData }}
                    <input type="button" value="Suggest" class="suggest-variant-btn" title="Get suggestions for variants" style="margin-left: auto;">
                    <input type="number" value="3" class="suggest-variant-count-btn" style="width: 50px; margin-left: 0.5rem;">
                </div>

                {{ ^displayArticleData }}<p class="lab-info lab-grid-large-12 lab-grid-gap lab-space-above-medium">Use the editor to modify variant details. All changes will be used in the test.</p>{{ /displayArticleData }}
            </div>

            <div class="lab-formgroup lab-grid-large-{{ sizes.selectedVariant }} lab-grid lab-valign-top">

                <h4 class="lab-title lab-grid-large-12 lab-grid-gap">Selected Variant{{ #displayArticleData }}<span class="abtest-helpertext-title"> - Click to edit text / image</span>{{ /displayArticleData }}</h4>

                {{ #displayArticleData }}
                <div class="lab-grid lab-grid-large-12 abtest-editables lab-grid-gap lab-bordered lab-autogrid" style="margin-bottom:14px; flex-wrap: nowrap;">
                    <div class="abtest-text" style="flex-basis: auto;">No variant added. Click the "Duplicate selected" button to create a variant based on the article.</div>
                    <div class="abtest-image"><div class="lab-empty-placeholder lab-color-light lab-bordered">
                        <div class="lab-inner">
                            <div class="lab-icon-large labicon-images"></div>
                        </div>
                    </div></div>
                </div>
                {{ /displayArticleData }}

                <div class="lab-formgroup-item lab-grid-gap lab-grid-large-{{ #displayArticleData }}4{{ /displayArticleData }}{{ ^displayArticleData }}12{{ /displayArticleData }} lab-grid">
                    <label class="name-label" for="variant-notes-field-input">Notes</label>
                    <textarea class="lab-grid-large-12 variant-notes-field" id="variant-notes-field-input" placeholder="Add notes here ...">{{ variant.notes }}</textarea>
                </div>

                <div class="lab-formgroup-item lab-grid-gap lab-inline lab-grid-large-{{ #displayArticleData }}5{{ /displayArticleData }}{{ ^displayArticleData }}12{{ /displayArticleData }}">
                    <label for="disable-variant-btn">Disabled</label>
                    <input type="checkbox" id="disable-variant-btn">
                    <button class="lab-btn labicon-delete delete-variant-btn" style="margin-left: auto;"> Delete variant</button>
                </div>

            </div>

        </div>

    </div>`,

    result: `<h2>Results</h2>
    <p>
        Article: <a href="/edit/article/id/{{ article.id }}" target="_blank">{{ article.id }}</a> <b>{{{ article.title }}}</b><br>
        Status: <b>{{ stats.status }}</b>. Winner: <b>{{ stats.winner }}</b>
    </p>
    <table class="lab-table lab-table-tight">
        <thead>
            <tr>
                <th>Name</th>
                <th>Score</th>
                <th>Views</th>
                <th>Clicks</th>
            </tr>
        </thead>
        <tbody>
        {{ #data }}
            <tr>
                <td>{{ name }}</td>
                <td title="{{ score }}">{{ scoreNice }}</td>
                <td>{{ views }}</td>
                <td>{{ clicks }}</td>
            </tr>
        {{ /data }}
        </tbody>
    </table>
    `
});


/***/ }),

/***/ "./modules/plugins/app_pusher/AppPusher.js":
/*!*************************************************!*\
  !*** ./modules/plugins/app_pusher/AppPusher.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor() {
        this.api = null;
        this.url = 'https://firebase.automagi.com/publish-story';
        this.onPublish = this.publish.bind(this);
        this.keyEvent = null;
    }

    onReady(api) {
        this.api = api;
        this.start();
    }

    onEnabled() {
        this.start();
    }

    onDisabled() {
        this.stop();
    }

    start() {
        if (this.api) {
            if (this.api.v1.config.get('plugins.appPusher.appName')) {
                this.keyEvent = this.api.v1.util.keyEventHandler.add({
                    key: 'i',
                    callback: this.onPublish,
                    controlkeys: ['labCtrlKey'],
                    overrideDisable: false
                });

                const shouldAutoPush = this.api.v1.config.get('plugins.appPusher.autoPush');
                if (shouldAutoPush === true) {
                    this.api.v1.app.on('published', this.onPublish);
                }
            } else {
                Sys.logger.warn('[AppPusher]: No app name is specified in config.');
            }
        }
    }

    stop() {
        if (this.api) {
            this.api.v1.app.off('published', this.onPublish);
            this.api.v1.util.keyEventHandler.remove(this.keyEvent);
        }
    }

    getPageData() {
        const root = this.api.v1.model.query.getRootModel();
        const site = this.api.v1.site.getSite();
        return {
            type: root.get('type'),
            id: root.get('id'),
            tags: root.get('tags'),
            section: root.get('primaryTags.section'),
            title: root.get('fields.title'),
            url: (this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url')) + root.get('fields.published_url'),
            url_edit: `${ this.api.v1.properties.get('customer_cms_url') }/edit/${  root.get('type') }/id/${  root.get('id') }`,
            status: root.get('status'),
            visibility_status: root.get('fields.visibility_status'),
            publishhidden: root.get('fields.publishhidden'),
            site: {
                id: site.id,
                alias: site.alias
            }
        };
    }

    getUserData() {
        return {
            id: this.api.v1.user.getUserId(),
            name: this.api.v1.user.getUserName(),
            email: this.api.v1.user.getUserEmail()
        };
    }

    publish() {
        const pageData = this.getPageData();
        const userData = this.getUserData();

        const data = {
            app_name: this.api.v1.config.get('plugins.appPusher.appName'),
            email: userData.email,
            story_id: pageData.id,
            title: pageData.title
        };

        const body = new FormData();
        for (const key of Object.keys(data)) {
            body.append(key, data[key]);
        }

        if (pageData.visibility_status === 'P' && pageData.publishhidden !== '1') {
            Sys.logger.debug('[AppPusher]: Sending push message...');
            this.api.v1.util.httpClient.request(this.url, {
                method: 'POST',
                mode: 'cors',
                credentials: 'omit',
                body
            }).then(() => {
                // Display success snackbar.
                Sys.logger.debug('[AppPusher]: Successfully sent push message.');
            }).catch(() => {
                // Display error snackbar.
                Sys.logger.error('[AppPusher]: Failed to send push message.');
            });
        } else {
            Sys.logger.warn('[AppPusher]: Page not published visibly, failed to send push message.');
            // Display warning snackbar.
        }
    }

});

/***/ }),

/***/ "./modules/plugins/app_pusher/index.js":
/*!*********************************************!*\
  !*** ./modules/plugins/app_pusher/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _AppPusher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AppPusher.js */ "./modules/plugins/app_pusher/AppPusher.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'App Pusher',
    description: 'Push message to app',
    version: '1.0.0',
    predicate: (api) => api.v1.config.get('plugins.appPusher.enable') && api.v1.config.get('plugins.appPusher.appName'),
    entry: _AppPusher_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    on: {
        enabled(plugin) {
            if (plugin.entry.instance && plugin.entry.instance.onEnabled) {
                plugin.entry.instance.onEnabled();
            }
        },
        disabled(plugin) {
            if (plugin.entry.instance && plugin.entry.instance.onDisabled) {
                plugin.entry.instance.onDisabled();
            }
        }
    }
});


/***/ }),

/***/ "./modules/plugins/buyandread/buyandread.js":
/*!**************************************************!*\
  !*** ./modules/plugins/buyandread/buyandread.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor() {
        this.api = null;
        this.config = null;
        this.keyEvent = null;
    }

    onReady(api, config) {
        this.api = api;
        this.config = config;
        this.start();
    }

    start() {
        if (this.api && this.config.active) {
            this.keyEvent = this.api.v1.util.keyEventHandler.add({
                key: 'b',
                callback: () => this.showPushModal(),
                controlkeys: ['labCtrlKey', 'shiftKey'],
                overrideDisable: false
            });
        }
    }

    stop() {
        if (this.api) {
            this.api.v1.util.keyEventHandler.remove(this.keyEvent);
        }
    }

    stripHtmlTags(html) {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        return tempDiv.textContent;
    }

    // Display a modal for configuring and sending the push notification
    showPushModal() {
        const pageData = this.getPageData();
        const titleText = this.stripHtmlTags(pageData.title || '');
        const subtitleText = this.stripHtmlTags(pageData.subtitle || '');

        this.api.v1.ui.modal.dialog({
            content: {
                title: 'Send BuyAndRead Push Notification',
                description: `
                    <div class="lab-formgroup">
                        <div class="lab-formgroup-item">
                            <label for="buyandreadTitle">Title:</label>
                            <input type="text" id="buyandreadTitle" class="lab-input" value="${ this.config.defaultTitle || titleText || '' }">
                        </div>
                        <div class="lab-formgroup-item">
                            <label for="buyandreadBody">Message:</label>
                            <textarea id="buyandreadBody" class="lab-input">${ this.config.defaultMessage || subtitleText || '' }</textarea>
                        </div>
                        <div class="lab-formgroup-item">
                            <label for="buyandreadUrl">Custom Article URL (Optional):</label>
                            <input type="text" id="buyandreadUrl" class="lab-input" value="">
                        </div>
                        <div class="lab-formgroup-item">
                            <label for="excludeParams">Send notification without linking to article:</label>
                            <input type="checkbox" id="excludeParams" ${ this.config.excludeParamsDefault ? 'checked' : '' }>
                        </div>
                    </div>
                `
            },
            footer: {
                buttons: [
                    {
                        value: 'Cancel',
                        id: 'cancel_button',
                        highlight: false
                    },
                    {
                        value: 'Send Push',
                        type: 'submit',
                        highlight: true
                    }
                ]
            },
            eventHandlers: [{
                selector: '#cancel_button',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }],
            callbacks: {
                submit: () => {
                    const title = document.getElementById('buyandreadTitle').value;
                    const message = document.getElementById('buyandreadBody').value;
                    const customUrl = document.getElementById('buyandreadUrl').value;
                    const excludeParams = document.getElementById('excludeParams').checked;
                    this.publish(title, message, customUrl, excludeParams);
                }
            }
        });
    }

    // Retrieve relevant data about the current page
    getPageData() {
        const root = this.api.v1.model.query.getRootModel();
        const site = this.api.v1.site.getSite();
        return {
            type: root.get('type'),
            id: root.get('id'),
            title: root.get('fields.title'),
            subtitle: root.get('fields.subtitle'),
            url: (this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url')) + root.get('fields.published_url'),
            status: root.get('status'),
            visibility_status: root.get('fields.visibility_status'),
            publishhidden: root.get('fields.publishhidden'),
            site: {
                alias: site.alias
            }
        };
    }

    // Publish a push notification with the provided title and body,
    publish(customTitle, customBody, customUrl, excludeParams) {
        const pageData = this.getPageData();

        if (pageData.visibility_status === 'P' && pageData.publishhidden !== '1') {
            const params = new URLSearchParams({
                title: customTitle,
                message: customBody
            });

            if (!excludeParams) {
                const url = customUrl || pageData.url; // Use custom URL if provided, otherwise use the page URL
                params.append('url', url);
            }

            // Construct the request URL
            const requestUrl = `https://www.buyandread.com/servlet/api/${ this.config.providerId }/provider/v1/app/sendPushMessage?${ params.toString() }`;

            Sys.logger.debug('[BuyAndRead]: Sending push message...');

            // Prepare the payload for the API call
            const formData = new FormData();
            const payload = {
                site: pageData.site.alias,
                request_url: requestUrl
            };
            formData.append('payload', JSON.stringify(payload));

            // Make the API call to send the push notification
            this.api.v1.util.httpClient.request(
                '/ajax/buyandread/post',
                {
                    method: 'POST',
                    body: formData
                }
            ).then((response) => response).then((data) => {
                // If success is false, reject the promise with an error
                if ((data && data.success === false) || data === '') {
                    const errorMessage = `Contact us or <a href="https://www.buyandread.com/" target="_blank">BuyAndRead</a> if the error persists.<br>
                    <b>Status from BuyAndRead:</b> ${ data.statusDesc || 'Push notification failed' }`;

                    return Promise.reject(new Error(errorMessage));
                }

                // Success message, and details about the push notification
                Sys.logger.debug('[BuyAndRead]: Successfully sent push message.', data);
                const successMessage = `Push notification successfully sent!`;
                /* For a more detailed response, uncomment the following lines and add the desired fields:
                Response:<br>\n\n
                <b>Success:</b> ${data.success}<br>
                <b>Scheduled:</b> ${data.scheduled}<br>
                <b>Description:</b> ${data.statusDesc || 'Push notification sent successfully!'}<br>
                <b>Status code:</b> ${data.statusCode}<br>
                <b>Title:</b> ${params.get('title') || 'N/A'}<br>
                <b>Message:</b> ${params.get('message') || 'N/A'}<br>
                <b>Article ID:</b> ${params.get('articleId') || 'N/A'}<br>
                <b>URL:</b> ${params.get('url') || 'N/A'}<br>
                */

                this.showResultModal('Success', successMessage, false);
            }).catch((error) => {
                // Error message if the API call fails, or the response is not as expected
                Sys.logger.error('[BuyAndRead]: Failed to send push message.', error);
                const errorMessage = (error.message ? `<br>\n\n${  error.message }` : '');

                this.showResultModal('Error - Push request failed!', errorMessage, true);
            });
        } else {
            // Error message if the page is not published visibly
            Sys.logger.warn('[BuyAndRead]: Page not published visibly, failed to send push message.');
            this.showResultModal('Error', 'Page must be published and visible to send push notifications.', true);
        }
    }

    // Display a modal with the result of the push notification send
    showResultModal(title, message, isError) {
        this.api.v1.ui.modal.dialog({
            container: {
                state: isError ? 'error' : 'success'
            },
            content: {
                title,
                description: message
            },
            footer: {
                buttons: [
                    {
                        type: 'submit',
                        value: 'OK',
                        highlight: true
                    }
                ]
            }
        });
    }

});


/***/ }),

/***/ "./modules/plugins/buyandread/index.js":
/*!*********************************************!*\
  !*** ./modules/plugins/buyandread/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _buyandread_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buyandread.js */ "./modules/plugins/buyandread/buyandread.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'BuyAndRead',
    description: 'Push message to app using BuyAndRead',
    version: '1.0.0',
    predicate: (api) => api.v1.config.get('plugins.buyandread.active'),
    entry: class {

        onReady(api) {
            api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/buyandread/buyandread-main.css');

            let buyAndReadInstance = null;

            const btn = api.v1.util.dom.renderTemplate('<li class="lab-item lab-btn labicon-buyandread" title="BuyAndRead"></li>', {}, true);
            document.querySelector('#labrador-menu ul li.lab-menulist ul').appendChild(btn);
            btn.addEventListener('click', (event) => {
                const config = api.v1.config.get('plugins.buyandread');
                if (!config.providerId) {
                    const missingFields = [
                        !config.providerId && 'Provider ID'
                    ].filter(Boolean).join(', ');

                    Sys.logger.warn(`[BuyAndRead] Required config missing: ${ missingFields }. BuyAndRead will not run.`);
                    api.v1.ui.modal.dialog({
                        container: { state: { warning: true } },
                        content: {
                            title: 'BuyAndRead not configured',
                            description: `Required configuration missing: ${ missingFields }.<br>Set up BuyAndRead in the <a href="/settings/cp?page=plugins" target="_blank">admin-page</a>.`
                        },
                        footer: {
                            buttons: [
                                {
                                    type: 'submit',
                                    value: 'OK',
                                    highlight: true
                                }
                            ]
                        }
                    });
                    return;
                }

                if (!buyAndReadInstance) {
                    buyAndReadInstance = new _buyandread_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
                    buyAndReadInstance.onReady(api, config);
                }
                buyAndReadInstance.showPushModal();
            }, false);
        }

    }
});


/***/ }),

/***/ "./modules/plugins/index.js":
/*!**********************************!*\
  !*** ./modules/plugins/index.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "abtest": () => (/* reexport safe */ _abtest_index_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "app_pusher": () => (/* reexport safe */ _app_pusher_index_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "buyandread": () => (/* reexport safe */ _buyandread_index_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "paywall": () => (/* reexport safe */ _paywall_index_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "publishhistory": () => (/* reexport safe */ _publishhistory_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "slack_notifier": () => (/* reexport safe */ _slack_notifier_index_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "subrite": () => (/* reexport safe */ _subrite_index_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "tansa": () => (/* reexport safe */ _tansa_index_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "textassistant": () => (/* reexport safe */ _textassistant_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "youtube": () => (/* reexport safe */ _youtube_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _youtube_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./youtube/index.js */ "./modules/plugins/youtube/index.js");
/* harmony import */ var _publishhistory_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./publishhistory/index.js */ "./modules/plugins/publishhistory/index.js");
/* harmony import */ var _app_pusher_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app_pusher/index.js */ "./modules/plugins/app_pusher/index.js");
/* harmony import */ var _tansa_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tansa/index.js */ "./modules/plugins/tansa/index.js");
/* harmony import */ var _textassistant_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textassistant/index.js */ "./modules/plugins/textassistant/index.js");
/* harmony import */ var _abtest_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abtest/index.js */ "./modules/plugins/abtest/index.js");
/* harmony import */ var _slack_notifier_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./slack_notifier/index.js */ "./modules/plugins/slack_notifier/index.js");
/* harmony import */ var _subrite_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subrite/index.js */ "./modules/plugins/subrite/index.js");
/* harmony import */ var _buyandread_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./buyandread/index.js */ "./modules/plugins/buyandread/index.js");
/* harmony import */ var _paywall_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./paywall/index.js */ "./modules/plugins/paywall/index.js");












/***/ }),

/***/ "./modules/plugins/paywall/PaywallManager.js":
/*!***************************************************!*\
  !*** ./modules/plugins/paywall/PaywallManager.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PaywallManager)
/* harmony export */ });
class PaywallManager {

    constructor(api, rootModel, onClose) {
        this.api = api;
        this.rootModel = rootModel;
        this.onClose = onClose;
        this.previewActive = false;
        this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/paywall/paywall.css');
        this.previewModel = null;
    }

    setup() {
        this.togglePreview();
    }

    // Toggle the preview of the paywall
    togglePreview() {
        if (this.previewActive) {
            this.deletePreview();
            this.previewActive = false;
        } else {
            this.deletePreview();
            this.createPreview();
            this.previewActive = true;
            setTimeout(() => this.scrollToPaywallPreview(), 100);
        }
    }

    // Insert a paywallPreview model programatically into the correct bodyTextIndex
    createPreview() {
        const lineIndex = lab_api.v1.config.get('paywall.bodytext.lineCount');
        const model = this.api.v1.model.insert.atPath({
            path: 'page_article/bodytext[0]',
            data: {
                type: 'paywallPreview',
                metadata: {
                    bodyTextIndex: lineIndex
                },
                contentdata: {
                    fields: {}
                },
                state: {
                    isNonPersistent: true,
                    editNonPersistent: true,
                    draggableDisabled: true
                }
            },
            options: {
                silent: false
            }
        });

        if (model) {
            this.previewModel = model;
            this.api.v1.model.bindings.bind(model, 'state.deleted', this.handlePreviewDeleted.bind(this));
        }

        return model;
    }

    // Handle when the preview is deleted manually
    handlePreviewDeleted(model, path, value) {
        if (value === true) {
            this.previewActive = false;
            this.previewModel = null;

            if (typeof this.onClose === 'function') {
                this.onClose();
            }
        }
    }

    // Delete the paywall preview model
    deletePreview() {
        this.api.v1.model.delete(this.previewModel, true, true);
    }

    // Scroll to the paywall preview
    scrollToPaywallPreview() {
        lab_api.v1.model.highlight.default(this.previewModel, { scroll: true });
    }

    // Close the paywall preview
    end() {
        this.deletePreview();
        this.previewActive = false;

        if (typeof this.onClose === 'function') {
            this.onClose();
        }
    }

}


/***/ }),

/***/ "./modules/plugins/paywall/index.js":
/*!******************************************!*\
  !*** ./modules/plugins/paywall/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _PaywallManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PaywallManager.js */ "./modules/plugins/paywall/PaywallManager.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'Paywall Preview',
    description: 'Display a preview of the paywall configuration',
    version: '1.0.1',
    predicate: (api) => !api.v1.config.get('paywall.provider'),
    entry: class {

        onReady(api) {
            this.api = api;
            this.rootModel = api.v1.model.query.getRootModel();
            this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/paywall/paywall.css');

            if (this.rootModel.getType() === 'page_article') {
                let currentManager = null;
                const labStatusArea = document.querySelector('.lab-status-area');
                const span = document.createElement('span');
                span.className = 'labicon-ad_content';
                labStatusArea.appendChild(span);
                const navContainer = document.querySelector('body > div.lab-collection-drawer.lab-content > nav > ul');
                const btn = document.createElement('li');
                btn.style.display = 'none';
                btn.setAttribute('data-collection', 'no-collection');
                btn.innerHTML = `
                <div class="lab-lbl paywall-btn"><span class="labicon-ad_content" style="margin-top: -2px; display: block;"></span></div>
                <div class="lab-desc paywall-btn">Paywall</div>
                `;
                const lbl = btn.querySelector('.lab-lbl');
                btn.addEventListener('click', (event) => {
                    if (currentManager) {
                        currentManager.end();
                        currentManager = null;
                        lbl.classList.remove('paywall-btn-active');
                    } else {
                        const manager = new _PaywallManager_js__WEBPACK_IMPORTED_MODULE_0__["default"](api, this.rootModel, () => {
                            currentManager = null;
                            lbl.classList.remove('paywall-btn-active');
                        });
                        manager.setup();
                        currentManager = manager;
                        lbl.classList.add('paywall-btn-active');
                    }
                });
                navContainer.appendChild(btn);

                const paywallState = this.rootModel.get('fields.paywall');
                if (paywallState) {
                    const paywallElements = btn.querySelectorAll('.paywall-btn');
                    paywallElements.forEach((el) => {
                        el.classList.add('paywall-collection-btn-visible');
                    });
                    span.classList.add('paywall-collection-btn-visible');
                    btn.style.display = '';
                }

                this.api.v1.model.bindings.bind(this.rootModel, 'fields.paywall', (model, path, value) => {
                    const paywallElements = btn.querySelectorAll('.paywall-btn');
                    if (value) {
                        paywallElements.forEach((el) => {
                            el.classList.add('paywall-collection-btn-visible');
                        });
                        span.classList.add('paywall-collection-btn-visible');
                        btn.style.display = '';
                    } else {
                        paywallElements.forEach((el) => {
                            el.classList.remove('paywall-collection-btn-visible');
                        });
                        span.classList.remove('paywall-collection-btn-visible');
                        btn.style.display = 'none';
                    }
                });
            }
        }

    }
});


/***/ }),

/***/ "./modules/plugins/publishhistory/PublishHistory.js":
/*!**********************************************************!*\
  !*** ./modules/plugins/publishhistory/PublishHistory.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PublishHistory": () => (/* binding */ PublishHistory)
/* harmony export */ });
class PublishHistory {

    constructor(id) {
        this.id = id;
        this.container = null;
    }

    getMarkup(data) {
        return lab_api.v1.util.dom.renderTemplate(`
            <div>
                <p>Publish-history for {{ type }} #{{ id }} {{ #date }}- Created {{ date }}{{ /date }} <a class="labicon-startEdit lab-btn" href="/edit/{{ type }}/id/{{ id }}" target="_blank" style="float: right; margin-top: -0.8em;"> Edit {{ type }}</a></p>
                <table class="lab-table lab-space-above-large lab-modal-table">
                    <thead>
                        <tr class="publish-marker">
                            <th>Status</th>
                            <th>Publish date</th>
                            <th>Time</th>
                            <th>User name</th>
                            <th>User email</th>
                        </tr>
                    </thead>
                    <tbody>
                    {{ #items }}
                        <tr>
                            <td><span class="lab-label {{ #visible }}published-visible{{ /visible }}{{ ^visible }}published-hidden{{ /visible }}">{{ #visible }}Visible{{ /visible }}{{ ^visible }}Hidden{{ /visible }}</span></td>
                            <td>{{ date }}</td>
                            <td>{{ time }}</td>
                            <td>{{ user.firstname }} {{ user.lastname }}</td>
                            <td><a href="mailto:{{ user.googleid }}">{{ user.googleid }}</a></td>
                        </tr>
                    {{ /items }}
                    </tbody>
                </table>
            </div>
        `, data, true);
    }

    run(container, callback) {
        this.container = container;
        lab_api.v1.util.httpClient.get(`/ajax/node/get-node?id=${ this.id }`, { resetCache: true }).then((resp) => {

            // '[[1,1646861908,"A"],[1,1646907387,"A"],[1,1646915037,"A"]]' [[<user-id>, <timestamp>, <status>], ...]
            const historyString = lab_api.v1.util.defaults.string(lab_api.v1.util.object.get('data.fields.last_published_by', resp));
            if (!historyString) {
                Sys.logger.debug(`[PublishHistory] No history found for node #${ this.id }.`);
                return;
            }
            const history = JSON.parse(historyString).reverse();
            const userIds = [...new Set(history.map((item) => item[0]))];

            lab_api.v1.util.httpClient.get(`/ajax/user/get-users-by-ids?ids=${ userIds.join(',') }`).then((users) => {
                this.draw(resp.data, history, users);
                callback();
            }).catch((error) => {
                console.log('Error fetching users: ', error);
            });

        }).catch((error) => {
            console.log('Error fetching node: ', error);
        });

    }

    draw(data, history, users) {
        const usersObj = {};
        for (const user of users) {
            usersObj[user.userid] = user;
        }
        const items = history.map((item) => ({
            user: usersObj[item[0]],
            date: this.formatTimestamp(item[1], true, false),
            time: this.formatTimestamp(item[1], false, true),
            status: item[2],
            visible: item[2] === 'A' || item[2] === 'P'
        }));
        const markup = this.getMarkup({
            id: data.id,
            date: this.formatTimestamp(data.fields.created),
            type: data.type,
            items
        });
        this.container.appendChild(markup);
    }

    // Todo: Use a general method for this
    formatTimestamp(timestamp, displayDate = true, displayTime = true) {
        if (!timestamp) {
            return null;
        }
        const d = new Date(timestamp * 1000);
        if (displayDate && displayTime) {
            return `${ d.toLocaleDateString() } - ${ d.toLocaleTimeString() }`;
        }
        return displayDate ? d.toLocaleDateString() : d.toLocaleTimeString();
    }

}


/***/ }),

/***/ "./modules/plugins/publishhistory/callback.js":
/*!****************************************************!*\
  !*** ./modules/plugins/publishhistory/callback.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _PublishHistory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PublishHistory.js */ "./modules/plugins/publishhistory/PublishHistory.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((menu, event) => {
    const model = menu.getModel();
    lab_api.v1.util.dom.addFile('css', '/view-resources/Baseview/modules/plugins/publishhistory/style.css');
    const id = model.get('instance_of');
    if (!id) {
        Sys.logger.debug('[PublishHistory] No instance-of-id found. Cannot show publish history.');
        return;
    }

    const editor = new _PublishHistory_js__WEBPACK_IMPORTED_MODULE_0__.PublishHistory(id);

    lab_api.v1.ui.modal.dialog({
        container: {
            width: 900,
            state: {
                busy: true
            }
        },
        content: {
            title: model.get('fields.title') || '[Unnamed article]',
            markup: `<div class="publishhistory"></div>`
        },
        callbacks: {
            didDisplay: (modal) => {
                editor.run(modal.getMarkup().querySelector('.publishhistory'), () => {
                    modal.setBusyState(false);
                });
            }
        }
    });

});


/***/ }),

/***/ "./modules/plugins/publishhistory/index.js":
/*!*************************************************!*\
  !*** ./modules/plugins/publishhistory/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties.js */ "./modules/plugins/publishhistory/properties.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'PublishHistory',
    description: 'Display time and user for each publish-action for current article teaser',
    version: '1.0.0',
    isEnabled: true,
    elements: {
        article: {
            properties: _properties_js__WEBPACK_IMPORTED_MODULE_0__["default"]
        }
    }
});


/***/ }),

/***/ "./modules/plugins/publishhistory/properties.js":
/*!******************************************************!*\
  !*** ./modules/plugins/publishhistory/properties.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _callback_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callback.js */ "./modules/plugins/publishhistory/callback.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    contentMenus: {
        default: {
            items: {
                settings: {
                    items: {
                        originalArticle: {
                            text: 'Original article',
                            icon: 'labicon-article',
                            displayCondition: 'hasParentOfTypes',
                            params: {
                                modelTypes: ['row', 'bodytext']
                            },
                            items: {
                                publishhistory: {
                                    icon: 'labicon-time',
                                    title: 'Display Publish History',
                                    text: 'Publish History',
                                    callback: _callback_js__WEBPACK_IMPORTED_MODULE_0__["default"],
                                    bindings: [
                                        {
                                            path: 'instance_of',
                                            attribute: 'disabled',
                                            valueTransformer: 'isNumeric',
                                            valueTransformerOptions: {
                                                negateBoolean: true
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }
});


/***/ }),

/***/ "./modules/plugins/slack_notifier/Notifier.js":
/*!****************************************************!*\
  !*** ./modules/plugins/slack_notifier/Notifier.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Notifier": () => (/* binding */ Notifier)
/* harmony export */ });
/**
 * Notifier.js
 * Send a message via a Slack webhook
 * Input is an array of objects defining cases where a notification is to be sendt
 * [{
 *     page_type: (string) - The type of page to notify about (all, front, article, notice)
 *     event: (string) - The event to notify about (currently only publish (default))
 *     type: (string) - The type of notification (all (default), tags, section, hostpath)
 *     value: (array) - The value to match against (e.g. ['news'])
 *     webhook: (string) - The Slack webhook URL
 * }]
 */

class Notifier {

    constructor(api, options) {
        this.api = api;
        this.defaults = {
            type: ['all', 'tags', 'section', 'hostpath'],
            page_type: ['all', 'front', 'article', 'notice'],
            event: ['publish', 'error']
        };
        this.events = {
            publish: this.setupEvent('publish', options),
            error: this.setupEvent('error', options)
        };
        this.listen();
    }

    listen() {
        if (this.events.publish.length) {
            this.api.v1.app.on('published', (params) => {
                this.notifyPublish(params);
            });
        }
        if (this.events.error.length) {
            this.api.v1.app.on('error', (error) => {
                try { this.notifyError(error, true); } catch { /* empty */ }
            });
            this.api.v1.app.on('viewError', (error) => {
                try { this.notifyError(error, false); } catch { /* empty */ }
            });
        }
    }

    notifyPublish(params) {
        const model = this.api.v1.model.query.getModelById(params.id);
        for (const item of this.events.publish) {
            if (this.validateEvent(model, item, params)) {
                const published = params.published ? new Date(params.published * 1000).toLocaleString() : '';
                let modified = params.modified ? new Date(params.modified * 1000).toLocaleString() : '';
                if (!modified && published) {
                    modified = published;
                }
                this.notify({
                    notifyType: 'publish',
                    title: params.type === 'front' ? model.get('fields.name') : model.get('fields.title'),
                    url_front: params.url,
                    url_editor: `${ this.api.v1.properties.get('customer_cms_url') }/edit/${ params.type }/id/${ params.id }`,
                    url_cms: this.api.v1.properties.get('customer_cms_url'),
                    id: params.id,
                    type: params.type,
                    hidden: !!params.hidden,
                    modified,
                    published,
                    published_ahead: params.published_ahead,
                    user: this.api.v1.user.getUserName()
                }, item.webhook);
            }
        }
    }

    notifyError(error, isCmsError) {
        const model = this.api.v1.model.query.getRootModel();
        for (const item of this.events.error) {
            if (this.validateEvent(model, item, item)) {
                this.notify({
                    notifyType: 'error',
                    type: 'all',
                    isCmsError,
                    isViewError: !isCmsError,
                    url_editor: `${ this.api.v1.properties.get('customer_cms_url') }/edit/${ model.get('type').replace('page_', '') }/id/${ model.getId() }`,
                    url_cms: this.api.v1.properties.get('customer_cms_url'),
                    url_monitor: `${ this.api.v1.properties.get('customer_cms_url') }/support/monitor/`,
                    user: this.api.v1.user.getUserName(),
                    message: error.toString(),
                    stackTrace: error.stack
                }, item.webhook);
            }
        }
    }

    validateEvent(model, item, params) {
        if (!model || (params.type !== item.page_type && item.page_type !== 'all')) {
            return false;
        }
        if (item.type === 'all') {
            return true;
        }
        return this.validateValue(model, item.type, item.value);
    }

    validateValue(model, type, value) {
        switch (type) {
            case 'tags':
                return this.validateTags(model, value);
            case 'section':
                return this.validateSection(model, value);
            case 'hostpath':
                return this.validateHostPath(model, value);
            default:
                return false;
        }
    }

    validateTags(model, value) {
        const tags = model.get('tags');
        for (const tag of tags) {
            if (value.includes(tag)) {
                return true;
            }
        }
        return false;
    }

    validateSection(model, value) {
        return value.includes(model.get('primaryTags.section'));
    }

    validateHostPath(model, value) {
        return value.includes(model.get('fields.hostpath'));
    }

    setupEvent(event, options) {
        const result = [];
        if (!Array.isArray(options)) {
            return result;
        }
        for (const item of options) {
            if (item.event === event) {
                const validated = this.validateItem(item);
                if (validated) {
                    result.push(validated);
                }
            }
        }
        return result;
    }

    validateItem(item) {
        if (!item.webhook || !item.page_type) {
            return null;
        }
        if (!this.defaults.page_type.includes(item.page_type)) {
            console.warn(`[Slack Notifier] Invalid page type "${ item.page_type }". Item will not be used. Options: `, this.defaults.page_type);
            return null;
        }
        if (!this.defaults.event.includes(item.event)) {
            console.warn(`[Slack Notifier] Invalid event "${ item.event }". Item will not be used. Options: `, this.defaults.event);
            return null;
        }
        return {
            page_type: item.page_type,
            event: item.event,
            type: this.defaults.type.includes(item.type) ? item.type : 'all',
            value: Array.isArray(item.value) ? item.value : [],
            webhook: item.webhook
        };
    }

    /**
     * Send a message to a Slack webhook
     * @param {object} data - Data available to template
     * @param {string} url - The Slack webhook URL
     * @returns {Promise|null} - A promise that resolves when the message is sent
     */
    notify(data, url) {
        const key = `slack_notifier.${ data.notifyType }.${ data.type }`;
        let content = this.api.v1.locale.get(key, { data });
        if (content === key) {
            if (data.notifyType === 'publish') {
                content = `*Page ${ data.id } is published*\nType: ${ data.type }\nPublish date: ${ data.published }\nUser: ${ data.user }\nFront url: ${ data.url_front }\nEditor url: ${ data.url_editor }`;
            } else if (data.notifyType === 'error') {
                content = `*${ data.isCmsError ? 'CMS error' : 'View error' }*\nMessage: ${ data.message }\nStack trace: ${ data.stackTrace }\nUser: ${ data.user }\nEditor url: ${ data.url_editor }`;
            } else {
                console.warn('No content for notify:', data);
                return null;
            }
        }

        const payload = {
            blocks: [{
                type: 'section',
                text: {
                    type: 'mrkdwn',
                    text: content
                }
            }, {
                type: 'divider'
            }, {
                type: 'context',
                elements: [
                    {
                        type: 'image',
                        image_url: 'https://www.labradorcms.com/view-resources/baseview/public/common/icons/labrador_logo.png',
                        alt_text: 'Labrador CMS logo'
                    },
                    {
                        type: 'mrkdwn',
                        text: 'Powered by <https://labradorcms.com|Labrador CMS>'
                    }
                ]
            }]
        };

        return new Promise((resolve, reject) => {
            fetch(url, {
                method: 'POST',
                body: JSON.stringify(payload)
            }).then((res) => {
                if (!res.ok) {
                    throw new Error(`Server error ${ res.status }`);
                }
                resolve(res.text());
            }).catch((error) => {
                reject(error);
            });
        });
    }

}


/***/ }),

/***/ "./modules/plugins/slack_notifier/index.js":
/*!*************************************************!*\
  !*** ./modules/plugins/slack_notifier/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Notifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Notifier.js */ "./modules/plugins/slack_notifier/Notifier.js");
/**
 * Slack Notifier plugin for Labrador CMS
 * ©️ Labrador CMS AS
 */



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'Slack Notifier',
    description: 'Send a message to a Slack when a page is published',
    version: '1.0.0',
    predicate: (api) => api.v1.config.get('plugins.slack_notifier.enable'),
    entry: class {

        onReady(api) {
            this.api = api;
            this.notifier = new _Notifier_js__WEBPACK_IMPORTED_MODULE_0__.Notifier(api, api.v1.config.get('plugins.slack_notifier.options'));
        }

    }

});


/***/ }),

/***/ "./modules/plugins/subrite/index.js":
/*!******************************************!*\
  !*** ./modules/plugins/subrite/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _subrite_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subrite.js */ "./modules/plugins/subrite/subrite.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'Subrite',
    description: 'Push message to app using Subrite',
    version: '1.0.0',
    predicate: (api) => api.v1.config.get('plugins.subrite.active'),
    entry: class {

        onReady(api) {
            api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/subrite/subrite-main.css');

            let subriteInstance = null;

            const btn = api.v1.util.dom.renderTemplate('<li class="lab-item lab-btn labicon-subrite" title="Subrite"></li>', {}, true);
            document.querySelector('#labrador-menu ul li.lab-menulist ul').appendChild(btn);
            btn.addEventListener('click', (event) => {
                const config = api.v1.config.get('plugins.subrite');

                if (!subriteInstance) {
                    subriteInstance = new _subrite_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
                    subriteInstance.onReady(api, config);
                }
                subriteInstance.showPushModal();
            }, false);
        }

    }
});


/***/ }),

/***/ "./modules/plugins/subrite/subrite.js":
/*!********************************************!*\
  !*** ./modules/plugins/subrite/subrite.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {

    constructor() {
        this.api = null;
        this.config = null;
        this.keyEvent = null;
    }

    onReady(api, config) {
        this.api = api;
        this.config = config;
        this.start();
    }

    start() {
        if (this.api && this.config.active) {
            this.keyEvent = this.api.v1.util.keyEventHandler.add({
                key: 'u',
                callback: () => this.showPushModal(),
                controlkeys: ['labCtrlKey', 'shiftKey'],
                overrideDisable: false
            });
        }
    }

    stop() {
        if (this.api) {
            this.api.v1.util.keyEventHandler.remove(this.keyEvent);
        }
    }

    stripHtmlTags(html) {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        return tempDiv.textContent;
    }

    showPushModal() {
        const pageData = this.getPageData();
        const titleText = this.stripHtmlTags(pageData.title || '');
        const subtitleText = this.stripHtmlTags(pageData.subtitle || '');

        this.api.v1.ui.modal.dialog({
            content: {
                title: 'Send Subrite Push Notification',
                description: `
                    <div class="lab-formgroup">
                        <div class="lab-formgroup-item">
                            <label for="subriteTitle">Title</label>
                            <input type="text" id="subriteTitle" class="lab-input" value="${ this.config.defaultTitle || titleText  || '' }">
                        </div>
                        <div class="lab-formgroup-item">
                            <label for="subriteBody">Body</label>
                            <textarea id="subriteBody" class="lab-input">${ this.config.defaultMessage || subtitleText || '' }</textarea>
                        </div>
                    </div>
                `
            },
            footer: {
                buttons: [
                    {
                        value: 'Cancel',
                        id: 'cancel_button',
                        highlight: false
                    },
                    {
                        value: 'Send Push',
                        type: 'submit',
                        highlight: true
                    }
                ]
            },
            eventHandlers: [{
                selector: '#cancel_button',
                event: 'click',
                callback: (modal, event) => {
                    modal.close();
                }
            }],
            callbacks: {
                submit: () => {
                    const title = document.getElementById('subriteTitle').value;
                    const body = document.getElementById('subriteBody').value;
                    this.publish(title, body);
                }
            }
        });
    }

    getPageData() {
        const root = this.api.v1.model.query.getRootModel();
        const site = this.api.v1.site.getSite();
        return {
            type: root.get('type'),
            id: root.get('id'),
            tags: root.get('tags'),
            section: root.get('primaryTags.section'),
            title: root.get('fields.title'),
            subtitle: root.get('fields.subtitle'),
            url: (this.api.v1.site.getSite().domain || this.api.v1.properties.get('customer_front_url')) + root.get('fields.published_url'),
            status: root.get('status'),
            visibility_status: root.get('fields.visibility_status'),
            publishhidden: root.get('fields.publishhidden'),
            site: {
                alias: site.alias
            }
        };
    }

    publish(customTitle, customBody) {
        const pageData = this.getPageData();

        if (pageData.visibility_status === 'P' && pageData.publishhidden !== '1') {
            const data = {
                title: customTitle,
                body: customBody,
                data: {
                    url: pageData.url
                },
                topics: pageData.tags
            };

            Sys.logger.debug('[Subrite]: Sending push message...');

            const formData = new FormData();
            const payload = {
                site: pageData.site.alias,
                request_url: 'https://api.subrite.no/api/v1/app-push/pushcontent',
                data: JSON.stringify(data)
            };
            formData.append('payload', JSON.stringify(payload));

            this.api.v1.util.httpClient.request(
                '/ajax/subrite/post',
                {
                    method: 'POST',
                    body: formData
                }
            ).then((response) => response).then((responseData) => {
                if ((responseData && responseData.status !== 'created') || responseData === '') {
                    const errorMessage = `Contact us the error persists.<br>
                    <b>Status response:</b> ${ JSON.stringify(responseData) || 'Push notification failed' }`;

                    return Promise.reject(new Error(errorMessage));
                }

                Sys.logger.debug('[Subrite]: Successfully sent push message.');
                this.showResultModal('Success!', 'Push notification sent successfully!', false);
            }).catch((error) => {
                Sys.logger.error('[Subrite]: Failed to send push message.', error);
                const errorMessage = (error.message ? `<br>\n\n${  error.message }` : '');

                this.showResultModal('Error - Push request failed!', errorMessage, true);
            });
        } else {
            Sys.logger.warn('[Subrite]: Page not published visibly, failed to send push message.');
            this.showResultModal('Error', 'Page must be published and visible to send push notifications.', true);
        }
    }

    showResultModal(title, message, isError) {
        this.api.v1.ui.modal.dialog({
            container: {
                state: isError ? 'error' : 'success'
            },
            content: {
                title,
                description: message
            },
            footer: {
                buttons: [
                    {
                        type: 'submit',
                        value: 'OK',
                        highlight: true
                    }
                ]
            }
        });
    }

});


/***/ }),

/***/ "./modules/plugins/tansa/index.js":
/*!****************************************!*\
  !*** ./modules/plugins/tansa/index.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'Tansa',
    description: 'Proofreading from Tansa',
    version: '1.0.1',
    predicate: (api) => (api.v1.model.root.getType() === 'page_article' || api.v1.model.root.getType() === 'page_notice') && api.v1.config.get('tansa.active'),
    entry: class {

        onReady(api) {
            api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/tansa/tansa-main.css');

            // Add Tansa-attribute to iframe:
            document.querySelector('iframe[data-lab-viewport="desktop"]').setAttribute('tansa-proofing', 'true');

            let tansaInstance = null;

            const btn = api.v1.util.dom.renderTemplate('<li class="lab-item lab-btn labicon-tansa" title="Tansa"></li>', {}, true);
            document.querySelector('#labrador-menu ul li.lab-menulist ul').appendChild(btn);
            btn.addEventListener('click', (event) => {
                const config = api.v1.config.get('tansa');
                if (!config.licenseKey || !config.baseUrl) {
                    Sys.logger.warn('[Tansa] Required config "licenseKey" or "baseUrl" missing. Tansa will not run.');
                    api.v1.ui.modal.dialog({
                        container: { state: { warning: true } },
                        content: {
                            title: 'Tansa not configured',
                            description: 'Required config "licenseKey" or "baseUrl" missing. Tansa will not run.<br>Set up Tansa in the <a href="/settings/cp?page=tansa" target="_blank">admin-page</a>.'
                        },
                        footer: {
                            buttons: [
                                {
                                    type: 'submit',
                                    value: 'OK',
                                    highlight: true
                                }
                            ]
                        }
                    });
                    return;
                }

                const elements = api.v1.util.defaults.object(config.elements, {
                    kicker: true, title: true, subtitle: true, bodytext: true, images: true, factboxes: true, articles: true
                });
                const targets = [];
                // Add entry to the array. Each entry will be a target for Tansa and the text value of each path will be spellchecked.
                // If dispatchEvent is true, the element will be updated when Tansa is done using connected text tool.
                // If false (default), the element will be updated using standard set method.
                const pusher = (model, domModel, selector, path, dispatchEvent = false) => {
                    targets.push({
                        model, domModel, selector, dispatchEvent, value: '', path
                    });
                };
                if (elements.kicker) {
                    pusher(api.v1.model.query.getModelByType('articleHeader'), null, '.kicker', 'fields.kicker');
                }
                if (elements.title) {
                    pusher(api.v1.model.query.getModelByType('articleHeader') || api.v1.model.query.getModelByType('noticeHeader'), null, '.headline', 'fields.title');
                }
                if (elements.subtitle) {
                    pusher(api.v1.model.query.getModelByType('articleHeader'), null, '.subtitle', 'fields.subtitle');
                }
                if (elements.images) {
                    const topImage = api.v1.model.query.getModelByPath('articleHeader/image');
                    const images = api.v1.model.query.getModelsByPath('bodytext/image');
                    if (topImage) {
                        // Caption is edited by the articleHeader, not the image itself:
                        pusher(topImage, topImage.getParent(), 'figcaption[itemprop="caption"]', 'fields.imageCaption');
                        pusher(topImage, topImage.getParent(), 'figcaption[itemprop="author"]', 'fields.byline');
                    }
                    for (const image of images) {
                        pusher(image, null, 'figcaption[itemprop="caption"]', 'fields.imageCaption');
                        pusher(image, null, 'figcaption[itemprop="author"]', 'fields.byline');
                    }
                }
                if (elements.articles) {
                    const articleTeasers = api.v1.model.query.getModelsByPath('bodytext/article');
                    for (const article of articleTeasers) {
                        pusher(article, null, '.headline', 'fields.title');
                        pusher(article, null, '.subtitle', 'fields.subtitle');
                        pusher(article, null, '.kicker', 'fields.kicker');
                        const image = api.v1.model.query.getChildOfType(article, 'image');
                        if (image) {
                            pusher(image, article, 'figcaption[itemprop="caption"]', 'fields.imageCaption');
                            pusher(image, article, 'figcaption[itemprop="author"]', 'fields.byline');
                        }
                    }
                }
                if (elements.factboxes) {
                    const factboxes = api.v1.model.query.getModelsByPath('bodytext/factbox');
                    for (const factbox of factboxes) {
                        pusher(factbox, null, 'h2', 'fields.title');
                        pusher(factbox, null, '.fact', 'fields.bodytext', true);
                    }
                }
                // Note: Add after other child-elements requiring dispatchEvent=true (factbox).
                if (elements.bodytext) {
                    pusher(api.v1.model.query.getModelByType('bodytext'), null, null, 'fields.bodytext', true);
                }

                const addedConfig = {
                    ...config,
                    clientExtenstionJs: 'tansa4ClientExtensionSimple.js',
                    userId: api.v1.user.getUserEmail(),
                    parentAppId: 'ed527f00-6109-11ed-b10c-5974977ab271',
                    parentAppVersion: '',
                    requireProofingAttribute: 'true'
                };

                if (tansaInstance) {
                    const rect = btn.getBoundingClientRect();
                    tansaInstance.load(targets, addedConfig, rect);
                    return;
                }

                Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./tansa.js */ "./modules/plugins/tansa/tansa.js")).then((module) => {
                    const rect = btn.getBoundingClientRect();
                    tansaInstance = module.tansa;
                    module.tansa.load(targets, addedConfig, rect);
                }).catch((error) => {
                    Sys.logger.warn(`Error loading Tansa-functionality: ${ error }`);
                });
            }, false);
        }

    }
});


/***/ }),

/***/ "./modules/plugins/tansa/tansa.js":
/*!****************************************!*\
  !*** ./modules/plugins/tansa/tansa.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tansa": () => (/* binding */ tansa)
/* harmony export */ });
const tansa = {

    // settings: {
    //     baseUrl: 'https://kommune.tansa.com/tansaclient/',   // Settes i admin
    //     licenseKey: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',  // Settes i admin
    //     userId: '<user-email>',
    //     clientExtenstionJs: 'tansa4ClientExtensionSimple.js',
    //     parentAppId: 'ed527f00-6109-11ed-b10c-5974977ab271', // Labrador CMS
    //     parentAppVersion: '',
    //     requireProofingAttribute: 'true'                     // Kjører kun kontroll på dom-elementer med 'tansa-proofing="true"'
    // }
    load: (targets, settings, rect) => {
        // Required by Tansa to position the menu:
        const btn = document.querySelector('#tansa-menu-section') || lab_api.v1.util.dom.renderTemplate(`<div id="tansa-menu-section">
            <input id="content_tansaButton" type="button" value="Display Tansa-menu">
        </div>`, {}, true);
        btn.setAttribute('style', `position:fixed; top: ${ rect.top - 20 }px; left: ${ rect.left }px; height:0;`);
        document.body.appendChild(btn);
        for (const item of targets) {
            const domElement = tansa.getDomElement(item);
            if (domElement) {
                domElement.setAttribute('tansa-proofing', 'true');
            }
        }
        document.defaultView.tansa4ClientExtensionPlugin = {
            replaceText: (tansaReplaceTextFunRef, index, startPos, endPos, replacement, occurrenceNo, textToReplace) => {
                tansaReplaceTextFunRef();
                document.defaultView.tansa.hasModifications = true;
            }
        };
        const tansaLoaderScript = document.getElementById('tansaLoaderScript');
        if (!tansaLoaderScript) {
            document.defaultView.tansa = {
                settings
            };
            document.defaultView.beforeProofing = () => {
                document.defaultView.tansa.hasModifications = false;
            };
            document.defaultView.afterProofing = (cancelled) => {
                if (document.defaultView.tansa.hasModifications) {
                    document.defaultView.tansa.hasModifications = false;
                    tansa.save(targets);
                }
            };
            const script = document.createElement('script');
            script.src = `${ settings.baseUrl }initTansaLoader.js?${ new Date().getTime() }`;
            document.querySelector('head').appendChild(script);
        } else if (document.defaultView.tansa4ClientExtension && typeof document.defaultView.tansa4ClientExtension.initMenu === 'function') {
            document.defaultView.tansa4ClientExtension.initMenu();
        } else {
            console.warn('[Tansa] Error: tansa4ClientExtension missing/incomplete.');
        }
    },

    getDomElement(item) {
        if (!item.model && !item.domModel) {
            return null;
        }
        const view = lab_api.v1.view.getView(item.domModel || item.model);
        const markup = view.getMarkup();
        return item.selector ? markup.querySelector(item.selector) : markup;
    },

    save: (targets) => {
        for (const item of targets) {
            const domElement = tansa.getDomElement(item);
            if (domElement && !domElement.classList.contains('lab-defaultTextValue')) {
                item.value = domElement.innerHTML;
            }
        }
        for (const item of targets) {
            tansa.saveTarget(item);
        }
        lab_api.v1.app.save();
    },

    saveTarget: (item) => {
        if (!item.dispatchEvent) {
            // Use standard set method for models:
            const view = lab_api.v1.view.getView(item.model);
            view.set(item.path, item.value, true);
        } else {
            setTimeout(() => {
                // Dispatch click and blur events to trigger the model update through connected text tool.
                // This ensures that logic for removing DOM of child elements etc. (bodytext) are run.
                const domElement = tansa.getDomElement(item);
                if (!domElement) { return; }
                domElement.innerHTML = item.value;
                domElement.dispatchEvent(new Event('click'));
                setTimeout(() => {
                    domElement.dispatchEvent(new Event('blur'));
                }, 100);
            }, 200);
        }
    }

};


/***/ }),

/***/ "./modules/plugins/textassistant/Field.js":
/*!************************************************!*\
  !*** ./modules/plugins/textassistant/Field.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Field": () => (/* binding */ Field)
/* harmony export */ });
class Field {

    constructor(data, value) {
        this.path = data.path;
        this.name = data.name;
        this.label = data.label;
        this.value = value;
        this.archive = [];
        if (value) {
            this.archive.push(value);
        }
        this.index = 0;
        this.active = true;
        this.ui = {};
    }

    setKey(key, value) {
        this[key] = value;
    }

    setValue(value) {
        if (value && !this.archive.includes(value)) {
            this.archive.push(value);
        }
        this.value = value;
        this.index = this.archive.indexOf(value) || 0;
        this.updateUI();
    }

    updateValue(value) {
        if (value && !this.archive.includes(value)) {
            this.setValue(value);
        }
    }

    navigate(steps) {
        const index = this.index + steps;
        if (index >= this.archive.length) {
            return;
        }
        if (index < 0) {
            return;
        }
        this.setValue(this.archive[index]);
    }

    updateUI() {
        if (!this.ui.element) { return; }
        this.ui.element.value = this.value;
        this.ui.nav.labelLeft.textContent = this.index + 1;
        this.ui.nav.labelRight.textContent = this.archive.length;
    }

}


/***/ }),

/***/ "./modules/plugins/textassistant/Group.js":
/*!************************************************!*\
  !*** ./modules/plugins/textassistant/Group.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Group": () => (/* binding */ Group)
/* harmony export */ });
/* harmony import */ var _Field_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Field.js */ "./modules/plugins/textassistant/Field.js");
/**
 * Group
 * Holds a prompt for one or more fields
 */



class Group {

    /*
    {
        "name": "title_subtitle",
        "label": "Title / subtitle",
        "prompt": "Act as a professional reporter working as online frontpage editor. Your goal is to maximize traffic to your story, without producing clickbait. Writing style: {{ style }}. Writing Tone: {{ tone }}. Return a JSON-object with text in same language as input text in this format: { \"title\": \"A highly readable title of the article optimized for teasing visitors to read the article, maximum 8 words\", \"subtitle\": \"One sentence abstract of the article, that works well with the title\" }",
        "active": true,
        "items": [{
            "path": "fields.title",
            "name": "title"
        }, {
            "path": "fields.subtitle",
            "name": "subtitle"
        }]
    }
    */

    constructor(data, getter) {
        this.name = data.name;
        this.label = data.label;
        this.prompt = data.prompt;
        this.showOnPanel = data.showOnPanel;
        this.active = data.active;
        this.fields = (data.fields || []).map((field) => new _Field_js__WEBPACK_IMPORTED_MODULE_0__.Field(field, getter(field.path)));
        this.ui = {};
    }

    setKey(key, value) {
        this[key] = value;
    }

}


/***/ }),

/***/ "./modules/plugins/textassistant/Manager.js":
/*!**************************************************!*\
  !*** ./modules/plugins/textassistant/Manager.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FACTBOX_TYPES": () => (/* binding */ FACTBOX_TYPES),
/* harmony export */   "Manager": () => (/* binding */ Manager)
/* harmony export */ });
/* harmony import */ var _Group_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Group.js */ "./modules/plugins/textassistant/Group.js");
/* harmony import */ var _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/helpers/ContentLanguages.js */ "./modules/lib/helpers/ContentLanguages.js");
/* harmony import */ var _aside_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./aside.js */ "./modules/plugins/textassistant/aside.js");





const FACTBOX_TYPES = {
    SUMMARY: 'summary',
    BULLETPOINTS: 'bulletpoints'
};

class Manager {

    constructor(api, model, config = {}) {
        this.api = api;
        this.rootModel = this.api.v1.model.query.getRootModel();

        this.model = model;
        this.state = {
            uiReady: false,
            cssLoaded: false
        };
        this.settings = {
            minLength: 500
        };
        this.writingStyles = Array.isArray(config.writingStyles) ? config.writingStyles : [];
        this.writingTones = Array.isArray(config.writingTones) ? config.writingTones : [];
        this.modal = null;
        this.menuItem = null;
        this.userSettings = null;
        this.getter = this.getFieldValue.bind(this);
        this.groups = this.setupGroups(Array.isArray(config.content) ? config.content : []);
        this.factboxPrompts = config.factbox.prompts;
        this.paths = this.resolvePaths();
        this.language = 'the same language as the provided article';
    }

    setupLanguage() {
        let { language } = this;

        // Get site language
        this.languageCode = this.api.v1.config.get('contentLanguage');
        if (this.languageCode) {
            for (const contentLanguage of _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
                if (contentLanguage.code === this.languageCode) {
                    language = contentLanguage.name;
                }
            }
        }

        // Get seo language
        const seolanguageCode = this.rootModel.get('fields.seolanguage');
        if (seolanguageCode) {
            for (const contentLanguage of _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
                if (contentLanguage.code === seolanguageCode) {
                    language = contentLanguage.name;
                }
            }
        }
        return language;
    }

    resolvePaths() {
        const result = {};
        for (const group of this.groups) {
            for (const field of group.fields) {
                result[field.path] = {
                    group,
                    field
                };
            }
        }
        return result;
    }

    // (object) { group, field }
    getGroupObjectByPath(path) {
        return this.paths[path] || {};
    }

    // (Group)
    getGroupByName(name) {
        for (const group of this.groups) {
            if (group.name === name) {
                return group;
            }
        }
        return null;
    }

    // (Promise) Resolves a string with a value for specified path
    fetchByPath(path, { tone, style } = {}, aiSettings = {}) {
        return new Promise((resolve, reject) => {
            const { group, field } = this.getGroupObjectByPath(path);
            if (!group || !field) {
                reject(new Error(`Missing required group/field for path "${ path }".`));
                return;
            }
            this.fetchByGroup(group, [field], { tone, style }, aiSettings, true).then((values) => {
                resolve(values[path]);
            }).catch((error) => {
                reject(error);
            });
        });
    }

    // (Promise) Resolves an object with paths and values
    fetchByName(name, { tone, style } = {}, aiSettings = {}) {
        return new Promise((resolve, reject) => {
            const group = this.getGroupByName(name);

            if (!group) {
                reject(new Error(`Missing required group by name "${ name }".`));
                return;
            }
            this.fetchByGroup(group, group.fields, { tone, style }, aiSettings, true).then((values) => {
                resolve(values);
            }).catch((error) => {
                reject(error);
            });
        });
    }

    fetchByGroupName(name, aiSettings = { model: 'gpt-4o' }, options = {}, retryFetch = false) {
        console.log('FETCH BY GROUP NAME');
        return new Promise((resolve, reject) => {
            const dataOptions = options;
            const group = this.getGroupByName(name);
            if (['title_subtitle', 'some_content', 'tags', 'seo_content', 'paywallSalesPitch'].includes(name)) {
                const params = { featureName: name };
                lab_api.v1.ns.get('textAssistant.generateContent')(this.rootModel, null, null, params);

            }
            if (!group) {
                reject(new Error(`Missing required group by name "${ name }".`));
                return;
            }

            if (!group) {
                reject(new Error(`Missing required group`));
                return;
            }
            if (!dataOptions.language) {
                dataOptions.language = this.setupLanguage();
            }
            const prompt = `${ this.api.v1.util.dom.renderTemplate(group.prompt, dataOptions) }`;
            console.log('Prompt: ', prompt);
            this.api.v1.generate.text({
                prompt, service: 'chatCompletions', model: aiSettings.model, paths: group.fields.map((field) => field.path)
            }).then((result) => {
                resolve(result);
            }).catch((error) => {
                console.log('[TextAssistant] Error fetching suggestions: ', error);
                if (retryFetch === true) {
                    console.log('[TextAssistant] Attempting to retry a new fetch');

                    this.fetchByGroupName(name, aiSettings, options, false);
                } else {
                    reject(error);
                }
            });
        });
    }

    fetchByGroup(group, fields, { tone, style } = {}, aiSettings = { model: 'gpt-4o' }, retryFetch = false) {
        console.log('FETCH BY GROUP');
        return new Promise((resolve, reject) => {
            const bodytext = this.getBodytext();
            if (!bodytext) {
                resolve({});
                return;
            }
            if (!group || !fields.length) {
                reject(new Error(`Missing required group/fields`));
                return;
            }
            /*
            if (!fields.filter((field) => field.active).length) {
                resolve({});
                return;
            }

            if (group.active === false) {
                resolve({});
                return;
            } */
            if (['title_subtitle', 'some_content', 'tags', 'seo_content', 'paywallSalesPitch'].includes(group.name)) {
                const params = {
                    featureName: group.name,
                    updateModel: false
                };
                lab_api.v1.ns.get('textAssistant.generateContent')(this.rootModel, null, null, params)
                    .then((result) => {
                        const values = this.update(result, fields);
                        resolve(values);
                    }).catch((error) => {
                        console.log('[TextAssistant] Error fetching suggestions: ', error);
                        reject(error);
                    });

            } else {
                const language = this.setupLanguage();

                const prompt = `${ this.api.v1.util.dom.renderTemplate(group.prompt, {
                    style, tone, bodytext, language
                }) }`;
                this.api.v1.generate.text({
                    prompt, service: 'chatCompletions', model: aiSettings.model, paths: fields.map((field) => field.path)
                }).then((result) => {
                    const values = this.update(result, fields);
                    resolve(values);
                }).catch((error) => {
                    if (retryFetch === true) {
                        this.fetchByGroup(group, fields, { tone, style }, aiSettings, false);
                    } else {
                        reject(error);
                    }
                    reject(error);
                });
            }

        });
    }

    generateCaption(nodeModel, view, aiSettings = { model: 'gpt-4o' }, retry = false) {

        let imageModel = nodeModel;
        if (nodeModel.getType() !== 'image') {
            imageModel = lab_api.v1.model.query.getChildOfType(nodeModel, 'image');
        }
        if (!imageModel) {
            Sys.logger.warn('Neither current model nor children of model has type "image". A generated caption cannot be stored.');
            return;
        }

        const bodytext = this.getBodytext();
        const url = imageModel.get('filtered.viewport_list.desktop.url') || imageModel.get('filtered.viewport_list.mobile.url') || '';
        const domainUrl = url.substring(0, url.indexOf('?') + 1);
        const imageUrl = `${ domainUrl }width=1000`;
        const imageCaption = imageModel.get('fields.imageCaption');
        const group = this.getGroupByName('image_caption');
        const language = this.setupLanguage();

        const elements = [...view.markup.querySelectorAll(`[data-lab-editable-path='fields.imageCaption']`)];
        for (const element of elements) {
            element.classList.add('lab-busy', 'lab-busy-top');
        }

        const promptString = `${ this.api.v1.util.dom.renderTemplate(group.prompt, {
            bodytext, imageCaption, language, imageUrl
        }) }`;

        // Prompt - Gpt-4-vision-documentation: https://platform.openai.com/docs/guides/vision?lang=curl
        const prompt = [
            {
                type: 'text',
                text: promptString
            },
            {
                type: 'image_url',
                image_url: {
                    url: imageUrl
                }
            }
        ];

        // Request image caption from openAi
        this.api.v1.generate.text({
            prompt, service: 'chatCompletions', model: aiSettings.model, paths: 'imageCaption', role: 'user'
        }).then((result) => {
            let generatedData = this.cleanUpJsonString(result);
            try {
                generatedData = JSON.parse(generatedData);
            } catch (error) {
                console.warn('Error parsing json-string: ', error);
                if (retry === true) {
                    console.log('Attempting to retry fetching');
                    this.generateCaption(nodeModel, view, aiSettings, false);
                }
            }

            // Update caption
            const originalCaption = imageModel.get('fields.imageCaption') || '';
            let newCaption = generatedData.caption;
            if (generatedData.keyword && generatedData.keyword.length > 0) {
                newCaption = `${ generatedData.keyword.toUpperCase().trim() }: ${ generatedData.caption.trim() }`;
            }
            if (newCaption) {
                imageModel.set('fields.imageCaption', newCaption);
            }

            // Update byline
            if (generatedData.byline && generatedData.byline.length > 0 && originalCaption.includes(generatedData.byline)) {
                const byline = imageModel.get('fields.byline');
                if (!byline || byline.length === 0) {
                    imageModel.set('fields.byline', generatedData.byline);
                }
            }
            // Remove class lab-busy
            for (const element of elements) {
                element.classList.remove('lab-busy', 'lab-busy-top');
            }
        }).catch((error) => {
            // Remove class lab-busy
            for (const element of elements) {
                element.classList.remove('lab-busy', 'lab-busy-top');
            }
            console.warn('[TextAssistant] Error fetching suggestions: ', error);
            if (retry === true) {
                console.log('Attempting to retry fetching');
                this.generateCaption(nodeModel, view, aiSettings, false);
            }
        });
    }

    // (Promise)
    uiFetchByGroup(group, fields) {
        return new Promise((resolve, reject) => {
            const tone = this.getUserSetting('writingTone');
            const style = this.getUserSetting('writingStyle');
            if (group.ui.refresh) {
                group.ui.refresh.classList.add('lab-disabled', 'lab-busy');
            }
            this.fetchByGroup(group, fields, { tone, style }).then((values) => {
                if (group.ui.refresh) {
                    group.ui.refresh.classList.remove('lab-disabled', 'lab-busy');
                }
                resolve(values);
            }).catch((error) => {
                if (group.ui.refresh) {
                    group.ui.refresh.classList.remove('lab-disabled', 'lab-busy');
                }
                console.log('error: ', error);
                reject(error);
            });
        });
    }

    // (Promise) Resolves an array of objects containing keys and values of suggestions
    uiFetchAll() {
        return new Promise((resolve, reject) => {
            const promises = this.groups.map((group) => this.uiFetchByGroup(group, group.fields));
            Promise.all(promises).then((results) => {
                resolve(results);
            }).catch((error) => {
                console.log('error: ', error);
                reject(error);
            });
        });
    }

    setupGroups(data) {
        return data.map((group) => new _Group_js__WEBPACK_IMPORTED_MODULE_0__.Group(group, this.getter));
    }

    setupUIForGroup(group) {
        for (const field of group.fields) {
            this.setupUIForField(field, group);
        }
        const ui = {
            container: this.api.v1.util.dom.renderTemplate(`<div class="lab-formgroup lab-grid-large-2 lab-grid-small-12 lab-align-right">
                <span data-group="${ group.name }" class="lab-btn lab-generate" title="Generate suggestion for ${ group.label }" style="margin-top:50px; position:relative;">Generate</span>
            </div>`, {}, true),
            refresh: null
        };
        ui.refresh = ui.container.querySelector('[data-group]');
        ui.refresh.addEventListener('click', (event) => {
            this.uiFetchByGroup(group, group.fields);
        });
        group.setKey('ui', ui);
    }

    setupUIForField(field, group) {
        const result = {
            nav: {}
        };
        const active = this.getUserSetting(`${ field.name }.active`) !== false;
        field.setKey('active', active);
        const size = 10 / group.fields.length;
        result.container = this.api.v1.util.dom.renderTemplate(`<div class="lab-formgroup lab-grid-large-${ size } lab-grid-small-12">
            <div class="lab-formgroup-item">
                <div class="lab-grid lab-valign-center" style="float:right; margin-top: -8px;">
                    <div class="lab-grid lab-valign-center">
                        <span class="nav-left lab-btn lab-text lab-small labicon-arrow_left"></span> &nbsp;
                        <span class="nav-index-left">0</span> / <span class="nav-index-right">${ field.archive.length }</span> &nbsp;
                        <span class="nav-right lab-btn lab-text lab-small labicon-arrow_right"></span>
                    </div>
                    <span class="settings-btn lab-btn lab-small" title="Settings" style="margin-right:0.3em; margin-left:0.3em;">Settings</span>
                    <span class="insert-btn lab-btn lab-small" title="Insert ${ field.label } on page">Insert</span>
                </div>
                <label for="completion-element-${ field.path }"><b>${ field.label }</b></label>
                <textarea name="${ field.path }">${ field.value }</textarea>
            </div>
        </div>`, {}, true);

        result.checkbox = this.api.v1.util.dom.renderTemplate(`<p class="lab-para"><label>${ field.label } <input type="checkbox" title="Use field ${ field.name }" name="${ field.path }-active" style="float:left;" ${ active ? 'checked="checked"' : '' }></label></p>`, {}, true);
        result.nav.left = result.container.querySelector('.nav-left');
        result.nav.labelLeft = result.container.querySelector('.nav-index-left');
        result.nav.right = result.container.querySelector('.nav-right');
        result.nav.labelRight = result.container.querySelector('.nav-index-right');
        const insertBtn = result.container.querySelector('.insert-btn');
        const settingsBtn = result.container.querySelector('.settings-btn');
        settingsBtn.addEventListener('click', (event) => {
            const params = {
                featureName: group.name,
                disableGenerateButton: true
            };
            this.api.v1.ns.get('textAssistant.openFeatureSettings')(this.rootModel, null, null, params);
        });

        result.element = result.container.querySelector('textarea');
        result.checkbox.querySelector('input').addEventListener('change', (event) => {
            field.setKey('active', event.currentTarget.checked);
            if (event.currentTarget.checked) {
                result.element.removeAttribute('disabled');
            } else {
                result.element.setAttribute('disabled', 'disabled');
            }
            this.setUserSetting(`${ field.name }.active`, event.currentTarget.checked);
        });

        // Listeners
        result.element.addEventListener('change', (event) => {
            field.setValue(event.currentTarget.value.trim());
        });
        insertBtn.addEventListener('click', (event) => {
            this.useCurrent(false, [field], false);
        });

        result.nav.left.addEventListener('click', (event) => {
            field.navigate(-1);
        });
        result.nav.right.addEventListener('click', (event) => {
            field.navigate(1);
        });

        field.setKey('ui', result);
        field.setValue(field.value);
    }

    getUserSetting(path) {
        if (this.userSettings === null) {
            const pluginSettings = this.api.v1.user.getField('plugin') || {};
            this.userSettings = pluginSettings.textassistant || {};
        }
        return this.api.v1.util.object.get(path, this.userSettings, true);
    }

    setUserSetting(path, value) {
        this.api.v1.util.object.set(path, value, this.userSettings);
        const current = this.api.v1.user.getField('plugin') || {};
        current.textassistant = this.userSettings;
        this.api.v1.user.setField('plugin', { ...current });
    }

    // (Object)
    update(txt, fields) {
        if (txt) {
            try {
                // May return '{ ... }' or something like 'Json-object: { ... }'
                const jsonString = this.cleanUpJsonString(txt);

                const result = JSON.parse(jsonString);
                const pathResult = {};
                for (const field of fields) {
                    if (result[field.name]) {
                        let value = result[field.name] || '';
                        if (field.name === 'tags') {
                            value = [...result[field.name]];
                            const primaryTags = this.model.get('primaryTags');
                            if (primaryTags && primaryTags.section) {
                                value.push(primaryTags.section);

                            }
                        }
                        field.setValue(value);
                        pathResult[field.path] = value;
                    }
                }
                return pathResult;
            } catch (error) {
                console.warn('Error parsing json-string: ', error);
            }
        }
        return {};
    }

    cleanUpJsonString(data) {
        let jsonString = data.trim();

        if (jsonString.includes('{') && jsonString.indexOf('{') > 0) {
            jsonString = jsonString.substring(jsonString.indexOf('{'));
        }

        if (!jsonString.includes('{')) {
            jsonString = `{${ jsonString }`;
        }

        if (!jsonString.includes('}')) {
            jsonString = `${ jsonString }}`;
        }

        // Test to choose the correct '}'. Ignore '}' with '\' ahead
        if (jsonString.match(/}/g).length > 1) {
            jsonString = jsonString.match(/(.|\n)*?(?<!\\)}/);
        }

        if (jsonString.includes('}') && jsonString.indexOf('}') < jsonString.length) {
            jsonString = jsonString.substring(0, jsonString.indexOf('}') + 1);
        }

        jsonString = jsonString.trim();
        return jsonString;
    }

    /**
     * @returns {string}
     */
    getBodytext() {
        return this.api.v1.util.string.stripTags(this.model.get('fields.bodytext') || '', ' ');
    }

    /**
     * @returns {boolean}
     */
    allowSuggestion() {
        return this.getBodytext().length > this.settings.minLength;
    }

    getFieldValue(field) {
        const value = this.model.get(field);
        if (!value) {
            return '';
        }
        if (typeof value === 'string') {
            return this.api.v1.util.string.stripTags(value);
        }
        return value;
    }

    hasFieldValue(field) {
        const value = this.model.get(field.path);
        if (!value) {
            return false;
        }
        if (field.name === 'tags') {
            return false;
        } // Ignore existing tags
        return true;
    }

    // (bool)
    hasPath(path) {
        for (const group of this.groups) {
            for (const field of group.fields) {
                if (field.path === path) {
                    return true;
                }
            }
        }
        return false;
    }

    useCurrent(checkCurrent, inputFields = [], closeModal = true) {
        const fields = inputFields || [];
        if (!fields.length) {
            for (const group of this.groups) {
                fields.push(...group.fields);
            }
        }
        for (const field of fields) {
            if (field.value) {
                if (!checkCurrent || (checkCurrent && !this.hasFieldValue(field))) {
                    if (field.name === 'tags') {
                        const tags = (Array.isArray(field.value) ? field.value : field.value.split(',')).map((tag) => tag.trim().toLowerCase());
                        const currentTags = this.model.get(field.path) || [];
                        const newTags = [...currentTags];
                        for (const tag of tags) {
                            if (!newTags.includes(tag)) {
                                newTags.push(tag);
                            }
                        }
                        this.model.set(field.path, newTags);
                    } else {
                        this.model.set(field.path, field.value);
                    }
                }
            }
        }
        if (closeModal && this.modal) {
            this.modal.close();
        }
    }

    listen() {
        // Only start auto-suggest for empty articles.
        if (this.model.get('fields.bodytext')) {
            return;
        }
        const listener = (model, path, value) => {
            if (value.length > this.settings.minLength) {
                this.api.v1.model.bindings.unbind(this.model, 'fields.bodytext', listener);
                this.menuItem = document.querySelector('#labrador-menu .text-completion');
                if (!this.getUserSetting('auto.enabled')) {
                    return;
                }
                this.uiFetchAll().then((results) => {
                    if (!this.modal) {
                        this.useCurrent(true);
                    }
                });
            }
        };
        this.api.v1.model.bindings.bind(this.model, 'fields.bodytext', listener);
    }

    onPaths() {
        return {
            'fields.seolanguage': {
                node: 'fields.seolanguage'
            }
        };
    }

    getDisclaimer() {
        return `<p class="lab-info"><b>This function in Labrador CMS is using advanced artificial intelligence developed by OpenAI API.</b><br>
        Text from the article is not used to train or improve the public data models. 
        Use generated text from these functions as suggestions, and be sure to manually verify them. 
        Labrador CMS shall not be held liable for any use of the generated text. 
        For now the use of these functions are covered by your Labrador CMS license. We might change this in the future, when we know more about our operational costs.</p>`;
    }

    getWritingStylePlaceholder(selectedWritingStyle, callback_method) {
        let callback = callback_method;
        if (callback === undefined) {
            callback = (event) => {
                this.setUserSetting('writingStyle', event.target.value);
            };
        }

        return {
            element: this.api.v1.ui.element.getSelectElement({
                value: selectedWritingStyle || this.getUserSetting('writingStyle'),
                options: [{ value: '', label: 'Default style' }, ...this.writingStyles.map((item) => ({
                    value: item,
                    label: item
                }))],
                attributes: [{
                    name: 'id', value: 'completion-writingStyle'
                }],
                events: [{
                    name: 'change',
                    callback
                }]
            }),
            selector: `.completion-container-style`
        };
    }

    getWritingTonePlaceholder(selectedWritingTone, callback_method) {
        let callback = callback_method;
        if (callback === undefined) {
            callback = (event) => {
                this.setUserSetting('writingTone', event.target.value);
            };
        }
        return {
            element: this.api.v1.ui.element.getSelectElement({
                value: selectedWritingTone || this.getUserSetting('writingTone'),
                options: [{ value: '', label: 'Default tone' }, ...this.writingTones.map((item) => ({
                    value: item,
                    label: item
                }))],
                attributes: [{
                    name: 'id', value: 'completion-writingTone'
                }],
                events: [{
                    name: 'change',
                    callback
                }]
            }),
            selector: `.completion-container-tone`
        };
    }

    getLanguageName(languageCode, cleanUp = true) {
        let language = null;

        // Get name of langauge
        for (const lang of _lib_helpers_ContentLanguages_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
            if (lang.code === languageCode) {
                language = lang.name;

            }
        }

        // Clean up language name
        if (language && cleanUp === true) {
            if (language.includes('-')) {
                language = language.substring(0, language.indexOf('-'));
            }
            if (/\(.*?\)/.test(language)) {
                language = language.replaceAll(/\(.*?\)/g, '');
            }
            language = language.trim();
        }
        language = language.trim();
        return language;
    }

    displayUI() {
        if (!this.state.cssLoaded) {
            this.api.v1.util.dom.addFile('css', '/view-resources/baseview/modules/plugins/textassistant/textassistant.css');
            this.state.cssLoaded = true;
        }

        if (!this.state.uiReady) {
            for (const group of this.groups) {
                if (group.showOnPanel === true) {
                    this.setupUIForGroup(group);
                }

            }
            this.state.uiReady = true;
            this.menuItem = document.querySelector('#labrador-menu .text-completion');
        } else {
            // Re-display
            for (const group of this.groups) {
                for (const field of group.fields) {
                    field.updateValue(this.getFieldValue(field.path));
                }
            }
        }

        this.menuItem.classList.remove('lab-selected');

        // const asideItems = [];
        const placeholders = [];
        const markup = [];
        for (const group of this.groups) {
            if (group.showOnPanel === true) {
                for (const field of group.fields) {
                    // asideItems.push({ placeholder: `completion-checkbox-${ field.name }` });
                    markup.push(`<div class="completion-container-${ field.name }"></div>`);
                    placeholders.push({ element: field.ui.container, selector: `.completion-container-${ field.name }` });
                    placeholders.push({ element: field.ui.checkbox, selector: `.completion-checkbox-${ field.name }` });
                }
                markup.push(`<div class="completion-group-${ group.name }">ccc</div>`);
                placeholders.push({ element: group.ui.container, selector: `.completion-group-${ group.name }` });
            }
        }

        const disclaimer = this.getDisclaimer();

        this.modal = this.api.v1.ui.modal.dialog({
            container: {
                css: 'baseview-textcompletion',
                width: 1400
            },
            content: {
                header: 'Labrador AI - Content generation',
                markup: `<div class="lab-grid">${ markup.join('') }${ disclaimer }</div>`
            },
            placeholders,
            eventHandlers: [{
                selector: '#button-suggest',
                event: 'click',
                callback: () => {
                    this.uiFetchAll();
                }
            }, {
                selector: '#button-insert',
                event: 'click',
                callback: () => {
                    this.useCurrent();
                }
            }],
            callbacks: {
                didDisplay: (modal) => {

                }
            },
            footer: {
                buttons: [
                    {
                        value: 'Generate suggestions',
                        type: 'button',
                        id: 'button-suggest',
                        class: 'lab-generate',
                        highlight: false
                    },
                    {
                        value: 'Insert all fields',
                        type: 'button',
                        id: 'button-insert',
                        highlight: true
                    }
                ]
            }
        });
    }

}


/***/ }),

/***/ "./modules/plugins/textassistant/aside.js":
/*!************************************************!*\
  !*** ./modules/plugins/textassistant/aside.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`<div>
    {{ #content }}
    <div class="lab-aside-settings">
        <h4 class="lab-title">Target fields</h4>
        {{ #items }}
        <div class="{{{ placeholder }}}"></div>
        {{ /items }}
    </div>
    <div class="lab-aside-settings">
        <h4 class="lab-title">Language</h4>
        <p class="lab-info">You can autodetect the language or use your page language.</p>
        <p class="lab-para"><label>Autodetect language<input type="checkbox" title="Automatically detect language" id="auto-language" style="float:left;"></label></p>
        <p class="lab-para"><label><span id="selectedLang">{{ languageName }}</span><input type="checkbox" checked title="Use page language" id="page-language" style="float:left;"></label></p>

        
        <select name="fields.seolanguage" id="languages">
            <option value="">Select language:</option>
            {{ #languages }}
            <option value="{{ code }}"{{ #selected }} selected{{ /selected }}>{{ name }} ({{ code }})</option>
            {{ /languages }}
        </select>
    </div>

    {{ /content }}
</div>`);


/***/ }),

/***/ "./modules/plugins/textassistant/index.js":
/*!************************************************!*\
  !*** ./modules/plugins/textassistant/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Manager.js */ "./modules/plugins/textassistant/Manager.js");
/* harmony import */ var _lib_helpers_LabradorAi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/helpers/LabradorAi.js */ "./modules/lib/helpers/LabradorAi.js");
/**
 * Use-cases:
 * - Vise et gui for alle felt, få forslag for alt
 * - Finne forslag for alt i bakgrunnen, oppdatere knapp i Labrador-menyen som viser at nå har vi noe
 * - Forslag for ett felt i artikkel-settings
 * - Forslag for ett felt via tekst-verktøy
 */




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'TextAssistant',
    description: 'Labrador assistive AI tools',
    version: '2.0.0',
    predicate: (api) => api.v1.model.root.getType() === 'page_article' && api.v1.config.get('plugins.textassistant.enable'),
    entry: class {

        onReady(api) {
            this.api = api;
            this.manager = new _Manager_js__WEBPACK_IMPORTED_MODULE_0__.Manager(api, this.api.v1.model.query.getRootModel(), this.api.v1.config.get('plugins.textassistant'));
            this.labradorAi = new _lib_helpers_LabradorAi_js__WEBPACK_IMPORTED_MODULE_1__.LabradorAi(api, this.api.v1.model.query.getRootModel());

            // Define the API-methods for the textAssistant plugin and Labrador AI tools
            this.api.v1.ns.set('textAssistant', {
                // Generate content for the current element, use Labrador AI to request generation
                generateContent: (model, view, item, params) => {
                    const [prompt, aiIntegrationSettings] = this.labradorAi.preprocessGeneration(model, view, item, params);
                    return this.labradorAi.requestGeneration(prompt, aiIntegrationSettings)
                        .then((result) => this.labradorAi.postprocessGeneration(model, view, item, params, result))
                        .catch((error) => {
                            Sys.logger.warn(`[Labrador Ai - ${ params.featureName }] Error generating content:`, error);
                            lab_api.v1.ui.modal.dialog({
                                container: {
                                    state: {
                                        error: true
                                    }
                                },
                                content: {
                                    title: 'Error: Labrador AI',
                                    description: `An error has occurred: ${ error }`
                                },
                                footer: {
                                    buttons: [
                                        {
                                            type: 'submit',
                                            value: 'Close',
                                            highlight: true
                                        }
                                    ]
                                }
                            });
                            if (view) {
                                this.labradorAi.modifyClassNamesInView(view, { remove: ['lab-busy', 'lab-busy-top'], add: ['lab-highlight-error'] });
                            }
                        });
                },
                // Open settings modal for AI feature
                openFeatureSettings: (model, view, item, params) => {
                    // Todo: It should be possible to provide a path to a template for a specific feature
                    console.log(model, view, item, params);
                    this.labradorAi.openFeatureSettings(model, view, item, params);
                },

                generateCaption: (model, view, item, params) => {
                    // console.log(model, view, item, params);
                    this.manager.generateCaption(model, view, { model: 'gpt-4o' }, true);
                },

                fetchByGroupName: (name, aiSettings, options) => this.manager.fetchByGroupName(name, aiSettings, options, true),

                // await lab_api.v1.ns.get('textAssistant.fetchByPath')('fields.title', { tone: 'Sarcastic' })
                fetchByPath: (path, options, aiSettings) => this.manager.fetchByPath(path, options, aiSettings),

                // await lab_api.v1.ns.get('textAssistant.fetchByPath')('fields.title', { tone: 'Sarcastic' })
                fetchByName: (path, options) => this.manager.fetchByName(path, options),

                // await lab_api.v1.ns.get('textAssistant.cleanUpJsonString')
                cleanUpJsonString: (data) => this.manager.cleanUpJsonString(data),

                // (void) Set up a listener for the bodytext. Create suggestions automatically
                listen: () => {
                    this.manager.listen();
                },

                // (bool) Check if suggestions can be made
                allow: () => this.manager.allowSuggestion(),

                // (void) Allow Labrador text-tools to insert suggestion for current element
                textToolSuggestion: (model, view, menuItem, params) => {
                    const { tool } = menuItem.getMenu();
                    if (tool) {
                        const { key } = tool.settings;
                        if (this.manager.hasPath(key)) {
                            tool.end();
                            let elements = [];
                            const toggle = (on) => {
                                for (const element of elements) {
                                    if (on) {
                                        element.classList.add('lab-busy', 'lab-busy-top');
                                    } else {
                                        element.classList.remove('lab-busy', 'lab-busy-top');
                                    }
                                }
                            };
                            setTimeout(() => {
                                elements = [...view.getMarkup().querySelectorAll(`[data-lab-editable-path='${ key }']`)];
                                toggle(true);
                            }, 100);
                            this.manager
                                .fetchByPath([key], true)
                                .then((result) => {
                                    if (result) {
                                        view.set(key, result);
                                    } else {
                                        console.log(`Error: Required path ${ key } did not return.`);
                                    }
                                    toggle(false);
                                })
                                .catch((error) => {
                                    console.log('error: ', error);
                                    toggle(false);
                                });
                        }
                    }
                },

                // (void) Display UI for all fields
                displayUI: (model, view, item, params) => {
                    this.manager.displayUI();
                }
            });
        }

    }
});


/***/ }),

/***/ "./modules/plugins/youtube/callback/YouTubeEditor.js":
/*!***********************************************************!*\
  !*** ./modules/plugins/youtube/callback/YouTubeEditor.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YouTubeEditor": () => (/* binding */ YouTubeEditor)
/* harmony export */ });
class YouTubeEditor {

    constructor(model, view) {
        this.model = model;
        this.view = view;

        this.playerAPI = null;
        this.fields = {
            video_start: this.model.get('fields.video_start') || 0,
            video_end: this.model.get('fields.video_end') || null
        };
        this.sliderUpdateFrequency = 500;
        this.duration = null;
        this.progress = this.fields.video_start;

        this.playButton = null;
        this.timestampElement = null;
        this.progressElement = null;
        this.startMarker = null;
        this.endMarker = null;
        this.croppedVideoLabel = null;

        this.updater = null;

        this.isActive = false;
        this.isPlaying = false;
    }

    run(markup) {
        this.isActive = true;

        const videoId = this.model.get('fields.vid');
        if (!videoId) return false;

        if (typeof YT !== 'undefined') {
            this.playerAPI = this.createPlayer(videoId, markup);
        } else {
            window.onYouTubeIframeAPIReady = () => {
                this.playerAPI = this.createPlayer(videoId, markup);
            };
        }

        return true;
    }

    createPlayer(id, markup) {
        return new YT.Player('YouTubeEditorContainer', {
            videoId: id,
            playerVars: {
                controls: 0,
                disablekb: 1
            },
            events: {
                onReady: this.onPlayerReady.bind(this, markup),
                onStateChange: this.onStateChange.bind(this)
            }
        });
    }

    onPlayerReady(markup) {
        this.duration = this.playerAPI.getDuration();
        this.createControls(markup);
        this.setTimestamp(this.fields.video_start);
    }

    onStateChange(state) {
        this.setIsPlaying(state.data == 1);
        if (state.data === 0) {
            this.progressElement.value = this.duration;
        }
    }

    setTimestamp(seconds) {
        this.playerAPI.seekTo(seconds);
        this.progress = this.playerAPI.getCurrentTime();
    }

    setIsPlaying(isPlaying) {
        this.isPlaying = isPlaying;
        if (isPlaying) {
            this.startUpdater();
            this.playButton.classList.add('labicon-pause');
            this.playButton.classList.remove('labicon-play');
        } else {
            this.update();
            this.stopUpdater();
            this.playButton.classList.add('labicon-play');
            this.playButton.classList.remove('labicon-pause');
        }
    }

    createControls(markup) {
        this.progressElement =  markup.querySelector('#progressYouTube');
        this.progressElement.max = this.duration;
        this.progressElement.addEventListener('change', () => {
            this.stopUpdater();
            this.setTimestamp(this.progressElement.value);
        });

        this.startMarker = markup.querySelector('#startMarkerYouTube');
        this.endMarker = markup.querySelector('#endMarkerYouTube');
        this.styleMarker(this.startMarker);
        this.styleMarker(this.endMarker);

        this.playButton = markup.querySelector('#playYouTube');
        this.playButton.addEventListener('click', (e) => {
            e.preventDefault();
            if (this.isPlaying) {
                this.playerAPI.pauseVideo();
            } else {
                this.playerAPI.playVideo();
            }
        });
        // Skip buttons.
        const forwardButton = markup.querySelector('#forwardYouTube');
        forwardButton.addEventListener('click', (e) => {
            e.preventDefault();
            const seconds = 5;
            const timestamp = this.playerAPI.getCurrentTime() + seconds;
            this.setTimestamp(timestamp);
        });
        const backwardButton = markup.querySelector('#backwardYouTube');
        backwardButton.addEventListener('click', (e) => {
            e.preventDefault();
            const seconds = -5;
            const timestamp = this.playerAPI.getCurrentTime() + seconds;
            this.setTimestamp(timestamp);
        });

        const startPointElement = markup.querySelector('#setStartYouTube');
        startPointElement.addEventListener('click', (e) => {
            e.preventDefault();
            const currentTime = this.playerAPI.getCurrentTime();
            if (this.fields.video_end && currentTime > this.fields.video_end) {
                return;
            }

            this.fields.video_start = currentTime;
            this.updateCrop();
            this.save();
        });

        const endPointElement = markup.querySelector('#setEndYouTube');
        endPointElement.addEventListener('click', (e) => {
            e.preventDefault();
            const currentTime = this.playerAPI.getCurrentTime();
            if (this.fields.video_start > currentTime) {
                return;
            }
            this.fields.video_end = currentTime;
            this.updateCrop();
            this.save();
        });

        const resetElement = markup.querySelector('#resetYouTube');
        resetElement.addEventListener('click', (e) => {
            e.preventDefault();
            this.fields.video_start = 0;
            this.fields.video_end = this.duration;
            this.updateCrop();
            this.save();
        });

        this.croppedVideoLabel = markup.querySelector('#cropLabelYouTube');
        this.timestampElement = markup.querySelector('#timestampYouTube');

        this.update();
        this.updateCrop();
    }

    styleMarker(marker) {
        marker.style.pointerEvents = 'none';
        marker.style.top = '50%';
        marker.style.transform = 'translate(-50%, -50%)';
        marker.style.fontSize = '2rem';
    }

    getPrettyTimestamp(time) {
        const seconds = (`0${  Math.floor(time % 60) }`).slice(-2);
        const minutes = (`0${  Math.floor((time / 60) % 60) }`).slice(-2);

        let timestamp = `${ minutes }:${ seconds }`;

        if (this.duration / (60 * 60) > 1) {
            const hours = (`0${  Math.floor((time / (60 * 60)) % 60) }`).slice(-2);
            timestamp = `${ hours }:${ timestamp }`;
        }

        return timestamp;
    }

    stopUpdater() {
        clearInterval(this.updater);
    }

    startUpdater() {
        this.updater = setInterval(this.update.bind(this), this.sliderUpdateFrequency);
    }

    update() {
        this.progress = this.playerAPI.getCurrentTime();
        this.progressElement.value = Math.ceil(this.progress);

        const current = this.getPrettyTimestamp(this.progress);
        const max = this.getPrettyTimestamp(this.duration);

        this.timestampElement.innerText = `${ current } / ${ max }`;
    }

    updateCrop() {
        const startValue = this.fields.video_start;
        const endValue = this.fields.video_end || this.duration;

        const start = this.getPrettyTimestamp(startValue);
        const end = this.getPrettyTimestamp(endValue);

        this.croppedVideoLabel.innerText = `${ start } - ${ end }`;

        this.startMarker.style.left = `${ startValue / this.duration * 100  }%`;
        this.endMarker.style.left = `${ endValue / this.duration * 100  }%`;
    }

    save() {
        this.model.set('fields.video_start', this.fields.video_start);
        this.model.set('fields.video_end', this.fields.video_end);
    }

}


/***/ }),

/***/ "./modules/plugins/youtube/callback/index.js":
/*!***************************************************!*\
  !*** ./modules/plugins/youtube/callback/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./template.js */ "./modules/plugins/youtube/callback/template.js");
/* harmony import */ var _YouTubeEditor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./YouTubeEditor.js */ "./modules/plugins/youtube/callback/YouTubeEditor.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((menu, event) => {
    const { model, view } = menu;

    const editor = new _YouTubeEditor_js__WEBPACK_IMPORTED_MODULE_1__.YouTubeEditor(model, view);

    const dialog = lab_api.v1.ui.modal.dialog({
        container: {
            width: 750
        },
        content: {
            markup: _template_js__WEBPACK_IMPORTED_MODULE_0__["default"]
        },
        callbacks: {
            didDisplay: ({ markup }) => {
                const success = editor.run(markup);
                if (!success) {
                    dialog.close();
                }
            }
        }
    });
});


/***/ }),

/***/ "./modules/plugins/youtube/callback/template.js":
/*!******************************************************!*\
  !*** ./modules/plugins/youtube/callback/template.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`
<div class="iframe-container" style="padding-top: 56.25%; width: 100%; position: relative; overflow: hidden;">
    <div id="YouTubeEditorContainer" class="youtube-preview container" style="display: block; position: absolute; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%;"></div>
</div>

<div class="youtube-controls">
    <div class="lab-grid lab-relative lab-margin-top-1">
        <div id="startMarkerYouTube" class="lab-absolute labicon-start_point"></div>
        <input id="progressYouTube" type="range" value="0" min="0">
        <div id="endMarkerYouTube" class="lab-absolute labicon-end_point"></div>
    </div>
    <div class="lab-grid">
        <div class="lab-padding-top-1 lab-grid lab-grid-large-5">
            <div class="lab-btn-group lab-grid-large-12">
                <button title="Skip backward 5 seconds" id="backwardYouTube" class="lab-btn lab-grid-gap labicon-backward"></button>
                <button title="Play/Pause video" id="playYouTube" class="lab-btn lab-grid-gap labicon-play"></button>
                <button title="Skip forward 5 seconds" id="forwardYouTube" class="lab-btn lab-grid-gap labicon-forward"></button>
            </div>
            <div class="lab-grid lab-grid-large-12">
                <span class="lab-padding-right-1">Timestamp:</span>
                <span id="timestampYouTube">00:00 / 10:00</span>
            </div>
        </div>
        <div class="lab-padding-top-1 lab-grid lab-grid-large-7">
            <div class="lab-btn-group lab-grid lab-grid-large-12 lab-align-right">
                <button title="Set the start of the video" id="setStartYouTube" class="lab-btn labicon-start_point"></button>
                <button title="Reset the crop" id="resetYouTube" class="lab-btn labicon-refresh"></button>
                <button title="Set the end of the video" id="setEndYouTube" class="lab-btn labicon-end_point"></button>
            </div>
            <div class="lab-grid lab-grid-large-12 lab-align-right">
                <span class="lab-padding-right-1">Cropped:</span>
                <span id="cropLabelYouTube">00:00 - 00:00</span>
            </div>
        </div>
    </div>
</div>
`);


/***/ }),

/***/ "./modules/plugins/youtube/index.js":
/*!******************************************!*\
  !*** ./modules/plugins/youtube/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties.js */ "./modules/plugins/youtube/properties.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    name: 'YouTube',
    description: 'Set start- & endpoint on a YouTube video.',
    version: '1.0.0',
    entry: class {

        onReady() {
            const script = document.createElement('script');
            script.setAttribute('src', 'https://www.youtube.com/iframe_api');
            document.head.appendChild(script);
        }

    },
    elements: {
        youtube: {
            properties: _properties_js__WEBPACK_IMPORTED_MODULE_0__["default"]
        }
    }
});


/***/ }),

/***/ "./modules/plugins/youtube/properties.js":
/*!***********************************************!*\
  !*** ./modules/plugins/youtube/properties.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _callback_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callback/index.js */ "./modules/plugins/youtube/callback/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    contentMenus: {
        plugins: {
            position: 'right',
            snapToTop: true,
            items: {
                youtube: {
                    icon: 'labicon-video_edit',
                    title: 'YouTube Editor',
                    callback: _callback_index_js__WEBPACK_IMPORTED_MODULE_0__["default"]
                }
            }
        }
    }
});


/***/ }),

/***/ "./public/common/labrador/ClientData.js":
/*!**********************************************!*\
  !*** ./public/common/labrador/ClientData.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientData": () => (/* binding */ ClientData)
/* harmony export */ });
/**
 * Holds data for mappers. Are passed over from mapper to mapper
 * Each mapper returns an instance of this class
 */
class ClientData {

    constructor() {
        this.totalCount = 0;  // Total number of results, dependent of source
        this.count = 0;       // Number of results
        this.data = [];       // Transformed data
        this.markups = [];    // List of markup
    }

    setMarkups(content) {
        this.markups = content;
    }

    setData(data) {
        this.data = data;
        this.count = this.data.length;
    }

    setTotalCount(count) {
        this.totalCount = count;
    }

    getData() {
        return this.data;
    }

}


/***/ }),

/***/ "./public/common/labrador/Core.js":
/*!****************************************!*\
  !*** ./public/common/labrador/Core.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Core": () => (/* binding */ U)
/* harmony export */ });
/*! For license information please see Core.js.LICENSE.txt */
var e={d:(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.d(t,{Q:()=>q});var r={};e.r(r),e.d(r,{defaults:()=>n,functionHelper:()=>C,grid:()=>P,interpolation:()=>o,objectHelper:()=>s,stringHelper:()=>y,uuid:()=>$});const i={state:"",version:"4.2.8",build:{styleguide:4,releasenotes:"40208:1",userReleasenotes:"40208:1",browsers:{chrome:94},version:489}},s={get:(e,t,r)=>e.split(".").reduce(((e,t)=>e&&void 0!==e[t]?e[t]:r?void 0:null),t),set:(e,t,r)=>(e.split(".").reduce(((e,r,i,n)=>{if(i!==n.length-1)return s.isObject(e[r])?e[r]:e[r]={};e[r]=t}),r),r),delete:(e,t)=>{e.split(".").reduce(((e,t,r,i)=>{if(r!==i.length-1)return s.isObject(e[t])?e[t]:e[t]={};delete e[t]}),t)},isObject:e=>e&&"object"==typeof e&&!Array.isArray(e),hasContent:e=>!!s.isObject(e)&&!!Object.keys(e).length,merge:(e,t)=>{if(Array.isArray(e)&&Array.isArray(t))return t;const r=Object.assign(Array.isArray(e)?[]:{},e);if(s.isObject(e)&&s.isObject(t))for(const i of Object.keys(t))s.isObject(t[i])?i in e&&s.isObject(e[i])?r[i]=s.merge(e[i],t[i]):Object.assign(r,{[i]:t[i]}):Object.assign(r,{[i]:t[i]});return r},mergeArray:(e,t,r=!0)=>{const i=[...e||[],...t||[]];return r?[...new Set(i)]:i},clone:(e,t)=>{if(!e)return e;let r;if(!t&&e instanceof Array)r=e.slice(0);else{r=e instanceof Array?[]:{};for(const i in e)e.hasOwnProperty(i)&&(t&&"object"==typeof e[i]&&null!==e[i]?r[i]=s.clone(e[i],t):r[i]=e[i])}return r},serialize(e,t="=",r="&"){const i=[];for(const r of Object.keys(e))i.push(r+t+e[r]);return i.length?i.join(r):null}},n={true:e=>void 0===e||!!e,false:e=>!!e,string:(e,t="")=>"string"==typeof e?e:t,stringRestricted:(e,t="",r=[])=>"string"!=typeof e?t:r.includes(e)?e:t,pixelString:(e,t="")=>{if("number"==typeof e)return`${e}px`;if("string"!=typeof e)return t;const r=e.trim().split("px");return 2!==r.length||isNaN(r[0])?t:`${r[0]}px`},stringOrNull:e=>"string"==typeof e?e:null,stringOrUndefined:e=>"string"==typeof e?e:void 0,numberOrDefault:(e,t=0)=>"number"==typeof e?e:t,array:(e,t=[])=>Array.isArray(e)?e:t,arrayOrNull:e=>Array.isArray(e)?e:null,object:(e,t={},r=t)=>!e||"object"!=typeof e||Array.isArray(e)?t:{...r,...e},objectOrArray:(e,t={})=>Array.isArray(e)?e:n.object(e,t),notNullOrUndefined:(e,t)=>null==e?t:e,notUndefined:(e,t)=>void 0===e?t:e},o={resolve:(e,t,r)=>"object"==typeof e?o.resolveObject(e,t,r):"string"==typeof e?o.resolveString(e,t,r):e,resolveObject:(e,t,r)=>{for(const i in e)"object"==typeof e[i]?e[i]=o.resolveObject(e[i],t,r):"string"==typeof e[i]&&(e[i]=o.resolveString(e[i],t,r));return e},resolveString:(e,t,r)=>{if(-1===e.indexOf("${"))return e;return e.replace(/\${([^{}]*)}/g,((e,i)=>{const s=r.getCms(i.trim());return"string"==typeof s||"number"==typeof s?s:("undefined"!=typeof Sys&&Sys.logger.warn(`Cannot interpolate config value "${e}". Description: ${t}.`),e)}))}};class a{constructor(e,t){this.logger=t,this.log("Setup"),this.config=e,this.siteAlias=this.config.site&&this.config.site.alias||null,this.fallbackSites=this.resolveSiteAliases(this.siteAlias),this.log(`Site-alias: ${this.siteAlias}`),this.log(`Will use site(s): ${this.fallbackSites}`),this.resources=[{name:"config",source:"config",path:"customer",sitesPrefix:"customer.site_config_",storeSitesPrefix:null,siteOverride:{},paths:[],content:[],resolved:!1},{name:"cmsConfig",source:"config",path:"",sitesPrefix:null,storeSitesPrefix:null,paths:[],content:[],resolved:!1},{name:"viewConfig",source:"configObject",path:"ConfigObject.viewConfig.config.customer",sitesPrefix:"ConfigObject.viewConfig.config.customer.site_config.",storeSitesPrefix:"config.customer.site_config.",siteOverride:{},paths:[],content:[],resolved:!1},{name:"featureFlags",source:"configObject",path:"ConfigObject.featureFlags",sitesPrefix:"ConfigObject.featureFlags.site.",storeSitesPrefix:"site.",siteOverride:{},paths:[],content:[],resolved:!1},{name:"content",source:"configObject",path:"ConfigObject.content",sitesPrefix:null,storeSitesPrefix:null,paths:[],content:[],resolved:!1},{name:"localisation",source:"configObject",path:"ConfigObject.localisation",sitesPrefix:null,storeSitesPrefix:null,paths:[],content:[],resolved:!1}],this.resourceObject={},this.cache={get:{},debug:{getter:{},reload:{},update:{},resetCache:{}}},this.setupResources()}static resolveFullConfig(e={},t={}){const r={ConfigObject:{},app:{mode:"presentation",version:"[unversioned cms]"},mainViewport:n.string(e.deviceMain,e.device||"desktop"),isTouchDevice:n.false(e.isTouchDevice),sites:n.array(e.sites),...e};return r.app.version=t.version||r.app.version,r.buildInfo=t.build||e.build,r.customer=a.resolveConfig(e.customer),r}static resolveConfig(e={}){const t={grid:{},...e};t.resourceAllocation=n.object(t.resourceAllocation,{resourceMaps:["_resources"],mergeMaps:!0});const r=t.viewHelper||{};return t.viewHelper={image:n.object(r.image,{viewports:["desktop"],pixelDensityFactor:1})},t.appMapper=n.objectOrArray(t.appMapper),t.view_name=n.string(t.view_name,"[unnamed view]"),t.view_version=n.string(t.view_version,"[unversioned view]"),t.grid.total_grid_spans=n.numberOrDefault(t.grid.total_grid_spans,12),t.grid.grid_prefix=n.object(t.grid.grid_prefix),t.grid.abs_grid_prefix=n.object(t.grid.abs_grid_prefix,null),t.preload=n.array(t.preload),t.preloadObject=n.object(t.preloadObject),t.viewports=n.object(t.viewports),t.viewport=n.string(t.viewport),t.touchEditingViewport=n.string(t.touchEditingViewport),t.style=n.object(t.style,{definitions:{},collections:[],presets:[],copyDefinitions:[]}),t.image=n.object(t.image,{defaultAspectRatio:.45,defaultBoundingBoxWidthRatio:1}),t.imageUrlOptions=n.object(t.imageUrlOptions),t.tags=n.object(t.tags,{},{section:[]}),t.elementList=n.object(t.elementList,{all:[],favourites:[]}),t.elementListAdditions=n.object(t.elementListAdditions,{all:[],favourites:[]}),t.elementListRemovals=n.object(t.elementListRemovals,{all:[],favourites:[]}),t.autoscroll=n.object(t.autoscroll,{scrollDistance:100,scrollBuffer:50,accelerator:{max:3,step:.2}}),t.markLockedPaths=n.true(t.markLockedPaths),t.minimap=n.object(t.minimap,{structure:null,pageType:[]}),t.exitWarning=n.stringOrNull(t.exitWarning),t.publish=n.object(t.publish,{retry:{count:4,delay:2e3},options:{article:{hidden:!0,defaultHidden:!1}}}),t.autolock=n.object(t.autolock,{timeout:18e5}),t.networkWarning=n.object(t.networkWarning,null,{offline:{alert:!0,lockPage:!0},online:{alert:!0}}),t.image_preview=n.object(t.image_preview,{width:1600,compression:50}),t.textTools=n.object(t.textTools,{characterBlacklists:{utf:[]},text_size:{min:{default:14},max:{default:150,mobile:80}}}),t.structure_map=n.object(t.structure_map),t.shapes=n.object(t.shapes),t.requiredElements=n.array(t.requiredElements),t.requiredElementsAdditions=n.array(t.requiredElementsAdditions),t.data=n.object(t.data,{elements:{},presets:{},presetBlacklist:{},blacklist:[],blacklistOptions:{}}),t.pageElements=n.object(t.pageElements),t.drawer=n.array(t.drawer),t.drawerAdditions=n.array(t.drawerAdditions),t.drawerRemovals=n.array(t.drawerRemovals),t.maxChildCount=n.numberOrDefault(t.maxChildCount,150),t}log(e,t=null){this.logger&&(t?this.logger.debug(`[ConfigReader] ${e}`,[t]):this.logger.debug(`[ConfigReader] ${e}`))}setupResources(){for(const e of this.resources)this.resourceObject[e.name]=e}setupResource(e,t=null){const r=!!t&&t!==this.siteAlias,i=this.resourceObject[e];this.log(`Settings up resource "${e}". Site: "${t||this.siteAlias}". Site-override: ${i.sitesPrefix?r:"n/a"}`),t&&!i.siteOverride[t]&&(i.siteOverride[t]={content:[],paths:[],resolved:!1});const s=t?i.siteOverride[t]:i,n=r?this.resolveSiteAliases(t):this.fallbackSites;for(const e of this.calculateResourcePaths(i,n)){s.paths.push(e);const t=this.getPath(e,this.config);s.content.push({path:e,value:t||{}})}return s.resolved=!0,s}reloadResourceBySite(e,t,r){if(e&&this.resourceObject[e]&&r){this.cache.debug.reload[`${e}|${t||"no-site"}`]=this.cache.debug.reload[`${e}|${t||"no-site"}`]?this.cache.debug.reload[`${e}|${t||"no-site"}`]+1:1;const i=o.resolve(r,"reload_resouce"),n=t?this.resourceObject[e].sitesPrefix+t:this.resourceObject[e].path;s.set(n,i,this.config),this.resourceObject[e].siteOverride[t]?delete this.resourceObject[e].siteOverride[t]:t||(this.setupResource(e),this.resourceObject[e].siteOverride={})}}updateConfigByPath(e,t){this.cache.debug.update[e]=this.cache.debug.update[e]?this.cache.debug.update[e]+1:1,s.set(e,t,this.config),this.resetCache(e)}getCacheKey(e="",t={}){const r=[e,t.mergeStrategy,t.orderStrategy];for(const e of t.resourceList)r.push(e.name,e.useSites?1:0,e.site||"-");return r.join("|")}getCache(e){return this.cache.debug.getter[e]=this.cache.debug.getter[e]?this.cache.debug.getter[e]+1:1,{isSet:e in this.cache.get,value:this.cache.get[e]}}setCache(e,t){this.cache.get[e]=t}resetCache(e){for(const t of Object.keys(this.cache.get))t.startsWith(`${e}|`)&&(this.cache.debug.resetCache[t]=this.cache.debug.resetCache[t]?this.cache.debug.resetCache[t]+1:1,this.log(`Deleting cache for key "${e}" ("${t}")`),delete this.cache.get[t])}calculateResourcePaths(e,t=this.fallbackSites){const r=e.sitesPrefix?t.map((t=>e.sitesPrefix+t)):[];return r.push(e.path),r}resolveSiteAliases(e,t=[]){if(!e)return t;t.push(e);const r=this.getFallbackSite(e);return r&&this.resolveSiteAliases(r,t),t}getFallbackSite(e){return this.getPath(`customer.site_config_${e}.lab_fallback_site`,this.config)}getResource(e){let t=e.site?this.resourceObject[e.name].siteOverride[e.site]:this.resourceObject[e.name];return t&&t.resolved||(t=this.setupResource(e.name,e.site)),t}getPath(e,t,r=!1){return e?r?o.resolve(s.get(e,t,!0),e,{getCms:e=>s.get(e,this.config,!0)}):s.get(e,t,!0):t}getPaths(e,t,r=!1){const i=[],s=this.getResource(t),n=t.useSites?s.content:[s.content[s.content.length-1]];for(const s of n){const o=this.getPath(e,s.value,r);void 0!==o&&i.push({source:t.name,path:s.path,value:o,sourceIndex:n.indexOf(s)})}return i}getValueType(e){for(const t of e)if(null!==t.value)return Array.isArray(t.value)?"array":s.isObject(t.value)?"object":"other";return"other"}mergeResources(e,t,r){let i=t;const n=this.orderResources(e,r);if(!n.length)return{payload:null,paths:[],resetPaths:[]};const o=this.getValueType(n);if("default"===i&&(i="object"===o?"merge":"replace"),"replace"===i)return{payload:n[0].value,paths:[n[0].path],resetPaths:[]};n.reverse();const a=Array.isArray(n[0].value)?[]:{};let l=a;const d=[],h=[];for(const e of n){null===e.value&&(l=a,h.push(e.path));let r=s.merge;"merge"===t&&"array"===o&&(r=s.mergeArray),l=r(l,e.value),d.push(e.path)}return{payload:l,paths:d,resetPaths:h}}orderResources(e,t){if(1===e.length)return e[0].payload;let r=[];for(const t of e)r=r.concat(...t.payload);return"site"===t&&r.sort(((e,t)=>e.sourceIndex-t.sourceIndex)),r}prepareReturnValue(e){return e&&"object"==typeof e?s.clone(e,!0):e}getter(e,t=[],{mergeStrategy:r=null,orderStrategy:i=null,raw:s=!1,noCache:o=!1,interpolate:a=!0}){const l={mergeStrategy:n.stringRestricted(r,"default",["default","merge","replace"]),orderStrategy:n.stringRestricted(i,"site",["site","type"]),raw:n.false(s),noCache:n.false(o),resourceList:[]};for(const e of t)l.resourceList.push({name:e.name,useSites:!!e.useSites,site:n.stringOrNull(e.site)});const d=this.getCacheKey(e,l),h=this.getCache(d);if(!l.noCache&&h.isSet)return l.raw?{cached:!0,options:l,data:{raw:h.value.raw,merged:h.value.merged}}:this.prepareReturnValue(h.value.merged.payload);const g=l.resourceList.map((t=>({name:t.name,payload:this.getPaths(e,t,a)}))),c=this.mergeResources(g,l.mergeStrategy,l.orderStrategy);return this.setCache(d,{raw:g,merged:c}),l.raw?{cached:!1,options:l,data:{raw:g,merged:c}}:this.prepareReturnValue(c.payload)}get(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null,orderStrategy:o=null}={}){return this.getter(e,[{name:"viewConfig",useSites:t,site:r},{name:"config",useSites:t,site:r}],{mergeStrategy:n,orderStrategy:o,raw:i,noCache:s})}getConfig(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:"config",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s})}getCms(e,{raw:t=!1,noCache:r=!1}={}){return this.getter(e,[{name:"cmsConfig"}],{raw:t,noCache:r})}getView(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:"viewConfig",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s})}getFeatureFlags(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:"featureFlags",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s,interpolate:!1})}getContent(e,{raw:t=!1}={}){return this.getter(e,[{name:"content"}],{raw:t})}getLocal(e,{useSites:t=!0,site:r=null,raw:i=!1,noCache:s=!1,mergeStrategy:n=null}={}){return this.getter(e,[{name:"localisation",useSites:t,site:r}],{mergeStrategy:n,raw:i,noCache:s,interpolate:!1})}getPathForSite(e,t,r=""){return e&&t&&this.resourceObject[e]&&this.resourceObject[e].sitesPrefix?this.resourceObject[e].sitesPrefix+t+(r?`.${r}`:""):null}getStorePathForSite(e,t,r=""){return e&&t&&this.resourceObject[e]&&this.resourceObject[e].sitesPrefix?this.resourceObject[e].storeSitesPrefix+t+(r?`.${r}`:""):null}debug(){return this.cache.debug}}class l{constructor(e,t,r=!1,i="",s=""){this.configReader=e,this.viewport=t,this.fragmentMode=r,this.pageType=i,this.simulatedMode=s,this.cache=new Map,this.isEditor="edit"===this.getAppMode(),this.pixelDensityFactor=this.isEditor?1:this.configReader.get("viewHelper.image.pixelDensityFactor"),this.pixelDensityFactors={}}resetCache(){this.cache.clear()}getViewport(){return this.viewport}getViewports(){const e="getViewports";return this.cache.has(e)||this.cache.set(e,Object.keys(this.configReader.get("viewports")||{})),this.cache.get(e)}getMainViewport(){const e="getMainViewport";return this.cache.has(e)||this.cache.set(e,this.configReader.getCms("mainViewport")),this.cache.get(e)}getPageType(){return this.pageType}getSimulatedMode(){return this.simulatedMode}isFragmentMode(){return!!this.fragmentMode}isMainViewport(){return this.viewport===this.getMainViewport()}isTouchDevice(e=this.viewport){return this.configReader.getCms("isTouchDevice")}getSubViewports(){const e="getSubViewports";if(!this.cache.has(e)){const t=this.getMainViewport();this.cache.set(e,this.getViewports().filter((e=>e!==t)))}return this.cache.get(e)}isSubViewport(e=this.viewport){return e!==this.getMainViewport()}getEditableViewports(e=!1){const t=`getEditableViewports_${e}`;if(!this.cache.has(t)){const r=this.configReader.get("viewports"),i=e?{}:[];for(const t of Object.keys(r))r[t].noEdit||(e?i[t]=r[t]:i.push(t));this.cache.set(t,i)}return this.cache.get(t)}getViewportWidth(e=this.viewport){const t=this.configReader.get(`viewports.${e}.deviceWidth`);return t?parseInt(t,10):null}getEditViewportWidth(e=this.viewport){const t=this.configReader.get(`viewports.${e}.editSlotWidth`)||this.configReader.get(`viewports.${e}.deviceWidth`);return t?parseInt(t,10):null}getSite(e=null){const t={},r=`getSite_${e}`;if(!this.cache.has(r)){if(e){for(const t of this.configReader.getCms("sites"))if(t.alias===e)return this.cache.set(r,t),t;return this.cache.set(r,t),t}this.cache.set(r,this.configReader.getCms("site")||t)}return this.cache.get(r)}getSiteById(e){if(!e)return null;const t=`getSiteById_${e}`;if(!this.cache.has(t)){const r=parseInt(e,10);for(const e of this.configReader.getCms("sites"))if(e.id===r)return this.cache.set(t,e),e;return this.cache.set(t,null),null}return this.cache.get(t)}getSites(){const e="getSites";return this.cache.has(e)||this.cache.set(e,this.configReader.getCms("sites")||[]),this.cache.get(e)}getAppMode(){const e="getAppMode";return this.cache.has(e)||this.cache.set(e,this.configReader.getCms("app.mode")||"presentation"),this.cache.get(e)}isPresentationMode(){return!this.isEditor}isEditMode(){return this.isEditor}getPixelDensityFactor(e){return e?(this.pixelDensityFactors[e]||(this.pixelDensityFactors[e]=this.isEditor?1:this.configReader.get(`viewHelper.image.pixelDensity.${e}`)||this.configReader.get("viewHelper.image.pixelDensityFactor")),this.pixelDensityFactors[e]):this.pixelDensityFactor}getPreferredImageFormat(){return(this.configReader.get("imageUrlOptions.extension")||"").replace(".","")||null}}class d{constructor(e){this.debug=e&&"object"==typeof performance,this.logs={}}getLogs(){return this.logs}resetLogs(){this.logs={}}log(e,t){const r=e.pop();let i=this.logs;for(const t of e)i[t]||(i[t]={}),i=i[t];i[r]||(i[r]={count:0,time:0}),i=i[r],i.count++,i.time+=t}start(e){if(this.debug)return{paths:e,time:this.getTimestamp()}}end(e){this.debug&&this.log(e.paths,this.getTimestamp()-e.time)}getTimestamp(){return performance.now()}}class h{constructor({entries:e=[],behaviours:t={},debug:r=!1}={}){this.entries=e,this.behaviours=t,this.debug=r,this.events={},this.logs={},this.performanceLogger=new d(this.debug)}getLogs(){return this.performanceLogger.getLogs()}resetLogs(){this.performanceLogger.resetLogs()}on(e,t){return this.events[e]||(this.events[e]=[]),this.events[e].push(t),!0}off(e,t){return!(!this.events[e]||!this.events[e].includes(t))&&(this.events[e]=this.events[e].filter((e=>e!==t)),!0)}emitEntry(e,...t){const r=this.performanceLogger.start(["entry",e]),i=this.callTargets(e,"entry",this.entries,...t);return this.performanceLogger.end(r),i}emitBehaviour(e,t,...r){const i=this.behaviours[t.getType()];if(!i||!i.length)return[];const s=this.performanceLogger.start(["behaviour",e,t.getType()]),n=this.callTargets(e,"behaviour",i,t,...r);return this.performanceLogger.end(s),n}emitCollectionBehaviour(e,t,...r){const i=this.behaviours[t.getType()];return i&&i.length?this.callTargets(e,"collection",i,t,...r):[]}emitEvent(e,...t){this.events[e]&&this.callEvents(e,this.events[e],...t)}requestEvent(e,...t){return this.events[e]?this.requestEvents(e,this.events[e],...t):[]}callEvents(e,t,...r){for(const i of t)try{i(...r)}catch(t){Sys.logger.error(`[Emitter] Failed to run method on listener for message "${e}"`),Sys.logger.debug(t.toString()),lab_api.v1.app.logError(t)}}requestEvents(e,t,...r){const i=[];for(const s of t)try{const e=s(...r);void 0!==e&&i.push(e)}catch(t){Sys.logger.error(`[Emitter] Failed to run method on listener for message "${e}"`),Sys.logger.debug(t.toString()),lab_api.v1.app.logError(t)}return i}callTargets(e,t,r,...i){const s=[];for(const n of r)try{if(n.isEnabled){const t=n.call(e,...i);null!=t&&s.push(t)}}catch(r){Sys.logger.error(`[Emitter] Call to method ${e} on '${n.name}' failed:`),console.error(r),lab_api.v1.app.logViewError(r,t)}return s}registerEntry(e){return!this.entries.includes(e)&&(this.entries.push(e),!0)}registerBehaviour(e,t){return this.behaviours[e]||(this.behaviours[e]=[]),!this.behaviours[e].includes(t)&&(this.behaviours[e].push(t),!0)}}class g{static build(e,t,r){let i;const s=[],n=r||"&",o=(e,t,r)=>{let i,s=t;const n=[];if(!0===s?s="1":!1===s&&(s="0"),null!=s){if("object"==typeof s){for(i in s)null!=s[i]&&n.push(o(`${e}[${i}]`,s[i],r));return n.join(r)}if("function"!=typeof s)return`${this.urlencode(e)}=${this.urlencode(s)}`;throw new Error("There was an error processing for http_build_query().")}return""};for(const r of Object.keys(e)){i=e[r];let a=r;t&&!Number.isNaN(a)&&(a=String(t)+a);const l=o(a,i,n);""!==l&&s.push(l)}return s.join(n)}static urlencode(e){return encodeURIComponent(`${e}`).replace(/!/g,"%21").replace(/'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A").replace(/%20/g,"+")}}class c extends h{constructor(e,t,r,i,s,n,o=!1){super({behaviours:s,debug:o}),this.properties=e,this.templates=t,this.configReader=r,this.propertyValidator=i,this.pathHelper=n,this.resolved={properties:new Map,templates:new Map,resourceMaps:new Map},this.appMode=r.getCms("app.mode"),this.pageTemplateName="default",this.resourceSettings=this.resolveResourceSettings(),this.viewportList=new Map,this.rootId=null,this.feedBaseUrl=`${this.configReader.getCms("front_api_url")}/feed/item`,this.isFragmentMode=!1,this.feedCounter={}}getPathInfo(e,t,r="stage"){const i=e.split("/"),s=i.pop();let n;return n=s.startsWith("page_")?`${s.replace("page_","page/")}/${this.pageTemplateName}`:`content/${s}`,{type:s,resourceType:n,area:r,modeList:this.getPrioritizedModes(),viewportList:this.getPrioritizedViewports(t),contextList:this.getPrioritizedContexts(`${i.join("/")}/`)}}resolveResourceSettings(){const e=n.object(this.configReader.get("resourceAllocation",{useSites:!1}),{resourceMaps:["_resources"]});"string"==typeof e.resourceMaps&&(e.resourceMaps=[e.resourceMaps]);const t=this.configReader.getCms("site.alias"),r=n.object(this.configReader.get("resourceAllocation",{site:t}));let i=[];if(Array.isArray(r.resourceMaps)&&i.push(...r.resourceMaps),!i.length||n.true(r.mergeMaps)){const t=[];for(const r of e.resourceMaps)i.includes(r)||t.includes(r)||t.push(r);t.length&&(i=[...t,...i])}return{names:i}}getResourceMap(e,t){if(this.resolved.resourceMaps.has(e.type))return this.resolved.resourceMaps.get(e.type);let r={labPaths:this.getEmptyPathObject()};for(const t of this.resourceSettings.names){const i=`${e.resourceType}/${t}.json`,s=this.getPropertyFile(i);s?(r.labPaths.maps.push(i),r=this.mergeObject(r,s)):Sys.logger.warn(`[ResourceManager] Cannot find resource-map for element "${e.type}". Tried "${i}".`)}if(t){const i=this.emitBehaviour("onResourceMap",t,{...r},{type:e.type,resourceType:e.resourceType});i.length&&(Sys.logger.warn(`[ResourceManager] Resource-map is overridden by a bahaviour for model "${t.getPositionedPath()}".`),r=i.pop())}return this.resolved.resourceMaps.set(e.type,r),r}getPaths(e,t,r){let i=[];for(const s of r.modeList){const n=this.getContextsForModeAndArea(e,s,r);if(n)for(const e of r.contextList){const o=this.getContexts(n,t,e);if(o.length)for(const e of o){const t=this.getPathForViewports(e.match,r);if(t)for(const r of Array.isArray(t.resources)?t.resources:[t.resources])i=i.filter((e=>e.path!==r)),i.push(this.getPathDescription({path:r,context:e.context,viewport:t.viewport,mode:s}))}}}return i.length||Sys.logger.debug(`ResourceManager: Cannot get ${t} for ${r.type}. Context-list: ${r.contextList.join(", ")}, area: ${r.area}`),i}getPathForViewports(e,t){for(const r of t.viewportList)if(e[r])return{resources:e[r],viewport:r};return null}getPathLength(e=""){return this.trimPath(e).replace(/\/\//g,"/||/").split("/").map((e=>e?"||"===e?.2:"*"===e?.6:1:0)).reduce(((e,t)=>e+t))}sortContexts(e){const t=e.sort(((e,t)=>this.getPathLength(e)-this.getPathLength(t)||e.localeCompare(t))),r=t.indexOf("lab-default");return r>0&&(t.splice(r,1),t.unshift("lab-default")),t}trimPath(e){let t=e;return t.startsWith("/")&&!t.startsWith("//")&&(t=t.substring(1)),t.endsWith("/")&&!t.endsWith("//")&&(t=t.substr(0,t.length-1)),t}getContexts(e,t,r){const i=this.sortContexts(Object.keys(e)),s=[];for(const n of i)if(e[n][t]){const i=this.pathHelper.pathMatch(n,r);i&&s.push({match:e[i][t],context:n})}return s}getContextsForModeAndArea(e,t,r){return s.get(`${t}.${r.area}`,e)||null}getPropertyFile(e){if(this.properties[e]){return{...this.properties[e]}}return null}getEmptyPathObject(){return{maps:[],properties:[],map:[]}}getPathDescription(e={}){return{path:e.path||null,context:e.context||null,viewport:e.viewport||null,mode:e.mode||null,requiredBy:e.requiredBy||null}}resolveInheritance(e,t){if(!e.includeFiles)return e;let r=e;for(const i of e.includeFiles)if(!r.labPaths.properties.includes(i)){const e=this.getPathDescription(t);e.requiredBy=e.path,e.path=i;const s=this.resolvePropertyFileWithDescription(e);s&&(r=this.mergeObject(s,r))}return r}getTemplateFile(e){return this.templates[e]||null}getPrioritizedViewports(e){if(!this.viewportList.get(e)){const t=e?[e]:[];this.configReader.get(`viewports.${e||"default "}.noFallback`)||t.push("default"),this.viewportList.set(e,t)}return this.viewportList.get(e)}getPrioritizedModes(){const e=[this.appMode];return"edit"===this.appMode&&e.unshift("presentation"),e}getPrioritizedContexts(e){return["lab-default",e]}mergeObject(e,t){const r=s.merge(e,t);return e.labPaths&&t.labPaths&&(r.labPaths.properties=e.labPaths.properties.concat(t.labPaths.properties),r.labPaths.map=e.labPaths.map.concat(t.labPaths.map)),r}getCacheKey(e,t,r){return`${e||"no-path"}-${t}-${r}`}rootModelReady(e){this.isFragmentMode=lab_api.v1.app.mode.isFragmentMode(),e&&(this.rootId=e.get("id"),e&&e.getType().startsWith("page_")&&this.setPageTemplateName(e.get("fields.page_template_alias")||"default"))}setPageTemplateName(e="default"){Sys.logger.debug(`[ResourceManager] Will use page-template "${e}".`),"undefined"===e?(Sys.logger.warn("[ResourceManager] Invalid page_template_alias detected. Will override template to 'default'."),this.pageTemplateName="default"):this.pageTemplateName=e}getAreaFromPath(e,t){return e&&e.includes("pasteboard/")?"pasteboard":"stage"}getPropertiesForPath(e,t,r,i=this.getAreaFromPath(e)){e||Sys.logger.warn('ResourceManager.getPropertiesForPath: Missing required param "path". Will return default properties.');const s=this.getCacheKey(e,r,i);if(this.resolved.properties.has(s))return this.resolved.properties.get(s);let n={labPaths:this.getEmptyPathObject()};const o=this.getPathInfo(e,r,i),a=this.getResourceMap(o,t),l=this.getPaths(a,"properties",o);for(const e of l){const t=this.resolvePropertyFileWithDescription(e);t&&(n=this.mergeObject(n,t))}return n.labPaths.maps=a.labPaths.maps,this.resolved.properties.set(s,this.propertyValidator(n)),this.resolved.properties.get(s)}resolvePropertyFile(e){return this.resolvePropertyFileWithDescription(this.getPathDescription({path:e}))}resolvePropertyFileWithDescription(e){const t=this.getPropertyFile(e.path);return t?(t.labPaths=this.getEmptyPathObject(),t.labPaths.properties.push(e.path),t.labPaths.map.push(e),this.resolveInheritance(o.resolve(t,e.path,this.configReader),e)):(Sys.logger.warn(`ResourceManager: Cannot find property-file for path: ${e.path}.`),null)}getTemplateForPath(e,t,r,i=this.getAreaFromPath(e)){const s=this.getCacheKey(e,r,i);if(this.resolved.templates.has(s))return this.resolved.templates.get(s);const n={paths:null,resource:null},o=this.getPathInfo(e,r,i),a=this.getResourceMap(o,t);return n.paths=this.getPaths(a,"template",o),n.paths.length&&(n.resource=this.getTemplateFile([...n.paths].pop().path)),n.resource||(Sys.logger.debug(`ResourceManager: Cannot find template for path: ${e}, viewport: ${r}, area: ${o.area}. Will assign default template.`),n.resource=this.getDefaultTemplate(e)),this.resolved.templates.set(s,n),n}getDefaultTemplate(e){return"edit"===this.appMode?"<div>{{{ children.all }}}</div>":"{{{ children.all }}}"}getPropertiesForModel(e,t,r){return this.getPropertiesForPath(e.getPath(),e,t.viewport,r)}getTemplateForModel(e,t,r){if("presentation"===this.appMode&&!this.isFragmentMode&&"1"===e.get("fields.isAutomatic"))return`<div data-lab-placeholder="include" src="${this.getFeedUrl(e,t)}" ></div>`;const i=this.getTemplateForPath(e.getPath(),e,t.viewport,r);return i.paths.length&&t.setTemplatePath([...i.paths].pop().path),i.resource}getFeedUrl(e,t){const r=e.get("fields.feedId"),i=e.get("fields.feedParams")||{};let s="";Object.keys(i).length&&(s=`?${g.build(i)}`),void 0===this.feedCounter[r]&&(this.feedCounter[r]=0);const n=this.feedCounter[r]++;return`${this.feedBaseUrl}/${r}/${this.rootId}/${n}${s}`}}class p{constructor(e,t,r){this.viewport=e,this.model=t,this.eventPipe=r,this.markup=null,this.markupString=null,this.template=null,this.templatePath=null,this.properties=null,this.data=null,this.size=this.getEmptySizeObject(),this.proxies={current:null,child:null,children:null,childMarkup:null,childrenMarkup:null,store:{get:null,set:null}},this.cache=new Map}static resolveConfig(e={}){return lab_api.v1.app.dbg.logger.add("LabView","resolveConfig"),{labPaths:e.labPaths||{maps:[],properties:[],map:[]},boxTitle:e.boxTitle||"",boxDescription:e.boxDescription||"",boxKeywords:e.boxKeywords||"",childLimit:e.childLimit||null,includeFiles:n.array(e.includeFiles,null),gridRules:e.gridRules||[],viewHelper:e.viewHelper||null,viewportMap:n.object(e.viewportMap),bodytextElements:n.array(e.bodytextElements),bodytextHeadingElements:n.array(e.bodytextHeadingElements),overrideImageSize:n.object(e.overrideImageSize),image:n.object(e.image,null,{defaultAspectRatio:null}),external:n.object(e.external,null,{url:null,type:"html",headers:null})}}getEmptySizeObject(){return{grid:null,pixelWidths:null,gridWidth:null,absGridWidths:null,absGridCss:null}}isPrepared(){return!1}setPreparedState(e){}setMarkupString(e){this.markupString=e}getMarkup(){return null}getMarkupString(){return this.markupString||""}setGrid(e){this.size.grid=e}getGrid(){return this.size.grid}setPixelWidths(e){this.size.pixelWidths=e}getPixelWidth(){return this.size.pixelWidths[this.viewport]}getPixelWidths(){return this.size.pixelWidths}setGridWidth(e){this.size.gridWidth=e}getGridWidth(){return this.size.gridWidth}getAbsoluteGridWidth(){return this.size.absGridWidths?this.size.absGridWidths[this.viewport]:null}setAbsoluteGridWidths(e){this.size.absGridWidths=e}getAbsoluteGridWidths(){return this.size.absGridWidths}getAbsGridCss(){return this.size.absGridCss}setAbsGridCss(e){this.size.absGridCss=e}getWidth(){return this.get("width")}setWidth(e,t=!1){this.set("width",e,t)}setData(e){this.data=e}getData(){return this.data}getProxy(){return this.proxies.current}setProxy(e){this.proxies.current=e}getChildrenProxy(){return this.proxies.children}setChildrenProxy(e){this.proxies.children=e}getChildProxy(){return this.proxies.child}setChildProxy(e){this.proxies.child=e}getChildMarkupProxy(){return this.proxies.childMarkup}setChildMarkupProxy(e){this.proxies.childMarkup=e}getChildrenMarkupProxy(){return this.proxies.childrenMarkup}setChildrenMarkupProxy(e){this.proxies.childrenMarkup=e}getStoreProxy(e){return this.proxies.store.set&&this.proxies.store.get?e?this.proxies.store.set:this.proxies.store.get:null}setStoreProxy({get:e,set:t}){this.proxies.store.get=e,this.proxies.store.set=t}setTemplate(e){this.template=e}getTemplate(){return this.template}setTemplatePath(e){this.templatePath=e}getTemplatePath(){return this.templatePath}setProperties(e,t=!1){this.properties=t?e:this.constructor.resolveConfig(e)}getProperties(){return this.properties}getProperty(e,t){return s.get(e,this.properties,t)}getViewport(){return this.viewport}getviewportOrder(e,t=null,r=this.viewport){return this.eventPipe.getViewportOrder(this,this.model.getPath(),e,t,r)}getCacheKey(e,t,r=!1){return`${e}|${r?1:0}|${t}`}get(e,t=!1,r=this.viewport){lab_api.v1.app.dbg.logger.add(this.constructor.name,"get",this.viewport);const i=this.getCacheKey(e,r,t);if(this.cache.has(i))return this.getCache(i);const s=this.model.buildQuery(e),n=this.getviewportOrder(s.path,s.attribute,r);if(!n.length){const e=this.model.get(s.key,null,t);return this.setCache(i,e)}for(const e of n){const t=this.model.get(s.key,e,!0);if(void 0!==t)return this.setCache(i,t)}return this.setCache(i,t?void 0:null)}set(e,t,r=!1){if(lab_api.v1.app.dbg.logger.add(this.constructor.name,"set",this.viewport),!e)return!1;const i=this.model.buildQuery(e),s=this.getviewportOrder(i.path,i.attribute);return this.model.set(i.key,t,{save:!r,viewport:s[0]})}setAll(e,t=!0){if(e&&"object"==typeof e&&!Array.isArray(e)){for(const t of Object.keys(e))this.set(t,e[t],!0);t&&lab_api.v1.app.save()}else Sys.logger.warn("[LabView] Method setAll expect an object containing key/value pars of data to store. Non-object given.")}setTransparent(e,t){const r=this.model.buildQuery(e),i=this.getviewportOrder(r.path,r.attribute),n=this.model.buildQuery(e,i[0]);let{path:o}=n;return n.attribute&&(o="fields"===n.type?`${n.path}.attributes.${n.attribute}`:`${n.path}.${n.attribute}`),s.get(o,s.set(n.fullPath,t,{}))}setCache(e,t){return this.cache.set(e,t),this.getCache(e)}getCache(e){const t=this.cache.get(e);return t&&"object"==typeof t?Array.isArray(t)?[...t]:{...t}:t}resetCache(e,t=this.getViewport()){const r=this.getCacheKey(e,t);this.cache.delete(r),this.cache.forEach(((r,i,s)=>{i.startsWith(`${e}.`)&&i.endsWith(`|${t}`)&&this.cache.delete(i)}))}}class u{static generateShapes(e,t){if(!e)return"";const r=JSON.parse(e);let i="";for(const e of r)i+=this.createShape(e,t);return i}static createShape(e,t){return`<div class="imageShape" style="${this.getStyle(e,t)}"></div>`}static getStyle(e,t){const r=this.getPosition(e,t),i=this.getSize(e,t);return`position: absolute;\n        width: ${i.w}%;\n        height: ${i.h}%;\n        top: ${r.y}%;\n        left: ${r.x}%;\n        border-width: ${e.borderwidth}px;\n        border-color: ${e.bordercolor};\n        border-style: ${e.borderstyle};\n        border-radius: ${"circle"===e.shape?"50%":"0"};\n        background: ${e.background||"transparent"};`}static getPosition(e,t){return{x:(e.x-t.x)*(100/t.cropw),y:(e.y-t.y)*(100/t.croph)}}static getSize(e,t){return{w:e.width*(100/t.cropw),h:e.height*(100/t.croph)}}}class f{constructor(e,t){this.api=e,this.isEditor=this.api.v1.app.mode.isEditor(),this.viewport=t.viewport,this.viewports=this.api.v1.config.get("viewHelper.image.viewports"),this.viewports.includes(this.viewport)||this.viewports.push(this.viewport),this.logger=t.logger,this.imageServer=this.api.v1.properties.get("image_server"),this.cropParamsFloat=["x","y","cropw","croph","panox","panoy","panow","panoh","heightx","heighty","heightw","heighth"],this.cropParamsString=["float","shapes"],this.privateCropParams=["bbRatio","whRatio","viewports_json","metadata_key"],this.allFields=[...this.cropParamsFloat,...this.cropParamsString,...this.privateCropParams],this.imageUrlOptions=this.api.v1.config.get("imageUrlOptions")||{},this.preferWebp=".webp"===this.api.v1.config.get("imageUrlOptions.extension"),this.maxDimension=3e3,this.pixelDensityFactors=this.readPixelDensity(),this.logger.debug(`Image-helper created. Will prepare image-data for viewports: ${this.viewports.join(", ")}.`)}static getImageProperties(e={}){const t=e.crop||{},r=t.pano||{},i=t.height||{};return{cropw:r.cropw||0,croph:r.croph||0,x:r.x||0,y:r.y||0,heightw:i.cropw||0,heighth:i.croph||0,heightx:i.x||0,heighty:i.y||0,imageCaption:e.imageCaption||""}}run(e,t){if(!e.hasNodeData())return this.logger.debug(`Image has no node-data, skipping. Path: "${e.getPositionedPath()}"`),void this.api.v1.model.noRender(e);const r=t.getProperty("image.defaultAspectRatio")||this.api.v1.config.get("image.defaultAspectRatio")||.5,i=t.getProperty("image.defaultBoundingBoxWidthRatio")||this.api.v1.config.get("image.defaultBoundingBoxWidthRatio")||1,s=t.getPixelWidths(),n=e.getData("instance_of"),o=e.get("fields.imageurl"),a=e.get("fields.forceImageUrl"),l={},d=[],h=this.imageUrlOptions.nameField?e.get(this.imageUrlOptions.nameField):null,g="_articlefeed"===e.get("fields.source"),c="1"===e.get("fields.isLabradorImageUrl"),p=this.preferWebp&&g?"webp":null,f=[];if((this.preferWebp||"webp"===p)&&f.push({format:"webp",type:"image/webp"}),f.push({format:"jpg",type:"image/jpeg"}),!o&&!n)return this.isEditor?e.setFiltered("image","/images/lab-head_1000.png"):e.setFiltered("image",`${this.api.v1.config.get("image.fallbackUrl")||"/404-image.png"}?noImageFound`),void(e.get("state.isUploading")?e.setFiltered("imageLoadingClass","lab-uploading-image labicon-cloud_up"):e.setFiltered("imageLoadingClass","lab-missing-image"));for(const e of this.viewports){const y={width:t.get("fields.width",!1,e)||t.getProperty("overrideImageSize.width"),height:t.get("fields.height",!1,e)||t.getProperty("overrideImageSize.height")},m=s[e],b={};for(const r of this.allFields){const i=t.get(`fields.${r}`,null,e);(i||"0"===i||0===i)&&(b[r]=i)}const w={imageId:g?void 0:n,format:p,bbRatio:t.get("filtered.bbRatio",null,e)||b.bbRatio||i,whRatio:t.get("filtered.whRatio",null,e)||b.whRatio||r},v={float:null,border:null,shapes:null};for(const e of this.cropParamsFloat)if(void 0!==b[e]){const t=parseFloat(b[e]||0);w[e]=t.toFixed(2)}for(const e of this.cropParamsString){const t=b[e]||null;t&&"null"!==t&&(v[e]=t)}w.width=t.get(`filtered.width.${e}`,null,e)||y.width||Math.ceil(m*w.bbRatio),w.height=t.get(`filtered.height.${e}`,null,e)||y.height||Math.ceil(w.width*w.whRatio);const P={width:w.width,height:w.height};w.width=Math.round(w.width*this.pixelDensityFactors[e]),w.height=Math.round(w.height*this.pixelDensityFactors[e]);if(w.width/w.height>1){if(w.width>this.maxDimension){const e=this.maxDimension/w.width;w.width=Math.floor(w.width*e),w.height=Math.floor(w.height*e)}}else if(w.height>this.maxDimension){const e=this.maxDimension/w.height;w.height=Math.floor(w.height*e),w.width=Math.floor(w.width*e)}const x=this.generateUrl(w,{imageurl:o,forceImageUrl:a,instanceOf:n,isLabradorImageUrl:c,imageUrlOptionsNameValue:h}),M=v.shapes?u.generateShapes(v.shapes,b):"";l[e]={viewport:e,url:x,formats:f,width:P.width,height:P.height,shapes:M,borderClass:"on"===v.border?"borderOn":""},d.push(l[e])}const y=l[this.viewport];e.setFiltered("viewport_list",l),e.setFiltered("viewport_array",d),e.setFiltered("image",y.url),e.setFiltered("imageWidth",y.width),e.setFiltered("imageHeight",y.height),e.setFiltered("imageCleanUrl",y.url.replace(/&(width|height)=\d+/g,"")),e.setFiltered("borderClass",y.borderClass),e.setFiltered("shapes",y.shapes),e.setFiltered("imageLoadingClass",n?"":o?"lab-content-busy":"lab-is-dummy-image")}generateUrl(e,t={}){const r=[],i={width:e.width||t.width||150,height:e.height||t.height||100},s={imageId:e.imageId||t.imageId,x:e.x,y:e.y,cropw:e.cropw,croph:e.croph,panox:e.panox,panoy:e.panoy,panow:e.panow,panoh:e.panoh,heightx:e.heightx,heighty:e.heighty,heightw:e.heightw,heighth:e.heighth,width:i.width,height:i.height,format:e.format||void 0};for(const e of Object.keys(s))void 0!==s[e]&&r.push(`${e}=${s[e]}`);let n=this.imageServer,o="?";return!t.imageurl||!t.forceImageUrl&&t.instanceOf?t.instanceOf?this.imageUrlOptions&&t.imageUrlOptionsNameValue&&(n+=`/${t.imageUrlOptionsNameValue}${t.format?`.${t.format}`:this.imageUrlOptions.extension}`):n="":(-1!==t.imageurl.indexOf(this.imageServer)||t.isLabradorImageUrl?n=t.imageurl:n+=`?imageUrl=${t.imageurl}`,o="&"),n&&(n+=o+r.join("&")),n}readPixelDensity(){const e={};for(const t of this.viewports)e[t]=this.api.v1.view.getPixelDensityFactor(t);return e}}const y={unique:(e=8)=>{const t=`0x${Math.pow(10,e-1)}`;return Math.floor((1+Math.random())*t).toString(16)},async digestString(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(r)).map((e=>e.toString(16).padStart(2,"0"))).join("")},trim(e,t){let r=(e||"").trim(),i=[];void 0===t?i.push(" "):"string"==typeof t?i.push(t):i=t;for(let e=0;e<i.length;e++)0===r.indexOf(i[e])&&(r=r.slice(i[e].length)),r.lastIndexOf(i[e])>-1&&r.lastIndexOf(i[e])===r.length-i[e].length&&(r=r.slice(0,r.length-i[e].length));return r.trim()},stripTags:(e="",t="")=>(e||"").replace(/<(?:.|\n)*?>/gm,t).trim(),stripLinks:(e="")=>(e||"").replace(/<a[^>]*>(.*?)<\/a>/gm,"$1"),sanitizeString:(e="")=>y.stripTags(y.unescapeEntities(e)).replace(/"/g,"'"),unescapeEntities:(e="")=>(e||"").replace(/&nbsp;/gi," ").replace(/&amp;/gi,"&"),toFileName:(e="")=>e.replace(/\s+/gi,"-").replace(/[^a-zA-Z0-9\-._]/gi,""),ucFirst(e=""){const t=e||"";return t.charAt(0).toUpperCase()+t.slice(1)},parsePath(e=""){const t=this.trim(e,"/").split("/"),r=/\[([0-9]+)\]/;return t.map((e=>{const t={base:e,index:null,path:e},i=r.exec(e);return i&&(t.index=parseInt(i[1],10),t.base=e.replace(`[${t.index}]`,"")),t}))},insertAtPosition:(e,t,r)=>[e.slice(0,t),r,e.slice(t)].join(""),labCtrlKey:()=>navigator.platform.toLowerCase().indexOf("mac")>=0?"⌘":"⊞",shiftKey:()=>"⇧",altKey:()=>navigator.platform.toLowerCase().indexOf("mac")>=0?"⌥":"alt",arrowUp:()=>"↑",arrowDown:()=>"↓",arrowLeft:()=>"←",arrowRight:()=>"→",keyMapper(e){if(!e)return"";switch(e){case" ":return"space";case"labCtrlKey":case"metaKey":return y.labCtrlKey();case"shiftKey":return y.shiftKey();case"altKey":return y.altKey();case"ArrowUp":return y.arrowUp();case"ArrowDown":return y.arrowDown();case"ArrowLeft":return y.arrowLeft();case"ArrowRight":return y.arrowRight();default:return y.ucFirst(e.replace("Key",""))}},hotkeyString(e={}){const t=(e.controlkeys||[]).map((e=>y.keyMapper(e)));return[...t,y.keyMapper(e.key)].map((e=>`<span class="lab-label-hotkey">${e}</span>`)).join("+")},niceNumber(e,t=" "){let r=`${e}`;const i=r.split(".");r=i.shift();let s="";for(;r.length>3;)s=`${t}${r.slice(-3)}${s}`,r=r.slice(0,-3);return(r+s).trim()+(i.length?".":"")+i.join(".")}};class m{static getLineData(e,t,r=!1){const i={};i.bodytext=this.getBodytext(e,t,r),i.tags=t.getProperty("bodytextElements")||["p"],i.headingTags=t.getProperty("bodytextHeadingElements")||["h1","h2","h3"],i.indexRegister=[];let s=0,n=0;m.analyze(i.bodytext).forEach((e=>{if(i.tags.indexOf(e.tag)>-1){const t={charIndex:e.index,bodytextIndex:s++};i.headingTags.indexOf(e.tag)>-1&&(t.bodytextHeadingIndex=n++),i.indexRegister.push(t)}})),i.indexRegister.reverse();for(const e of i.indexRegister)if("number"==typeof e.bodytextHeadingIndex){e.lastHeading=!0;break}return i}static getBodytext(e,t,r=!1){const i=e.get("fields.bodytext")||"";return!r||i?i:t.data.placeholder.bodytext||""}static analyze(e=""){const t=[],r=new RegExp("<([\\/a-zA-Z0-9\\-]*?)(?: .*?)?>","g"),i={tag:null,index:0,level:0};return e.replace(r,((e,r,s)=>{const n=r.indexOf("/"),o=n>-1?r.replace("/",""):r;i.tag?o===i.tag&&(n<0?i.level++:i.level>0?i.level--:(t.push({tag:i.tag,index:i.index,length:s+e.length-i.index}),i.tag=null)):(i.tag=o,i.index=s)})),t}}class b{constructor(e,t){this.api=e,this.viewport=t.viewport,this.allViewports=this.api.v1.viewport.getAll(),this.mainViewport=this.api.v1.viewport.getMain(),this.logger=t.logger,this.viewManager=t.viewManager,this.lineClassSelector="lab-bodytext-line",this.logger.debug(`Bodytext-helper created. Will prepare data for viewports: ${this.allViewports.join(", ")}.`)}run(e,t){this.insertContent(e,t)}insertContent(e,t){const r={bodyText:[],bodyTextHeading:[],lastBodyTextHeading:[]};let i=0;const s=m.getLineData(e,t,this.api.v1.app.mode.isEditor());for(const t of e.children){const e=this.viewManager.getView(t),i=e.get("metadata.bodyTextIndex"),n="number"==typeof i?i:null,o=e.get("metadata.bodyTextHeadingIndex");if(e.get("metadata.lastBodyTextHeading")||!1)r.lastBodyTextHeading.push(t);else if("number"==typeof o)r.bodyTextHeading[o]=r.bodyTextHeading[o]||[],r.bodyTextHeading[o].push(t);else if("number"==typeof n)r.bodyText[n]=r.bodyText[n]||[],r.bodyText[n].push(t);else{const e=s.indexRegister[0]?s.indexRegister[0].bodytextIndex+1:0;r.bodyText[e]=r.bodyText[e]||[],r.bodyText[e].push(t)}}let{bodytext:n}=s;for(const e of s.indexRegister){if(void 0!==r.bodyText[e.bodytextIndex]){const t=this.createMarkup(r.bodyText[e.bodytextIndex],e.charIndex,n);n=t.bodytext,i+=t.count}if(void 0!==e.bodytextHeadingIndex&&void 0!==r.bodyTextHeading[e.bodytextHeadingIndex]){const t=this.createMarkup(r.bodyTextHeading[e.bodytextHeadingIndex],e.charIndex,n);n=t.bodytext,i+=t.count}if(e.lastHeading&&r.lastBodyTextHeading.length){const t=this.createMarkup(r.lastBodyTextHeading,e.charIndex,n);n=t.bodytext,i+=t.count}}for(const e of Object.keys(r.bodyText)){const t=r.bodyText[e];if(t&&t.length)for(const e of t){const t=this.viewManager.getView(e);!0!==t.get("metadata.skipIfOutOfBounds")&&(n+=t.getMarkupString(),i++)}}for(const e of r.lastBodyTextHeading){const t=this.viewManager.getView(e);!0!==t.get("metadata.skipIfOutOfBounds")&&(n+=t.getMarkupString(),i++)}Sys.logger.debug(`Bodytext: Parsed bodytext. Inserted ${i} of ${e.children.length} structures. Tags: [${s.tags.join(", ")}]. Line-count: ${s.indexRegister.length}.`),e.setFiltered("lineData",s),e.setFiltered("bodytext",n)}createMarkup(e,t,r){let i=0,s="";for(;e.length;){const t=e.shift();s+=this.viewManager.getView(t).getMarkupString(),i++}return{count:i,bodytext:y.insertAtPosition(r,t,s)}}getIndexes(e,t){const{indexRegister:r}=m.getLineData(e,t,this.api.v1.app.mode.isEditor());return r.map((e=>e.bodytextIndex))}isBodytextLine(e,t){return e===t||(!!this.api.v1.util.dom.getParentByClass(e,t,this.lineClassSelector)||e.classList.contains(this.lineClassSelector))}getLineClassSelector(){return this.lineClassSelector}}class w{constructor(e,t){this.api=e,this.viewport=t.viewport,this.logger=t.logger,this.viewManager=t.viewManager,this.settings=t.settings,this.isEditor=t.isEditor,this.apiUrl=this.api.v1.properties.get("front_api_url")}prepare(e,t){if(this.isEditor&&e.isPseudo())return;const r=t.getProperty("external");r&&r.fetchInPrepare&&r.url?this.fetchExternalData(e,t,r):r&&r.url||this.logger.warning(`[External] Missing required config "external" or "external.url" for model ${e.getPositionedPath()}. No external content will be fetched.`)}run(e,t){if(this.isEditor&&e.isPseudo())return;const r=t.getProperty("external");r&&!r.fetchInPrepare&&r.url?this.fetchExternalData(e,t,r):r&&r.url||this.logger.warning(`[External] Missing required config "external" or "external.url" for model ${e.getPositionedPath()}. No external content will be fetched.`)}fetchExternalData(e,t,r){if(this.settings.fragmentMode){let t;const i=e.isNonPersistent();if(i){const r=this.api.v1.model.query.getRootModel(),i=e.getPositionedPath();r.get("fields.labExternalPath")===i&&(t=r.get("fields.labExternalData"),t&&(e.set("fields.isFragment","1",{notify:!1,registerModified:!1,save:!1,undoable:!1}),e.set("metadata.isFragment","1",{notify:!1,registerModified:!1,save:!1,undoable:!1})))}else t=e.get("fields.labExternalData");if(t){this.logger.debug(`[External] Data is available for ${i?"non-persistent":"persistent"} element ${e.getPositionedPath()}.`);let s=t;if(t&&this.isExternalData(r))try{s=JSON.parse(t)}catch(t){this.logger.warn(`[External] Cannot parse fetched external data for model ${e.getPositionedPath()}.`),s={}}return void e.set("external",s,{save:!1,undoable:!1})}}const i=this.getUrl(e,t,r,this.isEditor);if(i){if(this.isEditor){const s=e.get("state.requireExternal")||{},n=!0===s[t.getViewport()];return this.viewManager.getExternalContent(e,t,i,r,n),void(n&&(s[t.getViewport()]=!1,e.set("state.requireExternal",s,{save:!1,undoable:!1,notify:!1})))}t.setTemplate(`<div data-lab-placeholder="include" src="${i}" ></div>`)}}isExternalData(e){return"json"===e.type}getUrl(e,t,r,i){const s=this.viewManager.getDataForView(e,t),n=Mustache.render(r.url,s);if(!n)return this.logger.debug(`[External] Resolved empty url for model ${e.getPositionedPath()}`),null;lab_api.v1.app.dbg.extensiveLogging&&this.logger.debug(`[External] Resolved url for model ${e.getPositionedPath()}: "${n}"`);const o=encodeURIComponent(n),a=[`lab_viewport=${this.viewport}`];if(r.headers){const e={};for(const t of Object.keys(r.headers))e[t]=Mustache.render(r.headers[t],s);a.push(`headers=${encodeURIComponent(JSON.stringify(e))}`)}return this.buildUrl(e,o,i,a)}buildUrl(e,t,r,i){const s=i.length?i.join("&"):null;return r?`${this.api.v1.properties.get("proxy")}?query=${t}${s?`&${s}`:""}`:e.isNonPersistent()?`${this.apiUrl}/external/dynamic-data/${this.settings.contentId}/?path=${encodeURIComponent(e.getPositionedPath())}&url=${t}${s?`&${s}`:""}`:`${this.apiUrl}/external/node/${e.getId()}/${this.settings.contentId}/${t}${s?`?${s}`:""}`}}class v{constructor(e){this.description=e,this.startTime=this.getTime(),this.steps=[]}getTime(){return(new Date).getTime()}start(e="[default]"){return{time:this.getTime(),description:e,duration:0}}stop(e){return e.duration=this.getTime()-e.time,this.steps.push(e),e.duration}step(e="[default]"){const t={time:this.getTime(),description:e};return t.duration=this.steps.length>0?t.time-this.steps[this.steps.length-1].time:t.time-this.startTime,this.steps.push(t),t.duration}getMin(){let e=null,t=null;for(const r of this.steps)(null===e||r.duration<e)&&(e=r.duration,t=r);return{time:e,step:t}}getMax(){let e=0,t=null;for(const r of this.steps)(null===t||r.duration>e)&&(e=r.duration,t=r);return{time:e,step:t}}getSteps(){let e=0,t=0,r=null,i=null,s=null;for(const n of this.steps)e+=n.duration,(null===i||n.duration>t)&&(t=n.duration,i=n),(null===r||n.duration<r)&&(r=n.duration,s=n);return{description:this.description,totalTime:e,minTime:r,maxTime:t,meanTime:Math.round(e/this.steps.length),minTimeStep:s,maxTimeStep:i,steps:this.steps}}}const P={percentToGrid:(e,t=12)=>Math.round(e/100*t),gridToPercent:(e,t=12)=>P.floatPrecision(e/t*100),floatPrecision:e=>parseFloat(parseFloat(e).toFixed(2)),distributePercent:(e,t,r=12)=>P.distributeGrid(P.percentToGrid(e,r),t).map((e=>P.gridToPercent(e,r))),distributeGrid:(e,t)=>{let r=t;r>e&&(r=e,Sys.logger.warn(`grid.distributeGrid: Requested count ${t} is larger than gridSize ${e}. Will use count ${r}.`));const i=e/r;if(Number.isInteger(i))return Array(r).fill(i);let s=0,n=!0,o=[];for(let e=0;e<r;e++){const e=n?Math.ceil(i):Math.floor(i);o.push(e),s+=e,n=!n}let a=s-e;if(s!==e){const e=[];for(;a>0&&o.length;){let t=o.shift();t>1&&(t--,a-=1),e.push(t)}o=o.concat(e)}return o.length!==r&&Sys.logger.warn(`Utility-method grid.distributeGrid will return a faulty array. Excpected a count of ${r}, got ${o.length} ...`),o}},x={getData:(e,t,r,i,s,n)=>{const o=P.percentToGrid(e||100,i.span),a={};for(const e of Object.keys(t))t[e]&&(a[e]=P.percentToGrid(t[e],i.span));const l={width:o,css:"",vp:{},cssVp:{}},d=x.getMatchingRule(s,r,i.span);l.vp=x.applyRule(o,a,s.length,d.values,i,n);for(const e of Object.keys(i.prefix))l.cssVp[e]=i.prefix[e]+l.vp[e];return l.css=Object.values(l.cssVp).join(" "),l},applyRule:(e,t,r,i,s,n)=>{const o={};for(const a of Object.keys(s.prefix)){let s=null;t[a]?s=t[a]:i[a]&&(s=x.getMatchingRuleValue(i[a],n,r,e)),o[a]=s?parseInt(s,10):e}return o},getMatchingRuleValue:(e,t,r,i)=>{for(const s of Object.keys(e)){if("first-child"===s&&0===t)return e[s];if("last-child"===s&&t===r-1)return e[s];if("inherit"===s&&e[s])return i;if(x.getNthChild(s)===t+1)return e[s]}return e.default?e.default:null},getNthChild:e=>"nth-child("===e.substring(0,10)?parseInt(e.substring(0,e.length-1).substring(10),10):null,getMatchingRule:(e,t,r)=>{const i=e.length;for(let s=t.length-1;s>=0;s--){if("odd"===t[s].condition&&!x.isEven(i))return t[s];if("even"===t[s].condition&&x.isEven(i))return t[s];if("number"==typeof t[s].condition&&t[s].condition===i)return t[s];if(Array.isArray(t[s].condition)&&t[s].condition.length===i){const n=[];for(let t=0;t<i;t++)n.push(P.percentToGrid(e[t],r));if(x.hasArrayMatch(t[s].condition,n))return t[s]}}return{values:{}}},isEven:e=>!(e%2),hasArrayMatch:(e,t)=>{if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if("*"!==e[r]&&e[r]!==t[r])return!1;return!0}};class M{constructor(e={}){this.viewportInfo=e,this.cache=new Map,this.buildtin={width:{viewport:{default:!0},fallback:{default:this.viewportInfo.main}},external:{viewport:{default:!0},fallback:{default:this.viewportInfo.main},attributes:{"*":{viewport:{default:!0},fallback:{default:this.viewportInfo.main}}}}}}resetCache(){this.cache.clear()}get(e,t,r,i=null,s){const n=this.getCacheKey(t,r,i,s);if(!this.cache.has(n)){let t=e.getProperty(`viewportMap.${r}`);!t&&this.buildtin[r]&&(t=this.buildtin[r]),"string"==typeof t&&(t=e.getProperty(`viewportMap.${t}`)),t&&i&&"string"==typeof t.attributes&&(t.attributes=e.getProperty(`viewportMap.${t.attributes}`)),this.cache.set(n,this.defineOrder(s,i,t))}return this.cache.get(n)}defineOrder(e,t,r){if(!r)return[];if(t&&(!r.attributes||!r.attributes[t]&&!r.attributes["*"]))return[];const i={viewport:{},fallback:{},...t?r.attributes[t]||r.attributes["*"]:r},s=this.parseMap(e,i);return s.length&&!1!==i.fallback.no_viewport&&s.push(null),s}parseMap(e,t,r=[]){if(!t)return r;if(!1===t.viewport[e])return r;if((!0===t.viewport[e]||t.viewport.default)&&(r.includes(e)||r.push(e)),t.fallback){if(t.fallback[e]&&t.fallback[e]!==e){const i=t.fallback[e];return t.fallback={...t.fallback},delete t.fallback[e],this.parseMap(i,t,r)}if(t.fallback.default&&t.fallback.default!==e){const e=t.fallback.default;return t.fallback={...t.fallback},delete t.fallback.default,this.parseMap(e,t,r)}}return r}getCacheKey(e,t,r,i){return[e,t,r,i].join("|")}}const C={functionMap:{},isValidFunction:e=>{if(void 0!==C.functionMap[e])return C.hasFunction(e);let t;try{t=eval.call(null,e)}catch(e){t=null}return C.functionMap[e]=t,C.hasFunction(e)},hasFunction:e=>typeof C.functionMap[e]==typeof Function,getFunction:e=>!!e&&(C.isValidFunction(e)?C.functionMap[e]:lab_api.v1.ns.get(e)||!1)};class S{constructor(){this.resolved={pathMatch:new Map}}static getPropertyTypeAndIndex(e){const t=/(.+)\[(.*)\]/.exec(e);if(!t||t.length<3)return[e,null,!1];const r=t[1],i=t[2]?parseInt(t[2].trim(),10):null;return[r,Number.isInteger(i)?i:null,""===t[2].trim()]}pathMatch(e,t){const r=`${e}||${t}`;if(this.resolved.pathMatch.has(r))return this.resolved.pathMatch.get(r);let i=null;return(this.exactMatch(t,e)||this.wildcardMatch(t,e))&&(i=e),this.resolved.pathMatch.set(r,i),i}exactMatch(e,t){return t.endsWith("//")?e.endsWith(t.slice(0,-1)):t.endsWith("/")?e.endsWith(t):e.endsWith(`${t}/`)}wildcardMatch(e,t){const r=y.trim(t,[" ","/"]).split("/").reverse(),i=y.trim(e,[" ","/"]).split("/").reverse();return this.arrayMatch(i,r)}arrayMatch(e,t,r){const i=e.shift(),s=t.shift();return i===s||"*"===s?!t.length||this.arrayMatch(e,t):""===s?(e.unshift(i),this.arrayMatch(e,t,!0)):!(!r||!e.length)&&(t.unshift(s),this.arrayMatch(e,t,!0))}static getViewForMenuItem(e){return S.getTarget(e.getModel(),e.getView(),{pathHelper:e.getConfig("pathHelper")}).view}static getTarget(e,t,r={}){const i={model:e,view:t};if(r.pathHelper&&r.pathHelper.type){const e=Array.isArray(r.pathHelper.type)?r.pathHelper.type:[r.pathHelper.type];for(const r of e){const e=this.getTargetForPath(i.model,r);if(e)return i.model=e,i.view=lab_api.v1.view.getView(i.model,t.getViewport()),i}return Sys.logger.warn(`[PathHelper] Cannot get target for source. Check config. Tried "${r.pathHelper.type}". Will return original result.`),i}if(r.source&&"model"!==r.source){const e=C.getFunction(r.source);if(!e)return Sys.logger.warn(`[PathHelper] Cannot get function for source. Check config. Tried "${r.source}". Will return original result.`),i;if(i.model=e(),!i.model)return Sys.logger.warn(`[PathHelper] Cannot get bound source from supplied function. Check config. Tried "${r.source}". Will return original result.`),i;i.view=i.model}return i}static getTargetForPath(e,t){const r=t.split(".");if(!["parent","child","root"].includes(r[0]))return Sys.logger.warn(`[PathHelper] Supplied path not valid. Check config. Tried "${t}". Will return original result.`),null;let i;if("parent"===r[0])i=e.getParent();else if("root"===r[0])i=lab_api.v1.model.query.getRootModel();else{const t=r[1],[s,n]=S.getPropertyTypeAndIndex(t);if(null===n)i=lab_api.v1.model.query.getChildOfType(e,s);else{i=lab_api.v1.model.query.getModelsByType(s,e.children)[n]||null}}return i}}class T{constructor(e){this.getView=e.getView,this.getMarkupForModels=e.getMarkupForModels,this.getMarkupString=e.getMarkupString,this.configReader=e.configReader,this.localisation=e.localisation,this.proxies={config:null,cmsConfig:null,root:null,selector:null,preload:null,localisation:null},this.parsedProps=new Map,this.isEditor=this.configReader.getCms("app.isEditMode")}parseProp(e){return this.parsedProps.has(e)||this.parsedProps.set(e,this.doParseProp(e)),this.parsedProps.get(e)}doParseProp(e){const t={prop:e,attr:void 0};if(!e.endsWith("]"))return t;const r=/(.+)\[(.*)\]/.exec(e);return!r||r.length<3?t:{prop:r[1],attr:r[2]}}getProxy(e,t=this.getView(e)){return t.getProxy()||t.setProxy(this.createProxy(e,t)),t.getProxy()}createProxy(e,t){const r=(e,r)=>{const i=this.parseProp(r);return i.attr?t.get(`${e}.${i.prop}.${i.attr}`):t.get(`${e}.${i.prop}`)},i=new Proxy({},{get:(e,t)=>r("fields",t),has:(e,t)=>!!r("fields",t)}),s=new Proxy({},{get:(e,r)=>t.get(`metadata.${r}`),has:(e,r)=>!!t.get(`metadata.${r}`)}),n=new Proxy({},{get:(e,r)=>t.get(`filtered.${r}`),has:(e,r)=>!!t.get(`filtered.${r}`)});return new Proxy({},{get:(e,r)=>"fields"===r?i:"metadata"===r?s:"filtered"===r?n:t.get(r),has:(e,r)=>!!t.get(r)})}getRootProxy(){return this.proxies.root||(lab_api.v1.model.query.getRootModel()?this.proxies.root=this.getProxy(lab_api.v1.model.query.getRootModel()):this.proxies.root={}),this.proxies.root}getParentProxy(e,t){return e.parent?this.isEditor?e.parent.isMarkedForDeletion()?null:(t.getParentProxy()||t.setParentProxy(new Proxy(this.getProxy(e.parent),{get:(t,r)=>(e.parent.addToRedrawDependencies(e),t[r]),has:(e,t)=>t in e})),t.getParentProxy()):this.getProxy(e.parent):null}getChildrenProxy(e,t){return t.getChildrenProxy()||t.setChildrenProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith("+")&&(s=!0,i=i.substring(0,i.length-1));const n="all"===i?e.children:lab_api.v1.model.query.getModelsByType(i,e.children,s);return this.getProxiesForModels(n,!0)},has:(e,t)=>!0})),t.getChildrenProxy()}getChildProxy(e,t){return t.getChildProxy()||t.setChildProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith("+")&&(s=!0,i=i.substring(0,i.length-1));let[n,o]=[i,null,!1];if(i.endsWith("]")&&([n,o]=S.getPropertyTypeAndIndex(i)),null===o){const t=lab_api.v1.model.query.getChildOfType(e,n,s);return t?this.getProxiesForModels([t],!1):null}const a=lab_api.v1.model.query.getModelsByType(n,e.children,s);return a[o]?this.getProxiesForModels([a[o]],!1):null},has:(e,t)=>!0})),t.getChildProxy()}getStoreProxy(e,t,r=!1){if(!t.getStoreProxy(r)){const e={};t.setStoreProxy({get:new Proxy(e,{has:()=>!0,get:(e,t)=>t in e?e[t]:""}),set:new Proxy(e,{has:()=>!0,get:(e,t)=>()=>(r,i)=>(e[t]=i(r),"")})})}return t.getStoreProxy(r)}getPreloadProxy(e){return this.proxies.preload||(this.proxies.preload=this.createPreloadProxy(e)),this.proxies.preload}createPreloadProxy(e){return new Proxy({},{get:(t,r)=>e.getObject(r),has:(e,t)=>!0})}getChildrenMarkupProxy(e,t){return t.getChildrenMarkupProxy()||t.setChildrenMarkupProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith("+")&&(s=!0,i=i.substring(0,i.length-1));let[n,o,a]=[i,null,!1];i.endsWith("]")&&([n,o,a]=S.getPropertyTypeAndIndex(i));const l="all"===n?e.children:lab_api.v1.model.query.getModelsByType(n,e.children,s);return null===o?this.getMarkupForModels(l,a):this.getMarkupForModels(l[o]?[l[o]]:[],!1)},has:(e,t)=>!0})),t.getChildrenMarkupProxy()}getChildMarkupProxy(e,t){return t.getChildMarkupProxy()||t.setChildMarkupProxy(new Proxy({},{get:(t,r)=>{let i=r,s=!1;i.endsWith("+")&&(s=!0,i=i.substring(0,i.length-1));let[n,o]=[i,null];i.endsWith("]")&&([n,o]=S.getPropertyTypeAndIndex(i));const a=lab_api.v1.model.query.getModelsByType(n,e.children,s);return a.length?null===o||0===o?this.getMarkupForModels([a[0]],!1):this.getMarkupForModels(a[o]?[a[o]]:[],!1):""},has:(e,t)=>!0})),t.getChildMarkupProxy()}getSelectorProxy(){if(!this.proxies.selector){const e={get:(e,t)=>{const r=lab_api.v1.model.query.getModelBySelector(t);return r?this.getMarkupString(r,this.getView(r)):""},has:(e,t)=>!0};this.proxies.selector=new Proxy({},e)}return this.proxies.selector}getConfigProxy(){if(!this.proxies.config){const e={get:(e,t)=>this.configReader.get(t),has:(e,t)=>!0};this.proxies.config=new Proxy({},e)}return this.proxies.config}getCmsConfigProxy(){if(!this.proxies.cmsConfig){const e={get:(e,t)=>this.configReader.getCms(t),has:(e,t)=>!0};this.proxies.cmsConfig=new Proxy({},e)}return this.proxies.cmsConfig}getLocalisationProxy(){return this.proxies.localisation||(this.proxies.localisation=()=>(e,t)=>this.localisation.get(e,{fallbackValue:""})),this.proxies.localisation}getProxiesForModels(e,t=!0){const r=e.map((e=>this.getProxy(e)));return t?r:r[0]}}class k extends h{constructor(e){super({behaviours:e.behaviours,entries:e.entries,debug:e.settings.debug}),this.logger=e.logger,this.state={isEditor:!1},this.settings=e.settings,this.logger.debug(`Creating instance of ViewManager for viewport ${e.viewport}.`),this.resourceManager=e.resourceManager,this.configReader=e.configReader,this.configProcessor=e.configProcessor,this.viewMap=new Map,this.gridSettings=this.getGridSettings(),this.viewport={name:e.viewport,main:this.configProcessor.getMainViewport(),isMain:this.configProcessor.isMainViewport(),width:this.configProcessor.getViewportWidth()},this.styleManager=e.styleManager,this.preloadHandler=e.preloadHandler,this.localisation=e.localisation,this.viewportsSettings=this.configReader.get("viewports")||{},this.ViewHelpers={};const t=new M(this.viewport);this.viewEventPipe={getViewportOrder:t.get.bind(t)},this.rootModel=null,this.proxyManager=new T({configReader:this.configReader,localisation:this.localisation,getView:this.getView.bind(this),getMarkupForModels:this.getMarkupForModels.bind(this),getMarkupString:this.getMarkupString.bind(this)}),this.renderers={renderViewTemplate:this.renderViewTemplate.bind(this),renderViewPartial:this.renderViewPartial.bind(this),renderPartial:this.renderPartial.bind(this),renderPageElement:this.renderPageElement.bind(this)},this.renderHelpers={trim:()=>(e,t)=>t(e).replace(/\t|\r\n|\n|\r/gm," ").replace(/ +/gm," ").trim(),sanitizeString:()=>(e,t)=>y.sanitizeString(t(e)),stripTags:()=>(e,t)=>y.stripTags(t(e)),stripLinks:()=>(e,t)=>y.stripLinks(t(e)),encodeURIComponent:()=>(e,t)=>encodeURIComponent(t(e)),cachebuster:()=>e=>{const t=e.split(","),r="cms"===t[0]?"cms":"view",i=this.configReader.getCms(`deployTimestamps.${r}`);if(!i)return"";return`${(t[1]||"?")+(t[2]||"v")}=${i}-L4`},toFixed:()=>(e,t)=>{const[r,i]=t(e).trim().split(" ");return parseFloat(r).toFixed(i)}}}apiReady(e){this.ViewHelpers={image:new f(e,this.getViewHelperParams()),bodytext:new b(e,this.getViewHelperParams()),external:this.getExternalViewHelper(e)}}getGridSettings(){const e=this.configProcessor.getViewport(),t={prefix:this.configReader.get("grid.grid_prefix"),absPrefix:this.configReader.get("grid.abs_grid_prefix"),span:this.configReader.get("grid.total_grid_spans")};return t.prefix[e]||(t.prefix[e]=""),t}getViewHelperParams(){return{viewport:this.viewport.name,logger:this.logger,viewManager:this,isEditor:this.state.isEditor,settings:this.settings}}getViewHelper(e){return e in this.ViewHelpers?this.ViewHelpers[e]:null}getExternalViewHelper(e){return new w(e,this.getViewHelperParams())}allowViewport(e){const t=e.get("metadata.viewportBlacklist");return!t||!Array.isArray(t)||!t.includes(this.viewport.name)}draw(e=[],t=null){this.emitEvent("render",this.viewport.name),this.logger.debug(`[ViewManager] Start rendering for viewport ${this.viewport.name}.`);const r=new v("ViewManager.draw");for(const t of e)this.drawModel(t);this.logger.debug(`[ViewManager] Rendering finished for viewport ${this.viewport.name}. Element-count: ${lab_api.v1.model.query.getModelsFromCache().length}. Duration ${r.step()} ms.`);let i=[];for(const t of e){const e=this.getView(t);i.push(e.getMarkupString())}const s=this.notifyFrontRendered(i);return s.length&&(this.logger.warn('[ViewManager] Listener for event "app-rendered" has modified markup returned from rendering engine.'),i=s.pop()),"function"==typeof t&&t(i),i}notifyFrontRendered(e){return this.requestEvent("rendered",e,this.viewport.name)}drawModel(e,t=!0){if(lab_api.v1.app.dbg.logger.add(this.constructor.name,"drawModel",this.viewport.name),!this.allowViewport(e))return void this.logger.debug(`[ViewManager] Element ${e.getPositionedPath()} is not allowed on viewport ${this.viewport.name}.`);const r=this.getView(e);if(this.prepareDrawing(e,r),t){const t=r.getProperty("childLimit");for(const r of e.children)this.allowChild(e,r,t)&&this.drawModel(r)}this.drawPrepared(e,r)}allowChild(e,t,r){return t.get("metadata.hideViewport",this.viewport.name)?(this.logger.warn(`[ViewManager] Metadata "hideViewport" has cancelled rendering of element "${t.getPositionedPath()}" for viewport "${this.viewport.name}".`),this.hideViewportDetected(t)):!(r&&e.children.indexOf(t)>=r)||(this.logger.warn(`[ViewManager] Child-limit (${r}) reached for "${e.getType()}". Child: "${t.getPositionedPath()}". Viewport "${this.viewport.name}".`),this.childLimitDetected(e,t,r))}childLimitDetected(e,t,r){const i=this.requestEvent("childLimitReached",e,t,this.viewport.name,r);return!!i.length&&!!i.pop()}hideViewportDetected(e){const t=this.requestEvent("elementHidden",e,this.viewport.name);return!!t.length&&!!t.pop()}prepareDrawing(e,t){const r=this.performanceLogger.start(["prepare",e.getType()]);this.prepareView(e,t),t.getGrid()||(this.getAndSetGridData(e,t),this.gridIsDefined(e,t)),this.proxyManager.getProxy(e,t),this.notifyOnPrepareViewHelper(e,t),this.prepareViewHelper(e,t),this.notifyOnReady(e,t),this.performanceLogger.end(r)}gridIsDefined(e,t){}drawPrepared(e,t){let r=this.performanceLogger.start(["assembleData",e.getType()]);const i=this.getDataForView(e,t);this.performanceLogger.end(r),this.runViewHelper(e,t),this.notifyBeforeElementDraw(e,t),r=this.performanceLogger.start(["template",e.getType()]),this.renderTemplate(e,t,i),this.performanceLogger.end(r),this.markupStringReady(e,t)}markupStringReady(e,t){this.notifyOnRendered(e,t)}notifyOnPrepareViewHelper(e,t){e.isPseudo()||this.emitBehaviour("onPrepareViewHelper",e,t)}notifyOnReady(e,t){e.isPseudo()||this.emitBehaviour("onReady",e,t)}notifyOnViewHelper(e,t){e.isPseudo()||this.emitBehaviour("onViewHelper",e,t)}notifyBeforeElementDraw(e,t){e.isPseudo()||(this.emitBehaviour("onRender",e,t),this.emitEntry("onRender",e,t))}notifyOnRendered(e,t){this.emitBehaviour("onRendered",e,t),this.emitEntry("onRendered",e,t)}getDataForView(e,t){return t.getData()||this.getAndSetViewData(e,t)}createView(e){const t=e.getGuid();return this.viewMap.get(t)||this.viewMap.set(t,this.newViewInstance(e)),this.viewMap.get(t)}newViewInstance(e){return new p(this.viewport.name,e,this.viewEventPipe)}getView(e){return this.viewMap.get(e.getGuid())||this.createView(e)}getViews(){return this.viewMap.values()}prepareView(e,t){t.isPrepared()||(lab_api.v1.app.dbg.logger.add(this.constructor.name,"prepareView",this.viewport.name),this.setTemplate(e,t),this.setProperties(e,t),this.viewIsResolved(e,t))}setTemplate(e,t){t.setTemplate(this.resourceManager.getTemplateForModel(e,t))}setProperties(e,t){t.setProperties(this.resourceManager.getPropertiesForModel(e,t),!0)}viewIsResolved(e,t){t.setPreparedState(!0)}prepareViewHelper(e,t){if(e.isPseudo())return;const r=t.getProperty("viewHelper");if(!r)return;const i=this.getViewHelper(r);if(i){if(i.prepare){const r=this.performanceLogger.start(["viewhelper-prepare",e.getType()]);i.prepare(e,t),this.performanceLogger.end(r)}}else this.logger.warning(`[ViewManager] Cannot find view-helper ${r} for model ${e.getPositionedPath()}.`)}runViewHelper(e,t){if(e.isPseudo())return;const r=t.getProperty("viewHelper");if(!r)return;const i=this.getViewHelper(r);if(i){this.notifyOnViewHelper(e,t);const r=this.performanceLogger.start(["viewhelper-run",e.getType()]);i.run(e,t),this.performanceLogger.end(r)}else this.logger.warning(`[ViewManager] Cannot find view-helper ${r} for model ${e.getPositionedPath()}.`)}renderTemplate(e,t,r){lab_api.v1.app.dbg.extensiveLogging&&this.logger.debug(`[ViewManager] Start renderTemplate for model ${e.getPositionedPath()}`),e.getNoRenderState()?this.logger.debug(`[ViewManager] Model-state disallows rendering model "${e.getPositionedPath()}".`):this.renderTemplateAndData(e,t,r)}getAndSetViewData(e,t){const r=this.getViewData(e,t);return t.setData(r),r}getGridData(e){const t=e.getGrid()||{};return{width:t.width,absWidth:e.getAbsoluteGridWidth(),css:t.css,absCss:e.getAbsGridCss(),vp:t.vp,absVp:e.getAbsoluteGridWidths(),cssVp:t.cssVp,percentage:P.gridToPercent(t.width)}}getViewData(e,t){const r=lab_api.v1.model.query.getRootModel()||e.getRootParent(),i=lab_api.v1.view.getView(r,t.getViewport());return{get:{current:this.proxyManager.getProxy(e,t),parent:this.proxyManager.getParentProxy(e,t),root:this.proxyManager.getRootProxy(),child:this.proxyManager.getChildProxy(e,t),children:this.proxyManager.getChildrenProxy(e,t),store:this.proxyManager.getStoreProxy(e,t)},set:{store:this.proxyManager.getStoreProxy(e,t,!0)},getPreload:this.proxyManager.getPreloadProxy(this.preloadHandler),child:this.proxyManager.getChildMarkupProxy(e,t),childByIndex:()=>(t,r)=>{const[i,s]=r(t).trim().split(" "),n=parseInt(i,10)||0,o=s?lab_api.v1.model.query.getChildrenOfType(e,s):e.getChildren();return o[n]?this.getMarkupString(o[n],this.getView(o[n])):null},children:this.proxyManager.getChildrenMarkupProxy(e,t),selector:this.proxyManager.getSelectorProxy(e,t),size:{grid:this.getGridData(t),pixelWidth:t.getPixelWidth(),pixelWidths:t.getPixelWidths()},style:{definition:()=>(r,i)=>this.styleManager.getStyleFromDefinition(e,t,i(r)),collection:()=>(r,i)=>this.styleManager.getStyle(e,t,i(r))},app:{viewport:{name:this.viewport.name,width:this.viewport.width,main:this.viewport.main,isMain:this.viewport.isMain},isEditor:this.state.isEditor,isFront:!this.state.isEditor},render:{template:this.renderers.renderViewTemplate,partial:this.renderers.renderViewPartial,sitePartial:this.renderers.renderPartial,pageElement:this.renderers.renderPageElement},helper:{trim:this.renderHelpers.trim,sanitizeString:this.renderHelpers.sanitizeString,stripTags:this.renderHelpers.stripTags,stripLinks:this.renderHelpers.stripLinks,encodeURIComponent:this.renderHelpers.encodeURIComponent,cachebuster:this.renderHelpers.cachebuster,toFixed:this.renderHelpers.toFixed},calculator:{add:()=>(e,t)=>{const[r,i]=t(e).trim().split(" ");return parseFloat(r)+parseFloat(i)},subtract:()=>(e,t)=>{const[r,i]=t(e).trim().split(" ");return parseFloat(r)-parseFloat(i)},divide:()=>(e,t)=>{const[r,i]=t(e).trim().split(" ");return parseFloat(r)/parseFloat(i)},multiply:()=>(e,t)=>{const[r,i]=t(e).trim().split(" ");return parseFloat(r)*parseFloat(i)}},if:()=>(e,t)=>{const r={"=":(e,t)=>e==t,"!=":(e,t)=>e!=t,"<":(e,t)=>e<t,">":(e,t)=>e>t,"[]":(e,t)=>e.includes(t)};let i=0,s=null,n=[];for(;n.length<2&&i<Object.keys(r).length;)s=Object.keys(r)[i++],n=e.split(s);if(n.length>1){const[e,i]=n.map((e=>t(e).trim()));if(r[s](e,i))return"1"}return""},getConfig:this.proxyManager.getConfigProxy(),getCmsConfig:this.proxyManager.getCmsConfigProxy(),image:{getFrontCropUrl:this.getFrontCropUrlHelper(r,i)},lang:this.proxyManager.getLocalisationProxy()}}getFrontCropUrlHelper(e,t){return()=>(t,r)=>{const i=e.get("frontCrop");if(i&&i.pano){const e=r(t).split(","),s=parseInt(e[0],10),n=parseInt(e[1],10),o=e[2]||void 0,a=this.getViewHelper("image").generateUrl(i.pano.fields,{instanceOf:i.pano.instance_of,imageUrlOptionsNameValue:i.pano.instance_of,imageId:i.pano.instance_of,width:s,height:n,format:o});if(a)return a}const s=(lab_api.v1.config.get("faviconList")||[]).pop();return s&&s.iconPath?s.iconPath.startsWith("http")?s.iconPath:lab_api.v1.properties.get("customer_front_url")+s.iconPath:""}}renderPageElement(){return(e,t)=>{const r=e.trim().split(" "),i=t(r.shift()),s=t(r.shift())||i,n=lab_api.v1.config.get(`pageElements.${i}`);if(!n)return this.renderViewPartial()(s,t);const o=this.getTemplate("widgets/structures/root");return o?t(this.renderPageElementRecursive(o,n)):(this.logger.warn('[ViewManager] Cannot find root-widget at "widgets/structures/root". Widget not rendered.'),"")}}getTemplate(e){return this.resourceManager.templates[e]}renderPageElementRecursive(e,t,r={value:1}){const{viewport:i,pageType:s,flag:n}=t.requirements||{};if((!i||i===this.viewport.name)&&(!s||s===this.configProcessor.getPageType())&&(!n||lab_api.v1.util.featureFlags.enabled(n,this.settings.contentId))){const i=r.value,s=t.settings||{},n=[];if(t.children)for(let e=0;e<t.children.length;e++){const i=t.children[e],s=this.getTemplate(`widgets/${i.type}`);if(s){r.value++;const e=this.renderPageElementRecursive(s,i,r);e&&n.push(e)}else this.logger.warn(`[ViewManager] Cannot find widget at "widgets/${i.type}". Widget not rendered.`)}const{tags:o}=Mustache;Mustache.tags=["[[","]]"];const a=Mustache.render(e,{children:n.join(""),settings:s,id:i});return Mustache.tags=o,a}return null}renderViewTemplate(){return(e,t)=>{const r=t(e.trim());return r&&this.getTemplate(r)?t(this.getTemplate(r)):(this.logger.debug(`Render template: Path is not valid: '${r}'`),"")}}renderViewPartial(){return(e,t)=>this.renderPartialWithFallback(e.trim(),t)}renderPartial(){return(e,t)=>this.renderPartialWithOutFallback(e.trim(),t)}renderPartialWithOutFallback(e,t){return this.renderViewTemplate()(`partial/${e}`,t)}renderPartialWithFallback(e,t,r=null,i=[]){const s=r||lab_api.v1.site.getSite().alias,n=this.renderViewTemplate(),o=n(`partial/site/${s}/${e}`,t);if(!o){i.push(s);const r=lab_api.v1.config.get("lab_fallback_site",s);return r&&!i.includes(r)?this.renderPartialWithFallback(e,t,r,i):n(`partial/${e}`,t)}return o}getPixelWidths(e,t){const r=t.getPixelWidths();if(r)return r;const i=t.getAbsoluteGridWidths(),s=i[this.viewport.main],n={};for(const e in this.viewportsSettings)if(this.viewportsSettings[e]){const t=i[e]?i[e]:s;n[e]=Math.ceil(t/this.gridSettings.span*this.viewportsSettings[e].deviceWidth)}return n}calculateGridData(e,t){const r=this.viewport.main,i=t.getWidth(),s=e.getViewportWidths();let n=[i],o=t.getProperty("gridRules")||[];if(Array.isArray(o)||(o=Object.values(o)),o.length){const t=e.parent?e.parent.getPersistentChildren():null;t&&(n=t.map((e=>e.getWidth(r)||e.getWidth())))}return x.getData(i,s,o,this.gridSettings,n,e.getModelIndex(!0))}calculateAbsoluteGridWidths(e,t){const r=t.getGrid().vp;r||this.logger.error("gridWidths do not exist. It should ...");let i={};if(e.parent){const t=this.getView(e.parent);i=this.getAbsoluteGridWidths(e.parent,t)||i}const s={};for(const e of Object.keys(r))s[e]=P.floatPrecision(r[e]/this.gridSettings.span*(i[e]||this.gridSettings.span));return s}getAbsoluteGridWidths(e,t){return t.getAbsoluteGridWidths()}getAbsoluteGridCss(e,t){if(!this.gridSettings.absPrefix)return"";const r=t.getAbsoluteGridWidths();return Object.keys(r).map((e=>this.gridSettings.absPrefix[e]?this.gridSettings.absPrefix[e]+r[e]:"")).join(" ")}getAndSetGridData(e,t){const r=this.calculateGridData(e,t);t.setGrid(r),t.setGridWidth(r.vp[this.viewport.name]),t.setAbsoluteGridWidths(this.calculateAbsoluteGridWidths(e,t)),t.setAbsGridCss(this.getAbsoluteGridCss(e,t)),t.setPixelWidths(this.getPixelWidths(e,t))}renderTemplateAndData(e,t,r){t.setMarkupString(Mustache.render(t.getTemplate(),r,this.resourceManager.templates))}getMarkupForModels(e,t=!0){const r=e.map((e=>this.getMarkupString(e,this.getView(e))));return t?r:r.join("")}getMarkupString(e,t){return t.getMarkupString()}getPlaceholders(){return{}}getMarkup(e){return this.getView(e).getMarkup()}}const $={create(){if("undefined"!=typeof crypto&&crypto.randomUUID)return crypto.randomUUID();let e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const r=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?r:7&r|8).toString(16)}))}};class R{constructor(e,t={}){this.parent=null,this.children=[],this.path=e.path,this.data={type:e.type,metadata:e.metadata,contentdata:e.contentdata,width:R.validateInputWidth(e.width),guid:e.guid||$.create(),selector:e.selector},this.fallbackData=e.fallback,this.source={model:null,targets:[],keys:[]};const r=e.state||{};this.state={isNonPersistent:!!r.isNonPersistent,isPseudo:!!r.isPseudo,noRender:!1},this.cache={serialized:null,filtered:e.filtered||{},external:e.external||null,getter:new Map,path:null,positionedPath:{persistent:null,nonPersistent:null},childCount:{value:0}},this.eventPipe={keyModified:t.keyModified,childAdded:t.childAdded}}static validateInputWidth(e){const t=R.getEmptyDataObject();t.value="number"==typeof e?e:100;const r=n.object(e,t);return r.value||0!==Object.keys(r.vp).length||(r.value=100),r}static getEmptyDataObject(){return{value:null,vp:{}}}getNoRenderState(){return this.state.noRender}setNoRenderState(e){this.state.noRender=!!e}setDataProperty(e,t){this.data[e]=t}getId(){return this.data.contentdata&&this.data.contentdata.id||null}getGuid(){return this.data.guid}isNonPersistent(){return this.state.isNonPersistent||this.state.isPseudo}isPseudo(){return this.state.isPseudo}isDerived(){return!!this.source.model}hasNodeData(e=!1){if(this.data.contentdata)return!0;if(e)for(const t of this.children)if(t.hasNodeData(e))return!0;return!1}getSourceModel(){return this.source.model}setSourceModel(e,t){this.source.model=e,this.source.keys=t}addSourceTarget(e){this.source.targets.includes(e)||this.source.targets.push(e)}getSourceTargets(){return this.source.targets}hasSourceKey(e){if(!this.source.model)return!1;if(!this.source.keys.length)return!0;const t=e.split(".");for(;t.length;){if(this.source.keys.includes(t.join(".")))return!0;t.pop()}return!1}hasKeyInTarget(e){for(const t of this.source.targets)if(t.hasSourceKey(e))return!0;return!1}isSourceKey(e){return this.source.keys.includes(e)}setParent(e){this.parent=e}getParent(){return this.parent}getRootParent(){return this.parent?this.parent.getRootParent():this}getChildren(){return this.children}getPersistentChildren(){return this.children.filter((e=>!e.isNonPersistent()))}getNonpersistentChildren(){return this.children.filter((e=>e.isNonPersistent()))}getPersistentSiblings(){return this.parent?this.parent.getPersistentChildren():null}addChild(e,t,r=!1){this.addChildAtIndex(e,r?0:this.children.length,t)}addChildAtIndex(e,t,r=!0,i=!1){return e.setParent(this),this.children.length<=t?this.children.push(e):this.children.splice(t,0,e),e.resetPath(),!i&&this.eventPipe.childAdded&&this.eventPipe.childAdded(this,e,t),this.children}getPath(e=!1){return null===this.cache.path&&(this.cache.path=this.parent?`${this.parent.getPath()}/`:this.path),this.cache.path+(e?"":this.getType())}getArrayPath(e=!1){return this.getPath(e).split("/").filter((e=>!!e))}getPositionedPath(e=!1){return e?this.getPersistentPositionedPath():this.getNonPersistentPositionedPath()}getPersistentPositionedPath(){if(null===this.cache.positionedPath.persistent){let e=this.getModelIndexByType(!0);-1===e&&(e=0),this.cache.positionedPath.persistent=`${(this.parent?`${this.parent.getPersistentPositionedPath()}/`:this.path)+this.getType()}[${e}]`}return this.cache.positionedPath.persistent}getNonPersistentPositionedPath(){if(null===this.cache.positionedPath.nonPersistent){let e=this.getModelIndexByType(!1);-1===e&&(e=0),this.cache.positionedPath.nonPersistent=`${(this.parent?`${this.parent.getNonPersistentPositionedPath()}/`:this.path)+this.getType()}[${e}]`}return this.cache.positionedPath.nonPersistent}resetPath(){this.cache.path=null,this.cache.positionedPath={persistent:null,nonPersistent:null};for(const e of this.children)e.resetPath()}isStage(){return this.getRootParent().getType().startsWith("page_")}getModelIndex(e=!1){if(!this.parent)return-1;return(e?this.parent.getPersistentChildren():this.parent.children).indexOf(this)}getModelIndexByType(e=!1){if(!this.parent)return-1;const t=this.getType();let r=-1;for(const i of e?this.parent.getPersistentChildren():this.parent.getChildren())if(i.getType()===t&&(r++,i===this))return r;return r}getType(){return this.data.type}getWidth(e){return e?this.data.width.vp[e]||null:this.data.width.value||100}getViewportWidths(){return this.getRaw("width.vp")||{}}setSelector(e){this.data.selector=e}getSelector(){return this.data.selector}getData(e,t){return e?s.get(e,this.data.contentdata,t):this.data.contentdata}getDataObjectForKey(e,t=!1){if(!t&&this.hasSourceKey(e)){const t=this.source.model.getDataObjectForKey(e);return t.sourceModel=this.source.model,t}const r=e.split(".")[0];return"fields"===r?{base:r,data:this.data.contentdata,fallback:this.fallbackData?this.fallbackData.contentdata:void 0}:"filtered"===r||"external"===r||"childCount"===r?{base:r,data:this.cache,fallback:void 0}:"metadata"===r||"width"===r||"type"===r||"guid"===r?{base:r,data:this.data,fallback:this.fallbackData?this.fallbackData:void 0}:"state"===r?{base:r,data:this,fallback:void 0}:{base:"",data:this.data.contentdata,fallback:void 0}}getRaw(e,t){return e?s.get(e,this.data,t):this.data}setRaw(e,t,r){const i=this.buildQuery(e);if(!i.isVpObj)return void Sys.logger.warn(`LabModel: Cannot set raw value for key "${e}". Not supported.`);const n={...r};delete n.viewport;const o=this.getRaw(e);if(!o&&!t)return;const a=Object.keys(t&&t.vp||{}),l=Object.keys(o&&o.vp||{});for(const r of l)a.includes(r)&&t||this.set(e,void 0,{...n,viewport:r});for(const r of a)this.set(e,t.vp[r],{...n,viewport:r});this.set(e,t?t.value||null:void 0,{...n,predefinedQuery:i}),t||s.delete(e,this.data)}validateVpModelData(e){return!!e&&("object"==typeof e&&(void 0!==e.value||void 0!==e.vp))}buildQuery(e,t){const r=e.split("."),i={min:"width"===r[0]||"external"===r[0]||"childCount"===r[0]?1:2,max:"fields"===r[0]||"filtered"===r[0]?2:1},s="metadata"===r[0]||"fields"===r[0]||"width"===r[0]||"external"===r[0]||"childCount"===r[0],n="external"===r[0],o={path:r.slice(0,i.max).join("."),allowSource:!["childCount","filtered","metadata"].includes(r[0]),attribute:r.length>i.max?r[i.max]:null,key:r.slice(0,i.max+1).join("."),fullPath:e,raw:e,type:s?r[0]:null,isVpObj:s,isValidated:!(s&&!n)||r.length<=i.max+1&&r.length>=i.min};return n&&(o.attribute=r.slice(i.min).join("."),o.key=e),o.isVpObj&&(n?o.fullPath=t?`${r.slice(0,i.max).join(".")}.vp.${t}${o.attribute?`.${o.attribute}`:""}`:`${r.slice(0,i.max).join(".")}.value${o.attribute?`.${o.attribute}`:""}`:"fields"===o.type&&o.path.endsWith("_json")?(o.fullPath=`${o.path}.value${o.attribute?".":""}${r.slice(2).join(".")}`,o.isValidated=!0):(o.fullPath=o.attribute?`${o.path}.${"fields"===o.type?"attributes.":""}${o.attribute}`:o.path,o.fullPath+=t?`.vp.${t}`:".value")),o}get(e,t,r,i){lab_api.v1.app.dbg.logger.add(this.constructor.name,"get");const n=this.getCacheKey(e,t,r),o=r?void 0:null;if(this.cache.getter.has(n))return this.getCacheValue(n);const a=i||this.buildQuery(e,t);if(!a.isValidated)return Sys.logger.warn(`LabModel: Cannot get unvalid key: "${e}".`),this.cache.getter.set(n,o),o;const l=this.getDataObjectForKey(e,!a.allowSource);let d=s.get(a.fullPath,l.data,!0);return void 0===d&&l.fallback&&(d=s.get(a.fullPath,l.fallback,!0)),void 0===d?(this.cache.getter.set(n,o),o):(this.cache.getter.set(n,d),this.getCacheValue(n))}getCacheValue(e){const t=this.cache.getter.get(e);return t&&"object"==typeof t?Array.isArray(t)?[...t]:{...t}:t}getCacheKey(e,t="lab_main",r=!1){return`${e}-${r?1:0}-${t||"lab_main"}`}getAttributeObject(e){const t=this.buildQuery(e);if(!t.isVpObj)return null;const r=this.getDataObjectForKey(e,!0),i=s.get(t.path,r.data,!0);if(!i)return null;const n="fields"===t.type?i.attributes:i;return t.attribute&&!n[t.attribute]?null:t.attribute?{[t.attribute]:n[t.attribute]}:n}set(e,t,{viewport:r=null,notify:i=!0,checkDerived:n=!0,registerModified:o=!0,save:a=!0,predefinedQuery:l=null,undoable:d=!0}={}){if(lab_api.v1.app.dbg.logger.add(this.constructor.name,"set"),!e)return!1;let h=t;const g=l||this.buildQuery(e,r);if(!g.isValidated)return Sys.logger.warn(`LabModel: Cannot set value for key. Key not valid: ${e}.`),!1;const c=this.getDataObjectForKey(e,!g.allowSource);if(!c.data)return Sys.logger.warn(`LabModel: Trying to set data on a non-existing object. Skipping. Key: "${e}". Model-path: "${this.getPath()}".`),!1;const p=s.get(g.fullPath,c.data,!0);if(p===h)return!1;if(p&&void 0===h&&"fields"===g.type&&(h=null),g.isVpObj&&void 0===p&&void 0===s.get(g.path,c.data,!0)&&s.set(g.path,R.getEmptyDataObject(),c.data),i){if(!this.dataWillSet(g.key,h))return Sys.logger.debug(`Pre-set listener has cancelled setting data for path ${e} at model ${this.getPath()}.`),!1;d&&lab_api.v1.history&&lab_api.v1.history.getManager().add(lab_api.v1.history.getManager(),"modelSetter",[this.getGuid(),e,p,{viewport:r,notify:i,registerModified:o,save:!1,predefinedQuery:g,undoable:!1}])}return s.set(g.fullPath,h,c.data),this.keyModified(g.key,r),o&&(this.registerModified(e),c.sourceModel&&c.sourceModel.registerModified(e)),i&&this.dataIsSet(g.key,h,e,a,n),!0}keyModified(e,t){this.eventPipe.keyModified&&this.eventPipe.keyModified(this,e,t)}setFiltered(e,t){return this.set(`filtered.${e}`,t,{notify:!1,save:!1,registerModified:!1})}getSerializedCache(){return this.cache.serialized}setSerializedCache(e){this.cache.serialized=e}dataWillSet(e,t,r){return!0}dataIsSet(e,t,r){}registerModified(e){}}const j={internalToBackend(e,t=!0){const r={...e};r.type=e.type||null,r.id=e.id||null,r.tmpId=e.tmpId||null,r.instance_of=e.instance_of||null,r.parent=e.parent||null,e.status&&(r.status=e.status),r.site_id=e.site_id||null;const i={viewports_json:{}};for(const e of Object.keys(r.fields||{})){let t=r.fields[e];"object"==typeof t&&null!==t||(t={value:t}),this.internalFieldToBackend(e,t,i)}return r.fields=i,r},backendToInternal(e,t=[],r=!0){const i=this.backendToInternalStructure(e.structure,t);return e.contentdata&&(i.contentdata=this.backendToInternalNode(e.contentdata)),i},viewToInternal(e,t,r=lab_api.v1.viewport.getEditable()){let i=!0,n=e;Array.isArray(e)||(i=!1,n=[e]);const o=[],a=["contentdata","metadata","children","width"];for(const e of n){const i=t?s.merge(t,e):e,n={width:{value:null,vp:{}}};i.width&&("object"==typeof i.width?n.width.vp=i.width:(n.width.value=i.width,i.metadata&&"object"==typeof i.metadata.width&&(n.width.vp=i.metadata.width)));for(const e in i)a.includes(e)||(n[e]=i[e]);i.children&&(n.children=this.viewToInternal(i.children,t)),i.contentdata&&(n.contentdata=this.backendToInternalNode(i.contentdata)),i.metadata&&(n.metadata=this.backendToInternalStructureMeta(i.metadata,r)),o.push(n)}return i?o:o[0]},backendToView(e,t=!1){const r=e.fields?{fields:e.fields}:null;r&&(r.type=e.type||null,r.tags=e.tags||void 0,r.instance_of=e.instance_of||null,r.apiResult=e.apiResult,t||(r.id=e.id||void 0));const i=e.width&&"object"==typeof e.width?e.width.value:e.width||null;return{type:e.type||null,metadata:e.metadata||{},width:i,contentdata:r,children:(e.children||[]).map((e=>this.backendToView(e)))}},apiToData(e,t,r){const i={},s={...t.field||{}},{viewports_json:n}=s;delete s["@attributes"],delete s.viewports_json;for(const e of Object.keys(s))t.field[e]&&("object"==typeof s[e]&&0===Object.keys(s[e]).length?i[e]="":i[e]=s[e]);if(n)try{i.viewports_json=JSON.parse(n)}catch(e){Sys.logger.error(`[serializer] Failed to parse viewports_json: ${e.toString()}`)}return{type:e,id:r&&r.removeId?void 0:t.attribute.id,instance_of:t.attribute?t.attribute.instanceof_id:null,fields:i}},apiToInternal(e,t,r){const i=this.backendToInternalNode(j.apiToData(e,t));return r&&r.removeId&&delete i.id,i},backendToInternalNode(e){const t={...e},r={};if(t.fields&&t.fields.viewports_json)for(const e of Object.keys(t.fields.viewports_json))for(const r of Object.keys(t.fields.viewports_json[e].fields||{}))void 0===t.fields[r]&&(t.fields[r]=null);if(t.fields)for(const e of Object.keys(t.fields||{}))if(e.endsWith("_style_json")){const r=e.replace("_style_json","");t.fields[r]||(t.fields[r]=null)}for(const e of Object.keys(t.fields||{}))if(!e.endsWith("_style_json")&&"viewports_json"!==e){r[e]={value:t.fields[e],vp:this.getViewportKey(e,t.fields),attributes:{}};for(const i in t.fields[`${e}_style_json`]||{})void 0!==t.fields[`${e}_style_json`][i]&&(r[e].attributes[i]={value:t.fields[`${e}_style_json`][i],vp:{}});for(const i in t.fields.viewports_json||{})if(t.fields.viewports_json[i].fields&&void 0!==t.fields.viewports_json[i].fields[`${e}_style_json`])for(const s in t.fields.viewports_json[i].fields[`${e}_style_json`])void 0!==t.fields.viewports_json[i].fields[`${e}_style_json`]&&(r[e].attributes[s]||(r[e].attributes[s]={value:null,vp:{}}),r[e].attributes[s].vp[i]=t.fields.viewports_json[i].fields[`${e}_style_json`][s])}return t.fields=r,t},backendToInternalStructure(e,t){const r=e.metadata?this.backendToInternalStructureMeta(e.metadata,t):{},i={guid:e.id||$.create(),selector:e.selector||null,metadata:r,type:e.type||null,width:{value:e.width?P.floatPrecision(e.width):100,vp:r.width?r.width.vp:{}},children:[]};return delete i.metadata.width,i},backendToInternalStructureMeta(e,t){const r={};for(const i of Object.keys(e))if(r[i]={value:null,vp:{}},"object"!=typeof e[i]||Array.isArray(e[i]))r[i].value=e[i];else for(const s of Object.keys(e[i]||{}))t.includes(s)?r[i].vp[s]=e[i][s]:(r[i].value||(r[i].value={}),r[i].value[s]=e[i][s]);return r},internalToBackendStructureMeta(e){const t={};for(const r of Object.keys(e)){const i=e[r];let s=!1;for(const e of Object.keys(i.vp||{}))s=!0,t[r]||(t[r]={}),t[r][e]=i.vp[e];s||void 0===i.value||(t[r]=i.value)}return t},getViewportKey(e,t){const r={};if(!t.viewports_json)return r;for(const i in t.viewports_json)t.viewports_json[i].fields&&void 0!==t.viewports_json[i].fields[e]&&(r[i]=t.viewports_json[i].fields[e]);return r},internalFieldToBackend(e,t,r){if(!t)return;const i=r;i[e]=t.value;for(const r of Object.keys(t.vp||{}))i.viewports_json||(i.viewports_json={}),i.viewports_json[r]||(i.viewports_json[r]={fields:{}}),i.viewports_json[r].fields[e]=t.vp[r];if(t.attributes){const r=`${e}_style_json`;for(const e of Object.keys(t.attributes)){void 0!==t.attributes[e].value&&(i[r]||(i[r]={}),i[r][e]=t.attributes[e].value);for(const s of Object.keys(t.attributes[e].vp||{}))i.viewports_json||(i.viewports_json={}),i.viewports_json[s]||(i.viewports_json[s]={fields:{}}),i.viewports_json[s].fields[r]||(i.viewports_json[s].fields[r]={}),i.viewports_json[s].fields[r][e]=t.attributes[e].vp[s]}}},filterModifiedContent(e,t){const r={fields:{}},i=e.getModifiedPaths(),n=e.data.contentdata.fields||{};for(const e of i)if(e.startsWith("fields.")){const t=e.replace("fields.",""),i=n[t];this.internalFieldToBackend(t,i,r.fields)}else e.startsWith("state.")||s.set(e,s.get(e,t),r);return r}};class O extends h{constructor(e,t,r,i,s=!1){super({entries:r,behaviours:i,debug:s}),this.configReader=e,this.resourceManager=t,this.models=[],this.cache={id:new Map,guid:new Map},this.eventPipe={keyModified:this.keyModified.bind(this),childAdded:this.childAdded.bind(this)},this.cacheHandler=null}static validateViewInput(e={},t=[],{useExisting:r=!1,intermediateUseExisting:i=!0}={}){for(const r of t)if(!e[r])return null;if(!e.data)return null;if(!e.data.type)return null;const s={...e};return s.options={...s.options||{}},s.options.front=!1!==s.options.front,s.options.editor=!1!==s.options.editor,s.options.frontpage=!0===s.options.frontpage,s.options.articlepage=!0===s.options.articlepage,s.options.template=s.options.template||null,s.options.useExisting=void 0===s.options.useExisting?r:s.options.useExisting,s.options.intermediate=s.options.intermediate||{},s.options.intermediate.useExisting=void 0===s.options.intermediate.useExisting?i:s.options.intermediate.useExisting,s.options.persistentTarget=!!s.options.persistentTarget,s.options.append&&(s.options.append=n.object(s.options.append,{match:"",index:0})),s.options.prepend&&(s.options.prepend=n.object(s.options.prepend,{match:"",index:0})),s}setCacheHandler(e){this.cacheHandler=e}getModelsFromCache(){return Array.from(this.cache.guid.values())}getChildModels(e){const t=[],r=e=>{for(const t of e.children)r(t);t.push(e)};return r(e),t}getModels(){return this.models}getModelById(e){return this.cache.id.get(e)||null}getModelByGuid(e){return this.cache.guid.get(e)||null}getModelBySelector(e){for(const t of this.getModelsFromCache())if(t.getSelector()===e)return t;return null}getModelTypes(e){return e?[...new Set(this.getChildModels(e).map((e=>e.getType())))]:[...new Set(this.getModelsFromCache().map((e=>e.getType())))]}recursiveGetModelByAttribute(e,t,r){}getRootModel(){return this.models[0]}getParentNodeId(e){if(e.parent)return e.parent.hasNodeData()?e.parent.getId():this.getParentNodeId(e.parent);const t=this.getRootModel();return t===e?null:t.getId()}getModelByType(e,t=this.getModelsAsArray()){for(const r of t)if(r.getType()===e)return r;return null}getChildOfType(e,t,r=!1){const i=Array.isArray(t)?t:[t];for(const t of e.children)if(i.includes(t.getType()))return t;if(!r)return null;for(const r of e.children){const e=this.getChildOfType(r,t,!0);if(e)return e}return null}getChildrenOfType(e,t,r=!1,i=!1){const s=[],n=Array.isArray(t)?t:[t];for(const t of e.children)!n.includes(t.getType())||t.isNonPersistent()&&i||s.push(t);if(!r)return s;for(const r of e.children){const e=this.getChildrenOfType(r,t,!0,i);e&&s.push(...e)}return s}getModelsByKeyAndValue(e,t,r=this.getModelsAsArray()){return r.filter((r=>r.get(e)==t))}getModelsByPath(e,t=!0,r=!1,i=null){let s=[];const n=y.trim(e,"/").split("/");let o=n.shift();const a=y.parsePath(o).shift(),l=null!==a.index;l&&(o=a.base);let d=i;i||(d="*"===o?this.models:this.getModelsByType(o,this.models));const h=[];for(let e=0;e<d.length;e++)"*"!==o&&d[e].getType()!==o||d[e].isNonPersistent()&&!r||h.push(d[e]);if(l?h[a.index]?s.push(h[a.index]):!t&&h.length&&(a.index>=h.length?s.push(h[h.length-1]):s.push(h[0])):s=h,!s.length)return[];if(n.length){let e=[];for(let i=0;i<s.length;i++)s[i].children.length&&(e=e.concat(this.getModelsByPath(n.join("/"),t,r,s[i].children)));return e}return s}getModelByPath(e,t=!0,r=!1,i=null){const s=this.getModelsByPath(e,t,r,i);return s.length?s[0]:null}getModelsByQuery(e="",t=this.getModelsAsArray()){const r=e.trim().toLowerCase();return t.filter((e=>e.getType().toLowerCase().indexOf(r)>-1))}getModelsByType(e,t=this.models,r=!0){const i=[];return t.forEach((t=>{t.getType()===e&&i.push(t),r&&i.push(...this.getModelsByType(e,t.children,r))})),i}getNextContentModel(e){let t=this.getRightSibling(e);if(t){const e=this.getFirstContentModel(t);if(e)return e}return e.getParent()&&(t=this.getNextContentModel(e.getParent()),t)?t:null}getParentOfType(e,t,r=!0){const i=e.getParent();return i?i.getType()===t?i:r?this.getParentOfType(i,t,!0):null:null}getLeftSibling(e){if(!e.getParent())return null;const t=e.getModelIndex(!0);if(0===t)return null;return e.getParent().getPersistentChildren()[t-1]||null}getRightSibling(e){if(!e.getParent())return null;const t=e.getModelIndex(!0),r=e.getParent().getPersistentChildren();return r[t+1]?r[t+1]:null}hasChildOfType(e,t,r=!1){return!!this.getChildOfType(e,t,r)}hasChildOfTypes(e,t,r=!1){for(const i of t)if(this.getChildOfType(e,i,r))return!0;return!1}hasChild(e,t){if(!e.children.length)return!1;for(const r of e.children){if(this.is(r,t))return!0;if(this.hasChild(r,t))return!0}return!1}hasParentOfType(e,t,r=!1){return!!this.getParentOfType(e,t,r)}hasParentOfTypes(e,t,r=!1){if(!e||!Array.isArray(t))return!1;for(const i of t)if(this.getParentOfType(e,i,r))return!0;return!1}hasParent(e,t){return!!e.parent&&(!!this.is(e.parent,t)||this.hasParent(e.parent,t))}getModelsAsArray(e=null){let t=[];for(const r of e||this.models)t=t.concat(this.getChildModels(r));return t}getIndex(e,t=!1){return e?e.getModelIndex(t):null}getPath(e,t=!1){return e?e.getPath(t):null}getArrayPath(e,t=!1){return e?e.getArrayPath(t):[]}resetCache(){this.cache.id.clear(),this.cache.guid.clear()}addToCache(e,t=!0){if(e.isPseudo())return;t&&e.children.forEach((e=>this.addToCache(e))),this.cache.guid.set(e.getGuid(),e);const r=e.getId();r&&this.cache.id.set(r,e)}setData(e=[],t=!0){this.resetCache(),this.models=this.newModels(e,!1)}newModels(e=[],t=!0){const r=[];for(const t of e){const e=this.newModel(t);e&&r.push(e)}return r}newModelInstance(e){return new R(e,this.eventPipe)}modelCreated(e){this.addToCache(e)}modelsAdded(e){}newModel(e,t=!0){const r=this.modelData(e);if(!r)return Sys.logger.warn("ModelController: Data do not validate. Cannot create new instance of LabModel."),null;const i=this.newModelInstance(r);if(e.children)for(const r of e.children){const e=this.newModel(r,t);e&&i.addChild(e,t)}return this.modelCreated(i),i}modelData(e){if(!e.type)return Sys.logger.warn('ModelController: Required attribute "type" is missing. Cannot create data for new LabModel.'),null;const t=e;let r="";t.path&&(r=`${y.trim(t.path,["/"])}/`);const i=this.configReader.get(`data.elements.${t.type}.fallbackData`);return{uncreated:!1,type:t.type,path:r,width:"width"in t?t.width:null,metadata:"metadata"in t?{...t.metadata}:{},state:"state"in t?{...t.state}:{},contentdata:"contentdata"in t&&t.contentdata?{...t.contentdata}:null,filtered:"filtered"in t&&t.filtered?{...t.filtered}:null,selector:"selector"in t?t.selector:null,external:"external"in t?t.external:null,guid:"guid"in t?t.guid:null,fallback:i?j.viewToInternal(i):null}}insertAtPath(e){const t=O.validateViewInput(e,["path"],{useExisting:!1});if(!t)return Sys.logger.warn('ModelController: Cannot insert model at path. Missing required input "path", "data", or "data.type".'),null;Sys.logger.debug(`ModelController: Will insert model of type ${t.data.type} at path ${t.path}.`);const r=this.ensurePath(t.path,t.options.persistentTarget,t.options.intermediate.useExisting);if(!r)return Sys.logger.warn(`ModelController: No model inserted at path ${t.path}. Parent not found and could not be created.`),null;const i=this.insertAtParent(r,t.data,t.options);return Sys.logger.debug(`ModelController: Did insert model at path ${t.path}. Type: ${i.getType()}, path: ${i.getPositionedPath()}.`),i}insertBySelector(e){const t=O.validateViewInput(e,["selector"],{useExisting:!1});if(!t)return Sys.logger.warn('ModelController: Cannot insert model by selector. Missing required input "selector", "data", or "data.type".'),null;Sys.logger.debug(`ModelController: Will insert model of type ${t.data.type} at selector ${t.selector}.`);const r=this.getModelBySelector(t.selector);if(!r)return Sys.logger.warn(`ModelController: No model inserted at selector ${t.selector}. Model not found.`),null;const i=this.insertAtParent(r,t.data,t.options);return Sys.logger.debug(`ModelController: Did insert model at selector ${t.selector}. Type: ${i.getType()}, path: ${i.getPositionedPath()}.`),i}insertAtParent(e,t,r={}){const i={};t.state&&t.state.isNonPersistent&&(i.state={isNonPersistent:!0});const s=this.newModel(j.viewToInternal(t,i));if(e)if("number"==typeof r.index){let{index:t}=r;if(r.persistentTarget){const i=(r.match?this.getModelsByType(r.match,e.children||[],!1):e.children||[]).filter((e=>!e.isNonPersistent())),s=r.index<i.length&&r.index>=0?i[r.index]:i[i.length-1];t=this.getIndex(s)}e.addChildAtIndex(s,t)}else e.addChild(s,!0,r.prepend);else r.prepend?this.models.unshift(s):this.models.push(s);return this.modelsAdded([s],r.silent),s}addElement(e){const t={};e.data.state&&e.data.state.isNonPersistent&&(t.state={isNonPersistent:!0});const r=this.ensurePath(e.path,e.options.persistentTarget,e.options.intermediate.useExisting,t);return r&&e.options.useExisting&&(e.data.selector?this.getModelBySelector(e.data.selector):this.getChildOfType(r,e.data.type))?null:this.insertAtParent(r,e.data,e.options)}allowInsetion(e){const t={frontpage:()=>"page_front"===lab_api.v1.model.query.getRootModel().getType(),articlepage:()=>"page_article"===lab_api.v1.model.query.getRootModel().getType(),noticepage:()=>"page_notice"===lab_api.v1.model.query.getRootModel().getType(),template:e=>lab_api.v1.model.query.getRootModel().get("fields.page_template_alias")===e,front:lab_api.v1.app.mode.isFront,editor:lab_api.v1.app.mode.isEditor},r=r=>{for(const i of r)if(e.options[i]&&t[i](e.options[i]))return!0;return!1};return!!r(["front","editor"])&&(!(e.options.template&&!r(["template"]))&&r(["frontpage","articlepage","noticepage"]))}ensurePath(e,t,r=!0,i=null){const s=r?this.getModelsByPath(e,!0,!t).shift():null;if(s)return s;let n="",o=null;const a=y.parsePath(e);for(;a.length;){const e=a.shift();if(!e.base)return o;const s=e.index||0;let l=0,d=!1;const h=`${n}${e.base}[${s}]`;for(;l<=s;){if(!r&&!a.length&&l===s||!this.getModelsByPath(h,!0,!t).length){const t=i?{...i}:{};t.type=e.base;const r=this.newModel(t,!1);o?null!==e.index?o.addChildAtIndex(r,e.index):o.addChild(r):this.models.push(r),this.modelsAdded([r]),l===s&&(o=r,d=!0),Sys.logger.debug(`ModelController: Inserted intermediate model type ${e.base} at path ${r.getPositionedPath()}.`)}l++}n+=`${e.path}/`,o=d?o:this.getModelsByPath(n,!0,!t).shift()}return o}keyModified(e,t,r,i=!0){if(i){if(e.hasKeyInTarget(t))for(const i of e.getSourceTargets())this.keyModified(i,t,r,!1);e.hasSourceKey(t)&&this.keyModified(e.getSourceModel(),t,r)}this.cacheHandler.resetKey(e,t,r),this.triggerRedrawByKey(e,t,r)}childAdded(){}triggerRedrawByKey(e,t,r){}noRender(e){e&&e.setNoRenderState(!0)}notifyOnAcceptContent(e=this.getRootModel(),t=!0){this.emitBehaviour("onAcceptContent",e),t&&e.children.forEach((e=>{this.notifyOnAcceptContent(e,t)}))}}class V{constructor(e){this.totalGridSpans=e||12,this.backendNodes=new Map,this.nodeChildren={},this.activeNodes=[],this.offstageTypes=["pasteboard"],this.requireContentdata=["article"]}backendToInternal(e={},t={}){if(!e.data||!e.structure)return Sys.logger.debug("[DataTransformer] Unsupported input data. Require { data: {...}, structure: []"),[];const r=e.data,i=e.structure;this.registerBackendNodes(r);const s=lab_api.v1.viewport.getEditable(),n=j.backendToInternal({contentdata:this.backendNodes.get(r.id),structure:{type:`page_${r.type}`}},s,!1),o=[n];for(const e of i)if(t.skipOffstage&&this.offstageTypes.includes(e.type))Sys.logger.debug(`[DataTransformer] Skipping offstage-element "${e.type}".`);else{const r=this.createModelData(e,t.blacklist||[],t.blacklistOptions||{},s);r&&(this.offstageTypes.includes(e.type)?o.push(r):n.children.push(r))}return this.activeNodes.push(r.id),o}modelsToFragmentApi(e,{viewport:t=null,stringify:r=!1,recursive:i=!0}={}){const s=e.map((e=>this.modelToFragmentApi(e,i,t)));return r?s.map((e=>JSON.stringify(e))):s}modelToFragmentApi(e,t,r){const i={nodedata:this.modelToBackend(e,t),isNonPersistent:e.isNonPersistent(),type:e.getType(),width:e.getWidth(r),id:e.getGuid(),node_id:e.getId(),guid:e.getGuid()};if(t){i.children=[];for(const t of e.children)i.children.push(this.modelToFragmentApi(t))}return i}modelToBackend(e,t=!1){let r;const i=e.getSerializedCache();if(i?(lab_api.v1.app.dbg.logger.add(e.constructor.name,"modelToBackend[cache]"),r=i):(lab_api.v1.app.dbg.logger.add(e.constructor.name,"modelToBackend"),r=e.data.contentdata?{...j.internalToBackend(e.data.contentdata)}:{},e.data.contentdata&&(r.parent=lab_api.v1.model.query.getParentNodeId(e)),r.guid=e.data.guid,r.metadata=j.internalToBackendStructureMeta(e.data.metadata),r.metadata.width=e.getViewportWidths(),r.width=e.getWidth(),e.data.selector&&(r.selector=e.data.selector),r.type=e.data.type.replace("page_",""),e.data.tmpId&&(r.tmpId=e.data.tmpId),e.setSerializedCache({...r})),t&&e.children.length){r.children=[];for(const t of e.children)t.isNonPersistent()||r.children.push(this.modelToBackend(t,!0))}return r}apiToInternal({type:e,data:t={},meta:r={},options:i={removeId:!1}}={}){const s=j.apiToInternal(e,t,i),{metadata:n,width:o}=j.viewToInternal({metadata:r,width:r.width});return{type:s.type,contentdata:s,width:o,metadata:n}}apiToView({type:e,data:t={},meta:r={},options:i={removeId:!1}}={}){const s=j.apiToData(e,t,i),n=j.internalToBackend(s);return{type:n.type,contentdata:n,width:r.width,metadata:r}}modelToInternal(e,t=!0,r=!1){const i=JSON.parse(JSON.stringify(e.data));if(r&&(i.contentdata&&delete i.contentdata.id,delete i.guid),i.children=[],!t)return i;for(const t of e.children)i.children.push(this.modelToInternal(t,!0,r));return i}modelToView(e,t=!0,r=!1){const i=this.modelToBackend(e,t);return j.backendToView(i,r)}modelsToView(e,t=!0){return e.map((e=>this.modelToView(e,t)))}modifiedToBackend(e,t,r=!0,i=!1){const s=[];for(const e of t)e.getType().startsWith("page_")?s.push(...e.getPersistentChildren()):s.push(e);const n=this.removeFrontCrops(s);return{node:e.map((e=>this.modelNodeToBackend(e,r,i))),structure:n.map((e=>this.modelStructureToBackend(e)))}}removeFrontCrops(e){return e.filter((e=>!e.get("fields.metadata_key")))}modelNodeToBackend(e,t=!1,r=!1){const i=this.modelToBackend(e,r);if(t&&!e.isDirty()){const t=j.filterModifiedContent(e,i),r=this.modelNodeBaseToBackend(e);return s.merge(r,t)}return delete i.metadata,delete i.width,i}modelNodeBaseToBackend(e){if(Array.isArray(e))return e.map((e=>this.modelNodeBaseToBackend(e)));const t=this.modelToBackend(e),r={type:t.type||null,id:t.id||null,guid:t.guid||null,tmpId:t.tmpId||null,instance_of:t.instance_of||null,parent:t.parent||null,status:t.status||null,site_id:t.site_id||null};return t.primaryTags&&(r.primaryTags=t.primaryTags),t.tags&&(r.tags=t.tags),r}modelStructureToBackend(e,t=!1){const r=this.modelToBackend(e),i={type:r.type,width:r.width,metadata:r.metadata,id:r.guid,selector:r.selector,children:[]};return r.id&&(i.node_id=r.id),e.isNonPersistent()&&(i.isNonPersistent=!0),e.children.forEach((e=>{!t&&e.isNonPersistent()||i.children.push(this.modelStructureToBackend(e,t))})),i}registerBackendNodes(e){if(e.id&&this.backendNodes.set(e.id,this.prepareBackendNode(e)),e.children){this.nodeChildren[e.id]=[];for(const t of e.children)this.registerBackendNodes(t),t.id&&this.nodeChildren[e.id].push(t.id)}}prepareBackendNode(e){const t={};for(const r in e)"children"!==r&&(t[r]=e[r]);return t}createModelData(e,t,r,i,s={}){if(t.includes(e.type)){if(r[e.type]&&r[e.type].includeChildren&&e.children&&s.children){Sys.logger.warn(`[DataTransformer] Found blacklisted element "${e.type}". Skipping. Will include and move children to parent element.`);for(const n of e.children){const e=this.createModelData(n,t,r,i);e&&s.children.push(e)}}else Sys.logger.warn(`[DataTransformer] Found blacklisted element "${e.type}". Skipping.`);return null}const n=j.backendToInternal({contentdata:e.node_id?this.backendNodes.get(e.node_id):null,structure:e},i,!1);if(this.requireContentdata.includes(n.type)&&!n.contentdata)return Sys.logger.debug(`[DataTransformer] Found "${n.type}" without node-data. Skipping.`),null;n.contentdata&&this.activeNodes.push(n.contentdata.id);for(const t in n.width.vp)n.width.vp[t]?n.width.vp[t]&&n.width.vp[t]<=this.totalGridSpans&&Number.isInteger(parseFloat(n.width.vp[t],10))&&(Sys.logger.warn(`[DataTransformer] Will modify Lab3-width for element "${e.type}", viewport "${t}". Was: "${n.width.vp[t]}", New value: "${P.gridToPercent(n.width.vp[t],this.totalGridSpans)}"`),n.width.vp[t]=P.gridToPercent(n.width.vp[t],this.totalGridSpans)):delete n.width.vp[t];if(!e.children){if(!(n.contentdata&&n.contentdata.id&&this.nodeChildren[n.contentdata.id]))return n;e.children=[];for(const t of this.nodeChildren[n.contentdata.id])if(!this.activeNodes.includes(t)){const r=this.backendNodes.get(t);r&&(e.children.push({type:r.type,node_id:t}),Sys.logger.warn(`[DataTransformer] Adding structure-data for deprecated node-child. Type: ${r.type}, id: ${t}`))}}for(const s of e.children){const e=this.createModelData(s,t,r,i,n);e&&n.children.push(e)}return n}}class F{constructor(e,t,r){this.renderer=t,this.log=r,this.styles={definitions:new Map,collections:new Map},this.setupStyles(F.resolveConfig(e||{})),this.styleByKey={},this.defaultItemTemplate="{{ #items }}{{ prefix }}{{ value }}{{ postfix }} {{ /items }}"}static resolveConfig(e={}){const t={definitions:{},collections:[]};for(const r of Object.keys(e.definitions||{})){const i=F.resolveDefinition(e.definitions[r]);i&&(t.definitions[r]=i)}const r=Array.isArray(e.collections)?e.collections:Object.values(e.collections||{});for(const e of r){const r=F.resolveCollection(e);r&&t.collections.push(r)}return t}static resolveDefinition(e={}){if(!Array.isArray(e.items)||!e.items.length)return null;const t={requirePath:n.false(e.requirePath),path:n.string(e.path),template:n.stringOrNull(e.template),items:[]};for(const r of e.items){const e=F.resolveItem(r);e&&t.items.push(e)}return t}static resolveItem(e={}){const t=Array.isArray(e.fallback)?e.fallback:[];return"string"==typeof e.fallback&&t.push(e.fallback),{prefix:n.string(e.prefix),postfix:n.string(e.postfix),viewport:n.string(e.viewport),value:n.string(e.value),fallback:t,nullValue:n.stringOrUndefined(e.nullValue)}}static resolveCollection(e){const t=n.string(e.name),r=n.array(e.definitions),i=n.array(e.additions);if(!t||!r.length&&!i.length)return null;const s=[];for(const e of[...r,...i])if("string"==typeof e)s.includes(e)||s.push(e);else{const t=F.resolveDefinition(e);t&&s.push(t)}return{name:t,definitions:s}}setupStyles(e={}){for(const t of Object.keys(e.definitions))this.styles.definitions.set(t,e.definitions[t]);for(const t of e.collections)this.styles.collections.set(t.name,t.definitions);this.log.debug(`StyleManager: Set up and ready. Holds ${this.styles.definitions.size} definitions and ${this.styles.collections.size} collections.`)}getStyleFromDefinition(e,t,r="",i){if(!this.styles.definitions.size)return"";const{name:s,path:n,target:o,targetType:a,index:l}=this.getInputValues(r),d=this.getTargetModel(e,o,a,l);return d?this.getStyleFromDefinitionNamePath(d,s,n,null,i):""}getStyleFromDefinitionNamePath(e,t,r,i,s){const n=this.getDefinition(t);return n?this.parseDefinition(e,t,r,n,i,s):(this.log.warn(`StyleManager: Cannot find style-definition "${t}". Empty string returned.`),"")}getStyle(e,t,r="",i){if(!this.styles.collections.size)return"";const{name:s,path:n,target:o,targetType:a,index:l}=this.getInputValues(r),d=this.getTargetModel(e,o,a,l);if(!d)return this.log.warn(`StyleManager: Cannot find target-model "${o}". Empty string returned. Model: ${e.getPositionedPath()}`),"";const h=this.getCollection(s);if(!h)return this.log.warn(`StyleManager: Cannot find style-collection "${s}". Empty string returned.`),"";const g=[];for(const e of h){const t=this.parseDefinition(d,s,n,e,null,i);t&&g.push(t)}return g.join(" ").trim()}getCollection(e){return this.styles.collections.get(e)}getDefinition(e){return this.styles.definitions.get(e)}getTargetModel(e,t,r,i){if("current"===t)return e;if("parent"===t)return e.getParent();if("root"===t)return lab_api.v1.model.query.getRootModel();if("child"===t){if(null===i)return lab_api.v1.model.query.getChildOfType(e,r);return lab_api.v1.model.query.getModelsByType(r,e.children)[i]||null}return e}getInputValues(e=""){const t=(e||"").split(" ").map((e=>e.trim())).filter((e=>!!e)),r=t.shift();let i=t.shift()||"",s="current",n=null,o=null;if(i.startsWith("parent."))s="parent",i=i.replace("parent.","");else if(i.startsWith("root."))s="root",i=i.replace("root.","");else if(i.startsWith("current."))i=i.replace("current.","");else if(i.startsWith("child.")){const e=i.split(".");s=e.shift();const t=e.shift();i=e.join("."),[o,n]=S.getPropertyTypeAndIndex(t)}return{name:r,path:i||null,target:s,targetType:o,index:n}}getItemsViewports(e){const t={};for(const r of e)if(r.viewport&&(t[r.viewport]=!0),r.fallback)for(const e of r.fallback)t[e]=!0;return Object.keys(t)}parseDefinition(e,t,r,i,s,n){let o=i;if("string"==typeof i&&(o=this.getDefinition(i),!o))return this.log.warn(`StyleManager: Cannot find style-definition "${i}". Empty string returned.`),"";const a=[];if(o.requirePath&&!r)return this.log.warn(`StyleManager: Missing required path for style "${t}".`),"";const l=o.requirePath?r:"";for(const t of o.items){const r=this.getItemValueWithFallback(e,o.path,t,l,o.items,s,n);null!=r&&""!==r&&a.push({...t,value:r})}if(!a.length)return"";return this.renderer(o.template||this.defaultItemTemplate,{items:a}).trim().split(" ").filter(((e,t,r)=>r.indexOf(e)===t)).join(" ")}getItemValueWithFallback(e,t,r,i,s,n,o){const a=i+(i&&t?".":"")+t,l=this.getItemValue(e,r,a,n,o);if(void 0!==l||"current_viewport"===r.viewport)return l;const d={...r};for(d.fallback=[...d.fallback];d.fallback.length;){const t=d.fallback.shift();d.viewport=t;const r=this.getItemValue(e,d,a,n,o);if(r)return r}}getItemValue(e,t,r,i,s){let n,{viewport:o}=t;if("no_viewport"===o?o="":"current_viewport"===o&&(o=s),i)if(o){n=(i.vp||{})[o]}else n=i.value;else n=e.get(r,o,!0);return null!==n&&""!==n&&!1!==n||void 0===t.nullValue?n&&t.value?t.value:n:t.nullValue}}class A{constructor(e){this.headers=e.Headers||{},this.queryString=e.queryString||"",this.params=this.parseQueryString(this.queryString)}parseQueryString(e){const t={},r=e.split("&");for(const e of r){const r=e.split("=");2===r.length&&(t[r[0]]=r[1])}return t}getHeaders(){return this.headers}getHeader(e){return this.headers[e]||null}getQueryString(){return this.queryString}getQueryParam(e){return this.params[e]}hasQueryParam(e){return void 0!==this.getQueryParam(e)}hasQueryValue(e,t){return(this.getQueryParam(e)||"").split(",").includes(t)}}class _{constructor(e,t){this.logger=t,this.siteAlias=e,this.log(`Site-alias: ${this.siteAlias}`),this.featureFlags=[],this.cache={}}prepareFlags(e){const t=[];return Array.isArray(e)&&e.forEach((e=>{if("group"===e.type){const r=e.enabled;e.flags.forEach((e=>{e.enabled=r&&e.enabled,t.push(e)}))}else t.push(e)})),this.cache[this.siteAlias]=t,t}enabled(e,t=""){this.featureFlags=this.cache[this.siteAlias]||this.prepareFlags(lab_api.v1.config.getFeatureFlags().flags||[]);return this.featureFlags.filter((r=>{if(Array.isArray(t)){const i=t.map(String);return r.key===e&&(!r.nodeId||i.indexOf(r.nodeId)>-1)&&!0===r.enabled}return r.key===e&&(!r.nodeId||r.nodeId===t.toString())&&!0===r.enabled})).length>0}get(e,t=""){return this.featureFlags.filter((r=>r.key===e&&r.nodeId===t.toString()))}log(e,t=null){this.logger&&(t?this.logger.debug(`FeatureFlags: ${e}`,[t]):this.logger.debug(`FeatureFlags: ${e}`))}}class I{static getWords(e){return e.replaceAll("."," ").replaceAll("!"," ").split(" ").filter((e=>""!==e))}static getSentences(e){return e.replaceAll("!",".").split(".").filter((e=>""!==e))}static getReadTime(e,t){const r=I.getWords(e).length/(t||250);return r<.5?.5:Math.round(r)}static lix(e){if(!e)return null;const t=I.getWords(e),r=I.getSentences(e),i=t.filter((e=>e.length>6));return t.length/r.length+100*i.length/t.length}}class D{constructor(){this.ns={}}create(e={}){return{app:{dbg:{logger:{add:()=>{}}},logError:(e={})=>{e&&e.toString&&Sys.logger.debug(`CMS-error: ${e.toString()}`)},logViewError:(e={},t)=>{e&&e.toString&&Sys.logger.debug(`View-error: ${e.toString()}`)},mode:{get:e.configProcessor.getAppMode.bind(e.configProcessor),getSimulatedMode:e.configProcessor.getSimulatedMode.bind(e.configProcessor),isEditor:e.configProcessor.isEditMode.bind(e.configProcessor),isFragmentMode:e.configProcessor.isFragmentMode.bind(e.configProcessor),isFront:e.configProcessor.isPresentationMode.bind(e.configProcessor)},off:e.appManager.off.bind(e.appManager),on:e.appManager.on.bind(e.appManager)},config:{debug:e.configReader.debug.bind(e.configReader),get:e.configReader.get.bind(e.configReader),getConfig:e.configReader.getConfig.bind(e.configReader),getContent:e.configReader.getContent.bind(e.configReader),getFeatureFlags:e.configReader.getFeatureFlags.bind(e.configReader),getPathForSite:e.configReader.getPathForSite.bind(e.configReader),getStorePathForSite:e.configReader.getStorePathForSite.bind(e.configReader),getView:e.configReader.getView.bind(e.configReader),reloadResourceBySite:e.configReader.reloadResourceBySite.bind(e.configReader)},grid:{gridToPercent:P.gridToPercent,percentToGrid:P.percentToGrid},image:{getPreferredImageFormat:e.configProcessor.getPreferredImageFormat.bind(e.configProcessor)},locale:{get:e.localisation.get.bind(e.localisation),off:e.localisation.off.bind(e.localisation),on:e.localisation.on.bind(e.localisation)},model:{getArrayPath:e.modelController.getArrayPath,getPageType:e.configProcessor.getPageType.bind(e.configProcessor),getPath:e.modelController.getPath,insert:{atPath:e.modelController.insertAtPath.bind(e.modelController),bySelector:e.modelController.insertBySelector.bind(e.modelController)},noRender:e.modelController.noRender,off:e.modelController.off.bind(e.modelController),on:e.modelController.on.bind(e.modelController),query:{getChildOfType:e.modelController.getChildOfType.bind(e.modelController),getChildrenOfType:e.modelController.getChildrenOfType.bind(e.modelController),getIndex:e.modelController.getIndex.bind(e.modelController),getModelByGuid:e.modelController.getModelByGuid.bind(e.modelController),getModelById:e.modelController.getModelById.bind(e.modelController),getModelByPath:e.modelController.getModelByPath.bind(e.modelController),getModelBySelector:e.modelController.getModelBySelector.bind(e.modelController),getModelByType:e.modelController.getModelByType.bind(e.modelController),getModels:e.modelController.getModels.bind(e.modelController),getModelsAsArray:e.modelController.getModelsAsArray.bind(e.modelController),getModelsByKeyAndValue:e.modelController.getModelsByKeyAndValue.bind(e.modelController),getModelsByPath:e.modelController.getModelsByPath.bind(e.modelController),getModelsByQuery:e.modelController.getModelsByQuery.bind(e.modelController),getModelsByType:e.modelController.getModelsByType.bind(e.modelController),getModelsFromCache:e.modelController.getModelsFromCache.bind(e.modelController),getModelTypes:e.modelController.getModelTypes.bind(e.modelController),getNextContentModel:e.modelController.getNextContentModel.bind(e.modelController),getParentNodeId:e.modelController.getParentNodeId.bind(e.modelController),getParentOfType:e.modelController.getParentOfType.bind(e.modelController),getRootModel:e.modelController.getRootModel.bind(e.modelController),getSiblingLeft:e.modelController.getLeftSibling.bind(e.modelController),getSiblingRight:e.modelController.getRightSibling.bind(e.modelController),hasChild:e.modelController.hasChild.bind(e.modelController),hasChildOfType:e.modelController.hasChildOfType.bind(e.modelController),hasChildOfTypes:e.modelController.hasChildOfTypes.bind(e.modelController),hasParent:e.modelController.hasParent.bind(e.modelController),hasParentOfType:e.modelController.hasParentOfType.bind(e.modelController),hasParentOfTypes:e.modelController.hasParentOfTypes.bind(e.modelController)},root:{getType:()=>e.modelController.getRootModel()?e.modelController.getRootModel().get("type"):""},serialize:{apiToInternal:e.dataTransformer.apiToInternal.bind(e.dataTransformer),apiToView:e.dataTransformer.apiToView.bind(e.dataTransformer),model:e.dataTransformer.modelToBackend.bind(e.dataTransformer),modelToInternal:e.dataTransformer.modelToInternal.bind(e.dataTransformer),modelToView:e.dataTransformer.modelToView.bind(e.dataTransformer)}},ns:{get:(e="")=>s.get(e,this.ns),set:(e,t)=>s.set(e,t,this.ns)},preload:{get:e.preloadHandler.get.bind(e.preloadHandler),getHeader:e.preloadHandler.getHeader.bind(e.preloadHandler)},properties:{get:e.configReader.getCms.bind(e.configReader),update:e.configReader.updateConfigByPath.bind(e.configReader)},templates:{get:e.resourceManager.getTemplateFile.bind(e.resourceManager)},site:{getSite:e.configProcessor.getSite.bind(e.configProcessor),getSiteById:e.configProcessor.getSiteById.bind(e.configProcessor),getSites:e.configProcessor.getSites.bind(e.configProcessor)},style:{getNamedStyle:e.styleManager.getStyleFromDefinitionNamePath.bind(e.styleManager),getStyle:e.styleManager.getStyleFromDefinition.bind(e.styleManager),getStyles:e.styleManager.getStyle.bind(e.styleManager)},util:{defaults:e.utils.defaults,featureFlags:{enabled:e.featureFlags.enabled.bind(e.featureFlags),get:e.featureFlags.get.bind(e.featureFlags)},functionHelper:{getFunction:e.utils.functionHelper.getFunction,isValidFunction:e.utils.functionHelper.isValidFunction},object:s,request:{getHeader:e.requestUtil.getHeader.bind(e.requestUtil),getHeaders:e.requestUtil.getHeaders.bind(e.requestUtil),getQueryParam:e.requestUtil.getQueryParam.bind(e.requestUtil),getQueryString:e.requestUtil.getQueryString.bind(e.requestUtil),hasQueryParam:e.requestUtil.hasQueryParam.bind(e.requestUtil),hasQueryValue:e.requestUtil.hasQueryValue.bind(e.requestUtil),parseQueryString:e.requestUtil.parseQueryString.bind(e.requestUtil)},string:e.utils.stringHelper},view:{getHelper:e.viewManager?e.viewManager.getViewHelper.bind(e.viewManager):()=>{},getPixelDensityFactor:e.configProcessor.getPixelDensityFactor.bind(e.configProcessor),getView:e.viewManager?e.viewManager.getView.bind(e.viewManager):null,off:e.viewManager?e.viewManager.off.bind(e.viewManager):null,on:e.viewManager?e.viewManager.on.bind(e.viewManager):null,render:({template:t,model:r,viewManager:i=e.viewManager}={})=>{const s=i.getView(r),n=i.getDataForView(r,s);return Mustache.render(t,n,e.resourceManager.templates)}},viewHeaders:{get:t=>e.viewHeaders.get?e.viewHeaders.get(t):"",getAll:()=>e.viewHeaders.getAll?e.viewHeaders.getAll():"",set:(t,r)=>{e.viewHeaders.set&&e.viewHeaders.set(t,r)}},viewport:{getActive:()=>[e.configProcessor.getViewport()],getAll:e.configProcessor.getViewports.bind(e.configProcessor),getEditable:e.configProcessor.getEditableViewports.bind(e.configProcessor),getMain:e.configProcessor.getMainViewport.bind(e.configProcessor),getName:e.configProcessor.getViewport.bind(e.configProcessor),getSubViewports:e.configProcessor.getSubViewports.bind(e.configProcessor),getWidth:e.configProcessor.getViewportWidth.bind(e.configProcessor),isMain:e.configProcessor.isMainViewport.bind(e.configProcessor),isSubViewport:e.configProcessor.isSubViewport.bind(e.configProcessor),isTouchDevice:e.configProcessor.isTouchDevice.bind(e.configProcessor)},text:{getWords:I.getWords,getSentences:I.getSentences,getReadTime:I.getReadTime,lix:I.lix}}}}class E{constructor(e=[]){this.viewManagers=e,Sys.logger.debug(`CacheHandler: Ready to support view-manager(s) for viewport(s): ${this.viewManagers.map((e=>e.viewport.name)).join(", ")}`)}setViewManagers(e){this.viewManagers=e}resetKey(e,t,r){this.resetModelCacheForKey(e,t,r),this.resetViewCacheForKey(e,t)}resetModelCacheForKey(e,t,r){e.cache.getter.delete(e.getCacheKey(t,r)),e.cache.getter.delete(e.getCacheKey(t,r,!0)),e.cache.getter.forEach(((i,s)=>{s.startsWith(`${t}.`)&&s.endsWith(`-${r||"lab_main"}`)&&e.cache.getter.delete(s)}))}resetViewCacheForKey(e,t){for(const r of this.viewManagers)r.getView(e).resetCache(t)}}class W{constructor(e,t=null){this.isEnabled=!0,this.Implementation=e,this.instance=null,this.name=t}initialize(){this.instance=new this.Implementation}disable(){this.isEnabled=!1}enable(){this.isEnabled=!0}call(e,...t){if(this.isEnabled){if(!this.instance){if(!this.Implementation)return;this.initialize(),this.instance.name&&(this.name=this.instance.name)}if(e in this.instance)return this.instance[e](...t)||null}}}class B extends W{}class H extends W{initialize(){this.instance=new this.Implementation(lab_api)}}class L{constructor(e){this.data=e}get(e=""){const t=e.split("."),r=this.getObject(t.shift());return r?t.length?s.get(t.join("."),r):r:null}getObject(e){return e?this.data[e]||null:this.data}getHeader(e){if(e){const t=this.getObject(e);return t?t.responseHeaders:null}return null}}class N extends h{constructor({configReader:e,language:t,siteAlias:r,renderFn:i,configPrefix:n}){super(),this.configReader=e,this.language=t||this.configReader.get("contentLanguage")||"en-GB",this.secondaryLanguage=this.configReader.get("contentLanguageFallback")||this.language,this.siteAlias=r||this.configReader.siteAlias,this.fallbackLanguage="en-GB",this.renderFn=i,this.objectHelper=s,this.configPrefix=n||"int_",this.cache=new Map}overrideLanguage(e){e&&(this.secondaryLanguage===this.language&&(this.secondaryLanguage=e),this.language=e)}get(e,{language:t,siteAlias:r,data:i={},fallbackValue:s,noRender:n=!1}={}){const o=(e||"").trim(),a=i||{},l=t||this.language,d=`${o}_${l}_${r}_${JSON.stringify(a||{})}_${n?"1":"0"}`;return this.cache.has(d)||this.cache.set(d,this.getKey(o,l,r,a,n,s)),this.cache.get(d)}getKey(e,t,r,i,s,n){const o=this.readConfigObject(e,r,t);if(o)return this.returnValue(e,o,i,t,r,"config",s);const a=this.readConfig(e,t,r);return a?this.returnValue(e,a,i,t,r,"configObject",s):t!==this.fallbackLanguage&&t!==this.secondaryLanguage&&this.secondaryLanguage!==this.language?this.getKey(e,this.secondaryLanguage,r,i,s,n):t!==this.fallbackLanguage?this.getKey(e,this.fallbackLanguage,r,i,s,n):void 0===n?e:n}returnValue(e,t,r,i,s,n,o){const a={value:t,data:r},l=this.requestEvent("localisation",{key:e,value:t,data:r,language:i,siteAlias:s,type:n});if(l.length){const e=l.pop();"string"==typeof e.value&&(a.value=e.value,a.data=e.data)}return a.value?o?a.value:this.renderFn(a.value,a.data).trim():e}readConfig(e,t,r){const i=this.configReader.getConfig(`${this.configPrefix}${t}.${e}`,{site:r});return"string"==typeof i?i:void 0}readConfigObject(e,t,r){const i=t||this.siteAlias,s=r||this.language,n=this.configReader.getLocal(`lang.${i}.${s}.${e}`);return"string"==typeof n?n:void 0}}class q extends h{constructor({logger:e={},settings:{siteAlias:t="default",pageType:r="front",contentId:s=null,device:n="desktop",runtime:o={Request:!1},transform:d,fragmentMode:h=null,debug:g=!1,simulatedMode:u=""},resources:{config:f={},templates:y={view:{},editor:{}},properties:m={},data:b=null,preload:w={},viewHeaders:v={},views:P=[]},globals:x={},callbacks:M={},entries:C=[],behaviours:T={}}={}){super({entries:C.map((e=>new B(e))),behaviours:Object.keys(T).reduce(((e,t)=>({...e,[t]:T[t].map((e=>new H(e,t)))})),{}),debug:g}),this.settings={debug:g,fragmentMode:h,simulatedMode:u,pageType:r,contentId:s,siteAlias:t,device:n,request:o.Request,transform:void 0===d||!!d},this.resources={properties:m,data:b,templates:y?y.view:{},viewHeaders:v},this.logger=e,this.settings.fragmentMode&&this.logger.debug(`[Core] Running fragmentMode: "${h}"`),this.configReader=new a(a.resolveFullConfig(f,i),this.logger),this.configProcessor=new l(this.configReader,this.settings.device,this.settings.fragmentMode,this.settings.pageType,this.settings.simulatedMode),this.logger.debug("---------------------------------------------------------"),this.logger.debug("[Core] Labrador rendering engine"),this.logger.debug(`Version ${this.configReader.getCms("app.version")} - build ${this.configReader.getCms("buildInfo.version")} - views: ${P.join(", ")}`),this.logger.debug("(c) Labrador CMS AS. Use require a valid licence"),this.logger.debug("---------------------------------------------------------"),this.localisation=new N({configReader:this.configReader,renderFn:Mustache.render}),this.viewManager=null,this.pathHelper=new S,this.resourceManager=new c(this.resources.properties,this.resources.templates,this.configReader,p.resolveConfig,this.behaviours,this.pathHelper,this.settings.debug),this.dataTransformer=new V(this.configReader.get("grid.total_grid_spans")),this.modelController=new O(this.configReader,this.resourceManager,this.entries,this.behaviours),this.styleManager=new F(this.configReader.get("style"),Mustache.render,this.logger),this.preloadHandler=new L(w),this.viewManager=new k({resourceManager:this.resourceManager,configReader:this.configReader,configProcessor:this.configProcessor,logger:this.logger,viewport:this.settings.device,styleManager:this.styleManager,entries:this.entries,behaviours:this.behaviours,settings:this.settings,localisation:this.localisation,preloadHandler:this.preloadHandler}),this.api={v1:this.createApi()},x.lab_api=this.api,M.apiReady&&M.apiReady(this.api.v1),this.apiReady(this.api),this.resources.data&&this.setData(this.resources.data)}getApi(){return this.api}createApi(){this.logger.debug("Core: Creating api using CoreApi.");const e=new D,t={appManager:this,configReader:this.configReader,configProcessor:this.configProcessor,modelController:this.modelController,viewManager:this.viewManager,styleManager:this.styleManager,dataTransformer:this.dataTransformer,utils:r,requestUtil:new A(this.settings.request),featureFlags:new _(this.settings.siteAlias,this.logger),preloadHandler:this.preloadHandler,viewHeaders:this.resources.viewHeaders,localisation:this.localisation,resourceManager:this.resourceManager};return e.create(t)}getAllLogs(){return{front:this.getLogs(),view:this.viewManager.getLogs(),resource:this.resourceManager.getLogs(),model:this.modelController.getLogs()}}setSite(e){this.configReader.updateConfigByPath("site",e),this.configReader.getCms("site",{noCache:!0}),this.configProcessor.resetCache()}apiReady(e){this.logger.debug("Core: Api ready."),this.viewManager.apiReady(e),this.modelController.setCacheHandler(new E([this.viewManager])),this.onReady(e)}onReady(e){this.emitEntry("onReady",e)}setData(e){if(!e||!this.settings.transform&&!Array.isArray(e)||this.settings.transform&&!e.data)throw new Error("[Core] Cannot set data. Invalid input. "+(this.settings.transform?"Expecting property data, none given.":`Expecting an array, ${typeof e} given.`));this.viewManager.viewMap.clear();const t=this.settings.transform?this.dataTransformer.backendToInternal(e,{blacklist:this.configReader.get("data.blacklist")||[],skipOffstage:!0}):e;let r=null;const i=this.emitEntry("onDataReady",t);i.length&&(this.logger.warn("[Core] Entry-hook 'onDataReady' has modifyed input-data."),r=i.pop()),this.modelController.setData(r||t),this.resourceManager.rootModelReady(this.modelController.getRootModel()),this.localisation.overrideLanguage(this.modelController.getRootModel().get("fields.seolanguage")),this.modelController.notifyOnAcceptContent(),this.emitEntry("onAcceptContent"),this.emitEvent("acceptContent")}serializeView(e=this.modelController.models){return this.dataTransformer.modelsToView(e)}serializeForFragmentApi(e=this.modelController.models,{device:t=this.settings.device,stringify:r=!0,recursive:i=!0}={}){return this.dataTransformer.modelsToFragmentApi(e,{device:t,stringify:r,recursive:i})}render(e,{transform:t}={}){return new Promise(((r,i)=>{void 0!==t&&(this.settings.transform=!!t),this.setData(e),r(this.draw())}))}draw(e){return this.viewManager.draw(this.modelController.models,(t=>{e&&e(t)}))}getMarkup(e){if(!e)return this.logger.warn("Core: No model supplied. Will return empty string."),"";const t=this.viewManager.getView(e);return t?t.getMarkupString()||"":(this.logger.warn(`Core: Cannot get view for model ${e.getPositionedPath()}. Will return empty string.`),"")}}var U=t.Q;
//# sourceMappingURL=Core.js.map

/***/ }),

/***/ "./public/common/labrador/Mapper.js":
/*!******************************************!*\
  !*** ./public/common/labrador/Mapper.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Mapper": () => (/* binding */ Mapper)
/* harmony export */ });
/* harmony import */ var _ClientData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientData.js */ "./public/common/labrador/ClientData.js");
/* harmony import */ var _transformers_source_LabradorApi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformers/source/LabradorApi.js */ "./public/common/labrador/transformers/source/LabradorApi.js");
/* harmony import */ var _transformers_source_DachserJson_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformers/source/DachserJson.js */ "./public/common/labrador/transformers/source/DachserJson.js");
/* harmony import */ var _transformers_source_KilkayaStreams_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transformers/source/KilkayaStreams.js */ "./public/common/labrador/transformers/source/KilkayaStreams.js");
/**
 * Transform JSON from named source to internal format
 * Todo: Add LabradorJSON, Kilkaya, etc
 */





class Mapper {

    constructor({
        source, image_server, mapperSettings = {}, settings = { useEditorProxy: false }
    } = {}) {
        this.source = source;
        this.useEditorProxy = settings.useEditorProxy;
        this.image_server = image_server;
        this.mapperSettings = mapperSettings;
    }

    // (array / ClientData)
    map(data) {
        const clientData = new _ClientData_js__WEBPACK_IMPORTED_MODULE_0__.ClientData();
        switch (this.source) {
            case 'LabradorApi':
                return this.mapLabradorApi(data, clientData);
            case 'DachserJson':
                return this.mapDachserJson(data, clientData);
            case 'KilkayaStreams':
                return this.mapKilkayaStreams(data, clientData);
            default:
                console.warn(`[Mapper] Unsupported source ${ this.source }`);
                return [];
        }
    }

    // Data is Labrador API-format
    mapLabradorApi(rawInput, clientData) {
        const input = this.resolveProxy(rawInput);
        if (!input || !input.result || !input.result.length) {
            return clientData;
        }
        const mapper = new _transformers_source_LabradorApi_js__WEBPACK_IMPORTED_MODULE_1__.LabradorApi(this.mapperSettings);
        clientData.setData(mapper.map(input));
        clientData.setTotalCount(input.totalCount);
        return clientData;
    }

    mapDachserJson(rawInput, clientData) {
        const input = this.resolveProxy(rawInput);
        if (!input || !input.result || !input.result.length) {
            return clientData;
        }
        const mapper = new _transformers_source_DachserJson_js__WEBPACK_IMPORTED_MODULE_2__.DachserJson(this.mapperSettings);
        clientData.setData(mapper.map(input));
        clientData.setTotalCount(input.totalCount);
        return clientData;
    }

    mapKilkayaStreams(input, clientData) {
        if (!input || !input.stream || !input.stream.length) {
            return clientData;
        }
        const mapper = new _transformers_source_KilkayaStreams_js__WEBPACK_IMPORTED_MODULE_3__.KilkayaStreams(this.mapperSettings);
        clientData.setData(mapper.map(input.stream));
        clientData.setTotalCount(input.stream.length);
        return clientData;
    }

    // Editor may use a proxy returning a JSON-string @ input.value
    resolveProxy(input) {
        if (!this.useEditorProxy) {
            return input;
        }
        return JSON.parse(input.value);
    }

}


/***/ }),

/***/ "./public/common/labrador/Reader.js":
/*!******************************************!*\
  !*** ./public/common/labrador/Reader.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Reader": () => (/* binding */ Reader)
/* harmony export */ });
/**
 * Fetch data and transform to internal format.
 * Pagination etc. must be handled by consumer.
 * Requests are cached.
 */

class Reader {

    constructor({ url, mappers = [] } = {}) {
        this.url = url;
        this.mappers = mappers;
        this.modifiedUrl = this.url;
        this.cache = new Map(); // Key: url, value: Instance of ClientData
    }

    // (Promise)
    read() {
        return new Promise((resolve, reject) => {
            if (this.cache.has(this.modifiedUrl)) {
                resolve(this.mapData(this.cache.get(this.modifiedUrl)));
                return;
            }
            fetch(this.modifiedUrl)
                .then((response) => response.json())
                .then((data) => {
                    this.cache.set(this.modifiedUrl, data);
                    const result = this.mapData(data);
                    resolve(result);
                }).catch((error) => {
                    console.log(`[Reader] Failed to fetch/transform data. Please check input params. Error:`);
                    console.error(error);
                });
        });
    }

    // (ClientData)
    mapData(data) {
        let result = data;
        for (const mapper of this.mappers) {
            result = mapper.map(result);
        }
        return result;
    }

    // (void)
    updateUrl(url) {
        this.modifiedUrl = url;
    }

    // (promise)
    reload(clearCache = false) {
        if (clearCache) {
            this.cache.delete(this.modifiedUrl);
        }
        return this.read();
    }

    // nextPage() {
    //     // ...
    // }

    // previousPage() {
    //     // ...
    // }

}


/***/ }),

/***/ "./public/common/labrador/Renderer.js":
/*!********************************************!*\
  !*** ./public/common/labrador/Renderer.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Renderer": () => (/* binding */ Renderer)
/* harmony export */ });
/* harmony import */ var _Core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Core.js */ "./public/common/labrador/Core.js");
/* harmony import */ var _build_modules_client_modules_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../build/modules/client_modules.js */ "./build/modules/client_modules.js");
/* harmony import */ var _build_modules_client_package_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../build/modules/client_package.js */ "./build/modules/client_package.js");
/**
 * Create an instance of Labrador rendering engine
 * Uses view-resources from Baseview
 */





class Renderer {

    constructor(settings) {

        console.group('[Labrador] Setup rendering engine');

        const input = Renderer.resolveConfig(settings);

        // Javascript modules
        const behaviours = {};

        // Multiview: Add entries from subsequent views to the entries-array
        const entries = [_build_modules_client_modules_js__WEBPACK_IMPORTED_MODULE_1__.Entry];

        for (const key of Object.keys(_build_modules_client_modules_js__WEBPACK_IMPORTED_MODULE_1__.behaviours)) {
            // Multiview: Add behaviours from subsequent views to the behaviours[key]-array
            behaviours[key] = [_build_modules_client_modules_js__WEBPACK_IMPORTED_MODULE_1__.behaviours[key]];
        }

        let debug = false;
        if (new URLSearchParams(window.location.search).get('debug')) {
            debug = true;
        }

        window.Sys = { logger: console };

        this.renderer = new _Core_js__WEBPACK_IMPORTED_MODULE_0__.Core({
            logger: window.Sys.logger,
            settings: {
                siteAlias: input.site.alias,
                device: input.app.device,
                debug,
                transform: input.app.transform // Will require data in internal format
            },
            resources: {
                config: {
                    site: {
                        alias: input.site.alias,
                        display_name: input.site.display_name,
                        domain: input.site.domain,
                        id: input.site.id
                    },
                    image_server: input.app.image_server,
                    app: {
                        mode: 'presentation',
                        abc: 123
                    },
                    customer: { ..._build_modules_client_package_js__WEBPACK_IMPORTED_MODULE_2__.config, ...input.config },
                    ConfigObject: { ...input.ConfigObject || {} }
                },
                templates: {
                    view: _build_modules_client_package_js__WEBPACK_IMPORTED_MODULE_2__.templates
                },
                properties: _build_modules_client_package_js__WEBPACK_IMPORTED_MODULE_2__.properties,
                views: ['baseview_client']
            },
            globals: window,
            callbacks: {},
            entries,
            behaviours
        });
        this.api = this.renderer.getApi();
        console.groupEnd();
    }

    // (object)
    static resolveConfig(conf) {
        const site = conf.site || {};
        const app = conf.app || {};
        return {
            config: conf.config || {},
            ConfigObject: conf.ConfigObject || {},
            site: {
                alias: site.alias,
                display_name: site.display_name,
                id: site.id,
                domain: site.domain,
            },
            app: {
                debug: !!app.debug,
                image_server: app.image_server,
                device: app.device,
                transform: !!app.transform
            }
        };
    }

    // (void) data: ClientData or array
    setData(data) {
        return this.renderer.setData(typeof data.getData === 'function' ? data.getData() : data);
    }

    // (Promise)
    render() {
        return new Promise((resolve, reject) => {
            console.group('[Labrador] Render data');
            this.renderer.draw((result) => {
                resolve(result);
                console.groupEnd();
            });
        });
    }

}


/***/ }),

/***/ "./public/common/labrador/source/FrontContentMapper.js":
/*!*************************************************************!*\
  !*** ./public/common/labrador/source/FrontContentMapper.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FrontContentMapper": () => (/* binding */ FrontContentMapper)
/* harmony export */ });
/**
 * Modify data for each article in the search result
 * Set styling and content
 * Input is an array of articles
 * Output is an array of rows
 */
class FrontContentMapper {

    constructor(settings) {
        this.layout = settings.layout || {};
        this.hide_items = this.layout.hide_items || [];
        this.alignImage = settings.alignImage ? `float${ settings.alignImage.charAt(0).toUpperCase() + settings.alignImage.slice(1) }` : '';
        this.fallbackImage = settings.fallbackImage; // Define in admin: /settings/cp?page=fallback_image
        this.imageWidth = settings.imageWidth;
    }

    // (ClientData)
    map(clientData) {
        clientData.setData(
            clientData.getData().map((itm) => {
                const item = { ...itm };
                if (item.children && item.children[0]) {
                    const image = item.children[0];
                    image.contentdata.fields.float = { vp: { desktop: this.alignImage } };
                    image.contentdata.fields.whRatio = { vp: { desktop: this.layout.imageAspectRatio || 0.5 } };
                    image.width = { vp: { desktop: this.imageWidth, mobile: 100 } };
                } else if (this.fallbackImage) {
                    item.children.push({
                        type: 'image',
                        contentdata: {
                            fields: {
                                imageurl: { value: `${ this.fallbackImage }` },
                                float: { vp: { desktop: this.alignImage } },
                                whRatio: { vp: { desktop: this.layout.imageAspectRatio || 0.5 } }
                            }
                        },
                        width: { vp: { desktop: this.imageWidth, mobile: 100 } },
                        metadata: {
                            style_preset: { value: 'fallbackImage' }
                        }
                    });
                }
                for (const part of this.hide_items) {
                    switch (part) {
                        case 'title':
                            item.metadata.hideTitle = { value: true };
                            break;
                        case 'subtitle':
                            item.metadata.hidesubtitle = { value: true };
                            break;
                        case 'image':
                            item.metadata.hideimage = { value: true };
                            break;
                        default:
                            break;
                    }
                }
                if (!this.hide_items.includes('kicker')) {
                    item.metadata.showKicker = { value: true };
                }
                // Set teaser title and subtitle as title and subtitle if they exist. 
                item.contentdata.fields.teaserTitle.value && (item.contentdata.fields.title = item.contentdata.fields.teaserTitle);
                item.contentdata.fields.teaserSubtitle.value && (item.contentdata.fields.subtitle = item.contentdata.fields.teaserSubtitle);

                return item;
            })

// 0
// : 
// "title"
// 1
// : 
// "subtitle"
// 2
// : 
// "image"
// 3
// : 
// "kicker"
        );
        return clientData;
    }

}


/***/ }),

/***/ "./public/common/labrador/source/FrontContentRenderer.js":
/*!***************************************************************!*\
  !*** ./public/common/labrador/source/FrontContentRenderer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FrontContentRenderer": () => (/* binding */ FrontContentRenderer)
/* harmony export */ });
/* harmony import */ var _Mapper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Mapper.js */ "./public/common/labrador/Mapper.js");
/* harmony import */ var _Reader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Reader.js */ "./public/common/labrador/Reader.js");
/* harmony import */ var _Renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Renderer.js */ "./public/common/labrador/Renderer.js");
/* harmony import */ var _FrontContentMapper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FrontContentMapper.js */ "./public/common/labrador/source/FrontContentMapper.js");
/* harmony import */ var _transformers_prosessors_Filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transformers/prosessors/Filter.js */ "./public/common/labrador/transformers/prosessors/Filter.js");
/* harmony import */ var _transformers_prosessors_Tags_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transformers/prosessors/Tags.js */ "./public/common/labrador/transformers/prosessors/Tags.js");
/* harmony import */ var _transformers_prosessors_RowLines_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../transformers/prosessors/RowLines.js */ "./public/common/labrador/transformers/prosessors/RowLines.js");
/* harmony import */ var _transformers_prosessors_Setter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../transformers/prosessors/Setter.js */ "./public/common/labrador/transformers/prosessors/Setter.js");
/* harmony import */ var _transformers_layout_RowsAndColumns_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../transformers/layout/RowsAndColumns.js */ "./public/common/labrador/transformers/layout/RowsAndColumns.js");
/* harmony import */ var _transformers_layout_RandomRows_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../transformers/layout/RandomRows.js */ "./public/common/labrador/transformers/layout/RandomRows.js");
/**
 * Handle data and rendering engine for tagboard
 */












class FrontContentRenderer {

    constructor({
        url, app = {}, site = {}, settings = {}
    } = {}) {
        this.mappers = {
            api: new _Mapper_js__WEBPACK_IMPORTED_MODULE_0__.Mapper({ source: settings.sourceType, image_server: app.image_server, settings: { useEditorProxy: settings.isEditor && (settings.sourceType !== 'LabradorApi' || !!settings.useProxy) } }),
            tagboard: new _FrontContentMapper_js__WEBPACK_IMPORTED_MODULE_3__.FrontContentMapper(settings),
            filter: new _transformers_prosessors_Filter_js__WEBPACK_IMPORTED_MODULE_4__.Filter({ data: settings.articleFilterList }),
            tags: new _transformers_prosessors_Tags_js__WEBPACK_IMPORTED_MODULE_5__.Tags({ tagGroups: [], articleCount: settings.articleCount }),
            setter: new _transformers_prosessors_Setter_js__WEBPACK_IMPORTED_MODULE_7__.Setter({ data: settings.style }),
            rows: settings.organizer === 'RowsAndColumns' ? new _transformers_layout_RowsAndColumns_js__WEBPACK_IMPORTED_MODULE_8__.RowsAndColumns({ layout: settings.layout }) : new _transformers_layout_RandomRows_js__WEBPACK_IMPORTED_MODULE_9__.RandomRows({ layout: settings.layout }),
            lines: new _transformers_prosessors_RowLines_js__WEBPACK_IMPORTED_MODULE_6__.RowLines(settings)
        };

        this.reader = new _Reader_js__WEBPACK_IMPORTED_MODULE_1__.Reader({
            url,
            mappers: [
                this.mappers.api,
                this.mappers.tagboard,
                this.mappers.filter,
                this.mappers.tags,
                this.mappers.setter,
                this.mappers.rows,
                this.mappers.lines
            ]
        });
        this.renderer = new _Renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer({
            app,
            site,
            ConfigObject: settings.ConfigObject || {}
        });
    }

    // (Promise)
    read() {
        return new Promise((resolve, reject) => {
            this.reader.read().then((result) => {
                if (!result.data.count === 0) {
                    reject();
                    return;
                }
                this.render(result).then((res) => {
                    resolve(res);
                }).catch((error) => {
                    reject(error);
                });
            }).catch((error) => {
                reject(error);
            });
        });
    }

    render(result) {
        return new Promise((resolve, reject) => {
            if (!result.data.count === 0) {
                reject();
                return;
            }
            this.renderer.setData(result);
            this.renderer.render().then((markups) => {
                result.setMarkups(markups);
                resolve(result);
            }).catch((error) => {
                reject(error);
            });
        });
    }

    filter(tags) {
        if (Array.isArray(tags) && tags.length) {
            // this.tagGroups = [...tags];
            this.mappers.tags.tagGroups = [...tags];
            // return this.read();
        }
        // return new Promise.reject();
    }

    updateUrl(url) {
        this.reader.updateUrl(url);
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/datatype.js":
/*!*********************************************************!*\
  !*** ./public/common/labrador/transformers/datatype.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "datatype": () => (/* binding */ datatype)
/* harmony export */ });
const datatype = {

    object: {

        /**
         * Get member of object by dot-notated string
         * @param  {string} key    The key to get from the object. Support dot-notation
         * @param  {object} object The object to query for the key
         * @param  {boolean} allowUndefined If set to true return undefined if member do not exist. Can be used to check if sometning actually exist.
         * @example object.get("a.b", { a: { b: 2 } }) // will return 2.
         * @return {mixed}         The value from the query or null
         */
        get: (key = '', object = {}, allowUndefined = false) => {
            const callback = (obj, i) => (obj && (typeof (obj[i]) !== 'undefined') ? obj[i] : (allowUndefined ? undefined : null));
            return key.split('.').reduce(callback, object);
        },

        /**
         * Set a value to an object
         * @example objectHelper.set("b.c", [1,2], {a: 1}). Result: {a:1, b:{c: [1,2]}}.
         * @param {string} path  Path for value. Support dot-notation (fields.title)
         * @param {mixed}  value The value to set
         * @param {object} obj   The object to set value on
         */
        set: (path, value, obj) => {
            path.split('.').reduce((prev, cur, idx, arr) => {
                const isLast = (idx === arr.length - 1);
                if (isLast) {
                    prev[cur] = value;
                    return;
                }
                return (datatype.object.isObject(prev[cur])) ? prev[cur] : (prev[cur] = {});
            }, obj);
            return obj;
        },

        /**
         * Check if argument is an object
         * @return {Boolean}
         */
        isObject: (item) => item && typeof (item) === 'object' && !Array.isArray(item),

        // Deep merge
        // If any key contains an array this will not be merged but overridden.
        // source overrides target
        merge: (target, source) => {
            if (Array.isArray(target) && Array.isArray(source)) {
                return source;
            }
            const output = Object.assign(Array.isArray(target) ? [] : {}, target);
            if (datatype.object.isObject(target) && datatype.object.isObject(source)) {
                for (const key of Object.keys(source)) {
                    if (datatype.object.isObject(source[key])) {
                        // Case: target[key] = 'string', source[key] = {object} - Override
                        if (!(key in target) || !datatype.object.isObject(target[key])) {
                            Object.assign(output, { [key]: source[key] });
                        } else {
                            output[key] = datatype.object.merge(target[key], source[key]);
                        }
                    } else {
                        Object.assign(output, { [key]: source[key] });
                    }
                }
            }
            return output;
        }

    },

    string: {
        unique: (chars) => {
            const multiplier = `0x${ 10 ** (chars - 1) }`;
            return Math.floor((1 + Math.random()) * multiplier).toString(16);
        },
        strip_tags: (str = '') => (str || '').replace(/<(?:.|\n)*?>/gm, '').trim()
    }
};


/***/ }),

/***/ "./public/common/labrador/transformers/layout/RandomRows.js":
/*!******************************************************************!*\
  !*** ./public/common/labrador/transformers/layout/RandomRows.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RandomRows": () => (/* binding */ RandomRows)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./public/common/labrador/transformers/utils.js");


class RandomRows {

    constructor(options) {
        const layout = options.layout || {};
        this.options = {
            maxPixelWidth: layout.maxPixelWidth || 1000,
            imageAspectRatio: layout.imageAspectRatio || 0.6, // height / width
            maxRowSize: layout.maxRowSize || 4,
            minRowSize: layout.minRowSize || 1,
            selector: layout.selector || '',
            grid_size: layout.grid_size || 12
        };
    }

    // (ClientData) Add all supplied articles to rows.
    // Input is an array of articles
    // Use randow numer of columns for each row:
    // Range: [this.options.minRowSize - this.options.maxRowSize]
    map(clientData) {
        const data = clientData.getData();
        const result = [];
        if (!data.length) {
            return clientData;
        }
        const rows = [];
        let currentRow = [];
        let count = this.getRandomInt(this.options.minRowSize, this.options.maxRowSize);

        for (const article of data) {
            if (currentRow.length >= count) {
                rows.push(currentRow);
                currentRow = [];
                const lastCount = count;
                count = this.getRandomInt(this.options.minRowSize, this.options.maxRowSize);
                if (count === lastCount) {
                    // Try to avoid two following rows with same column-count
                    count = this.getRandomInt(this.options.minRowSize, this.options.maxRowSize);
                }
            }
            currentRow.push(article);
        }
        rows.push(currentRow);

        for (const articles of rows) {
            // Set width of each article/image in row:
            _utils_js__WEBPACK_IMPORTED_MODULE_0__.utils.decorateRow(articles, this.options);
            result.push({
                type: 'row',
                selector: this.options.selector || '',
                children: articles
            });
        }
        clientData.setData(result);
        return clientData;
    }

    getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/layout/RowsAndColumns.js":
/*!**********************************************************************!*\
  !*** ./public/common/labrador/transformers/layout/RowsAndColumns.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RowsAndColumns": () => (/* binding */ RowsAndColumns)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./public/common/labrador/transformers/utils.js");


class RowsAndColumns {

    constructor(options) {
        const layout = options.layout || {};
        this.options = {
            columnCount: layout.columnCount || 3,
            rowCount: layout.rowCount || 4,
            grid_size: layout.grid_size || 12,
            maxPixelWidth: layout.maxPixelWidth || 1000,
            imageAspectRatio: layout.imageAspectRatio || 0.6, // height / width
            selector: layout.selector || ''
        };
    }

    // (ClientData)
    map(clientData) {
        const decoratedRows = [];
        const rows = _utils_js__WEBPACK_IMPORTED_MODULE_0__.utils.groupRowsAndColums(clientData.getData(), this.options);
        for (const articles of rows) {
            _utils_js__WEBPACK_IMPORTED_MODULE_0__.utils.decorateRow(articles, this.options);
            decoratedRows.push({
                type: 'row',
                selector: this.options.selector || '',
                children: articles
            });
        }
        clientData.setData(decoratedRows);
        return clientData;
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/prosessors/Filter.js":
/*!******************************************************************!*\
  !*** ./public/common/labrador/transformers/prosessors/Filter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Filter": () => (/* binding */ Filter)
/* harmony export */ });
/* harmony import */ var _datatype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../datatype.js */ "./public/common/labrador/transformers/datatype.js");


// Remove articles that contain defined key/value pair(s).
class Filter {

    constructor(options) {
        this.options = {
            data: options.data || [] // Array of objects: [{ path: 'id', values: [123, 456] }, { path: 'fields.title', values: ['ignore me', 'and me'] }, ...]
        };
    }

    // (ClientData) Remove articles that match a specified value
    // Input: array of articles
    // Output: array of articles
    map(clientData) {
        const data = clientData.getData();
        if (!Array.isArray(data) || !this.options.data.length) {
            return clientData;
        }
        clientData.setData(data.filter((article) => {
            for (const opts of this.options.data) {
                if (Array.isArray(opts.values)) {
                    if (opts.values.includes(_datatype_js__WEBPACK_IMPORTED_MODULE_0__.datatype.object.get(opts.path, article))) {
                        return false;
                    }
                }
            }
            return true;
        }));
        return clientData;
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/prosessors/RowLines.js":
/*!********************************************************************!*\
  !*** ./public/common/labrador/transformers/prosessors/RowLines.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RowLines": () => (/* binding */ RowLines)
/* harmony export */ });
/* harmony import */ var _datatype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../datatype.js */ "./public/common/labrador/transformers/datatype.js");
/**
 * Get any number of articles and place them in rows.
 * Try to resize images and text to give each article the same height.
 * Note: Require a style-definition to generate css for text-size.
 */



class RowLines {

    constructor(settings) {
        this.active = settings.postprocessor === 'RowLines';
        this.aspectRatio = settings.layout.imageAspectRatio || 0.45;
        this.options = {
            ratioOptionsSource: {
                title: 1.4, subtitle: 1, kicker: 1, image: 1
            },
            ratioOptionsTarget: {
                title: 1.4, subtitle: 1, kicker: 1, image: 1
            },
            text_size: {
                min: 16, max: 70, base: 30
            },
            fieldSuffix: {
                size: 'text_size'
            }
        };
    }

    // Data is a list of rows
    // Group in rows and apply layout for each article in each row.
    // Todo: Remove grouping from this class and add an extra step in the transformer to group content.
    map(clientData) {
        if (!this.active) {
            return clientData;
        }
        const data = clientData.getData();
        this.autoLayoutRows(data, this.options);
        clientData.setData(data);
        return clientData;
    }

    autoLayoutRows(data, options) {
        data.forEach((row) => this.autoLayoutRow(row, options));
        return data;
    }

    autoLayoutRow(data, options) {
        const rowLength = data.children.length;

        // Get character length of each element in row:
        const contentLength = {
            kicker: data.children.map((child) => Math.max((child.contentdata.fields.kicker.value || '').length, 10)),
            title: data.children.map((child) => Math.max((_datatype_js__WEBPACK_IMPORTED_MODULE_0__.datatype.string.strip_tags(child.contentdata.fields.title.value || '')).length, 10)),
            subtitle: data.children.map((child) => Math.max((child.contentdata.fields.subtitle.value || '').length, 50)),
            image: data.children.map((child) => (child.children.length ? 177 : 0))
        };
        const keys = Object.keys(contentLength);

        const templateSizes = {
            title: 3, // Pixel-height per character
            kicker: 1.5, // Pixel-height per character
            subtitle: 0.54, // Pixel-height per character
            image: 0.5 // Pixel-height per character (based on height = 177px)
        };

        const ratioOptionsSource = options.ratioOptionsSource || {};
        const ratioOptionsTarget = options.ratioOptionsTarget || {};
        // const ratioLimits = options.ratioLimits || {};

        // Assure options. Set defaults:
        for (const key of keys) {
            ratioOptionsSource[key] = ratioOptionsSource[key] || 1; // Range: 0.1 - 1.9
            ratioOptionsTarget[key] = ratioOptionsTarget[key] || 1; // Range: 0.1 - 1.9
            // ratioLimits[key] = ratioLimits[key] || [0.5, 1.5];  // Range: [0.1 - 1.9, 0.1 - 1.9]
        }

        // Get calculated pixel-height of each element in row
        // This should match actual layout using image-height = 177px and title-size = text_size.base.
        const heights = [];
        for (let i = 0; i < rowLength; i++) {
            heights.push(
                parseInt((contentLength.title[i] * templateSizes.title * ratioOptionsSource.title)
                    + (contentLength.kicker[i] * templateSizes.kicker * ratioOptionsSource.kicker)
                    + (contentLength.subtitle[i] * templateSizes.subtitle * ratioOptionsSource.subtitle)
                    + (contentLength.image[i] * templateSizes.image * ratioOptionsSource.image), 10)
            );
        }

        // Get average height for elements in the row
        const avgHeight = this.getAvg(heights);

        // Get a list of what amount each element needs to resize in percent (1 = 100%, no resizing. 0.5 = 50%, shrink by half. ...).
        // Use the average height as base:
        // Todo: This data may be pre-processed to normalize against all rows ...
        const resize = heights.map((height) => avgHeight / height);

        for (const child of data.children) {
            const index = data.children.indexOf(child);
            const hasImage = contentLength.image[index] > 0;

            // 1.4 = 1.2 on each
            // 0.6 = 0.8 on each
            const elementResize = hasImage ? (resize[index] - 1) / 2 + 1 : resize[index];

            if (hasImage) {
                const elementDiffImage = elementResize * ratioOptionsTarget.image;
                child.children[0].contentdata.fields.whRatio = {
                    value: this.aspectRatio * elementDiffImage
                };
            }

            let size = Math.round(options.text_size.base * elementResize * ratioOptionsTarget.title);
            if (size < options.text_size.min) {
                size = options.text_size.min;
            }
            if (size > options.text_size.max) {
                size = options.text_size.max;
            }
            _datatype_js__WEBPACK_IMPORTED_MODULE_0__.datatype.object.set(`attributes.${ this.options.fieldSuffix.size }.value`, size, child.contentdata.fields.title)
        }
    }

    getAvg(data) {
        return Math.round(data.reduce((a, b) => a + b, 0) / data.length);
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/prosessors/Setter.js":
/*!******************************************************************!*\
  !*** ./public/common/labrador/transformers/prosessors/Setter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Setter": () => (/* binding */ Setter)
/* harmony export */ });
/* harmony import */ var _datatype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../datatype.js */ "./public/common/labrador/transformers/datatype.js");

// Set data specified in options on every article.
class Setter {

    constructor(options) {
        this.options = {
            data: options.data || [] // Array of objects: [{ path: 'metadata.background_color', value: 'red' }, ...]
        };
    }

    // (array) Set data specified in options on every article.
    // Input: array of articles
    // Output: array of articles
    map(clientData) {
        if (!this.options.data.length) {
            return clientData;
        }
        const data = clientData.getData();
        for (const article of data) {
            for (const opts of this.options.data) {
                if (opts.path && opts.value !== undefined) {
                    _datatype_js__WEBPACK_IMPORTED_MODULE_0__.datatype.object.set(opts.path, opts.value, article);
                }
            }
        }
        clientData.setData(data);
        return clientData;
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/prosessors/Tags.js":
/*!****************************************************************!*\
  !*** ./public/common/labrador/transformers/prosessors/Tags.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tags": () => (/* binding */ Tags)
/* harmony export */ });
// Filter articles based on tags
class Tags {

    constructor({ tagGroups = [], articleCount } = {}) {
        // Array of arrays with tags. [[tag1, tag2], [tag3, tag4]]
        // Use OR inside each tag group and AND between them
        // Example above will return articles with tag (tag1 OR tag2) AND (tag3 OR tag4)
        this.tagGroups = Array.isArray(tagGroups) ? tagGroups : [];
        this.articleCount = articleCount;
    }

    // (ClientData)
    // Input: array of articles
    // Output: array of articles
    map(clientData) {
        const data = clientData.getData();
        if (!Array.isArray(data)) { // || !this.tagGroups.length this for some reason breaks it
            return clientData;
        }
        let filteredData = data;
        if (this.tagGroups.length) {
            filteredData = data.filter((article) => {
                for (const group of this.tagGroups) {
                    if (!this.tagGroupMatch(group, article)) {
                        return false;
                    }
                }
                return true;
            });
        }

        if (this.articleCount) {
            filteredData = filteredData.slice(0, this.articleCount);
        }

        clientData.setData(filteredData);
        return clientData;
    }

    tagGroupMatch(tagGroup, data) {
        if (!tagGroup.length) {
            return true;
        }
        for (const tag of tagGroup) {
            if (data.contentdata.tags.includes(tag)) {
                return true;
            }
        }
        return false;
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/source/DachserJson.js":
/*!*******************************************************************!*\
  !*** ./public/common/labrador/transformers/source/DachserJson.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DachserJson": () => (/* binding */ DachserJson)
/* harmony export */ });
/*
Input from Dachser JSON feed.
(https://example.com?lab_viewport=json)
Data-format:
{
    result: [
        {
            "type": "article",
            "id": 101611,
            "instance_of": 101547,
            "parent": 101610,
            "status": "A",
            "tags": [
                "nyheter"
            ],
            "byline": "Stian Andersen",
            "bylineImage": "/?imageId=100196&cropw=35.175879396985&whRatio=1&x=50&bbRatio=0.13232514177694&croph=52.238805970149",
            "displayByline": "",
            "hideAds": "",
            "kicker": "",
            "lab_site_id": "1",
            "paywall": "",
            "published": "2020-09-20T21:41:41+02:00",
            "url": "/m24/101547",
            "section": "nyheter",
            "showcomments": "",
            "site_alias": "medier24_event",
            "site_id": "14",
            "description": "subtitle Artikkel fra feed-forside #1",
            "title": "Artikkel fra feed-forside #1",
            "images": [
                {
                    "url": "http://image-www-default.localhost?imageId=100240&x=0&y=0&cropw=100&croph=85.774647887324&heightw=100&heighth=85.774647887324&heightx=0&heighty=0",
                    "url_size": "http://image-www-default.localhost/100240.jpg?imageId=100240&x=0&y=0&cropw=100&croph=85.774647887324&width=353&height=159",
                    "default": "1"
                }
            ]
        },
        ...
    ]
}
*/

class DachserJson {

    constructor(options) {
        this.options = {
            ignore: options.ignore || [] // Parts of article to ignore (['image', 'subtitle'])
        };
    }

    // Input: Object from API.
    // Output: Array of articles.
    map(data) {
        return (data.result || []).map((article) => this.transformArticle(article));
    }

    allowFragment(name) {
        return !this.options.ignore.includes(name);
    }

    transformArticle(article) {
        const result = {
            type: 'article',
            contentdata: {
                id: article.id,
                fields: {
                    title: this.allowFragment('title') ? { value: article.title } : null,
                    subtitle: this.allowFragment('subtitle') ? { value: article.description } : null,
                    kicker: this.allowFragment('kicker') ? { value: article.kicker } : null,
                    published_url: { value: article.url }
                },
                tags: Array.isArray(article.tags) ? article.tags : []
            },
            metadata: article.metadata || {},
            width: article.width || 100,
            widthVp: article.widthVp || {},
            children: []
        };
        if (article.images && article.images.length && this.allowFragment('image')) {
            result.children.push(this.transformImage(article.images[0]));
        }
        return result;
    }

    transformImage(data) {
        return {
            type: 'image',
            contentdata: {
                fields: {},
                instance_of: data.id,
                metadata: {}
            }
        };
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/source/KilkayaStreams.js":
/*!**********************************************************************!*\
  !*** ./public/common/labrador/transformers/source/KilkayaStreams.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KilkayaStreams": () => (/* binding */ KilkayaStreams)
/* harmony export */ });
/*
Input: Articles from Kilkaya Streams (personalized content)
Output: (Array) List of articles, internal format

Data-format:
[{
    "url": "www.kk.no/underholdning/80465481",
    "score": 100,
    "streamitem": "item_0",
    "title": "Nettet koker av Amunds drikkeflaske",
    "image": "https://labrador-www.kk.no/images/80435897.jpg?imageId=80435897&panow=100.18957345972&panoh=30.420168067227&panox=0.18957345971564&panoy=10.053277310924&heightw=47.113402061856&heighth=68.219178082192&heightx=43.120257731959&heighty=0&width=1200&height=630",
    "desc": "",
    "tags": "",
    "section": "underholdning",
    "paid": false
}, ...]
*/
class KilkayaStreams {

    constructor(options) {
        this.options = {
            ignore: options.ignore || [] // Parts of article to ignore (['image', 'subtitle'])
        };
    }

    map(data) {
        return (data || []).map((article) => this.transformArticle(article));
    }

    allowFragment(name) {
        return !this.options.ignore.includes(name);
    }

    transformArticle(article) {
        const result = {
            type: 'article',
            contentdata: {
                fields: {
                    title: { value: this.allowFragment('title') ? article.title : null },
                    subtitle: { value: this.allowFragment('subtitle') ? article.desc : null },
                    published_url: { value: this.ensureUrlProtocol(article.url) },
                    paywall: { value: article.paid ? '1' : '' }
                },
                primaryTags: {
                    section: article.section
                }
            },
            metadata: {},
            children: []
        };
        if (article.image && this.allowFragment('image')) {
            result.children.push(this.transformImage(this.ensureUrlProtocol(article.image)));
        }
        return result;
    }

    ensureUrlProtocol(url = '', protocol = 'https') {
        if (url.startsWith('//')) {
            return url;
        }
        const newUrl = url.replace('http://', '').replace('https://', '');
        return `${ protocol }://${ newUrl }`;
    }

    transformImage(url) {
        return {
            type: 'image',
            contentdata: {
                fields: {
                    imageurl: { value: url ? encodeURIComponent(url) : '' }
                }
            },
            metadata: {}
        };
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/source/LabradorApi.js":
/*!*******************************************************************!*\
  !*** ./public/common/labrador/transformers/source/LabradorApi.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LabradorApi": () => (/* binding */ LabradorApi)
/* harmony export */ });
/*
Input: Article from Labrador Search API
Output: (Array) List of articles, internal format
*/

class LabradorApi {

    constructor(options) {
        this.options = {
            imageServer: options.imageServer || '',
            ignore: options.ignore || [], // Parts of article to ignore (['image', 'subtitle'])
            extraFields: Array.isArray(options.extraFields) ? options.extraFields : []
        };
    }

    // Input: Object from API.
    // Output: Array of articles.
    map(data) {
        return (data.result || []).map((article) => this.transformArticle(article));
    }

    transformArticle(item) {
        const result = {
            type: item.type,
            contentdata: {
                id: item.id,
                fields: {
                    title: { value: item.titleHTML || item.title || null },
                    teaserTitle: { value: item.teaserTitle || null },
                    subtitle: { value: item.subtitleHTML || item.subtitle || null },
                    teaserSubtitle: { value: item.teaserSubtitle || null },
                    kicker: { value: item.teaserKicker || item.kicker || null },
                    teaserKicker: { value: item.teaserKicker || null },
                    published_url: { value: item.siteDomain + item.published_url },
                    byline: { value: item.byline_names },
                    bylineImage: { value: item.full_bylines && item.full_bylines[0] ? item.full_bylines[0].imageUrl : '' },
                    seotitle: { value: item.seotitle },
                    seodescription: { value: item.seodescription },
                    paywall: { value: item.paywall },
                    bodytext: { value: item.bodytext },
                    site_id: { value: item.site_id },
                    published: { value: item.published },
                    modified: { value: item.modified },
                    created: { value: item.created }
                },
                primaryTags: {
                    section: item.section_tag
                },
                tags: (item.tags || '').split(', ')
            },
            metadata: {},
            width: 100,
            widthVp: {},
            children: []
        };
        for (const field of this.options.extraFields) {
            if (item[field] !== undefined && result.contentdata.fields[field] === undefined) {
                result.contentdata.fields[field] = {
                    value: item[field]
                };
            }
        }
        if (item.frontCropUrl) {
            result.children.push(this.transformImage(item));
        }
        return result;
    }

    transformImage(item) {
        const fields = {
            caption: { value: item.imageCaption }
        };
        if (item.frontCropUrl) {
            // "?imageId=128902&panoh=21.25&panow=29.56&panox=27.75&panoy=35.62&heighth=100&heightw=100&heightx=0&heighty=0"
            const parts = item.frontCropUrl.split('?');
            if (parts.length === 2) {
                const ignored = ['imageId'];
                const items = parts[1].split('&');
                for (const imgParts of items) {
                    const [key, value] = imgParts.split('=');
                    if (key && !ignored.includes(key)) {
                        fields[key] = { value };
                    }
                }
                // Transform params in front crop url to standard params used in the rest of Labrador:
                const transform = {
                    panox: 'x', panoy: 'y', panow: 'cropw', panoh: 'croph'
                };
                for (const [key, value] of Object.entries(transform)) {
                    if (fields[key] !== undefined) {
                        fields[value] = fields[key];
                        delete fields[key];
                    }
                }
            }
        }
        return {
            type: 'image',
            contentdata: {
                instance_of: item.image,
                fields
            },
            metadata: {}
        };
    }

}


/***/ }),

/***/ "./public/common/labrador/transformers/utils.js":
/*!******************************************************!*\
  !*** ./public/common/labrador/transformers/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "utils": () => (/* binding */ utils)
/* harmony export */ });
const utils = {

    // (void) Set article and image sizes.
    // Modify data in place.
    decorateRow: (row, options) => {
        const widths = utils.distributePercent(100, row.length, options.grid_size);
        for (const article of row) {
            article.width = widths.shift();
        }
    },

    // (array) Add articles to columns in rows.
    groupRowsAndColums: (data, options) => {
        const rows = [];
        let currentRow = [];
        for (const article of data) {
            if (currentRow.length >= options.columnCount) {
                rows.push(currentRow);
                if (rows.length >= options.rowCount) {
                    return rows;
                }
                currentRow = [];
            }
            currentRow.push(article);
        }
        rows.push(currentRow);
        return rows;
    },

    // (int) Convert a percent-value to a grid-value
    // Example for 12-grid system: 50 -> 6
    percentToGrid: (percentValue, totalGridSize = 12) => Math.round((percentValue / 100) * totalGridSize),

    // (float) Convert a grid-value to a percent value.
    // Example for 12-grid system: 6 -> 50
    gridToPercent: (gridValue, totalGridSize = 12) => utils.floatPrecision((gridValue / totalGridSize) * 100),

    // (float) Precision: 2 decimals. Always use this method to set grid-widths to keep format consistent.
    // Examples: 33.333333 -> 33.33, 50 -> 50
    floatPrecision: (size) => parseFloat(parseFloat(size).toFixed(2)),

    // (array) How to space for example 5 items in 100% in a 12-grid system?
    // 100/5 = 20, this will result in 5 items using grid-2 ... 2 short ...
    distributePercent: (size, count, totalGridSize = 12) => {
        const grids = utils.distributeGrid(utils.percentToGrid(size, totalGridSize), count);
        return grids.map((g) => utils.gridToPercent(g, totalGridSize));
    },

    // (array)
    distributeGrid: (gridSize, requestedCount) => {
        let count = requestedCount;
        if (count > gridSize) {
            count = gridSize;
            Sys.logger.warn(`grid.distributeGrid: Requested count ${ requestedCount } is larger than gridSize ${ gridSize }. Will use count ${ count }.`);
        }
        const oneGrid = gridSize / count;
        if (Number.isInteger(oneGrid)) {
            return Array(count).fill(oneGrid);
        }
        let used = 0;
        let up = true;
        let result = [];
        for (let i = 0; i < count; i++) {
            const fullGridValue = up ? Math.ceil(oneGrid) : Math.floor(oneGrid);
            result.push(fullGridValue);
            used += fullGridValue;
            up = !up;
        }
        let diff = used - gridSize;
        if (used !== gridSize) {
            const newResult = [];
            while (diff > 0 && result.length) {
                let n = result.shift();
                if (n > 1) {
                    n--;
                    diff -= 1;
                }
                newResult.push(n);
            }
            result = result.concat(newResult);
        }
        if (result.length !== count) {
            Sys.logger.warn(`Utility-method grid.distributeGrid will return a faulty array. Excpected a count of ${ count }, got ${ result.length } ...`);
        }
        return result;
    }

};


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*********************************!*\
  !*** ./modules/index_editor.js ***!
  \*********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Entry": () => (/* reexport safe */ _Editor_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "appsModules": () => (/* reexport safe */ _apps_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "behaviours": () => (/* reexport module object */ _behaviours_index_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "collections": () => (/* reexport module object */ _collections_index_js__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "plugins": () => (/* reexport module object */ _plugins_index_js__WEBPACK_IMPORTED_MODULE_3__)
/* harmony export */ });
/* harmony import */ var _behaviours_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./behaviours/index.js */ "./modules/behaviours/index.js");
/* harmony import */ var _Editor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Editor.js */ "./modules/Editor.js");
/* harmony import */ var _collections_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collections/index.js */ "./modules/collections/index.js");
/* harmony import */ var _plugins_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugins/index.js */ "./modules/plugins/index.js");
/* harmony import */ var _apps_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./apps/index.js */ "./modules/apps/index.js");
// Expose resources for Labrador editor







})();

var __webpack_exports__Entry = __webpack_exports__.Entry;
var __webpack_exports__appsModules = __webpack_exports__.appsModules;
var __webpack_exports__behaviours = __webpack_exports__.behaviours;
var __webpack_exports__collections = __webpack_exports__.collections;
var __webpack_exports__plugins = __webpack_exports__.plugins;
export { __webpack_exports__Entry as Entry, __webpack_exports__appsModules as appsModules, __webpack_exports__behaviours as behaviours, __webpack_exports__collections as collections, __webpack_exports__plugins as plugins };

//# sourceMappingURL=editor_modules.js.map